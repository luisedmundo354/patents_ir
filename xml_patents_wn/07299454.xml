<us-patent-grant lang="EN" dtd-version="v4.2 2006-08-23" file="US07299454-20071120.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20071106" date-publ="20071120">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>07299454</doc-number>
<kind>B2</kind>
<date>20071120</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>10784600</doc-number>
<date>20040223</date>
</document-id>
</application-reference>
<us-application-series-code>10</us-application-series-code>
<us-term-of-grant>
<us-term-extension>484</us-term-extension>
<disclaimer>
<text>This patent is subject to a terminal disclaimer.</text>
</disclaimer>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>9</main-group>
<subgroup>44</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>717125</main-classification>
<further-classification>717124</further-classification>
<further-classification>717126</further-classification>
</classification-national>
<invention-title id="d0e55">Method for multi-language debugging</invention-title>
<references-cited>
<citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5321841</doc-number>
<kind>A</kind>
<name>East et al.</name>
<date>19940600</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5469562</doc-number>
<kind>A</kind>
<name>Saether</name>
<date>19951100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>5604860</doc-number>
<kind>A</kind>
<name>McLaughlin</name>
<date>19970200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>5630131</doc-number>
<kind>A</kind>
<name>Palevich</name>
<date>19970500</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>5748975</doc-number>
<kind>A</kind>
<name>Van DeVanter</name>
<date>19980500</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>5801958</doc-number>
<kind>A</kind>
<name>Dangelo et al.</name>
<date>19980900</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>5835769</doc-number>
<kind>A</kind>
<name>Jervis et al.</name>
<date>19981100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>5836014</doc-number>
<kind>A</kind>
<name>Faiman</name>
<date>19981100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>5845121</doc-number>
<kind>A</kind>
<name>Carter</name>
<date>19981200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717131</main-classification></classification-national>
</citation>
<citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>5867822</doc-number>
<kind>A</kind>
<name>Sankar</name>
<date>19990200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>5944794</doc-number>
<kind>A</kind>
<name>Okamoto</name>
<date>19990800</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>5961593</doc-number>
<kind>A</kind>
<name>Gabber et al.</name>
<date>19991000</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>5966535</doc-number>
<kind>A</kind>
<name>Benedikt et al.</name>
<date>19991000</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>6012083</doc-number>
<kind>A</kind>
<name>Savitzky</name>
<date>20000100</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>709202</main-classification></classification-national>
</citation>
<citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>6016495</doc-number>
<kind>A</kind>
<name>McKeehan</name>
<date>20000100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>6018730</doc-number>
<kind>A</kind>
<name>Nichols</name>
<date>20000100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>6023578</doc-number>
<kind>A</kind>
<name>Birsan</name>
<date>20000200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>6028997</doc-number>
<kind>A</kind>
<name>Leymann et al.</name>
<date>20000200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>6029000</doc-number>
<kind>A</kind>
<name>Woolsey et al.</name>
<date>20000200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>6044217</doc-number>
<kind>A</kind>
<name>Brealey et al.</name>
<date>20000300</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>6067623</doc-number>
<kind>A</kind>
<name>Blakley, III et al.</name>
<date>20000500</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>6070184</doc-number>
<kind>A</kind>
<name>Blount</name>
<date>20000500</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>709200</main-classification></classification-national>
</citation>
<citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>6092102</doc-number>
<kind>A</kind>
<name>Wagner</name>
<date>20000700</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00024">
<document-id>
<country>US</country>
<doc-number>6119149</doc-number>
<kind>A</kind>
<name>Notani</name>
<date>20000900</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00025">
<document-id>
<country>US</country>
<doc-number>6141701</doc-number>
<kind>A</kind>
<name>Whitney</name>
<date>20001000</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>710  5</main-classification></classification-national>
</citation>
<citation>
<patcit num="00026">
<document-id>
<country>US</country>
<doc-number>6212546</doc-number>
<kind>B1</kind>
<name>Starkovich</name>
<date>20010400</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>709203</main-classification></classification-national>
</citation>
<citation>
<patcit num="00027">
<document-id>
<country>US</country>
<doc-number>6222533</doc-number>
<kind>B1</kind>
<name>Notani</name>
<date>20010400</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00028">
<document-id>
<country>US</country>
<doc-number>6226675</doc-number>
<kind>B1</kind>
<name>Meltzer et al.</name>
<date>20010500</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00029">
<document-id>
<country>US</country>
<doc-number>6230287</doc-number>
<kind>B1</kind>
<name>Pinard et al.</name>
<date>20010500</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00030">
<document-id>
<country>US</country>
<doc-number>6243737</doc-number>
<kind>B1</kind>
<name>Flanagan</name>
<date>20010600</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00031">
<document-id>
<country>US</country>
<doc-number>6292932</doc-number>
<kind>B1</kind>
<name>Baisley</name>
<date>20010900</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>717114</main-classification></classification-national>
</citation>
<citation>
<patcit num="00032">
<document-id>
<country>US</country>
<doc-number>6330569</doc-number>
<kind>B1</kind>
<name>Baisley</name>
<date>20011200</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>707203</main-classification></classification-national>
</citation>
<citation>
<patcit num="00033">
<document-id>
<country>US</country>
<doc-number>6334114</doc-number>
<kind>B1</kind>
<name>Jacobs</name>
<date>20011200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00034">
<document-id>
<country>US</country>
<doc-number>6338064</doc-number>
<kind>B1</kind>
<name>Ault et al.</name>
<date>20020100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00035">
<document-id>
<country>US</country>
<doc-number>6343265</doc-number>
<kind>B1</kind>
<name>Glebov</name>
<date>20020100</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>703 25</main-classification></classification-national>
</citation>
<citation>
<patcit num="00036">
<document-id>
<country>US</country>
<doc-number>6353923</doc-number>
<kind>B1</kind>
<name>Bogle et al.</name>
<date>20020300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717128</main-classification></classification-national>
</citation>
<citation>
<patcit num="00037">
<document-id>
<country>US</country>
<doc-number>6360358</doc-number>
<kind>B1</kind>
<name>Elsbree</name>
<date>20020300</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00038">
<document-id>
<country>US</country>
<doc-number>6377939</doc-number>
<kind>B1</kind>
<name>Young</name>
<date>20020400</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>705 34</main-classification></classification-national>
</citation>
<citation>
<patcit num="00039">
<document-id>
<country>US</country>
<doc-number>6408311</doc-number>
<kind>B1</kind>
<name>Baisley</name>
<date>20020600</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>707203</main-classification></classification-national>
</citation>
<citation>
<patcit num="00040">
<document-id>
<country>US</country>
<doc-number>6411698</doc-number>
<kind>B1</kind>
<name>Bauer</name>
<date>20020600</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>37920701</main-classification></classification-national>
</citation>
<citation>
<patcit num="00041">
<document-id>
<country>US</country>
<doc-number>6445711</doc-number>
<kind>B1</kind>
<name>Scheel</name>
<date>20020900</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>370402</main-classification></classification-national>
</citation>
<citation>
<patcit num="00042">
<document-id>
<country>US</country>
<doc-number>6470364</doc-number>
<kind>B1</kind>
<name>Prinzing</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00043">
<document-id>
<country>US</country>
<doc-number>6560769</doc-number>
<kind>B1</kind>
<name>Moore</name>
<date>20030500</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>717100</main-classification></classification-national>
</citation>
<citation>
<patcit num="00044">
<document-id>
<country>US</country>
<doc-number>6567738</doc-number>
<kind>B2</kind>
<name>Gopp</name>
<date>20030500</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00045">
<document-id>
<country>US</country>
<doc-number>6584454</doc-number>
<kind>B1</kind>
<name>Hummel</name>
<date>20030600</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00046">
<document-id>
<country>US</country>
<doc-number>6594693</doc-number>
<kind>B1</kind>
<name>Borwankar</name>
<date>20030700</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00047">
<document-id>
<country>US</country>
<doc-number>6594700</doc-number>
<kind>B1</kind>
<name>Graham</name>
<date>20030700</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>709230</main-classification></classification-national>
</citation>
<citation>
<patcit num="00048">
<document-id>
<country>US</country>
<doc-number>6604198</doc-number>
<kind>B1</kind>
<name>Beckman et al.</name>
<date>20030800</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00049">
<document-id>
<country>US</country>
<doc-number>6609115</doc-number>
<kind>B1</kind>
<name>Mehring</name>
<date>20030800</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00050">
<document-id>
<country>US</country>
<doc-number>6615258</doc-number>
<kind>B1</kind>
<name>Barry</name>
<date>20030900</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00051">
<document-id>
<country>US</country>
<doc-number>6636491</doc-number>
<kind>B1</kind>
<name>Kari</name>
<date>20031000</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00052">
<document-id>
<country>US</country>
<doc-number>6637020</doc-number>
<kind>B1</kind>
<name>Hammond</name>
<date>20031000</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00053">
<document-id>
<country>US</country>
<doc-number>6643652</doc-number>
<kind>B2</kind>
<name>Helgeson</name>
<date>20031100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00054">
<document-id>
<country>US</country>
<doc-number>6654932</doc-number>
<kind>B1</kind>
<name>Bahrs</name>
<date>20031100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00055">
<document-id>
<country>US</country>
<doc-number>6678518</doc-number>
<kind>B2</kind>
<name>Eerola</name>
<date>20040100</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>4554221</main-classification></classification-national>
</citation>
<citation>
<patcit num="00056">
<document-id>
<country>US</country>
<doc-number>6687702</doc-number>
<kind>B2</kind>
<name>Vaitheeswaran</name>
<date>20040200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00057">
<document-id>
<country>US</country>
<doc-number>6687848</doc-number>
<kind>B1</kind>
<name>Najmi</name>
<date>20040200</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>714  4</main-classification></classification-national>
</citation>
<citation>
<patcit num="00058">
<document-id>
<country>US</country>
<doc-number>6721779</doc-number>
<kind>B1</kind>
<name>Maffeis</name>
<date>20040400</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>709202</main-classification></classification-national>
</citation>
<citation>
<patcit num="00059">
<document-id>
<country>US</country>
<doc-number>6732237</doc-number>
<kind>B1</kind>
<name>Jacobs et al.</name>
<date>20040500</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00060">
<document-id>
<country>US</country>
<doc-number>6748420</doc-number>
<kind>B1</kind>
<name>Quatrano</name>
<date>20040600</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>709205</main-classification></classification-national>
</citation>
<citation>
<patcit num="00061">
<document-id>
<country>US</country>
<doc-number>6757689</doc-number>
<kind>B2</kind>
<name>Battas</name>
<date>20040600</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00062">
<document-id>
<country>US</country>
<doc-number>6789054</doc-number>
<kind>B1</kind>
<name>Makhlouf</name>
<date>20040900</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00063">
<document-id>
<country>US</country>
<doc-number>6795967</doc-number>
<kind>B1</kind>
<name>Evans et al.</name>
<date>20040900</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00064">
<document-id>
<country>US</country>
<doc-number>6802000</doc-number>
<kind>B1</kind>
<name>Greene et al.</name>
<date>20041000</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00065">
<document-id>
<country>US</country>
<doc-number>6804686</doc-number>
<kind>B1</kind>
<name>Stone et al.</name>
<date>20041000</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00066">
<document-id>
<country>US</country>
<doc-number>6823495</doc-number>
<kind>B1</kind>
<name>Vedula</name>
<date>20041100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00067">
<document-id>
<country>US</country>
<doc-number>6832238</doc-number>
<kind>B1</kind>
<name>Sharma</name>
<date>20041200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00068">
<document-id>
<country>US</country>
<doc-number>6847981</doc-number>
<kind>B2</kind>
<name>Song</name>
<date>20050100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00069">
<document-id>
<country>US</country>
<doc-number>6850979</doc-number>
<kind>B1</kind>
<name>Saulpaugh</name>
<date>20050200</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>709225</main-classification></classification-national>
</citation>
<citation>
<patcit num="00070">
<document-id>
<country>US</country>
<doc-number>6889244</doc-number>
<kind>B1</kind>
<name>Gaither</name>
<date>20050500</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>709202</main-classification></classification-national>
</citation>
<citation>
<patcit num="00071">
<document-id>
<country>US</country>
<doc-number>6915519</doc-number>
<kind>B2</kind>
<name>Williamson</name>
<date>20050700</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>719313</main-classification></classification-national>
</citation>
<citation>
<patcit num="00072">
<document-id>
<country>US</country>
<doc-number>6918084</doc-number>
<kind>B1</kind>
<name>Slaughter</name>
<date>20050700</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>715513</main-classification></classification-national>
</citation>
<citation>
<patcit num="00073">
<document-id>
<country>US</country>
<doc-number>6950872</doc-number>
<kind>B2</kind>
<name>Todd</name>
<date>20050900</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00074">
<document-id>
<country>US</country>
<doc-number>6959307</doc-number>
<kind>B2</kind>
<name>Apte</name>
<date>20051000</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00075">
<document-id>
<country>US</country>
<doc-number>6963914</doc-number>
<kind>B1</kind>
<name>Breitbart</name>
<date>20051100</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>709226</main-classification></classification-national>
</citation>
<citation>
<patcit num="00076">
<document-id>
<country>US</country>
<doc-number>6976086</doc-number>
<kind>B2</kind>
<name>Sadeghi</name>
<date>20051200</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>709236</main-classification></classification-national>
</citation>
<citation>
<patcit num="00077">
<document-id>
<country>US</country>
<doc-number>7017146</doc-number>
<kind>B2</kind>
<name>Dellarocas</name>
<date>20060300</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00078">
<document-id>
<country>US</country>
<doc-number>7051072</doc-number>
<kind>B2</kind>
<name>Stewart</name>
<date>20060500</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00079">
<document-id>
<country>US</country>
<doc-number>7051316</doc-number>
<kind>B2</kind>
<name>Charisius</name>
<date>20060500</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00080">
<document-id>
<country>US</country>
<doc-number>7054858</doc-number>
<kind>B2</kind>
<name>Sutherland</name>
<date>20060500</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>707  4</main-classification></classification-national>
</citation>
<citation>
<patcit num="00081">
<document-id>
<country>US</country>
<doc-number>7062718</doc-number>
<kind>B2</kind>
<name>Kodosky</name>
<date>20060600</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00082">
<document-id>
<country>US</country>
<doc-number>7072934</doc-number>
<kind>B2</kind>
<name>Helgeson</name>
<date>20060700</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00083">
<document-id>
<country>US</country>
<doc-number>7076772</doc-number>
<kind>B2</kind>
<name>Zatloukal</name>
<date>20060700</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00084">
<document-id>
<country>US</country>
<doc-number>7096422</doc-number>
<kind>B2</kind>
<name>Rothschiller</name>
<date>20060800</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00085">
<document-id>
<country>US</country>
<doc-number>7107578</doc-number>
<kind>B1</kind>
<name>Alpern</name>
<date>20060900</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00086">
<document-id>
<country>US</country>
<doc-number>7111243</doc-number>
<kind>B1</kind>
<name>Ballard</name>
<date>20060900</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00087">
<document-id>
<country>US</country>
<doc-number>7117504</doc-number>
<kind>B2</kind>
<name>Smith</name>
<date>20061000</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>709201</main-classification></classification-national>
</citation>
<citation>
<patcit num="00088">
<document-id>
<country>US</country>
<doc-number>7127704</doc-number>
<kind>B2</kind>
<name>Van De Vanter</name>
<date>20061000</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00089">
<document-id>
<country>US</country>
<doc-number>7143186</doc-number>
<kind>B2</kind>
<name>Stewart</name>
<date>20061100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00090">
<document-id>
<country>US</country>
<doc-number>2002/0004848</doc-number>
<kind>A1</kind>
<name>Sudarshan</name>
<date>20020100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00091">
<document-id>
<country>US</country>
<doc-number>2002/0010781</doc-number>
<kind>A1</kind>
<name>Tuatini</name>
<date>20020100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00092">
<document-id>
<country>US</country>
<doc-number>2002/0010803</doc-number>
<kind>A1</kind>
<name>Oberstein</name>
<date>20020100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00093">
<document-id>
<country>US</country>
<doc-number>2002/0016759</doc-number>
<kind>A1</kind>
<name>Macready et al.</name>
<date>20020200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00094">
<document-id>
<country>US</country>
<doc-number>2002/0035604</doc-number>
<kind>A1</kind>
<name>Cohen</name>
<date>20020300</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00095">
<document-id>
<country>US</country>
<doc-number>2002/0078365</doc-number>
<kind>A1</kind>
<name>Burnett et al.</name>
<date>20020600</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00096">
<document-id>
<country>US</country>
<doc-number>2002/0083075</doc-number>
<kind>A1</kind>
<name>Brummel</name>
<date>20020600</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00097">
<document-id>
<country>US</country>
<doc-number>2002/0111922</doc-number>
<kind>A1</kind>
<name>Young</name>
<date>20020800</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00098">
<document-id>
<country>US</country>
<doc-number>2002/0120685</doc-number>
<kind>A1</kind>
<name>Srivastava</name>
<date>20020800</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00099">
<document-id>
<country>US</country>
<doc-number>2002/0143960</doc-number>
<kind>A1</kind>
<name>Goren</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00100">
<document-id>
<country>US</country>
<doc-number>2002/0152106</doc-number>
<kind>A1</kind>
<name>Stoxen</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00101">
<document-id>
<country>US</country>
<doc-number>2002/0161826</doc-number>
<kind>A1</kind>
<name>Arteaga</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00102">
<document-id>
<country>US</country>
<doc-number>2002/0165936</doc-number>
<kind>A1</kind>
<name>Alston et al.</name>
<date>20021100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00103">
<document-id>
<country>US</country>
<doc-number>2002/0174178</doc-number>
<kind>A1</kind>
<name>Stawikowski</name>
<date>20021100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00104">
<document-id>
<country>US</country>
<doc-number>2002/0174241</doc-number>
<kind>A1</kind>
<name>Beged-Dov</name>
<date>20021100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00105">
<document-id>
<country>US</country>
<doc-number>2002/0184610</doc-number>
<kind>A1</kind>
<name>Chong</name>
<date>20021200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00106">
<document-id>
<country>US</country>
<doc-number>2002/0194244</doc-number>
<kind>A1</kind>
<name>Raventos</name>
<date>20021200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00107">
<document-id>
<country>US</country>
<doc-number>2002/0194267</doc-number>
<kind>A1</kind>
<name>Flesner</name>
<date>20021200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00108">
<document-id>
<country>US</country>
<doc-number>2002/0194495</doc-number>
<kind>A1</kind>
<name>Gladstone</name>
<date>20021200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00109">
<document-id>
<country>US</country>
<doc-number>2003/0004746</doc-number>
<kind>A1</kind>
<name>Kheirolomoom</name>
<date>20030100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00110">
<document-id>
<country>US</country>
<doc-number>2003/0005181</doc-number>
<kind>A1</kind>
<name>Bau, III et al.</name>
<date>20030100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00111">
<document-id>
<country>US</country>
<doc-number>2003/0014439</doc-number>
<kind>A1</kind>
<name>Boughannam</name>
<date>20030100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00112">
<document-id>
<country>US</country>
<doc-number>2003/0018661</doc-number>
<kind>A1</kind>
<name>Darugar</name>
<date>20030100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00113">
<document-id>
<country>US</country>
<doc-number>2003/0018665</doc-number>
<kind>A1</kind>
<name>Dovin et al.</name>
<date>20030100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00114">
<document-id>
<country>US</country>
<doc-number>2003/0018832</doc-number>
<kind>A1</kind>
<name>Amirisetty</name>
<date>20030100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00115">
<document-id>
<country>US</country>
<doc-number>2003/0028579</doc-number>
<kind>A1</kind>
<name>Kulkami</name>
<date>20030200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00116">
<document-id>
<country>US</country>
<doc-number>2003/0041198</doc-number>
<kind>A1</kind>
<name>Exton et al.</name>
<date>20030200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00117">
<document-id>
<country>US</country>
<doc-number>2003/0043191</doc-number>
<kind>A1</kind>
<name>Tinsley</name>
<date>20030300</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00118">
<document-id>
<country>US</country>
<doc-number>2003/0046591</doc-number>
<kind>A1</kind>
<name>Asghari-Kamrani</name>
<date>20030300</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00119">
<document-id>
<country>US</country>
<doc-number>2003/0051066</doc-number>
<kind>A1</kind>
<name>Pace</name>
<date>20030300</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00120">
<document-id>
<country>US</country>
<doc-number>2003/0055868</doc-number>
<kind>A1</kind>
<name>Fletcher</name>
<date>20030300</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00121">
<document-id>
<country>US</country>
<doc-number>2003/0055878</doc-number>
<kind>A1</kind>
<name>Fletcher</name>
<date>20030300</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00122">
<document-id>
<country>US</country>
<doc-number>2003/0074217</doc-number>
<kind>A1</kind>
<name>Beisiegel</name>
<date>20030400</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00123">
<document-id>
<country>US</country>
<doc-number>2003/0079029</doc-number>
<kind>A1</kind>
<name>Garimella</name>
<date>20030400</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00124">
<document-id>
<country>US</country>
<doc-number>2003/0084203</doc-number>
<kind>A1</kind>
<name>Yoshida</name>
<date>20030500</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00125">
<document-id>
<country>US</country>
<doc-number>2003/0110117</doc-number>
<kind>A1</kind>
<name>Saidenberg et al.</name>
<date>20030600</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00126">
<document-id>
<country>US</country>
<doc-number>2003/0110446</doc-number>
<kind>A1</kind>
<name>Nemer</name>
<date>20030600</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00127">
<document-id>
<country>US</country>
<doc-number>2003/0126136</doc-number>
<kind>A1</kind>
<name>Omoigui</name>
<date>20030700</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00128">
<document-id>
<country>US</country>
<doc-number>2003/0149791</doc-number>
<kind>A1</kind>
<name>Kane</name>
<date>20030800</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00129">
<document-id>
<country>US</country>
<doc-number>2003/0167358</doc-number>
<kind>A1</kind>
<name>Marvin</name>
<date>20030900</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00130">
<document-id>
<country>US</country>
<doc-number>2003/0196168</doc-number>
<kind>A1</kind>
<name>Hu</name>
<date>20031000</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00131">
<document-id>
<country>US</country>
<doc-number>2004/0019645</doc-number>
<kind>A1</kind>
<name>Goodman</name>
<date>20040100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00132">
<document-id>
<country>US</country>
<doc-number>2004/0078373</doc-number>
<kind>A1</kind>
<name>Ghoneimy</name>
<date>20040400</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00133">
<document-id>
<country>US</country>
<doc-number>2004/0133660</doc-number>
<kind>A1</kind>
<name>Junghuber et al.</name>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00134">
<document-id>
<country>US</country>
<doc-number>2004/0148336</doc-number>
<kind>A1</kind>
<name>Hubbard</name>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00135">
<document-id>
<country>US</country>
<doc-number>2004/0204976</doc-number>
<kind>A1</kind>
<name>Oyama</name>
<date>20041000</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00136">
<document-id>
<country>US</country>
<doc-number>2004/0216086</doc-number>
<kind>A1</kind>
<name>Bau</name>
<date>20041000</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00137">
<document-id>
<country>US</country>
<doc-number>2004/0225995</doc-number>
<kind>A1</kind>
<name>Marvin et al.</name>
<date>20041100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00138">
<document-id>
<country>US</country>
<doc-number>2004/0260715</doc-number>
<kind>A1</kind>
<name>Mongeon</name>
<date>20041200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00139">
<document-id>
<country>US</country>
<doc-number>2005/0050068</doc-number>
<kind>A1</kind>
<name>Vaschillo</name>
<date>20050300</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00140">
<document-id>
<country>US</country>
<doc-number>2005/0278585</doc-number>
<kind>A1</kind>
<name>Spencer</name>
<date>20051200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00141">
<document-id>
<country>US</country>
<doc-number>2006/0064677</doc-number>
<kind>A1</kind>
<name>Bickson et al.</name>
<date>20060300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717124</main-classification></classification-national>
</citation>
<citation>
<patcit num="00142">
<document-id>
<country>US</country>
<doc-number>2006/0206856</doc-number>
<kind>A1</kind>
<name>Breeden</name>
<date>20060900</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00143">
<document-id>
<country>US</country>
<doc-number>2006/0234678</doc-number>
<kind>A1</kind>
<name>Juitt</name>
<date>20061000</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00144">
<document-id>
<country>US</country>
<doc-number>2007/0038500</doc-number>
<kind>A1</kind>
<name>Hammitt</name>
<date>20070200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00145">
<document-id>
<country>WO</country>
<doc-number>WO 99/23558</doc-number>
<date>19990500</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00146">
<othercit>Schmidt, Robert; “Investigating Multilanguage Debugging and the New IDEs of Visual Studio 97”; May 1997; Microsoft Systems Journal; http://www.microsoft.com/msj/0597/debugging.aspx; 22 pages.</othercit>
</nplcit>
<category>cited by examiner</category>
</citation>
<citation>
<nplcit num="00147">
<othercit>Beander, Bert; “VAX DEBUG: Interactive, Symbolic, Multilingual Debugger”; 1983; ACM; vol. 8, 18 Issue 4 , 8;http://delivery.acm.org/10.1145/1010000/1006185/p173-beander.pdf?key1=1006185&amp;key2=4079385511&amp;coll=ACM&amp;dl=ACM&amp;CFID=263416&amp;CFTOKEN=37630203; pp. 173-179.</othercit>
</nplcit>
<category>cited by examiner</category>
</citation>
<citation>
<nplcit num="00148">
<othercit>Loukides, Mike and Andy Oram; “Getting to Know gdb”; vol. 1996 , Issue 29es (Sep. 1996) table of contentsArticle No. 5; http://delivery.acm.org/10.1145/330000/326355/a5-loukides.html?key1=326355&amp;key2=7949385511&amp;coll=&amp;dl=GUIDE&amp;CFID=15151515&amp;CFTOKEN=6184618; 10 pages.</othercit>
</nplcit>
<category>cited by examiner</category>
</citation>
<citation>
<nplcit num="00149">
<othercit>Bruegge, Bernd and Peter Hibbard; “Generalized Path Expressions: A high Level Debugging Mechanism”; Jan. 10, 1983; ACM; vol. 8 , 18 Issue 4 , 8 ; http://delivery.acm.org/10.1145/1010000/1006157/p34-bruegge.pdf?key1=1006157&amp;key2=3889385511&amp;coll=ACM&amp;dl=ACM&amp;CFID=263416&amp;CFTOKEN=37630203; pp. 34-44.</othercit>
</nplcit>
<category>cited by examiner</category>
</citation>
<citation>
<nplcit num="00150">
<othercit>IBM TDB, Owens, PJ; “Multilingual Debugging Using a Compiler”; Mar. 1, 1990; vol. 32, No. 10B; https://priorart.ip.com/viewPub.jsp?stype=enginumSemetricSearch&amp;scache=32763970&amp;snum=1&amp;kwHighlight=true&amp;squery=cty%2509%09lng%2509EN%09ss%2509%09ftq%2509Multilingual%252Bdebugging%09my%2509%09dtb%2509%09dta%2509%09sby%2509origPubDate%09; pp. 286-287.</othercit>
</nplcit>
<category>cited by examiner</category>
</citation>
<citation>
<nplcit num="00151">
<othercit>JAVA Debugging Interface—definition, retrieved from &lt;URL http://java.sun.com/j2se/1.4.2/docs/guide/jpda/jdi/overview-summary.html on Feb. 21, 2007.</othercit>
</nplcit>
<category>cited by examiner</category>
</citation>
<citation>
<nplcit num="00152">
<othercit>Blake, Rule-Driven Coordination Agents: “A Self-Configurable Agent Architecture for Distributed Control”, IEEE Mar. 2001, pp. 271-277.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00153">
<othercit>Dahalin et al., Workflow Interoperability Using Extensible Markup Language (XML), IEEE, Jul. 2002, pp. 513-516.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00154">
<othercit>Kunisetty, “Workflow Modeling and Simulation Using an Extensible Object-Oriented Knowledge Based Management System” Citeseer, 1996 pp. 1-60.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00155">
<othercit>Van Der Aaist et al., Verification of XRL: An XML-Based Workflow Lnaguage, IEEE, Jul. 2001, pp. 427-432.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00156">
<othercit>Bea, “Transforming Data Using Xquery Mapper,” 2006, BEA AquaLogic Service Bus 2.0 Documentation, pp. 1-19.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00157">
<othercit>Stylus Studio, “Xquery Mapper,” www.stylusstudio.com/xquery<sub>—</sub>mapper.html, printed Jun. 5, 2007, pp. 1-6.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00158">
<othercit>Altova, “XML-to-XML Mapping,” 2007, Altova, pp. 1-3.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00159">
<othercit>Jamper, “Jamper-Java XML Mapper,” 2007, Sourceforge, pp. 1-4.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00160">
<othercit>Liebmann, Erich, et al., “Adaptive Data Dissemination and Caching for Edge Service Architectures built with the J2EE,” ACM Press, 2004 ACM Symposium on Applied Computing, Mar. 2004, pp. 1717-1724.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00161">
<othercit>Kilgore, R.A., “Multi-language, open-source modeling using the Microsoft.NET Architecture,” Proceedings of the 2002 Winter Simulation Conference, IEEE, pp. 629-633.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00162">
<othercit>Embury, S.M., et al., “Assisting the Comprehension of Legacy Transactions,” Proceedings of the 8<sup>th </sup>Working Conference on Reverse Engineering, Oct. 2-5, 2001, pp. 345-354.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00163">
<othercit>Mays, E., et al., “A Persistent Store for Large Shared Knowledge Bases,” IEEE Transactions on Knowledge and Data Engineering, vol. 3, No. 1, Mar. 1991, pp. 33-41.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00164">
<othercit>Tang, C., et al., “Integrating Remote Invocation and Distributed Shared State,” Proceedings of the 18<sup>th </sup>International Parallel and Distributed Processing Symposium, IEEE, Apr. 26-30, 2004.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00165">
<othercit>Hewlett-Packard Company, “hp application server,” developer's guide version 8.0, 1999-2001, pp. 27-81, 127-160, 195-271.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00166">
<othercit>Bogunovic, N., “A Programming Model for Composing Data-Flow Collaborative Applications,” <i>ecbs</i>, p. 106, IEEE Conference and Workshop on Engineering of Computer-Based Systems, 1999.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00167">
<othercit>Sung, S.Y., et al., “A Multimedia Authoring Tool for the Internet,” Proceedings of the 1997 IEEE International Symposium on Consumer Electronics, Dec. 1997, pp. 304-308.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00168">
<othercit>Smith, M., et al., “Marching Towards a Software Resuse Future,” ACM SIGAda Ada Letters, vol. XIV, Issue 6, Nov./Dec. 1994, pp. 62-72.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00169">
<othercit>Mohan, C., et al., “ARIES: A Transaction Recovery Method Supporting Fine-Granularity Locking and Partial Rollbacks Using Write-Ahead Logging,” ACM Transactions on Database Systems, vol. 17, No. 1, Mar. 1992, pp. 94-162.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00170">
<othercit>Chen, et al., “eCo Architecture to Electronic Commerce Interoperability,” Jun. 29, 1999, CommerceNet.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00171">
<othercit>Sosnoski, “XML and Java Technologies: Data binding, Part 1: Code generation approaches—JAXB and more,” IBM, pp. 1-11, Jan. 2003.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
</references-cited>
<number-of-claims>10</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>717214</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>1</number-of-drawing-sheets>
<number-of-figures>1</number-of-figures>
</figures>
<us-related-documents>
<us-provisional-application>
<document-id>
<country>US</country>
<doc-number>60450014</doc-number>
<kind>00</kind>
<date>20030226</date>
</document-id>
</us-provisional-application>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20050034104</doc-number>
<kind>A1</kind>
<date>20050210</date>
</document-id>
</related-publication>
</us-related-documents>
<parties>
<applicants>
<applicant sequence="001" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Pugh</last-name>
<first-name>William A.</first-name>
<address>
<city>Seattle</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="002" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Eckels</last-name>
<first-name>Joshua Moll</first-name>
<address>
<city>Seattle</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
</applicants>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Fliesler Meyer LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</parties>
<assignees>
<assignee>
<addressbook>
<orgname>BEA Systems, Inc.</orgname>
<role>02</role>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Steelman</last-name>
<first-name>Mary</first-name>
<department>2191</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Software developers working on multi-language systems can utilize a multi-language debugging environment. The debugging environment can be uniform across languages, and can seamlessly perform debugging between one or more languages in a multi-language environment. Such a system can have a number of attributes intended to help developers facing debugging problems in multi-language environments.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="116.59mm" wi="185.76mm" file="US07299454-20071120-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="188.21mm" wi="159.43mm" orientation="landscape" file="US07299454-20071120-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">CLAIM TO PRIORITY</heading>
<p id="p-0002" num="0001">The present application claims the benefit of priority under 35 U.S.C. § 119(3) to:
<ul id="ul0001" list-style="none">
    <li id="ul0001-0001" num="0000">
    <ul id="ul0002" list-style="none">
        <li id="ul0002-0001" num="0002">U.S. Provisional Application entitled “Systems and Methods for Multi-Language Debugging,” patent application No. 60/450,014, filed on Feb. 26, 2003, which application is incorporated herein by reference.</li>
    </ul>
    </li>
</ul>
</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0002" level="1">COPYRIGHT NOTICE</heading>
<p id="p-0003" num="0003">A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document of the patent disclosure, as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.</p>
<heading id="h-0003" level="1">FIELD OF THE INVENTION</heading>
<p id="p-0004" num="0004">The present invention relates to the debugging of software and software components.</p>
<heading id="h-0004" level="1">BACKGROUND</heading>
<p id="p-0005" num="0005">Most real-world software systems of any significant complexity are written in more than one programming language. For example, an environment may be implemented in JAVA™ while an interpreted language may be running on top of JAVA™ and need to be debugged. This situation creates significant difficulties for software developers attempting to debug these systems. This problem is complicated by the fact that there is no standardization in terms of internal structures, such as stack frames, between different programming languages. For example, it is not uncommon for a developer to see stack information not directly related to the software being debugged when encountering a stack frame for one language, when using a debugger intended for another language. As another example, when using a debugger intended for the JAVA™ language, a JAVA™ stack will not include the stack for XScript (a JavaScript variant with native support for extensible markup language (XML)), and can sometimes show the set of Java classes that implement the XScript engine (these are part of the environment, but not the software the developer is working on). One multi-language debugger, described in JAVA™ Specification Request (JSR) 45, can only be used to debug languages that are easily transformed into Java and then compiled. This and most other multi-language debuggers won't work with languages such as XScript where the language will be run by an interpreter or the language can not be mapped directly to JAVA™ because the language has a different data structure. Thus, creating debugging tools that can be applied to software applied to more than one programming language, and running in the same environment, has proved to be extremely difficult.</p>
<heading id="h-0005" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0006" num="0006">Methods for a debugging environment that can be used by software developers working on multi-language systems. The techniques used create a debugging environment that can be uniform across languages, and can seamlessly perform debugging between one or more languages in a multi-language environment. Such a system can have a number of attributes intended to help developers facing debugging problems in multi-language environments.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0006" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0007" num="0007"><figref idref="DRAWINGS">FIG. 1</figref> describes an initialization process for one embodiment of the invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0007" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0008" num="0008">Systems and methods in accordance with embodiments of the present invention provide a debugging environment that can be used by software developers working on multi-language systems. The techniques used create a debugging environment that can be uniform across languages, and can seamlessly perform debugging between one or more languages in a multi-language environment. Such a system can have a number of attributes intended to help developers facing debugging problems in multi-language environments including:
<ul id="ul0003" list-style="none">
    <li id="ul0003-0001" num="0009">Integrate debugging between two or more languages at the same time. If more that one language appears on a stack, a developer can see the frames for each language, as well as be able to inspect variables for each language.</li>
    <li id="ul0003-0002" num="0010">Nested language debugging. A developer can debug source code that has several nested languages within a single source file. Mixing several languages in a single source file is becoming an increasingly valuable and popular capability. For example, the emerging ECMAScript for XML languages embeds the XML languages directly in ECMAScript.</li>
    <li id="ul0003-0003" num="0011">An extensible architecture. Support for additional languages can be added to the multi-language debugging environment. For example, using multiple language definitions, a developer can perform debugging in the JAVA™ language, Xscript language, the Xquery language, and various Business Process Modeling languages, such as the Business Process Execution Language.</li>
</ul>
</p>
<p id="p-0009" num="0012">Each language integrated into a multi-language debugger can include specific support for the stack frame structures and variable representations used in that language. Each new language added to the multi-language debugger can extend the system in at least one of 3 areas:
<ul id="ul0004" list-style="none">
    <li id="ul0004-0001" num="0013">The Integrated Development Environment (IDE). If the debugger is associated with an IDE, this environment can contain support for the languages supported by the debugger. These extensions may include appropriate APIs to get at dialog boxes (watch, locals, stack frame, etc), as well as the debugging commands. As an example, many Business Processes Modeling languages will simply be extensions in the IDE that will map to normal JAVA™ code, or code in some other complied or interpreted programming language. In these cases, the extensions may be able to simply create extensions to the IDE environment for the underling programming language.</li>
    <li id="ul0004-0002" num="0014">The Proxy. In one embodiment of the present invention, the proxy is not required. When implemented, the proxy may be used to implement user interface (UI) commands into the underlying debugging framework requests. The proxy can be used in-process or out-of-process. In the case where a proxy is out-of-process and used as an intermediate between the environment the software is executing in and the debugger, a proxy with the correct mapping between the new language and the underling language may be used. For example, to add debugging for a new language that maps directly to JAVA™ byte codes, the proxy is extended to map between the new language and JAVA™.</li>
    <li id="ul0004-0003" num="0015">Runtime messaging infrastructure. For some languages the debugger should be capable of interacting with the messaging infrastructure. For example, to debug an interpreted language, like Xscript, the debugging may be done on the server side of the messaging infrastructure. In one embodiment, the Runtime messaging infrastructure may interpret language interactions and perform debugging in JAVA™ Platform Debugging Architecture (JPDA).</li>
</ul>
</p>
<p id="p-0010" num="0016">Throughout the following discussion, an example is developed using the JAVA™ language. It will be understood that the invention is equally applicable to any programming language. This example is presented for illustrative purposes only and is not meant to limit the scope, functionality or spirit of any particular embodiment of the invention.</p>
<p id="h-0008" num="0000">Architectural Overview</p>
<p id="p-0011" num="0017">Some embodiments will be comprised of one or more functional components or modules. It will be understood that any particular embodiment of the invention may not require all of the components listed, may use additional components, or may use an entirely different organization without changing the functionality, scope or spirit. Components used in some embodiments can include:
<ul id="ul0005" list-style="none">
    <li id="ul0005-0001" num="0018">A proxy—In some embodiments a proxy is used between the executing code being debugged and the debugger. In some cases, the proxy serves to improve the efficiency or reduce the overhead associated with debugging protocols. For example, many JAVA™ language debuggers use the JAVA™ Debugging Interface (JDI), which has a fine-grain API and therefore will create a lot of message traffic between the code under test and the debugger. In this case a proxy can consolidate the contents of some of the messages, potentially reducing messages and overhead.</li>
    <li id="ul0005-0002" num="0019">A script engine interface—A script engine can communicate with the multi-language debugger through a standardized interface. This interface can be used by the multi-language debugger to communicate metadata to the proxy (or possibly directly to the debugger), so the proxy can determine when to call into which debuggable language. As an example, for multi-language support of JavaScript, a JAVA™ language debugger may define an interface, possibly called IdebuggableLanguage, which is used anytime the script engine is invoked. Typically there is an object in the JAVA™ stack that implements this interface, and can translate the JAVA™ stack into a JavaScript stack.</li>
    <li id="ul0005-0003" num="0020">A debuggable frame—For each language supported, the scripting engine may use a debuggable frame object, capable of retrieving the script context. As an example, a JAVA™ language debugger may define such a standardized frame, possibly known as IdebuggableFrame.</li>
    <li id="ul0005-0004" num="0021">An interface to the messaging environment—This is an interface that can be implemented by a runtime-messaging environment that controls the running state of the scripting engines. As an example, a JAVA™ language debugger may define a standardized interface, possibly known as IdebugScriptController.</li>
    <li id="ul0005-0005" num="0022">Script context object—For each language supported, the scripting engine can use an object to hold a script context. As an example, a JAVA™ language debugger may define a standardized object, possibly known as IcontextHolder.</li>
    <li id="ul0005-0006" num="0023">A debug commands interface—For each language supported, the script engine can use a standardized interface, which the multi-language debugger uses to call into the different debuggable languages. As an example, a JAVA™ language debugger may define a standardized object, possibly known as IDebugCommands.</li>
    <li id="ul0005-0007" num="0024">A script debug controller—A script engine may have a static constructor that loads a script debug controller, which may registers itself upon start-up. When the script engine registers itself, the script debug controller may get the following information from the engine: a) the language extensions for each language, b) the classes that implement the script engine, c) information on optional capabilities for the language, and d) the language name. In some cases the controller may store this information internally in a map that goes from extension to script engine. As an example, for a JAVA™ language debugger the script debug controller, possibly known as ScriptDebugController, is defined in debugger.jar.
<br/>
Process Overview
</li>
</ul>
</p>
<p id="p-0012" num="0025">In some embodiments, when the runtime-messaging infrastructure is started in non-production (debug) mode, a script controller for the debug process is started. This object inspects the system for script engines, and loads them and their configuration information.</p>
<p id="p-0013" num="0026">In some embodiments when the runtime-messaging infrastructure starts a debugging session, it will send a message to the proxy. Typically, this message includes a list of languages and language configuration information for the languages supported by the multi-language debugger. In some embodiments, when debugging begins, the debug proxy will talk to the script controller for control flow (e.g. step, continue, pause), and will operate directly on the script engines for debugging information (e.g. stack frames, variable inspection, expressions).</p>
<p id="p-0014" num="0027">In some embodiments, after the script engines have all registered themselves, the script debug controller waits until debugging is started. This process is depicted in <figref idref="DRAWINGS">FIG. 1</figref>. Once debugging commences:
<ul id="ul0006" list-style="none">
    <li id="ul0006-0001" num="0028">1. The server can send <b>102</b> an initialization message to the proxy.</li>
    <li id="ul0006-0002" num="0029">2. The proxy can respond <b>104</b> with a packet indicating the languages discovered.</li>
    <li id="ul0006-0003" num="0030">3. The server can send <b>106</b> a language response packet during the boot sequence. This packet may include the information used by the script debug controller, such as: a) the language extensions for each language, b) the classes that implement the script engine, c) information on optional capabilities for the language, and d) the language name.</li>
    <li id="ul0006-0004" num="0031">4. The proxy will now send <b>108</b> a message indicating the successful completion of the initialization to the runtime massaging server, and will then wait for events.
<br/>
Breakpoint Hits
</li>
</ul>
</p>
<p id="p-0015" num="0032">In some embodiments, when a breakpoint is hit, or a step is finished in communications with the script engine will be to the script debug controller. As an example, with JAVA™ code, all communications with the script engines will be through JDI calls to the script debug controller.</p>
<p id="p-0016" num="0033">For some embodiments, the first breakpoint hit in the underling language can behave like a normal break. The following process may then occur:
<ul id="ul0007" list-style="none">
    <li id="ul0007-0001" num="0034">1. The debugger gets the current class, line, and stack and processes the stack through a language filter. If during processing, the debugger encounters a class that implements a script language the following steps may be take: a) if the object derives from a context holder, the debug script controller makes a method call to get the context, and b) the debug script controller will call a method to get the contents of the stack. Continuing the examples for the JAVA™ language, the debug script controller will call getContext (or some other suitable named method) on the IcontextHolder object to get the context and then calls a method ScriptDebugController.getStack(LanguageLxt, Context) (or some other suitable named method) via JDI, to get a list of scriptFrames.</li>
    <li id="ul0007-0002" num="0035">2. All script languages are processed as described above, creating a stack frame list to send back to the debugger.</li>
    <li id="ul0007-0003" num="0036">3. The debugger proceeds to discover and inspect variables in the same way as before.
<br/>
Current Frame set to Script Frame
</li>
</ul>
</p>
<p id="p-0017" num="0037">In some embodiments, the following process may occur if the current stack frame is set to a frame controlled by a script engine:
<ul id="ul0008" list-style="none">
    <li id="ul0008-0001" num="0038">1. Get the “this” object and the frame variables and send them to the client as the list of variables.</li>
    <li id="ul0008-0002" num="0039">2. For each object queried, call a method to get the values of the script variables. Continuing the example for the JAVA™ language, a call is made to IDebuggableLanguage.getVariable() (or some other suitable named method), to get the IScriptVariable (or some other suitable named interface)value. Some possible JAVA™ language examples of the results of this operation can be seen in the following table.</li>
</ul>
</p>
<p id="p-0018" num="0040">
<tables id="TABLE-US-00001" num="00001">
<table frame="none" colsep="0" rowsep="0" pgwide="1">
<tgroup align="left" colsep="0" rowsep="0" cols="5">
<colspec colname="1" colwidth="35pt" align="left"/>
<colspec colname="2" colwidth="49pt" align="left"/>
<colspec colname="3" colwidth="49pt" align="left"/>
<colspec colname="4" colwidth="70pt" align="left"/>
<colspec colname="5" colwidth="70pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="5" align="center" rowsep="1"/>
</row>
<row>
<entry>Value</entry>
<entry>Value</entry>
<entry>Type</entry>
<entry/>
<entry/>
</row>
<row>
<entry>Type</entry>
<entry>Display</entry>
<entry>Display</entry>
<entry>If Expanded</entry>
<entry>In Expression</entry>
</row>
<row>
<entry namest="1" nameend="5" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>Simple</entry>
<entry>getValue( )</entry>
<entry>getType( )</entry>
<entry>—</entry>
<entry>Call</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry/>
<entry>getPrimativeType( ) to</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry/>
<entry>determine which get*</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry/>
<entry>function to call to get</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry/>
<entry>the correct value.</entry>
</row>
<row>
<entry>Complex</entry>
<entry>getValue( )</entry>
<entry>Get</entry>
<entry>Call</entry>
<entry>Use getMember to</entry>
</row>
<row>
<entry/>
<entry/>
<entry>Type</entry>
<entry>getMembers( )</entry>
<entry>get members, and</entry>
</row>
<row>
<entry/>
<entry/>
<entry>( )</entry>
<entry>to get the list</entry>
<entry>callMethod to call</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>of members</entry>
<entry>methods on the</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>to display,</entry>
<entry>value.</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>then call</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>getMember( )</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>one each to</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>get the</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>values.</entry>
</row>
<row>
<entry>Array</entry>
<entry>getValue( )</entry>
<entry>getType( )</entry>
<entry>Create a list</entry>
<entry>Use getElement to</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>getLength( )</entry>
<entry>lookup the values</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>long, and</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>populate it</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>with calls to</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>getElement( )</entry>
</row>
<row>
<entry>Other</entry>
<entry>Call into the</entry>
<entry>Call into the</entry>
<entry>Call into the</entry>
<entry>Call into the</entry>
</row>
<row>
<entry>Language</entry>
<entry>ScriptDebug-</entry>
<entry>ScriptDebug-</entry>
<entry>ScriptDebugController</entry>
<entry>ScriptDebugController</entry>
</row>
<row>
<entry/>
<entry>Controller to</entry>
<entry>Controller to</entry>
<entry>to</entry>
<entry>to get a resolved</entry>
</row>
<row>
<entry/>
<entry>get a</entry>
<entry>get a</entry>
<entry>get a resolved</entry>
<entry>ScriptValue and use</entry>
</row>
<row>
<entry/>
<entry>resolved</entry>
<entry>resolved</entry>
<entry>ScriptValue</entry>
<entry>that.</entry>
</row>
<row>
<entry/>
<entry>ScriptValue</entry>
<entry>ScriptValue</entry>
<entry>and use that.</entry>
</row>
<row>
<entry/>
<entry>and use</entry>
<entry>and use</entry>
</row>
<row>
<entry/>
<entry>that.</entry>
<entry>that.</entry>
</row>
<row>
<entry>Java</entry>
<entry>Call</entry>
<entry>Call</entry>
<entry>Call</entry>
<entry>Call getValueObject</entry>
</row>
<row>
<entry/>
<entry>getValueObject</entry>
<entry>getValueObject</entry>
<entry>getValueObject</entry>
<entry>and treat as ordinary</entry>
</row>
<row>
<entry/>
<entry>and treat</entry>
<entry>and treat</entry>
<entry>and treat as</entry>
<entry>Java Object</entry>
</row>
<row>
<entry/>
<entry>as ordinary</entry>
<entry>as ordinary</entry>
<entry>ordinary Java</entry>
</row>
<row>
<entry/>
<entry>Java Object</entry>
<entry>Java Object</entry>
<entry>Object</entry>
</row>
<row>
<entry namest="1" nameend="5" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
<br/>
Stepping Through Code
</p>
<p id="p-0019" num="0041">Some embodiments can step though code using a mechanism analogous to that used in an ordinary (without multi-language support) debugger, except that the debugger will inform the script debug controller when a step is about to begin. In this way, any script engine that is started, and script engines that return from calling into the underling language (e.g. JAVA™) will be able to stop appropriately. In some cases, script implementation classes are placed into the excludes-filter during a step request.</p>
<p id="h-0009" num="0000">Continuing</p>
<p id="p-0020" num="0042">In some embodiments this operation behaves like a continue in an ordinary (not multi-language) debugger.</p>
<p id="h-0010" num="0000">Script Breakpoint Hit</p>
<p id="p-0021" num="0043">In some embodiments, when a script breakpoint is hit the following actions can occur:
<ul id="ul0009" list-style="none">
    <li id="ul0009-0001" num="0044">The script controller will call a breakpoint method, sending a message indicating the breakpoint hit to the proxy. Continuing the JAVA™ language example, the controller can call into a method with a name, such as, ScriptDebugController.Break() to send the message to the proxy.</li>
    <li id="ul0009-0002" num="0045">The Proxy can then freeze the thread, and perform any required communications. In the JAVA™ example these communications can use function calls via JDI.</li>
    <li id="ul0009-0003" num="0046">When the user decides to continue, the debugger will unfreeze the thread and send a Continue, StepIn, StepOver, StepOut, etc., packet as appropriate.
<br/>
In some embodiments, if the user hits Stop instead of Continue, the thread can be un-frozen, no network packet will be sent, and the thread may be forced to throw an exception used for killing threads. Alternatively, such actions by the user can be temporarily blocked.
<br/>
Pause
</li>
</ul>
</p>
<p id="p-0022" num="0047">In some embodiments, when the user hits Pause, the thread will be paused. The debugger can then look to see if the stack is currently in scripting or the underling language (e.g. JAVA™) code. One of the following actions may then be taken:
<ul id="ul0010" list-style="none">
    <li id="ul0010-0001" num="0048">1. If the stack is in the underling language code, the process is complete. In some cases, this situation is treated in the same way hitting a breakpoint is treated.</li>
    <li id="ul0010-0002" num="0049">2. If the stack is in script code, a pause method is called on the script engine interface and the execution of the scripting language will continue until it hits a stopping point, when a pause method is called on the script debug controller. Continuing the JAVA™ language example, when a pause() method on the IdebuggableLanguage interface is called, the scripting language will continue until it hits a stopping point, at which point the engine calls ScriptDebugController.Pause().</li>
</ul>
</p>
<p id="p-0023" num="0050">In some embodiments, when a pause is called on a script language while it is waiting on some synchronization object, it will be treated as a normal thread in the underling language (e.g. JAVA™), which can prevent deadlock scenanos.</p>
<p id="h-0011" num="0000">Breakpoints</p>
<p id="p-0024" num="0051">In some embodiments, information in breakpoint packets can use a suitable extension or other indicator to identify the language type being executed. In some cases, the absence of the extension can indicate the underling language (e.g. JAVA™) is being used. If a breakpoint is not in the underling language the following actions may be taken:
<ul id="ul0011" list-style="none">
    <li id="ul0011-0001" num="0052">1. Send a message to the script debug controller telling it to set a breakpoint.</li>
    <li id="ul0011-0002" num="0053">2. The script debug controller will look up the proper extension or indicator and set a breakpoint using the method available for that language.</li>
    <li id="ul0011-0003" num="0054">3. The script debug controller will then send a message indicating the success or failure of setting the breakpoint.
<br/>
In some embodiments several types of breakpoints are supported, which can include:
</li>
</ul>
</p>
<p id="p-0025" num="0055">
<tables id="TABLE-US-00002" num="00002">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="49pt" align="left"/>
<colspec colname="2" colwidth="168pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>Source</entry>
<entry>This is the ordinary type of breakpoint that goes on a</entry>
</row>
<row>
<entry>Breakpoints</entry>
<entry>source file/line number</entry>
</row>
<row>
<entry>Method</entry>
<entry>This breakpoint is hit when a certain method is called</entry>
</row>
<row>
<entry>Breakpoint</entry>
</row>
<row>
<entry>Watch point</entry>
<entry>This breakpoint is hit when a variable is either read or</entry>
</row>
<row>
<entry/>
<entry>written.</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0026" num="0056">It should be noted, that depending on the details of the embodiment, any language may be able to support a sub-set of the available breakpoint types for any given language. Returning a true or false to a query for that type can indicate the support for a particular breakpoint type. For example, a true or false can be returned for a method, featureEnabled() (or some other suitable name), when called with a variable indicating the break point type, such as, SOURCE_BREAKPOINT_SUPPORT, METHOD_BREAKPOINT_SUPPORT, or WATCH_POINT_SUPPORT</p>
<heading id="h-0012" level="1">AN EXAMPLE</heading>
<heading id="h-0013" level="1">Interfaces</heading>
<p id="p-0027" num="0057">The following examples show sets of interface definitions for two embodiments, developed using the JAVA™ language. It will be understood that the invention is equally applicable to any programming language. This example is presented for illustrative purposes only and is not meant to limit the scope, functionality or spirit of any particular embodiment of the invention.</p>
<p id="p-0028" num="0058">
<tables id="TABLE-US-00003" num="00003">
<table frame="none" colsep="0" rowsep="0" pgwide="1">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>Interface Definition 1</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* The script controller will be an object that interoperates with the scripting languages</entry>
</row>
<row>
<entry/>
<entry>* to bring you script debugging. The way this will work is each language engine will have</entry>
</row>
<row>
<entry/>
<entry>* an instance of the &lt;code&gt;IScriptController&lt;/code&gt;, and the &lt;code&gt;IScriptController&lt;/code&gt;</entry>
</row>
<row>
<entry/>
<entry>* will have list of all the &lt;code&gt;IDebuggableLanguage&lt;/code&gt; interfaces.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>public interface IScriptController</entry>
</row>
<row>
<entry>{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>static int RESUME_CONTINUE = 0;</entry>
</row>
<row>
<entry/>
<entry>static int RESUME_STEP_IN = 1;</entry>
</row>
<row>
<entry/>
<entry>static int RESUME_STEP_OUT = 2;</entry>
</row>
<row>
<entry/>
<entry>static int RESUME_STEP_OVER = 3;</entry>
</row>
<row>
<entry/>
<entry>static int RESUME_STOP = 4;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* This is what a runninq script will call when it wants to break. This is a waiting call,</entry>
</row>
<row>
<entry/>
<entry>* that will not return until the thread has been told to continue. The frames parameter should</entry>
</row>
<row>
<entry/>
<entry>* be a list of &lt;code&gt;IDebuggableLanguage$IScriptFrame&lt;/code&gt;.</entry>
</row>
<row>
<entry/>
<entry>*</entry>
</row>
<row>
<entry/>
<entry>* @param frames - should be the frame list for the current script context.</entry>
</row>
<row>
<entry/>
<entry>*</entry>
</row>
<row>
<entry/>
<entry>* @return the return value tells the scripting engine what command resumed the break.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>public int Break( );</entry>
</row>
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* this is what the scripting lanuguage calls when it's time to pause itself.</entry>
</row>
<row>
<entry/>
<entry>*</entry>
</row>
<row>
<entry/>
<entry>* @return the return value tells the scripting engine what command resumed the pause.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>public int Pause(int pauseID);</entry>
</row>
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* This is what a script engine must call when starting execution. This is how the</entry>
</row>
<row>
<entry/>
<entry>* engine will know if the thread is currently in the middle of a step or not.</entry>
</row>
<row>
<entry/>
<entry>*</entry>
</row>
<row>
<entry/>
<entry>* @return the return value tells the scripting engine what kind of execution we are</entry>
</row>
<row>
<entry/>
<entry>* in the middle of.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>public int StartScript( );</entry>
</row>
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* This is what a script engine must call when resuming execution. This is how the</entry>
</row>
<row>
<entry/>
<entry>* engine will know if the thread is currently in the middle of a step or not.</entry>
</row>
<row>
<entry/>
<entry>*</entry>
</row>
<row>
<entry/>
<entry>* @return the return value tells the scripting engine what kind of execution we are</entry>
</row>
<row>
<entry/>
<entry>* in the middle of.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>public int ResumeScript( );</entry>
</row>
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* processes the variable on script engine that created it. This will be called by a script engine that</entry>
</row>
<row>
<entry/>
<entry>* needs to process an expression or a variable that was created in another script engine or in Java.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>public IDebuggableLanguage.IScriptValue processScriptValue(IDebuggableLanguage.IScriptValue value);</entry>
</row>
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* This tells the script controller that a breakpoint that was previously un-resolvable has</entry>
</row>
<row>
<entry/>
<entry>* now been resolved.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>public void breakpointProcessed(IDebuggableLanguage.IBreakpointInfo bpi);</entry>
</row>
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* This gets the stack frames for the script language specified, using the context specified.</entry>
</row>
<row>
<entry/>
<entry>*</entry>
</row>
<row>
<entry/>
<entry>* @param langExt -- This is the language extension for the language we are inspecting.</entry>
</row>
<row>
<entry/>
<entry>* @param context -- This is the language context we are investigating.</entry>
</row>
<row>
<entry/>
<entry>*</entry>
</row>
<row>
<entry/>
<entry>* @return an array of the stackframes this yeilds.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
<row>
<entry/>
<entry>IDebuggableLanguage.IScriptFrame[ ] getStack(String langExt,Object context);</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>}</entry>
</row>
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* This interface is used to get a context object for a given frame. The way this</entry>
</row>
<row>
<entry/>
<entry>* will work is that the Proxy will go down the stack frame, looking for objects that</entry>
</row>
<row>
<entry/>
<entry>* derive from IScriptContextHolder. When it comes across such a class, it will get the</entry>
</row>
<row>
<entry/>
<entry>* context from the frame and pass it to the DebugScriptController. It is possible for</entry>
</row>
<row>
<entry/>
<entry>* many script frames to all have the same context. In this case, the frame will only</entry>
</row>
<row>
<entry/>
<entry>* get passed to the DebugScriptController once.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>public interface IScriptContextHolder</entry>
</row>
<row>
<entry>{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>public Object getContext( );</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>}</entry>
</row>
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* A scripting engine must implement this interface in order to be able to set itself up</entry>
</row>
<row>
<entry/>
<entry>* to debug in the KNEX framework.</entry>
</row>
<row>
<entry/>
<entry>*</entry>
</row>
<row>
<entry/>
<entry>* NOTE: Kill will work the same way for script languages as it does for Java execution. An</entry>
</row>
<row>
<entry/>
<entry>* exception will suddenly be thrown that should kill everything.</entry>
</row>
<row>
<entry/>
<entry>*</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>public interface IDebuggableLanguage</entry>
</row>
<row>
<entry>{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>//These are strings for each features</entry>
</row>
<row>
<entry/>
<entry>public static String  EXPRESSION_SUPPORT=“weblogic.debugging.comm.expressions”;</entry>
</row>
<row>
<entry/>
<entry>public static String  SOURCE_BREAKPOINT_SUPPORT=“weblogic.debugging.comm.breakpoint”;</entry>
</row>
<row>
<entry/>
<entry>public static String</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>METHOD_BREAKPOINT_SUPPORT=“weblogic.debugging.comm.methodbreakpoint”;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>public static String  WATCH_POINT_SUPPORT=“weblogic.debugging.comm.watchpoint”;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* This will be called on each of the debuggable languages before we get rolling.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>public boolean init(IScriptController controller);</entry>
</row>
<row>
<entry>/**</entry>
</row>
<row>
<entry>* This will be called when we are ending.</entry>
</row>
<row>
<entry>*/</entry>
</row>
<row>
<entry>public void exit( );</entry>
</row>
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* This is a list of the classes we should filter to prevent from showing up</entry>
</row>
<row>
<entry/>
<entry>* in the stack. You will be able to use wild cards, such as org.mozilla.rhino.*</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>String[ ] LanguageFilters( );</entry>
</row>
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* This is a list of the class instances that we can call into to get variable information, etc.</entry>
</row>
<row>
<entry/>
<entry>* When walking through a stack trace, we will go to each of these to ask it to spit out it's stack. We will</entry>
</row>
<row>
<entry/>
<entry>* furthermore. When a user inspects this part of the stack, we will also ask these objects for variable</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>values, etc.</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>*/</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>String[ ] LanguageFrames( );</entry>
</row>
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* This is a list of the class instances that we can call into to get variable information, etc.</entry>
</row>
<row>
<entry/>
<entry>* When walking through a stack trace, we will go to each of these to ask it to spit out it's stack. We will</entry>
</row>
<row>
<entry/>
<entry>* furthermore. When a user inspects this part of the stack, we will also ask these objects for variable</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>values, etc.</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>*/</entry>
</row>
<row>
<entry/>
<entry>String LanguageName( );</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* This is a list of the class instances that we can call into to get variable information, etc.</entry>
</row>
<row>
<entry/>
<entry>* When walking through a stack trace, we will go to each of these to ask it to spit out it's stack. We will</entry>
</row>
<row>
<entry/>
<entry>* furthermore. When a user inspects this part of the stack, we will also ask these objects for variable</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>values, etc.</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>*/</entry>
</row>
<row>
<entry/>
<entry>String[ ] LanguageExtensions( );</entry>
</row>
<row>
<entry/>
<entry>/**</entry>
</row>
<row>
<entry/>
<entry>* This function is used for determining what features this debug engine supports. (</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>boolean featureEnabled(String feature);</entry>
</row>
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* When pause is called, it is up to the script engine to break at the next possible</entry>
</row>
<row>
<entry/>
<entry>* place. This method can be called while the engine is in the middle of processing,</entry>
</row>
<row>
<entry/>
<entry>* so should be treated as a synchronized.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>void pause(Object context, int pauseID);</entry>
</row>
<row>
<entry>//</entry>
</row>
<row>
<entry>//Methods for Inspecting/dealing with variables</entry>
</row>
<row>
<entry>IScriptValue getVariable(Object context, String strVar, int stackFrame);</entry>
</row>
<row>
<entry>IScriptValue setVariable(Object context, String strVar, int stackFrame);</entry>
</row>
<row>
<entry>IScriptValue processExpression(Object context, String strExpr, int stackFrame);</entry>
</row>
<row>
<entry>//Method for inspecting the current stack</entry>
</row>
<row>
<entry>IScriptFrame[ ] getStack(Object context);</entry>
</row>
<row>
<entry>//Breakpoints</entry>
</row>
<row>
<entry>IBreakpointInfo setBreakpoint(IScriptBreakpoint bp);</entry>
</row>
<row>
<entry>void clearBreakpoint(IScriptBreakpoint bp);</entry>
</row>
<row>
<entry>void clearAllBreakpoints( );</entry>
</row>
<row>
<entry>public interface IScriptValue</entry>
</row>
<row>
<entry>{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>static final int SIMPLE_TYPE = 0;</entry>
</row>
<row>
<entry/>
<entry>static final int COMPLEX_TYPE = 1;</entry>
</row>
<row>
<entry/>
<entry>static final int SCRIPT_ARRAY_TYPE = 2;</entry>
</row>
<row>
<entry/>
<entry>static final int OTHER_LANGUAGE_TYPE = 3;</entry>
</row>
<row>
<entry/>
<entry>static final int JAVA_LANGUAGE_TYPE = 4;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* This gets the value we should display to the user.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>String getValue( );</entry>
</row>
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* If this is a language that supports types, this should return the type name of this variable.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>String getTypeName( );</entry>
</row>
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* This determines if the variable is a complex type, simple type or other languagy type.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
<row>
<entry/>
<entry>int getAbstractType( );</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>}</entry>
</row>
<row>
<entry>public interface ISimpleScriptValue extends IScriptValue</entry>
</row>
<row>
<entry>{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>public static final int TYPE_BOOLEAN = 0;</entry>
</row>
<row>
<entry/>
<entry>public static final int TYPE_BYTE = 1;</entry>
</row>
<row>
<entry/>
<entry>public static final int TYPE_CHAR = 2;</entry>
</row>
<row>
<entry/>
<entry>public static final int TYPE_DOUBLE = 3;</entry>
</row>
<row>
<entry/>
<entry>public static final int TYPE_FLOAT = 4;</entry>
</row>
<row>
<entry/>
<entry>public static final int TYPE_INT = 5;</entry>
</row>
<row>
<entry/>
<entry>public static final int TYPE_LONG = 6;</entry>
</row>
<row>
<entry/>
<entry>public static final int TYPE_SHORT = 7;</entry>
</row>
<row>
<entry/>
<entry>public static final int TYPE_STRING = 8;</entry>
</row>
<row>
<entry/>
<entry>public static final int TYPE_NULL = 9;</entry>
</row>
<row>
<entry/>
<entry>public int  getPrimativeType( );</entry>
</row>
<row>
<entry/>
<entry>public boolean  getBoolean( );</entry>
</row>
<row>
<entry/>
<entry>public byte  getByte( );</entry>
</row>
<row>
<entry/>
<entry>public char  getChar( );</entry>
</row>
<row>
<entry/>
<entry>public double  getDouble( );</entry>
</row>
<row>
<entry/>
<entry>public float  getFloat( );</entry>
</row>
<row>
<entry/>
<entry>public int  getInt( );</entry>
</row>
<row>
<entry/>
<entry>public long  getLong( );</entry>
</row>
<row>
<entry/>
<entry>public short  getShort( );</entry>
</row>
<row>
<entry/>
<entry>public short  getString( );</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>}</entry>
</row>
<row>
<entry>public interface IScriptArrayValue extends IScriptValue</entry>
</row>
<row>
<entry>{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>int   getLength( );</entry>
</row>
<row>
<entry/>
<entry>IScriptValue  getElement(int i);</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>}</entry>
</row>
<row>
<entry>public interface IComplexScriptValue extends IScriptValue</entry>
</row>
<row>
<entry>{</entry>
</row>
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* if this is a complex type, this will return a list of all it's members.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>List getMembers( );</entry>
</row>
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* if this is a complex type, this will return a member of it.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>IScriptValue getMember(String name);</entry>
</row>
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* calls a method on the complex type. If the method is a void method, it should</entry>
</row>
<row>
<entry/>
<entry>* return a null. Otherwise, callMethod should return a scriptValue representing the</entry>
</row>
<row>
<entry/>
<entry>* returned value. If that value is null, this will be a ScriptValue with the value null.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
<row>
<entry/>
<entry>IScriptValue callMethod(String name, IScriptValue[ ] values);</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>}</entry>
</row>
<row>
<entry>public interface IOtherLanguageValue extends IScriptValue</entry>
</row>
<row>
<entry>{</entry>
</row>
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* script extension for this variable.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
<row>
<entry/>
<entry>String getScriptExtension( );</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* gets the underlying value object. The other scripting language should be able to figure out</entry>
</row>
<row>
<entry/>
<entry>* what this is to be able to create one of the other Script values from this.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
<row>
<entry/>
<entry>Object getValueObject( );</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>}</entry>
</row>
<row>
<entry>public interface IJavaValue extends IScriptValue</entry>
</row>
<row>
<entry>{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>/**</entry>
</row>
<row>
<entry/>
<entry>* gets the underlying java object. The proxy will be able to disect this and keep values, etc for this.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
<row>
<entry/>
<entry>Object getValueObject( );</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>}</entry>
</row>
<row>
<entry>public interface IScriptFrame</entry>
</row>
<row>
<entry>{</entry>
</row>
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* This will get the file extension specifying what language this is.</entry>
</row>
<row>
<entry/>
<entry>* If a language supports more than one file extension, this will just be one.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>String getLanguageExtension( );</entry>
</row>
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* If this returns non-null, this string will be used to display</entry>
</row>
<row>
<entry/>
<entry>* the stack frame to the user.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>String getDisplayFrame( );</entry>
</row>
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* This is the class name that we will derive the file from. This will be put through the</entry>
</row>
<row>
<entry/>
<entry>* document resolution process on the ide.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>String getClassName( );</entry>
</row>
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* This is the line of execution the current frame is on.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>int getLine( );</entry>
</row>
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* This function will return an array of all the values visible from the current stack. All the</entry>
</row>
<row>
<entry/>
<entry>* values in the list that are returned will be of type IScriptValue.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>List getFrameVariables( );</entry>
</row>
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* This function will return an IScriptValue if there is a &lt;code&gt;this&lt;/code&gt; object, otherwise it</entry>
</row>
<row>
<entry/>
<entry>* will return null.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
<row>
<entry/>
<entry>IScriptValue getThis( );</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>}</entry>
</row>
<row>
<entry>public interface IBreakpointInfo</entry>
</row>
<row>
<entry>{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>public static final String BREAKPOINT_RESOLVED   = “0”;</entry>
</row>
<row>
<entry/>
<entry>public static final String BREAKPOINT_UNRESOLVED = “1”;</entry>
</row>
<row>
<entry/>
<entry>public static final String BREAKPOINT_ERROR = “2”;</entry>
</row>
<row>
<entry/>
<entry>public String  getStatus( );</entry>
</row>
<row>
<entry/>
<entry>public int  getOrigLine( );</entry>
</row>
<row>
<entry/>
<entry>public int  getCurrLine( );</entry>
</row>
<row>
<entry/>
<entry>public IScriptBreakpoint getBreakpoint( );</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>}</entry>
</row>
<row>
<entry>public interface IScriptBreakpoint</entry>
</row>
<row>
<entry>{</entry>
</row>
<row>
<entry>}</entry>
</row>
<row>
<entry>public interface IScriptSourceBreakpoint extends IScriptBreakpoint</entry>
</row>
<row>
<entry>{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>String getClassName( );</entry>
</row>
<row>
<entry/>
<entry>int  getLine( );</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>}</entry>
</row>
<row>
<entry>public interface IScriptMethodBreakpoint extends IScriptBreakpoint</entry>
</row>
<row>
<entry>{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>String  getMethod( );</entry>
</row>
<row>
<entry/>
<entry>String[ ] getParams( );</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>}</entry>
</row>
<row>
<entry>public interface IScriptWatchpoint extends IScriptBreakpoint</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>{</entry>
</row>
<row>
<entry/>
<entry>IScriptValue  getValue( );</entry>
</row>
<row>
<entry/>
<entry>boolean   stopOnRead( );</entry>
</row>
<row>
<entry/>
<entry>boolean   stopOnWrite( );</entry>
</row>
<row>
<entry/>
<entry>}</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>}</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="center"/>
<tbody valign="top">
<row>
<entry>Interface Definition 2</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>* To change template for new interface use</entry>
</row>
<row>
<entry>* Code Style | Class Templates options (Tools | IDE Options).</entry>
</row>
<row>
<entry>*/</entry>
</row>
<row>
<entry>package weblogic.debugging.comm;</entry>
</row>
<row>
<entry>import java.util.List;</entry>
</row>
<row>
<entry>import java.io.Serializable;</entry>
</row>
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* The script controller will be an object that interoperates with the scripting languages</entry>
</row>
<row>
<entry/>
<entry>* to bring you script debugging. The way this will work is each language engine will have</entry>
</row>
<row>
<entry/>
<entry>* an instance of the &lt;code&gt;IScriptController&lt;/code&gt;, and the &lt;code&gt;IScriptController&lt;/code&gt;</entry>
</row>
<row>
<entry/>
<entry>* will have list of all the &lt;code&gt;IDebuggableLanguage&lt;/code&gt; interfaces.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>public interface IScriptController</entry>
</row>
<row>
<entry>{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>public static class LanguageInfo implements Serializable</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="21pt" align="left"/>
<colspec colname="1" colwidth="322pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="315pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>public LanguageInfo(String languageName, String[ ] languageExtensions, String[ ] languageFilters, String[ ]</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>contextHolders)</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="315pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="35pt" align="left"/>
<colspec colname="1" colwidth="308pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>_languageName = languageName;</entry>
</row>
<row>
<entry/>
<entry>_languageExtensions = languageExtensions;</entry>
</row>
<row>
<entry/>
<entry>_languageFilters = languageFilters;</entry>
</row>
<row>
<entry/>
<entry>_contextHolders = contextHolders;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="315pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>}</entry>
</row>
<row>
<entry/>
<entry>public final String   _languageName;</entry>
</row>
<row>
<entry/>
<entry>public final String [ ]  _languageExtensions;</entry>
</row>
<row>
<entry/>
<entry>public final String [ ]  _languageFilters;</entry>
</row>
<row>
<entry/>
<entry>public final String [ ]  _contextHolders;</entry>
</row>
<row>
<entry/>
<entry>transient public IDebuggableLanguage _lang;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>}</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>static int RESUME_CONTINUE = 0;</entry>
</row>
<row>
<entry>static int RESUME_STEP_IN = 1;</entry>
</row>
<row>
<entry>static int RESUME_STEP_OUT = 2;</entry>
</row>
<row>
<entry>static int RESUME_STEP_OVER = 3;</entry>
</row>
<row>
<entry>static int RESUME_STOP = 4;</entry>
</row>
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* returns a list that contains LanguageInfo. There will</entry>
</row>
<row>
<entry/>
<entry>* be one for each language.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>LanguageInfo[ ] getLanguages( );</entry>
</row>
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* This is what a running script will call when it wants to break. This is a waiting call,</entry>
</row>
<row>
<entry/>
<entry>* that will not return until the thread has been told to continue. The frames parameter should</entry>
</row>
<row>
<entry/>
<entry>* be a list of &lt;code&gt;IDebuggableLanguage$IScriptFrame&lt;/code&gt;.</entry>
</row>
<row>
<entry/>
<entry>*</entry>
</row>
<row>
<entry/>
<entry>* @param frames - should be the frame list for the current script context.</entry>
</row>
<row>
<entry/>
<entry>*</entry>
</row>
<row>
<entry/>
<entry>* @return the return value tells the scripting engine what command resumed the break.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>public int Break( );</entry>
</row>
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* this is what the scripting lanuguage calls when it's time to pause itself.</entry>
</row>
<row>
<entry/>
<entry>*</entry>
</row>
<row>
<entry/>
<entry>* @return the return value tells the scripting engine what command resumed the pause.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>public int Pause(int pauseID);</entry>
</row>
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* This is what a script engine must call when starting execution. This is how the</entry>
</row>
<row>
<entry/>
<entry>* engine will know if the thread is currently in the middle of a step or not.</entry>
</row>
<row>
<entry/>
<entry>*</entry>
</row>
<row>
<entry/>
<entry>* @return the return value tells the scripting engine what kind of execution we are</entry>
</row>
<row>
<entry/>
<entry>* in the middle of.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>public boolean StartScript( );</entry>
</row>
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* This is what a script engine must call when resuming execution. This is how the</entry>
</row>
<row>
<entry/>
<entry>* engine will know if the thread is currently in the middle of a step or not.</entry>
</row>
<row>
<entry/>
<entry>*</entry>
</row>
<row>
<entry/>
<entry>* @return the return value tells the scripting engine what kind of execution we are</entry>
</row>
<row>
<entry/>
<entry>* in the middle of.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>public boolean ResumeScript( );</entry>
</row>
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* processes an IScriptValue by passingit off to the script engine that knows about it, then it</entry>
</row>
<row>
<entry/>
<entry>* will return a new IScritpValue that knows more about that value.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>public IDebuggableLanguage.IScriptValue processScriptValue(IDebuggableLanguage.IScriptValue value);</entry>
</row>
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* This tells the script controller that a breakpoint that was previously un-resolvable has</entry>
</row>
<row>
<entry/>
<entry>* now been resolved.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>public void breakpointProcessed(IDebuggableLanguage.IBreakpointInfo bpi);</entry>
</row>
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* This gets the stack frames for the script language specified, using the context specified.</entry>
</row>
<row>
<entry/>
<entry>*</entry>
</row>
<row>
<entry/>
<entry>* @param lang_Ext -- This is the language extension for the language we are inspecting.</entry>
</row>
<row>
<entry/>
<entry>* @param context -- This is the language context we are investigating.</entry>
</row>
<row>
<entry/>
<entry>*</entry>
</row>
<row>
<entry/>
<entry>* @return an array of the stackframes this yeilds.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
<row>
<entry/>
<entry>IDebuggableLanguage.IScriptFrame[ ] getStack(String langExt,Object context);</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>}</entry>
</row>
<row>
<entry>package weblogic.debugging.comm;</entry>
</row>
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* This interface is used to get a context object for a given frame. The way this</entry>
</row>
<row>
<entry/>
<entry>* will work is that the Proxy will go down the stack frame, looking for objects that</entry>
</row>
<row>
<entry/>
<entry>* derive from IScriptContextHolder. When it comes across such a class, it will get the</entry>
</row>
<row>
<entry/>
<entry>* context from the frame and pass it to the DebugScriptController. It is possible for</entry>
</row>
<row>
<entry/>
<entry>* many script frames to all have the same context. In this case, the frame will only</entry>
</row>
<row>
<entry/>
<entry>* get passed to the DebugScriptController once.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>public interface IScriptContextHolder</entry>
</row>
<row>
<entry>{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>public Object getContextInstance( );</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>}</entry>
</row>
<row>
<entry>package weblogic.debugging.comm;</entry>
</row>
<row>
<entry>import java.util.List;</entry>
</row>
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* A scripting engine must implement this interface in order to be able to set itself up</entry>
</row>
<row>
<entry/>
<entry>* to debug in the KNEX framework.</entry>
</row>
<row>
<entry/>
<entry>*</entry>
</row>
<row>
<entry/>
<entry>* NOTE: Kill will work the same way for script languages as it does for Java execution. An</entry>
</row>
<row>
<entry/>
<entry>* exception will suddenly be thrown that should kill everything. You should be careful,</entry>
</row>
<row>
<entry/>
<entry>* that everywhere in your code, you rethrow the exception when you get it instead of get</entry>
</row>
<row>
<entry/>
<entry>* processing it.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>public interface IDebuggableLanguage</entry>
</row>
<row>
<entry>{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>//These are strings for each features</entry>
</row>
<row>
<entry/>
<entry>public static String  EXPRESSION_SUPPORT=“weblogic.debugging.comm.expressions”;</entry>
</row>
<row>
<entry/>
<entry>public static String  SOURCE_BREAKPOINT_SUPPORT=“weblogic.debugging.comm.breakpoint”;</entry>
</row>
<row>
<entry/>
<entry>public static String  METHOD_BREAKPOINT_SUPPORT=“weblogic.debugging.comm.methodbreakpoint”;</entry>
</row>
<row>
<entry/>
<entry>public static String  WATCH_POINT_SUPPOPT=“weblogic.debugging.comm.watchpoint”;</entry>
</row>
<row>
<entry/>
<entry>public static int  INVALID_PAUSEID = −1;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* This will be called when we are ending. Problem is that this will not</entry>
</row>
<row>
<entry/>
<entry>* get called in the case of system crashes, etc.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>public void exit( );</entry>
</row>
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* This is a list of the classes we should filter to prevent from showing up</entry>
</row>
<row>
<entry/>
<entry>* in the stack. You will be able to use wild cards, such as org.mozilla.rhino.*</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>String[ ] LanguageFilters( );</entry>
</row>
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* This is a list of the class instances that we can get a script context from.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>String[ ] ContextHolders( );</entry>
</row>
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* This is a list of the class instances that we can call into to get variable information, etc.</entry>
</row>
<row>
<entry/>
<entry>* When walking through a stack trace, we will go to each of these to ask it to spit out it's stack. We will</entry>
</row>
<row>
<entry/>
<entry>* furthermore. When a user inspects this part of the stack, we will also ask these objects for variable values, etc.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>String LanguageName( );</entry>
</row>
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* This is a list of the class instances that we can call into to get variable information, etc.</entry>
</row>
<row>
<entry/>
<entry>* When walking through a stack trace, we will go to each of these to ask it to spit out it's stack. We will</entry>
</row>
<row>
<entry/>
<entry>* furthermore. When a user inspects this part of the stack, we will also ask these objects for variable values, etc.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>String[ ] LanguageExtensions( );</entry>
</row>
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* This function is used for determining what features this debug engine supports. (UNDONE what features should</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>we</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* allow to be disabled)</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>boolean featureEnabled(String feature);</entry>
</row>
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* When pause is called, it is up to the script engine to break at the next possible</entry>
</row>
<row>
<entry/>
<entry>* place. This method can be called while the engine is in the middle of processing,</entry>
</row>
<row>
<entry/>
<entry>* so should be treated as a synchronized.</entry>
</row>
<row>
<entry/>
<entry>*</entry>
</row>
<row>
<entry/>
<entry>* @returns a boolean stating whether the scripting engine has more work to do in order to pause.</entry>
</row>
<row>
<entry/>
<entry>* if this returns true, the Proxy will resume the thread, and wait for it to send a message</entry>
</row>
<row>
<entry/>
<entry>* saying it's done. If this returns false, the thread will be suspended as is.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>boolean pause(Object context, int pauseID);</entry>
</row>
<row>
<entry>//</entry>
</row>
<row>
<entry>//Methods for Inspecting/dealing with variables</entry>
</row>
<row>
<entry>IScriptValue getVariable(Object context, String strVar, int stackFrame);</entry>
</row>
<row>
<entry>void  setVariable(Object context, String strVar, IScriptValue value, int stackFrame);</entry>
</row>
<row>
<entry>IScriptValue processValue(IScriptValue value);</entry>
</row>
<row>
<entry>IScriptValue processExpression(Object context, String strExpr, int stackFrame);</entry>
</row>
<row>
<entry>//Method for inspecting the current stack</entry>
</row>
<row>
<entry>IScriptFrame[ ] getStack(Object context);</entry>
</row>
<row>
<entry>//Breakpoints</entry>
</row>
<row>
<entry>IBreakpointInfo setSourceBreakpoint(String clazz, int line, int id);</entry>
</row>
<row>
<entry>IBreakpointInfo setMethodBreakpoint(String clazz, String method, String[ ] params, int id);</entry>
</row>
<row>
<entry>IBreakpointInfo setWatchpoint(String clazz, String varName, boolean fStopOnRead, boolean fStopOnWrite, int id);</entry>
</row>
<row>
<entry>void clearBreakpoint(int id);</entry>
</row>
<row>
<entry>void clearAllBreakpoints( );</entry>
</row>
<row>
<entry>//UNDONE(willpugh) -- must add a getAbstractType back to this, to find out what kind of object we</entry>
</row>
<row>
<entry>// are dealing with. For a loosly typed language you could imagine having an object that implemented all</entry>
</row>
<row>
<entry>// these interfaces.</entry>
</row>
<row>
<entry>public interface IScriptValue</entry>
</row>
<row>
<entry>{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>static final int SIMPLE_TYPE = 0;</entry>
</row>
<row>
<entry/>
<entry>static final int COMPLEX_TYPE = 1;</entry>
</row>
<row>
<entry/>
<entry>static final int SCRIPT_ARRAY_TYPE = 2;</entry>
</row>
<row>
<entry/>
<entry>static final int OTHER_LANGUAGE_TYPE = 3;</entry>
</row>
<row>
<entry/>
<entry>static final int JAVA_LANGUAGE_TYPE = 4;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* This gets the value we should display to the user.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
<row>
<entry/>
<entry>String getValue( );</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* If this is a language that supports types, this should return the type name of this variable.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>String getTypeName( );</entry>
</row>
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* This is the value the user typed in, it's up to the script engine to turn this</entry>
</row>
<row>
<entry/>
<entry>* into a value.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>void setValue(String val) throws Exception;</entry>
</row>
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* This determines if the variable is a complex type, simple type or other languagy type.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>int getAbstractType( );</entry>
</row>
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* This determines if this script value is Read Only or not.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>boolean isReadOnly( );</entry>
</row>
<row>
<entry>}</entry>
</row>
<row>
<entry>public interface ISimpleScriptValue extends IScriptValue</entry>
</row>
<row>
<entry>{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>public static final int TYPE_BOOLEAN = 0;</entry>
</row>
<row>
<entry/>
<entry>public static final int TYPE_BYTE = 1;</entry>
</row>
<row>
<entry/>
<entry>public static final int TYPE_CHAR = 2;</entry>
</row>
<row>
<entry/>
<entry>public static final int TYPE_DOUBLE = 3;</entry>
</row>
<row>
<entry/>
<entry>public static final int TYPE_FLOAT = 4;</entry>
</row>
<row>
<entry/>
<entry>public static final int TYPE_INT = 5;</entry>
</row>
<row>
<entry/>
<entry>public static final int TYPE_LONG = 6;</entry>
</row>
<row>
<entry/>
<entry>public static final int TYPE_SHORT = 7;</entry>
</row>
<row>
<entry/>
<entry>public static final int TYPE_STRING = 8;</entry>
</row>
<row>
<entry/>
<entry>public static final int TYPE_NULL = 9;</entry>
</row>
<row>
<entry/>
<entry>public int  getPrimativeType( );</entry>
</row>
<row>
<entry/>
<entry>public boolean  getBoolean( );</entry>
</row>
<row>
<entry/>
<entry>public byte  getByte( );</entry>
</row>
<row>
<entry/>
<entry>public char  getChar( );</entry>
</row>
<row>
<entry/>
<entry>public double  getDouble( );</entry>
</row>
<row>
<entry/>
<entry>public float  getFloat( );</entry>
</row>
<row>
<entry/>
<entry>public int  getInt( );</entry>
</row>
<row>
<entry/>
<entry>public long  getLong( );</entry>
</row>
<row>
<entry/>
<entry>public short  getShort( );</entry>
</row>
<row>
<entry/>
<entry>public String  getString( );</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>}</entry>
</row>
<row>
<entry>public interface IScriptArrayValue extends IScriptValue</entry>
</row>
<row>
<entry>{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>int  getLength( );</entry>
</row>
<row>
<entry/>
<entry>IScriptValue  getElement(int i);</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>}</entry>
</row>
<row>
<entry>public interface IComplexScriptValue extends IScriptValue</entry>
</row>
<row>
<entry>{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>/**</entry>
</row>
<row>
<entry/>
<entry>* there can be complex types that do not have children.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>boolean hasChildren( );</entry>
</row>
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* if this is a complex type, this will return a list of all it's members.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>List getMembers( );</entry>
</row>
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* if this is a complex type, this will return a member of it.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>IScriptValue getMember(String name);</entry>
</row>
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* if this is a complex type, this will return a member of it.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>void setMember(String name, IScriptValue val) throws Exception;</entry>
</row>
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* calls a method on the complex type. If the method is a void method, it should</entry>
</row>
<row>
<entry/>
<entry>* return a null. Otherwise, callMethod should return a scriptValue representing the</entry>
</row>
<row>
<entry/>
<entry>* returned value. If that value is null, this will be a ScriptValue with the value null.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>IScriptValue callMethod(String name, IScriptValue[ ] values);</entry>
</row>
<row>
<entry>}</entry>
</row>
<row>
<entry>public interface IOtherLanguageValue extends IScriptValue</entry>
</row>
<row>
<entry>{</entry>
</row>
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* script extension for this variable.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>String getScriptExtension( );</entry>
</row>
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* gets the underlying value object. The other scripting language should be able to figure out</entry>
</row>
<row>
<entry/>
<entry>* what this is to be able to create one of the other Script values from this.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>Object getValueObject( );</entry>
</row>
<row>
<entry>}</entry>
</row>
<row>
<entry>public interface IJavaValue extends IScriptValue</entry>
</row>
<row>
<entry>{</entry>
</row>
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* gets the underlying java object. The proxy will be able to disect this and keep values, etc for this.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
<row>
<entry/>
<entry>Object getValueObject( );</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>}</entry>
</row>
<row>
<entry>public interface IScriptFrame</entry>
</row>
<row>
<entry>{</entry>
</row>
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* This will get the file extension specifying what language this is.</entry>
</row>
<row>
<entry/>
<entry>* If a language supports more than one file extension, this will just be one.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
<row>
<entry/>
<entry>String getLanguageExtension( );</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* If this returns non-null, this string will be used to display</entry>
</row>
<row>
<entry/>
<entry>* the stack frame to the user.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>String getFunctionName( );</entry>
</row>
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* This is the class name that we will derive the file from. This will be put through the</entry>
</row>
<row>
<entry/>
<entry>* document resolution process on the ide.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>String getClassName( );</entry>
</row>
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* This is the class name that we will derive the file from. This will be put through the</entry>
</row>
<row>
<entry/>
<entry>* document resolution process on the ide.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>String getFileName( );</entry>
</row>
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* This is the line of execution the current frame is on.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>int getLine( );</entry>
</row>
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* This function will return an array of all the values visible from the current stack. All the</entry>
</row>
<row>
<entry/>
<entry>* values in the list that are returned will be of type Strong. To get a value, you will want</entry>
</row>
<row>
<entry/>
<entry>* to call IDebuggableLanguage.getVariable</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>List getFrameVariables( );</entry>
</row>
<row>
<entry>/**</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>* This function will return an IScriptValue if there is a &lt;code&gt;this&lt;/code&gt; object, otherwise it</entry>
</row>
<row>
<entry/>
<entry>* will return null.</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>IScriptValue getThis( );</entry>
</row>
<row>
<entry>}</entry>
</row>
<row>
<entry>public interface IBreakpointInfo</entry>
</row>
<row>
<entry>{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="329pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>public static final String BREAKPOINT_RESOLVED = “0”;</entry>
</row>
<row>
<entry/>
<entry>public static final String BREAKPOINT_UNRESOLVED = “1”;</entry>
</row>
<row>
<entry/>
<entry>public static final String BREAKPOINT_ERROR = “2”;</entry>
</row>
<row>
<entry/>
<entry>public String  getStatus( );</entry>
</row>
<row>
<entry/>
<entry>public int  getOrigLine( );</entry>
</row>
<row>
<entry/>
<entry>public int  getCurrLine( );</entry>
</row>
<row>
<entry/>
<entry>public int  getId( );</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="343pt" align="left"/>
<tbody valign="top">
<row>
<entry>}</entry>
</row>
<row>
<entry>}</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0029" num="0059">
<tables id="TABLE-US-00004" num="00004">
<table frame="none" colsep="0" rowsep="0" pgwide="1">
<tgroup align="left" colsep="0" rowsep="0" cols="4">
<colspec colname="1" colwidth="70pt" align="left"/>
<colspec colname="2" colwidth="42pt" align="left"/>
<colspec colname="3" colwidth="63pt" align="left"/>
<colspec colname="4" colwidth="84pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="4" align="center" rowsep="1"/>
</row>
<row>
<entry>Message</entry>
<entry>Sender</entry>
<entry>Meaning</entry>
<entry>Parameters</entry>
</row>
<row>
<entry namest="1" nameend="4" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>SetBreakpoint</entry>
<entry>Proxy</entry>
<entry>Trying to set a</entry>
<entry>File - File</entry>
</row>
<row>
<entry/>
<entry/>
<entry>script breakpoint.</entry>
<entry>name</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>Line - Line number</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>Language Ext - Language</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>Extension</entry>
</row>
<row>
<entry>SetMethodBreakpoint</entry>
<entry>Proxy</entry>
<entry>Trying to set a</entry>
<entry>Class - Class name (or file</entry>
</row>
<row>
<entry/>
<entry/>
<entry>breakpoint on a</entry>
<entry>name is language doesn't</entry>
</row>
<row>
<entry/>
<entry/>
<entry>method</entry>
<entry>have classes)</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>Method - Name of the</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>method to set a breakpoint</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>on</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>Parameters - The</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>parameters for the method</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>to set a breakpoint on.</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>This disambiguates in the</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>case of multiple methods</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>with the same name but</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>different parameters</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>Language Ext - Language</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>Extensions</entry>
</row>
<row>
<entry>BreakpointSet</entry>
<entry>Runtime-</entry>
<entry>Breakpoint is set</entry>
<entry>Status - Did the breakpoint</entry>
</row>
<row>
<entry/>
<entry>messaging</entry>
<entry/>
<entry>get set</entry>
</row>
<row>
<entry/>
<entry>environment</entry>
<entry/>
<entry>Error - Error message if it</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>failed</entry>
</row>
<row>
<entry>BreakHit</entry>
<entry>Runtime-</entry>
<entry>A Script hit a</entry>
<entry>File - the file name</entry>
</row>
<row>
<entry/>
<entry>messaging</entry>
<entry>breakpoint</entry>
<entry>Line - the line number</entry>
</row>
<row>
<entry/>
<entry>environment</entry>
</row>
<row>
<entry>Continue</entry>
<entry>Proxy</entry>
<entry>A script should</entry>
<entry>ContinueType - whether</entry>
</row>
<row>
<entry/>
<entry/>
<entry>resume</entry>
<entry>this should continue with a</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>step or a continue</entry>
</row>
<row>
<entry>Pause</entry>
<entry>Runtime-</entry>
<entry>Tells the proxy a</entry>
<entry>PauseID - This is the ID</entry>
</row>
<row>
<entry/>
<entry>messaging</entry>
<entry>script has gotten to</entry>
<entry>we use to map a pause the</entry>
</row>
<row>
<entry/>
<entry>environment</entry>
<entry>a safe place and</entry>
<entry>thread it was requested on.</entry>
</row>
<row>
<entry/>
<entry/>
<entry>paused</entry>
</row>
<row>
<entry namest="1" nameend="4" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0030" num="0060">The foregoing description of preferred embodiments of the present invention has been provided for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many modifications and variations will be apparent to one of ordinary skill in the art. The embodiments were chosen and described in order to best explain the principles of the invention and its practical application, thereby enabling others skilled in the art to understand the invention for various embodiments and with various modifications that are suited to the particular use contemplated. It is intended that the scope of the invention be defined by the following claims and their equivalence.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is: </us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method for debugging in more than one programming language with a multi-language debugger, comprising:
<claim-text>debugging a source code file which contains multiple nested languages;</claim-text>
<claim-text>interpreting multiple nested languages within a single source file and displaying each of the multiple nested languages in a debugging frame;</claim-text>
<claim-text>editing each language in a debugging frame; and</claim-text>
<claim-text>wherein the multi-language debugger uses a standardized interface for a script engine and all communications with the script engine will be through calls to a script debug controller.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the multi-language debugger is extensible and a user can add language definitions to support additional languages.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein if more than one language appears on a stack, a user can see a debuggable frame for each language and the user can inspect variables for each language.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein a proxy is used between executing code being debugged and a debugger.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein a script engine interface can be used by a debugger to communicate metadata to a proxy.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein a debugger interacts with a runtime messaging environment.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein debugging is performed on a server side of a runtime messaging environment.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein a runtime messaging environment interprets language interactions and performs debugging.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the script engine has a static constructor load the script debug controller.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the script debug controller receives information from the script engine, comprising:
<claim-text>a) language extensions for each language;</claim-text>
<claim-text>b) classes that implement the script engine;</claim-text>
<claim-text>c) information on optional capabilities for each language; and</claim-text>
<claim-text>d) language name.</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>
