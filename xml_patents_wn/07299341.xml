<us-patent-grant lang="EN" dtd-version="v4.2 2006-08-23" file="US07299341-20071120.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20071106" date-publ="20071120">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>07299341</doc-number>
<kind>B2</kind>
<date>20071120</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>11419202</doc-number>
<date>20060519</date>
</document-id>
</application-reference>
<us-application-series-code>11</us-application-series-code>
<priority-claims>
<priority-claim sequence="01" kind="national">
<country>TW</country>
<doc-number>91112826 A</doc-number>
<date>20020612</date>
</priority-claim>
</priority-claims>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>12</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>712200</main-classification>
</classification-national>
<invention-title id="d0e61">Embedded system with instruction prefetching device, and method for fetching instructions in embedded systems</invention-title>
<references-cited>
<citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5381539</doc-number>
<kind>A</kind>
<name>Yanai</name>
<date>19950100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5490113</doc-number>
<kind>A</kind>
<name>Tatosian et al.</name>
<date>19960200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>5640600</doc-number>
<kind>A</kind>
<name>Satoh et al.</name>
<date>19970600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>710 33</main-classification></classification-national>
</citation>
<citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>5778422</doc-number>
<kind>A</kind>
<name>Genduso et al.</name>
<date>19980700</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>5778431</doc-number>
<kind>A</kind>
<name>Rahman et al.</name>
<date>19980700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711135</main-classification></classification-national>
</citation>
<citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>5805844</doc-number>
<kind>A</kind>
<name>Gustin et al.</name>
<date>19980900</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>5835947</doc-number>
<kind>A</kind>
<name>Cherabuddi</name>
<date>19981100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>5893921</doc-number>
<kind>A</kind>
<name>Bucher et al.</name>
<date>19990400</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>5920891</doc-number>
<kind>A</kind>
<name>Steinbach et al.</name>
<date>19990700</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>5924119</doc-number>
<kind>A</kind>
<name>Sindhu et al.</name>
<date>19990700</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>5991855</doc-number>
<kind>A</kind>
<name>Jeddeloh et al.</name>
<date>19991100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>5996071</doc-number>
<kind>A</kind>
<name>White et al.</name>
<date>19991100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>6047359</doc-number>
<kind>A</kind>
<name>Fouts</name>
<date>20000400</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>6163835</doc-number>
<kind>A</kind>
<name>Todd et al.</name>
<date>20001200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>6275885</doc-number>
<kind>B1</kind>
<name>Chin et al.</name>
<date>20010800</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>6314472</doc-number>
<kind>B1</kind>
<name>Trieu et al.</name>
<date>20011100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>6341334</doc-number>
<kind>B1</kind>
<name>Kamemaru</name>
<date>20020100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>6405271</doc-number>
<kind>B1</kind>
<name>MacWilliams et al.</name>
<date>20020600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>710109</main-classification></classification-national>
</citation>
<citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>6519685</doc-number>
<kind>B1</kind>
<name>Chang</name>
<date>20030200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711141</main-classification></classification-national>
</citation>
<citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>6523093</doc-number>
<kind>B1</kind>
<name>Bogin et al.</name>
<date>20030200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711137</main-classification></classification-national>
</citation>
<citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>6542982</doc-number>
<kind>B2</kind>
<name>Murakami et al.</name>
<date>20030400</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>6587925</doc-number>
<kind>B2</kind>
<name>Arimilli et al.</name>
<date>20030700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711122</main-classification></classification-national>
</citation>
<citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>6807592</doc-number>
<kind>B2</kind>
<name>Singh et al.</name>
<date>20041000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>710107</main-classification></classification-national>
</citation>
<citation>
<patcit num="00024">
<document-id>
<country>US</country>
<doc-number>6895456</doc-number>
<kind>B2</kind>
<name>Olarig et al.</name>
<date>20050500</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00025">
<document-id>
<country>US</country>
<doc-number>6963954</doc-number>
<kind>B1</kind>
<name>Trehus et al.</name>
<date>20051100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00026">
<document-id>
<country>US</country>
<doc-number>2002/0065967</doc-number>
<kind>A1</kind>
<name>MacWilliams et al.</name>
<date>20020500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>710105</main-classification></classification-national>
</citation>
<citation>
<patcit num="00027">
<document-id>
<country>US</country>
<doc-number>2003/0233531</doc-number>
<kind>A1</kind>
<name>Lin</name>
<date>20031200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
</references-cited>
<number-of-claims>20</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>712200</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>712207</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>712206</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>5</number-of-drawing-sheets>
<number-of-figures>5</number-of-figures>
</figures>
<us-related-documents>
<continuation-in-part>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>10458470</doc-number>
<kind>00</kind>
<date>20030610</date>
</document-id>
<parent-status>PENDING</parent-status>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>11419202</doc-number>
</document-id>
</child-doc>
</relation>
</continuation-in-part>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20060200630</doc-number>
<kind>A1</kind>
<date>20060907</date>
</document-id>
</related-publication>
</us-related-documents>
<parties>
<applicants>
<applicant sequence="001" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Lin</last-name>
<first-name>Chang-Fu</first-name>
<address>
<city>Hsin-Chu</city>
<country>TW</country>
</address>
</addressbook>
<nationality>
<country>TW</country>
</nationality>
<residence>
<country>TW</country>
</residence>
</applicant>
</applicants>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<last-name>Hsu</last-name>
<first-name>Winston</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</parties>
<assignees>
<assignee>
<addressbook>
<orgname>MediaTek Inc.</orgname>
<role>03</role>
<address>
<city>Hsin-Chu Hsien</city>
<country>TW</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Coleman</last-name>
<first-name>Eric</first-name>
<department>2183</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">In a method for fetching instructions in an embedded system, a predicted one of a set of the instructions stored in a memory device is fetched and is subsequently stored in an instruction buffer when a system bus is in a data access phase. When a processor generates an access request for the memory device, the predicted one of the instructions stored in the instruction buffer is provided to the system bus for receipt by the processor upon determining that the predicted one of the instructions stored in the instruction buffer hits the access request from the processor. An embedded system with an instruction prefetching device is also disclosed.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="102.45mm" wi="140.12mm" file="US07299341-20071120-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="87.29mm" wi="96.52mm" orientation="landscape" file="US07299341-20071120-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="185.00mm" wi="123.61mm" orientation="landscape" file="US07299341-20071120-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="142.92mm" wi="118.03mm" orientation="landscape" file="US07299341-20071120-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="198.12mm" wi="136.23mm" file="US07299341-20071120-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="194.82mm" wi="123.87mm" orientation="landscape" file="US07299341-20071120-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">CROSS REFERENCE TO RELATED APPLICATIONS</heading>
<p id="p-0002" num="0001">This continuation-in-part application claims the benefit of U.S. application Ser. No. 10/458,470, which was filed on Jun. 10, 2003, and entitled “EMBEDDED SYSTEM WITH INSTRUCTION PREFETCHING DEVICE, AND METHOD FOR FETCHING INSTRUCTIONS IN EMBEDDED SYSTEMS”, and is included herein by reference.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0002" level="1">BACKGROUND</heading>
<p id="p-0003" num="0002">The invention relates to an embedded system, more particularly to an embedded system with an instruction prefetching device and to a method for fetching instructions in embedded systems.</p>
<p id="p-0004" num="0003"><figref idref="DRAWINGS">FIG. 1</figref> illustrates a conventional embedded system <b>5</b> that comprises a system bus <b>54</b>, a processor <b>51</b> coupled to the system bus <b>54</b>, a memory controller <b>52</b> coupled to the system bus <b>54</b>, a peripheral controller <b>53</b> coupled to the system bus <b>54</b>, and a memory device <b>55</b> coupled to the memory controller <b>52</b>. The peripheral controller <b>53</b> may be various controllers or drivers coupled to the system bus <b>54</b> and can be controlled by the processor <b>51</b>. For example, in a cellular phone applications, the peripheral controller <b>53</b> may be a controller to control the LCD or a controller to control the keypad of a cellular phone. Rather than being coupled to the system bus <b>54</b> directly, in this example the memory device <b>55</b> is coupled to the memory controller <b>52</b> for being controlled and being accessed by the memory controller <b>52</b>.</p>
<p id="p-0005" num="0004">When the processor <b>51</b> wants to fetch instruction from the memory device <b>55</b>, the processor <b>51</b> will issue an access request having a target address directed to the memory controller <b>52</b>. The memory controller <b>52</b> then fetches an instruction from the memory device <b>55</b> according to the access request received from the processor <b>51</b>, and provides the instruction to the system bus <b>54</b> for receipt by the processor <b>51</b>. When the processor <b>51</b> is accessing the memory device <b>55</b>, the system bus <b>54</b> will be occupied since it has to relay the access requests issued by the processor <b>51</b> to the memory controller <b>52</b> and relay the fetched instructions from the memory controller <b>52</b> to the processor <b>51</b>.</p>
<p id="p-0006" num="0005">Aside from accessing the memory device <b>55</b>, the processor <b>51</b> can also access the peripheral controller <b>53</b>. When the processor <b>51</b> wants to access the peripheral controller <b>53</b>, the processor <b>51</b> will issue an access request having a target address directed to the peripheral controller <b>53</b>. Apparently, when the processor <b>51</b> is accessing the peripheral controller <b>53</b>, the system bus <b>54</b> will be occupied since it has to relay the access requests and information corresponding to the access requests between the processor <b>51</b> and the peripheral controller <b>53</b>.</p>
<p id="p-0007" num="0006">Besides, the peripheral controller <b>53</b> and another peripheral controller (not shown) can also exchange information through the system bus <b>54</b>, causing the system bus <b>54</b> to be occupied by the two peripheral controllers.</p>
<p id="p-0008" num="0007">Although the conventional embedded system has a lower system performance, it works well in various applications. However, as the embedded system <b>5</b> becomes more complex, the embedded system <b>5</b> is required to run at higher speeds to achieve better performance. More particularly, access latency occurs during fetching of an instruction from the memory device <b>55</b> after the processor <b>51</b> sent out an access request (i.e., fetching cycle), so the performance of the processor <b>51</b> is degraded. For the conventional embedded system, the fetching cycle occupies approximately 30%˜50% of the instruction cycle of the processor <b>51</b>, so access latency is a problem which cannot be ignored.</p>
<p id="p-0009" num="0008">Two methods are proposed in the related art in order to overcome the above problem.</p>
<p id="p-0010" num="0009">1. An additional cache memory (L2 cache) is incorporated to increase the memory bandwidth, so as to enhance the performance of the embedded system. However, the cache memory (such as an SRAM) has a higher cost and a relatively small memory capacity.</p>
<p id="p-0011" num="0010">2. When the processor <b>51</b> executes an instruction, fetching of a next instruction is executed at the same time. This kind of solution is referred to as instruction prefetching. However, the occupation period of the system bus <b>54</b> becomes longer when the next instruction is among a series of consecutive instructions or has too many branch instructions. Data access to or from the peripheral controller <b>53</b> must wait until fetching of the next instruction has been completed by the processor <b>51</b>. Similarly, when two peripheral controllers <b>53</b> are exchanging information, the processor <b>51</b> also have to wait a period for the system bus <b>54</b> to be freed.</p>
<p id="p-0012" num="0011">In other words, as long as the system bus <b>54</b> is occupied, other information access processes relying on the system bus <b>54</b> have to wait until the system bus <b>54</b> is freed. <figref idref="DRAWINGS">FIG. 2</figref> is a timing chart to illustrate an operating example of the conventional embedded system <b>5</b>. The system bus <b>54</b> is occupied by the instruction fetch phase and the data access phase in turns. In the instruction fetch phase, the processor <b>51</b> communicates with the memory controller <b>52</b> and instructions or data stored in the memory device <b>55</b> are fetched; whereas in the data access phase, the processor <b>51</b> communicates with the peripheral controller <b>53</b> and requests the peripheral controller <b>53</b> to perform certain actions. Alternately, in the data access phase, the peripheral controller <b>53</b> is communicating with another peripheral controller (not shown) through the system bus <b>54</b>. As such, when the system bus <b>54</b> is in the data access phase while one peripheral controller <b>53</b> is communicating with another peripheral controller <b>53</b>, the processor <b>51</b> have to remain idle for a period of time (about two bus cycles) before it is allowed to communicate with the memory controller <b>52</b>.</p>
<p id="p-0013" num="0012">In addition, when the system bus <b>54</b> is occupied since the processor <b>51</b> is accessing the peripheral controller <b>53</b> or two peripheral controllers <b>53</b> are exchanging information, even if the memory controller <b>52</b> is idle the processor <b>51</b> still have to wait for a period of time (about two bus cycles) before it is allowed to communicate with the memory controller <b>52</b>. Therefore, it is preferred that the memory controller <b>52</b> prefetches instructions from the memory device <b>55</b> while the system bus <b>54</b> is occupied by the processor <b>51</b> and the peripheral controller <b>53</b> or by two peripheral controllers. After the system bus <b>54</b> is freed, the memory controller <b>52</b> can send the prefetched instructions, which conform to the requirements of the processor <b>51</b>, to the processor <b>51</b> in response to the request issued by the processor <b>51</b>. The performance of the whole embedded system is therefore increased. An objective of the present invention is to propose a solution to this kind of problem.</p>
<heading id="h-0003" level="1">SUMMARY</heading>
<p id="p-0014" num="0013">Therefore, the object of the present invention is to provide an instruction prefetching device and a method for prefetching instructions. The disclosed device and method allow a memory controller to prefetch instructions from a memory device. Even if the memory device is not a cache memory, the efficiency of fetching instructions is still increased greatly.</p>
<p id="p-0015" num="0014">According to one aspect of the present invention, there is provided a method for fetching instructions in an embedded system that includes a system bus, a processor coupled to the system bus, a peripheral controller coupled to the system bus, and a memory device having a set of the instructions stored therein. The method comprises the steps of:</p>
<p id="p-0016" num="0015">a) determining whether the system bus is in the data access phase;</p>
<p id="p-0017" num="0016">b) fetching a predicted one of the instructions from the memory device, and storing the predicted one of the instructions in an instruction buffer when the system bus is in the data access phase;</p>
<p id="p-0018" num="0017">c) determining whether the processor generates an access request for the memory device;</p>
<p id="p-0019" num="0018">d) determining whether the predicted one of the instructions stored in the instruction buffer hits the access request from the processor upon determining that the processor generated the access request; and</p>
<p id="p-0020" num="0019">e) providing the predicted one of the instructions stored in the instruction buffer to the system bus for receipt by the processor when the predicted one of the instructions stored in the instruction buffer hits the access request from the processor.</p>
<p id="p-0021" num="0020">According to another aspect of the present invention, an embedded system comprises:</p>
<p id="p-0022" num="0021">a system bus for signaling and data transactions;</p>
<p id="p-0023" num="0022">a processor coupled to the system bus;</p>
<p id="p-0024" num="0023">a peripheral controller coupled to the system bus;</p>
<p id="p-0025" num="0024">a memory device having a set of instructions stored therein; and</p>
<p id="p-0026" num="0025">an instruction prefetching device coupled to the system bus and the memory device, the instruction prefetching device monitoring signal transaction on the system bus and fetching a predicted one of the instructions from the memory device when the system bus is in the data access phase, the instruction prefetching device receiving an access request for the memory device from the processor through the system bus, and providing the predicted one of the instructions to the system bus for receipt by the processor when the predicted one of the instructions hits the access request from the processor.</p>
<p id="p-0027" num="0026">According to still another aspect of the present invention, an instruction prefetching device is adapted for use in an embedded system that includes a system bus, a processor coupled to the system bus, a peripheral controller coupled to the system bus, and a memory device having a set of instructions stored therein. The instruction prefetching device comprises:</p>
<p id="p-0028" num="0027">a prefetching controller coupled to the system bus and adapted to monitor transaction on the system bus;</p>
<p id="p-0029" num="0028">a memory controller coupled to the prefetching controller and the memory device; and</p>
<p id="p-0030" num="0029">an instruction buffer coupled to the prefetching controller and the memory controller;</p>
<p id="p-0031" num="0030">the prefetching controller enabling the memory controller to fetch a predicted one of the instructions from the memory device and to store the predicted one of the instructions in the instruction buffer when the prefetching controller determines that the system bus is in the data access phase;</p>
<p id="p-0032" num="0031">the prefetching controller being adapted to receive an access request for the memory device from the processor through the system bus when the system bus is not in the data access phase, and being adapted to provide the predicted one of the instructions stored in the instruction buffer to the processor through the system bus when the predicted one of the instructions stored in the instruction buffer hits the access request from the processor.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0033" num="0032">Other features and advantages of the present invention will be come apparent in the following detailed description of the preferred embodiment with reference to the accompanying drawings, of which:</p>
<p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. 1</figref> is a schematic circuit block diagram illustrating a conventional embedded system;</p>
<p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. 2</figref> is a timing chart showing an operating example of a system bus and a memory interface in the conventional embedded system;</p>
<p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. 3</figref> is a schematic circuit block diagram illustrating the preferred embodiment of an embedded system according to the present invention;</p>
<p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. 4</figref> is a flow chart illustrating a method for fetching instructions in the preferred embodiment; and</p>
<p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. 5</figref> is a timing chart showing an operating example of a system bus and a memory interface in the preferred embodiment.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0039" num="0038">Referring to <figref idref="DRAWINGS">FIG. 3</figref>, the preferred embodiment of an embedded system <b>1</b> according to the present invention is shown to include a system bus <b>11</b>, a processor <b>13</b>, a peripheral controller <b>14</b>, a memory device <b>12</b>, and an instruction prefetching device <b>3</b>.</p>
<p id="p-0040" num="0039">The system bus <b>11</b> is used for signaling and data transactions. As known to those skilled in the art, the system bus <b>11</b> may include an address bus, a control bus, and a data bus, etc.</p>
<p id="p-0041" num="0040">The processor <b>13</b> is coupled to the system bus <b>11</b> for controlling communication and data transmission within the embedded system <b>1</b> or with other external devices (not shown). The processor <b>13</b> may further comprise a cache memory (not shown).</p>
<p id="p-0042" num="0041">The peripheral controller <b>14</b> is coupled to the system bus <b>11</b>. In a cellular phone or other handheld systems, the peripheral controller <b>14</b> may be a controller to control a peripheral device, such as an LCD display, a keypad, an IR (intra-red) device, or a USB (Universal Serial Bus) device.</p>
<p id="p-0043" num="0042">The memory device <b>12</b> has a set of instructions or data stored therein. In this embodiment, the memory device <b>12</b> may be an internal memory located inside the embedded system, or an external memory located outside the embedded system. The memory device <b>12</b> may be a ROM, FLASH, SRAM, DRAM or similar electronic devices for storing instructions of the processor <b>13</b>.</p>
<p id="p-0044" num="0043">The instruction prefetching device <b>3</b> is coupled to the system bus <b>11</b> and the memory device <b>12</b> and serves as an interface for transmission and control between the processor <b>13</b> and the memory device <b>12</b>. The instruction prefetching device <b>3</b> monitors signal transaction on the system bus <b>11</b> and controls a memory controller <b>31</b> to fetch or to prefetch instruction from the memory device <b>12</b>. More specifically, when the system bus <b>11</b> is in the data access phase, the instruction prefetching device <b>3</b> prefetches a predicted one of the instructions from the memory device <b>12</b>. The instruction prefetching device <b>3</b> receives an access request for the memory device <b>12</b> from the processor <b>13</b> through the system bus <b>11</b>, and provides the predicted one of the instructions to the system bus <b>11</b> for receipt by the processor <b>13</b> when the predicted one of the instructions hits the access request from the processor <b>13</b>.</p>
<p id="p-0045" num="0044">In this embodiment, the instruction prefetching device <b>3</b> includes a prefetching controller <b>33</b> coupled to the system bus <b>11</b> for monitoring signal transaction on the system bus <b>11</b>, a memory controller <b>31</b> coupled to the memory device <b>12</b> and the prefetching controller <b>33</b>, and an instruction buffer <b>32</b> coupled to the prefetching controller <b>33</b> and the memory controller <b>31</b>. The prefetching controller <b>33</b> enables the memory controller <b>31</b> to fetch or prefetch instructions from the memory device <b>12</b>. More specifically, the prefetching controller <b>33</b> enables the memory controller <b>31</b> to either fetch instruction, which is currently requested by the processor <b>13</b>, from the memory device <b>12</b>, or prefetch instruction, which is predicted to be requested by the processor <b>13</b>, from the memory device <b>12</b>. The instructions fetched (or prefetched) by the memory controller <b>31</b> are stored in the instruction buffer <b>32</b>. If the processor <b>13</b> is performing a loop function and repeating executing a single instruction, the prefetching controller <b>33</b> can send the instruction stored in the instruction buffer <b>32</b> to the processor <b>13</b> directly without fetching the instruction from the memory device <b>12</b> repeatedly.</p>
<p id="p-0046" num="0045">The system bus <b>11</b> is in the data access phase when the processor <b>13</b> is accessing the peripheral controller <b>14</b> through the system bus <b>11</b>, or when the peripheral controller <b>14</b> is communicating with another peripheral controller (not shown) through the system bus <b>11</b>. When the prefetching controller <b>33</b> determines that the system bus <b>11</b> is in the data access phase, the prefetching controller <b>33</b> enables the memory controller <b>31</b> to prefetch a predicted one of the instructions from the memory device <b>12</b> and to store the predicted one of the instructions in the instruction buffer <b>32</b>. The prefetching controller <b>33</b> receives an access request from the processor <b>13</b> through the system bus <b>11</b> when the system bus <b>11</b> is in the instruction fetching phase, and provides a predicted one of the instructions stored in the instruction buffer <b>32</b> to the processor <b>13</b> through the system bus <b>11</b> when the predicted one of the instructions stored in the instruction buffer <b>32</b> hits the access request from the processor <b>13</b>. It is noted that the predicted one of the instructions is determined by the prefetching controller <b>33</b> according to a previous instruction from the memory device <b>12</b> that was accessed by the processor <b>13</b>.</p>
<p id="p-0047" num="0046">The prefetching controller <b>33</b> determines whether instruction prefetching is allowed or not through monitoring the target address of signal transmitted through the system bus <b>11</b>. When the prefetching controller <b>33</b> finds that the target address of signal transmitted through the system bus <b>11</b> points to the peripheral controller <b>14</b> or another peripheral controller, the prefetching controller <b>33</b> can determine that the system bus <b>11</b> is occupied and the memory controller <b>31</b> is in an idle status. In other words, the prefetching controller <b>33</b> determines that the system bus <b>11</b> is in the data access phase when the prefetching controller <b>33</b> finds that the target address of signal transmitted through the system bus <b>11</b> points to the peripheral controller <b>14</b> or another peripheral controller. The prefetching controller <b>33</b> can then enable the memory controller <b>31</b> to prefetch instructions from the memory device <b>12</b>. If, on the other hand, the prefetching controller <b>33</b> finds that the target address of signal transmitted through the system bus <b>11</b> points to the prefetching controller <b>33</b> itself, the prefetching controller <b>33</b> can determine that the system bus <b>11</b> is occupied due to instruction fetching and the memory controller <b>31</b> is responsible for providing currently requested instructions to the processor <b>13</b>. Therefore the prefetching controller <b>33</b> may not be allowed to enable the memory controller <b>31</b> to prefetch instructions from the memory device <b>12</b>.</p>
<p id="p-0048" num="0047">In other words, the prefetching controller <b>33</b> is allowed to enable the memory controller <b>31</b> to prefetch instructions from the memory device <b>12</b> when the system bus <b>11</b> is in the data access phase and the memory controller <b>31</b> is in the idle status.</p>
<p id="p-0049" num="0048">Referring to <figref idref="DRAWINGS">FIG. 4</figref>, there is shown a flow chart to illustrate how the instruction prefetching device <b>3</b> fetches instructions in the embedded system <b>1</b> of the preferred embodiment. In step <b>51</b>, when a transaction is started on the system bus <b>11</b>, the prefetching controller <b>33</b> determines whether the system bus <b>11</b> is in the data access phase. More specifically, the prefetching controller <b>33</b> examines the target address of the transaction on the system bus <b>11</b> so as to determine whether the system bus <b>11</b> is in the data access phase or not. If the target address of the transaction on the system bus <b>11</b> does not point to the prefetching controller <b>33</b>, the prefetching controller <b>33</b> determines that the system bus <b>11</b> is in the data access phase and step <b>52</b> will be performed next. If, on the other hand, the target address of the transaction on the system bus <b>11</b> points to the prefetching controller <b>33</b> itself, the prefetching controller <b>33</b> determines that the system bus <b>11</b> is not in the data access phase and step <b>53</b> will be performed next.</p>
<p id="p-0050" num="0049">As mentioned, if the target address of the transaction on the system bus <b>11</b> does not point to the prefetching controller <b>33</b>, the prefetching controller <b>33</b> determines that the system bus <b>11</b> is in the data access phase and the memory controller is in the idle status. Therefore in step <b>52</b> the prefetching controller <b>33</b> enables the memory controller <b>31</b> to prefetch a predicted one of the instructions from the memory device <b>12</b> and to store the predicted one of the instructions into the instruction buffer <b>32</b>, and the flow proceeds back to step <b>51</b>. In view of sequential characteristics of the instructions executed by the processor <b>13</b>, the predicted one of the instructions is determined by the prefetching controller <b>33</b> according to previous instructions from the memory device <b>12</b> that were accessed by the processor <b>13</b>.</p>
<p id="p-0051" num="0050">On the other hand, if the target address of the transaction on the system bus <b>11</b> points to the prefetching controller <b>33</b> itself, the prefetching controller <b>33</b> determines that the system bus <b>11</b> is not in the data access phase. Therefore in step <b>53</b>, the prefetching controller <b>33</b> determines whether the processor <b>13</b> generates an access request for the memory device <b>12</b>. When the processor <b>13</b> does not generate an access request for the memory device <b>12</b>, the flow proceeds back to step <b>51</b>. When the processor <b>13</b> does generate an access request for the memory device <b>12</b>, the flow proceeds to step <b>54</b>.</p>
<p id="p-0052" num="0051">In step <b>54</b>, the prefetching controller <b>33</b> determines whether the predicted one of the instructions stored in the instruction buffer <b>32</b> hits the access request from the processor <b>13</b> when the prefetching controller <b>33</b> receives the access request from the processor <b>13</b>. If the predicted one of the instructions stored in the instruction buffer <b>32</b> hits the access request from the processor <b>13</b>, the flow proceeds to step <b>55</b>; otherwise, the flow proceeds to step <b>56</b>.</p>
<p id="p-0053" num="0052">In step <b>55</b>, the prefetching controller <b>33</b> provides the predicted one of the instructions stored in the instruction buffer <b>32</b> to the system bus <b>11</b> for receipt by the processor <b>13</b> since the predicted one of the instructions stored in the instruction buffer <b>32</b> hits the access request from the processor <b>13</b>.</p>
<p id="p-0054" num="0053">On the other hand, in step <b>56</b>, when the predicted one of the instructions stored in the instruction buffer <b>32</b> misses the access request from the processor <b>13</b>, the prefetching controller <b>33</b> enables the memory controller <b>31</b> to fetch an instruction corresponding to the access request from the processor <b>13</b> from the memory device <b>12</b> according to an address signal from the processor <b>13</b>. In addition, the prefetching controller <b>33</b> can further clear the instruction buffer <b>32</b> in step <b>56</b> so as to allow the instruction buffer <b>32</b> to store a next predicted one of the instructions stored in the memory device <b>12</b>. Besides, even though only one instruction buffer <b>53</b> is shown in <figref idref="DRAWINGS">FIG. 3</figref>, the instruction prefetching device <b>3</b> can include a plurality of instruction buffers so as to allow a plurality of prefetched instruction to be stored. An advantage of setting a plurality of instruction buffers is that the prefetching controller <b>33</b> can clear the instruction buffers less frequently. More specifically, only when all the instruction buffers are occupied by prefetched instructions and a new prefetched instruction is going to be stored into one of the instruction buffers, the prefetching controller <b>33</b> performs the clear operation on one or all of the instruction buffers.</p>
<p id="p-0055" num="0054">The flow then proceeds to step <b>55</b> such that the prefetching controller <b>33</b> provides the proper instruction from the memory device <b>12</b> to the system bus <b>11</b> for receipt by the processor <b>13</b>.</p>
<p id="p-0056" num="0055">Referring to <figref idref="DRAWINGS">FIG. 5</figref>, there is shown a timing chart of an operating example of the system bus <b>11</b> and a memory interface of the memory device <b>12</b>. In this example, when the system bus <b>11</b> is in the data access phase (DA<b>1</b>), the prefetching controller <b>33</b> enables the memory controller <b>31</b> to fetch a predicted instruction (IF<b>2</b>) stored in the memory device <b>12</b> and to store the predicted instruction (IF<b>2</b>) in the instruction buffer <b>32</b> such that the prefetching controller <b>33</b> can provide the predicted instruction (IF<b>2</b>) stored in the instruction buffer <b>32</b> to the system bus <b>11</b> for receipt by the processor <b>13</b> upon receiving an access request of the predicted instruction (IF<b>2</b>) from the processor <b>13</b>. Thus, only one bus cycle is needed for the processor <b>13</b> to fetch the predicted instruction (IF<b>2</b>) on the system bus <b>11</b>. Meanwhile, when the predicted instruction (IF<b>2</b>) is sent to the processor <b>13</b> through the system bus <b>11</b>, the prefetching controller <b>33</b> can perform prefetching of a next predicted instruction (IF<b>3</b>), simultaneously. Therefore, the efficiency of the system bus <b>11</b> can be improved, and the latency for fetching instructions by the processor <b>13</b> can be effectively shortened. For example, in the stage of data access (DA<b>3</b>), the embedded system <b>1</b> of the present invention has been advanced by about two bus cycles as compared to the timing chart of <figref idref="DRAWINGS">FIG. 2</figref> for the aforesaid conventional embedded system.</p>
<p id="p-0057" num="0056">While the present invention has been described in connection with what is considered the most practical and preferred embodiment, it is understood that this invention is not limited to the disclosed embodiment but is intended to cover various arrangements included within the spirit and scope of the broadest interpretation so as to encompass all such modifications and equivalent arrangements.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. An instruction prefetching device adapted for use in an embedded system that comprises a system bus, a processor coupled to the system bus, at least one peripheral controller coupled to the system bus, and a memory device, said instruction prefetching device comprising:
<claim-text>a memory controller coupled to said memory device for serving as an input/output interface of said instruction prefetching device and said memory device and for fetching an instruction from said memory device;</claim-text>
<claim-text>an instruction buffer coupled to said memory controller, for storing the instruction fetched by said memory controller; and</claim-text>
<claim-text>a prefetching controller coupled to said system bus, for monitoring signal transaction on said system bus so as to determine whether said system bus is in a data access phase or not, wherein when said system bus is in the data access phase, the prefetching controller enables the memory controller to prefetch the instruction from said memory device and store the prefetched instruction into said instruction buffer without utilizing said system bus.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The instruction prefetching device as claimed in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the prefetched instruction is predicted by said prefetching controller according to an instruction previously accessed by said processor.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The instruction prefetching device as claimed in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein said prefetching controller determines whether said system bus is in the data access phase or not through monitoring the target address of signal transmitted through said system bus.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The instruction prefetching device as claimed in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein when said processor requests an instruction to be fetched, said prefetching controller first determines whether the instruction stored in said instruction buffer hits the request of said processor; if the instruction stored in said instruction buffer hits the request of said processor, said prefetching controller directly fetched the instruction from said instruction buffer and then send the fetched instruction to said processor; and if the instruction stored in said instruction buffer does not hit the request of said processor, said prefetching controller controls said memory controller to fetch the requested instruction from said memory device and then send the fetched instruction to said processor.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. An embedded system comprising:
<claim-text>a system bus for signaling and data transactions;</claim-text>
<claim-text>a processor coupled to said system bus;</claim-text>
<claim-text>a memory device; and</claim-text>
<claim-text>an instruction prefetching device coupled to said system bus and said memory device, for monitoring signal transaction on said system bus so as to determine whether said system bus is in a data access phase or not, wherein when said system bus is in the data access phase, the instruction prefetching device prefetches an instruction from said memory device and store the prefetched instruction into the instruction prefetching device without utilizing said system bus.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The embedded system as claimed in <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein said instruction prefetching device comprises:
<claim-text>a memory controller serving as an input/output interface of said instruction prefetching device and said memory device and for fetching the instruction from said memory device;</claim-text>
<claim-text>an instruction buffer for storing the instruction fetched by said memory controller; and</claim-text>
<claim-text>a prefetching controller coupled to said system bus, for monitoring signal transaction on said system bus and for receiving requests from said processor through said system bus, wherein when said system bus is in the data access phase, the prefetching controller controls the memory controller to prefetch the instruction from said memory device and store the prefetched instruction into the instruction buffer.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The embedded system as claimed in <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the prefetched instruction is predicted by said instruction prefetching device according to an instruction previously accessed by said processor.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The embedded system as claimed in <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein said instruction prefetching device determines whether said system bus is in the data access phase or not through monitoring the target address of signal transmitted through said system bus.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The embedded system as claimed in <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein when said processor requests an instruction to be fetched, said instruction prefetching device first determines whether the instruction stored in said instruction prefetching device hits the request of said processor; if the instruction stored in said instruction prefetching device hits the request of said processor, said instruction prefetching device directly sends the instruction stored in said instruction prefetching device to said processor; and if the instruction stored in said instruction prefetching device does not hit the request of said processor, said instruction prefetching device fetches the requested instruction from said memory device and then send the fetched instruction to said processor.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. A method for fetching instructions in an embedded system that comprises a system bus, a processor, a memory device, and an instruction fetching device, said method comprising the steps of:
<claim-text>a) monitoring signal transaction on said system bus so as to determine whether said system bus is in a data access phase or not; and</claim-text>
<claim-text>b) performing an instruction prefetching procedure without utilizing said system bus when said system bus is in the data access phase, and performing an instruction fetching procedure when said system bus is not in the data access phase.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method as claimed in <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein said instruction prefetching procedure comprises:
<claim-text>predicting an instruction that will possibly be fetched in the future according to an instruction previously accessed by said processor;</claim-text>
<claim-text>prefetching the predicted instruction from said memory device; and</claim-text>
<claim-text>storing the prefetched instruction into said instruction fetching device.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method as claimed in <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein said instruction fetching procedure comprises:
<claim-text>receiving an instruction fetching request from said processor;</claim-text>
<claim-text>determining whether the instruction stored in said instruction fetching device hits the instruction fetching request received from said processor;</claim-text>
<claim-text>if the instruction stored in said instruction fetching device hits the instruction fetching request received from said processor, directly sending the stored instruction to said processor; and</claim-text>
<claim-text>if the instruction stored in said instruction fetching device misses the instruction fetching request received from said processor, fetching the requested instruction from said memory device according to the instruction fetching request received from said processor, and then sending the fetched instruction to said processor.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The method as claimed in <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein whether said system bus is in the data access phase or not is determined through monitoring the target address of signal transaction on said system bus.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The method as claimed in <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein when said processor requests an instruction to be fetched, the instruction fetching device performs a determining procedure, and said determining procedure comprises:
<claim-text>determining whether the instruction stored in said instruction fetching device hits the request of said processor;</claim-text>
<claim-text>if the instruction stored in said instruction fetching device hits the request of said processor, directly sending the stored instruction to said processor; and</claim-text>
<claim-text>if the instruction stored in said instruction fetching device misses the request of said processor, fetching the requested instruction from said memory device according to the request of said processor, and then sending the fetched instruction to said processor.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. An instruction prefetching device adapted for use in an embedded system that comprises a system bus, a processor coupled to the system bus, at least one peripheral controller coupled to the system bus, and a memory device, said instruction prefetching device comprising:
<claim-text>a memory controller coupled to said memory device for serving as an input/output interface of said instruction prefetching device and said memory device and for fetching an instruction from said memory device;</claim-text>
<claim-text>an instruction buffer coupled to said memory controller, for storing the instruction fetched by said memory controller; and</claim-text>
<claim-text>a prefetching controller coupled to said system bus, for monitoring signal transaction on said system bus so as to determine whether said system bus is in a data access phase or not, wherein said prefetching controller determines whether said system bus is in the data access phase or not through monitoring the target address of signal transmitted through said system bus, and when said system bus is in the data access phase, the prefetching controller enables the memory controller to prefetch the instruction from said memory device and store the prefetched instruction into said instruction buffer.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. An embedded system comprising:
<claim-text>a system bus for signaling and data transactions;</claim-text>
<claim-text>a processor coupled to said system bus;</claim-text>
<claim-text>a memory device; and</claim-text>
<claim-text>an instruction prefetching device coupled to said system bus and said memory device, for monitoring signal transaction on said system bus so as to determine whether said system bus is in a data access phase or not, wherein said instruction prefetching device determines whether said system bus is in the data access phase or not through monitoring the target address of signal transmitted through said system bus, and when said system bus is in the data access phase, the instruction prefetching device prefetches an instruction from said memory device and store the prefetched instruction into the instruction prefetching device.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. A method for fetching instructions in an embedded system that comprises a system bus, a processor, and a memory device, said method comprising:
<claim-text>a) monitoring signal transaction on said system bus so as to determine whether said system bus is in a data access phase or not; and</claim-text>
<claim-text>b) performing an instruction prefetching procedure when said system bus is in the data access phase, and performing an instruction fetching procedure when said system bus is not in the data access phase;</claim-text>
<claim-text>wherein whether said system bus is in the data access phase or not is determined through monitoring the target address of signal transaction on said system bus.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. An instruction prefetching device adapted for use in an embedded system that comprises a system bus, a processor coupled to the system bus, at least one peripheral controller coupled to the system bus, and a memory device, said instruction prefetching device comprising:
<claim-text>a memory controller coupled to said memory device for serving as an input/output interface of said instruction prefetching device and said memory device and for fetching an instruction from said memory device;</claim-text>
<claim-text>an instruction buffer coupled to said memory controller, for storing the instruction fetched by said memory controller; and</claim-text>
<claim-text>a prefetching controller coupled to said system bus, for monitoring signal transaction on said system bus so as to determine whether said memory controller is idle while said system bus is occupied, wherein when said memory controller is idle and said system bus is occupied, the prefetching controller enables the memory controller to prefetch the instruction from said memory device and store the prefetched instruction into said instruction buffer.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. An embedded system comprising:
<claim-text>a system bus for signaling and data transactions;</claim-text>
<claim-text>a processor coupled to said system bus;</claim-text>
<claim-text>a memory device; and</claim-text>
<claim-text>an instruction prefetching device coupled to said system bus and said memory device, for monitoring signal transaction on said system bus so as to determine whether said memory controller is idle while said system bus is occupied, wherein when said memory controller is idle and said system bus is occupied, the instruction prefetching device prefetches an instruction from said memory device and store the prefetched instruction into the instruction prefetching device.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. A method for fetching instructions in an embedded system that comprises a system bus, a processor, a memory device, and a memory controller, said method comprising:
<claim-text>a) monitoring signal transaction on said system bus so as to determine whether said memory controller is idle while said system bus is occupied; and</claim-text>
<claim-text>b) performing an instruction prefetching procedure when it is determined that said memory controller is idle while said system bus is occupied, and performing an instruction fetching procedure when said memory controller is not idle and said system bus is occupied.</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>
