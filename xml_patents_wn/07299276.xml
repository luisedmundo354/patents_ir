<us-patent-grant lang="EN" dtd-version="v4.2 2006-08-23" file="US07299276-20071120.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20071106" date-publ="20071120">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>07299276</doc-number>
<kind>B1</kind>
<date>20071120</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>09738749</doc-number>
<date>20001214</date>
</document-id>
</application-reference>
<us-application-series-code>09</us-application-series-code>
<us-term-of-grant>
<us-term-extension>862</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>15</main-group>
<subgroup>16</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>15</main-group>
<subgroup>173</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>709224</main-classification>
<further-classification>709203</further-classification>
<further-classification>709217</further-classification>
<further-classification>709219</further-classification>
<further-classification>709223</further-classification>
</classification-national>
<invention-title id="d0e53">Technique for monitoring health of network device using data format verification</invention-title>
<references-cited>
<citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5611050</doc-number>
<kind>A</kind>
<name>Theimer et al.</name>
<date>19970300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709223</main-classification></classification-national>
</citation>
<citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>6061695</doc-number>
<kind>A</kind>
<name>Slivka et al.</name>
<date>20000500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>715513</main-classification></classification-national>
</citation>
<citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6138157</doc-number>
<kind>A</kind>
<name>Welter et al.</name>
<date>20001000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709224</main-classification></classification-national>
</citation>
<citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>6327622</doc-number>
<kind>B1</kind>
<name>Jindal et al.</name>
<date>20011200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709228</main-classification></classification-national>
</citation>
<citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>6477483</doc-number>
<kind>B1</kind>
<name>Scarlat et al.</name>
<date>20021100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709224</main-classification></classification-national>
</citation>
<citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>6662217</doc-number>
<kind>B1</kind>
<name>Godfrey et al.</name>
<date>20031200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709219</main-classification></classification-national>
</citation>
<citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2002/0188631</doc-number>
<kind>A1</kind>
<name>Tiemann et al.</name>
<date>20021200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707513</main-classification></classification-national>
</citation>
<citation>
<nplcit num="00008">
<othercit><i>Regular Expression Syntax</i>, Printed from website on Nov. 17, 2000, http://www.microsoft.com, 3 pages.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00009">
<othercit>Alfred V. Aho, et al. “Compilers Principles, Techniques and Tools”, Bell Telephone Laboratories, Inc., Addison-Wesley, 1986, 4 pages.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00010">
<othercit>Steve Mansour, “A Tao of Regular Expressions,” Printed from website on Mar. 6, 2001, http://www.jmason.org, 10 pages.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
</references-cited>
<number-of-claims>35</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>709224</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709105</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709201</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709203</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709205</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709217</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709219</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709223</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709229</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709232</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>4</number-of-drawing-sheets>
<number-of-figures>4</number-of-figures>
</figures>
<parties>
<applicants>
<applicant sequence="001" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Strawn</last-name>
<first-name>Gary</first-name>
<address>
<city>Morgan Hill</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
</applicants>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<last-name>Wolf</last-name>
<first-name>Dean E.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="02" rep-type="attorney">
<addressbook>
<orgname>Beyer Weaver LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</parties>
<assignees>
<assignee>
<addressbook>
<orgname>Cisco Technology, Inc.</orgname>
<role>02</role>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Maung</last-name>
<first-name>Zarni</first-name>
<department>2151</department>
</primary-examiner>
<assistant-examiner>
<last-name>Phillips</last-name>
<first-name>Hassan</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A technique is disclosed for determining a health status of a selected network device in a data network. A resource request is transmitted to the selected network device. Data including content information is then received from the network device in response to the resource request. At least a portion of the content information is verified by verifying at least one format of a selected portion of content information using format verification rules. The health status of the network device may then be determined based upon the results of the format verification.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="192.45mm" wi="142.75mm" file="US07299276-20071120-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="214.55mm" wi="136.06mm" orientation="landscape" file="US07299276-20071120-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="247.23mm" wi="146.98mm" file="US07299276-20071120-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="207.35mm" wi="164.51mm" file="US07299276-20071120-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="164.34mm" wi="146.13mm" orientation="landscape" file="US07299276-20071120-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0002" num="0001">1. Field of the Invention</p>
<p id="p-0003" num="0002">The present invention relates generally to data networks and more specifically to a technique for monitoring the health of network device using data format verification.</p>
<p id="p-0004" num="0003">2. Background</p>
<p id="p-0005" num="0004">Many of today's Internet content providers such as, for example, Yahoo.com, utilize a load-balanced server system in order to quickly provide desired content to a plurality of different users at substantially the same time. A block diagram of a conventional load-balanced server system is illustrated in <figref idref="DRAWINGS">FIG. 1</figref> of the drawings. As shown in <figref idref="DRAWINGS">FIG. 1</figref>, a load-balanced server system <b>110</b> may be used by a content provider to respond to data requests from client devices (such as client device <b>102</b>) via the Internet <b>104</b>. The load-balanced server system <b>110</b> includes a load balancing device <b>106</b> and a plurality of server devices <b>108</b>. The load balancing device <b>106</b> may be configured to perform the functions of a virtual server. When the virtual server receives a data request from the client device <b>102</b>, it forwards the request to an appropriate server in the server farm <b>108</b>.</p>
<p id="p-0006" num="0005">According to conventional techniques, each of the servers in the server farm is periodically probed in order to determine whether the server is healthy and is operating properly. Conventionally, there are a variety of tests which may be performed in order to determine the health or status of a particular server in the server farm. As shown in the example <figref idref="DRAWINGS">FIG. 1</figref>, health monitoring may be performed by a health monitoring agent or device <b>106</b><i>a </i>to determine which servers are active and healthy. For example, a selected server may be pinged in order to verify that the selected server is on-line.</p>
<p id="p-0007" num="0006">A more qualitative status check involves transmitting a HTTP request to a selected server, and analyzing the data of the server's response in order to determine the health of the selected server. For example, a health monitoring device may transmit an HTTP request to a selected server to thereby cause the server to transmit an HTTP response to the health monitoring device. The data from the HTTP response may then be analyzed to determine whether the selected server is healthy and functioning properly.</p>
<p id="p-0008" num="0007">Typically, the health monitor knows what to request and only vaguely what kind of response to expect. For example, when verifying an HTTP reply, the HTTP reply codes can be checked for error values in the header portion of the HTTP response to determine the relative health or status of the server. However, the error codes can not be used to verify that the retrieved resource is completely valid.</p>
<p id="p-0009" num="0008">According to an alternate technique, the HTTP request submitted by the health monitoring device includes a request for the selected server to transmit an HTTP response which includes static HTML data such as, for example, a static HTML page. When the health monitoring device receives the static HTML data, it may then perform content verification of the static HTML data to determine whether the selected server is functioning properly. Typically, content verification is performed by comparing the received static HTML data to preconfigured HTML data stored at the health monitoring device. Thus, for example, the health monitoring device may check the health of a selected server by submitting a request to the server to transmit a specific, static HTML page used for test purposes. If the server is healthy, it should be able to transmit the requested test HTML page to the health monitoring device. The health monitoring device expects to receive specific HTML data from the selected server in response to the health status request. Thus, when the health monitoring device receives the test HTML data from the selected server, it compares the received HTML data to preconfigured HTML data stored at the health monitoring device to thereby verify the accuracy of the content of the test HTML page.</p>
<p id="p-0010" num="0009">One problem with the above-described server health monitoring technique is that it does not allow verification of non-deterministic responses, such as CGI generated responses. Additionally, conventional server health monitoring techniques are ineffective when used to verify the contents of customized or dynamically generated data. One reason why a conventional health monitoring device is unable to perform this function is that the specific content of a customized or dynamically generated HTML page typically cannot be predetermined. Since the health monitoring device does not know the specific content which it expects to receive, it is unable to perform content verification, and is therefore unable to determine whether the server is functioning properly.</p>
<p id="p-0011" num="0010">In order to partially overcome the above-described problems, conventional server health monitoring techniques have attempted to perform content verification of customized or dynamically generated HTML pages by checking for static content which is expected to be included in each requested HTML page. For example, a content provider such as Yahoo.com may include the text “copyright Yahoo.com” on each customized or dynamically generated web page. Thus, when the health monitoring device requests, for example, a dynamically generated web page from a selected Yahoo server, it may determine the health of the server by verifying the static portion (e.g. “copyright Yahoo.com”) of the content of the dynamically generated HTML page. However, this modified technique of server health verification remains ineffective for verifying non-deterministic data such as customized or dynamically generated data.</p>
<p id="p-0012" num="0011">While conventional techniques for monitoring the health of selected servers in a load-balanced server system have improved, there currently exists a number of problems which still need to be addresses. Accordingly, there exists a continual need to improve upon network device health monitoring techniques.</p>
<heading id="h-0002" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0013" num="0012">According to specific embodiments of the present invention, a method and computer program product are disclosed for determining a health status of a selected network device in a data network. A resource request is transmitted to the selected network device. Data including content information is then received from the network device in response to the resource request. At least a portion of the content information is verified by verifying at least one format of a selected portion of content information using format verification rules. According to a specific implementation, the format verification rules may include pre-defined regular expressions. Additionally, according to a specific implementation, verification of the content information may include determining whether any inconsistencies are detected in any of the formats of the selected content information being analyzed. The health status of the network device may then be determined based upon the results of the content verification.</p>
<p id="p-0014" num="0013">Alternate embodiments of the present invention are directed to a method and computer program product for performing content verification of data received from a selected network device. The data received from the selected network device includes content information. At least a portion of the content information is verified by verifying at least one format of a selected portion of the content information using pre-defined format verification rules. In performing the content verification, a determination may be made as to whether any inconsistencies are detected in at least one format of the selected content information being analyzed.</p>
<p id="p-0015" num="0014">Other embodiments of the present invention are directed to a method and computer program product for determining a health status of a selected network device in a data network. A resource request is transmitted to the selected network device. Data, including content information, is received from the network device in response to the resource request. At least one format of a selected portion of the content information is verified using format verification rules. According to a specific embodiment, the format verification includes determining whether there are any inconsistencies in any of the formats of the selected content information. Thereafter, the health status of the selected network device may be determined based upon the results of the format verification of the received data.</p>
<p id="p-0016" num="0015">An alternate embodiment is directed to a system for determining a health status of a selected network device in a data network. The system comprises at lease one CPU, memory which is adapted to store format verification rules, and at least one interface for communicating with the selected network device. The system may be configured to transmit a resource request to the selected network device. The system may also be configured to receive data from the network device in response to the resource request. The received data may include content information. The system is also configured to verify at least a portion of the content information by verifying at least one format of a selected portion of the content information using the format verification rules. According to a specific implementation, the format verification rules may include pre-defined regular expressions. The system may further be configured to determine the health status of the network device based upon the results of the content verification analysis.</p>
<p id="p-0017" num="0016">Another embodiment of the present invention is directed to a system for performing content verification of data received from a selected network device. The system comprises at least one CPU, memory adapted to store format verification rules, and at least one interface for communicating with the selected network device. The system is configured to receive data from the network device. The data may include content information such as, for example, HTML data. The system may be further configured to verify at least a portion of the content information by verifying at least one format of a selected portion of the content information using the format verification rules. The system may also be configured to determine whether any inconsistencies are detected in the formats of the selected content information being verified.</p>
<p id="p-0018" num="0017">A different embodiment of the present invention is directed to a system for determining a health status of a selected network device in a data network. The system comprises at least one CPU, memory adapted to store format verification rules, and at least one interface for communicating with the selected network device. The system may be configured to transmit a resource request to the selected network device, and may be configured to receive data from the network device in response to the resource request. The data may include content information. The system may further be configured to verify at least one format of a selected portion of the content information using pre-determined format verification rules. The format verification may include determining whether any inconsistencies are detected in any of the formats of the selected content information being analyzed. The system may also be configured to determine whether the network device is functioning properly based upon the results of the format verification analysis.</p>
<p id="p-0019" num="0018">Additional objects, features and advantages of the various aspects of the present invention will become apparent from the following description of its preferred embodiments, which description should be taken in conjunction with the accompanying drawings.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 1</figref> shows a block diagram of a data network which may be used for implementing the technique of the present invention.</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 2</figref> shows a flow diagram of a Server Health Monitoring Procedure <b>200</b> in accordance with a specific embodiment of the present invention.</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 3</figref> shows a flow diagram of a Content Verification Procedure <b>300</b> in accordance with a specific embodiment of the present invention.</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 4</figref> shows a network device <b>60</b> suitable for implementing the network device health monitoring technique of the present invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS</heading>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 2</figref> shows a flow diagram of a Server Health Monitoring Procedure <b>200</b> in accordance with a specific embodiment of the present invention. According to a specific implementation, the Server Health Monitoring Procedure may be implemented by a health monitoring device or agent such as agent <b>106</b><i>a </i>of <figref idref="DRAWINGS">FIG. 1</figref>. It will be appreciated that the health monitoring technique of the present invention may be used to monitor the health of any network device which transmits data that conforms with a standardized or recognizable format. For purposes of illustration, it is assumed that the Server Health Monitoring Procedure <b>200</b> of <figref idref="DRAWINGS">FIG. 2</figref> is used to monitor the health of a particular server (e.g. <b>106</b><i>a</i>) of the load-balanced server farm <b>110</b> of <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0025" num="0024">As shown at <b>202</b> of <figref idref="DRAWINGS">FIG. 2</figref>, a specific network device (e.g. Server A <b>108</b><i>a, </i><figref idref="DRAWINGS">FIG. 1</figref>) is selected for health monitoring analysis. An attempt is then made (<b>204</b>) to connect to the selected server. If no connection to the server has been made within a first pre-determined time period (which may be a configurable parameter), then it may be determined (<b>206</b>) that the connection attempt to the server has timed out. Accordingly, the connection time out error is reported (<b>218</b>) to an appropriate location for handling.</p>
<p id="p-0026" num="0025">Assuming that the health monitoring device establishes a connection to the selected server, the health monitoring device may then send (<b>208</b>) a “Get Resource” request to the selected server in order to retrieve desired data from the selected server relating to a desired file or resource to be analyzed to content or format verification. For example, the “Get Resource” request may include an HTTP request to receive data associated with a specific URL such as, for example, a URL corresponding to a specific web or HTML page. If the health monitoring device does not receive a response from the selected server within a second pre-determined time period (which may be a configurable parameter), the health monitoring device may determine (<b>210</b>) that the “Get Resource” request has timed out. Accordingly, the Get Resource time out error is reported (<b>218</b>) to an appropriate location for handling.</p>
<p id="p-0027" num="0026">At <b>212</b> it is assumed that a response from the selected server has been received at the health monitoring device. For example, the response may be an HTTP response which includes data such as, for example, HTML data, JPEG data, or other content information corresponding to the URL specified in the Get Resource request.</p>
<p id="p-0028" num="0027">According to a specific embodiment, once the response to a Get Resource request has been received by the health monitoring device, content verification of the received data may be performed (<b>214</b>) by verifying the format(s) of all or a selected portion of the received data using pre-defined format verification rules. According to a specific implementation, verification of the received data using the pre-defined format verification rules may be accomplished by implementing the Content Verification Procedure <b>300</b> of <figref idref="DRAWINGS">FIG. 3</figref> (described in greater detail below).</p>
<p id="p-0029" num="0028">According to a specific embodiment, the pre-defined format verification rules may include regular expressions. As commonly known to one having ordinary skill in the art, regular expressions are patterns of text which may include ordinary characters (e.g. A-Z) and special characters known as metacharacters. A regular expression specifies a pattern which describes one or more strings to match when searching a body of text. Thus, for example, a regular expression may serve as a template for matching a character pattern to one or more strings which are located in the body of the text. A more detailed description of format verification using regular expressions is provided with respect to <figref idref="DRAWINGS">FIG. 3</figref> of the drawings.</p>
<p id="p-0030" num="0029">Using the results of the data content verification, a determination may then be made (<b>216</b>) as to whether the selected server is healthy or functioning properly. Assuming that there are no errors detected in the format of the received data, the health monitoring device may conclude that the selected server is healthy (e.g., functioning properly). Thereafter, the health monitoring device may select a different server or other network device for health monitoring analysis.</p>
<p id="p-0031" num="0030">If, however, at least one error is detected in the format of the received data, the health monitoring device may conclude that the selected server is not healthy or is not functioning properly, and may then report (<b>218</b>) the error to an appropriate location for handling. According to a specific implementation, any errors detected by the health monitoring device may be reported to a user, system administrator, and/or another network device for handling. In one implementation, if an error has been reported for a selected server, that server may be taken off line.</p>
<p id="p-0032" num="0031">According to a specific implementation, separate threads of the Server Health Monitoring Procedure may be implemented concurrently in order to monitor the health status of several network devices at the same time.</p>
<p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. 3</figref> shows a flow diagram of a Content Verification Procedure <b>300</b> in accordance with a specific embodiment of the present invention. According to one embodiment, the Content Verification Procedure <b>300</b> may be implemented by the health monitoring device during its verification of content of data received from a selected network device. As shown at <b>302</b> at <figref idref="DRAWINGS">FIG. 3</figref>, content verification is achieved using format verification, which may be performed on all or a selected portion of the received data by applying predefined format verification rules to the received data. According to a specific implementation, the format verification rules may be achieved using regular expressions. Examples of regular expressions are provided below.</p>
<p id="p-0034" num="0033">When the health monitoring device receives a response form the selected server, it can use pre-defined regular expressions to determine whether or not the received response is valid by validating the format of the response data, rather than by validating the content of the actual data itself.</p>
<p id="p-0035" num="0034">It will be appreciated that regular expressions are very flexible and powerful in their ability to verify a resource. Using regular expressions, a user is able to configure a health monitoring device to verify the format of non-deterministic data such as, for example, the customized or dynamically generated content data of any web page. In this way, content verification of a web page or other resource file may be performed without knowing what the actual content of the resource file should be.</p>
<p id="p-0036" num="0035">According to a specific embodiment, regular expressions may be configured using an operating system command set language such as, for example, Cisco System's IOS command set. This provides for a simple user interface and allows configuration through a telnet or similar command-like connection.</p>
<p id="p-0037" num="0036">Returning to <figref idref="DRAWINGS">FIG. 3</figref>, at <b>306</b> a determination is made as to whether any inconsistencies have been detected in the format verification analysis of the received data. If no inconsistencies have been detected, then the Content Verification Procedure <b>300</b> may return a “status OK” message (<b>308</b>). If, however, at least one inconsistency is detected in the format of the received data, the Content Verification Procedure may report a “status error” message (<b>310</b>). According to a specific implementation, any status message reported by the Content Verification Procedure may be reported to the Server Health Monitoring Procedure in order to allow the Server Health Monitoring Procedure to determine whether the selected server or network device is healthy and/or functioning properly.</p>
<heading id="h-0005" level="1">ILLUSTRATIVE EXAMPLES</heading>
<p id="p-0038" num="0037">The following examples are intended to help provide the reader with a better understanding of the network device health monitoring technique of the present invention using format verification rules.</p>
<heading id="h-0006" level="1">Example 1</heading>
<p id="p-0039" num="0038">In a first example, it is assumed that it is desired to perform a health monitor status check on a web server which returns a web page with the current time on it (herein referred to as a “current time” web page). In this first example, it is further assumed that the current time web page reports the time in the following format: HH:MM AM/PM, where HH denotes the hours portion of the current time, and MM denotes the minutes portion of the current time.</p>
<p id="p-0040" num="0039">In this example, the web page is an HTML page which is dynamically generated by the server each time it receives a specific request for that page. Using conventional health monitoring techniques, it would not be possible for the health monitoring device to verify that a valid time was returned since the content of the web page is continuously changing. However, using the technique of the present invention, the health of the web server may be determined by verifying the format of the data of the current time web page. For example, the format of the time information of the requested web page may be verified using a regular expression, as shown below:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>([1-9]|1[0-2]):[0-5][0-9](A|P)M  (1)<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0041" num="0040">Using the above regular expression as shown at (1), the time data of the current time web page must meet the following criteria in order to be validated. The hours portion of the time value (e.g., HH) must be an integer from 1 to 12, inclusive. This number must be followed by a colon. The minutes portion of the time value (e.g., MM) must then be a number from 0 to 59, inclusive. The time data string must then be followed by the characters “AM” or “PM”.</p>
<p id="p-0042" num="0041">Thus, for example, according to the regular expression defined in (1), the health monitoring device will validate a string such as “3:06 PM,” but would not validate a data string such as “0:83 KM.” If the health monitoring device determines that the format of the time data string is invalid, it will assume that the web server is not functioning properly, and will report an error to an appropriate device or location.</p>
<heading id="h-0007" level="1">Example 2</heading>
<p id="p-0043" num="0042">In this second example, it is assumed that a web server is configured to return a web page which contains at least one stock symbol and its respective current dollar value. Using conventional health monitoring techniques, a simple text verification search can not be used to verify the content of this web page since there is no way to know what ticker symbol the user will request or what the corresponding dollar value will be. However, using the technique of the present invention, it is possible to validate the information returned by the server by validating the format of the returned data.</p>
<p id="p-0044" num="0043">Thus, using the technique of the present invention, a health monitoring device is able to validate the information returned by the server by validating the format of at least a portion of the information. If there are no inconsistencies the format of the analyzed data, then the health monitoring device may conclude that the web server is healthy and functioning properly. An example of a regular expression which may be used to validate a stock symbol and dollar amount is shown below:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>([A-Z]{1,4}|[A-Z]{4}X) ($(0|[1-9][0-9]*).[0-9]{2})  (2)<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0045" num="0044">In the example above, it is assumed that the web server will return a web page which includes a ticker symbol followed by the dollar price. According to the regular expression rules defined in (2), the ticker symbol must have a length of 1-4 characters, or must have a length of five characters with the last character being an “X.” Further, the dollar value must include the dollar sign followed by a number which can be 0 or positive (but can not have leading zeros), followed by a decimal point, followed by two more numeric digits. Thus, for example, using the regular expression rules defined in (2), the health monitor would validate a string such as “CSCO $100.00”, but would not validate a data string such as “CCSCO $1F”.</p>
<p id="p-0046" num="0045">It will be appreciated that one or more desired format verification rules may be applied to any given data string in order to verify the content of such data. For example, a Get Resource request from the health monitoring device may specify a specific web page which includes both a current time stamp and at least one stock ticker symbol. In this situation, both of the regular expressions (1) and (2) may be used to verify the format of the data corresponding to the requested web page.</p>
<p id="p-0047" num="0046">A more detailed discussion of regular expressions and their use is provided in the book entitled “Compilers, Principles, Techniques, and Tools,” by Alfred V. Aho, Bell Telephone Laboratories, Inc., 1988, which is incorporated herein by reference in its entirety for all purposes.</p>
<heading id="h-0008" level="1">Other Embodiments</heading>
<p id="p-0048" num="0047">Generally, the network device health monitoring technique of the present invention may be implemented on software and/or hardware. For example, it can be implemented in an operating system kernel, in a separate user process, in a library package bound into network applications, on a specially constructed machine, or on a network interface card. In a specific embodiment of this invention, the technique of the present invention is implemented in software such as an operating system or in an application running on an operating system.</p>
<p id="p-0049" num="0048">A software or software/hardware hybrid implementation of the network device health monitoring technique of this invention may be implemented on a general-purpose programmable machine selectively activated or reconfigured by a computer program stored in memory. Such programmable machine may be a network device designed to handle network traffic, such as, for example, a router or a switch. Such network devices may have multiple network interfaces including frame relay and ISDN interfaces, for example. Specific examples of such network devices include routers and switches. For example, the network devices implementing this invention may be specially configured routers or servers such as specially configured router models 1600, 2500, 2600, 3600, 4500, 4700, 7200, 7500, and 12000 available from Cisco Systems, Inc. of San Jose, Calif., or may be specially configured switches such as the specially configured switch model Catalyst 6000, available from Cisco Systems, Inc. A general architecture for some of these machines will appear from the description given below. In an alternative embodiment, the network device health monitoring technique of this invention may be implemented on a general-purpose network host machine such as a personal computer or workstation. Further, the invention may be at least partially implemented on a card (e.g., an interface card) for a network device or a general-purpose computing device.</p>
<p id="p-0050" num="0049">Referring now to <figref idref="DRAWINGS">FIG. 4</figref>, a network device <b>60</b> suitable for implementing the network device health monitoring technique of the present invention includes a master central processing unit (CPU) <b>62</b>, interfaces <b>68</b>, and a bus <b>67</b> (e.g., a PCI bus). When acting under the control of appropriate software or firmware, the CPU <b>62</b> may be responsible for implementing specific functions associated with the functions of a desired network device. For example, when configured as a load balancing device, the CPU <b>62</b> may be responsible for analyzing packets, encapsulating packets, forwarding packets to appropriate network devices, performing content and/or format verification of data, etc. The CPU <b>62</b> preferably accomplishes all these functions under the control of software including an operating system (e.g., Windows NT), and any appropriate applications software.</p>
<p id="p-0051" num="0050">CPU <b>62</b> may include one or more processors <b>63</b> such as a processor from the Motorola family of microprocessors or the MIPS family of microprocessors. In an alternative embodiment, processor <b>63</b> is specially designed hardware for controlling the operations of network device <b>60</b>. In a specific embodiment, a memory <b>61</b> (such as non-volatile RAM and/or ROM) also forms part of CPU <b>62</b>. However, there are many different ways in which memory could be coupled to the system. Memory block <b>61</b> may be used for a variety of purposes such as, for example, caching and/or storing data, programming instructions, etc.</p>
<p id="p-0052" num="0051">The interfaces <b>68</b> are typically provided as interface cards (sometimes referred to as “line cards”). Generally, they control the sending and receiving of data packets over the network and sometimes support other peripherals used with the network device <b>60</b>. Among the interfaces that may be provided are Ethernet interfaces, frame relay interfaces, cable interfaces, DSL interfaces, token ring interfaces, and the like. In addition, various very high-speed interfaces may be provided such as fast Ethernet interfaces, Gigabit Ethernet interfaces, ATM interfaces, HSSI interfaces, POS interfaces, FDDI interfaces and the like. Generally, these interfaces may include ports appropriate for communication with the appropriate media. In some cases, they may also include an independent processor and, in some instances, volatile RAM. The independent processors may control such communications intensive tasks as packet switching, media control and management. By providing separate processors for the communications intensive tasks, these interfaces allow the master microprocessor <b>62</b> to efficiently perform routing computations, network diagnostics, security functions, etc.</p>
<p id="p-0053" num="0052">Although the system shown in <figref idref="DRAWINGS">FIG. 4</figref> illustrates one specific network device of the present invention, it is by no means the only network device architecture on which the present invention can be implemented. For example, an architecture having a single processor that handles communications as well as routing computations, etc. is often used. Further, other types of interfaces and media could also be used with the network device.</p>
<p id="p-0054" num="0053">Regardless of network device's configuration, it may employ one or more memories or memory modules (such as, for example, memory block <b>65</b>) configured to store data, program instructions for the general-purpose network operations and/or other information relating to the functionality of the network device health monitoring technique described herein. The program instructions may control the operation of an operating system and/or one or more applications, for example. The memory or memories may also be configured to include data structures which store regular expressions and other format verification rules, content data received from selected network devices, etc.</p>
<p id="p-0055" num="0054">Because such information and program instructions may be employed to implement the systems/methods described herein, the present invention relates to machine readable media that include program instructions, state information, etc. for performing various operations described herein. Examples of machine-readable media include, but are not limited to, storage media such as: magnetic media such as hard disks, floppy disks, and magnetic tape; optical media such as CD-ROM disks; magneto-optical media such as floptical disks; and hardware devices that are specially configured to store and perform program instructions, such as read-only memory devices (ROM) and random access memory (RAM). The invention may also be embodied in transmission media such as: a carrier wave travelling over an appropriate medium such as airwaves, optical lines, electric lines, etc. Examples of program instructions include both machine code, such as produced by a compiler, and files containing higher level code that may be executed by the computer using an interpreter.</p>
<p id="p-0056" num="0055">Although several preferred embodiments of this invention have been described in detail herein with reference to the accompanying drawings, it is to be understood that the invention is not limited to these precise embodiments, and that various changes and modifications may be effected therein by one skilled in the art without departing from the scope of spirit of the invention as defined in the appended claims.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>The invention claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A computer program product for determining a health status of a selected server of a server farm, the computer program product comprising:
<claim-text>a computer usable storage medium having computer readable code embodied therein, the computer readable code comprising:
<claim-text>computer code for implementing a first thread of said computer program product for determining the health status of a first server of the server farm, said first thread comprising:
<claim-text>computer code for identifying the first server of the server farm for analysis;</claim-text>
<claim-text>computer code for receiving data from the first server, said data including content information;</claim-text>
<claim-text>computer code for performing format verification on a first portion of said content information by verifying correct formatting of the first portion of content information using predetermined format verification rules;</claim-text>
<claim-text>computer code for identifying timestamp information in the first portion of content, wherein the timestamp information includes an hour's portion of a time value and a minute's portion of the time value;</claim-text>
<claim-text>computer code for determining whether the hour's portion of the time value is an integer within a range from 1 to 12, inclusive;</claim-text>
<claim-text>computer code for determining whether the minute's portion of the time value is an integer within a range from 0 to 59, inclusive;</claim-text>
<claim-text>computer code for determining whether the timestamp information includes a colon character interposed between the hours portion and minutes portion of the time value; and</claim-text>
<claim-text>computer code for determining the health status of the first server based upon results of said format verification.</claim-text>
</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The computer program product of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein said format verification code further includes:
<claim-text>computer code for verifying correct formatting of the timestamp information using a first regular expression corresponding to: ([1-9]|1[0-2]):[0-5][0-9]).</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The computer program product of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein said format verification code further includes:
<claim-text>computer code for verifying correct formatting of the timestamp information using a first regular expression corresponding to: (A|P)M.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The computer program product of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein said format verification code further includes:
<claim-text>computer code for identifying timestamp information in the first portion of content; and</claim-text>
<claim-text>computer code for determining whether the timestamp information includes a time data string followed by the characters “AM” or “PM”.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The computer program product of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the timestamp information includes a first portion of non-deterministic data which can not be predetermined, the computer program product further comprising:
<claim-text>computer code for performing format verification on the first portion of non-deterministic data by verifying correct formatting of the first portion of non-deterministic data using predetermined format verification rules.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. A computer program product for determining a health status of a selected server of a server farm, the computer program product comprising:
<claim-text>a computer usable storage medium having computer readable code embodied therein, the computer readable code comprising:
<claim-text>computer code for implementing a first thread of said computer program product for determining the health status of a first server of the server farm, said first thread comprising:
<claim-text>computer code for identifying the first server of the server farm for analysis;</claim-text>
<claim-text>computer code for receiving data from the first server, said data including content information;</claim-text>
<claim-text>computer code for performing format verification on a first portion of said content information by verifying correct formatting of the first portion of content information using predetermined format verification rules;</claim-text>
<claim-text>computer code for identifying a ticker symbol in the first portion of content;</claim-text>
<claim-text>computer code for determining whether a length of the ticker symbol is between 1-4 characters, inclusive; and</claim-text>
<claim-text>computer code for determining the health status of the first server based upon results of said format verification.</claim-text>
</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The computer program product of <claim-ref idref="CLM-00006">claim 6</claim-ref> wherein said format verification code further includes:
<claim-text>computer code for verifying correct formatting of the ticker symbol using a first regular expression corresponding to: ([A-Z]{1,4}|[A-Z]{4}X).</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The computer program product of <claim-ref idref="CLM-00006">claim 6</claim-ref> wherein said format verification code further includes:
<claim-text>computer code for identifying a ticker symbol in the first portion of content; and</claim-text>
<claim-text>computer code for determining whether a length of the ticker symbol is five characters with the last character being an “X.”</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The computer program product of <claim-ref idref="CLM-00006">claim 6</claim-ref> wherein the ticker symbol includes a first portion of non-deterministic data which can not be predetermined, the computer program product further comprising:
<claim-text>computer code for performing format verification on the first portion of non-deterministic data by verifying correct formatting of the first portion of non-deterministic data using predetermined format verification rules.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. A computer program product for determining a health status of a selected server of a server farm, the computer program product comprising:
<claim-text>a computer usable storage medium having computer readable code embodied therein, the computer readable code comprising:
<claim-text>computer code for implementing a first thread of said computer program product for determining the health status of a first server of the server farm, said first thread comprising:
<claim-text>computer code for identifying the first server of the server farm for analysis;</claim-text>
<claim-text>computer code for receiving data from the first server, said data including content information;</claim-text>
<claim-text>computer code for performing format verification on a first portion of said content information by verifying correct formatting of the first portion of content information using predetermined format verification rules;</claim-text>
<claim-text>computer code for identifying currency information in the first portion of content, wherein the currency information includes a monetary value;</claim-text>
<claim-text>computer code for determining whether the monetary value includes a dollar sign followed by a numerical value greater than or equal to zero, followed by a decimal point, followed by two numeric digits; and</claim-text>
<claim-text>computer code for determining the health status of the first server based upon results of said format verification.</claim-text>
</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The computer program product of <claim-ref idref="CLM-00010">claim 10</claim-ref> wherein said format verification code further includes:
<claim-text>computer code for verifying correct formatting of the monetary value using a first regular expression corresponding to: ($(0|[1-9][0-9]*).[0-9]{2}).</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The computer program product of <claim-ref idref="CLM-00010">claim 10</claim-ref> wherein the currency information includes a first portion of non-deterministic data which can not be predetermined, the computer program product further comprising:
<claim-text>computer code for performing format verification on the first portion of non-deterministic data by verifying correct formatting of the first portion of non-deterministic data using predetermined format verification rules.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. A computer program product for determining a health status of a selected server of a server farm, the computer program product comprising:
<claim-text>a computer usable storage medium having computer readable code embodied therein, the computer readable code comprising:
<claim-text>computer code for implementing a first thread of a process for determining the health status of a first server of the server farm, said first thread comprising:
<claim-text>computer code for identifying the first server of the server farm for analysis;</claim-text>
<claim-text>computer code for receiving data from the first server, said data including content information comprising a first portion of non-deterministic data which cannot be predetermined;</claim-text>
<claim-text>computer code for performing format verification on the first portion of non-deterministic data by verifying correct formatting of the first portion of non-deterministic data using predetermined format verification rules, the first portion of non-deterministic content including at least one type of information selected from a group consisting of: timestamp information including an hours portion of a time value and a minutes portion of the time value, currency information including a monetary value, and financial information including a ticker symbol; and</claim-text>
<claim-text>computer code for determining the health status of the first server based upon results of said format verification.</claim-text>
</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The computer program product of <claim-ref idref="CLM-00013">claim 13</claim-ref> further comprising:
<claim-text>computer code for identifying timestamp information in the first portion of non-deterministic data, wherein the timestamp information includes an hour's portion of a time value and a minute's portion of the time value;</claim-text>
<claim-text>computer code for determining whether the hour's portion of the time value is an integer within a range from 1 to 12, inclusive;</claim-text>
<claim-text>computer code for determining whether the minutes portion of the time value is an integer within a range from 0 to 59, inclusive; and,</claim-text>
<claim-text>computer code for determining whether the timestamp information includes a colon character interposed between the hour's portion and minute's portion of the time value.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The computer program product of <claim-ref idref="CLM-00013">claim 13</claim-ref> further comprising:
<claim-text>computer code for identifying timestamp information in the first portion of non-deterministic data; and</claim-text>
<claim-text>computer code for determining whether the timestamp information includes a time data string followed by the characters “AM” or “PM”.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The computer program product of <claim-ref idref="CLM-00013">claim 13</claim-ref> further comprising:
<claim-text>computer code for identifying a ticker symbol in the first portion of non-deterministic data; and</claim-text>
<claim-text>computer code for determining whether a length of the ticker symbol is between 1-4 characters, inclusive.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The computer program product of <claim-ref idref="CLM-00013">claim 13</claim-ref> further comprising:
<claim-text>computer code for identifying a ticker symbol in the first portion of non-deterministic data; and</claim-text>
<claim-text>computer code for determining whether a length of the ticker symbol is five characters with the last character being an “X.”</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The computer program product of <claim-ref idref="CLM-00013">claim 13</claim-ref> further comprising:
<claim-text>computer code for identifying currency information in the first portion of content, wherein the currency information includes a monetary value;</claim-text>
<claim-text>computer code for determining whether the monetary value includes a dollar sign followed by a numerical value greater than or equal to zero, followed by a decimal point, followed by two numeric digits; and</claim-text>
<claim-text>computer code for determining the health status of the first server based upon results of said format verification.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The computer program product of <claim-ref idref="CLM-00013">claim 13</claim-ref> further comprising:
<claim-text>computer code for implementing, concurrently with the implementation of the first thread, a second thread of said computer program product for determining the health status of a second server of the server farm, said second thread comprising:
<claim-text>computer code for identifying the second server of the server farm for analysis;</claim-text>
<claim-text>computer code for receiving data from the second server, said data including a second portion of content information;</claim-text>
<claim-text>computer code for performing format verification on said second portion of content information by verifying proper formatting of the second portion of content information using a second set of predetermined format verification rules; and</claim-text>
<claim-text>computer code for determining the health status of the second server based upon results of said second format verification.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The computer program product of <claim-ref idref="CLM-00013">claim 13</claim-ref> further comprising:
<claim-text>computer code for detecting, using results of said format verification, a problem relating to the health status of the first server; and</claim-text>
<claim-text>computer code for automatically implementing at least one action in response to the detecting of the problem relating to the health status of the first server.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. The computer program product of <claim-ref idref="CLM-00013">claim 13</claim-ref> wherein the selected first server is a selected server in a load balanced server farm system.</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. A system for determining a health status of a selected server of a server farm, the system comprising:
<claim-text>means for implementing a first thread of a process for determining the health status of a first server of the server farm, said first thread comprising:
<claim-text>means for identifying the first server of the server farm for analysis;</claim-text>
<claim-text>means for receiving data from the first server, said data including content information comprising a first portion of non-deterministic data which cannot be predetermined;</claim-text>
<claim-text>means for performing format verification on the first portion of non-deterministic data by verifying correct formatting of the first portion of non-deterministic data using predetermined format verification rules, the first portion of non-deterministic content including at least one type of information selected from a group consisting of: timestamp information including an hours portion of a time value and a minutes portion of the time value, currency information including a monetary value, and financial information including a ticker symbol; and</claim-text>
<claim-text>means for determining the health status of the first server based upon results of said format verification.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. The system of <claim-ref idref="CLM-00022">claim 22</claim-ref> further comprising:
<claim-text>means for identifying timestamp information in the first portion of non-deterministic data, wherein the timestamp information includes an hour's portion of a time value and a minute's portion of the time value;</claim-text>
<claim-text>means for determining whether the hour's portion of the time value is an integer within a range from 1 to 12, inclusive;</claim-text>
<claim-text>means for determining whether the minutes portion of the time value is an integer within a range from 0 to 59, inclusive; and</claim-text>
<claim-text>means for determining whether the timestamp information includes a colon character interposed between the hour's portion and minute's portion of the time value.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00024" num="00024">
<claim-text>24. The system of <claim-ref idref="CLM-00022">claim 22</claim-ref> further comprising:
<claim-text>means for identifying timestamp information in the first portion of non-deterministic data; and</claim-text>
<claim-text>means for determining whether the timestamp information includes a time data string followed by the characters “AM” or “PM”.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00025" num="00025">
<claim-text>25. The system of <claim-ref idref="CLM-00022">claim 22</claim-ref> further comprising:
<claim-text>means for identifying a ticker symbol in the first portion of non-deterministic data; and</claim-text>
<claim-text>means for determining whether a length of the ticker symbol is between 1-4 characters, inclusive.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00026" num="00026">
<claim-text>26. The system of <claim-ref idref="CLM-00022">claim 22</claim-ref> further comprising:
<claim-text>means for identifying currency information in the first portion of content, wherein the currency information includes a monetary value;</claim-text>
<claim-text>means for determining whether the monetary value includes a dollar sign followed by a numerical value greater than or equal to zero, followed by a decimal point, followed by two numeric digits; and</claim-text>
<claim-text>means for determining the health status of the first server based upon results of said format verification.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00027" num="00027">
<claim-text>27. A method for determining a health status of a selected server of a server farm, the method comprising:
<claim-text>implementing a first thread of a process for determining the health status of a first server of the server farm, said first thread comprising:
<claim-text>identifying the first server of the server farm for analysis;</claim-text>
<claim-text>receiving data from the first server, said data including content information comprising a first portion of non-deterministic data which cannot be predetermined;</claim-text>
<claim-text>performing format verification on the first portion of non-deterministic data by verifying correct formatting of the first portion of non-deterministic data using predetermined format verification rules, the first portion of non-deterministic content including at least one type of information selected from a group consisting of: timestamp information including an hours portion of a time value and a minutes portion of the time value, currency information including a monetary value, and financial information including a ticker symbol; and</claim-text>
<claim-text>determining the health status of the first server based upon results of said format verification.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00028" num="00028">
<claim-text>28. The method of <claim-ref idref="CLM-00027">claim 27</claim-ref> further comprising:
<claim-text>identifying timestamp information in the first portion of non-deterministic data, wherein the timestamp information includes an hour's portion of a time value and a minute's portion of the time value;</claim-text>
<claim-text>determining whether the hour's portion of the time value is an integer within a range from 1 to 12, inclusive;</claim-text>
<claim-text>determining whether the minutes portion of the time value is an integer within a range from 0 to 59, inclusive;</claim-text>
<claim-text>determining whether the timestamp information includes a colon character interposed between the hour's portion and minute's portion of the time value.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00029" num="00029">
<claim-text>29. The method of <claim-ref idref="CLM-00027">claim 27</claim-ref> further comprising:
<claim-text>identifying timestamp information in the first portion of non-deterministic data; and</claim-text>
<claim-text>determining whether the timestamp information includes a time data string followed by the characters “AM” or “PM”.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00030" num="00030">
<claim-text>30. The method of <claim-ref idref="CLM-00027">claim 27</claim-ref> further comprising:
<claim-text>identifying a ticker symbol in the first portion of non-deterministic data; and</claim-text>
<claim-text>determining whether a length of the ticker symbol is between 1-4 characters, inclusive.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00031" num="00031">
<claim-text>31. The method of <claim-ref idref="CLM-00027">claim 27</claim-ref> further comprising:
<claim-text>identifying a ticker symbol in the first portion of non-deterministic data; and</claim-text>
<claim-text>determining whether a length of the ticker symbol is five characters with the last character being an “X.”</claim-text>
</claim-text>
</claim>
<claim id="CLM-00032" num="00032">
<claim-text>32. The method of <claim-ref idref="CLM-00027">claim 27</claim-ref> further comprising:
<claim-text>identifying currency information in the first portion of content, wherein the currency information includes a monetary value; and</claim-text>
<claim-text>determining whether the monetary value includes a dollar sign followed by a numerical value greater than or equal to zero, followed by a decimal point, followed by two numeric digits.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00033" num="00033">
<claim-text>33. The method of <claim-ref idref="CLM-00027">claim 27</claim-ref> further comprising:
<claim-text>implementing, concurrently with the implementation of the first thread, a second thread of said method for determining the health status of a second server of the server farm, said second thread comprising:
<claim-text>identifying the second server of the server farm for analysis;</claim-text>
<claim-text>receiving data from the second server, said data including a second portion of content information;</claim-text>
<claim-text>performing format verification on said second portion of content information by verifying proper formatting of the second portion of content information using a second set of predetermined format verification rules; and</claim-text>
<claim-text>determining the health status of the second server based upon results of said second format verification.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00034" num="00034">
<claim-text>34. The method of <claim-ref idref="CLM-00027">claim 27</claim-ref> further comprising:
<claim-text>detecting, using results of said format verification, a problem relating to the health status of the first server; and</claim-text>
<claim-text>automatically implementing at least one action in response to the detecting of the problem relating to the health status of the first server.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00035" num="00035">
<claim-text>35. The method of <claim-ref idref="CLM-00027">claim 27</claim-ref> wherein the selected first server is a selected server in a load balanced server farm system.</claim-text>
</claim>
</claims>
</us-patent-grant>
