<us-patent-grant lang="EN" dtd-version="v4.2 2006-08-23" file="US07298299-20071120.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20071106" date-publ="20071120">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>07298299</doc-number>
<kind>B1</kind>
<date>20071120</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>10970886</doc-number>
<date>20041021</date>
</document-id>
</application-reference>
<us-application-series-code>10</us-application-series-code>
<us-term-of-grant>
<us-term-extension>262</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>H</section>
<class>03</class>
<subclass>M</subclass>
<main-group>9</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>341100</main-classification>
<further-classification>341 51</further-classification>
</classification-national>
<invention-title id="d0e53">Efficient data recovery algorithm for serial data</invention-title>
<references-cited>
<citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>6438155</doc-number>
<kind>B1</kind>
<name>Beale</name>
<date>20020800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>375130</main-classification></classification-national>
</citation>
<citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>7085970</doc-number>
<kind>B2</kind>
<name>Nicholls et al.</name>
<date>20060800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714709</main-classification></classification-national>
</citation>
<citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>2003/0076905</doc-number>
<kind>A1</kind>
<name>Schetelig et al.</name>
<date>20030400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>375343</main-classification></classification-national>
</citation>
<citation>
<nplcit num="00004">
<othercit>Sawyer, Nick; “XILINX: Data Recovery”; 2004, www.xilinx.com; pp. 1-7, (Mar. 4, 2004).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
</references-cited>
<number-of-claims>23</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>341 51</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>341100</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>341101</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>714709</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>714814</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>4</number-of-drawing-sheets>
<number-of-figures>5</number-of-figures>
</figures>
<parties>
<applicants>
<applicant sequence="001" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Cheung</last-name>
<first-name>Colman</first-name>
<address>
<city>San Diego</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="002" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Schouten</last-name>
<first-name>Ray</first-name>
<address>
<city>San Diego</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="003" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Cauneau</last-name>
<first-name>Stephane</first-name>
<address>
<city>London</city>
<country>GB</country>
</address>
</addressbook>
<nationality>
<country>GB</country>
</nationality>
<residence>
<country>GB</country>
</residence>
</applicant>
<applicant sequence="004" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Tyson</last-name>
<first-name>James</first-name>
<address>
<city>Slough</city>
<country>GB</country>
</address>
</addressbook>
<nationality>
<country>GB</country>
</nationality>
<residence>
<country>GB</country>
</residence>
</applicant>
</applicants>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Townsend and Townsend and Crew LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</parties>
<assignees>
<assignee>
<addressbook>
<orgname>Altera Corporation</orgname>
<role>02</role>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Young</last-name>
<first-name>Brian</first-name>
<department>2819</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A receiving device oversamples incoming serial data using multiple phases of its system clock. The device detects an initial edge in the set of samples and selects a sample based on the location of the initial edge. A first bit is set to the value of the selected sample. A portion of the set of samples following the initial edge. If an edge is detected, then a sample is selected based upon the location of the detected edge and the next bit is set to the value of the selected sample. If an edge is not detected within this portion, then the position of the next edge is estimated. A sample is selected based upon the location of the estimated edge and the next bit is set to the value of the selected sample. The analysis is repeated for another portion of the set of samples following the newest edge.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="244.77mm" wi="176.95mm" file="US07298299-20071120-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="271.19mm" wi="178.48mm" file="US07298299-20071120-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="247.40mm" wi="171.03mm" file="US07298299-20071120-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="258.83mm" wi="168.99mm" file="US07298299-20071120-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="247.82mm" wi="165.86mm" file="US07298299-20071120-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0002" num="0001">Serial data communications are used to communicate data between many types of devices. Receiving and correctly decoding a stream of serial data requires the transmitting and receiving devices to be synchronized. Often, communicating a separate clock signal in addition to a stream of serial data to the receiving device is inefficient or impractical. Instead, the receiving device can perform clock data recovery techniques using a phase locked loop (PLL). The PLL analyzes the serial data stream to synchronize the receiving device.</p>
<p id="p-0003" num="0002">However, PLLs often increase the cost and complexity of the receiving device. This is especially true for high-speed serial data communications, which require specialized PLLs capable of analyzing a high-speed serial data stream. To overcome these difficulties, some serial data recovery techniques do not require clock data recovery. These serial data recovery techniques do not require a specialized PLL, thereby reducing the cost and complexity of the receiving device.</p>
<p id="p-0004" num="0003">Unfortunately, serial data recovery techniques that do not require clock data recovery typically have a low jitter tolerance. Jitter is small random variations in the timing of the serial data signal. For example, a typical prior serial data recovery technique has a jitter tolerance of +/−0.25 UI. Because the jitter introduced by the transmitting and receiving devices may be as much as 0.20 UI, the actual remaining jitter tolerance may be as little as 0.10 UI. This jitter tolerance is too small for many serial data communication standards, such as ASI.</p>
<p id="p-0005" num="0004">Additionally, many serial data recovery techniques require the receiving device to operate at a clock speed greater than or equal to the serial data rate. The high operating speed requirements for high-speed serial data communications applications are impractical or impossible to satisfy for many types of receiving devices.</p>
<p id="p-0006" num="0005">It is therefore desirable for a system and method to receive and decode serial data communications without performing clock data recovery. It is further desirable for the system and method to have a high jitter tolerance. It is also desirable for the system and method to be implemented in a receiving device having a clock speed less than the serial data rate. It is also desirable for the system and method to be optimized either for increased serial data rates or for increased jitter tolerance.</p>
<heading id="h-0002" level="1">BRIEF SUMMARY OF THE INVENTION</heading>
<p id="p-0007" num="0006">In an embodiment of the invention, a receiving device oversamples incoming serial data using multiple phases of its system clock. The receiving device then analyzes the set of samples to decode the serial data. The receiving device detects an initial edge in the set of samples. A sample is selected based on the location of the initial edge and a first bit value is set to the value of the selected sample. A portion of the set of samples following the initial edge and corresponding to the average number of samples per bit is analyzed to detect another edge. If an edge is detected, then a sample is selected based upon the location of the detected edge and the next bit value is set to the value of the selected sample. If an edge is not detected within this portion, then the position of the next edge is estimated. A sample is selected based upon the location of the estimated edge and the next bit value is set to the value of the selected sample. The analysis is repeated for another portion of the set of sampled data following the newly detected or estimated edge. In an embodiment, the system is implemented using a programmable device, such as an FPGA.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0008" num="0007">The invention will be described with reference to the drawings, in which:</p>
<p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. 1</figref> is a flowchart illustrating a method according to an embodiment of the invention;</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. 2</figref> illustrates a portion of a system according to an embodiment of the invention;</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIGS. 3A and 3B</figref> illustrate example applications of a method according to an embodiment of the invention; and</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 4</figref> illustrates an example programmable device suitable for implementing an embodiment of the invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION OF THE INVENTION</heading>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 1</figref> is a flowchart illustrating a method <b>100</b> according to an embodiment of the invention. At step <b>105</b>, the stream of serial data is oversampled by the receiving device so that, on average, several samples of serial data correspond to each bit of serial data. In one embodiment, step <b>105</b> uses three samples per bit, which provides high data rates and good jitter tolerance. In another embodiment, step <b>110</b> uses five samples per bit, which decreases the maximum bit rate but further improves jitter tolerance. As discussed in detail below, one implementation of step <b>105</b> samples the stream of serial data at multiple phases of the system clock, which allows the serial data rate to be greater than the clock rate of the receiving device.</p>
<p id="p-0014" num="0013">Step <b>110</b> detects an edge in a set of sequential samples of the serial data stream. An edge is a transition between different values for adjacent samples. For example, a transition from a zero-valued sample to an adjacent one-valued sample is an edge. Similarly, a transition from a one-valued sample to an adjacent zero-valued sample is also an edge. In this embodiment, edges in a set of sequential samples signify a boundary between adjacent bits in the serial data stream. However, not all adjacent bits in the serial data stream are delineated by edges. When two adjacent bits have the same value, there will not be an edge between their corresponding samples.</p>
<p id="p-0015" num="0014">After detecting an edge in step <b>110</b>, step <b>115</b> determines the value of the bit ending with the located edge. In an embodiment, step <b>115</b> selects the next to last sample before the detected edge and sets the bit to this sample's value. In another embodiment, step <b>115</b> uses heuristics or other techniques to determine the value of the bit from its corresponding samples.</p>
<p id="p-0016" num="0015">Following step <b>115</b>, step <b>120</b> analyzes a portion of the set of sequential samples following, the detected edge that potentially corresponds to the next bit in the serial data stream. In an embodiment, this portion of the set of sequential samples is equal to the bit period. In the example of three sample per bit, the bit period is three samples. In this example, step <b>120</b> would analyze the three samples following the previously detected edge. Similarly, an example using five samples, on average, per bit would have a corresponding bit period of five samples. In this example, step <b>120</b> would analyze the five samples following the previously detected edge.</p>
<p id="p-0017" num="0016">Step <b>125</b> evaluates the portion of the set of sequential samples analyzed in step <b>120</b>. If another edge is detected within the portion analyzed by step <b>120</b>, the method <b>100</b> proceeds to step <b>135</b>. Otherwise, if step <b>125</b> determines that the portion of the set of samples evaluated in step <b>120</b> equals or exceeds the number of samples in the bit period, the method <b>100</b> proceeds to step <b>130</b>.</p>
<p id="p-0018" num="0017">Step <b>135</b> determines the value of the next bit in the serial data stream. Similar to step <b>115</b>, an embodiment of step <b>135</b> selects the next to last sample before the newly detected edge and sets the bit to this sample's value. In another embodiment, step <b>135</b> uses heuristics or other techniques to determine the value of the bit from its corresponding samples.</p>
<p id="p-0019" num="0018">Alternatively, if an edge is not detected by step <b>120</b>, step <b>130</b> estimates the location of the next edge and determines the value of the next bit in the serial data stream based upon the estimated edge. In an embodiment, step <b>130</b> estimates the location of the next edge as one full bit period after the most recently detected edge. For example, if the bit period is three samples, then the estimated location of a new edge is three samples after the most recently detected edge. Similarly, for a bit period of five samples, the estimated location of a new edge is five samples after the most recently detected edge.</p>
<p id="p-0020" num="0019">Once the location of the new edge is estimated by step <b>130</b>, step <b>130</b> determines the value of the next bit in the serial data stream. In an embodiment, step <b>130</b> determined the value of the next bit in a manner similar to steps <b>115</b> and <b>135</b>, for example by selecting the next to last sample before the newly estimated edge and setting the next bit in the serial data stream to this sample's value.</p>
<p id="p-0021" num="0020">Following either step <b>130</b> or step <b>135</b>, the method <b>100</b> returns to step <b>120</b> to analyze a subsequent portion of the set of samples of serial data. Steps <b>120</b> to <b>135</b> are repeated as long as there is additional serial data to be decoded. For subsequent iterations of steps <b>120</b> to <b>135</b>, the edge detected in the previous iteration of step <b>120</b> or estimated in the previous iteration of step <b>130</b> is used as the most recently detected edge.</p>
<p id="p-0022" num="0021">As discussed above, an embodiment of the invention samples the serial data at multiple phases of the system clock, which increases the maximum serial bit rate capable of being processed by the receiving device without increasing the clock frequency of the receiving device. <figref idref="DRAWINGS">FIG. 2</figref> illustrates a portion of a system <b>200</b> according to an embodiment of the invention. In this embodiment, system <b>200</b> samples the serial data stream eight times per clock cycle. However, alternate embodiments of the invention can use greater or fewer samples per clock cycle to match the needs of different serial data communication specifications and applications.</p>
<p id="p-0023" num="0022">In this embodiment, first <b>205</b> and second <b>210</b> sets of clock phases are used to initiate the sampling of the serial data stream in each phase of the clock cycle. The first set of clock phases <b>205</b> includes the unshifted or 0 degrees clock signal, and clock signals phase shifted by 45 degrees, 90 degrees, and 135 degrees. In an embodiment, these out of phase clock signals are generated from the unshifted clock signal using a phase locked loop. The first set of clock phases <b>205</b> are connected with flip-flops <b>220</b>, <b>225</b>, <b>230</b>, and <b>235</b>, respectively. Each flip-flop is connected with serial data input <b>215</b> and samples the serial data stream at the time specified by its respective clock phases. Thus, flip-flops <b>220</b>, <b>225</b>, <b>230</b>, and <b>235</b> sample the serial data stream at clock phases 0, 45, 90, and 135 degrees, respectively.</p>
<p id="p-0024" num="0023">Similarly, the second set of clock phases <b>210</b> are connected with flip-flops <b>240</b>, <b>245</b>, <b>250</b>, and <b>255</b>, respectively. The second set of clock phases <b>210</b> include clock signals phase shifted by 180, 215, 270, and 315 degrees. In an embodiment, the second set of clock phases <b>210</b> is generated by inverted each of the first set of clock phases <b>205</b>. Each flip-flop is connected with serial data input <b>215</b> and samples the serial data stream at the time specified by its respective clock phases. Thus, flip-flops <b>240</b>, <b>245</b>, <b>250</b>, and <b>255</b> sample the serial data stream at clock phases 180, 215, 270, and 315 degrees, respectively.</p>
<p id="p-0025" num="0024">The outputs of flip-flops <b>220</b> to <b>255</b> comprise a set of eight samples of the serial data stream. In this embodiment, each clock cycle of the receiving device can capture a set of eight samples of the serial data stream, which can then be processed in accordance with method <b>100</b> discussed above to extract the serial data. Because of timing requirements, additional flip-flops or other buffers may be connected with the outputs of flip-flops <b>220</b> to <b>255</b> to resynchronize each set of eight samples with the unshifted clock signal. Depending upon the amount of oversampling, the set of eight samples can correspond to any number of bits of serial data. For example, with three samples per bit, each set of eight samples corresponds to 2.67 bits of serial data. Similarly, with five samples per bit, each set of eight samples corresponds to 1.6 bits of serial data.</p>
<p id="p-0026" num="0025">A further embodiment of the invention extracts one or more bits of serial data from each set of samples in parallel, using the same concept of method <b>100</b>. In this embodiment, each set of samples is analyzed to locate all of the edges in the set of samples and, if necessary, estimate the location of edges. The values of one or more bits of serial data are then determined from the location of all of the edges in the set of samples. The location of the most recent edge is then saved and used to process the next set of samples.</p>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIGS. 3A and 3B</figref> illustrate example applications of method <b>100</b> according to an embodiment of the invention. <figref idref="DRAWINGS">FIG. 3A</figref> illustrates a set of sample data <b>300</b> in which edges are detected in each bit period, such as in step <b>120</b> discussed above. In this example, an edge <b>315</b> is first detected between samples <b>305</b> and <b>310</b>. Using this detected edge <b>315</b>, step <b>120</b> would first analyze the bit period <b>320</b>. Edge <b>325</b> is detected in bit period <b>320</b>. Using this edge, sample <b>327</b> is selected as the value of the bit in step <b>135</b>. For the next iteration of step <b>120</b>, bit period <b>330</b> is analyzed and edge <b>335</b> is detected. From edge <b>335</b>, sample <b>337</b> is selected as the value of the next bit in the serial data stream. For third iteration of step <b>120</b>, bit period <b>340</b> is analyzed and edge <b>345</b> is detected. Using edge <b>345</b>, sample <b>347</b> is selected as the value of a third bit in the serial data stream.</p>
<p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. 3B</figref> illustrates a set of sample data <b>350</b> in which edges are estimated in each bit period, such as in step <b>135</b> discussed above. In this example, an edge <b>355</b> is first detected between samples <b>360</b> and <b>365</b>. Following the detection of edge <b>355</b>, bit period <b>370</b> is analyzed in step <b>120</b>. Edge <b>375</b> is detected in bit period <b>370</b> and sample <b>377</b> is selected as the value of the next bit in the serial data stream. The next iteration of step <b>120</b> analyzes bit period <b>380</b>. Because there is no edge in bit period <b>380</b>, step <b>130</b> estimates the location of edge <b>385</b> from the location of edge <b>375</b> and selects sample <b>387</b> as the value of the next bit in the serial data stream. Using the location of edge <b>385</b>, the next iteration of step <b>120</b> analyzes bit period <b>390</b> and detects edge <b>395</b>. From edge <b>395</b>, sample <b>397</b> is selected as the value of the next bit in the serial data stream.</p>
<p id="p-0029" num="0028">The above described system and method can be implemented using a variety of different types of devices, including general digital logic devices, standard cell and structured ASICs, and programmable devices such as general gate arrays, programmable logic devices, and FPGAs.</p>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. 4</figref> illustrates an example programmable <b>400</b> device suitable for implementing an embodiment of the invention. Programmable device <b>400</b> includes a number of logic array blocks (LABs), such as LABs <b>405</b>, <b>410</b>, <b>415</b>. Each LAB includes a number of programmable logic cells using logic gates and/or look-up tables to perform a logic operation. LAB <b>405</b> illustrates in detail logic cells <b>420</b>, <b>421</b>, <b>422</b>, <b>423</b>, <b>424</b>, <b>425</b>, <b>426</b>, and <b>427</b>. Logic cells are omitted from other LABs in <figref idref="DRAWINGS">FIG. 4</figref> for clarity. The LABs of device <b>400</b> are arranged into rows <b>430</b>, <b>435</b>, <b>440</b>, <b>445</b>, and <b>450</b>. In an embodiment, the arrangement of logic cells within a LAB and of LABs within rows provides a hierarchical system of configurable connections, in which connections between logic cells within a LAB, between cells in different LABs in the same row, and between cell in LABs in different rows require progressively more resources and operate less efficiently.</p>
<p id="p-0031" num="0030">In addition to logic cells arranged in LABs, programmable device <b>400</b> also include specialized functional blocks, such as multiply and accumulate block (MAC) <b>455</b> and random access memory block (RAM) <b>460</b>. For clarity, the portion of the programmable device <b>400</b> shown in <figref idref="DRAWINGS">FIG. 4</figref> only includes a small number of logic cells, LABs, and functional blocks. Typical programmable devices will include thousands or tens of thousands of these elements.</p>
<p id="p-0032" num="0031">Further embodiments can be envisioned to one of ordinary skill in the art from the application and attached drawings. For example, although the invention has been discussed with reference to programmable devices such as field programmable gate arrays, it is equally applicable to applications used to design any type of digital device, such as standard cell ASICs, structured or mask-programmable ASICs, PLDs, gate arrays, and general digital logic devices. In other embodiments, combinations or sub-combinations of the above disclosed invention can be advantageously made. The block diagrams of the architecture and flow charts are grouped for ease of understanding. However it should be understood that combinations of blocks, additions of new blocks, re-arrangement of blocks, and the like are contemplated in alternative embodiments of the present invention.</p>
<p id="p-0033" num="0032">The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense. It will, however, be evident that various modifications and changes may be made thereunto without departing from the broader spirit and scope of the invention as set forth in the claims.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method of decoding data, comprising:
<claim-text>receiving a stream of serial data;</claim-text>
<claim-text>oversampling the stream of serial data to create a set of samples;</claim-text>
<claim-text>analyzing the set of samples to detect an edge in the set of samples;</claim-text>
<claim-text>determining a reference point in the set of samples in response to the detection of the edge in the set of samples;</claim-text>
<claim-text>determining the reference point from the location of a previous reference point in response to the absence of the edge in the set of samples; and</claim-text>
<claim-text>determining a first bit value from the location of the reference point.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>repeating the steps of analyzing, determining a reference point, and determining a first bit value for a subsequent bit value following the first bit value in the set of samples.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein determining the first bit value comprises:
<claim-text>selecting a sample in the set of samples based on the location of the reference point; and</claim-text>
<claim-text>setting the first bit value to the value of the selected sample.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the selected sample is located at a predetermined position relative to the location of the reference point.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein determining the subsequent bit value from the location of the subsequent edge comprises:
<claim-text>selecting a sample in the set of samples based on the location of a subsequent reference point; and</claim-text>
<claim-text>setting the subsequent bit value to the value of the selected sample.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the selected sample is located at a predetermined position relative to the location of the subsequent reference point.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein oversampling the stream of serial data to create a set of samples includes sampling the serial data stream at a sample rate optimized for a maximum bit rate.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the sample rate is three times the bit rate of the stream of serial data.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein oversampling the stream of serial data to create a set of samples includes sampling the serial data stream at a sample rate optimized for a maximum jitter tolerance.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the sample rate is five times the bit rate of the stream of serial data.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein oversampling the stream of serial data comprises:
<claim-text>generating a set of phase-shifted clock signals; and</claim-text>
<claim-text>sampling the stream of serial data using each of the set of phase-shifted clock signals.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. A system for decoding data, the system comprising:
<claim-text>a serial data input adapted to receive a stream of serial data;</claim-text>
<claim-text>a set of phase-shifted clock signals derived from a system clock signal;</claim-text>
<claim-text>a set of sample registers, each sample register connected with one of the set of phase-shifted clock signals and adapted to sample the stream of serial data in response to its connected phase-shifted clock signal, such that a set of samples are sampled for each period of the system clock signal; and</claim-text>
<claim-text>a logic circuit adapted to decode a set of serial data bits from each set of samples;</claim-text>
<claim-text>wherein the logic circuit is adapted to:</claim-text>
<claim-text>analyze a first portion of the set of samples to detect an edge in the first portion of the set of samples;</claim-text>
<claim-text>determine a bit value from the location of the edge in response to the detection of the edge in the first portion of the set of samples; and</claim-text>
<claim-text>estimate the location of the edge and determine the bit value from the location of the estimated edge in response to the absence of the edge in the first portion of the set of samples.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The system of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the logic circuit is further adapted to:
<claim-text>analyze a second portion of the set of samples to detect an edge in the second portion of the set of samples;</claim-text>
<claim-text>determine a subsequent bit value from the location of the edge in the second portion of the set of samples in response to the detection of the edge in the second portion of the set of samples; and</claim-text>
<claim-text>estimate the location of the edge in the second portion of the set of samples and determine the subsequent bit value from the location of the estimated edge in response to the absence of the edge in the second portion of the set of samples.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The system of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the logic circuit is adapted to determine the bit value from the location of the edge in response to the detection of the edge in the first portion of the set of samples by selecting a sample in the set of samples based on the location of the edge and setting the bit value to the value of the selected sample.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The system of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the logic circuit is adapted to determine the bit value from the location of the estimated edge in response to the absence of the edge in the first portion of the set of samples by selecting a sample in the set of samples based on the location of the edge and setting the bit value to the value of the selected sample.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The system of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the size of the first portion of the set of samples corresponds to the average number of samples per bit of the stream of serial data.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The system of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the system is implemented using a programmable device.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The system of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the programmable device is an FPGA.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. A method of determining bit values in a serial data stream, comprising:
<claim-text>oversampling the serial data stream to create a set of samples;</claim-text>
<claim-text>finding a first sample edge;</claim-text>
<claim-text>setting a first bit value by reference to a sample that corresponds to the first sample edge;</claim-text>
<claim-text>repeating, for each additional desired bit value, the steps of:
<claim-text>searching for another sample edge; and</claim-text>
<claim-text>setting another bit value by reference to a sample that corresponds to the another sample edge if the another sample edge is found; or</claim-text>
<claim-text>estimating a location of the another sample edge by reference to the first sample edge and setting the another bit value by reference to a sample that corresponds to the estimated location if the another sample edge is not found.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. A method of decoding data, comprising:
<claim-text>oversampling a serial data stream to create a set of samples;</claim-text>
<claim-text>searching for a sample edge; and</claim-text>
<claim-text>setting a data value by reference to a sample that corresponds to the sample edge if the sample edge is found; or</claim-text>
<claim-text>estimating a location of the sample edge by reference to a previously found sample edge and setting the data value by reference to a sample that corresponds to the estimated location if the sample edge is not found.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. A method of receiving a plurality of data bits, the method comprising:
<claim-text>generating a first plurality of samples corresponding to a first bit period;</claim-text>
<claim-text>generating a second plurality of samples corresponding to a second bit period;</claim-text>
<claim-text>locating a first edge between two samples in the first bit period;</claim-text>
<claim-text>determining whether a second edge exists between two samples in the second bit period; and</claim-text>
<claim-text>if a second edge does exist between two samples in the second bit period, then determining a value of a first sample, the first sample between the first edge and the second edge, and assigning the value to a first received bit; else</claim-text>
<claim-text>if a second edge does not exist between two samples in the second bit period, then determining a first location in the second bit period, determining a value of a first sample, the first sample between the first edge and the first location, and assigning the value to a first received bit.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. The method of <claim-ref idref="CLM-00021">claim 21</claim-ref> wherein determining the first location is done using the first edge.</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. The method of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein generating the first and second plurality of samples comprises:
<claim-text>generating a set of phase-shifted clock signals; and</claim-text>
<claim-text>sampling the plurality of data bits using each of the set of phase-shifted clock signals.</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>
