<us-patent-grant lang="EN" dtd-version="v4.2 2006-08-23" file="US07299403-20071120.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20071106" date-publ="20071120">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>07299403</doc-number>
<kind>B1</kind>
<date>20071120</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>09685716</doc-number>
<date>20001011</date>
</document-id>
</application-reference>
<us-application-series-code>09</us-application-series-code>
<us-term-of-grant>
<us-term-extension>858</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>15</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>715500</main-classification>
<further-classification>715738</further-classification>
<further-classification>715745</further-classification>
</classification-national>
<invention-title id="d0e53">Methods and apparatus for obtaining a state of a browser</invention-title>
<references-cited>
<citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5774670</doc-number>
<kind>A</kind>
<name>Montulli</name>
<date>19980600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709227</main-classification></classification-national>
</citation>
<citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5861883</doc-number>
<kind>A</kind>
<name>Cuomo et al.</name>
<date>19990100</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>345326</main-classification></classification-national>
</citation>
<citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>5862330</doc-number>
<kind>A</kind>
<name>Anupam et al.</name>
<date>19990100</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>39520034</main-classification></classification-national>
</citation>
<citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>5941957</doc-number>
<kind>A</kind>
<name>Ingrassia, Jr. et al.</name>
<date>19990800</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>709248</main-classification></classification-national>
</citation>
<citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>5951652</doc-number>
<kind>A</kind>
<name>Ingrassia et al.</name>
<date>19990900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709248</main-classification></classification-national>
</citation>
<citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>5954798</doc-number>
<kind>A</kind>
<name>Shelton et al.</name>
<date>19990900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709224</main-classification></classification-national>
</citation>
<citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>5987376</doc-number>
<kind>A</kind>
<name>Olson et al.</name>
<date>19991100</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>701201</main-classification></classification-national>
</citation>
<citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>6035332</doc-number>
<kind>A</kind>
<name>Ingrassia et al.</name>
<date>20000300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709224</main-classification></classification-national>
</citation>
<citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>6070185</doc-number>
<kind>A</kind>
<name>Anupam et al.</name>
<date>20000500</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>709204</main-classification></classification-national>
</citation>
<citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>6078948</doc-number>
<kind>A</kind>
<name>Podgorny et al.</name>
<date>20000600</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>709204</main-classification></classification-national>
</citation>
<citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>6105055</doc-number>
<kind>A</kind>
<name>Pizano et al.</name>
<date>20000800</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>709204</main-classification></classification-national>
</citation>
<citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>6112240</doc-number>
<kind>A</kind>
<name>Pogue et al.</name>
<date>20000800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709224</main-classification></classification-national>
</citation>
<citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>6144991</doc-number>
<kind>A</kind>
<name>England</name>
<date>20001100</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>709205</main-classification></classification-national>
</citation>
<citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>6161137</doc-number>
<kind>A</kind>
<name>Ogdon et al.</name>
<date>20001200</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>709224</main-classification></classification-national>
</citation>
<citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>6161149</doc-number>
<kind>A</kind>
<name>Achacoso et al.</name>
<date>20001200</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>710  4</main-classification></classification-national>
</citation>
<citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>6178439</doc-number>
<kind>B1</kind>
<name>Feit</name>
<date>20010100</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>709200</main-classification></classification-national>
</citation>
<citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>6185602</doc-number>
<kind>B1</kind>
<name>Bayrakeri</name>
<date>20010200</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>709204</main-classification></classification-national>
</citation>
<citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>6192394</doc-number>
<kind>B1</kind>
<name>Gutfreund et al.</name>
<date>20010200</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>709204</main-classification></classification-national>
</citation>
<citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>6230171</doc-number>
<kind>B1</kind>
<name>Pacifici et al.</name>
<date>20010500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>715512</main-classification></classification-national>
</citation>
<citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>6230185</doc-number>
<kind>B1</kind>
<name>Salas et al.</name>
<date>20010500</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>709205</main-classification></classification-national>
</citation>
<citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>6237025</doc-number>
<kind>B1</kind>
<name>Ludwig et al.</name>
<date>20010500</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>709204</main-classification></classification-national>
</citation>
<citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>6240444</doc-number>
<kind>B1</kind>
<name>Fin et al.</name>
<date>20010500</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>709205</main-classification></classification-national>
</citation>
<citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>6256389</doc-number>
<kind>B1</kind>
<name>Dalrymple et al.</name>
<date>20010700</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>379900</main-classification></classification-national>
</citation>
<citation>
<patcit num="00024">
<document-id>
<country>US</country>
<doc-number>6259701</doc-number>
<kind>B1</kind>
<name>Shur et al.</name>
<date>20010700</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>370401</main-classification></classification-national>
</citation>
<citation>
<patcit num="00025">
<document-id>
<country>US</country>
<doc-number>6279001</doc-number>
<kind>B1</kind>
<name>DeBettencourt et al.</name>
<date>20010800</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>707 10</main-classification></classification-national>
</citation>
<citation>
<patcit num="00026">
<document-id>
<country>US</country>
<doc-number>6295550</doc-number>
<kind>B1</kind>
<name>Choung et al.</name>
<date>20010900</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>709204</main-classification></classification-national>
</citation>
<citation>
<patcit num="00027">
<document-id>
<country>US</country>
<doc-number>6295551</doc-number>
<kind>B1</kind>
<name>Roberts et al.</name>
<date>20010900</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>709205</main-classification></classification-national>
</citation>
<citation>
<patcit num="00028">
<document-id>
<country>US</country>
<doc-number>6297819</doc-number>
<kind>B1</kind>
<name>Furst</name>
<date>20011000</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>345329</main-classification></classification-national>
</citation>
<citation>
<patcit num="00029">
<document-id>
<country>US</country>
<doc-number>6298356</doc-number>
<kind>B1</kind>
<name>Jawahar et al.</name>
<date>20011000</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>707201</main-classification></classification-national>
</citation>
<citation>
<patcit num="00030">
<document-id>
<country>US</country>
<doc-number>6308188</doc-number>
<kind>B1</kind>
<name>Bernardo et al.</name>
<date>20011000</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>707530</main-classification></classification-national>
</citation>
<citation>
<patcit num="00031">
<document-id>
<country>US</country>
<doc-number>6310941</doc-number>
<kind>B1</kind>
<name>Crutcher et al.</name>
<date>20011000</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>379 8817</main-classification></classification-national>
</citation>
<citation>
<patcit num="00032">
<document-id>
<country>US</country>
<doc-number>6314463</doc-number>
<kind>B1</kind>
<name>Abbott et al.</name>
<date>20011100</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>709224</main-classification></classification-national>
</citation>
<citation>
<patcit num="00033">
<document-id>
<country>US</country>
<doc-number>6317777</doc-number>
<kind>B1</kind>
<name>Skarbo et al.</name>
<date>20011100</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>709204</main-classification></classification-national>
</citation>
<citation>
<patcit num="00034">
<document-id>
<country>US</country>
<doc-number>6317786</doc-number>
<kind>B1</kind>
<name>Yamane et al.</name>
<date>20011100</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>709224</main-classification></classification-national>
</citation>
<citation>
<patcit num="00035">
<document-id>
<country>US</country>
<doc-number>6330566</doc-number>
<kind>B1</kind>
<name>Durham</name>
<date>20011200</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>707104</main-classification></classification-national>
</citation>
<citation>
<patcit num="00036">
<document-id>
<country>US</country>
<doc-number>6334141</doc-number>
<kind>B1</kind>
<name>Varma et al.</name>
<date>20011200</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>709205</main-classification></classification-national>
</citation>
<citation>
<patcit num="00037">
<document-id>
<country>US</country>
<doc-number>6338086</doc-number>
<kind>B1</kind>
<name>Curtis et al.</name>
<date>20020100</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>709218</main-classification></classification-national>
</citation>
<citation>
<patcit num="00038">
<document-id>
<country>US</country>
<doc-number>6353851</doc-number>
<kind>B1</kind>
<name>Anupam et al.</name>
<date>20020300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709204</main-classification></classification-national>
</citation>
<citation>
<patcit num="00039">
<document-id>
<country>US</country>
<doc-number>6360250</doc-number>
<kind>B1</kind>
<name>Anupam et al.</name>
<date>20020300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709204</main-classification></classification-national>
</citation>
<citation>
<patcit num="00040">
<document-id>
<country>US</country>
<doc-number>6393475</doc-number>
<kind>B1</kind>
<name>Leong et al.</name>
<date>20020500</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>709223</main-classification></classification-national>
</citation>
<citation>
<patcit num="00041">
<document-id>
<country>US</country>
<doc-number>6411989</doc-number>
<kind>B1</kind>
<name>Anupam et al.</name>
<date>20020600</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>709204</main-classification></classification-national>
</citation>
<citation>
<patcit num="00042">
<document-id>
<country>US</country>
<doc-number>6421678</doc-number>
<kind>B2</kind>
<name>Smiga et al.</name>
<date>20020700</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>707102</main-classification></classification-national>
</citation>
<citation>
<patcit num="00043">
<document-id>
<country>US</country>
<doc-number>6535909</doc-number>
<kind>B1</kind>
<name>Rust</name>
<date>20030300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709204</main-classification></classification-national>
</citation>
<citation>
<patcit num="00044">
<document-id>
<country>US</country>
<doc-number>6535912</doc-number>
<kind>B1</kind>
<name>Anupam et al.</name>
<date>20030300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709217</main-classification></classification-national>
</citation>
<citation>
<patcit num="00045">
<document-id>
<country>US</country>
<doc-number>6584493</doc-number>
<kind>B1</kind>
<name>Butler</name>
<date>20030600</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>709204</main-classification></classification-national>
</citation>
<citation>
<patcit num="00046">
<document-id>
<country>US</country>
<doc-number>6675216</doc-number>
<kind>B1</kind>
<name>Quatrano et al.</name>
<date>20040100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709229</main-classification></classification-national>
</citation>
<citation>
<patcit num="00047">
<document-id>
<country>US</country>
<doc-number>6687739</doc-number>
<kind>B2</kind>
<name>Anupam et al.</name>
<date>20040200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709204</main-classification></classification-national>
</citation>
<citation>
<patcit num="00048">
<document-id>
<country>US</country>
<doc-number>6687878</doc-number>
<kind>B1</kind>
<name>Eintracht et al.</name>
<date>20040200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>715512</main-classification></classification-national>
</citation>
<citation>
<nplcit num="00049">
<othercit>Edwards et al., “Timewarp Techniques for Autonomous Collaboration”, Proceedings of th SIGHI conference on Human Factors in Computing Systems, Mar. 1997, pp. 218-225.</othercit>
</nplcit>
<category>cited by examiner</category>
</citation>
<citation>
<nplcit num="00050">
<othercit>Flanagan, JavaScript: the Definitive Guide, 3rd Ed., published Jun. 1998, pp. 1-5.</othercit>
</nplcit>
<category>cited by examiner</category>
</citation>
</references-cited>
<number-of-claims>31</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>715500</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>7155001</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>7155011</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715513</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715738</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715745</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>7</number-of-drawing-sheets>
<number-of-figures>7</number-of-figures>
</figures>
<parties>
<applicants>
<applicant sequence="001" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Cleasby</last-name>
<first-name>Andrew R.</first-name>
<address>
<city>Marblehead</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="002" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Cummings</last-name>
<first-name>Charles D.</first-name>
<address>
<city>Lowell</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="003" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Russell</last-name>
<first-name>Dana</first-name>
<address>
<city>Cambridge</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
</applicants>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Chapin IP Law, LLC</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="02" rep-type="attorney">
<addressbook>
<last-name>Chapin, Esq.</last-name>
<first-name>Barry W.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</parties>
<assignees>
<assignee>
<addressbook>
<orgname>Cisco Technology, Inc.</orgname>
<role>02</role>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Bashore</last-name>
<first-name>William</first-name>
<department>2176</department>
</primary-examiner>
<assistant-examiner>
<last-name>Rutledge</last-name>
<first-name>Amelia</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Mechanisms and techniques provide the system that allows the server computer system to capture the complete state of the browser process performing on a client computer system in a remote manner. The capture of such state information by a server computer system is useful, for example, to allow participants to a shared collaborative communications session to join such a session prior to initiation of such a session, or at any point in time during the lifetime of the collaboration session. In operation, the system of the invention can be initiated by browser process performing to the client computer system which obtains the capture process, for instance, as an applet. The capture process can extract from the browser process state information associated with the browser containing document contained within the browser. The capture process can store such state information in a content object on the client computer system and can format and transmit the content object from the capture process on the client computer system to a server computer system in order to maintain a state of the browser in the server computer system. By capturing the state of the browser on the client computer system via the capture process on the client computer system, the complete image of the state information of the browser, including any user supplied information, can be obtained and returns to the server computer system, thus allowing the server computer system, for example, to have participants to a collaboration session join the collaboration session prior to its existence or at any point during the lifetime of the collaboration session without having to navigate through the entire collaboration session.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="224.20mm" wi="179.24mm" file="US07299403-20071120-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="230.72mm" wi="165.18mm" file="US07299403-20071120-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="242.49mm" wi="185.59mm" file="US07299403-20071120-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="239.01mm" wi="137.50mm" file="US07299403-20071120-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="138.85mm" wi="139.70mm" file="US07299403-20071120-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="248.92mm" wi="184.23mm" file="US07299403-20071120-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="244.01mm" wi="177.04mm" file="US07299403-20071120-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="199.22mm" wi="162.39mm" file="US07299403-20071120-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">FIELD OF THE INVENTION</heading>
<p id="p-0002" num="0001">The present invention generally relates to mechanisms and techniques for capturing state information of browser software, and more particularly, to systems and techniques which capture such state information on a client computer system, and package and forward such state information to a server computer system.</p>
<heading id="h-0002" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0003" num="0002">The rise in popularity of computer networks such as the Internet has led software application developers to create complex software applications which interact between computer systems over the network. One example of such a software application is a collaboration system which allows multiple Internet browsers (i.e., users controlling such browsers) referred to as participants to partake in a shared web session via a collaboration server. Generally, the collaboration server serves as a point of contact for the participant browsers and manages the shared collaboration session. When supporting one or more collaboration sessions that include multiple web browser participants, the collaboration server allows at least one participant browser to “drive” or control the shared collaboration session (e.g., one participant browser “surfs” or navigates pages served by the web server) while the other remaining participant browsers are directed to receive a copy of any content information such as web pages as they appear to the controlling participant browser. In this manner, the controlling browser can guide other participant browsers through a shared web session without requiring the other users of other participant browsers to interact with this web browser. This is only one example of collaboration of which there may be other forms.</p>
<p id="p-0004" num="0003">Generally, upon initiation of a collaboration session, each participant browser identifies itself to the collaboration server and collaboration server begins a process of maintaining URL information associated with the shared web session between the participant browsers and the collaboration server. The purpose for this URL information is so that when other participants join the shared collaboration session, the collaboration server may provide those other participant browsers with the URL information related to the shared collaboration session so those participants can view pages related to that shared session. In a conventional collaboration system, the collaboration server operating in this manner is responsible for maintaining the URL information related to pages that participant browsers visit.</p>
<heading id="h-0003" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0005" num="0004">Conventional collaboration techniques suffer from a variety of drawbacks. In particular, in a conventional collaboration server, state information is generally limited to URL information and is collected and maintained within the collaboration server itself. This limits the amount of information that is available during the startup of a collaboration session. For instance, there may be browser state information contained within the participant computer system containing the participant browser that initiates the collaboration session which is unavailable to conventional collaboration servers at the start of such collaboration sessions. Other examples of such state information which does not exist within a conventional collaboration server at the start of a collaboration session may include any cookies within the participant browser, any time sensitive data related to a web page on display within the participant browser, or any other participant supplied information that may be of use in the collaboration session.</p>
<p id="p-0006" num="0005">As an example, suppose a user of a browser on a client computer system is engaged in a web-based e-commerce session in which that user has an electronic shopping cart containing items that user has selected for purchase. Now suppose that user desires to enter into a collaborative web browsing session with an agent (i.e., a person) associated with the e-commerce web-site. Using conventional collaboration techniques, the agent may not be able to view the current contents of the shopping cart at the beginning of the collaboration session since the collaboration server does not have the necessary access to state information relating to the contents of the users shopping cart as this information may be maintained within the users browser.</p>
<p id="p-0007" num="0006">In contrast, the present invention overcomes many of the limitations of conventional collaboration systems as related to capturing state and browser session information for browsers involved in a communications session. Generally, the present invention provides techniques and mechanisms which can capture the state of a client computer system including browser state information of a browser executing on such a computer system from within the client computer system itself and can make such information available to a collaboration server at the beginning of a collaboration session.</p>
<p id="p-0008" num="0007">The system of the invention includes a capture process, which may be a Java applet for example, that performs on a client computer system to capture a snapshot of the state of a browser and any documents within the browser on the client computer system. The capture process can then forward this state information to server computer system for use, for example, in a collaboration system. Since the system of the invention is able to capture client browser and document state information within the client computer system before, for example, initiation of a shared collaboration session, and then is able to send this state information to a server computer system that operates, for example, as the collaboration server, the collaboration server can provide the state information to non-controlling participant browsers on other client computer systems during actual initiation of a shared collaboration session.</p>
<p id="p-0009" num="0008">More specifically, the present invention provides methods, techniques and mechanisms for obtaining a state of a browser containing a document on a client computer system.</p>
<p id="p-0010" num="0009">In one embodiment, the method comprises the steps of extracting, from the browser, via a capture process on the client computer system that operates in conjunction with the browser, state information associated with the browser and the document contained in the browser. The capture process may be a Java applet or Active-X control, for example, or may be a separate program from the browser. The method then stores the state information in at least one content object on the client computer system and transmits the content object from the capture process on the client computer system to a server computer system to maintain a state of the browser in the server computer system. In this manner, state information of the browser process is captured on the client computer system itself, allowing for a more accurate and up-to-date representation of the complete state of the client computer system.</p>
<p id="p-0011" num="0010">In another embodiment, the step of extracting includes the steps of opening an application programming interface from the capture process to the browser process. The application programming interface provides functions to access the state information associated the browser and the document contained in the browser. The state information includes at least one of a document state and a session state associated with the browser. In such an embodiment, the method performs, via the capture process, the functions provided by the application programming interface to access and retrieve the state information on the client computer system from the browser process.</p>
<p id="p-0012" num="0011">In yet another embodiment, the functions provided by the application programming interface include document access functions to access the document contained in the browser and browser access functions to access the state information associated with the browser. In this embodiment, the step of performing, via the capture process, the functions provided by the application programming interface includes the steps of accessing the document contained within the browser for document tags existing in the document using at least one of the document access functions and copying, into a document content object, the content associated with each document tag accessed from the document.</p>
<p id="p-0013" num="0012">Document tags may be, for example, HTML tags, commands, constructs, script logic statements or any other identifiable and/or parsable or otherwise accessible content with a document. Furthermore, the method includes the steps of capturing, via at least one browser access function, at least one application session identifier associated with the document contained in the browser and copying the application session identifier associated with the document into the document content object. Using these techniques, the system of the invention is able to access the contents of all document(s) contained in a browser on the client computer system and is able to store such contents as state information within a content object. Such state information in the content object may include application session identifiers such as application, session or document cookies and/or URL information related to documents.</p>
<p id="p-0014" num="0013">In still another embodiment, the document contained in the browser is a hypertext document and the step of accessing includes the step of calling a hypertext access function provided by the application programming interface to obtain each document tag within the document. Also in this embodiment, the step of copying includes the steps of calling a hypertext retrieval function provided by the application programming interface to obtain hypertext content associated with each document tag in the document and placing the hypertext content associated with each document tag in the document into the document content object. To this end, the capture process uses an API to access documents within the browser to access the contents of the documents in order to obtain the complete copy of the content (state information) of the document as well as other browser state information.</p>
<p id="p-0015" num="0014">In another embodiment, the browser contains multiple documents, each associated with a document container, and the step of performing the functions provided by the application programming interface to access and retrieve the state information is performed on each document in each document container to access and retrieve the state information associated with each document in each document container. In this manner, the browser contains multiple documents, in frames for example, and the system of the invention is able to repetitively collect and gather the content of each document in each container (i.e. each frame).</p>
<p id="p-0016" num="0015">In an alternative embodiment, the state information includes a document state and a session state associated with a browser, for each document contained in the browser. In this case, the step of storing arranges the document state and the session state associated with a browser, for each document contained in the browser, in a format within the content object, such that the content object associates each document state with a session state associated with the document for each document contained in the browser. The format may be a tree-type data structure or any other type of format that can be used to represent data, such as a linked list, array, string and so forth. In other words, the system of the invention arranges the state information associated with a document and content object data structures such that document content and other information such as URL's and/or cookies related to the document are stored in an associated manner, such as hierarchically in a tree, within the content object.</p>
<p id="p-0017" num="0016">In another alternative embodiment, the step of transmitting transmits the content object from the capture process to a collaboration application in the server computer system for distribution to participant browsers. This allows the server computer system to receive the content object which contains the complete state information related to a browser process in any format that is compatible with many types of network communications systems. The server computer system can then re-create or un-format the content object, which may have been transferred as a string, for example.</p>
<p id="p-0018" num="0017">In another embodiment, the method of the invention includes the steps of detecting an intent to initiate a collaboration session and obtaining the capture process and operating or otherwise performing the capture process to perform the steps of extracting, storing and transmitting such that the capture process captures the state information associated the browser and the document contained in the browser upon initiation of the collaboration session and transmits the state information to the server computer system such that the server computer system can provide the state information to other participants of the collaboration session. In this embodiment then, the browser process detects a requirement to capture state information and obtains the capture process configured according to the invention in order to properly perform the capture process of extracting, storing and transmitting the state information from the client computer system to the server computer system.</p>
<p id="p-0019" num="0018">In yet another embodiment, the step of obtaining the capture process includes the steps of obtaining a version of the browser containing the document and determining if the version is a first value (e.g., Internet Explorer), and if so, obtaining a first version of the capture process from a first location, and if not, determining if the version is a second value (e.g., Netscape Navigator), and if so, obtaining a second version of the capture process from a second location. Using this method, the system of the invention can use a separate capture process that is specifically designed to properly capture the state of browser process that is produced by various manufacturers, such as Internet Explorer manufactured by Microsoft Corporation or Netscape Navigator manufactured by Netscape Communications Corporation.</p>
<p id="p-0020" num="0019">In still another embodiment, the capture process is an applet stored on a server and the step of obtaining the capture process includes the step of downloading the applet from the server to the client computer system to capture state information associated the browser and the document contained in the browser.</p>
<p id="p-0021" num="0020">In an alternative embodiment, in response to detecting an intent to initiate a collaboration session, the method performs the step of setting a document property of each document contained in the browser to a common value. This embodiment allows the browser process to enable an application programming interface to be able to properly read the contents of each document contained in the browser by setting one or more document properties of the documents to the common value.</p>
<p id="p-0022" num="0021">In yet another alternative embodiment, the step of setting a document property of each document contained in browser to a common value includes the step of performing script logic to alter a document domain property of each document contained in the browser to a common domain.</p>
<p id="p-0023" num="0022">In other method embodiments of the invention, methods are provided for performing collaboration between participant browsers. One such method embodiment comprises the steps of obtaining state information from a browser process performing on a first client computer system, from within the first client computer system and transmitting the state information from the client computer system to a server computer system. The server computer system then performs the operation of distributing the state information from the server computer system to at least one participant browser on a second client computer system to allow the participant browser on the second client computer system to re-create the state of the browser process performing on the first client computer system. This embodiment enables the participant browser on the second client computer system to enter a collaboration session with the browser process of the first client computer system at a point in the collaboration session defined by the state information.</p>
<p id="p-0024" num="0023">In an alternative to the above embodiment, the steps of a obtaining, transmitting and distributing are performed prior to the initiation of the collaboration session between the browser process performing on the first client computer system and a collaboration server. Accordingly, the system of the invention allows state information, as it exists in the browser process on the first client computer system prior to user initiation of the collaboration session, to be obtained and provided to a server process which can distribute the state information to participants who formerly requested to join the collaboration session. This avoids those participants from periodically having to check to see if the collaboration session is in existence before requesting to join the collaboration session.</p>
<p id="p-0025" num="0024">In an another alternative embodiment the steps of obtaining, transmitting and distributing are performed after the initiation of the collaboration session between the browser process performing on the first client computer system and a collaboration server. That is, such operations are performed to capture state information during the lifetime of an active collaboration session. In such an embodiment, the state information is interm state information that conveys a complete state of the browser process on the first client computer system as it exists during the existence of the collaboration session. This embodiment thus allows the invention to capture state information about a browser process involved in a collaboration session, such as the controlling browser process, and then allows the invention to provide this interm state information to a server computer system which can distribute the interm state information to new participant browsers which recently requested to join the already active collaboration session. These new participant browsers are thus immediately brought up-to-date with the current state of the collaboration session upon joining the collaboration session.</p>
<p id="p-0026" num="0025">The invention also includes computer systems configured to perform all of the method operations in embodiments disclosed herein. Specifically, according to one embodiment of the invention, a computer system is provided that includes a memory configured with a browser containing at least one document, an input-output mechanism, a processor and an interconnection mechanism coupling the memory, the processor and the input-output mechanism. In such a computer system configuration, the memory is further configured with a capture process, that when performed on the processor, causes the processor to obtain a state of the browser containing the at least one document by performing the operations of extracting, from the browser, state information in the memory associated the browser and the at least one document contained in the browser and storing the state information in at least one content object in the memory and then transmitting the content object to a server computer system, via the input-output mechanism, to maintain a state of the browser in the server computer system.</p>
<p id="p-0027" num="0026">Generally, other embodiments of the invention include a computer system configured with web browser software and a capture process as disclosed herein to perform all of the methods disclosed herein via software control, or via hardware and/or software configured to perform those methods and the techniques disclosed herein as the invention.</p>
<p id="p-0028" num="0027">Other embodiments of the invention that are disclosed herein include software programs to perform the operations summarized above and disclosed in detail below. More particularly, a computer program product is disclosed which has a computer-readable medium including computer program logic encoded thereon to provide the methods for capturing the state of a browser according to this invention and its associated operations. The computer program logic, when executed on at least one processor within a computing system, causes the processor to perform the operations (e.g., the method embodiments above, and described in detail later) indicated herein. This arrangement of the invention may be provided as software on a computer readable medium such as an optical medium (e.g., CD-ROM), floppy or hard disk or other such medium such as firmware in one or more ROM or RAM or PROM chips or as an Application Specific Integrated Circuit (ASIC). The software, firmware or other such configurations can be installed onto a computer system to cause the computer system to perform the techniques explained herein as the invention.</p>
<p id="p-0029" num="0028">It is to be understood that the system of the invention can be embodied strictly as a software program, as software and hardware, or as hardware alone. Is also to be understood that the browser state capturing techniques and mechanisms of this invention typically perform (e.g., execute, run, or are otherwise operated) on client computer system coupled to a computer network.</p>
<p id="p-0030" num="0029">By capturing complete state information on a client computer system, and wherein the state information may include user supplied information, the state information includes the most up-to-date possible information concerning the current state of communications as it exists within the browser process. In the context of collaboration systems, the state information may be provided by the invention back to the server computer system to allow the server computer system to distribute such state information to participant browsers, thus allowing the participant browsers to join the collaboration session at anytime, either during an existing collaboration session, or when such a collaboration session begins.</p>
<p id="p-0031" num="0030">The invention may be embodied in systems, software and/or hardware products designed, developed and/or manufactured by Cisco Systems, Inc. of San Jose, Calif.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0032" num="0031">The foregoing and other objects, features and advantages of the invention will be apparent from the following more particular description of preferred embodiments of the invention, as illustrated in the accompanying drawings in which like reference characters refer to the same parts throughout the different views. The drawings are not necessarily to scale, with emphasis instead being placed upon illustrating the embodiments, principles and concepts of the invention.</p>
<p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. 1</figref> illustrates a network and computing system environment that is suitable for use in describing example operations of embodiments of the invention.</p>
<p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. 2</figref> illustrates a client computer system configured to perform a capture process which interacts with the browser process in accordance with embodiments of the invention.</p>
<p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. 3</figref> is a flow chart illustrating an example of the processing steps performed by a browser within a client computer system configured in accordance with one embodiment of the invention.</p>
<p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. 4</figref> is a high level flow chart of the general processing operations performed by a capture process according to one embodiment of the invention.</p>
<p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. 5</figref> is a flow chart of the processing steps showing in more detail the operation of a capture process according to one embodiment of the invention.</p>
<p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. 6</figref> illustrates an example of a content object containing document and session state information for a browser on a client computer system which gets transmitted to server computer system according to embodiments of the invention.</p>
<p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. 7</figref> illustrates an example architecture of a client computer system configured in accordance with the invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DETAILED DESCRIPTION OF PREFERRED EMBODIMENTS</heading>
<p id="p-0040" num="0039">The present invention provides techniques and mechanisms that capture state information related to a browser software process that contains one or more documents on a client computer system. The invention captures such state information from within the client computer system and then transmits the state information to a server computer system. Such state information can be used, for example, by collaboration servers which provide the state information to participant browsers which desire to join the collaboration session, either prior to the actual initiation of the collaboration session, or at anytime during the lifetime of an existing collaboration session. This allows, for example, a participant browser to join a pre-existing collaboration session using up-to-date state information captured from the controlling browser on a client computer system, while at the same time not requiring the participant browser to navigate through successive web pages, beginning with the initial web page of the collaboration session, in order to catch up to the most recent web page of the collaboration session.</p>
<p id="p-0041" num="0040">In part, the system of the invention provides a capture process which a server can upload to a client computer system. When the client computer system performs the capture process, the capture process is able to extract, from a browser of the client computer system that contains one or more documents, state information such as document content (e.g., HTML code), user supplied state information (e.g., user supplied form field data), URLs and/or cookies associated with that browser and associated with any documents contained within the browser. The capture process can store the state information in a content object and can format and transmit the content object from the capture process on the client computer system to a process such as a “servlet” on a server computer system. This allows the server computer system to maintain a state of the browser within the server computer system.</p>
<p id="p-0042" num="0041">With respect to collaboration systems, as noted above, the system of the invention allows a server configured as a collaboration server to obtain the state information related to a controlling participant browser of the collaboration session, for example, when the collaboration session is actually initiated. This state information may then be distributed to other participant browser processes to allow those participants, for example, to join a collaboration session before the session is fully initiated. As another example, by capturing state information of the browser process including any user supplied information upon the client computer systems, a server computer system can supply such state information to a new participant of a shared collaboration session that has been underway for some time, without requiring the new participant to navigate through the entire shared collaboration session web pages up to the point of the current state (i.e. the most recent web page) of the collaboration session. In other words, participants can join a collaboration session at anytime beginning on the current page of the collaboration session, without having to navigate through prior pages in order to build up the proper state of the collaboration session. This is not possible in conventional collaboration systems since a conventional collaboration server is responsible for collecting URL information concerning the controlling browser process (as opposed to a capture process in this invention) and is therefore limited in its ability to maintain accurate state information during the ongoing lifecycle of a collaboration session as that state information changes within the controlling browser process.</p>
<p id="p-0043" num="0042"><figref idref="DRAWINGS">FIG. 1</figref> illustrates an example of the computer network environment <b>100</b> suitable for use by the system of the invention. The environment <b>100</b> includes a server computer system <b>130</b> and client computer systems <b>120</b> through <b>122</b> coupled via data links <b>140</b> to a computer network <b>110</b>, which may be the Internet, for example. Each client computer system <b>120</b> through <b>122</b> includes (e.g., executes) a respective browser process <b>125</b> through <b>127</b>. The server computer system <b>130</b> includes a capture process <b>150</b> which, during the operation of the invention as will be explained, is transferred (e.g., uploaded) to the client computer system <b>120</b>. Preferred embodiments of the client computer systems <b>120</b> through <b>122</b> are personal computers or workstations that can perform data communications with the server computer system <b>130</b>, which is preferably operates as web server. The server computer system <b>130</b> may be configured with collaboration software to support shared collaborative communications sessions between the browser processes <b>125</b> through <b>127</b>.</p>
<p id="p-0044" num="0043">Examples of the browser processes <b>125</b> through <b>127</b> include the Netscape Navigator web browser software manufactured by Netscape Communications Corporation of Mountain View, Calif., and the Internet Explorer web browser software manufactured by Microsoft Corporation of Redmond, Wash. Preferably, for purposes of this invention, the most recent versions of browser processes <b>125</b> through <b>127</b> are used in order to support in fully exploit the functionality of the invention as explained herein.</p>
<p id="p-0045" num="0044">According to this invention, when the capture process <b>150</b> performs on a client computer system such as client computer system <b>120</b> as in this example, the capture process <b>150</b> retrieves and captures state information <b>160</b> from the client computer system <b>120</b> and forwards the state information <b>160</b> to the server computer system <b>130</b>. Such state information <b>160</b> may be useful, for example, to support a shared collaboration session between the browser processes <b>125</b> through <b>127</b>.</p>
<p id="p-0046" num="0045">By way of example, assume that the server computer system <b>130</b> is a collaboration server which allows users (people, not shown) to interact via respective browser processes <b>125</b> through <b>127</b> as participants to a shared collaboration session (also not specifically shown) which is served by the server computer system <b>130</b>. This example server computer system <b>130</b> uses the domain name “COLLABORATION.COM” and may be reached on the network <b>110</b> via browser processes <b>125</b> through <b>127</b> referencing a hypertext link the URL “http://www.collaboration.com.” Also assume that the browser process <b>125</b> is the controller of the shared collaboration session and the browser processes <b>126</b> through <b>127</b> are non-controlling participants to the shared collaboration session.</p>
<p id="p-0047" num="0046">To begin the process of collaboration, a user of the browser process <b>125</b> on the client computer system <b>120</b> navigates (i.e., accesses web pages) to a collaboration initiation web page (not shown) that the server computer system <b>130</b> serves to the browser process <b>125</b>. At this point the browser process <b>125</b> and the server computer system <b>130</b> have not yet entered into the shared collaboration session. The collaboration initiation page may, for example, be a web page having form fields which prompt the user of the browser process <b>125</b> for user collaboration authentication information such as a name, password, address and so forth. To establish a collaboration session and begin collaboration, the server computer system <b>130</b> must obtain the user collaboration authentication information from the collaboration initiation page in order to authenticate the user of the browser process <b>125</b> as a valid controller of the collaboration session prior to its initiation.</p>
<p id="p-0048" num="0047">In this example, during the process of the user completing the collaboration initiation page (i.e., as the user enters his or her collaboration authentication information such as his or her name, password, etc.), the server computer system <b>130</b> also serves (e.g., uploads) the capture process <b>150</b> to the client computer system <b>120</b>. The capture process <b>150</b> may be a Java applet embedded in the collaboration initiation page, for example, or may be any other type of process which may be uploaded and executed, interpreted, run or otherwise performed on the client computer system <b>120</b>. Once the capture process <b>150</b> is loaded onto the client computer system <b>120</b> and begins to perform, the capture process <b>150</b> is able to capture the state of the browser process <b>125</b> by gathering, for example, any uniform resource locators (URLs), cookies (application and/or session cookies) and any documents (e.g., web pages, applets, scripts or other information) associated with (e.g., loaded into) the browser process <b>125</b>.</p>
<p id="p-0049" num="0048">The capture process <b>150</b> is also able to capture and store, as state information <b>160</b>, any user supplied information within the form fields of the collaboration initiation page. The capture process <b>150</b> stores such state information <b>160</b> and transmits it back to the server computer system <b>130</b>. The capture process <b>150</b> performs its processing just prior to the user's initiation of the collaboration session a point when the user attempts to submit the collaboration authentication information to the server computer system <b>140</b>.</p>
<p id="p-0050" num="0049">When the server computer system <b>130</b> obtains the state information <b>160</b>, it can then serve the state information <b>160</b> to the browser processes <b>126</b> and <b>127</b> on the other client computer systems <b>121</b> and <b>122</b>, which may have been waiting to join a shared collaboration session (i.e., browsers <b>126</b> and <b>127</b> may have previously requested to join a collaboration session, which still does not yet actually exist). That is, the state information <b>160</b> allows the browser processes <b>126</b> and <b>127</b> to establish themselves as participants to a future shared session that is in the process of being created with the server computer system <b>130</b>, prior to the server computer system <b>130</b> actually receiving a request from the browser process <b>125</b> to actually establish the shared session.</p>
<p id="p-0051" num="0050">Once the capture process <b>150</b> on the client computer system <b>120</b> completes transmission of the state information <b>160</b> to the server computer system <b>130</b>, the browser process <b>125</b> thereafter operates as in a conventional collaboration system and proceeds to submit the user supplied collaboration initiation information (i.e., the user completed form fields) to the server computer system <b>130</b> which then establishes a shared collaboration session between the browser process <b>125</b> (as the controller of the collaboration session) and the server computer system <b>130</b>. Prior to establishment of the actual collaboration session, since the server computer system <b>130</b> has already obtained the state information of the browser process <b>125</b> and has forwarded this state information <b>160</b> to the browser processes <b>126</b> and <b>127</b>, the server computer system <b>130</b> can immediately join the browser processes <b>126</b> and <b>127</b> into the collaboration session without requiring further action on their part (i.e., without requiring the users of browser processes <b>126</b> and <b>127</b> to periodically attempt to join the shared session).</p>
<p id="p-0052" num="0051">It is important to note here that the capture process <b>150</b> captures and transmits the state information <b>160</b> to the server computer system <b>130</b>, out-of-band from and in addition to, the browser process <b>125</b> supplying user supplied collaboration initiation information in a formal request to initiate collaboration sent to a collaboration process (not shown) on the server computer system <b>130</b>. As such, the collaboration server <b>130</b> receives the state information <b>160</b> conveying the state of the browser process <b>125</b> from the capture process <b>150</b>, prior to receiving a request from the browser process <b>125</b> to initiate collaboration. Since the server computer system <b>130</b> then provides the browser processes <b>126</b> and <b>127</b> with this state information <b>160</b> (containing a complete snapshot of the state of the browser process <b>125</b> immediately prior to initiation of the collaboration session), the browser processes <b>126</b> and <b>127</b> can be considered participants to the shared collaboration session prior to its actual establishment.</p>
<p id="p-0053" num="0052"><figref idref="DRAWINGS">FIG. 2</figref> illustrates a more detailed example of the client computer system <b>120</b> configured to capture state information associated with the browser process <b>125</b>. In this particular configuration, the browser process <b>125</b> includes the following components: i) a display component <b>220</b> including a plurality of containers <b>221</b> through <b>223</b> (e.g., browser frames), each of which includes (and displays to the user of the browser process <b>125</b>) a respective document <b>210</b> through <b>212</b> (DOC<b>1</b> through DOC<b>3</b>), ii) a browser and document session state <b>230</b> containing session state information, and iii) a browser application programming interface (API) <b>240</b> which can interact <b>250</b> with the display and session state components <b>220</b>, <b>230</b>. The client computer system <b>120</b> maintains all of the components <b>220</b>, <b>230</b>, and <b>240</b> in the browser process <b>125</b> as one or more software processes in a memory system (not specifically shown) within the client computer system <b>120</b>.</p>
<p id="p-0054" num="0053">The example client computer system <b>120</b> also contains the capture process <b>150</b> which includes an extract engine <b>200</b>, a content object <b>201</b>, and a transmit engine <b>202</b>. As with the browser process <b>125</b>, the capture process is preferably a software process that resides in a memory system in the client computer system <b>120</b>. The client computer system <b>120</b> can execute, run, or otherwise perform both the browser process <b>125</b> and the capture process <b>150</b> in memory using one or more processors (also not specifically shown) within the client computer system <b>120</b>. The capture process <b>150</b> can interact with the browser process <b>125</b> via an inter-process communications (IPC) channel <b>260</b>. During operation, the capture process <b>150</b> obtains, gathers or otherwise captures state information <b>160</b> related to the browser process <b>125</b> as explained herein and stores this state information <b>160</b> within the content object <b>201</b>. Thereafter, the capture process <b>150</b> formats and transmits this content object <b>201</b> containing the state information <b>160</b> of the browser process <b>125</b> to the server computer system <b>130</b>, which can use this information, as explained above, to allow other browsers (e.g., <b>126</b>, <b>127</b> in <figref idref="DRAWINGS">FIG. 1</figref>) to join as participants to a collaboration session that is about to begin.</p>
<p id="p-0055" num="0054">Within the browser process <b>125</b>, the display component <b>220</b> includes a plurality of containers <b>221</b> through <b>223</b>, each of which includes a respective document <b>210</b> through <b>212</b> (DOC<b>1</b> through DOC<b>3</b>). The containers <b>221</b> through <b>223</b> may be HTML frames, for example, which respectively display the documents <b>210</b> through <b>212</b>. A typical display component <b>220</b> within a browser such as Internet Explorer or Netscape Navigator maintains containers such as <b>221</b> through <b>223</b> as a series of hierarchically related data structures. In this example, container <b>220</b> (CONTAINER <b>1</b>) contains document <b>210</b> (DOC <b>1</b>) and is a parent container to child containers <b>221</b> and <b>222</b> (CONTAINER <b>2</b> and CONTAINER <b>3</b>) which contain respective documents <b>211</b> and <b>212</b> (DOC <b>2</b> and DOC <b>3</b>). In this example, the document <b>212</b> includes a collaboration initiation button <b>213</b> labeled “CALL,” the purpose of which will be explained in more detail later. Each document <b>210</b> through <b>212</b> may be a hypertext document written in a hypertext markup language (e.g., HTML, XML or the like) that includes one or more document tags such as HTML/XML statements, instructions, constructs, script logic (e.g., JavaScript) statements, commands and so forth.</p>
<p id="p-0056" num="0055">The session state information <b>230</b> within the browser process <b>125</b> contains any document or application session identifiers (not specifically shown) such as document or application session cookies. The session state information <b>230</b> may also contain any session cookies related to the communications session that exists between the browser process <b>125</b> and the server computer system <b>130</b>. Each document <b>210</b> through <b>212</b> (and possibly the containers <b>220</b> through <b>222</b>) contained within the browser process <b>125</b> has an associated URL which uniquely identifies that document or container. The browser process <b>125</b> also maintains such URLs as part of the session state information <b>230</b>. Generally then, the display component <b>220</b> of the browser process <b>125</b> maintains and displays to the user a plurality of web pages in frames represented in <figref idref="DRAWINGS">FIG. 2</figref> by the documents <b>210</b> through <b>212</b> in the containers <b>220</b> through <b>222</b>, and each web page and/or frame has an associated URL and may have one or more associated cookies which the browser process <b>125</b> stores in the session state <b>230</b>.</p>
<p id="p-0057" num="0056">The API <b>240</b> generally provides a software interface to callable functions within the browser process <b>125</b> which allows external access to the browser process <b>125</b> from other processes, such as the capture process <b>150</b>. Of particular interest to this invention, the API <b>240</b> provides functions to allow external access to: i) state information associated with the browser such as cookies and/or URLs within the session state information <b>230</b> and ii) other state information such as the entire contents of the documents <b>210</b> through <b>212</b> contained within the containers <b>220</b> through <b>222</b> in the browser process <b>125</b>. Generally, the term “state information” may include the contents (e.g., HTML code, script content, hypertext tags, etc.) of one or more documents contained within the browser process <b>125</b>, as well as any currently displayed user supplied form field information, application or session cookies, URL information, scripts and any other browser or document content information that relates to or can convey the complete state of the browser and/or its associated documents at any point in time.</p>
<p id="p-0058" num="0057">In one example embodiment, the API <b>240</b> is the “IHTMLDOCUMENT2” API interface provided by Internet Explorer version 5.0, which as will be explained, is used by the capture process <b>150</b> configured according to this invention to gather the session state information <b>230</b> from the browser process <b>125</b>, the contents/state of its containers (e.g., <b>220</b> through <b>222</b>) and that contents/state of any associated documents (e.g., <b>210</b> through <b>212</b>) contained therein.</p>
<p id="p-0059" num="0058">According to an example operation of the configuration shown in <figref idref="DRAWINGS">FIG. 2</figref>, a user (not shown) interacts with the browser process <b>125</b> to load and display the various documents <b>210</b> through <b>212</b> (e.g., successively obtains web pages represented by documents <b>210</b> through <b>212</b>). The purpose of this indication to select a user can obtain the web page (document <b>212</b> in this example) that allows the user to initiate collaboration session between the browser process <b>125</b> and the server computer system <b>130</b>. During the process leading up to collaboration, the browser process <b>125</b> caches (i.e., in memory) and displays the various documents <b>210</b> through <b>212</b> received from the web server computer system <b>130</b>. Besides the documents <b>210</b> through <b>212</b>, the browser process <b>125</b> may also receive one or more identifiers which include URLs of the documents <b>210</b> through <b>212</b> and which may include one or more application or session cookies.</p>
<p id="p-0060" num="0059">In this particular example, the document <b>212</b> “DOC<b>3</b>” is a collaboration initiation form which includes the collaboration initiation button <b>213</b> labeled “CALL.” To begin the collaboration process, the user of the browser process <b>125</b> may select or “click” the collaboration initiation button <b>213</b> via his or her mouse, for example, to initiate a collaboration session between the browser process <b>125</b> and the server computer system <b>130</b>.</p>
<p id="p-0061" num="0060"><figref idref="DRAWINGS">FIG. 3</figref> illustrates a flow chart of the processing steps <b>401</b> through <b>406</b> performed by the browser process <b>125</b> configured according to the invention. The processing of <figref idref="DRAWINGS">FIG. 3</figref> preferably takes place within the browser process <b>125</b> at a point when the user of the browser process <b>125</b> selects or clicks the collaboration initiation button <b>213</b> in order to enter into the collaboration session with the server computer system <b>130</b>. It is important to understand that, that in this example explanation, the processing steps <b>401</b> to <b>406</b> take place within the browser process <b>125</b> prior to the browser process <b>125</b> transmitting, to the server computer system <b>130</b>, any user supplied collaboration authentication in a formal request to initiate collaboration. In other words, processing steps <b>401</b> through <b>406</b> preferably take place prior to the initiation of the collaboration session and more specifically, during and/or after the user has supplied any required user collaboration authentication information, as will be explained. Preferably, the processing steps <b>401</b> through <b>406</b> are embodied as script logic such as JavaScript within one or more web pages, such as within document <b>212</b>.</p>
<p id="p-0062" num="0061">In step <b>401</b>, the browser process <b>125</b> detects a user's intent to initiate a collaboration session. In this example, this event is detected when the user selects the collaboration initiation button <b>213</b>. This is not meant to be limiting, however, and another event such as the user simply visiting a collaboration web page via the browser process <b>125</b> may serve to trigger step <b>401</b>.</p>
<p id="p-0063" num="0062">In step <b>402</b>, once the browser process <b>125</b> detects the user's intent to enter a collaboration session (preferably as the controlling participant of the collaboration session), the browser process <b>125</b> loads a callback form (i.e., another web page containing form fields, not specifically shown) that, among other content, contains script logic (e.g., JavaScript) configured according to the invention to carry out the processing steps <b>402</b> to <b>406</b>.</p>
<p id="p-0064" num="0063">Generally, the callback form (document <b>212</b> may also be considered a callback form for purposes herein) includes one or more form fields that prompt the user to enter collaboration authentication information such as a username and/or a password that the server computer system <b>130</b> (a collaboration server in this example) can use to authenticate that the user of the browser process <b>125</b> is allowed to create a collaboration session. Once the user enters the required collaboration authentication information on the callback form, the user can submit the user supplied collaboration authentication information, for example, buy clicking a submit button on the callback form. As an example, document <b>212</b> for a callback form, the user of browser process <b>125</b> would enter his or her collaboration authentication information and would select the call button <b>213</b> in order to submit this information to the server computer system <b>130</b>.</p>
<p id="p-0065" num="0064">According to this invention, before the browser process <b>125</b> actually submits the collaboration identification information entered by the user into the form fields of the callback form to the server computer system <b>130</b> (i.e., before a formal request to begin collaboration is sent from the browser process <b>125</b> to the server computer system <b>130</b>), the browser process <b>125</b> continues operation according to the invention by performing script logic embedded in the callback form to carry out steps <b>403</b> through <b>406</b>.</p>
<p id="p-0066" num="0065">Generally, steps <b>403</b> through <b>406</b> cause the browser process <b>125</b> to configure itself to allow state information to be obtained by the capture process <b>150</b>, which is then loaded and launched from the browser process <b>125</b> in step <b>406</b>, as explained below.</p>
<p id="p-0067" num="0066">More specifically, in step <b>403</b>, the browser process <b>125</b> performs script logic to set a document property of each document <b>210</b> through <b>212</b> contained in the browser process <b>125</b> to be a common value. In one embodiment, the browser process <b>125</b> (e.g., using JavaScript embedded within the callback form to set a document property of each document <b>210</b> through <b>212</b>, called “document.domain,” to contain the value of the domain of the collaboration server computer system <b>130</b>. In this particular example, step <b>403</b> sets the “document.domain” property of each document <b>210</b> through <b>212</b> to “COLLABORATION.COM.”</p>
<p id="p-0068" num="0067">Next, in step <b>404</b>, the script logic in the callback form causes the browser process <b>125</b> to determine what version of the browser process <b>125</b> is currently performing (i.e., executing). As an example, the browser process <b>125</b> may be Internet Explorer version 5.0, or the user may be using Netscape Navigator version 4.0 as the browser process <b>125</b>. Assume for this example that the browser process <b>125</b> is Internet Explorer version 5.0. In step <b>404</b> then, the script logic determines this fact. The script logic in the document <b>212</b> can determine the version of the browser process <b>125</b> in step <b>404</b> using known techniques, such as by calling a function within the API <b>240</b> to return the version of the browser process <b>124</b>.</p>
<p id="p-0069" num="0068">Once the version of the browser is known, in step <b>405</b>, the browser process <b>125</b> can further perform script logic within the callback form to obtain (e.g., download), from the server computer system <b>130</b>, both: i) a hidden form and ii) the proper version of the capture process <b>150</b> based upon the version of the browser process obtained in step <b>404</b> that is in use on the client computer system <b>120</b>. In one embodiment, the hidden form that the browser process <b>125</b> downloads in step <b>405</b> can contain the proper version of the capture process <b>150</b> embedded within the hidden form. As will be explained further, the hidden form may be an HTML form field document that is hidden from display to the user of the browser process <b>125</b>. In a preferred embodiment, the capture process <b>150</b> is a Java applet embedded within this hidden form.</p>
<p id="p-0070" num="0069">The particular version of the capture process <b>150</b> which the browser process <b>125</b> downloads from the server computer system <b>130</b> in step <b>405</b> depends upon the version of the browser process <b>125</b> that is in use on the client computer system <b>120</b> (as determined in step <b>404</b>). For example, if the browser process <b>125</b> in use of the client computer system <b>120</b> is Internet Explorer version 5.0, then the processing in step <b>405</b> obtains a version of the capture process <b>150</b> that is compatible with the application programming interface <b>240</b> provided by Internet Explorer version 5.0. However, if the browser process <b>125</b> that is in use on the client computer system <b>120</b> is Netscape Navigator, then the processing in step <b>405</b> obtains a different version of the capture process <b>150</b> from the server computer system <b>130</b> which is compatible within API <b>240</b> provided by Netscape Navigator. In either case, as will be explained shortly, the capture process <b>150</b> uses the hidden form that the browser process <b>125</b> also obtains in step <b>405</b> to return state information obtained from the browser process <b>125</b> on the client computer system <b>120</b> to the server computer system <b>130</b>.</p>
<p id="p-0071" num="0070">Once the proper version of the capture process <b>150</b> is loaded onto the client computer system <b>120</b> (step <b>405</b>), in step <b>406</b>, the browser process <b>125</b> performs script logic to begin the performance of, or launch, the capture process <b>150</b> (i.e., to begin execution or interpretation of the capture process applet).</p>
<p id="p-0072" num="0071"><figref idref="DRAWINGS">FIG. 4</figref> illustrates processing steps <b>410</b> through <b>412</b> which show the general operations of the capture process <b>150</b> as it executes or otherwise performs on the client computer system <b>120</b> in accordance with embodiments of the invention.</p>
<p id="p-0073" num="0072">Generally, in step <b>410</b>, the capture process <b>150</b> interacts with the browser process <b>125</b> to extract state information associated with both the browser process <b>125</b> and at least one document (e.g. one or more of documents <b>210</b> through <b>212</b>) contained within the browser process <b>125</b>. Next, in step <b>411</b>, the capture process <b>150</b> stores the state information obtained in step <b>410</b> in a content object <b>201</b>. Finally, in step <b>412</b>, the capture process <b>150</b> transmits the content object <b>201</b> from the capture process <b>150</b> to the server computer system <b>130</b>, using the hidden form obtained by the browser process <b>125</b> in step <b>405</b>, in order to maintain a state of the browser process <b>125</b> within the server computer system <b>130</b>.</p>
<p id="p-0074" num="0073"><figref idref="DRAWINGS">FIG. 5</figref> shows a flow chart includes processing steps <b>420</b> through <b>427</b> which illustrates more details of the processing performed by the capture process <b>150</b> according to embodiments of the invention. Generally, the processing illustrated in <figref idref="DRAWINGS">FIG. 5</figref> operates to access each document within the browser process <b>125</b> in order to capture state information related to the documents <b>210</b> through <b>212</b> and also captures state information related to the browser process <b>125</b> in then formats and sends this state information back to the server computer system <b>130</b>.</p>
<p id="p-0075" num="0074">In step <b>420</b>, the capture process <b>150</b> opens the API <b>240</b> to the browser process <b>125</b> thereby opening intra-process communications channel <b>260</b> (<figref idref="DRAWINGS">FIG. 2</figref>) to allow the capture process <b>150</b> to call functions supported by the API <b>240</b> within the browser process <b>125</b>. In the example embodiment illustrated in <figref idref="DRAWINGS">FIG. 2</figref>, assuming that the browser process <b>125</b> is Internet Explorer version 5.0 and the capture process <b>150</b> is a Java applet, in step <b>420</b>, the capture process <b>150</b> exposes the “IHtmlDocument2” component API <b>240</b> of Internet Explorer as a “wrapper” to the Java applet capture process <b>150</b> to provide access to functions within the Internet Explorer in order to obtain browser and document state information.</p>
<p id="p-0076" num="0075">Next, in steps <b>421</b> through <b>425</b>, the capture process <b>150</b> begins a repetitive process of capturing and storing the entire state of each document (e.g., documents <b>210</b> through <b>212</b>) contained within the browser process <b>125</b> into the content object <b>201</b>.</p>
<p id="p-0077" num="0076">Specifically, in step <b>421</b>, the capture process <b>150</b> begins accessing a document (e.g., document <b>210</b>) in the browser process <b>125</b> for document tags using document access functions provided by the API <b>240</b>. To do so, the API <b>240</b> provides functions to allow the capture process <b>150</b> to access and view the contents (i.e., state) of the particular documents <b>210</b> through <b>212</b> maintained by the browser process <b>125</b>.</p>
<p id="p-0078" num="0077">As referred to herein, the term “document tags” refers to identifiable statements or instructions such as HTML tags contained within the documents <b>210</b> through <b>212</b> in the browser process <b>125</b>. In step <b>421</b> then, to access a document, the capture process <b>150</b> uses a function such as “get HTML/tag” supported by the API <b>240</b> to sequentially obtain the various tags within a document (e.g., document <b>210</b>) and can uses a function such as “get outerhtml” to obtain the remaining HTML contents, including any script logic (e.g., JavaScript) or other content or data associated with the tag obtained using the “get HTML/tag” function. Using such functions, step <b>421</b> allows the capture process <b>150</b> to access and obtain the entire HTML contents, tag by tag, for a document (e.g., one of documents <b>210</b> through <b>212</b>) in the browser process <b>125</b>.</p>
<p id="p-0079" num="0078">Once each tag and the tag contents are obtained in this manner, the capture process <b>150</b> performs step <b>422</b> which copies the content associated with each document tag (as well as the document tags themselves) into a document content object (not shown in this figure), which is a data structure within the content object <b>201</b>. That is, once the capture process <b>150</b> obtains the tags and associated HTML tag contents for a document (e.g., <b>210</b>) in step <b>421</b>, step <b>422</b> copies the HTML tags and associated contents into a document content object within the content object <b>201</b>. As will be explained shortly, the content object <b>201</b> is a data structure of document content objects which the capture process <b>150</b> can use to store the state information of the browser process <b>125</b> such as HTML document contents, document and/or container URLs, application and/or cookies and any other state information.</p>
<p id="p-0080" num="0079">Once the capture process <b>150</b> as copied the entire contents (i.e., state information) of a document (e.g. <b>210</b>) into a content object, the capture process <b>150</b> performs step <b>423</b> in order to capture any application or document session identifiers (e.g. application, session, or document cookies) as well as any URLs associated with the document and then stores such identifiers in the document content object associated with that document within the content object <b>201</b>. Essentially, the capture process performs step <b>423</b> to gather any other state information related to the document been processed besides the actual document content, which was obtained in steps <b>421</b> and <b>422</b>. At this point, the content object <b>201</b>, whose details will be explained shortly, contains an entire snapshot of the state information related to one of the documents contained in the browser process <b>125</b> as a document content object.</p>
<p id="p-0081" num="0080">Next, the capture process in step <b>424</b> determines if other documents remain in the browser process <b>125</b> that have not been processed according to steps <b>421</b> to <b>423</b>. If, in step <b>424</b>, the capture process <b>150</b> determines that other documents remain to be processed, the capture process performs step <b>425</b> to obtain the next document within the browser process <b>125</b> in then returns to perform steps <b>421</b> to <b>423</b> on this document. As is evident from the flow of processing steps <b>421</b> to <b>425</b>, the capture process <b>150</b> repeats the steps for each document contained in the browser process <b>125</b>. Accordingly, after the capture process <b>150</b> is processed all documents contained within the browser process <b>125</b>, the content object <b>201</b> (<figref idref="DRAWINGS">FIG. 2</figref>) will contain a document content object contained complete state information of all documents within the browser process <b>125</b>.</p>
<p id="p-0082" num="0081"><figref idref="DRAWINGS">FIG. 6</figref> illustrates an example architecture for a content object <b>201</b> data structure suitable for use by embodiments of the invention. As explained above, the capture process <b>150</b> creates the content object <b>201</b> illustrated in <figref idref="DRAWINGS">FIG. 6</figref> during the processing of steps <b>421</b> through <b>425</b> in <figref idref="DRAWINGS">FIG. 5</figref>.</p>
<p id="p-0083" num="0082">As illustrated, the content object <b>201</b> is arranged as a tree structure in which each document <b>210</b> through <b>212</b> in the browser process <b>125</b> has a corresponding document content object <b>300</b>, <b>310</b> and <b>320</b> as a leaf node in the tree. Stemming from each document content object <b>300</b>, <b>310</b>, <b>320</b> are specific content objects <b>301</b> through <b>303</b>, <b>311</b> through <b>313</b> and <b>321</b> through <b>323</b> which the capture process <b>150</b> uses to store various portions of state information related to the documents <b>210</b> through <b>212</b> that the capture process <b>150</b> discovers and accesses (i.e. via steps <b>421</b> through <b>423</b> in <figref idref="DRAWINGS">FIG. 5</figref>) in the browser process <b>125</b>.</p>
<p id="p-0084" num="0083">By way of example, the document content object <b>300</b> represents the various portions of state information related to document <b>210</b>. For instance, the HTML content object <b>301</b> is a data structure which contains the entire set of HTML tags, statements, instructions, scripts and/or code for the document <b>210</b> which the capture process <b>150</b> obtains via steps <b>421</b> and <b>422</b> in <figref idref="DRAWINGS">FIG. 5</figref>. Likewise, after the capture process <b>150</b> processes step <b>423</b> in <figref idref="DRAWINGS">FIG. 5</figref>, the URL content object <b>302</b> will contain the URL of the document <b>210</b> and the cookies content object <b>303</b> will contain any cookies associated or related to the document <b>210</b> that the capture process <b>150</b> discovers as existing within the browser process <b>125</b>.</p>
<p id="p-0085" num="0084">Returning attention now to the processing steps in <figref idref="DRAWINGS">FIG. 5</figref>, in step <b>424</b>, once the capture process <b>150</b> has processed all of the documents <b>210</b> through <b>212</b> according to steps <b>421</b> to <b>425</b>, step <b>424</b> causes the capture process <b>150</b> to determine if no un-accessed documents remain in this processing proceeds to step <b>426</b>.</p>
<p id="p-0086" num="0085">In step <b>426</b>, the capture process <b>150</b> encodes the content object <b>201</b> that contains all of the document content objects (e.g., <b>300</b> through <b>324</b> in <figref idref="DRAWINGS">FIG. 6</figref>) for each document <b>210</b> through <b>212</b> in the browser process <b>125</b> as a content string. In other words, the capture process <b>150</b> encodes the content object <b>201</b> which comprises a number of hierarchically related content object data structures into a single text string of information.</p>
<p id="p-0087" num="0086">Next, in step <b>427</b>, the capture process <b>150</b> populates the hidden form, obtained by the browser process <b>125</b> in step <b>405</b>, with the content object string and submits or transmits the content object string over the network <b>110</b> (<figref idref="DRAWINGS">FIG. 1</figref>) to a process called a servlet (not shown) that performs on the server computer system <b>130</b>. That is, in step <b>427</b>, the capture process <b>150</b> transmits the content object from the capture process on the client computer system <b>120</b> to the server computer system <b>130</b> to allow the server computer system <b>130</b> to maintain the state of the browser for use by other participants that have requested to join the collaboration session which is about to be initiated.</p>
<p id="p-0088" num="0087">In this manner, the system of the invention offloads majority the processing operations required to capture the state of the browser process in a client computer system. In doing so, a collaboration servers such as the server computer system <b>130</b> alleviates itself the burden of capturing such state information on its own. Instead, by providing the capture process <b>150</b> of this invention to a client computer system upon which the capture process <b>150</b> performs to capture all required state information related to the browser process, the server computer system <b>130</b> may not be concerned with handling such processing requirements. Instead, the server computer system merely awaits return of the state information <b>160</b> created as explained above. Once the server computer system <b>130</b> obtains the state information <b>160</b> which depicts the state of the browser process <b>125</b> immediately prior to the user and initiating a collaboration session, the server computer system <b>130</b> can use the state information <b>160</b> to allow other participant browsers such as browser processes <b>126</b> and <b>127</b> to join the collaboration session about to begin.</p>
<p id="p-0089" num="0088">Moreover, the processing of the invention as explained above provides an extremely robust capture mechanism which can capture the state of the browser process <b>125</b>. Conventional collaboration systems not equipped with the system of the invention are limited in that they are unable to capture, for instance, user or participant computer based state information. In other words, the system of the invention captures state information within the client computer system <b>120</b> during initiation of collaboration, and then forwards such browser state information to the client computer system <b>130</b> out of band, or via a separate communications message (e.g., the content object string) in addition to the standard request to initiate collaboration.</p>
<p id="p-0090" num="0089"><figref idref="DRAWINGS">FIG. 7</figref> illustrates an example architecture of the client computer system <b>120</b> configured in accordance with an embodiment of the invention. In this example embodiment, the client computer system includes a processor <b>500</b>, an interconnection mechanism <b>501</b>, an input output mechanism <b>502</b>, and a memory system <b>503</b>. The memory system <b>503</b> contains the browser process <b>125</b> and the capture process <b>150</b>, as explained above. In operation, the processor <b>500</b> interacts with the memory system <b>503</b> via the interconnection mechanism <b>501</b> to perform the browser process <b>125</b> and the capture process <b>150</b> according to the techniques explained herein. The input output mechanism <b>502</b> allows the client computer system <b>120</b> to communicate, for instance, with the server computer system <b>130</b> (<figref idref="DRAWINGS">FIG. 1</figref>) via the data link <b>140</b> which couples the client computer system <b>120</b> to the network <b>110</b> (<figref idref="DRAWINGS">FIG. 1</figref>).</p>
<p id="p-0091" num="0090">Those skilled in the art will understand that there can be many variations made to the operations, techniques and mechanisms explained above while still achieving the same objectives of the invention. Such variations are intended to be covered by the scope of this invention.</p>
<p id="p-0092" num="0091">As an example of such a variation of the aforementioned example descriptions, it is to be understood that the capture processing of this invention may be performed periodically during the existence or lifetime of a collaboration session having multiple participants. That is, while the former example explanation explains the operation of the invention just prior to the initiation of the collaboration session, the techniques of the invention can be employed periodically during a collaboration session to capture the state of the controlling browser process <b>125</b>, as the controlling browser process of the collaboration session (or for any participant browser, for that matter).</p>
<p id="p-0093" num="0092">In doing so, the server computer system <b>130</b> thus can periodically receive a snapshot of the state information of a browser process <b>125</b> as the browser process controls the collaboration session. Such interm state information (where the word interm implies the state information of a browser process <b>125</b> that controls a currently existing collaboration session) is valuable, for instance, so that the server computer system <b>130</b> can supply a new participant browser to an existing collaboration session with the interm state information. This allows the new participant browser to immediately “come up to state” with the current state of the collaboration session, without having to navigate through successive former pages of the collaboration session to eventually reach the point of the current page of collaboration session.</p>
<p id="p-0094" num="0093">Since the state information provided from the client computer system <b>120</b> to the server computer system <b>130</b> as explained herein contains the current state of the controlling browser of the collaboration session (including, for example, cookies, documents, URLs, and importantly, including the most up-to-date version of any user supplied information), for the controlling browser of the collaboration session, if this state information is then provided to a new participant browser of an existing collaboration session, that new participant browser is immediately brought up-to-date with all information related to the collaboration session as a currently exists.</p>
<p id="p-0095" num="0094">Importantly, the present invention provides state information that may include user supplied information, such that if the user of the controlling participant browser <b>125</b> enters information into a web page of the collaboration session during the existence of an active collaboration session, and then submits such information to the collaboration server <b>130</b>, the system of the invention can be triggered at that point (i.e., within the client computer system <b>120</b>, immediately before such a submission) as explained above to capture the current state of that controlling browser process, including this user supplied information. At that point, the system of the invention obtains the most up-to-date state information related to the existing collaboration session which is then provided to the server computer system <b>130</b> for distribution to any new participant browsers that are awaiting the ability to join the shared collaboration session. The server computer system <b>130</b> can serve this up-to-date state information to such participant browsers to allow those new participant browsers to begin collaboration on the current web page of the collaboration session, rather than having to navigate through subsequently provided pages of the collaboration session (i.e., avoiding having to begin navigating at page one of the collaboration session) in order to navigate up to the current page.</p>
<p id="p-0096" num="0095">Conventional collaboration systems not equipped with the system of the invention that allow new participant browsers to join an existing collaboration session require the new browsers begin the collaboration session at the start in which case such participant browsers must navigate through successive web page is of the collaboration session in order to begin viewing the collaboration session at the current or most recent page in use by the controlling browser. The invention saves significant amounts of time for participant browsers that desire to join a collaboration session which is already underway.</p>
<p id="p-0097" num="0096">The foregoing description of embodiments of the invention are not intended to be limiting. Rather, any limitations to embodiments of the invention are presented in the following claims.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method for obtaining a state of a browser containing a document on a client computer system, the method comprising the steps of:
<claim-text>extracting, from the browser, via a capture process executed at the client computer system that operates in conjunction with the browser, complete state information associated with the browser and the document contained in the browser, wherein the state information includes a document state, a session state associated with the browser, and at least one of document cookies, application session cookies and communications session cookies;</claim-text>
<claim-text>storing the complete state information in at least one content object on the client computer system;</claim-text>
<claim-text>transmitting the at least one content object from the capture process on the client computer system to a server computer system to maintain a complete state of the browser in the server computer system;</claim-text>
<claim-text>detecting an intent to initiate a collaboration session with a first participant browser;</claim-text>
<claim-text>obtaining the capture process;</claim-text>
<claim-text>operating the capture process to perform the steps of extracting, storing and transmitting such that the capture process captures the complete state information associated with the browser, including state information created before the initiation of the collaboration session related to the document contained in the browser upon initiation of the collaboration session;</claim-text>
<claim-text>transmitting the complete state information to the server computer system such that the server computer system can provide the complete state information to other participants of the collaboration session, and wherein, in response to detecting the intent to initiate a collaboration session, the method performs the step of setting a document domain property of each document contained in the browser to a common value.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the step of extracting includes the steps of:
<claim-text>opening an application programming interface from the capture process to the browser, the application programming interface providing functions to access the state information associated the browser and the document contained in the browser; and</claim-text>
<claim-text>performing, via the capture process, the functions provided by the application programming interface to access and retrieve the state information on the client computer system.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref> wherein:
<claim-text>the functions provided by the application programming interface include document access functions to access the document contained in the browser and browser access functions to access the state information associated with the browser; and</claim-text>
<claim-text>wherein the step of performing, via the capture process, the functions provided by the application programming interface includes the steps of:
<claim-text>accessing the document contained within the browser for document tags existing in the document using at least one of the document access functions;</claim-text>
<claim-text>copying, into a document content object, the content associated with each document tag accessed from the document;</claim-text>
<claim-text>capturing, via at least one browser access function, at least one application session identifier associated with the document contained in the browser; and</claim-text>
<claim-text>copying the at least one application session identifier associated with the document into the document content object.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref> wherein:
<claim-text>the document contained in the browser is a hypertext document;</claim-text>
<claim-text>wherein the step of accessing includes the step of calling a hypertext access function provided by the application programming interface to obtain each document tag within document; and</claim-text>
<claim-text>wherein the step of copying into a document content object includes the steps of:
<claim-text>calling a hypertext retrieval function provided by the application programming interface to obtain hypertext content associated with each document tag in the document; and</claim-text>
<claim-text>placing the hypertext content associated with each document tag in the document into the document content object.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref> wherein the browser contains multiple documents, each associated with a document container, and wherein the step of performing the functions provided by the application programming interface to access and retrieve the state information is performed on each document in each document container to access and retrieve the state information associated with each document in each document container.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein:
<claim-text>the state information includes a document state and a session state associated with a browser, for each document contained in the browser; and</claim-text>
<claim-text>wherein the step of storing arranges the document state and the session state associated with a browser, for each document contained in the browser, in a format within the at least one content object, such that the at least one content object associates each document state with a session state associated with a document for each document contained in the browser.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the step of transmitting transmits the at least one content object from the capture process to a collaboration application performing on the server computer system for distribution to participant browsers.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the step of obtaining the capture process includes the steps of:
<claim-text>obtaining a version of the browser containing the document; and</claim-text>
<claim-text>determining if the version is a first value, and if so, obtaining a first version of the capture process from a first location, and if not, determining if the version is a second value, and if so, obtaining a second version of the capture process from a second location.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the capture process is an applet stored on a server and wherein the step of obtaining the capture process includes the step of downloading the applet from the server to the client computer system to capture state information associated the browser and the document contained in the browser.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the step of setting a document property of each document contained in browser to a common value includes the step of performing script logic to alter a document domain property of each document contained in the browser to a common domain.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein said state information further includes other state information related to the document besides actual document content.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein said state information further includes time sensitive information related to a web page on display within the browser, and participant supplied information used in said collaboration session.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. A computer system comprising:
<claim-text>a memory configured with a browser containing at least one document;</claim-text>
<claim-text>an input-output mechanism;</claim-text>
<claim-text>a processor; and</claim-text>
<claim-text>an interconnection mechanism coupling the memory, the processor and the input-output mechanism;</claim-text>
<claim-text>wherein the memory is further configured with a capture process, that when performed on the processor, causes the processor to obtain a complete state of the browser containing the at least one document by performing the operations of:
<claim-text>extracting, from the browser, complete state information wherein the complete state information includes a document state, a session state associated with the browser, and at least one of document cookies, application session cookies and communications session cookies;</claim-text>
<claim-text>storing the state information in at least one content object in the memory;</claim-text>
<claim-text>transmitting the at least one content object to a server computer system, via the input-output mechanism, to maintain a complete state of the browser in the server computer system;</claim-text>
<claim-text>detecting an intent to initiate a collaboration session with a first participant browser;</claim-text>
</claim-text>
<claim-text>obtaining the capture process; and</claim-text>
<claim-text>operating the capture process to perform the steps of extracting, storing and transmitting such that the capture process captures the complete state information associated with the browser, including state information created before the initiation of the collaboration session related to the document contained in the browser upon initiation of the collaboration session; and</claim-text>
<claim-text>transmitting the complete state information to the server computer system such that the server computer system can provide the complete state information to other participants of the collaboration session, and wherein, in response to detecting the intent to initiate a collaboration session, the method performs the step of setting a document domain property of each document contained in the browser to a common value.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The computer system of <claim-ref idref="CLM-00013">claim 13</claim-ref> wherein when the processor performs the operation of extracting, the processor performs the operations of:
<claim-text>opening an application programming interface from the capture process to the browser, the application programming interface providing functions that can be performed by the capture process, under control of the processor, to access the state information associated the browser and the document contained in the browser; and</claim-text>
<claim-text>performing the functions provided by the application programming interface to access and retrieve the state information.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The computer system of <claim-ref idref="CLM-00014">claim 14</claim-ref> wherein:
<claim-text>the functions provided by the application programming interface include document access functions to access the document contained in the browser and browser access functions to access the state information associated with the browser; and</claim-text>
<claim-text>wherein, when the capture process is performed on the processor to perform the functions provided by the application programming interface, the capture process further causes the processor to perform the operations of:
<claim-text>accessing the document contained within the browser in the memory for document tags existing in the document using at least one of the document access functions;</claim-text>
<claim-text>copying, into a document content object in the memory, the content associated with each document tag accessed from the document; and</claim-text>
<claim-text>capturing, via at least one browser access function, at least one application session identifier associated with the document contained in the browser; and</claim-text>
<claim-text>copying the at least application session identifier associated with the document into the document content object.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The computer system of <claim-ref idref="CLM-00015">claim 15</claim-ref> wherein:
<claim-text>the document contained in the browser in memory is a hypertext document;</claim-text>
<claim-text>wherein the operation of accessing, when performed by the capture process on the processor, further causes the processor to perform the operation of calling a hypertext access function provided by the application programming interface to obtain each document tag within document; and</claim-text>
<claim-text>wherein the operation of copying into a document content object, when performed by the capture process performing on the processor, further causes the processor to perform the operations of:
<claim-text>calling a hypertext retrieval function provided by the application programming interface to obtain hypertext content associated with each document tag in the document in the memory; and</claim-text>
<claim-text>placing the hypertext content associated with each document tag in the document into the document content object in the memory.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The computer system of <claim-ref idref="CLM-00014">claim 14</claim-ref> wherein:
<claim-text>the browser contains multiple documents in the memory, each document associated with a document container in memory; and</claim-text>
<claim-text>wherein the processor performs the operation of performing, via the capture process, the functions provided by the application programming interface to access and retrieve the state information on each document in each document container in the memory to access and retrieve the state information associated with each document in each document container in the memory.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The computer system of <claim-ref idref="CLM-00013">claim 13</claim-ref> wherein:
<claim-text>the state information includes a document state and a session state associated with a browser, for each document contained in the browser in the memory; and</claim-text>
<claim-text>wherein when the processor performs the operation of storing, the processor arranges the document state and the session state associated with a browser, for each document contained in the browser, in a format within the at least one content object in the memory, such that the at least one content object associates each document state with a session state associated with a document for each document contained in the browser.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The computer system of <claim-ref idref="CLM-00013">claim 13</claim-ref> wherein when the processor performs the operation of transmitting, the processor transmits the at least one content object from the input-output mechanism to a collaboration application performing on the server computer system for distribution to participant browsers.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The computer system of <claim-ref idref="CLM-00013">claim 13</claim-ref> wherein when the processor performs the operation of obtaining the capture process, the processor performs the operations of:
<claim-text>obtaining a version of the browser containing the document; and</claim-text>
<claim-text>determining if the version is a first value, and if so, obtaining a first version of the capture process from a first location, and if not, determining if the version is a second value, and if so, obtaining a second version of the capture process from a second location.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. The computer system of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein, in response to detecting an intent to initiate a collaboration session, the processor performs the operation of setting a document property of each document contained in the browser in the memory to a common value.</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. The computer system of <claim-ref idref="CLM-00013">claim 13</claim-ref> wherein said state information further includes other state information related to the document besides actual document content.</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. The computer system of <claim-ref idref="CLM-00013">claim 13</claim-ref> wherein said state information further includes time sensitive information related to a web page on display within the browser, and participant supplied information used in said collaboration session.</claim-text>
</claim>
<claim id="CLM-00024" num="00024">
<claim-text>24. A computer program product having a computer-readable medium including capture process computer program logic encoded thereon for obtaining a complete state of a browser containing a document on a client computer system, such that the computer program logic, when performed on at least one processor within a computer system, causes the at least one processor to perform the operations of:
<claim-text>extracting, from the browser, complete state information associated the browser and the document contained in the browser, wherein the complete state information includes a document state, a session state associated with the browser, and at least one of document cookies, application session cookies and communications session cookies;</claim-text>
<claim-text>storing the complete state information in at least one content object on the client computer system;</claim-text>
<claim-text>transmitting the at least one content object from the client computer system to a server computer system to maintain a complete state of the browser in the server computer system;</claim-text>
<claim-text>detecting an intent to initiate a collaboration session with a first participant browser;</claim-text>
<claim-text>obtaining the capture process; and</claim-text>
<claim-text>operating the capture process to perform the steps of extracting, storing and transmitting such that the capture process captures the complete state information associated with the browser, including state information created before the initiation of the collaboration session related to the document contained in the browser upon initiation of the collaboration session; and</claim-text>
<claim-text>transmitting the complete state information to the server computer system such that the server computer system can provide the complete state information to other participants of the collaboration session, and wherein, in response to detecting the intent to initiate a collaboration session, the method performs the step of setting a document domain property of each document contained in the browser to a common value.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00025" num="00025">
<claim-text>25. The computer program product of <claim-ref idref="CLM-00024">claim 24</claim-ref> wherein the computer program logic that causes the processor to perform the operation of extracting further causes the processor to perform the operations of:
<claim-text>opening an application programming interface from the capture process to the browser, the application programming interface providing functions to access the state information associated the browser and the document contained in the browser; and</claim-text>
<claim-text>performing the functions provided by the application programming interface to access and retrieve the state information on the client computer system.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00026" num="00026">
<claim-text>26. The computer program product of <claim-ref idref="CLM-00024">claim 24</claim-ref> wherein the capture process computer program logic is an applet that can be served by the server computer system to the client computer system and that can be performed on the client computer system to capture state information related to the browser on the client computer system.</claim-text>
</claim>
<claim id="CLM-00027" num="00027">
<claim-text>27. The computer program product of <claim-ref idref="CLM-00024">claim 24</claim-ref> wherein said state information further includes other state information related to the document besides actual document content.</claim-text>
</claim>
<claim id="CLM-00028" num="00028">
<claim-text>28. A method for performing collaboration between participant browsers, the method comprising the steps of:
<claim-text>obtaining complete state information from a browser process performing on a first client computer system, from within the first client computer system, wherein the complete state information includes a document state, a session state associated with the browser, and at least one of document cookies, application session cookies and communications session cookies and state information created before the initiation of the collaboration session related to;</claim-text>
<claim-text>transmitting the complete state information from the client computer system to a server computer system;</claim-text>
<claim-text>distributing the complete state information from the server computer system to at least one participant browser on a second client computer system to allow the participant browser on the second client computer system to re-create the state of the browser process performing on the first client computer system and to enable the participant browser on the second client computer system to enter a collaboration session with the browser process of the first client computer system at a point in the collaboration session defined by the complete state information, wherein a document domain property of each document contained in the browser is set to a common value.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00029" num="00029">
<claim-text>29. The method of <claim-ref idref="CLM-00028">claim 28</claim-ref> wherein the steps of obtaining, transmitting and distributing are performed prior to the initiation of the collaboration session between the browser process performing on the first client computer system and a collaboration server.</claim-text>
</claim>
<claim id="CLM-00030" num="00030">
<claim-text>30. The method of <claim-ref idref="CLM-00028">claim 28</claim-ref> wherein:
<claim-text>the steps of obtaining, transmitting and distributing are performed after the initiation of the collaboration session between the browser process performing on the first client computer system and a collaboration server; and</claim-text>
<claim-text>wherein the state information is interim state information that conveys a complete state of the browser process on the first client computer system as it exists during the existence of the collaboration session.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00031" num="00031">
<claim-text>31. The method of <claim-ref idref="CLM-00028">claim 28</claim-ref> wherein said state information further includes other state information related to the document besides actual document content.</claim-text>
</claim>
</claims>
</us-patent-grant>
