<us-patent-grant lang="EN" dtd-version="v4.2 2006-08-23" file="US07299419-20071120.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20071106" date-publ="20071120">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>07299419</doc-number>
<kind>B2</kind>
<date>20071120</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>10183898</doc-number>
<date>20020625</date>
</document-id>
</application-reference>
<us-application-series-code>10</us-application-series-code>
<us-term-of-grant>
<us-term-extension>718</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>3</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>3</main-group>
<subgroup>14</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>9</main-group>
<subgroup>44</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>715763</main-classification>
<further-classification>715810</further-classification>
<further-classification>715835</further-classification>
<further-classification>715837</further-classification>
<further-classification>715967</further-classification>
<further-classification>717106</further-classification>
<further-classification>717109</further-classification>
<further-classification>707  1</further-classification>
</classification-national>
<invention-title id="d0e53">Apparatus and method for combining discrete logic visual icons to form a data transformation block</invention-title>
<references-cited>
<citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>4796179</doc-number>
<kind>A</kind>
<name>Lehman et al.</name>
<date>19890100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>700 86</main-classification></classification-national>
</citation>
<citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5485600</doc-number>
<kind>A</kind>
<name>Joseph et al.</name>
<date>19960100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>703 13</main-classification></classification-national>
</citation>
<citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>5752033</doc-number>
<kind>A</kind>
<name>Suda et al.</name>
<date>19980500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717109</main-classification></classification-national>
</citation>
<citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>5861882</doc-number>
<kind>A</kind>
<name>Sprenger et al.</name>
<date>19990100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>715700</main-classification></classification-national>
</citation>
<citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>5862379</doc-number>
<kind>A</kind>
<name>Rubin et al.</name>
<date>19990100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717109</main-classification></classification-national>
</citation>
<citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>5933637</doc-number>
<kind>A</kind>
<name>Hurley et al.</name>
<date>19990800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717107</main-classification></classification-national>
</citation>
<citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>6054986</doc-number>
<kind>A</kind>
<name>Kato</name>
<date>20000400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>715763</main-classification></classification-national>
</citation>
<citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>6064816</doc-number>
<kind>A</kind>
<name>Parthasarathy et al.</name>
<date>20000500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717109</main-classification></classification-national>
</citation>
<citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>6151643</doc-number>
<kind>A</kind>
<name>Cheng et al.</name>
<date>20001100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>6275976</doc-number>
<kind>B1</kind>
<name>Scandura</name>
<date>20010800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717120</main-classification></classification-national>
</citation>
<citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>6282699</doc-number>
<kind>B1</kind>
<name>Zhang et al.</name>
<date>20010800</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>6334211</doc-number>
<kind>B1</kind>
<name>Kojima et al.</name>
<date>20011200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>6366300</doc-number>
<kind>B1</kind>
<name>Ohara et al.</name>
<date>20020400</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>6385769</doc-number>
<kind>B1</kind>
<name>Lewallen</name>
<date>20020500</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>6396517</doc-number>
<kind>B1</kind>
<name>Beck et al.</name>
<date>20020500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>715771</main-classification></classification-national>
</citation>
<citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>6437805</doc-number>
<kind>B1</kind>
<name>Sojoodi et al.</name>
<date>20020800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>715763</main-classification></classification-national>
</citation>
<citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>6760842</doc-number>
<kind>B1</kind>
<name>Miller et al.</name>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726 26</main-classification></classification-national>
</citation>
<citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>6922824</doc-number>
<kind>B2</kind>
<name>Swetland</name>
<date>20050700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717117</main-classification></classification-national>
</citation>
<citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>2002/0069399</doc-number>
<kind>A1</kind>
<name>Miloushey et al.</name>
<date>20020600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717108</main-classification></classification-national>
</citation>
<citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>2002/0095653</doc-number>
<kind>A1</kind>
<name>Parr et al.</name>
<date>20020700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
</citation>
<citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>2002/0196283</doc-number>
<kind>A1</kind>
<name>Petruk et al.</name>
<date>20021200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>345763</main-classification></classification-national>
</citation>
<citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>2003/0035010</doc-number>
<kind>A1</kind>
<name>Kodosky et al.</name>
<date>20030200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>345771</main-classification></classification-national>
</citation>
<citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>2003/0101025</doc-number>
<kind>A1</kind>
<name>Shah et al.</name>
<date>20030500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>702188</main-classification></classification-national>
</citation>
<citation>
<patcit num="00024">
<document-id>
<country>US</country>
<doc-number>2004/0267515</doc-number>
<kind>A1</kind>
<name>McDaniel et al.</name>
<date>20041200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>703 22</main-classification></classification-national>
</citation>
<citation>
<patcit num="00025">
<document-id>
<country>JP</country>
<doc-number>10-69379</doc-number>
<date>19980300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
</citation>
<citation>
<patcit num="00026">
<document-id>
<country>JP</country>
<doc-number>10069379</doc-number>
<date>19980300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
</citation>
</references-cited>
<number-of-claims>26</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>715762-765</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715810</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715835</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715837</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715846</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715967</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715700</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>707102</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>7071041</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>707  1</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709204</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709205</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>717106-116</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>8</number-of-drawing-sheets>
<number-of-figures>17</number-of-figures>
</figures>
<us-related-documents>
<us-provisional-application>
<document-id>
<country>US</country>
<doc-number>60326176</doc-number>
<kind>00</kind>
<date>20010928</date>
</document-id>
</us-provisional-application>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20030071844</doc-number>
<kind>A1</kind>
<date>20030417</date>
</document-id>
</related-publication>
</us-related-documents>
<parties>
<applicants>
<applicant sequence="001" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Evans</last-name>
<first-name>Luke William</first-name>
<address>
<city>West Vancouver</city>
<country>CA</country>
</address>
</addressbook>
<nationality>
<country>CA</country>
</nationality>
<residence>
<country>CA</country>
</residence>
</applicant>
</applicants>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Cooley Godward Kronish LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</parties>
<assignees>
<assignee>
<addressbook>
<orgname>Business Objects, S.A.</orgname>
<role>03</role>
<address>
<city>Levallois-Perret</city>
<country>FR</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Bautista</last-name>
<first-name>X. L.</first-name>
<department>2179</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A method of constructing a data transformation block includes selecting a first discrete logic visual icon and a second discrete logic visual icon from a logic repository. A combination valid state is established when the first discrete logic visual icon can be combined with the second discrete logic visual icon. The first discrete logic visual icon and the second discrete logic visual icon are combined in response to the combination valid state to form a data transformation block. The data transformation block has a corresponding functional language source code description of the logical operations to be performed by the data transformation block. The data transformation block processes data to form transformed data. The data transformation block may be stored in the logic repository so that others can access it.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="101.68mm" wi="176.53mm" file="US07299419-20071120-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="266.36mm" wi="175.51mm" file="US07299419-20071120-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="260.77mm" wi="162.22mm" file="US07299419-20071120-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="264.41mm" wi="131.57mm" file="US07299419-20071120-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="196.26mm" wi="171.03mm" file="US07299419-20071120-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="183.73mm" wi="185.08mm" file="US07299419-20071120-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="190.92mm" wi="192.28mm" file="US07299419-20071120-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="237.15mm" wi="183.90mm" file="US07299419-20071120-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="86.36mm" wi="161.88mm" file="US07299419-20071120-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<p id="p-0002" num="0001">This application claims priority under 35 U.S.C. §119(e) to U.S. Provisional Application No. 60/326,176, filed on Sep. 28, 2001, the entire content of which is hereby incorporated by reference.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BRIEF DESCRIPTION OF THE INVENTION</heading>
<p id="p-0003" num="0002">This invention relates generally to the processing of information. More particularly, this invention relates to the use of an icon-based programming technique to facilitate the processing of business information.</p>
<heading id="h-0002" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0004" num="0003">All tasks performed on a computer can be viewed as processing information. There are ways of characterizing these different information processing tasks. One class of information processing can be defined as “business logic”. “Business logic” is a subset of general programming where the objective is the transformation and interpretation of large volumes of data. The challenges or business logic are to perform rapid analyses or to prepare the data so that an individual can more easily interpret it. In this regard, it can be said that business logic differentiates itself from general computing by being data centric. Business logic commonly includes the tasks of exploring, abstracting, alerting, automating, reducing, and directing.</p>
<p id="p-0005" num="0004">Exploring is the process of helping a user to find interesting features in data. This is achieved through other tasks, such as abstracting. Abstracting creates new data (consolidations, measures, and metrics) from base data. The new data shows the user key facts about the data in ways that are appropriate to a job function and/or workflow. For example, abstracting includes consolidating transactional data so it is shown monthly, or by sales region.</p>
<p id="p-0006" num="0005">Alerting is another business logic task. Alerting detects patterns or thresholds in data and triggers an event that will notify the user (with an appropriate example or amplification) that a pattern exists. For example, having a rule that highlights or notifies a manager when inventory exceeds a predetermined number of units is an example of alerting.</p>
<p id="p-0007" num="0006">Automating is another business logic task. Automating involves encapsulating common models of analysis that can very easily be applied by anyone wishing to produce the same metric or derived data. An example of automating is having the finance department capture its specific (customized) accounting models as a set of named objects so that others in the organization can apply these to get the uniform version of a business metric.</p>
<p id="p-0008" num="0007">Reducing is still another business logic task. Reducing involves filtering information so as to avoid ‘information overflow’. For example, a data filter that automatically reduces the data to show only the financial products offered by a particular branch office is an example of reducing. Another example of reducing is a filter that only shows data items flagged by the alerting rules.</p>
<p id="p-0009" num="0008">A final business logic task is directing or navigation. Directing indicates to the user useful views on the data based on a combination of patterns, alerts, roles and the like. Directing also provides navigation routes through the data for the user to follow as the meanings and patterns in data are explored. For example, directing includes an analytical routine that decides on and directs the automatic generation of reports specifically to highlight data features based on user role and dynamics in the data. Another example of directing is to allow a user to see progressively more detail in order to determine emerging cause and effect relationships.</p>
<p id="p-0010" num="0009">These common business logic tasks of exploring, abstracting, alerting, automating, reducing, and directing require different programming instructions. It is difficult to train individuals in a business organization to effectively program these different business logic tasks. Therefore, there is an ongoing need to simplify the process of defining business logic tasks. Once a business logic task is defined, it is desirable to have that task available in a recognizable form so that it can be utilized throughout a business organization.</p>
<heading id="h-0003" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0011" num="0010">The invention includes a method of constructing a data transformation block. In accordance with the method, a first discrete logic visual icon and a second discrete logic visual icon are selected from a logic repository. A combination valid state is established when the first discrete logic visual icon can be combined with the second discrete logic visual icon. The first discrete logic visual icon and the second discrete logic visual icon are combined in response to the combination valid state to form a data transformation block. The data transformation block has a corresponding functional language source code description of the logical operations to be performed by the data transformation block. The data transformation block processes data to form transformed data. The data transformation block may be stored in the logic repository so that others can access it.</p>
<p id="p-0012" num="0011">The invention also includes a computer readable memory to direct a computer to function in a specified manner. The computer readable memory has a logic repository storing a set of discrete logic visual icons. The computer readable memory also has a set of executable instructions. First executable instructions selectively produce a combination valid state when a first discrete logic visual icon from the logic repository can be combined with a second discrete logic visual icon from the logic repository. Second executable instructions combine the first discrete logic visual icon and the second discrete logic visual icon in response to the combination valid state to form a data transformation block. The data transformation block has a corresponding functional language source code description of the logical operations to be performed by the data transformation block.</p>
<p id="p-0013" num="0012">The icon-based programming methodology of the invention simplifies the process of defining business logic tasks, such as exploring, abstracting, alerting, automating, reducing, and directing. The functional language source code associated with the icons provides an intuitive and efficient vehicle for expressing logic. The functional language utilized in accordance with the invention also facilitates processing efficiencies, such as parallel processing. The strongly typed nature of the functional language is exploited to control the combination of icons and to produce logic blocks that can operate on different data types. Advantageously, the data blocks formed in accordance with the invention can be re-used throughout a business organization.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE FIGURES</heading>
<p id="p-0014" num="0013">The invention is more fully appreciated in connection with the following detailed description taken in conjunction with the accompanying drawings, in which:</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 1</figref> illustrates a computer, operative in a networked environment, which is configured in accordance with an embodiment of the invention.</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 2</figref> illustrates processing steps performed in accordance with an embodiment of the invention.</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIGS. 3-4</figref> illustrate gems that may be utilized in accordance with an embodiment of the invention.</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIGS. 5-7</figref> illustrate gems and associated port labels as used in accordance with embodiments of the invention.</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 8</figref> illustrates the process of connecting gems in accordance with embodiments of the invention.</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 9</figref> illustrates a graphical user interface that may be used in accordance with an embodiment of the invention.</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 10</figref> illustrates the process of connecting gems to a target in accordance with an embodiment of the invention.</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 11</figref> illustrates different data type options associated with a gem utilized in accordance with an embodiment of the invention.</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 12</figref> illustrates different data type combinations that may be established between different gems.</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 13</figref> illustrates value entry panels utilized in accordance with an embodiment of the invention.</p>
<p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. 14</figref> illustrates constant gem type options that may be selected in accordance with an embodiment of the invention.</p>
<p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. 15</figref> illustrates the construction of a code gem in accordance with an embodiment of the invention.</p>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. 16</figref> illustrates a code entry panel for a code gem utilized in accordance with an embodiment of the invention.</p>
<p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. 17</figref> illustrates gem construction and input burning in accordance with an embodiment of the invention.</p>
<p id="p-0029" num="0028">Like reference numerals refer to corresponding parts throughout the several views of the drawings.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DETAILED DESCRIPTION OF THE INVENTION</heading>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. 1</figref> illustrates a networked environment <b>20</b> including a set of computers <b>22</b>A-<b>22</b>N connected via a transmission channel <b>23</b>, which may be any wired or wireless pathway. Computer <b>22</b>A is an example of a computer configured in accordance with an embodiment of the invention. The remaining computers in the networked environment <b>20</b> may be configured in an identical or alternate manner.</p>
<p id="p-0031" num="0030">Computer <b>22</b>A includes a central processing unit <b>30</b> connected to a set of input/output devices <b>34</b> via a system bus <b>32</b>. By way of example, the input/output devices <b>34</b> may include a keyboard, mouse, touch screen, video monitor, flat panel display, printer, and the like. A network interface circuit is also connected to the system bus <b>32</b>. Further, a memory <b>40</b> is connected to the system bus <b>32</b>.</p>
<p id="p-0032" num="0031">The memory <b>40</b> stores a set of executable programs, including an operating system <b>42</b> and a browser <b>44</b>. A database <b>46</b> is also stored in the memory <b>40</b>. A data access module <b>48</b> may be used to read and write information to and from the database <b>46</b>. The components of <figref idref="DRAWINGS">FIG. 1</figref> discussed up to this point are known in the art. The invention is directed toward the remaining executable modules that are stored in memory <b>40</b>.</p>
<p id="p-0033" num="0032">Memory <b>40</b> includes a logic repository <b>50</b>. The logic repository stores a set of discrete logic visual icons <b>52</b>. Each discrete logic visual icon represents a discrete logical operation. The visual icon has associated executable code that is used to implement the discrete logical operation. As shown below, these individual discrete logic visual icons can be combined to create data transformation blocks <b>54</b>. In general, the discrete logic visual icons are primitive operations that may be combined to form the more complex or tailored operations associated with the data transformation blocks <b>54</b>. The data transformation blocks <b>54</b> may be combined with discrete logic icons or other data transformation blocks to form new data transformation blocks. This icon-based programming methodology is easy to use, thereby allowing large numbers of individuals to participate in programming operations.</p>
<p id="p-0034" num="0033">Each of the data transformation blocks is preferably stored in the logic repository <b>50</b> so that they may be accessed over the network. Thus, in the example of a business, a single business may develop a set of customized data transformation blocks that are shared throughout the business organization.</p>
<p id="p-0035" num="0034">The memory <b>40</b> also stores a logic manipulation module <b>56</b>. The logic manipulation module <b>56</b> governs the combination of discrete logic visual icons <b>52</b> with one another and/or with data transformation blocks <b>54</b>. The logic manipulation module <b>56</b> is a runtime environment that can be considered to include a number of modules.</p>
<p id="p-0036" num="0035">The logic manipulation module <b>56</b> may include a graphical user interface module <b>58</b>. The graphical user interface module <b>58</b> includes executable code to supply a graphics-based interface, examples of which are provided below. The logic manipulation module <b>56</b> also includes a combination control module <b>60</b>. The combination control module <b>60</b> confirms the legitimacy or legality of proposed combinations of discrete logic visual icons with one another or with data transformation blocks. The combination control module <b>60</b> prevents the formation of illegal combinations of logical elements. This operation is performed in a run time environment, not at the time of compiling. Therefore, the user is continuously reassured during the logic construction process of the efficacy of the data transformation block. As discussed below, the type system of the functional language utilized in accordance with the invention may be used by the combination control module <b>60</b> to identify valid combinations of logical elements.</p>
<p id="p-0037" num="0036">The logic manipulation module <b>56</b> further includes a burn module <b>62</b>. The burn module <b>62</b> automatically establishes connections between logical elements that are to be combined when there is no ambiguity with respect to how those elements can be combined. This feature automates and otherwise simplifies the logic construction process. The burn module <b>62</b> may also rely upon the type system associated with the functional language utilized in accordance with the invention.</p>
<p id="p-0038" num="0037">The snap module <b>64</b> facilitates connections to input and output ports of the logical elements, as shown below. The snap module <b>64</b> may be used to control the drawing of physical links between ports. Preferably, the appearance of the physical links is altered when a valid connection is established.</p>
<p id="p-0039" num="0038">The entry panel module <b>66</b> provides an interface for entering values at the input of a logical element. As discussed below, the entry panel module <b>66</b> supplies a variety of entry panels. Various entry panels provide data type information, as discussed below.</p>
<p id="p-0040" num="0039">After a data transformation block is formed, a test module <b>68</b> may be invoked to test the new logical unit. An execution module <b>70</b> processes the functional language source code description associated with the data transformation block. More particularly, the execution module <b>70</b> processes the functional language source code in connection with an input data stream to produce transformed data.</p>
<p id="p-0041" num="0040">In a preferred embodiment, the execution module <b>70</b> includes a distributed processing module <b>72</b>. The distributed processing module <b>72</b> determines where the data transformation block will be processed. For example, the distributed processing module <b>72</b> includes heuristics to determine whether the data transformation block should be sent to a source of the data instead of migrating the data to the data transformation block. In addition, the distributed processing module <b>72</b> determines whether the logic associated with the block should be distributed across the network <b>20</b>. Recall that the data transformation block includes a set of discrete logic visual icons, each of which has a corresponding executable code segment. The different executable code segments may be stored in memory <b>40</b> of computer <b>22</b>A or they may be stored in different computers <b>22</b>B-<b>22</b>N in the network <b>20</b>. The distributed processing module <b>72</b> is used to assess whether the individual executable code segments should be processed at their local computer or if the code segments should be migrated to a central computer for execution. Where appropriate, the distributed processing module <b>72</b> exploits parallel processing across the network <b>20</b>.</p>
<p id="p-0042" num="0041">The execution module <b>70</b> also includes a functional language processor <b>74</b>. As discussed below, the invention is implemented using a functional computer language. A functional computer language is a computer language in which each term in the language is treated as a function. Functional computer languages have been widely used in academia, but the incorporation of a functional language into an icon-based programming methodology is believed to be novel. The invention provides a customized functional computer language optimized for business logic computations. As discussed below, the functional language utilized in accordance with the invention has a very simple syntax, no global variables, an algebraic type system, all of which facilitate a massive reuse of logic.</p>
<p id="p-0043" num="0042">The functional language processor <b>74</b> supports the interpretation and execution of the functional computer language. Known functional language interpretation techniques may be used in accordance with the invention. For example, a graph reducing methodology may be used to process the functional language source code.</p>
<p id="p-0044" num="0043">The execution module <b>70</b> also includes an intermediate value module <b>76</b>. The intermediate value module <b>76</b> supplies intermediate or incomplete results during the processing of a data transformation block. The manner in which the functional language is processed allows the intermediate results to be supplied. For example, if a graph reducing methodology is used to process the functional language source code, intermediate results are available as different branches of the graph are processed. Thus, the user receives a streaming set of information prior to obtaining the final results from the data transformation block.</p>
<p id="p-0045" num="0044"><figref idref="DRAWINGS">FIG. 1</figref> also illustrates a presentation module <b>80</b>. The presentation module <b>80</b> uses standard techniques to present the transformed data from the data transformation block. The transformed data may be presented on one of the output devices of the input/output devices <b>34</b>.</p>
<p id="p-0046" num="0045">The modules <b>50</b>-<b>80</b> within memory <b>40</b> facilitate the processing of the present invention. The modules of <figref idref="DRAWINGS">FIG. 1</figref> have been isolated in an arbitrary manner. The individual modules may be formed as a single module or as a different combination of modules. The modules of <figref idref="DRAWINGS">FIG. 1</figref> are included for the purpose of highlighting the different functions performed in accordance with the invention. These functions may be implemented in any number of ways in view of the disclosure provided herein.</p>
<p id="p-0047" num="0046"><figref idref="DRAWINGS">FIG. 2</figref> illustrates processing steps performed in accordance with an embodiment of the invention. The process <b>90</b> of <figref idref="DRAWINGS">FIG. 2</figref> includes a first step of selecting a first discrete logic visual icon (block <b>100</b>). The discrete logic visual icon <b>52</b> may be stored in memory <b>40</b> of computer <b>22</b>. An additional discrete logic visual icon is then selected (block <b>102</b>). This icon may also be selected from logic repository <b>50</b>.</p>
<p id="p-0048" num="0047">Once the two objects have been selected, a decision is made to determine whether they represent a valid combination (block <b>104</b>). The combination control module <b>60</b> of the logic manipulation module <b>56</b> may be used to implement this operation. If the combination is not valid, an error indication is provided (block <b>106</b>) and control can return to block <b>102</b>. By way of example, the error indication may be in the form of not allowing the components to snap together.</p>
<p id="p-0049" num="0048">If the combination is valid, the system waits for more logic to be selected. If more logic is selected, the processing returns to block <b>102</b>. If more logic is not selected, then a data transformation block is formed (block <b>110</b>). The data transformation block may then be tested (block <b>112</b>). The test module <b>68</b> may be used for this operation.</p>
<p id="p-0050" num="0049">If an error occurs, then an error message is produced (block <b>106</b>); otherwise, data can be applied to the data transformation block (block <b>116</b>). The execution module <b>70</b> may be used to coordinate this operation. The resultant transformed data may then be presented on an output device of the input/output devices <b>34</b> (block <b>118</b>). The presentation module <b>80</b> may be used for this operation. Finally, the data transformation block may be stored (block <b>120</b>). In particular, the data transformation block may be stored in logic repository <b>50</b>. This allows the data transformation block to be used by others for subsequent data transformations. In addition, by storing the data transformation block in the logic repository <b>50</b>, it can be used to form new data transformation blocks.</p>
<p id="p-0051" num="0050">The general configuration and operations associated with an embodiment of the invention have now been described. Attention presently turns to different examples of implementations of the invention so that the nature of the invention can be more fully appreciated.</p>
<p id="p-0052" num="0051">The discrete logic visual icons of the invention are also referred to herein as gems. The data transformation blocks are also referred to at times as being gems. A gem is simply a function. A function is a mathematical concept that takes one set and ‘maps’ it onto another set. Simply put, this means that a gem takes an input and produces an output. Functions are not new in computing. However, in the gem framework of the invention everything is a function, including the data. This keeps everything extremely simple and well ordered.</p>
<p id="p-0053" num="0052">The Gem framework is predicated upon a functional programming language utilized in accordance with the invention. A functional programming language is a computer language in which everything is expressed as a function. Functional programming languages have been used in the prior art. However, the present invention relies upon a functional programming language tailored to support the iconic programming environment of the invention. The details of the functional programming language of the invention are provided below.</p>
<p id="p-0054" num="0053">A gem of the invention is a named function that can be applied to data, can define the content of a field, or can be executed to perform some transformation to the data. To do this simply involves picking the gem from a browser or using a wizard to find and apply a gem for the correct function. At design-time, the true nature of a gem is exposed in order to permit editing and abstraction.</p>
<p id="p-0055" num="0054"><figref idref="DRAWINGS">FIG. 3</figref> illustrates an example of a gem <b>300</b>. The gem <b>300</b> has two input ports <b>302</b> and <b>304</b> and an output port <b>306</b>. This gem is called “equals”; it takes two inputs and produces a boolean result (i.e., ‘true’ or ‘false’) indicating whether the two inputs are equal.</p>
<p id="p-0056" num="0055"><figref idref="DRAWINGS">FIG. 4</figref> illustrates an example of another gem <b>400</b>. The gem <b>400</b> has two input ports <b>402</b> and <b>404</b> and an output port <b>406</b>. The output port <b>406</b> has a different configuration than the output port of <figref idref="DRAWINGS">FIG. 3</figref>. In particular, the output port of <figref idref="DRAWINGS">FIG. 4</figref> is thicker to indicate that the output value is of a different type. Color-coding or any other type of schema may be used to signify this difference in output types.</p>
<p id="p-0057" num="0056">Type is an input concept associated with the invention because it is used to determine if two gems are compatible and can be meaningfully connected. The configuration of a port (e.g., its size or color) is a secondary indicator of type. To get the specific type information, one can look up the gem's reference description (which includes notes about its action, plus a description of types), or one can roll-over the connectors with the mouse, which preferably results in the type description being displayed in a window adjacent to the connector. In <figref idref="DRAWINGS">FIG. 3</figref> the output <b>306</b> is a boolean value type, while the output <b>406</b> of <figref idref="DRAWINGS">FIG. 4</figref> is a double precision, floating point number.</p>
<p id="p-0058" num="0057">The problem with this ‘monolithic typing’ approach is that there has to be a gem with a particular type configuration that performs the function required. This leads to an explosion in the number of gems that have to be provided in order to cope with the large variety of types that are present in real systems. To avoid this problem, the type system of the invention supports what is known as polymorphism (meaning ‘exhibiting the property of having many shapes’). This means that the techniques of the invention support gems with types that are compatible with a set of other types. As a result, a single gem can be used to process different data types.</p>
<p id="p-0059" num="0058"><figref idref="DRAWINGS">FIG. 5</figref> illustrates an example of a polymorphic gem. <figref idref="DRAWINGS">FIG. 5</figref> illustrates a gem <b>500</b> entitled “head”. The gem <b>500</b> has an input port <b>502</b> and an output port <b>504</b>. The function being shown (head) returns the first item in a list. The input is the list, and a type expression with square brackets denotes a list of something, where the ‘something’ is shown inside the brackets. In this case, that ‘something’ is an ‘a’. The head gem <b>500</b> takes a list of ‘anythings’ and returns an ‘anything’. The fact that the same letter is used as the type variable indicates that whatever ‘a’ becomes will be consistent in both the input and output. In other words, if one uses head on a list of double precision numbers (denoted: ‘[Double]’), one would expect the return to be ‘Double’. The feature of using type variables in the type expressions is referred to herein as parametric typing.</p>
<p id="p-0060" num="0059">The act of creating a new gem or a data transformation block from a collection of other gems is referred to as ‘composition’. As demonstrated below, a gem is composed by dragging the output of a ‘source gem’ to an input on a ‘destination’ gem. Actually, the concepts of source and destination are a little false, because what you end up doing is creating a new function whose meaning is a perfect combination of the two gems (i.e., there's no ‘first’ and ‘second’ really).</p>
<p id="p-0061" num="0060">The following example composes a function or data transformation block that adds up the first n elements of a list. To do this, one first needs a function to extract the first n elements. In this example, this function exists in the standard library of gems, and is called take. The take gem or discrete logic visual icon is shown in <figref idref="DRAWINGS">FIG. 6</figref> with textually marked input and output ports. In particular, <figref idref="DRAWINGS">FIG. 6</figref> illustrates a take gem <b>600</b> with a double precision, floating point number input <b>602</b> and a list input <b>604</b>. The gem <b>600</b> produces a list output at port <b>606</b>. Thus, ‘take’ receives a list of ‘anythings’ and a double precision number (the number of elements to take from the list). The gem then provides a list of anythings (the list of the first n elements).</p>
<p id="p-0062" num="0061">In order to add these elements, we need another gem to sum the values in the list. A sum gem can be used for this purpose. <figref idref="DRAWINGS">FIG. 7</figref> is a graphical representation of the sum gem. In particular, <figref idref="DRAWINGS">FIG. 7</figref> illustrates a gem <b>700</b> with a double precision input <b>702</b> and a double precision output <b>704</b>. Thus, the function takes a list of double precision numbers and returns a double precision total.</p>
<p id="p-0063" num="0062">In this example, the goal was to compose a function that will take the first elements of a list and then sum them. Therefore, one must attach the output of take into the input of sum. Notice that we can tell this is possible in two ways.</p>
<p id="p-0064" num="0063">First, the input type of sum is a more specific type of the output of take. The type [Double] (a list of Doubles) is clearly a more specific version of [a] (the general list of ‘anythings’). So one can infer that the gems can be connected. One can say that the types are ‘unifyable’.</p>
<p id="p-0065" num="0064">Second, one can actually establish the connection in the graphical environment to establish its efficacy. This is achieved by dragging a link from the output of take to the input of sum, as shown in <figref idref="DRAWINGS">FIG. 8</figref>. <figref idref="DRAWINGS">FIG. 8</figref> illustrates the take gem <b>600</b> connected to the sum gem <b>700</b> via link <b>800</b>. Under the control of the combination control module <b>60</b>, as the mouse nears the input, the cursor preferably change to one of two icons, to indicate either that the connection is possible (the types are compatible), or that this connection would be illegal. In a preferred embodiment, the combination control module prevents any type of illegal connection between two gems. In this case, the types are compatible, and when the mouse button is released, the link <b>800</b> changes form (e.g., thickness or color) to indicate a valid connection.</p>
<p id="p-0066" num="0065">The change in form indicates that the two gems are now bound. In fact, although the distinction between the two gems is preserved, we have in fact created a new function object and in effect there is no longer a concept of an output on take and an input on sum. Therefore, there are no types associated with these any more.</p>
<p id="p-0067" num="0066">There is one more interesting point to note about the resulting graphical representation of the combination we just made. The second input to take <b>604</b> preferably changes form (e.g., shape or color) to indicate that its type has changed. In fact it has changed to the same form as the original input of sum. The combination governing module <b>60</b> recognizes that take is required to produce a list of double precision numbers as output (by being bound to sum which has this as an input requirement). This implies that it in turn must collect a list of double precision numbers (instead of any old list) in order to satisfy this requirement. It therefore advertises this fact with a change in its input type.</p>
<p id="p-0068" num="0067">The foregoing discussion introduced gems (discrete logic visual icons) and combinations of gems (data transformation blocks). The following discussion more particularly describes the environment in which to select and combine gems.</p>
<p id="p-0069" num="0068">As previously indicated, the logic manipulation module <b>56</b> provides a design-time environment for creating data transformation blocks <b>54</b> from an original set of visual icons <b>52</b>. <figref idref="DRAWINGS">FIG. 9</figref> illustrates graphical user interface <b>900</b> formed by the GUI module <b>58</b>. The GUI <b>900</b> has a browser section <b>902</b> and a tabletop section <b>904</b>. The browser section <b>902</b> displays gems stored in the logic repository <b>50</b>. The tabletop section <b>904</b> is the working area where gems are combined. <figref idref="DRAWINGS">FIG. 9</figref> illustrates an add gem <b>906</b> and a divide gem <b>908</b>. The figure also illustrates a port flag <b>910</b> indicating that the output of the divide gem <b>908</b> is a double precision, floating point number. <figref idref="DRAWINGS">FIG. 9</figref> also illustrates a result target <b>912</b>, which constitutes the output port of the combined logic. The GUI <b>900</b> may also include execution controls <b>914</b> and a special gems pull-down window <b>916</b>.</p>
<p id="p-0070" num="0069">The gems are stored in one or more repositories. Preferably, they are organized categorically. Access to groups of gems can be controlled such that only selected individuals can modify them. Gems are conceptually stored in Vaults, which are ultimately some form of physical storage mechanism (like a file or database). Vaults may well have visibility and access restricted so that only certain people, groups or roles have access to them.</p>
<p id="p-0071" num="0070">Inside a Vault are Drawers. Drawers are an organizing principle that categorizes gems based on overall function. For instance, there may be a drawer for the very basic gems and data types (which must always be visible) and other drawers for list manipulating gems, data access gems, and business modeling gems.</p>
<p id="p-0072" num="0071">When libraries of gems are created to produce custom analyses for groups of people within the enterprise (like financial modeling for the Finance Department), these are placed into a new drawer. The new gems may be published to the target audience using enterprise security to lock the availability of the drawer (and perhaps the vault) for exclusive access to the target consumers. Drawers can also be used to separate ‘work in progress’ gems from ‘production’ gems.</p>
<p id="p-0073" num="0072">A new gem is defined on the table top <b>904</b>. Gems are combined to form a new function. Any input ports left unbound are treated as inputs to the newly created Gem. Once composition is complete, the new Gem is ‘defined’ by connecting the final output to the result target <b>912</b>.</p>
<p id="p-0074" num="0073">To compose gems together, a connection line from the output of one gem is dragged to an input of another gem (or to the target gem). <figref idref="DRAWINGS">FIG. 10</figref> illustrates gems connected by this process. In this example, the add gem <b>1010</b> and divide gem <b>1012</b> from the repository are composed together to form a new function. The output of this function is connected to a result target <b>912</b> that identifies this composition as being a new Gem. Notice that the subtract Gem <b>1014</b> plays no part in the add-divide composition and is therefore not part of the gem under construction. This iconic form of programming is very simple. Therefore, the invention allows large numbers of individuals in an organization to generate logical analyses of data.</p>
<p id="p-0075" num="0074">When the output of the composition is attached to the result target <b>912</b> the logic manipulation module <b>56</b> identifies that the new gem is available for testing and the ‘play’ button <b>1016</b> is illuminated on the toolbar. At this point, the user may test the gem or name the gem and save it to a vault.</p>
<p id="p-0076" num="0075">As shown in <figref idref="DRAWINGS">FIG. 11</figref>, the logic manipulation module <b>56</b> preferably provides a feature that facilitates the gem construction process. In particular, placing a mouse pointer over a gem connector (input or output) preferably causes a window to be displayed. The displayed window lists gems that can be legally connected to the specified connector. For example, the window can suggest connections to other gems already on the table top. The window can also list gems that can be brought out onto the table top.</p>
<p id="p-0077" num="0076"><figref idref="DRAWINGS">FIG. 11</figref> shows that the user has let the mouse pointer hover over the output of the first (addInt) gem <b>1100</b>. The program responds by showing that legal connections can be made to both the inputs of the second addInt gem <b>1102</b>, or to a list of gems not yet on the table top. The list of gems is shown in window <b>1104</b>. At this point, the user can click on a gem in the pop-up list <b>1104</b> to load a gem onto the table top and automatically connect it to the output of addInt gem <b>100</b>. Alternately, the user can click on one of the indicated inputs to the second addInt gem <b>102</b> to form a connection to that gem. If the user moves the mouse away from the pop-up list <b>1104</b>, the list is preferably closed in order to provide better visibility.</p>
<p id="p-0078" num="0077">The combination control module <b>60</b> observes the type rules of the invention and suggests valid connections based upon compatible types. An example of this is shown in <figref idref="DRAWINGS">FIG. 12</figref>. <figref idref="DRAWINGS">FIG. 12</figref> illustrates the gems on the table top that can be connected to the output of the sum gem <b>1200</b>. The sum gem's output is actually typed as a ‘number’ (typeclass Num) which includes both integers (type Int) and floating point numbers (type Double). In this example, the combination control module <b>60</b> determines that both the addInt gem <b>1202</b> (taking Ints) and the log gem (taking a Double) can both be legally connected to the output of sum gem <b>1200</b>. The form of the drawn line (e.g., its color or shape) can be presented to indicate that the connections are compatible, but not the same type.</p>
<p id="p-0079" num="0078">Once a new gem has been defined (connected to a result target), the new gem is generally available for testing. Testing can be initiated by activating the ‘play’ button <b>1016</b> on the control panel. The test module <b>68</b> is then invoked and solicits the user for inputs to be used during testing. As shown in <figref idref="DRAWINGS">FIG. 13</figref>, three value editors <b>1300</b>A, <b>1300</b>B, and <b>1300</b>C appear to collect values of the unbound inputs of the new gem. In each case, the required type of the input values is a double precision floating point number. To indicate this, the entry panels preferably display an icon <b>1302</b> that hints at the appropriate type.</p>
<p id="p-0080" num="0079">The user can supply values in each panel for the respective argument. In the case of multiple values, each value may be separated with a comma. Alternately, additional windows may be presented to enter the multiple values. All input values are validated to ensure they are legal for the required type. Once the right values have been entered, the user can run or step the gem execution by using the ‘play’ button <b>1016</b>.</p>
<p id="p-0081" num="0080">Once argument values have been assigned the gem is executed to produce a result. The result value may be of a simple type (like a single numeric value), or it could be a data structure, such as a list. In each case, the result can be explored in the result window, which may be in the form of a pop-up window <b>1304</b>. If the result is of a compound type, then the result can be explored by clicking on the ellipsis button <b>1306</b>. Doing so expands the result to show more internal structure, for example a list value will expand into a scrollable list control showing all the list members, exactly as per the value entry example just examined.</p>
<p id="p-0082" num="0081">Constant input values are defined using a constant gem, sometimes referred to herein as a “blue stone”. A constant gem has a specific type and value. The constant gem can be connected to a compatible input of a gem to bind this value to the gem.</p>
<p id="p-0083" num="0082">Constant gems are used to ‘de-generalize’ a gem, fixing it to deal with a reduced (or specific) set of cases. For example, a filter gem can be fixed to only look for values above 1000, rather than values above any input. Attaching a constant gem to an input removes that input from the set of inputs that will be exposed by the gem under construction when it is saved.</p>
<p id="p-0084" num="0083">Constant gems use the value entry panels to collect the constant values of the particular type that is asserted by the stone. For example, if the constant gem is set up to be a constant list of floating point numbers, then the list entry panel is used for elements of ‘Double’ type.</p>
<p id="p-0085" num="0084">The constant gem contains a value entry panel, just like the panels that pop up when a value is required to test a gem. All constant gems really achieve is to make a value into a part of the gem definition, rather than leaving the gem to collect the value when executed.</p>
<p id="p-0086" num="0085">Initially a constant gem does not know what type of value it is supposed to be representing. <figref idref="DRAWINGS">FIG. 14</figref> illustrates a selected constant gem <b>1400</b>. The type icon and value field showing a question mark indicates uncertainty with respect to type value. Therefore, a type is selected using pull down window <b>1402</b>.</p>
<p id="p-0087" num="0086">Another form of specialized gem used in accordance with an embodiment of the invention is referred to as a code gem or a green stone. Code gems are used to inject a specific expression into the gem under construction. More particularly, code gems are code editors for the analytic language that underlies features of the invention. A code gem can therefore be made to represent any user-defined function, including complex functions involving local variables and calls to external functions (in the visible set of Vaults).</p>
<p id="p-0088" num="0087">The code gem allows one to access the benefits of an underlying language, while still being protected to a large extent from having to understand every nuance of the language. As shown below, in most uses the code gem feels like it is a place to enter simple expressions. However, much more is transpiring. The meaning of the code is dynamically inferred to ensure type correctness and guarantee that the resulting gem is usable and presents the right connectors to the attached gems.</p>
<p id="p-0089" num="0088">Green stones are functions. To visually represent their status as functions, in one embodiment, they appear as triangular gems on the table top. By way of example, we will consider a customized filter gem to find all list entries with a value greater than 1000.</p>
<p id="p-0090" num="0089">Initially, the filter gem is selected from the repository. The output of the filter gem is attached to the result target. <figref idref="DRAWINGS">FIG. 15</figref> illustrates a filter gem <b>1500</b> connected to result target <b>912</b>.</p>
<p id="p-0091" num="0090">Pressing the code button <b>1502</b> on the toolbar adds a code gem. Technically speaking, we will be creating a lambda expression, which means an anonymous function. Notice that the code gem <b>1502</b> of <figref idref="DRAWINGS">FIG. 15</figref> appears broken. The cracks on its surface are an indication that the gem requires some attention to be useable.</p>
<p id="p-0092" num="0091">By default, when selecting a code gem, an editor <b>1600</b> is presented, as shown in <figref idref="DRAWINGS">FIG. 16</figref>. The editor initially associates itself with the code gem <b>1502</b> by name and by proximity.</p>
<p id="p-0093" num="0092">In this example, the function to be described is a test for a value (which will be our list element) being greater than 1000. This code can be expressed as:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>element&gt;1000<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0094" num="0093">This code is typed into the editor <b>1600</b>. The entered code is checked for syntactical correctness according to a predetermined language specification, as discussed below.</p>
<p id="p-0095" num="0094"><figref idref="DRAWINGS">FIG. 16</figref> illustrates that various fields appear or change on the editor <b>1600</b> to indicate the meaning of the typed expression. First, an item <b>1602</b> appears in a panel to the left of the typing area. This indicates that the name “element” has been inferred to be an argument. It also indicates that the type of this argument is inferred as a ‘Num’ (a number). Num is actually a typeclass and represents either an integer (Int) or a floating point value (Double).</p>
<p id="p-0096" num="0095">At the bottom of the editor <b>1600</b>, is the text “-&gt;Bool”, indicated by marker <b>1604</b>. This indicates that the output type of the function has been inferred to be a boolean type. Along with the argument, one can observe that a function has been produced to take a Num and produce a Bool. The type expression of this would be:((Num a=&gt;a)-&gt;Bool). This is perfectly compatible with the required type (a-&gt;Bool); thus, a required predicate function has been created.</p>
<p id="p-0097" num="0096">Observe that the system attempts to be as general as possible. In the absence of any information to the contrary, the functional language processor <b>74</b> of the execution module <b>70</b> infers that the most general type that the code will deal with is a number. If we were to force a more specific interpretation by changing the 1000 to 1000.0 (making the number into a definite floating point Double), we would see the type of element change to Double.</p>
<p id="p-0098" num="0097">Syntax highlighting of the expression text itself gives further visual feedback about how the expression has been interpreted. The fact that the expression has been interpreted in a satisfactory manner is further evidenced by the icon <b>1502</b>, which no longer has a cracked configuration.</p>
<p id="p-0099" num="0098">Suppose we wish to construct a gem which will filter the content of a list of numeric values such that a resultant list will contain only those values in the original list which are greater than 1000. In order to do this, we can call upon the services of the filter gem in the standard library, which will take a list of any type and filter the elements in that list according to a supplied predicate function. A predicate function produces a boolean value (true or false) based on an input. In this case, a single element is examined in the original list and is ascribed a value of ‘true’ if this element should be present in the resultant list or ‘false’ otherwise.</p>
<p id="p-0100" num="0099">The predicate function we want is very simple (just a test for being greater than 1000). A standard library greaterThan gem can be selected. The greaterThan gem takes two values belonging to the class ‘Orderable’ and produces a boolean value.</p>
<p id="p-0101" num="0100">One can produce a function that will always test for a value being greater than 1000 by attaching a constant value of 1000 to the second argument of greaterThan. <figref idref="DRAWINGS">FIG. 17</figref> shows a greaterThan gem <b>1700</b> attached to a constant gem <b>1702</b>. The constant gem <b>1702</b> is configured as a floating point number with a value of ‘1000’.</p>
<p id="p-0102" num="0101"><figref idref="DRAWINGS">FIG. 17</figref> also illustrates a filter gem <b>1704</b>. The output of our ‘greaterThan 1000’ composite function is a boolean value, but the first input to the filter gem <b>1704</b> takes a value and returns a boolean. This implies that we can't take the output of this predicate composite and simply connect it into the filter gem <b>1704</b>. Actually, this makes perfect sense too, what we actually want is for the whole predicate function to be internally provided with values from the elements of the input list to filter. So, actually, we don't want to externally provide the argument to compare to 1000 at all.</p>
<p id="p-0103" num="0102">The way to achieve this is by ‘input burning’, which is performed by the burn module <b>62</b>. By burning the first argument to the greaterThan gem <b>1700</b> one indicates that the gem does not have a single input value. The burning operation of the invention indicates that more than one value will be provided and that this value should be collected when the function is applied to data. We want to create a functional result from the combination of the greaterThan gem <b>1700</b> and the constant 1000 supplied in the constant gem <b>1702</b>. The burn operation may be performed by double clicking on the input to be burned or by some other technique. Preferably, this results in some form of visual alteration in the connection (e.g., the change in size, shape or color of a line or a visual icon, such as a fire).</p>
<p id="p-0104" num="0103">Once this operation is performed, the output type of the combination is changed to a functional result (a function that takes a floating point number and returns a boolean). This is what is needed for the predicate function for filter. Because this is not a type match for the first argument of the filter function, the ‘greaterThan 1000’ combination can now be connected to the first argument of filter.</p>
<p id="p-0105" num="0104">In many cases the mechanics of manually burning the inputs are unnecessary. Because complete and correct type information is always known for gem components, there are many occasions where burning is required, but in many instances the correct input burn combination can be unambiguously inferred by the burn module <b>62</b>. Thus, the burn module <b>62</b> automatically links selected outputs and inputs of different gems when certain predetermined type conditions are satisfied.</p>
<p id="p-0106" num="0105">In cases where the software is not able to unambiguously establish a connection in this way through burning, it will indicate that a connection is still possible if the user can determine the burn configuration needed prior to connecting. Preferably, the burn module <b>62</b> provides a popup window to identify gems that can be connected to a specific input port.</p>
<p id="p-0107" num="0106">The foregoing technical description identifies a number of important features of the invention. First, the invention provides an icon based programming mechanism. Since the icons obviate the need for writing executable code, a larger group of individuals are in a position to define data processing tasks. The data transformation blocks that are formed during this process may be stored and reused. In addition, these data transformation blocks may be combined with other data transformation blocks and icons to form additional logic operations. These icons or data transformation blocks are easily shared throughout an organization, thereby facilitating consistent data processing operations throughout the organization.</p>
<p id="p-0108" num="0107">Features, such as the combination control module <b>60</b>, the burn module <b>62</b>, and the entry panel module <b>66</b> further simplify the programming process. In particular, the combination control module <b>60</b> insures that legal operations are being performed at run time, not at a subsequent execution time. Thus, the invention creates a convergence between the development and execution environments where the programmer is constantly assured that valid operations are being proposed. The burn module <b>62</b> automatically establishes connections when possible, further simplifying the programmer's task. The value entry panels provide an intuitive interface for delivering data to the data transformation block. The invention is also advantageous in that it facilitates parallel processing in a networked environment.</p>
<p id="p-0109" num="0108">The benefits of the invention are largely predicated on the underlying functional language source code associated with each icon or data transformation block. Therefore, attention turns to a more complete description of this functional language. The following description of the functional language will more fully illuminate the benefits of the invention.</p>
<p id="p-0110" num="0109">Underpinning the gems of the invention is a functional computer language and a special runtime for code written in this language. During execution of the functional language expressions are decomposed automatically and can be passed to other runtime environments in order to run parts of a program in parallel. This has a huge potential upside in terms of scalability, but there's also the less obvious benefit of being able to move code to the data, instead of always bringing data to the code. This feature can be called ‘automatic pushdown’ calculating.</p>
<p id="p-0111" num="0110">When a gem is to be executed, it pre-loads any argument data into the runtime and then asks the runtime to invoke a named gem by passing it an address referring to the gem. The runtime may not have the gem loaded, so it may have to fetch the gem into memory.</p>
<p id="p-0112" num="0111">Once the gem is loaded, the runtime begins executing it, and this may require loading other dependent gems in the same way. The runtime may choose to split the processing of the gems it needs to run by passing some of the processing to other agents. This all happens completely transparently from the point of view of the component requesting the original gem execution. The distributed processing module <b>72</b> coordinates this operation.</p>
<p id="p-0113" num="0112">Eventually, a point is reached where the gem is fully evaluated (this is usually when an actual result value becomes available). At this point, the calling component is informed that the processing is complete and can collect the result data.</p>
<p id="p-0114" num="0113">Type descriptions are fairly straightforward to decode. They describe a type in a concise textual form. For functions, type descriptions deal with describing the ‘type contract’ of the function, and this can be broken down into types for each input and output. First consider the types of some simple values:</p>
<p id="p-0115" num="0114">
<tables id="TABLE-US-00001" num="00001">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="63pt" align="left"/>
<colspec colname="2" colwidth="140pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="2" align="center" rowsep="1"/>
</row>
<row>
<entry/>
<entry>Type Description</entry>
<entry>Meaning</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="2" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>a</entry>
<entry>A type variable, meaning ‘any type’</entry>
</row>
<row>
<entry/>
<entry>Double</entry>
<entry>A double precision floating point number</entry>
</row>
<row>
<entry/>
<entry>Char</entry>
<entry>A character</entry>
</row>
<row>
<entry/>
<entry>Bool</entry>
<entry>A boolean value</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0116" num="0115">These types are referred to as ‘scalar’ types since they characterize a single discrete value. Type variables are very powerful as they allow one to describe whole groups of types where one can assume that all the type variables with the same letter can be replaced with any type description (but the same one for a given letter).</p>
<p id="p-0117" num="0116">Other types that may be used in accordance with the invention include abstract types:</p>
<p id="p-0118" num="0117">
<tables id="TABLE-US-00002" num="00002">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="63pt" align="left"/>
<colspec colname="2" colwidth="154pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
<row>
<entry>Type Description</entry>
<entry>Meaning</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>[a]</entry>
<entry>A list of values. Every value is of type ‘a’</entry>
</row>
<row>
<entry>(a, b)</entry>
<entry>A pair of values. The first value is of type ‘a’, the</entry>
</row>
<row>
<entry/>
<entry>second value is of type ‘b’</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0119" num="0118">These elements will often have their type variables set to specific types. For instance, a list of characters (a string) will be [Char], and a pair of floating point values would be (Double, Double).</p>
<p id="p-0120" num="0119">Types can include type class constraints. A type class is a type subset for which all members are types and conform to having certain functions defined over them. For example, the Num type class has members Int and Double and has all the simple arithmetic functions defined. Thus, addition, subtraction and other arithmetic can be performed on both Ints and Doubles. By using the Num typeclass we can provide a single definition of add, and implement versions of it which work on Ints and Doubles to adhere to the ‘contract’ of membership of the Num typeclass for both Int and Double. Thus, a single data transformation block can be used with multiple data types. This feature of the invention significantly reduces the overall number of icons that need to be stored in the repository.</p>
<p id="p-0121" num="0120">Here are some examples of type class constrained type descriptions:</p>
<p id="p-0122" num="0121">
<tables id="TABLE-US-00003" num="00003">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="56pt" align="left"/>
<colspec colname="2" colwidth="161pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
<row>
<entry>Type Description</entry>
<entry>Meaning</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>Num a =&gt; a</entry>
<entry>A value which conforms to being a ‘Num’ (number).</entry>
</row>
<row>
<entry/>
<entry>The member types of Num are Int and Double,</entry>
</row>
<row>
<entry/>
<entry>meaning that ‘a’ can either be an Int or a Double.</entry>
</row>
<row>
<entry>Ord a =&gt; a</entry>
<entry>All the ‘a’ type must conform to being an ordinal</entry>
</row>
<row>
<entry/>
<entry>type, meaning one that supports ordering functions.</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0123" num="0122">User defined types (and types for which there are no special syntactic treatments) are described in type descriptions by their type names. Here are some examples:</p>
<p id="p-0124" num="0123">
<tables id="TABLE-US-00004" num="00004">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="63pt" align="left"/>
<colspec colname="2" colwidth="154pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
<row>
<entry>Type Description</entry>
<entry>Meaning</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>Tree a</entry>
<entry>A tree type (from the standard Prelude). The tree</entry>
</row>
<row>
<entry/>
<entry>will hold values of type ‘a’</entry>
</row>
<row>
<entry>Ordering</entry>
<entry>An enumeration of comparators</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0125" num="0124">Finally, functions are described by their type descriptions enclosed in parentheses. Here are some examples:</p>
<p id="p-0126" num="0125">
<tables id="TABLE-US-00005" num="00005">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="77pt" align="left"/>
<colspec colname="2" colwidth="140pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
<row>
<entry>Type Description</entry>
<entry>Meaning</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>(Int −&gt; Int −&gt; Int)</entry>
<entry>A function which takes an integer, then another</entry>
</row>
<row>
<entry/>
<entry>integer and produces an integer</entry>
</row>
<row>
<entry>([Char] −&gt; Int −&gt; Char)</entry>
<entry>A function which takes a list of characters, then</entry>
</row>
<row>
<entry/>
<entry>an integer and produces a character</entry>
</row>
<row>
<entry>(Ord a =&gt; a −&gt; a −&gt; a)</entry>
<entry>A function which takes two ordinal values and</entry>
</row>
<row>
<entry/>
<entry>returns an ordinal value</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0127" num="0126">The foregoing can constitute a full list of ingredients for type expressions. Now let us turn to some examples.</p>
<p id="p-0128" num="0127">
<tables id="TABLE-US-00006" num="00006">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="77pt" align="left"/>
<colspec colname="2" colwidth="140pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
<row>
<entry>Type Description</entry>
<entry>Meaning</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>((a −&gt; Bool) −&gt; [a] −&gt;</entry>
<entry>A function which takes another function (which</entry>
</row>
<row>
<entry>[a])</entry>
<entry>takes any type and returns a boolean) and a list</entry>
</row>
<row>
<entry/>
<entry>of any type, and which returns a list of any</entry>
</row>
<row>
<entry/>
<entry>type. All the ‘any types’ must be the</entry>
</row>
<row>
<entry/>
<entry>same when this type is used.</entry>
</row>
<row>
<entry>([Char] −&gt; Int −&gt; Char)</entry>
<entry>A function which takes a list of characters,</entry>
</row>
<row>
<entry/>
<entry>then an integer and produces a character</entry>
</row>
<row>
<entry>((a −&gt; b) −&gt; [a] −&gt; [b])</entry>
<entry>A function which takes another function (which</entry>
</row>
<row>
<entry/>
<entry>takes one ‘any type’ and returns another ‘any</entry>
</row>
<row>
<entry/>
<entry>type’) and a list of any type, and which returns</entry>
</row>
<row>
<entry/>
<entry>a list of any type. Notice that in this case,</entry>
</row>
<row>
<entry/>
<entry>whatever type the first argument of the</entry>
</row>
<row>
<entry/>
<entry>provided function is must be the same type</entry>
</row>
<row>
<entry/>
<entry>as the elements of the list in the second</entry>
</row>
<row>
<entry/>
<entry>argument. Also, whatever type the second</entry>
</row>
<row>
<entry/>
<entry>argument of the provided function is must be</entry>
</row>
<row>
<entry/>
<entry>the same type as the elements of the returned</entry>
</row>
<row>
<entry/>
<entry>list.</entry>
</row>
<row>
<entry>((Ord a, Eq b) =&gt;</entry>
<entry>A function which takes a pair of values, being a</entry>
</row>
<row>
<entry>(a, b) −&gt; [a] −&gt; b))</entry>
<entry>type which is a member of the typeclass Ord</entry>
</row>
<row>
<entry/>
<entry>and a type which is a member of the typeclass</entry>
</row>
<row>
<entry/>
<entry>Eq. The function also takes a list of values of</entry>
</row>
<row>
<entry/>
<entry>the first type the same as for the first value</entry>
</row>
<row>
<entry/>
<entry>in the pair. The function returns a value typed</entry>
</row>
<row>
<entry/>
<entry>the same as the second value in the pair.</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0129" num="0128">The design emphasis of the functional language is on simplicity and a very close affinity with the nature of the runtime environment. Attention is initially directed toward distinctive aspects of the language. Subsequently, a more formal description of the language is provided.</p>
<p id="p-0130" num="0129">The functional language preferably has very few keywords and constructs, and very little specialized syntax. The functional language emphasizes the definition of the problem rather than the list of steps the computer must perform to solve the problem. A language whose code resembles a formal declaration of a problem is known as a declarative language. Such languages are usually much more succinct, and being much closer to a formal definition, they provide greater confidence in the correctness of the resulting program.</p>
<p id="p-0131" num="0130">The following syntactic elements characterize the functional language of the invention. First, the language uses functional language and definitions. That is, a program is essentially a collection of function definitions.</p>
<p id="p-0132" num="0131">The functional language has data constructors. Data structures are formed with data constructors. Data constructors collect a series of values and build them into an abstract data structure.</p>
<p id="p-0133" num="0132">The functional language also has data declarations. Data declarations are used to extend data types on which functions will operate. Each time a new data type is described, the data constructors necessary to build the data structure are also defined.</p>
<p id="p-0134" num="0133">The functional language also provides a module system to organize groups of related declarations. All declarations exist in a module and their names are qualified by the module name to refer to them from outside their module.</p>
<p id="p-0135" num="0134">Finally, the functional language of the invention includes type class definitions. Type classes are sets of types that have a contract defining what functions are guaranteed to operate over all member types of the set.</p>
<p id="p-0136" num="0135">Having introduced these characteristics of the language of the invention, attention now turns to a more detailed discussion of each of these characteristics. Initially, attention is directed toward function declarations and definitions.</p>
<p id="p-0137" num="0136">Mathematically, a function is something that maps one set onto another set. The following is an example:
<ul id="ul0001" list-style="none">
    <li id="ul0001-0001" num="0000">
    <ul id="ul0002" list-style="none">
        <li id="ul0002-0001" num="0137">divide a b=a/b;</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0138" num="0138">This is a function to divide two numbers together. The function definition begins with the name of the function. This must begin with a lower case letter, and can then be composed of letters (upper or lowercase), numbers and the underscore character (_).</p>
<p id="p-0139" num="0139">After the function name comes the argument list. This is a list of argument names that will be used within the body to describe the meaning of the function. An equal sign signifies the end of the argument list and the beginning of the function's body.</p>
<p id="p-0140" num="0140">The function body (or expression) describes the meaning of the function. It's important to start thinking about this part being a declaration of the meaning, rather than a list of things to do (which is the way you generally think about the definitions of functions and procedures in imperative languages like BASIC and C). In this example, we are using the ‘/’ operator (which is the name of the built-in division operation) to define this function in terms of the division of a and b. Finally, the function definition is ended with a semicolon.</p>
<p id="p-0141" num="0141">Here are some other examples of function definitions:
<ul id="ul0003" list-style="none">
    <li id="ul0003-0001" num="0000">
    <ul id="ul0004" list-style="none">
        <li id="ul0004-0001" num="0142">--recip: Calculate a reciprical</li>
        <li id="ul0004-0002" num="0143">recip x=1/x;</li>
        <li id="ul0004-0003" num="0144">--pi: An approximation of pi</li>
        <li id="ul0004-0004" num="0145">pi=3.141592;</li>
        <li id="ul0004-0005" num="0146">--second: Take the value of the second argument</li>
        <li id="ul0004-0006" num="0147">second a b=b;</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0142" num="0148">In the above examples, a line comment is included. A line comment is text starting with two hyphen characters (--) and terminating at the end of the text line. Like any computer language, comments are used to amplify the meaning of the code where this is necessary to describe the intention of the programmer and to highlight special cases, limitations, choices or algorithms.</p>
<p id="p-0143" num="0149">Notice how the pi function does not take any arguments, so it has an empty argument list. Also, note that we don't have to use all the arguments in the argument list in the function body expression. It is acceptable to ignore declared arguments in the definition, although it is not often that this is meaningfully used as part of the function definition.</p>
<p id="p-0144" num="0150">In order to write useful functions, we have to be able to express conditions in the definition and employ other function applications as part of the function's definition. To apply a function, we simply invoke the required function by name, followed by values for the arguments. The compiler (e.g., the functional language processor <b>74</b>) assumes that any list of objects directly after a function name identifies the arguments of the function application. This means one can write an application of the divide function like this:
<ul id="ul0005" list-style="none">
    <li id="ul0005-0001" num="0000">
    <ul id="ul0006" list-style="none">
        <li id="ul0006-0001" num="0151">divide 12.0 4.0</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0145" num="0152">However, if we wish to use a sub-expression in the application, parentheses are required:
<ul id="ul0007" list-style="none">
    <li id="ul0007-0001" num="0000">
    <ul id="ul0008" list-style="none">
        <li id="ul0008-0001" num="0153">divide (20.0−8.0) (2.0+2.0)</li>
        <li id="ul0008-0002" num="0154">divide (second 20.0 12.0) (2.0+2.0)</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0146" num="0155">In the last example we used an application of the second function in the application of the divide function.</p>
<p id="p-0147" num="0156">In accordance with the invention, condition syntax is just another function. For convenience however the language adds a bit of syntax to help make things a little clearer (and more like other languages). The term if takes three arguments: the condition, the expression yielding the result if the condition is true, and the expression for when the condition is false. Unlike other functions, the keywords then and else are used to separate the three expressions.</p>
<p id="p-0148" num="0157">Here are some examples of if with some accompanying notes:
<ul id="ul0009" list-style="none">
    <li id="ul0009-0001" num="0000">
    <ul id="ul0010" list-style="none">
        <li id="ul0010-0001" num="0158">divide_without_error a b=if b !=0 then divide a b else 0;</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0149" num="0159">Ignoring the appropriateness of suppressing a divide by zero error in this way, this function checks if the divisor is 0 and returns 0 if this is true, otherwise it performs the division. Another example function is:
<ul id="ul0011" list-style="none">
    <li id="ul0011-0001" num="0000">
    <ul id="ul0012" list-style="none">
        <li id="ul0012-0001" num="0160">abs x=if x&gt;=0 then x else negate x;</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0150" num="0161">The absolute value of x is x itself if x is positive (or 0), otherwise the value of abs x is negate x, where this is a standard function designed to switch the sign of a value.</p>
<p id="p-0151" num="0162">The functional language of the invention also supports recursion. Recursion is the technique of a function calling itself as part of its definition. Many functions have a natural sequence where the value of the function for a given input value is related to the value of the function where the argument is one less (or more). You can think of this as defining a table of values of the function for different inputs, where the function is defined in terms of the previous line in the table.</p>
<p id="p-0152" num="0163">An example of recursion is a function that will calculate the factorial of a number. The factorial of a number is the product of all the counting numbers up to (and including) the number itself. A factorial table follows.</p>
<p id="p-0153" num="0164">
<tables id="TABLE-US-00007" num="00007">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="offset" colwidth="42pt" align="left"/>
<colspec colname="1" colwidth="35pt" align="center"/>
<colspec colname="2" colwidth="140pt" align="center"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="2" align="center" rowsep="1"/>
</row>
<row>
<entry/>
<entry>Input (n)</entry>
<entry>Result (factorial n)</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="2" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="offset" colwidth="42pt" align="left"/>
<colspec colname="1" colwidth="35pt" align="center"/>
<colspec colname="2" colwidth="140pt" align="char" char="."/>
<tbody valign="top">
<row>
<entry/>
<entry>1</entry>
<entry>1</entry>
</row>
<row>
<entry/>
<entry>2</entry>
<entry>2</entry>
</row>
<row>
<entry/>
<entry>3</entry>
<entry>6</entry>
</row>
<row>
<entry/>
<entry>4</entry>
<entry>24</entry>
</row>
<row>
<entry/>
<entry>5</entry>
<entry>120</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0154" num="0165">To create this table, we started with the input 1. A factorial involves multiplying the counting numbers up to the input number. The number one is the base case, as it is the simplest form of factorial. The result is 1 (1 multiplied by nothing else is just 1). After this, we can see that for each new line in the table, we take the result from the line before and multiply it by this input. Thus, the factorial of 3 is the factorial of 2 multiplied by 3.</p>
<p id="p-0155" num="0166">Knowing the base case and the rule for succession from this case, we can now define a factorial function:
<ul id="ul0013" list-style="none">
    <li id="ul0013-0001" num="0000">
    <ul id="ul0014" list-style="none">
        <li id="ul0014-0001" num="0167">base case:factorial 1=1</li>
        <li id="ul0014-0002" num="0168">otherwise:factorial n=n*factorial (n−1)</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0156" num="0169">Finally we can turn this into a functional language function. We use if to choose between the base case and the succession case, and then just use the right hand side of the case expressions identified above:
<ul id="ul0015" list-style="none">
    <li id="ul0015-0001" num="0000">
    <ul id="ul0016" list-style="none">
        <li id="ul0016-0001" num="0170">factorial n=if n&lt;2 then 1 else n*factorial (n−1);</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0157" num="0171">So far we've dealt with function definitions, and in simple cases this is all you need to write usable functions. However, a strictly typed language is used and all functions have an associated type that describes the types of arguments and the output of the function. This acts as a kind of ‘contract’ for the function and is used to check that the function is being applied correctly in the rest of the code. Actually, the type system infers the type expression for a function if the type declaration is missing. However, it is still good form to provide this as it specifies what the programmer intended and it provides more information for users of the function. A type declaration is also required if the programmer wishes to make a function more specific than it ordinarily would be inferred to be.</p>
<p id="p-0158" num="0172">A function type declaration can occur anywhere in the same code source as the function definition (e.g., file). Here's an example for the factorial function:
<ul id="ul0017" list-style="none">
    <li id="ul0017-0001" num="0000">
    <ul id="ul0018" list-style="none">
        <li id="ul0018-0001" num="0173">factorial::Int-&gt;int;</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0159" num="0174">The only part of this that is truly significant is the type expression piece. For the time being we can assume that this is constructed from the type names of all the inputs and outputs, separated by the arrow symbol (composed of a hyphen and greater-than character). In the case of factorial, we are saying that the function takes an ‘Int’ and returns an ‘Int’. ‘Int’ is the basic integer type.</p>
<p id="p-0160" num="0175">Typically we would place the declaration just before the definition. Here's an example with the divide function we saw earlier:
<ul id="ul0019" list-style="none">
    <li id="ul0019-0001" num="0000">
    <ul id="ul0020" list-style="none">
        <li id="ul0020-0001" num="0176">--divide takes two numbers and divides a by b (a/b)</li>
        <li id="ul0020-0002" num="0177">divide::Double-&gt;Double-&gt;Double;
        <ul id="ul0021" list-style="none">
            <li id="ul0021-0001" num="0178">divide a b=a/b;</li>
        </ul>
        </li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0161" num="0179">Notice again how the type names for the arguments and the return value are separated by the arrow symbol in the type expression. You may think that separating the arguments with an arrow in this way is counter-intuitive, but we'll see later that there is good reason for this.</p>
<p id="p-0162" num="0180">Another attribute of the functional language of the invention is the use of data constructors. In order to build instances of more complex data types out of simpler values, data constructors are used. These are defined in data declarations, as discussed below, and have names beginning with a capital letter. To create an instance of the data type to which they refer, you invoke a constructor (which also begins with a capital) with whatever arguments it requires as ‘parts’ of the data type to be constructed. Some critical types are treated specially, which provides a more natural syntax for creating data of the type, rather than using a named constructor. These include the list types, the character type, the string type (list of characters) and tuple types.</p>
<p id="p-0163" num="0181">Assume the type Pair is defined as a set of two values. It follows that the constructor for a Pair should collect the two values to create an instance of a Pair. Thus, this is reflected in the syntax:
<ul id="ul0022" list-style="none">
    <li id="ul0022-0001" num="0000">
    <ul id="ul0023" list-style="none">
        <li id="ul0023-0001" num="0182">. . . Pair 1.0 2 . . .</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0164" num="0183">Putting this into a real context, consider what a function would look like to create a Pair from a given Int value and its factorial:
<ul id="ul0024" list-style="none">
    <li id="ul0024-0001" num="0000">
    <ul id="ul0025" list-style="none">
        <li id="ul0025-0001" num="0184">--A function to create a Pair of a value and its factorial.</li>
        <li id="ul0025-0002" num="0185">valFacPair::Int-&gt;Pair;</li>
        <li id="ul0025-0003" num="0186">valFacPair n=Pair n (factorial n);</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0165" num="0187">The main points to notice are the type expression for valFacPair, which describes the function as taking an Int (integer) value and returning a Pair. Also, in the function definition, the Pair constructor is used to collect the value ‘n’ and the factorial for this value into a new Pair instance.</p>
<p id="p-0166" num="0188">Many types have multiple constructors that you can use to create values of the type. As observed in connection with data declarations, the normal definition of a Tree (binary tree abstract data type) describes two constructors: Leaf for the end points and Branch for a non-terminal point. These have different arguments, with a Leaf requiring a value to hold the node data, and a Branch requiring two Tree arguments of a given type (it defines how the tree splits into two branches).</p>
<p id="p-0167" num="0189">Another simple example is the built-in type Bool. This is the type for boolean values, and accordingly it has two constructors: True and False. Neither of these require any arguments, the use of the constructor itself is enough to provide the two possible values of Bool. Note also that Bool is a very simple enumeration type, providing for 2 legal values of the type. Here is an example of a function that always returns the true value:
<ul id="ul0026" list-style="none">
    <li id="ul0026-0001" num="0000">
    <ul id="ul0027" list-style="none">
        <li id="ul0027-0001" num="0190">alwaysTrue::Bool; --declare alwaysTrue to return the Bool type</li>
        <li id="ul0027-0002" num="0191">alwaysTrue=True; --create a True boolean value</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0168" num="0192">The functional language deals with strings, tuples and lists in a special way, providing syntax for constructing values of these types in more convenient ways than using the regular constructor syntax. We'll take these in turn and learn about how to create and manipulate these types.</p>
<p id="p-0169" num="0193">Lists are arbitrary length chains of values. They are considered to have a ‘head’ (the first element) and a ‘tail’ (the rest of the list). Most list manipulation is based on this principle. All the values (elements) of a list must be the same type, but this can be any data type so lists of tuples are common. The syntax for creating a list uses square brackets:
<ul id="ul0028" list-style="none">
    <li id="ul0028-0001" num="0000">
    <ul id="ul0029" list-style="none">
        <li id="ul0029-0001" num="0194">. . . [1,2,3] . . .</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0170" num="0195">The language of the invention also provides convenient syntax for describing the head:tail split. Adding a new element to the front (head) of another list can create a new list. To do this, a colon is inserted between the values for the head and tail of the list. Here are a couple of examples:
<ul id="ul0030" list-style="none">
    <li id="ul0030-0001" num="0000">
    <ul id="ul0031" list-style="none">
        <li id="ul0031-0001" num="0196">. . . 1:[2,3] . . .</li>
        <li id="ul0031-0002" num="0197">. . . myValue:myList . . .</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0171" num="0198">Characters are created using single-quotes around the character representation. This is very similar to other languages:
<ul id="ul0032" list-style="none">
    <li id="ul0032-0001" num="0000">
    <ul id="ul0033" list-style="none">
        <li id="ul0033-0001" num="0199">. . . ‘A’ . . .</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0172" num="0200">Strings are treated as lists of characters. Using double-quote-delimited character sequences can create them. Once created, the string can be manipulated like a list (with any of the list functions) and used in list constructors. Here's a straightforward example of creating a string:
<ul id="ul0034" list-style="none">
    <li id="ul0034-0001" num="0000">
    <ul id="ul0035" list-style="none">
        <li id="ul0035-0001" num="0201">. . . “hello” . . .</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0173" num="0202">Tuples are collections of (possibly differently typed) values. They are roughly analogous to structure or record types in other languages. Tuples can be created using parentheses around the required data elements. The simplest ‘sensible’ tuple is the pair. Although we earlier described a situation with a user-defined Pair type, this is actually built in as type of tuple (the 2-tuple). A pair using the built-in type can be created as:
<ul id="ul0036" list-style="none">
    <li id="ul0036-0001" num="0000">
    <ul id="ul0037" list-style="none">
        <li id="ul0037-0001" num="0203">. . . (1.0, 2) . . .</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0174" num="0204">Other tuple types are written in the same way, with different numbers of elements for a 3-tuple (triple), 4-tuple etc. For example, a 4-tuple might be constructed thus:
<ul id="ul0038" list-style="none">
    <li id="ul0038-0001" num="0000">
    <ul id="ul0039" list-style="none">
        <li id="ul0039-0001" num="0205">. . . (1, 2.0, “three”, [‘f’,‘o’,‘u’,‘r’]) . . .</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0175" num="0206">Sooner or later in any strictly typed language, you have to be able to define new types of data. A strictly typed language requires that all data be typed so that proper checking can be performed in the compiler. The compiler ensures that the program behaves correctly and as intended by the programmer. The basic trade-off is that the programmer is forced to be more specific about what types of data are stored and processed in return for the compiler being much better able to indicate when the program does not make sense. In large programs or developments with multiple programmers this is an extremely valuable service.</p>
<p id="p-0176" num="0207">The language of the invention provides quite a few data types that are either built-in, or are declared in the standard library (known as the Prelude), which is usually included before any other libraries or user code is compiled.</p>
<p id="p-0177" num="0208">To define a new data type, a data declaration is used. This will define the new type and describe the type in terms of constructors and type variables. This is illustrated by looking at a type declaration from the Prelude:
<ul id="ul0040" list-style="none">
    <li id="ul0040-0001" num="0000">
    <ul id="ul0041" list-style="none">
        <li id="ul0041-0001" num="0209">data Bool=False|True;</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0178" num="0210">This declares a new data type called Bool, which is either False or True. False and True are the constructors for the new Bool type. In this case, these two constructors do not require any type of parameter. The vertical bar separates the two alternatives. This sort of type is also known as an enumeration.</p>
<p id="p-0179" num="0211">The language of the invention has a parametric type system, which means that you can define types that are actually whole families of types. In other words you can define types that are types of something. For example, to define trees of things, we can define the following Tree type:
<ul id="ul0042" list-style="none">
    <li id="ul0042-0001" num="0000">
    <ul id="ul0043" list-style="none">
        <li id="ul0043-0001" num="0212">data Tree a=Leaf a|Branch (Tree a) (Tree a);</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0180" num="0213">Translated into English this says: a Tree of a's is either a Leaf constructed out of an a, or a Branch constructed out of two Trees of a's.</p>
<p id="p-0181" num="0214">When we come to use this Tree type, we will use one of the defined constructors for the type (either Leaf or Branch) and we will provide a parameter for the type variable ‘a’. Whatever is provided for a will set the type of the Tree and this in turn will fix how we use the Tree in other expressions. So, if we create a new Tree with the expression:
<ul id="ul0044" list-style="none">
    <li id="ul0044-0001" num="0000">
    <ul id="ul0045" list-style="none">
        <li id="ul0045-0001" num="0215">. . . Leaf 12.3 . . .
<br/>
we will end up with a Tree of floating point numbers (which could be written Tree Double). The type variable a is instantiated now and this means that we will only be able to use this instance of a Tree in other expressions dealing with Trees of Doubles.
</li>
        <li id="ul0045-0002" num="0216">This means that:</li>
        <li id="ul0045-0003" num="0217">. . . Branch (Leaf 12.3) (Leaf 0.0) . . .
<br/>
is legal, but:
</li>
        <li id="ul0045-0004" num="0218">. . . Branch (Leaf 12.3) (Leaf “my leaf”) . . .
<br/>
is not as we are mixing types (the a type variable stands for a different type in the two parameters of the Branch constructor).
</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0182" num="0219">To create structures (or records as they are called in some languages), we simply create lists of the types we wish to build into the structure. These sorts of types are called products.</p>
<p id="p-0183" num="0220">We can even mix products and enumerations. Relying on the last example, there is a definition of Shape that can be either a Circle or a Rectangle. Having two alternative constructors provides this choice. To define the Circle, we have to provide a radius and to define a Rectangle we have to define a width and height. This is described by having each constructor take type parameters to collect the appropriate data. Circle and Rectangle are thus products of their constituent types. Here is the code:
<ul id="ul0046" list-style="none">
    <li id="ul0046-0001" num="0000">
    <ul id="ul0047" list-style="none">
        <li id="ul0047-0001" num="0221">data Shape=Circle Double|Rectangle Double Double;</li>
        <li id="ul0047-0002" num="0222">Comments to annotate data declarations may look like this:</li>
        <li id="ul0047-0003" num="0223">data Shape=Circle Double| --radius of circle
        <ul id="ul0048" list-style="none">
            <li id="ul0048-0001" num="0224">Rectangle Double Double; --width, height</li>
        </ul>
        </li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0184" num="0225">We'll deal with data declarations in more detail later. For now, we'll move onto the final major component of the functional language of the invention, modules.</p>
<p id="p-0185" num="0226">In order to write big programs, and in order to categorize core functions into libraries, a programming language needs a way to allow programmers to structure code into named ‘packages’. In the functional language used in accordance with the present invention, these are called modules.</p>
<p id="p-0186" num="0227">Modules are simply an extension to the namespace for functions and data declarations which allows you to give a long (or fully qualified) name to entities. Top level identifiers therefore break down into two parts:</p>
<p id="p-0187" num="0228">&lt;module name&gt;.&lt;entity name&gt;</p>
<p id="h-0006" num="0000">for instance:</p>
<p id="p-0188" num="0000">
<ul id="ul0049" list-style="none">
    <li id="ul0049-0001" num="0000">
    <ul id="ul0050" list-style="none">
        <li id="ul0050-0001" num="0229">statistics.mean
<br/>
would be a mean function in the statistics module.
</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0189" num="0230">When the language is being compiled from a file or other source code storage, the module keyword changes the module into which subsequent functions and data declarations will be compiled. The names of these entities are then effectively prefixed with the module name and stored in the module: module Prelude;.</p>
<p id="p-0190" num="0231">Modules define a context (or scope) for definitions. One of the nice features they provide is a way to hide definitions for use within a module (like utility functions and building blocks for the ‘real’ top-level functions). The invention allows one to specify whether a declaration is visible outside of the module in which it is defined by using the keywords public and private. A public definition is visible outside of the source module, whereas a private definition is not. If an entity is not declared to be public then it is implicitly private to its module.</p>
<p id="p-0191" num="0232">In order to access public declarations from another module, an input statement must be present before the use of declarations foreign to the module using them: import Prelude;. Providing the use of a name is unambiguous, an entity (function, data declaration, etc.) can be referred to without qualifying it with the source module name. If this would result in ambiguity however, then the qualified name must be used to avoid a compiler error. If a locally defined entity has the same name as one imported from another module, then using the unqualified name will refer to the local entity, and a qualified name is the only way to refer to the imported entity.</p>
<p id="p-0192" num="0233">Type classes are named sets of types for which a guarantee is made about the availability of functions to perform certain actions for all member types. Having such an abstract grouping of types is very powerful as it allows functions to declare that they will work on the type class and therefore on all member types this infers. A simple example of this is the type class Ord (orderable). It defines a set of comparator functions (such as the standard &lt;, &gt;, &gt;=) which will be made available for all types which are members of it. It is possible (and very desirable) for many types to have a way to compare values of themselves. For instance, to write real programs, we have to be able to compare number values, we also would like to lexicographically compare strings and characters. So, what we do is make sure that the Org class defines all the comparator functions, and make all the types (Int, Double, Char, string etc) members of the Ord type class. Part of declaring a type as a member of a type class involves nominating functions that will perform the operations defined in the type class for values to the member type. This work is done by the instance declaration.</p>
<p id="p-0193" num="0234">The upshot of this work is that one can use the ‘generic’ comparator functions defined over Ord for any of the types that are instances of Org (members of it). This makes the code much cleaner and more readable, and is a huge service to the programmer who no longer needs to locate an appropriate function to compare each specific type (greaterThanInt, greaterThanDouble etc.). Furthermore, this allows the language to share the most intuitive syntax (like operator symbols &gt;, &gt;=, &lt;) across all of the types in the Ord typeclass without sacrificing any type checking.</p>
<p id="p-0194" num="0235">Attention now turns to a more detailed look at the functional language of the invention. In particular, attention is directed toward consideration of more advanced features of the language.</p>
<p id="p-0195" num="0236">Even though the language can claim to have ‘more advanced’ features, it is really a very simple language from most points of view. Fundamentally, the language is a set of declarations of expressions that get compiled. At runtime, the evaluator works out how to reduce this set from a particular entry point (like the main function) to the simplest form possible. Often, this ‘simplest form’, or result, is a single value, but it can be an abstract data type, or perhaps still a function. Basically, the job of the runtime is to ‘boil’ the starting expression down to its bare bones by repeatedly using the other function definitions to replace and reduce the current expression. This process stops when the runtime can find no way of further reducing the program.</p>
<p id="p-0196" num="0237">So, a gem (e.g., a discrete logic visual icon or a data transformation block) is essentially a set of expressions. There's the starting point expression and a set of dependent expressions out of which we have derived this starting point.</p>
<p id="p-0197" num="0238">An expression is a mathematical term meaning a formalism that describes an entity in terms of a combination of other entities. Most computer languages have syntax for expressions in order to describe arithmetic operations. However, most languages also provide mechanisms and syntax to describe the movement of state in memory (usually through data structure ‘proxies’). In these languages, a program works by starting at some entry point and executing a set of commands or instructions one at a time until some sort of ‘halt’ instruction is met. In these languages (called imperative languages because each instruction must be executed fully as the program proceeds), expressions are merely the vehicle to describe the transformation of values to create new values. In order words, they create and modify the states of the program. The control of the program ‘flow’ is directed by special instructions and, within this, expressions perform the transformations in the state.</p>
<p id="p-0198" num="0239">The functional language of the invention omits the ‘flow of control’ instructions, and does away with notions of global or persistent state. Instead, a program is ‘declared’ purely in terms of abstractions. Because of this, functional languages have what is known as a declarative syntax. Moreover, the expressions used have extra meaning as functions. Functions map a set onto another set, and for any given input to a specific function, the output will always be the same. This fact can be exploited by a functional language runtime, so that the expression defining a function is never evaluated more than once for given set inputs. This is known as memoisation.</p>
<p id="p-0199" num="0240">By splitting the program up into a set of functions, we obtain the granularity required to perform the memoisation optimization as described above, and also the granularity required to write ‘real’ programs.</p>
<p id="p-0200" num="0241">We'll now look at features of the language more fully and learn where expressions can be written. The main site for an expression is the function body. The function body can consist simply of a basic expression, or of some of the following types of special expression. One type of special expression is a constructor, which builds a more abstract data type from a set of simpler types. Another type of special expression is a LET expression, which is used to define local variables and functions. A SWITCH expression is used to switch between sub-expressions based on a value or pattern. A LAMDA expression is an unnamed function definition.</p>
<p id="p-0201" num="0242">Each of the special expressions and their syntax will be dealt with in subsequent sections that will discuss the features they provide. In this section we'll continue to talk about the basic expression syntax.</p>
<p id="p-0202" num="0243">Basic expressions describe a calculation, and hence a resultant value derived from a set of variables, arguments and constants, in terms of functions and built-in operations.</p>
<p id="p-0203" num="0244">Local variables can be used in a function where this is convenient to express an intermediate result. The syntax to define a local variable is the LET expression. The form of the LET expression is:
<ul id="ul0051" list-style="none">
    <li id="ul0051-0001" num="0000">
    <ul id="ul0052" list-style="none">
        <li id="ul0052-0001" num="0245">Let
        <ul id="ul0053" list-style="none">
            <li id="ul0053-0001" num="0246">a=12;</li>
            <li id="ul0053-0002" num="0247">b=sin 90.0;</li>
        </ul>
        </li>
        <li id="ul0052-0002" num="0248">in
        <ul id="ul0054" list-style="none">
            <li id="ul0054-0001" num="0249">a*b;</li>
        </ul>
        </li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0204" num="0250">Note that as an expression, the LET block takes on the value of its enclosing expression. Also, the scope of the variables defined in the head of the LET is limited to the expression (i.e. the LET is the enclosing scope).</p>
<p id="p-0205" num="0251">LET expressions can be nested to arbitrary depth. This allows for the scope of defined variables to be structured appropriately and to add clarity to the overall expression.</p>
<p id="p-0206" num="0252">Note that the use of local variables is probably a little different than what one might expect if coming from an imperative language background. Local variables are immutable once set in the head of the LET expression. You cannot reassign values to local variables in the LET body. This is in keeping with the functional programming paradigm that rules that objects do not change once they have been created, but new object instances can be made of the same type, but with different values.</p>
<p id="p-0207" num="0253">Local functions, like local variables are used when it is necessary or meaningful to define a function in terms of one or more private functions. Like local variables, the LET block is used to define the functions and their enclosing scope. In fact, local functions are defined in exactly the same way as value variables. This follows because logically there is no difference between a value and a function. Here's an example of an, albeit tautological, pair of nested LET expressions containing both local variable and local function definitions:</p>
<p id="p-0208" num="0254">
<tables id="TABLE-US-00008" num="00008">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="49pt" align="left"/>
<colspec colname="1" colwidth="168pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>doublePlusAndOne x y =</entry>
</row>
<row>
<entry/>
<entry>let</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="63pt" align="left"/>
<colspec colname="1" colwidth="154pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>doubleIt x = x + x;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="49pt" align="left"/>
<colspec colname="1" colwidth="168pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>in</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="63pt" align="left"/>
<colspec colname="1" colwidth="154pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>let</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="77pt" align="left"/>
<colspec colname="1" colwidth="140pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>z = doubleIt x;</entry>
</row>
<row>
<entry/>
<entry>addTogether x y = x + y;</entry>
</row>
<row>
<entry/>
<entry>p = 1;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="63pt" align="left"/>
<colspec colname="1" colwidth="154pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>in</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="77pt" align="left"/>
<colspec colname="1" colwidth="140pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>addTogether z y + p;</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0209" num="0255">There are two points worth noting in connection with this example. First, local variable function definitions can be freely intermixed in the head of a LET expression. Next, variable hiding is possible because of the scoping rules. In the example, we reuse the variables x and y in the definitions of doubleIt and addTogether. The most local definitions are used in the application of these variables. The same applies to function names.</p>
<p id="p-0210" num="0256">A switch expression is the way to choose between a set of alternative expressions depending on a pattern or value. Switch expressions are also used to access data elements in a compound data type (i.e., to ‘break apart’ a compound value into its constituent pieces).</p>
<p id="p-0211" num="0257">A lambda expression is an expression that denotes an anonymous function. The name derives from the mathematical symbol used to introduce the concept of an unnamed function, which uses the Greek letter Lambda (λ).</p>
<p id="p-0212" num="0258">Lambda expressions are used in Lambda Calculus, which is a calculus that permits the simplification of functional expressions using various forms of reduction. Lambda expressions are interesting in the language of the invention for several reasons. First, there are often times when there is no point giving a name to a local function. A lambda expression is more concise and doesn't require redundant naming of the function. Next, one can build a lambda expression (function) inside another function and return it.</p>
<p id="p-0213" num="0259">A backslash (\) is used to introduce a lambda expression. This character is chosen because of its resemblance to the Greek letter Lambda. A lambda expression is similar to a function definition, but with a few syntactical differences derived from the mathematical notation (and to differentiate it better).
<ul id="ul0055" list-style="none">
    <li id="ul0055-0001" num="0000">
    <ul id="ul0056" list-style="none">
        <li id="ul0056-0001" num="0260">Here is the form of a lambda expression: \xs n-&gt;length xs+n.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0214" num="0261">Let's look at a simple example of where one might use a lambda expression. Imagine we want to filter a list of double precision numbers to extract only those values which are larger than 1000. We might use the standard filter function to achieve this. This function provides all the logic for describing a subset of a list, but requires a predicate function (a function taking a list item and returning a boolean) in order to ‘pick’ which items are in the subset.</p>
<p id="p-0215" num="0262">One approach to this problem might be to write a named predicate function like this:
<ul id="ul0057" list-style="none">
    <li id="ul0057-0001" num="0000">
    <ul id="ul0058" list-style="none">
        <li id="ul0058-0001" num="0263">greaterThanAThousand item=item&gt;1000;
<br/>
and then apply this to the filter function:
</li>
        <li id="ul0058-0002" num="0264">. . . filter greaterThanAThousand myOriginalList . . .</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0216" num="0265">This might be the correct approach if the greaterThanAThousand function was likely to be reused. However, it's likely that its only purpose is for this application. Therefore, it is much better (not to mention more concise) to use a lambda expression:
<ul id="ul0059" list-style="none">
    <li id="ul0059-0001" num="0000">
    <ul id="ul0060" list-style="none">
        <li id="ul0060-0001" num="0266">. . . filter (\item-&gt;item&gt;1000) myOriginalList . . .</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0217" num="0267">One of the most powerful and intriguing things about the functional programming paradigm as provided by the invention is the capability to partially evaluate a function, leaving the rest of the function to be passed elsewhere for later complete evaluation.</p>
<p id="p-0218" num="0268">This is best demonstrated with an example. Consider the previously discussed filter example. To recap, we wanted to express the application of filter on a list to produce a subset of the list where all items were over 1000. Here is the code:
<ul id="ul0061" list-style="none">
    <li id="ul0061-0001" num="0000">
    <ul id="ul0062" list-style="none">
        <li id="ul0062-0001" num="0269">. . . filter (item-&gt;item&gt;1000) myOriginalList . . .</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0219" num="0270">This code works well when we want to apply the filter function right away to our list. However, we may want to reuse this particular filter on several lists. We can use partial evaluation in to achieve this.</p>
<p id="p-0220" num="0271">What we can do is partially apply the filter function by only initially supplying the predicate function:
<ul id="ul0063" list-style="none">
    <li id="ul0063-0001" num="0000">
    <ul id="ul0064" list-style="none">
        <li id="ul0064-0001" num="0272">. . . filter (item-&gt;item&gt;1000) . . .</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0221" num="0273">Unlike most languages, which require a full set of required arguments (either provided or defaulted) to perform their task, the language of the invention allows us only to provide a subset of the arguments to filter. This will then produce another function that is unnamed, but represents the concept ‘the filter that will pick items over a thousand’. This new function will take the remaining missing arguments (in this case a list of double precision numbers) to do its work, or if there is more than one remaining argument, we could produce yet another derived function, by applying another subset of the remaining arguments.</p>
<p id="p-0222" num="0274">Partial function applications can be returned from a function, be bound to a local variable, or be stored in a data structure. They can then be applied at a later time to complete their task.</p>
<p id="p-0223" num="0275">In procedural languages there is a clear distinction between functions and regular values. You are often required to create pointers to functions in these languages in order to be able to manipulate the functions themselves.</p>
<p id="p-0224" num="0276">In functional languages this is not the case. We can treat functions like any other expression, and in particular we can use them as arguments. No special syntax is required to do this, function parameters look exactly the same as any other kind of parameter. The only way you would know that a parameter is a function parameter is to take a look at the type of the parameter.</p>
<p id="p-0225" num="0277">We'll examine an example now. Suppose we want to be able to apply any given function twice to a particular argument. We can code this operation as a function called doTwice:
<ul id="ul0065" list-style="none">
    <li id="ul0065-0001" num="0000">
    <ul id="ul0066" list-style="none">
        <li id="ul0066-0001" num="0278">doTwice f x=f (f x);
<br/>
The body of the definition applies f to x and then applies f again to the result. The type description for this function is:
</li>
        <li id="ul0066-0002" num="0279">(a-&gt;a)-&gt;a-&gt;a</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0226" num="0280">This reveals that the function does indeed take a function as its first parameter, the (a-&gt;a) being the pertinent part of the full type description.</p>
<p id="p-0227" num="0281">Using doTwice doesn't involve any extra syntax either:
<ul id="ul0067" list-style="none">
    <li id="ul0067-0001" num="0000">
    <ul id="ul0068" list-style="none">
        <li id="ul0068-0001" num="0282">. . . doTwice factorial 3 . . .
<br/>
yields 720 as the result.
</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0228" num="0283">We could write a generalized version of doTwice that will apply a function a given number of times to an input value. Here's a definition of such a function:
<ul id="ul0069" list-style="none">
    <li id="ul0069-0001" num="0000">
    <ul id="ul0070" list-style="none">
        <li id="ul0070-0001" num="0284">doMany n f x=if n==0 then x else f (doMany (n−1) f x);</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0229" num="0285">As well as acting as an argument, a function can also be the result of evaluating an expression. Here's an example of a function that returns one of two functions depending on an input value:
<ul id="ul0071" list-style="none">
    <li id="ul0071-0001" num="0000">
    <ul id="ul0072" list-style="none">
        <li id="ul0072-0001" num="0286">taxFunction income=if income&gt;10000 then higherTaxCalc else lowerTaxCalc;</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0230" num="0287">One of either the higherTaxCalc or lowerTaxCalc functions is returned depending on the value of income passed to taxFunction. These returned functions have a specific type that controls what we can do with the return of taxFunction. It's quite likely, given this example, that they would take the income and apply a banded tax calculation, returning the total tax liability. In this case, these returnable functions would have the type:
<ul id="ul0073" list-style="none">
    <li id="ul0073-0001" num="0000">
    <ul id="ul0074" list-style="none">
        <li id="ul0074-0001" num="0288">(Double-&gt;Double)</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0231" num="0289">This in turn would make the type of taxFunction:
<ul id="ul0075" list-style="none">
    <li id="ul0075-0001" num="0000">
    <ul id="ul0076" list-style="none">
        <li id="ul0076-0001" num="0290">Double-&gt;(Double-&gt;Double)</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0232" num="0291">What is even more interesting is the fact that the type system of the invention is flexible enough to permit functions as arguments and return polymorphic functions.</p>
<p id="p-0233" num="0292">Now that the iconic and functional language aspects of the invention have been fully described, it is useful to more carefully consider previously introduced concepts. As previously indicated, the combination control module <b>60</b> only allows compositions that are legal and that result in unambiguous meaning. In other words, to get from state “A” of a gem to another state “B”, it must be possible to describe the meaning of “B” in a well-defined manner in the underlying functional language. In addition, the transformation A-&gt;B must be able to produce a new global typing of B that is expressible in the type language. Further, there must not be any violations of type constraints and bindings already established at A.</p>
<p id="p-0234" num="0293">There are instances in which the combination control module <b>60</b> detects a supposedly “illegal” connection attempt. In many of these instances there is a simple transformation of the function that would make it legal. The logic manipulation module <b>56</b> supports “partial evaluation”. This essentially moves one or more inputs on the function being connected into its output (usually turning the output into a function rather than a straightforward value). This most frequently occurs when a function is expecting a functional input (i.e., it is a “higher order” function) and an attempt is made to connect the output of a regular gem. In this case, the burn module <b>62</b> recognizes that if it burns one or more of the inputs on the outer function, it will be able to create an entity that matches the input. When it can do this unambiguously, then the burning is done automatically. When there is more than one possibility (a set of permutations of burnt inputs), the burn module <b>62</b> indicates there is a burn configuration that would qualify the connection, but it cannot determine which is correct. Thus, the burn module <b>62</b> moves an input to the output to form a new type out of essentially the same function (by precluding a local value for that input). The burn module <b>62</b> suggests these transformations to the user in an ambiguous case and automatically implements the transformations in an unambiguous case.</p>
<p id="p-0235" num="0294">Value editors <b>1300</b> or value entry panels have been described as automatically generating value input based on decomposition of type. The code for the entry panel module <b>66</b> may also be used to create the result interface <b>1304</b> when a result value is obtained. This allows the user to “drill down” into the result value and see how it is composed.</p>
<p id="p-0236" num="0295">Another aspect of this automatic decomposition is that it allows new entry/result panels to be “registered” with the system. Preferably, the logic manipulation module <b>56</b> automatically spots a type match once the value has been decomposed to the right level, and it substitutes the registered panel to collect or display an abstract value rather than further deconstructing the value.</p>
<p id="p-0237" num="0296">If there are several suitable panels registered (e.g., an edit panel and a slider panel for setting an integer value), then the logic manipulation module <b>56</b> can note this dichotomy. For instance, a default (e.g., edit panel) may be set and a decision may then be made to: (a) use the default, (b) select from another registered panel, or (C) substitute an entirely different panel that will deal with this type of value. This registration feature is also designed to accommodate the fact that one can declare a new type in the language.</p>
<p id="p-0238" num="0297">It should now be appreciated that new data transformation blocks may be constructed solely through the use of logic icons. The use of logic icons may be supplemented or substituted by the use of a code gem <b>1502</b> and its corresponding code entry window <b>1600</b>. The combination control module <b>60</b> also supervises text entry into the code entry window <b>1600</b>. That is, the combination control module <b>60</b> continuously parses and interprets the contents of the entered code and provides feedback as to whether the code makes sense, the interpretation of the code in terms of inputs and output, and the data types.</p>
<p id="p-0239" num="0298">The foregoing description, for purposes of explanation, used specific nomenclature to provide a through understanding of the invention. However, it will be apparent to one skilled in the art that specific details are not required in order to practice the invention. Thus, the foregoing descriptions of specific embodiments of the invention are presented for purposes of illustration and description. They are not intended to be exhaustive or to limit the invention to the precise forms disclosed; obviously, many modifications and variations are possible in view of the above teachings. The embodiments were chosen and described in order to best explain the principles of the invention and its practical applications, the thereby enable other skilled in the art to best utilize the invention and various embodiments with various modifications as are suited to the particular use contemplated. It is intended that the following claims and their equivalents define the scope of the invention.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>The invention claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method of constructing a data transformation block, comprising:
<claim-text>selecting a first discrete logic visual icon from a logic repository;</claim-text>
<claim-text>choosing a second discrete logic visual icon from said logic repository;</claim-text>
<claim-text>establishing a combination valid state when said first discrete logic visual icon can be combined with said second discrete logic visual icon;</claim-text>
<claim-text>combining said first discrete logic visual icon and said second discrete logic visual icon in response to said combination valid state to form a data transformation block, said data transformation block having a corresponding functional language source code description of the logical operations to be performed by said data transformation block, wherein the functional language source code description has an algebraic type system and a declarative syntax; and</claim-text>
<claim-text>storing said data transformation block in said logic repository.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising:
<claim-text>selecting said data transformation block from said logic repository;</claim-text>
<claim-text>choosing a third discrete logic visual icon from said logic repository;</claim-text>
<claim-text>establishing a combination valid state when said data transformation block can be combined with said third discrete logic visual icon;</claim-text>
<claim-text>combining said data transformation block with said third discrete logic visual icon in response to said combination valid state to form a new data transformation block, said new data transformation block having a corresponding functional language source code description of the logical operations to be performed by said new data transformation block; and</claim-text>
<claim-text>storing said new data transformation block in said logic repository.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein said functional language source code description includes a first executable logic code segment corresponding to said first discrete logic visual icon and a second executable logic code segment corresponding to said second discrete logic visual icon.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref> wherein said first executable logic code segment is processed on a first computer and said second executable logic code segment is processed on a second computer.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising applying data to said data transformation block to form transformed data.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref> further comprising displaying said transformed data.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref> further comprising supplying intermediate processing results prior to said displaying.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref> wherein said applying includes:
<claim-text>applying a first data type to said data transformation block to form transformed data of a first data type; and</claim-text>
<claim-text>applying a second data type to said data transformation block to form transformed data of a second data type.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising automatically linking, under predetermined conditions, selected inputs and outputs of said first discrete logic visual icon and said second discrete logic visual icon.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising establishing entry panel inputs to said first discrete logic visual icon and said second discrete logic visual icon.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref> wherein establishing includes selecting a constant value visual icon as an entry panel input.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein establishing includes establishing a combination valid state when type definitions for said first discrete logic visual icon match type definitions for said second discrete logic visual icon.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising forming a new discrete logic visual icon by:
<claim-text>selecting a discrete logic visual icon template; and</claim-text>
<claim-text>entering into a display screen a functional language source code description of logical operations to be performed by said new discrete logic visual icon.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. A computer readable memory to direct a computer to function in a specified manner, comprising:
<claim-text>a logic repository storing a set of discrete logic visual icons; and</claim-text>
<claim-text>executable instructions including
<claim-text>first executable instructions to selectively produce a combination valid state when a first discrete logic visual icon from said logic repository is combined with a second discrete logic visual icon from said logic repository, and</claim-text>
<claim-text>second executable instructions to combine said first discrete logic visual icon and said second discrete logic visual icon in response to said combination valid state to form a data transformation block, said data transformation block having a corresponding functional language source code description of the logical operations to be performed by said data transformation block, wherein the functional language source code description has an algebraic type system and a declarative syntax.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The computer readable memory of <claim-ref idref="CLM-00014">claim 14</claim-ref> further comprising executable instructions to combine said data transformation block with a third discrete logic visual icon to form a new data transformation block, said new data transformation block having a corresponding functional language source code description of the logical operations to be performed by said new data transformation block.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The computer readable memory of <claim-ref idref="CLM-00014">claim 14</claim-ref> wherein said functional language source code description utilizes type classes.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The computer readable memory of <claim-ref idref="CLM-00014">claim 14</claim-ref> wherein said functional language source code description processes input data to form transformed data.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The computer readable memory of <claim-ref idref="CLM-00017">claim 17</claim-ref> further comprising executable instructions to display said transformed data.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The computer readable memory of <claim-ref idref="CLM-00018">claim 18</claim-ref> further comprising executable instructions to supply intermediate processing results.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The computer readable memory of <claim-ref idref="CLM-00014">claim 14</claim-ref> wherein said functional language source code description includes a first executable logic code segment corresponding to said first discrete logic visual icon and a second executable logic code segment corresponding to said second discrete logic visual icon.</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. The computer readable memory of <claim-ref idref="CLM-00014">claim 14</claim-ref> wherein said data transformation block includes executable instructions to produce a first data type output in response to a first data type input and a second data type output in response to a second data type input.</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. The computer readable memory of <claim-ref idref="CLM-00014">claim 14</claim-ref> further comprising executable instructions to automatically link, under predetermined conditions, selected inputs and outputs of said first discrete logic visual icon and said second discrete logic visual icon.</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. The computer readable memory of <claim-ref idref="CLM-00014">claim 14</claim-ref> further comprising executable instructions to form entry panel inputs to said first discrete logic visual icon and said second discrete logic visual icon.</claim-text>
</claim>
<claim id="CLM-00024" num="00024">
<claim-text>24. The computer readable memory of <claim-ref idref="CLM-00023">claim 23</claim-ref> further comprising executable instructions to form a constant value visual icon as an entry panel input.</claim-text>
</claim>
<claim id="CLM-00025" num="00025">
<claim-text>25. The computer readable memory of <claim-ref idref="CLM-00014">claim 14</claim-ref> wherein said first executable instructions produce said combination valid state when type definitions for said first discrete logic visual icon match type definitions for said second discrete logic visual icon.</claim-text>
</claim>
<claim id="CLM-00026" num="00026">
<claim-text>26. The computer readable memory of <claim-ref idref="CLM-00014">claim 14</claim-ref> further comprising executable instructions to:
<claim-text>generate a discrete logic visual icon template; and</claim-text>
<claim-text>produce a display screen to receive a functional language source code description of logical operations to be performed by a new discrete logic visual icon corresponding to said discrete logic visual icon template.</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>
