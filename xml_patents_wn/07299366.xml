<us-patent-grant lang="EN" dtd-version="v4.2 2006-08-23" file="US07299366-20071120.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20071106" date-publ="20071120">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>07299366</doc-number>
<kind>B2</kind>
<date>20071120</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>10464240</doc-number>
<date>20030618</date>
</document-id>
</application-reference>
<us-application-series-code>10</us-application-series-code>
<priority-claims>
<priority-claim sequence="01" kind="regional">
<country>EP</country>
<doc-number>02291568</doc-number>
<date>20020624</date>
</priority-claim>
</priority-claims>
<us-term-of-grant>
<us-term-extension>671</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>11</main-group>
<subgroup>30</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>12</main-group>
<subgroup>14</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>H</section>
<class>04</class>
<subclass>L</subclass>
<main-group>9</main-group>
<subgroup>32</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>713193</main-classification>
<further-classification>713172</further-classification>
<further-classification>726  9</further-classification>
<further-classification>726 20</further-classification>
</classification-national>
<invention-title id="d0e71">Secure software customization for smartcard</invention-title>
<references-cited>
<citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>4734569</doc-number>
<kind>A</kind>
<name>Kawana et al.</name>
<date>19880300</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>235487</main-classification></classification-national>
</citation>
<citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>6317832</doc-number>
<kind>B1</kind>
<name>Everett et al.</name>
<date>20011100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713172</main-classification></classification-national>
</citation>
<citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6328217</doc-number>
<kind>B1</kind>
<name>Everett et al.</name>
<date>20011200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>235492</main-classification></classification-national>
</citation>
<citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>6385723</doc-number>
<kind>B1</kind>
<name>Richards</name>
<date>20020500</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>713160</main-classification></classification-national>
</citation>
<citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2005/0154902</doc-number>
<kind>A1</kind>
<name>Evans</name>
<date>20050700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713189</main-classification></classification-national>
</citation>
<citation>
<patcit num="00006">
<document-id>
<country>EP</country>
<doc-number>949595</doc-number>
<kind>A2</kind>
<date>19991000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
</citation>
<citation>
<nplcit num="00007">
<othercit>European Search Report dated May 19, 2003.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
</references-cited>
<number-of-claims>12</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>713193</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>713172</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>726  9</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>726 20</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>3</number-of-drawing-sheets>
<number-of-figures>4</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20030236989</doc-number>
<kind>A1</kind>
<date>20031225</date>
</document-id>
</related-publication>
</us-related-documents>
<parties>
<applicants>
<applicant sequence="001" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Condemine</last-name>
<first-name>Olivier</first-name>
<address>
<city>Paris Cedex</city>
<country>FR</country>
</address>
</addressbook>
<nationality>
<country>FR</country>
</nationality>
<residence>
<country>FR</country>
</residence>
</applicant>
</applicants>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Osha Liang LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</parties>
<assignees>
<assignee>
<addressbook>
<orgname>Nagra Thomson Licensing</orgname>
<role>03</role>
<address>
<city>Boulogne-Billancourt</city>
<country>FR</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Barron, Jr.</last-name>
<first-name>Gilberto</first-name>
<department>2132</department>
</primary-examiner>
<assistant-examiner>
<last-name>Lemma</last-name>
<first-name>Samson</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">The customizing of a smartcard chip with a complete software begins with masking a smartcard chip by storing a first part of the software. The first part of the software, when executed, is enabled to input unlocking data at an input port of the smartcard chip, to use the unlocking data to decrypt encrypted data stored in the smartcard, and to store the decrypted data in the smartcard memory. Masking of the smartcard chip further comprises storing encrypted customization software. The customization software, when executed, is enabled to input data and to store the input data in the smartcard memory. After decrypting and executing the customization software; the second part of the software is input and stored in the smartcard, enabling the whole software on the smartcard.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="208.36mm" wi="149.86mm" file="US07299366-20071120-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="119.21mm" wi="108.20mm" file="US07299366-20071120-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="231.82mm" wi="110.83mm" file="US07299366-20071120-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="226.40mm" wi="153.59mm" file="US07299366-20071120-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS </heading>
<p id="p-0002" num="0001">This application claims priority from European Patent application EP02291568, with a filing date of Jun. 24, 2002.</p>
<heading id="h-0002" level="1">BACKGROUND OF INVENTION </heading>
<p id="p-0003" num="0002">1. Field of the Invention</p>
<p id="p-0004" num="0003">The invention relates generally to smartcards and more particularly to a process for securely customizing a smartcard chip with software.</p>
<p id="p-0005" num="0004">2. Background Art</p>
<p id="p-0006" num="0005">Production Process</p>
<p id="p-0007" num="0006">A production process for customizing a smartcard with software generally comprises 4 phases: masking, pre-customization, card mounting and customization.</p>
<p id="p-0008" num="0007">Referring to <figref idref="DRAWINGS">FIG. 1</figref>, a smartcard chip <b>100</b> is schematically represented. The smartcard chip <b>100</b> carries a Read Only Memory (ROM) module, an EEPROM module of rewritable memory, a Random Access Memory (RAM), a Central Processing Unit (CPU) and an Input/Output (IO) interface for communication of data.</p>
<p id="p-0009" num="0008">Masking and Pre-customization</p>
<p id="p-0010" num="0009">During the masking process, a client wishes to obtain a smartcard that contains a specific software and pre-customization information in the smartcard chip's memories (ROM, EEPROM). The software is generally at least partly stored in the appropriate memory by the chip manufacturer at the issue of a wafer manufacturing process by means of a process known as masking. The client provides the chip manufacturer with the software to store into ROM and with pre-customization information to store into EEPROM. The chip manufacturer performs the masking process by which the software and pre-customization information are stored as appropriate.</p>
<p id="p-0011" num="0010">The pre-customization information stored in EEPROM generally corresponds to a transport key that is part of a strategy to prevent fraudulous use of the masked smartcard chip. The transport key is required as an input at a first execution of the software contained in the ROM in order to render the software fully operational. In other words, the software stored in the ROM is protected, since it may not be executed properly without knowing the transport key.</p>
<p id="p-0012" num="0011">The transport key may only be recovered from EEPROM using a Security Access Module (SAM). Hence the masked smartcard chip is effectively useless for a potential thief. Generally the masked chip may merely receive and execute a limited number of commands without knowing the transport key, including for example a RESET command or an electrical test command of the chip.</p>
<p id="p-0013" num="0012">After the masking process, the smartcard chip with the software corresponds to specifications of the client, i.e., the smartcard chip may receive and process commands as specified for the client's product provided the transport key is available.</p>
<p id="p-0014" num="0013">Card Mounting and Customization</p>
<p id="p-0015" num="0014">The manufacturer sends masked smartcard chips on a wafer to a card mounter who mounts the smartcard chips on smartcard supports. The card mounter performs all final process steps to obtain a smartcard. These final process steps may included printing a pattern on the smartcard and customization of the chip according to client's instructions. Customization of the chip starts with an electrical test of the chip and may comprise implementing additional commands in the memories of the chip.</p>
<p id="p-0016" num="0015">In order to implement additional commands on the chip it is necessary to execute the software which enables commands for writing data to the chip memories. The card mounter recovers the transport key from the EEPROM by means of a Security Access Module (SAM) and uses the key to execute the software stored in ROM and thereby access commands to write the additional commands in memory.</p>
<p id="p-0017" num="0016">There may be a further customization step to perform by the client. In this case the client receives the smartcards from the card mounter and uses a SAM to recover the transport key. The latter is used to execute the software in a similar way as was done by the card mounter and to subsequently write custom information into chip memories.</p>
<p id="p-0018" num="0017">The described process of masking suffers a security problem in that both the entire software and the secret transport key are provided to the chip manufacturer by the client. In case the secret transport key is misused by the manufacturer or stolen from the manufacturer in view of executing the software, the masked chip may potentially be used and/or sold illegally and cause damages to the client.</p>
<p id="p-0019" num="0018">In addition there is a security problem which occurs when the card mounter recovers the transport key. Here also the transport key may potentially be misused.</p>
<p id="p-0020" num="0019">Furthermore there is a risk that the software code is misused by the manufacturer or stolen from the manufacturer, and that illegal copies of the software be sold, thereby causing damages to the client.</p>
<heading id="h-0003" level="1">SUMMARY OF INVENTION </heading>
<p id="p-0021" num="0020">In a first aspect the invention provides a smartcard chip comprising an input device, and a first memory having decrypting software permanently stored therein. The smartcard chip further comprises a second memory having customization software stored therein, wherein the customization software is encrypted with an unlocking key. Execution means allow to input the unlocking key via the input device, execute the decrypting software, and decrypt the customization software.</p>
<p id="p-0022" num="0021">Preferably the first memory is a Read Only Memory device and the second memory a Rewritable memory device.</p>
<p id="p-0023" num="0022">In a second aspect the invention provides a method for customizing software of a smartcard chip, comprising executing a decrypting software stored in the smartcard chip, inputting unlocking data, and applying the unlocking data to a decrypting of customization software stored in the smartcard chip. The decrypted customization software is stored in the smartcard chip and executed to input smartcard software and store the smartcard software into a memory of the smartcard chip.</p>
<p id="p-0024" num="0023">Preferably the unlocking data comprises an unlocking key and a hash code. The unlocking key is applied with the decrypting software in the decrypting of the customization software. A customization hash code for the decrypted customization software is computed and the hash code compared with the customization hash code. The customization software is executed only if the hash code matches the customization hash code.</p>
<p id="p-0025" num="0024">In a third aspect the invention provides a method for customizing a smartcard chip with a software comprising masking a smartcard chip by storing a first part of the software. The first part of the software, when executed, is enabled to input unlocking data at an input port of the smartcard chip, to use the unlocking data to decrypt encrypted data stored in the smartcard memory, and to store the decrypted data in the smartcard memory. The smartcard chip is further masked by storing encrypted customization software. The customization software, when executed, is enabled to input data and to store the input data in the smartcard memory.</p>
<p id="p-0026" num="0025">Preferably the first part of the software is executed. The inventive method comprises inputting the unlocking data, decrypting the customization software, storing the decrypted customization software in the smartcard memory, and executing the customization software to enable input of data and storing thereof. A second part of the software is input at the input port , the second part of the software being complementary to the first part of the software to obtain the whole software. The input second part of the software is stored into the smartcard memory.</p>
<p id="p-0027" num="0026">Other aspects and advantages of the invention will be apparent from the following description and the appended claims.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF DRAWINGS </heading>
<p id="p-0028" num="0027">The invention will now be described in greater detail with reference to the accompanying drawings, in which</p>
<p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. 1</figref> shows a general overview of an example of a smartcard chip,</p>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. 2</figref> contains an example schematic representation of smartcard memory in an issuer mode,</p>
<p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. 3</figref> contains an example schematic representation of smartcard memory in a customization mode,</p>
<p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. 4</figref> contains a flowchart illustrating an embodiment of a process of the smartcard according to the invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DETAILED DESCRIPTION </heading>
<p id="p-0033" num="0032">Software Provided to Manufacturer for Masking</p>
<p id="p-0034" num="0033">According to the invention, the client may deliver only a part of the software to be masked in ROM to the manufacturer. In addition the client provides pre-customization information which is intended to be stored in EEPROM.</p>
<p id="p-0035" num="0034">The delivered part of software is designed to accept only one single command when executed, i.e. to accept unlocking data. One advantage of providing a part of the software only is that the masked chip does not contain a final software which responds to the client specifications, as was the case in prior art.</p>
<p id="p-0036" num="0035">Hence the risk of producing illegal copies of the full software according to client's specifications departing from software provided to the manufacturer is practically eliminated, because the manufacturer possesses only a part of the software. This reduces the degree of trust that must be attributed to the manufacturer.</p>
<p id="p-0037" num="0036">The pre-customization information intended to be stored in EEPROM corresponds to customization software encrypted using an unlocking key. The customization software may be obtained by decrypting the pre-customization information. The latter decrypting requires to execute the delivered part of the software and thus to input the unlocking key which is known to the client only.</p>
<p id="p-0038" num="0037">This way the manufacturer never gets to know the unlocking key which is required for executing the only available command of the part of software. The risk of fraudulous manipulation of the unlocking key is considerably reduced. The risk of theft of the software and pre-customization information is virtually eliminated since due to the unavailability of the unlocking key, the software may not be executed.</p>
<p id="p-0039" num="0038">It is understood that the masked chip with the part of software and the encrypted customization software, may receive and execute a limited number of service commands that do not require the unlocking key, including for example a RESET command, a command for writing a serial number or an electrical test command of the chip. These commands are necessary to test the smartcard between various steps of the production process. These commands are not specific to the software provided by the client.</p>
<p id="p-0040" num="0039">The chip is masked using conventional technology as is well known in the art.</p>
<p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. 2</figref> contains a schematic representation of the ROM and EEPROM on a masked chip. The ROM contains the delivered part of software <b>200</b>. The EEPROM contains pre-customization information, i.e., the customization software <b>201</b> which is encrypted.</p>
<p id="p-0042" num="0041">The masked chip leaves the manufacturer is an Issuer mode, i.e., a mode in which the chip may only receive commands that do not require the unlocking key and execute one command which requires the unlocking key ; the masked chip is transferred to a card mounter.</p>
<p id="p-0043" num="0042">Card Mounter Processing</p>
<p id="p-0044" num="0043">The card mounter receives a wafer carrying masked smartcard chips from the manufacturer. The chips are separated from the wafer and mounted on a smartcard support is a manner well known from prior art.</p>
<p id="p-0045" num="0044">The only executable commands that the card mounter may send to the smartcard chip and execute, are the ones which are accepted in the Issuer mode and do not require the unlocking key. Typically the card mounter will perform an electrical test of the chip in order to check if the chip is defect and must be discarded from mounting.</p>
<p id="p-0046" num="0045">The card mounter may at the request of the client use the appropriate command to write a serial number to the smartcard chip.</p>
<p id="p-0047" num="0046">The card mounter may not perform any other manipulation of the software stored in the ROM and EEPROM of the chip, since this would require the knowledge of the unlocking key. Consequently the smartcard leaves the card mounter with the chip being in the same state as when it was received by the card mounter.</p>
<p id="p-0048" num="0047">Optionally the card mounter may perform any steps of personalisation of the smartcard support itself, e.g., such as printing on the card surface.</p>
<p id="p-0049" num="0048">The processing by the card mounter is greatly simplified as compared to prior art since no SAM is used anymore.</p>
<p id="p-0050" num="0049">Final Customization of the Smartcard</p>
<p id="p-0051" num="0050">The smartcard in Issuer mode needs to undergo a number of processing steps in order to be customized and to become operational for an end user. These customization steps are typically performed by the client who detains the unlocking key.</p>
<p id="p-0052" num="0051">The customization steps comprise at least the following: executing the masked software and adding missing parts of the software to the masked part of the software in order to obtain the final software according to client specifications. During the customization steps, the smartcard will exit the Issuer mode and switch to Customization and User modes. These will now be described in more detail.</p>
<p id="p-0053" num="0052">It is understood that the smartcard is connected to client's control apparatus and may receive signals through its IO interface. The technology for sending and receiving signals, and for handling data in memories of the smartcard is commonly known in the state of the art and will not be described here any further.</p>
<p id="p-0054" num="0053">Enabling Customization</p>
<p id="p-0055" num="0054">The only command (apart from the service commands) which is accepted when executing the masked part of software <b>200</b> in ROM requires the input of the unlocking key.</p>
<p id="p-0056" num="0055">After inputting the unlocking key, the software processes the pre-customization information <b>201</b> in the EEPROM by decrypting it using the unlocking key and obtaining the customization software contained therein.</p>
<p id="p-0057" num="0056">Furthermore a hash code is required for obtaining the customization software. The hash code is used to verify an integrity of the customization software code. The hash code is input during execution of the masked part of software <b>200</b> and compared to a customization hash code resulting from the decrypted customization software. In case the hash code is different from the customization hash code, processing of the pre-customization information is interrupted and the smartcard returns in an initial Issuer mode.</p>
<p id="p-0058" num="0057">In case the hash code matches the customization hash code, the customization software in stored in a block <b>300</b> of the EEPROM (see <figref idref="DRAWINGS">FIG. 3</figref>).</p>
<p id="p-0059" num="0058">Alternatively the customization software could also be stored in any other available memory such as the RAM memory of the smartcard.</p>
<p id="p-0060" num="0059">At this stage the smartcard is said to be in the Customization mode.</p>
<p id="p-0061" num="0060">Execution of the Customization Software</p>
<p id="p-0062" num="0061">The execution of the Customization software is part of the customization that takes place while the smartcard is in the Customization mode. The Customization software at least allows to accept input code or data from the client and to write this code or data into EEPROM. This allows to add software and complete the part of the software that is masked in the ROM and EEPROM.</p>
<p id="p-0063" num="0062">The customization software may, for example, input following types of data:</p>
<p id="p-0064" num="0063">a vector table <b>301</b>. This data contains information of address locations in ROM or other parts of the smartcard memory where executable commands may be found. This may among others concern ROM addresses of the software <b>200</b> at which commands were inserted during the masking. The vector table <b>301</b> therewith allows to effectively execute the software <b>200</b>;</p>
<p id="p-0065" num="0064">additional software <b>302</b>. This data completes the initially masked software <b>200</b> and brings the smartcard software in conformity with clients specifications. The additional software may for example contain confidential code which should not be disclosed to the chip manufacturer;</p>
<p id="p-0066" num="0065">software updates <b>303</b>. This data relates to amendments brought to clients software. The software updates <b>303</b> enable an efficient way of modifying the software after masking of the chip. In prior art the whole software was masked in ROM and could not be modified after leaving the chip manufacturer. In a similar fashion, the software updates <b>303</b> may add functionality by implementing new commands. Hence a card may easily be customized by the client according to technical requirements or to customer requirements, without modifying the initial masking process. This provides a great amount of flexibility for the client.</p>
<p id="p-0067" num="0066">Entering User Mode</p>
<p id="p-0068" num="0067">mode finishes by entering the User mode. This is the last step of the Customization mode at which a determined command stored in ROM, and possibly activated during the customization mode, is executed. The determined command erases the customization information <b>201</b> and the customization software <b>300</b>. After execution of the determined command it becomes impossible to write new data into EEPROM, except for operations which are managed by applications resident on the smartcard.</p>
<p id="p-0069" num="0068">In User mode the smartcard is ready to be dispatched to final users.</p>
<p id="p-0070" num="0069">Optionally the client may have designed the software on the smartcard to enable an access for customization in User mode by using the process known from prior art. This type of customization may for example require a SAM.</p>
<p id="p-0071" num="0070">Referring to <figref idref="DRAWINGS">FIG. 4</figref>, a flow chart gives an overview of specifications that apply to input received by the smartcard in the Issuer and/or User modes. The card is initially tested electrically in boxes <b>400</b>-<b>401</b>, and thereafter goes into wait cycles, expecting an input in box <b>402</b>. After receiving an input it is checked in <b>403</b> whether the input corresponds to an unlocking data, i.e. unlocking key and hash code. If this is the case a further check <b>404</b> is performed to verify that the unlocking data is valid, e.g. a decrypting of the pre-customization information is attempted and the hash code is compared to the resulting customization hash code (not shown in <figref idref="DRAWINGS">FIG. 4</figref>). In case the hash codes match, the corresponding command is further processed in <b>404</b>. In this particular case, the customization software is stored into memory (not shown). A status of command execution is generated in <b>406</b> and the card returns to execution of box <b>402</b>.</p>
<p id="p-0072" num="0071">If in box <b>404</b>, the unlocking data is found to be invalid, or if in box <b>403</b> the input is not identified as unlocking data, the smartcard appropriately performs checks <b>407</b>-<b>410</b> to determine which mode the card is in (Issuer or User) and if the input correspond to a valid command of these modes. If at all possible, the command corresponding to the input is executed in <b>405</b>. In all cases the processing goes through the generation of a status of command execution in box <b>406</b> and subsequently to the execution of box <b>402</b>, i.e., to wait cycles.</p>
<p id="p-0073" num="0072">Referring again to <figref idref="DRAWINGS">FIG. 3</figref>, the current status of the mode, i.e., Issuer, Customization or User may be stored in a part <b>304</b> of the EEPROM memory dedicated to this information. It is possible to improve the overall security level of the customization process by using a One Time Programming type of memory for part <b>304</b>, because every step of the customization process leaves a permanent trace in the chip OTP memory. The OTP memory may be checked by the executed software to make sure that a customization step is only undertaken as planned, e.g., customization mode may only be entered once after Issuer mode.</p>
<p id="p-0074" num="0073">As compared to prior art the inventive method described herein eliminates the need for a SAM at customization of the card by the manufacturer and/or the card mounter. Hence the inventive method appears to reduce the complexity of work to be done by the manufacturer and/or the card mounter.</p>
<p id="p-0075" num="0074">The invention may be used in particular also with smartcard chips that comprise hardware specifically designed for the customer as opposed to a standard design. The invention makes the smartcard chip useless as long as it has not been customized by the client. Hence the risk that the smartcard is stolen from the manufacturer is very low since the card is of no use without the unlocking key. This improves protection of the specific hardware design against theft.</p>
<p id="p-0076" num="0075">Having described preferred embodiments of the invention with reference to the accompanying drawings, it is to be understood that the invention is not limited to these precise embodiments and that various changes and modifications could be effected therein by a person skilled in the art without departing from the spirit or scope of the invention as defined in the appended claims.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A smartcard chip for use in the production of a customized smartcard, the smartcard chip comprising:
<claim-text>an input device configured to obtain input from a client comprising an unlocking key;</claim-text>
<claim-text>a first memory having a masked software portion permanently stored therein, wherein the masked software, when executed, is configured to accept a command comprising the unlocking key;</claim-text>
<claim-text>a second memory having customization software stored therein, wherein the customization software is encrypted with the unlocking key; and</claim-text>
<claim-text>a processor configured to:
<claim-text>execute the masked software,</claim-text>
<claim-text>accept the unlocking key via the input device, and</claim-text>
<claim-text>decrypt and execute the customization software using the inputted unlocking key,</claim-text>
<claim-text>wherein the customization software, when executed, allows the client to input at least one portion of software that is added to the masked software portion to obtain a completed software,</claim-text>
<claim-text>wherein the completed software customizes the smartcard for the client.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The smartcard chip according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, in which the first memory is a Read Only Memory device and the second memory a rewritable memory device.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. A method for customizing a smartcard chip with a software during production of a customized smartcard comprising:
<claim-text>masking the smartcard chip by storing a first masked software portion in a first memory and an encrypted customization software in a second memory,</claim-text>
<claim-text>wherein the first masked software portion, when executed, is configured to accept a command comprising an unlocking key;</claim-text>
<claim-text>executing the first part of the masked software to obtain the unlocking key from a client;</claim-text>
<claim-text>decrypting and executing the encrypted customization software using the unlocking key, wherein the customization software, when executed, allows the client to input a second portion of software that is added to the masked software portion to obtain a completed software, and</claim-text>
<claim-text>wherein the completed software customizes the smartcard for the client.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method for customizing according to <claim-ref idref="CLM-00003">claim 3</claim-ref>, further comprising:
<claim-text>storing the decrypted customization software in the smartcard memory; and</claim-text>
<claim-text>storing the second portion of the software into the first memory.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method for customizing according to <claim-ref idref="CLM-00004">claim 4</claim-ref>, further comprising:
<claim-text>erasing the encrypted and the decrypted customization software from the second memory.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method for customizing according to <claim-ref idref="CLM-00004">claim 4</claim-ref>, further comprising:
<claim-text>executing the completed software.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method for customizing according to <claim-ref idref="CLM-00005">claim 5</claim-ref>, further comprising: executing the completed software.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method for customizing according to <claim-ref idref="CLM-00004">claim 4</claim-ref>, further comprising:
<claim-text>inputting at the input port software amendments to the first masked software portion;</claim-text>
<claim-text>storing the input software amendments in the second memory.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method for customizing according to <claim-ref idref="CLM-00003">claim 3</claim-ref>, further comprising:
<claim-text>mounting the smartcard chip on a smartcard support.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. A smartcard comprising a smartcard chip according to <claim-ref idref="CLM-00001">claim 1</claim-ref>.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. A smartcard chip for use in the production of a customized smartcard, the smartcard chip comprising:
<claim-text>an input device configured to obtain input from a client comprising an unlocking key;</claim-text>
<claim-text>a first memory having a first masked software permanently stored therein, wherein the first masked software, when executed, is configured to accept a command comprising the unlocking key;</claim-text>
<claim-text>a second memory having an encrypted customization software stored therein, wherein the customization software is encrypted with the unlocking key; and</claim-text>
<claim-text>a processor configured to:</claim-text>
<claim-text>execute the masked portion of the software,</claim-text>
<claim-text>accept the unlocking key via the input device, and</claim-text>
<claim-text>decrypt and execute the encrypted customization software,
<claim-text>wherein the first software comprises only part of the software of the customized smartcard, and the customization software is adapted to, during execution, accept code or data via the input means, and write the code or data into the second memory, the code or data being complementary to the first masked software, to obtain a completed software, wherein the completed software customizes the smartcard for the client.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The smartcard chip according to <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the first masked software without the unlocking key only accepts service commands, and with the unlocking key only accepts a command to decrypt the customization software.</claim-text>
</claim>
</claims>
</us-patent-grant>
