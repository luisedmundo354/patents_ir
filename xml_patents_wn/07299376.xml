<us-patent-grant lang="EN" dtd-version="v4.2 2006-08-23" file="US07299376-20071120.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20071106" date-publ="20071120">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>07299376</doc-number>
<kind>B2</kind>
<date>20071120</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>10925852</doc-number>
<date>20040825</date>
</document-id>
</application-reference>
<us-application-series-code>10</us-application-series-code>
<us-term-of-grant>
<us-term-extension>472</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>11</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>714  6</main-classification>
</classification-national>
<invention-title id="d0e53">Apparatus, system, and method for verifying backup data</invention-title>
<references-cited>
<citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5566297</doc-number>
<kind>A</kind>
<name>Devarakonda et al.</name>
<date>19961000</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>39518213</main-classification></classification-national>
</citation>
<citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5592618</doc-number>
<kind>A</kind>
<name>Micka et al.</name>
<date>19970100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714 54</main-classification></classification-national>
</citation>
<citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>5625699</doc-number>
<kind>A</kind>
<name>Yamada</name>
<date>19970400</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>395621</main-classification></classification-national>
</citation>
<citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>6035412</doc-number>
<kind>A</kind>
<name>Tamer et al.</name>
<date>20000300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714  6</main-classification></classification-national>
</citation>
<citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>6154877</doc-number>
<kind>A</kind>
<name>Ramkumar et al.</name>
<date>20001100</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>717 11</main-classification></classification-national>
</citation>
<citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>6249883</doc-number>
<kind>B1</kind>
<name>Cassidy et al.</name>
<date>20010600</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>714 42</main-classification></classification-national>
</citation>
<citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>6269406</doc-number>
<kind>B1</kind>
<name>Dutcher et al.</name>
<date>20010700</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>709248</main-classification></classification-national>
</citation>
<citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>6314501</doc-number>
<kind>B1</kind>
<name>Gulick et al.</name>
<date>20011100</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>711153</main-classification></classification-national>
</citation>
<citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>6477583</doc-number>
<kind>B1</kind>
<name>Zayas et al.</name>
<date>20021100</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>709248</main-classification></classification-national>
</citation>
<citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>6671688</doc-number>
<kind>B1</kind>
<name>Nikols et al.</name>
<date>20031200</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>707 10</main-classification></classification-national>
</citation>
<citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>6691245</doc-number>
<kind>B1</kind>
<name>DeKoning</name>
<date>20040200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714  6</main-classification></classification-national>
</citation>
<citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>6742138</doc-number>
<kind>B1</kind>
<name>Gagne et al.</name>
<date>20040500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714  6</main-classification></classification-national>
</citation>
<citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>6948089</doc-number>
<kind>B2</kind>
<name>Fujibayashi</name>
<date>20050900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714  6</main-classification></classification-national>
</citation>
<citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>7065589</doc-number>
<kind>B2</kind>
<name>Yamagami</name>
<date>20060600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709246</main-classification></classification-national>
</citation>
<citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>7120769</doc-number>
<kind>B2</kind>
<name>Yagawa et al.</name>
<date>20061000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711162</main-classification></classification-national>
</citation>
<citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>2002/0032883</doc-number>
<kind>A1</kind>
<name>Kampe et al.</name>
<date>20020300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714 16</main-classification></classification-national>
</citation>
<citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>2003/0172158</doc-number>
<kind>A1</kind>
<name>Pillai et al.</name>
<date>20030900</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>709225</main-classification></classification-national>
</citation>
<citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>2004/0260899</doc-number>
<kind>A1</kind>
<name>Kern et al.</name>
<date>20041200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711162</main-classification></classification-national>
</citation>
<citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>2006/0048002</doc-number>
<kind>A1</kind>
<name>Kodi et al.</name>
<date>20060300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714 13</main-classification></classification-national>
</citation>
<citation>
<patcit num="00020">
<document-id>
<country>EP</country>
<doc-number>1 145 128</doc-number>
<date>19991200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00021">
<document-id>
<country>EP</country>
<doc-number>1 164 484</doc-number>
<date>20011200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00022">
<document-id>
<country>WO</country>
<doc-number>WO 99/57649</doc-number>
<date>19991100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00023">
<document-id>
<country>WO</country>
<doc-number>WO 01/67247</doc-number>
<date>20010900</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00024">
<document-id>
<country>WO</country>
<doc-number>WO 03/003209</doc-number>
<date>20030100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00025">
<document-id>
<country>WO</country>
<doc-number>WO 03/030449</doc-number>
<date>20030400</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00026">
<document-id>
<country>WO</country>
<doc-number>WO 03/094056</doc-number>
<date>20031100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
</references-cited>
<number-of-claims>22</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>714  6</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>8</number-of-drawing-sheets>
<number-of-figures>8</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20060048002</doc-number>
<kind>A1</kind>
<date>20060302</date>
</document-id>
</related-publication>
</us-related-documents>
<parties>
<applicants>
<applicant sequence="001" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Kodi</last-name>
<first-name>Sathees Babu</first-name>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="002" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Palapudi</last-name>
<first-name>Sriram</first-name>
<address>
<city>Santa Clara</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
</applicants>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Kunzler &amp; McKenzie</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</parties>
<assignees>
<assignee>
<addressbook>
<orgname>International Business Machines Corporation</orgname>
<role>02</role>
<address>
<city>Armonk</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Bonzo</last-name>
<first-name>Bryce P.</first-name>
<department>2113</department>
</primary-examiner>
<assistant-examiner>
<last-name>Riad</last-name>
<first-name>Amine</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">An apparatus, system, and method are disclosed for verifying backup data. A storage mapping module maps storage data that is to be backed up to an application module. A storage copy module copies the storage data to a backup copy and a backup copy module copies the backup copy to a verification copy. The backup copy and the verification copy are identical copies of an instance of the storage data. A verification mapping module maps the verification copy to the application module. A verification module verifies the verification copy using the application module. If the verification copy is valid, the backup copy is also valid. A control module may mark the backup copy as valid.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="227.58mm" wi="426.55mm" file="US07299376-20071120-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="98.04mm" wi="117.94mm" file="US07299376-20071120-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="222.17mm" wi="171.20mm" file="US07299376-20071120-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="102.02mm" wi="166.45mm" file="US07299376-20071120-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="237.41mm" wi="166.29mm" file="US07299376-20071120-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="240.45mm" wi="156.80mm" file="US07299376-20071120-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="242.32mm" wi="157.48mm" file="US07299376-20071120-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="216.58mm" wi="114.47mm" file="US07299376-20071120-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="98.04mm" wi="132.08mm" file="US07299376-20071120-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0002" num="0001">1. Field of the Invention</p>
<p id="p-0003" num="0002">This invention relates to verifying backup copies and more particularly relates to verifying a backup copy using a verification copy of the backup copy.</p>
<p id="p-0004" num="0003">2. Description of the Related Art</p>
<p id="p-0005" num="0004">A data processing system such as a computer or a server network typically includes a storage system for storing data. The storage system may be an array of hard disks, a library of removable storage media such as magnetic tape, an optical storage device, or the like. The data processing system often backs up storage data so that a copy of the storage data may be recovered if the storage data is lost or corrupted, or if a user needs to recover an earlier instance of the storage data. The user recovers the backup data by retrieving or copying the backup copy to the storage system and using the retrieved backup copy as the desired instance of the storage data.</p>
<p id="p-0006" num="0005">The data processing system typically backs up the storage data by copying the storage data to backup copy. <figref idref="DRAWINGS">FIG. 1</figref> illustrates a storage data backup <b>100</b>. Storage data <b>105</b> is copied to a backup copy <b>110</b>. The backup copy <b>110</b> is identical to the storage data <b>105</b> at an instance of time. Typically the backup copy <b>110</b> is relied on as a valid copy of the storage data <b>105</b> because the backup copy <b>110</b> is identical to an instance of the storage data <b>105</b>.</p>
<p id="p-0007" num="0006">Unfortunately, the backup copy <b>110</b> may not always be used to recover a storage data <b>105</b> instance from the backup copy <b>110</b> because the storage data <b>105</b> instance may be unusable to an application module such as a database application program that attempts to load and use the storage data <b>105</b> instance. For example, the storage data <b>105</b> instance may temporarily include data errors that prevent an application module from initially loading the storage data <b>105</b> instance. The application module can use the storage data <b>105</b> instance with the data errors if the application module is already using the storage data <b>105</b> instance. Contextual information may exist in an application module using the storage data <b>105</b> instance allow the application module to use the storage data <b>105</b> instance. In addition, the application module may subsequently resolve and remove the data errors. Yet because the contextual information is missing when the application module attempts to load the storage data <b>105</b> instance, the application module is unable to successfully load and use the storage data <b>105</b> instance. Because some storage data <b>105</b> instances cannot be loaded and used by an application module, not all backup copies <b>110</b> of storage data instances can be used to recover storage data.</p>
<p id="p-0008" num="0007">From the foregoing discussion, it should be apparent that a need exists for an apparatus, system, and method that verify backup copies. Beneficially, such an apparatus, system, and method would assure that backup copies can be successfully loaded and used by an application module.</p>
<heading id="h-0002" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0009" num="0008">The present invention has been developed in response to the present state of the art, and in particular, in response to the problems and needs in the art that have not yet been fully solved by currently available backup data verification methods. Accordingly, the present invention has been developed to provide an apparatus, system, and method for verifying backup data that overcome many or all of the above-discussed shortcomings in the art.</p>
<p id="p-0010" num="0009">The apparatus to verify backup data is provided with a logic unit containing a plurality of modules configured to functionally execute the necessary steps of verifying storage data backup copies. These modules in the described embodiments include a storage mapping module, a storage copy module, a backup copy module, a verification mapping module, and a verification module.</p>
<p id="p-0011" num="0010">The storage mapping module is configured to map storage data to an application module. As used herein, mapping refers to associating data such as files, databases and the like with each application module needed to load and use the data. The application module may be a database application program, a data file management program, and the like. In one embodiment, the storage mapping module maps the storage data to a plurality of application modules. The application module is configured to verify the storage data. In one embodiment, the application module verifies the storage data by successfully loading the storage data. The application module may also be configured to use the storage data.</p>
<p id="p-0012" num="0011">The storage copy module is configured to copy the storage data to a backup copy. The backup copy represents an instance in time of the storage data. The backup copy module copies the backup copy to a verification copy. Both the backup copy and the verification copy are identical copies of the storage data instance. The verification mapping module maps the verification copy to the application module. The mapping to the application module employs the storage mapping module's mapping of the storage data to the application module. The verification module verifies the verification copy using the first application module. In one embodiment, the application module verifies the storage data by successfully loading the verification copy. If the verification copy is verified, the backup copy is also verified as the backup copy is identical to the verification copy. The backup copy is not directly verified to prevent inadvertent corruption.</p>
<p id="p-0013" num="0012">In one embodiment, the apparatus further comprises a control module. The control module marks the backup copy as verified if the verification copy is valid. In a certain embodiment, the control module copies the backup copy to an archive copy. The apparatus verifies the backup copy as valid before the apparatus is relied on as a valid copy of the storage data.</p>
<p id="p-0014" num="0013">A system of the present invention is also presented to verify a backup copy. The system may be embodied in a data processing system. In particular, the system, in one embodiment, includes a storage system configured to store data and a data processing device including an input/output (“I/O”) module, a memory module, a processor, a storage mapping module, a storage copy module, a backup copy module, a verification mapping module, and a verification module. The system may also comprise an identity module.</p>
<p id="p-0015" num="0014">The storage system stores storage data. The data processing device communicates with the storage system through the I/O module. The identity module identifies the storage data on the storage system. In one embodiment, the identity module identifies the storage data from parameters supplied by a user. The storage mapping module maps the storage data to an application module. In one embodiment, the application module resides on the memory module. The storage copy module copies the storage data to a backup copy and the backup copy module copies the backup copy to a verification copy. The verification mapping module maps the verification copy to the application module. The verification module verifies the verification copy using the application module. The system verifies the backup copy without compromising the backup copy by manipulating the backup copy. In addition the system may verify the backup copy using the application modules normally used with the storage data.</p>
<p id="p-0016" num="0015">A method of the present invention is also presented for verifying backup data. The method in the disclosed embodiments substantially includes the steps necessary to carry out the functions presented above with respect to the operation of the described apparatus and system. In one embodiment, the method includes identifying the storage data, mapping the storage data to an application module, copying the storage data to a backup copy, copying the backup copy to a verification copy, mapping the verification copy to the application module, and verifying the verification copy. The method also may include marking the backup copy as verified if the verification copy is verified.</p>
<p id="p-0017" num="0016">An identity module identifies storage data and a storage mapping module maps the storage data to an application module. A storage copy module copies a first instance of the storage data to a backup copy and a backup copy module copies the backup data to a verification copy. A verification mapping module maps the verification copy to the application module and a verification module verifies the verification data using the application module.</p>
<p id="p-0018" num="0017">In one embodiment, if the verification copy is not valid, the storage copy module copies a second instance of the storage data to the backup copy. The backup copy module copies the backup copy of the second storage data instance to the verification copy and the verification mapping module maps the verification copy of the second storage data instance to the application module. The verification module verifies the verification copy of the second storage data instance.</p>
<p id="p-0019" num="0018">If the verification copy is again not valid, the method repeats until a storage data instance is verified as valid. In one embodiment, method repeatedly verifies storage data instances until a storage data instance is verified or until a specified number of storage data instances are found to be invalid by the verification module.</p>
<p id="p-0020" num="0019">Reference throughout this specification to features, advantages, or similar language does not imply that all of the features and advantages that may be realized with the present invention should be or are in any single embodiment of the invention. Rather, language referring to the features and advantages is understood to mean that a specific feature, advantage, or characteristic described in connection with an embodiment is included in at least one embodiment of the present invention. Thus, discussion of the features and advantages, and similar language, throughout this specification may, but do not necessarily, refer to the same embodiment.</p>
<p id="p-0021" num="0020">Furthermore, the described features, advantages, and characteristics of the invention may be combined in any suitable manner in one or more embodiments. One skilled in the relevant art will recognize that the invention can be practiced without one or more of the specific features or advantages of a particular embodiment. In other instances, additional features and advantages may be recognized in certain embodiments that may not be present in all embodiments of the invention.</p>
<p id="p-0022" num="0021">The present invention verifies a backup copy of storage data as valid using a verification copy mapped to an application module associated with the storage data. The present invention prevents invalid backup copies from being relied on as valid backup copies. These features and advantages of the present invention will become more fully apparent from the following description and appended claims, or may be learned by the practice of the invention as set forth hereinafter.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0023" num="0022">In order that the advantages of the invention will be readily understood, a more particular description of the invention briefly described above will be rendered by reference to specific embodiments that are illustrated in the appended drawings. Understanding that these drawings depict only typical embodiments of the invention and are not therefore to be considered to be limiting of its scope, the invention will be described and explained with additional specificity and detail through the use of the accompanying drawings, in which:</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 1</figref> is a schematic block diagram illustrating one embodiment of a storage data backup;</p>
<p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. 2</figref> is a schematic block diagram illustrating one embodiment of a verification system of the present invention;</p>
<p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. 3</figref> is a schematic block diagram illustrating one embodiment of a verification apparatus in accordance with the present invention;</p>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. 4</figref> is a schematic block diagram illustrating one embodiment of a backup system of the present invention;</p>
<p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. 5</figref> is a schematic flow chart diagram illustrating one embodiment of a backup verification method in accordance with the present invention;</p>
<p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. 6</figref> is a schematic block diagram illustrating one embodiment of verification dataflow in the present invention;</p>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. 7</figref> is a schematic block diagram illustrating one embodiment of data to application module mapping of the present invention; and</p>
<p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. 8</figref> is a schematic block diagram illustrating one embodiment of an alternate verification apparatus of the present invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION OF THE INVENTION</heading>
<p id="p-0032" num="0031">Many of the functional units described in this specification have been labeled as modules, in order to more particularly emphasize their implementation independence. For example, a module may be implemented as a hardware circuit comprising custom VLSI circuits or gate arrays, off-the-shelf semiconductors such as logic chips, transistors, or other discrete components. A module may also be implemented in programmable hardware devices such as field programmable gate arrays, programmable array logic, programmable logic devices or the like.</p>
<p id="p-0033" num="0032">Modules may also be implemented in software for execution by various types of processors. An identified module of executable code may, for instance, comprise one or more physical or logical blocks of computer instructions which may, for instance, be organized as an object, procedure, or function. Nevertheless, the executables of an identified module need not be physically located together, but may comprise disparate instructions stored in different locations which, when joined logically together, comprise the module and achieve the stated purpose for the module.</p>
<p id="p-0034" num="0033">Indeed, a module of executable code may be a single instruction, or many instructions, and may even be distributed over several different code segments, among different programs, and across several memory devices. Similarly, operational data may be identified and illustrated herein within modules, and may be embodied in any suitable form and organized within any suitable type of data structure. The operational data may be collected as a single data set, or may be distributed over different locations including over different storage devices, and may exist, at least partially, merely as electronic signals on a system or network.</p>
<p id="p-0035" num="0034">Reference throughout this specification to “one embodiment,” “an embodiment,” or similar language means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus, appearances of the phrases “in one embodiment,” “in an embodiment,” and similar language throughout this specification may, but do not necessarily, all refer to the same embodiment.</p>
<p id="p-0036" num="0035">Furthermore, the described features, structures, or characteristics of the invention may be combined in any suitable manner in one or more embodiments. In the following description, numerous specific details are provided, such as examples of programming, software modules, user selections, network transactions, database queries, database structures, hardware modules, hardware circuits, hardware chips, etc., to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize, however, that the invention can be practiced without one or more of the specific details, or with other methods, components, materials, and so forth. In other instances, well-known structures, materials, or operations are not shown or described in detail to avoid obscuring aspects of the invention.</p>
<p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. 2</figref> is a schematic block diagram illustrating one embodiment of a verification system <b>200</b> of the present invention. The verification system <b>200</b> includes a storage system <b>260</b> and a data processing device <b>265</b> including an input/output (“I/O”) module <b>250</b>, a memory module <b>245</b>, a processor module <b>240</b>, a storage mapping module <b>205</b>, a storage copy module <b>210</b>, a backup copy module <b>215</b>, a verification mapping module <b>220</b>, and a verification module <b>225</b>. In one embodiment, the verification system <b>200</b> also includes a control module <b>230</b> and an identity module <b>235</b>.</p>
<p id="p-0038" num="0037">The data processing device <b>265</b> may be a computer, a network server, an embedded controller or the like. In the depicted embodiment, the data processing device <b>265</b> comprises a processor module <b>240</b> and a memory module <b>245</b> that execute software programs and manipulate data as is well known by those skilled in the art. The storage system <b>260</b> stores storage data <b>105</b>. The storage data <b>105</b> may be a database, data files or the like and may comprise a plurality of data blocks. The data processing device <b>265</b> communicates with the storage system <b>260</b> through the I/O module <b>250</b>, and stores and retrieves data blocks to the storage data <b>105</b>. Because the storage data <b>105</b> may be highly valuable, the verification system <b>100</b> periodically creates a backup copy <b>110</b> of the storage data <b>105</b> so that the storage data <b>105</b> may be recovered if the storage data <b>105</b> is lost or corrupted. For example, the storage data <b>105</b> may become corrupted if invalid data is inadvertently written to the storage data <b>105</b>. The storage data <b>105</b> can be recovered from the backup copy <b>110</b> only if the backup copy <b>110</b> is a valid copy of the storage data <b>105</b>. The verification system <b>100</b> verifies the backup copy <b>110</b> to assure that the backup copy <b>110</b> can be relied on to recover the storage data <b>105</b>.</p>
<p id="p-0039" num="0038">The identity module <b>235</b> identifies the storage data <b>105</b> on the storage system. In one embodiment, the identity module <b>235</b> identifies the storage data <b>105</b> from parameters supplied by a user. For example, the user may supply parameters identifying one or more data files as the storage data <b>105</b>. The storage mapping module <b>205</b> maps the storage data to an application module. As used herein, mapping refers to associating data such as the storage data <b>105</b> with one or more application module configured to manipulate the data. The application module may be a database application program, a data file management program, or the like. In one embodiment, the application module resides on the memory module <b>245</b>. In an alternate embodiment, the application module is stored on the storage system <b>260</b>.</p>
<p id="p-0040" num="0039">The storage copy module <b>210</b> copies the storage data <b>105</b> to a backup copy <b>110</b>. The backup copy <b>110</b> is a copy of an instance in time of the storage data <b>105</b>. The backup copy module <b>215</b> copies the backup copy <b>110</b> to a verification copy <b>270</b>. Both the verification copy <b>270</b> and the backup copy <b>110</b> are identical copies of the storage data <b>105</b> instance. The verification mapping module <b>220</b> maps the verification copy <b>270</b> to the application module using the storage mapping module's <b>205</b> mapping of the storage data <b>105</b> to the application module. The verification module <b>225</b> verifies the verification copy <b>270</b> using the application module. In one embodiment, the verification copy <b>270</b> is valid if the application module successfully loads and uses the verification copy <b>270</b>. The backup copy <b>110</b> cannot be inadvertently corrupted by the verification module <b>225</b> as the verification module <b>225</b> only uses the application module to verify the verification copy <b>270</b>.</p>
<p id="p-0041" num="0040">In one embodiment, if the verification copy is a valid copy, the control module <b>230</b> marks the backup copy <b>110</b> as valid. The verification system <b>100</b> verifies the backup copy <b>110</b> is valid without compromising the backup copy <b>110</b> by manipulating the backup copy <b>110</b>.</p>
<p id="p-0042" num="0041"><figref idref="DRAWINGS">FIG. 3</figref> is a schematic block diagram illustrating one embodiment of a verification apparatus <b>300</b> of the present invention. The identity module <b>235</b> identifies storage data <b>105</b> for backup. The storage mapping module <b>205</b> maps the storage data <b>105</b> to an application module. In one embodiment, the storage mapping module <b>205</b> maps the storage data <b>105</b> to a plurality of application modules. The application module is configured to verify the storage data. In one embodiment, the application module verifies the storage data by successfully loading the storage data. The application module may also be configured to manipulate the storage data <b>105</b>.</p>
<p id="p-0043" num="0042">For example, the application module may be a database application program configured to manipulate data in a database, and the storage data <b>105</b> may be a database containing one or more elements such as data files, data tables, queries, forms, reports, and the like. The database application program may be configured with one or more software processes such as database manipulation programs, query processes, form processes, report processes, and the like. The storage mapping module <b>205</b> maps each element of the database to each element of the database application program required to load and use the database element. Thus a data table, for example, is associated with each software process required to load and use the data table.</p>
<p id="p-0044" num="0043">The storage copy module <b>210</b> is configured to copy the storage data <b>105</b> to a backup copy <b>110</b>. In one embodiment, the storage copy module <b>210</b> creates an application agent <b>305</b>. The application agent <b>305</b> is configured to initiate copying the storage data <b>105</b> to the backup copy <b>110</b> in response to a directive from the storage copy module <b>210</b>. In addition, the application agent <b>305</b> receives notification of completion of the copy and notifies the storage copy module <b>210</b>. The application agent <b>305</b> may complete the copy of the storage data <b>105</b> to the backup copy <b>110</b> independently of the storage copy module <b>210</b>.</p>
<p id="p-0045" num="0044">The backup copy module <b>215</b> copies the backup copy <b>110</b> to a verification copy <b>270</b>. The verification mapping module <b>220</b> maps the verification copy <b>270</b> to the application module. For example, if the verification copy <b>270</b> is a copy of a database and the application module is a database application program, the verification mapping module <b>220</b> maps each element of the database to each element of the database application program required to load and manipulate the database element. The verification mapping module's <b>220</b> mapping to the application module follows the storage mapping module's <b>205</b> mapping of the storage data <b>105</b> to the application module. The verification module <b>225</b> verifies the verification copy <b>270</b> using the application module. In one embodiment, the application module verifies the storage data by successfully loading the verification copy. For example, the verification module <b>225</b> may direct the database application program to load and use a database verification copy <b>270</b>. The verification module <b>225</b> determines the verification copy <b>270</b> is valid if the database application program successfully loads and/or manipulates the verification copy <b>270</b>.</p>
<p id="p-0046" num="0045">If the verification copy <b>270</b> is valid, the backup copy <b>110</b> is also valid as the backup copy <b>110</b> is identical to the verification copy <b>270</b>. The verification apparatus <b>300</b> does not directly verify the backup copy <b>110</b> to prevent inadvertent corruption of the backup copy <b>110</b>. In one embodiment, the verification apparatus <b>300</b> further comprises a control module <b>230</b>. The control module <b>230</b> may mark the backup copy <b>110</b> as valid if the verification copy <b>270</b> is valid. In a certain embodiment, the control module <b>230</b> sets an identifier associated with the backup copy <b>110</b> to mark the backup copy <b>110</b>. For example, the control module <b>230</b> may write a specified code to a data file associated with the backup copy <b>110</b>. The specified code indicates that the backup copy <b>110</b> is valid.</p>
<p id="p-0047" num="0046">In one embodiment, the control module <b>230</b> deletes the backup copy <b>110</b> if the verification copy <b>270</b> is invalid. In a certain embodiment, the control module <b>230</b> copies the valid backup copy <b>110</b> to an archive copy. The verification apparatus <b>300</b> verifies that the backup copy <b>110</b> is valid so that an invalid backup copy <b>110</b> is not relied on.</p>
<p id="p-0048" num="0047"><figref idref="DRAWINGS">FIG. 4</figref> is a schematic block diagram illustrating one embodiment of a backup system <b>400</b> of the present invention. The backup system <b>400</b> includes a production system <b>405</b>, a validation system <b>410</b>, a production storage system <b>415</b>, a validation storage system <b>420</b>, and an archive storage system <b>425</b>. The production system <b>405</b> may be a S/360 3090 manufactured by International Business Machines Corporation (“IBM”) of Armonk, N.Y. and the production storage system <b>415</b> may be an Enterprise Storage System manufactured by IBM. Although one production system <b>405</b> and one production storage system <b>415</b> are depicted, any number of production systems <b>405</b> and production storage systems <b>415</b> may be employed.</p>
<p id="p-0049" num="0048">The production system <b>405</b> manipulates storage data <b>105</b> stored in the production storage system <b>415</b> using an application module such as SAP database software manufactured by SAP AG of Mannheim, Germany. The validation system <b>410</b> may be the data processing device <b>265</b> depicted in <figref idref="DRAWINGS">FIG. 2</figref>. The storage mapping module <b>205</b> of the validation system <b>410</b> maps the storage data <b>105</b> of the production storage system <b>415</b> to the application module. The storage copy module <b>210</b> of the validation system <b>410</b> copies the storage data <b>105</b> to the backup copy <b>110</b> and the backup copy module <b>215</b> of the validation system <b>410</b> copies the backup copy <b>110</b> to the verification copy <b>270</b>. Both the backup copy <b>110</b> and verification copy <b>270</b> reside on the validation storage system <b>220</b>.</p>
<p id="p-0050" num="0049">The verification mapping module <b>220</b> of the validation system <b>410</b> maps the verification copy <b>270</b> to the application module. The verification module <b>225</b> of the validation system <b>410</b> employs the application module to verify the verification copy <b>270</b>. For example, if the application module is SAP database software and the storage data <b>105</b> is a SAP database, the verification module <b>225</b> of the validation system <b>410</b> verifies the verification copy <b>270</b> by loading the SAP database to the SAP database software. If the SAP database loads successful, the validation system <b>410</b> has also verified that the backup copy <b>110</b>. The control module <b>230</b> of the validation system <b>410</b> may copy the backup copy <b>410</b> to an archive copy <b>430</b> of an archive storage system <b>425</b>. For example, the validation system <b>410</b> may copy the backup copy <b>110</b> to a magnetic tape storage media archive copy <b>430</b>. The backup system <b>400</b> verifies that the backup copy <b>110</b> is valid before relying on the backup copy <b>110</b> subsequent data protection operations such as creating an archive copy <b>430</b>.</p>
<p id="p-0051" num="0050">The schematic flow chart diagrams that follow are generally set forth as logical flow chart diagrams. As such, the depicted order and labeled steps are indicative of one embodiment of the presented method. Other steps and methods may be conceived that are equivalent in function, logic, or effect to one or more steps, or portions thereof, of the illustrated method. Additionally, the format and symbology employed are provided to explain the logical steps of the method and are understood not to limit the scope of the method. Although various arrow types and line types may be employed in the flow chart diagrams, they are understood not to limit the scope of the corresponding method. Indeed, some arrows or other connectors may be used to indicate only the logical flow of the method. For instance, an arrow may indicate a waiting or monitoring period of unspecified duration between enumerated steps of the depicted method. Additionally, the order in which a particular method occurs may or may not strictly adhere to the order of the corresponding steps shown.</p>
<p id="p-0052" num="0051"><figref idref="DRAWINGS">FIG. 5</figref> is a schematic flow chart diagram illustrating one embodiment of a backup verification method <b>500</b> in accordance with the present invention. The backup verification method <b>500</b> starts <b>505</b>. The identity module <b>235</b> identifies <b>510</b> storage data <b>105</b> for verification and backup. In one embodiment, the identity module <b>235</b> identifies the storage data <b>105</b> based on user-defined parameters. The parameters may specify one or more files, directories, or storage volumes. For example, a user may specify that all storage data stored in a storage volume be verified and backed up.</p>
<p id="p-0053" num="0052">The storage mapping module <b>205</b> maps <b>515</b> the storage data <b>105</b> to an application module. In one embodiment, the storage mapping module <b>205</b> identifies the type of each file comprising the storage data <b>105</b>. The storage mapping module <b>205</b> associates or maps <b>515</b> each file to the application module required to verify the file. In one embodiment, the application module is the application program used to load and manipulate the file. For example, if a file of the storage data <b>105</b> is an Oracle database created by Oracle database software manufactured by Oracle Corporation of Redwood Shores, Calif., the storage mapping module <b>205</b> maps <b>515</b> the file to each element of the Oracle database software required to load and manipulate the file. In an alternate embodiment, the application module is an application program specifically designed to verify the file of the storage data <b>105</b>.</p>
<p id="p-0054" num="0053">The storage copy module <b>210</b> copies <b>520</b> the storage data <b>105</b> to a backup copy <b>110</b>. The backup copy <b>110</b> is an instance of the storage data <b>105</b>. If the storage copy module <b>210</b> subsequently copies <b>520</b> the storage data <b>105</b> to the backup copy <b>110</b>, the subsequent backup copy <b>110</b> may be a different storage data <b>105</b> instance. In one embodiment, the storage copy module <b>210</b> employs an application agent <b>305</b> to copy <b>520</b> the storage data <b>105</b> to the backup copy <b>110</b>.</p>
<p id="p-0055" num="0054">In one embodiment, the storage copy module <b>210</b> copies <b>520</b> a subset of the storage data <b>105</b> to the backup copy <b>110</b>. The subset comprises one or more modified data blocks of the storage data <b>105</b>. The modified data block may be an incremental backup of a second instance of the storage data <b>105</b>. For example, the storage copy module <b>210</b> may copy <b>520</b> a first instance of the storage data <b>105</b> to the backup copy <b>110</b> and subsequently copy a data block that has been modified subsequent to the backup of a first instance of the storage data <b>105</b> to the backup copy <b>110</b> as an incremental backup. The modified data blocks of the backup copy <b>110</b> of the may be combined with the backup of the first storage data <b>105</b> instance to form a backup copy <b>110</b> of the second storage data <b>105</b> instance.</p>
<p id="p-0056" num="0055">The backup copy module <b>215</b> copies <b>525</b> the backup copy <b>110</b> to the verification copy <b>270</b>. Both the backup copy <b>110</b> and the verification copy <b>270</b> are identical. In one embodiment, the backup copy <b>110</b> and the verification copy <b>270</b> reside on a validation storage system <b>420</b>. In an alternate embodiment, the backup copy <b>110</b> and verification copy <b>270</b> reside on separate storage systems <b>260</b>.</p>
<p id="p-0057" num="0056">The verification mapping module <b>220</b> maps <b>530</b> the verification copy <b>270</b> to the application module using the mapping of the storage data <b>105</b> to the application module of the storage mapping module <b>205</b>. In one embodiment, the application module is an identical but separate instance of the application module that the storage mapping module <b>205</b> mapped <b>515</b> to the storage data <b>105</b>. For example, if the storage mapping module <b>205</b> mapped <b>515</b> the Oracle database to a first instance Oracle database software, the verification mapping module <b>220</b> maps <b>530</b> the verification copy <b>270</b> of the Oracle database to a second identical instance of Oracle database software. In an alternate embodiment, the application module is the same instance of the application module that the storage mapping module <b>205</b> mapped <b>515</b> to the storage data <b>105</b>.</p>
<p id="p-0058" num="0057">The verification module <b>225</b> verifies <b>535</b> the verification copy <b>270</b> using the application module mapped <b>530</b> to the verification copy <b>270</b> by the verification mapping module <b>220</b>. In one embodiment, the verification module <b>225</b> verifies <b>535</b> the verification copy <b>270</b> by loading the verification copy <b>270</b> to the application module. The verification copy <b>270</b> is a valid copy if the application module successfully loads the verification module. For example, the verification module <b>225</b> may direct the Oracle database software to load the Oracle database of the verification copy <b>270</b>. If the Oracle database successfully loads, the verification copy <b>270</b> of the Oracle database is valid. If the Oracle database does not successfully load, the verification copy <b>270</b> is invalid. If the verification copy <b>270</b> is valid, the backup copy <b>110</b> is also valid but if the verification copy <b>270</b> is invalid, the backup copy <b>110</b> is also invalid. Because the backup copy <b>10</b> has not been manipulated or corrupted by the verification module <b>225</b>, the validated backup copy <b>110</b> can be relied on as a valid copy of the storage data <b>105</b>.</p>
<p id="p-0059" num="0058">If the verification module <b>225</b> determines <b>540</b> the verification copy <b>270</b> is valid, the control module <b>230</b> marks <b>545</b> the backup copy <b>110</b> as a valid copy and the method <b>500</b> ends <b>550</b>. In one embodiment, the control module <b>230</b> marks <b>545</b> the backup copy <b>110</b> by setting an identifier associated with the backup copy <b>110</b> to mark the backup copy <b>110</b>. For example, the control module <b>230</b> may create a reference file associated with the backup copy <b>110</b>. The reference file indicates that the backup copy <b>110</b> is valid. In one embodiment, the control module <b>230</b> retains the backup copy <b>110</b> if the verification copy <b>270</b> is valid and deletes the backup copy <b>110</b> if the verification copy <b>270</b> is invalid. In a certain embodiment, the control module <b>230</b> marks <b>545</b> the backup copy as a valid copy by copying the backup copy <b>110</b> to an archive copy <b>430</b>. The archive copy <b>430</b> may reside on an archive storage system <b>425</b> such as a magnetic tape storage system.</p>
<p id="p-0060" num="0059">In one embodiment, if the verification module <b>225</b> determines <b>540</b> the verification copy <b>270</b> is invalid, the control module <b>230</b> determines <b>555</b> if a specified number of storage data <b>105</b> instances have been verified. If the specified number of storage data <b>105</b> instances have not been verified, the identity module <b>235</b> identifies <b>510</b> a subsequent instance of the storage data <b>105</b> for verification and backup. The data errors of the subsequent instance of the storage data <b>105</b> may have been identified and resolved, so that the verification copy <b>270</b> of the subsequent instance of the storage data <b>105</b> may be verified <b>535</b> as valid by the verification module <b>225</b>.</p>
<p id="p-0061" num="0060">If the verification module <b>225</b> determines <b>540</b> the verification copy <b>270</b> is invalid and the control module <b>230</b> determines <b>555</b> the specified number of storage data <b>105</b> instances have been verified, the control module <b>230</b> may log <b>560</b> the failure and terminate the method <b>550</b>. For example, a user may specify verifying up to ten (10) instances of backup copies <b>110</b> of the storage data <b>105</b>. If the control module <b>230</b> determines <b>555</b> a valid verification copy <b>270</b> is not verified in ten (10) instances of the storage data <b>105</b>, the control module <b>230</b> may log <b>560</b> the failure and terminate <b>550</b> the method <b>500</b>. Limiting verification of backup copies <b>110</b> to a specified number of storage data <b>105</b> instances prevents wasting resources verifying storage data <b>105</b> with errors that are unlikely to be repaired. The backup verification method <b>500</b> verifies <b>535</b> a backup copy <b>110</b> is valid by verifying <b>535</b> a verification copy <b>270</b> of the backup copy <b>110</b> is valid before the backup copy <b>110</b> is relied on. The method <b>500</b> may repeatedly verify <b>535</b> instances of the storage data <b>105</b> until a valid backup copy is identified.</p>
<p id="p-0062" num="0061"><figref idref="DRAWINGS">FIG. 6</figref> is a schematic block diagram illustrating one embodiment of verification data flow <b>600</b> in the present invention. The storage copy module <b>210</b> copies <b>605</b> an instance of storage data <b>105</b> to a backup copy <b>110</b>. The backup copy module <b>215</b> copies <b>610</b> the backup copy <b>110</b> to the verification copy <b>270</b>. The backup copy <b>110</b> and the verification copy <b>270</b> are identical copies. The verification mapping module <b>220</b> maps the verification copy <b>270</b> to an application module using the mapping of the storage data <b>105</b> to the application module created by the storage mapping module <b>205</b>, and the verification module <b>225</b> verifies <b>615</b> the verification copy <b>270</b>. If the verification copy <b>270</b> is valid, the backup copy <b>110</b> is also valid. The backup copy <b>110</b> was not verified <b>615</b> directly, so that the backup copy <b>110</b> was not corrupted and can be relied on as an instance of the storage data <b>105</b> that can be loaded and used if the instance of the storage data <b>105</b> must be recovered. The backup copy <b>110</b> is marked <b>620</b> as valid. In addition, the backup copy <b>110</b> may be copied <b>625</b> to an archive copy <b>430</b>.</p>
<p id="p-0063" num="0062"><figref idref="DRAWINGS">FIG. 7</figref> is a schematic block diagram illustrating one embodiment of data to application module mapping <b>700</b> of the present invention. A production system <b>405</b> comprises two first application modules <b>705</b><i>a</i>, <b>705</b><i>b</i>. In one embodiment, the production system <b>405</b> is the production system <b>405</b> depicted in <figref idref="DRAWINGS">FIG. 4</figref>. Although the production system <b>405</b> is depicted with two first application modules <b>705</b><i>a</i>, <b>705</b><i>b</i>, any number of first application modules <b>705</b><i>a</i>, <b>705</b><i>b </i>may be employed. The production system <b>405</b> uses the first application modules <b>705</b><i>a</i>, <b>705</b><i>b </i>to load and manipulate the storage data <b>105</b>.</p>
<p id="p-0064" num="0063">A validation system <b>410</b> also comprises two second application modules <b>710</b><i>b</i>, <b>710</b><i>b</i>. In one embodiment, the validation system <b>410</b> is the validation system <b>410</b> depicted in <figref idref="DRAWINGS">FIG. 4</figref>. Although the validation system <b>410</b> is also depicted with two second application modules <b>710</b><i>a</i>, <b>710</b><i>b</i>, any number of second application modules <b>710</b><i>a</i>, <b>710</b><i>b </i>may be employed. The first A application module <b>705</b><i>a </i>is identical the second A application module <b>710</b><i>a </i>and the first B application module <b>705</b><i>b </i>is identical to the second B application module <b>710</b><i>b</i>. In one embodiment, the validation system <b>410</b> is configured with each application module of the production system <b>405</b>.</p>
<p id="p-0065" num="0064">The storage mapping module <b>205</b> maps <b>515</b> the storage data <b>105</b> to the first application modules <b>705</b><i>a</i>, <b>705</b><i>b </i>of the production system <b>405</b>. The verification mapping module <b>220</b> maps <b>530</b> the verification copy <b>270</b> to the second application modules <b>710</b><i>a</i>, <b>710</b><i>b </i>using the mapping of the storage mapping module <b>205</b>. In one embodiment, the storage mapping module <b>205</b> creates a linked list of all elements in the storage data <b>105</b> and the corresponding first application modules <b>705</b><i>a</i>, <b>705</b><i>b </i>required to verify each element. The verification mapping module <b>220</b> may use the linked list to map the elements of the verification copy <b>270</b> which are copies of the elements of the storage data <b>105</b> to the second application modules <b>710</b><i>a</i>, <b>710</b><i>b </i>of the validation system <b>410</b>. The validation system <b>410</b> may verify <b>535</b> of the verification copy <b>270</b> using the second application modules <b>710</b> which are identical instances of the first application modules <b>705</b>. In addition, the validation system <b>410</b> may verify <b>535</b> the verification copy <b>270</b> without affecting the operation of the production system <b>405</b>.</p>
<p id="p-0066" num="0065"><figref idref="DRAWINGS">FIG. 8</figref> is a schematic block diagram illustrating one embodiment of an alternate verification apparatus <b>800</b> of the present invention. The apparatus <b>800</b> includes a backup mapping module <b>805</b>. The storage copy module <b>210</b> copies <b>520</b> the storage data to a backup copy <b>110</b>. The backup mapping module <b>805</b> maps the backup copy <b>110</b> to an application module. In one embodiment, backup mapping module <b>805</b> resides on a validation system <b>410</b> as depicted in <figref idref="DRAWINGS">FIG. 4</figref>. In addition, the backup mapping module <b>805</b> may map the backup copy <b>110</b> to a first application module <b>705</b><i>a </i>residing on a production system <b>405</b> as depicted in <figref idref="DRAWINGS">FIG. 7</figref>. In an alternate embodiment, the backup mapping module <b>805</b> maps the backup copy <b>110</b> to a second application module <b>710</b> residing on the validation system <b>410</b> as depicted in <figref idref="DRAWINGS">FIG. 7</figref>. The backup mapping module <b>805</b> may map the backup copy <b>110</b> to the second application module <b>710</b> of the validation system <b>410</b> without affecting the first application module <b>705</b> of the production system <b>405</b>.</p>
<p id="p-0067" num="0066">The backup copy module <b>215</b> copies <b>525</b> the backup copy <b>110</b> to the verification copy <b>270</b> and the verification mapping module <b>220</b> maps <b>530</b> the verification copy <b>270</b> to the second application module <b>710</b>. The verification module <b>225</b> verifies <b>535</b> the verification copy <b>270</b> using the second application module <b>710</b> mapped <b>530</b> to the verification copy <b>270</b> and the control module <b>230</b> marks <b>545</b> the backup copy <b>110</b> as valid. The apparatus <b>800</b> maps the backup copy <b>110</b> to an application module and uses the mapping to verify the verification copy <b>270</b> and the backup copy <b>110</b>.</p>
<p id="p-0068" num="0067">The present invention verifies a backup copy <b>110</b> of storage data <b>105</b> as valid using a verification copy <b>270</b> mapped to an application module <b>705</b> associated with the storage data <b>105</b>. The present invention prevents invalid backup copies <b>110</b> from being relied on as valid backup copies <b>110</b>. The present invention may be embodied in other specific forms without departing from its spirit or essential characteristics. The described embodiments are to be considered in all respects only as illustrative and not restrictive. The scope of the invention is, therefore, indicated by the appended claims rather than by the foregoing description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. An apparatus to verify backup data, the apparatus comprising:
<claim-text>a storage mapping module configured to map storage data to a first application module configured to verify the storage data;</claim-text>
<claim-text>a storage copy module configured to copy the storage data to a backup copy;</claim-text>
<claim-text>a backup copy module configured to copy the backup copy to a verification copy;</claim-text>
<claim-text>a verification mapping module configured to map the verification copy to the first application module responsive to the mapping of the storage data to the first application module; and</claim-text>
<claim-text>a verification module configured to verify the verification copy using the first application module and</claim-text>
<claim-text>wherein the verification mapping module maps the verification copy to a second application module configured as an instance of the first application module.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising a control module configured to mark the backup copy as valid if the verification copy is verified by the first application module.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The apparatus of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the storage data is a first storage data instance and wherein the control module is further configured to direct the storage copy module, the backup copy module, the verification mapping module, and the verification module to verify a second storage data instance if the verification copy of the backup copy of the first storage data instance is invalid.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The apparatus of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the control module further directs the verification of a plurality storage data instances until the verification copy of the backup copy of at least one storage data instance is valid or until a specified number of storage data instances have been verified.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The apparatus of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the second application module is configured on a validation system.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising an identity module configured to identify the storage data.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the storage copy module is further configured to copy at least one modified data block configured as a subset of the storage data to the backup copy as an incremental backup, the backup copy module is configured to copy the at least one modified data block of the backup copy as the verification copy, the verification mapping module is configured to map the at least one modified data block of the verification copy to the first application module, and the verification module is configured to verify the at least one modified data block of the verification copy.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising an application agent configured to initiate copying the storage data to the backup copy responsive to a directive from the storage copy module, receive notification of completion of the copy, and notify the storage copy module of the completion of the copy.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. A system to verify backup data, the system comprising:
<claim-text>a storage system configured to store data; and</claim-text>
<claim-text>a data processing device comprising:</claim-text>
<claim-text>an input/output module;</claim-text>
<claim-text>a memory module;</claim-text>
<claim-text>a processor module;</claim-text>
<claim-text>a storage mapping module configured to map storage data to a first application module configured to verify the storage data;</claim-text>
<claim-text>a storage copy module configured to copy the storage data to a backup copy;</claim-text>
<claim-text>a backup copy module configured to copy the backup copy to a verification copy;</claim-text>
<claim-text>a verification mapping module configured to map the verification copy to the first application module responsive to the storage mapping module mapping of the storage data to the first application module; and</claim-text>
<claim-text>a verification module configured to verify the verification copy using the first application module and</claim-text>
<claim-text>wherein the storage data is a first storage data instance and wherein the control module is further configured to direct the storage copy module, the backup copy module, the verification mapping module, and the verification module to verify a second storage data instance if the verification copy of the backup copy of the first storage data instance is invalid.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The system of <claim-ref idref="CLM-00009">claim 9</claim-ref>, the data processing device further comprising a control module configured to mark the backup copy as valid if the verification copy is verified by the first application module.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The system of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the control module further directs the verification of a plurality storage data instances until the verification copy of the backup copy of at least one storage data instance is valid or until a specified number of storage data instances have been verified.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The system of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the verification mapping module maps the verification copy to a second application module configured as an instance of the first application module.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The system of <claim-ref idref="CLM-00009">claim 9</claim-ref>, further comprising an identity module configured to identify the storage data.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The system of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the storage copy module is further configured to copy at least one modified data block configured as a subset of the storage data to the backup copy as an incremental backup, the backup copy module is configured to copy the at least one modified data block of the backup copy as the verification copy, the verification mapping module is configured to map the at least one modified data block of the verification copy to the first application module, and the verification module is configured to verify the at least one modified data block of the verification copy.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. A computer readable storage medium tangibly embodying a program of machine-readable instructions executable by a digital processing apparatus to perform operations to verify backup data, the operations comprising:
<claim-text>mapping storage data to a first application module configured to verify the storage data;</claim-text>
<claim-text>copying the storage data to a backup copy;</claim-text>
<claim-text>copying the backup copy to a verification copy;</claim-text>
<claim-text>mapping the verification copy to the first application module responsive to the mapping of the storage data to the first application module; and</claim-text>
<claim-text>verifying the verification copy using the first application module and;</claim-text>
<claim-text>mapping the verification copy to a second application configured as an instance of the first application module.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The computer readable storage medium of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the instructions further comprise operations to mark the backup copy as valid if the verification copy is verified by the first application module.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The computer readable storage medium of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the storage data is a first storage data instance and wherein the instructions further comprise operations to verify a second storage data instance if the verification copy of the backup copy of the first storage data instance is invalid.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The computer readable storage medium of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the instructions further comprise operations to verify a plurality of storage data instances until the verification copy of the backup copy of at least one storage data instance is valid or until a specified number of storage data instances have been verified.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The computer readable storage medium of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the instructions further comprise operations to identify the storage data.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The computer readable storage medium of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the instructions further comprise operations to copy the backup copy to an archive copy.</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. The computer readable storage medium of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the instructions further comprise operations to create a application agent configured to initiate copying the storage data to the backup copy responsive to a directive from the storage copy module, receive notification of completion of the copy, and notify the storage copy module of the completion of the copy.</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. The computer readable storage medium of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the instructions further comprise operations to copy at least one modified data block configured as a subset of the storage data to the backup copy as an incremental backup, copy the at least one modified data block of the backup copy as the verification copy, map the at least one modified data block of the verification copy to the first application module, verify the at least one modified data block of the verification copy.</claim-text>
</claim>
</claims>
</us-patent-grant>
