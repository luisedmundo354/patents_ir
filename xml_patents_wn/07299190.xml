<us-patent-grant lang="EN" dtd-version="v4.2 2006-08-23" file="US07299190-20071120.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20071106" date-publ="20071120">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>07299190</doc-number>
<kind>B2</kind>
<date>20071120</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>10642551</doc-number>
<date>20030815</date>
</document-id>
</application-reference>
<us-application-series-code>10</us-application-series-code>
<us-term-of-grant>
<us-term-extension>909</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>10</class>
<subclass>L</subclass>
<main-group>19</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>10</class>
<subclass>L</subclass>
<main-group>21</main-group>
<subgroup>00</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>704500</main-classification>
<further-classification>7042001</further-classification>
</classification-national>
<invention-title id="d0e53">Quantization and inverse quantization for audio</invention-title>
<references-cited>
<citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5079547</doc-number>
<kind>A</kind>
<name>Fuchigama et al.</name>
<date>19920100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5260980</doc-number>
<kind>A</kind>
<name>Akagiri et al.</name>
<date>19931100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>5388181</doc-number>
<kind>A</kind>
<name>Anderson et al.</name>
<date>19950200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>5524054</doc-number>
<kind>A</kind>
<name>Spille</name>
<date>19960600</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>5627938</doc-number>
<kind>A</kind>
<name>Johnston</name>
<date>19970500</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>5629780</doc-number>
<kind>A</kind>
<name>Watson</name>
<date>19970500</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>5661755</doc-number>
<kind>A</kind>
<name>Van De Kerkhof et al.</name>
<date>19970800</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>5661823</doc-number>
<kind>A</kind>
<name>Yamauchi et al.</name>
<date>19970800</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>5682152</doc-number>
<kind>A</kind>
<name>Wang et al.</name>
<date>19971000</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>5684920</doc-number>
<kind>A</kind>
<name>Iwakami et al.</name>
<date>19971100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>5686964</doc-number>
<kind>A</kind>
<name>Tabatabai et al.</name>
<date>19971100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>5701346</doc-number>
<kind>A</kind>
<name>Herre et al.</name>
<date>19971200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>5812971</doc-number>
<kind>A</kind>
<name>Herre</name>
<date>19980900</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>5835030</doc-number>
<kind>A</kind>
<name>Tsutsui et al.</name>
<date>19981100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>5845243</doc-number>
<kind>A</kind>
<name>Smart et al.</name>
<date>19981200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>5956674</doc-number>
<kind>A</kind>
<name>Smyth et al.</name>
<date>19990900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>7042001</main-classification></classification-national>
</citation>
<citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>5974380</doc-number>
<kind>A</kind>
<name>Smyth et al.</name>
<date>19991000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>704229</main-classification></classification-national>
</citation>
<citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>5995151</doc-number>
<kind>A</kind>
<name>Naveen et al.</name>
<date>19991100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>6029126</doc-number>
<kind>A</kind>
<name>Malvar</name>
<date>20000200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>6041295</doc-number>
<kind>A</kind>
<name>Hinderks</name>
<date>20000300</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>6058362</doc-number>
<kind>A</kind>
<name>Malvar</name>
<date>20000500</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>6064954</doc-number>
<kind>A</kind>
<name>Cohen et al.</name>
<date>20000500</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>6115688</doc-number>
<kind>A</kind>
<name>Brandenburg et al.</name>
<date>20000900</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00024">
<document-id>
<country>US</country>
<doc-number>6115689</doc-number>
<kind>A</kind>
<name>Malvar</name>
<date>20000900</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00025">
<document-id>
<country>US</country>
<doc-number>6182034</doc-number>
<kind>B1</kind>
<name>Malvar</name>
<date>20010100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00026">
<document-id>
<country>US</country>
<doc-number>6240380</doc-number>
<kind>B1</kind>
<name>Malvar</name>
<date>20010500</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00027">
<document-id>
<country>US</country>
<doc-number>6249614</doc-number>
<kind>B1</kind>
<name>Kolesnik et al.</name>
<date>20010600</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00028">
<document-id>
<country>US</country>
<doc-number>6370502</doc-number>
<kind>B1</kind>
<name>Wu et al.</name>
<date>20020400</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00029">
<document-id>
<country>US</country>
<doc-number>6418405</doc-number>
<kind>B1</kind>
<name>Satyamurti et al.</name>
<date>20020700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>704206</main-classification></classification-national>
</citation>
<citation>
<patcit num="00030">
<document-id>
<country>US</country>
<doc-number>6445739</doc-number>
<kind>B1</kind>
<name>Shen et al.</name>
<date>20020900</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00031">
<document-id>
<country>US</country>
<doc-number>6658162</doc-number>
<kind>B1</kind>
<name>Zeng et al.</name>
<date>20031200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00032">
<document-id>
<country>US</country>
<doc-number>6738074</doc-number>
<kind>B2</kind>
<name>Rao et al.</name>
<date>20040500</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00033">
<document-id>
<country>US</country>
<doc-number>6766293</doc-number>
<kind>B1</kind>
<name>Herre et al.</name>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00034">
<document-id>
<country>US</country>
<doc-number>6771777</doc-number>
<kind>B1</kind>
<name>Gbur et al.</name>
<date>20040800</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00035">
<document-id>
<country>US</country>
<doc-number>6934677</doc-number>
<kind>B2</kind>
<name>Chen et al.</name>
<date>20050800</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00036">
<document-id>
<country>US</country>
<doc-number>7062445</doc-number>
<kind>B2</kind>
<name>Kadatch</name>
<date>20060600</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00037">
<document-id>
<country>US</country>
<doc-number>2002/0143556</doc-number>
<kind>A1</kind>
<name>Kadatch</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00038">
<document-id>
<country>US</country>
<doc-number>2004/0044527</doc-number>
<kind>A1</kind>
<name>Thumpudi et al.</name>
<date>20040300</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00039">
<document-id>
<country>EP</country>
<doc-number>0597649</doc-number>
<date>19940500</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00040">
<document-id>
<country>EP</country>
<doc-number>0669724</doc-number>
<date>19950800</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00041">
<document-id>
<country>EP</country>
<doc-number>0910927</doc-number>
<date>19990400</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00042">
<document-id>
<country>EP</country>
<doc-number>0931386</doc-number>
<date>19990700</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00043">
<document-id>
<country>WO</country>
<doc-number>WO 99/43110</doc-number>
<date>19990800</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00044">
<othercit>Advanced Television Systems Committee, ATSC Standard: Digital Audio Compression (AC-3), Revision A, 140 pp. (1995).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00045">
<othercit>Beerends, “Audio Quality Determination Based on Perceptual Measurement Techniques,” Applications of Digital Signal Processing to Audio and Acoustics, Chapter 1, Ed. Mark Kahrs, Karlheinz Brandenburg, Kluwer Acad. Publ., pp. 1-38 (1998).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00046">
<othercit>Bosi et al., “ISO/IEC MPEG-2 Advanced Audio Coding,” Journal of the Audio Engineering Society, Audio Engineering Society, vol. 45, No. 10, pp. 789-812 (1997).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00047">
<othercit>Caetano et al., “Rate Control Strategy for Embedded Wavelet Video Coders,” Electronics Letters, pp. 1815-1817 (Oct. 14, 1999).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00048">
<othercit>De Luca, “AN1090 Application Note: STA013 MPEG 2.5 Layer III Source Decoder,” STMicroelectronics, 17 pp. (1999).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00049">
<othercit>de Queiroz et al., “Time-Varying Lapped Transforms and Wavelet Packets,” IEEE Transactions on Signal Processing, vol. 41, pp. 3293-3305 (1993).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00050">
<othercit>Dolby Laboratories, “AAC Technology,” 4 pp. [Downloaded from the web site aac-audio.com on World Wide Web on Nov. 21, 2001.].</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00051">
<othercit>Fraunhofer-Gesellschaft, “MPEG Audio Layer-3,” 4 pp. [Downloaded from the World Wide Web on Oct. 24, 2001.].</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00052">
<othercit>Fraunhofer-Gesellschaft, “MPEG-2 AAC,” 3 pp. [Downloaded from the World Wide Web on Oct. 24, 2001.].</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00053">
<othercit>ISO/IEC 13818-7, Information technology—Generic coding of moving pictures and associated audio information—Part 7: Advanced Audio Coding (AAC), 150 pp. (1997).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00054">
<othercit>ITU, Recommendation ITU-R BS 1387, Method for Objective Measurements of Perceived Audio Quality, 89 pp. (1998).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00055">
<othercit>Kondoz, Digital Speech: Coding for Low Bit Rate Communications Systems, “Chapter 3.3: Linear Predictive Modeling of Speech Signals” and “Chapter 4: LPC Parameter Quantisation Using LSFs,” John Wiley &amp; Sons, pp. 42-53 and 79-97 (1994).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00056">
<othercit>Malvar, “Biorthogonal and Nonuniform Lapped Transforms for Transform Coding with Reduced Blocking and Ringing Artifacts,” appeared in IEEE Transactions on Signal Processing, Special Issue on Multirate Systems, Filter Banks, Wavelets, and Applications, vol. 46, 29 pp. (1998).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00057">
<othercit>Malvar, “Lapped Transforms for Efficient Transform/Subband Coding,” IEEE Transactions on Acoustics, Speech and Signal Processing, vol. 38, No. 6, pp. 969-978 (1990).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00058">
<othercit>Malvar, “Signal Processing with Lapped Transforms,” Artech House, Norwood, MA, pp. iv, vii-xi, 175-218, and 353-57 (1992).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00059">
<othercit>OPTICOM GmbH, “Objective Perceptual Measurement,” 14 pp. [Downloaded from the World Wide Web on Oct. 24, 2001.].</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00060">
<othercit>Phamdo, “Speech Compression,” 13 pp. [Downloaded from the World Wide Web on Nov. 25, 2001.].</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00061">
<othercit>Ribas Corbera et al., “Rate Control in DCT Video Coding for Low-Delay Communications,” IEEE Transactions on Circuits and Systems for Video Technology, vol. 9, No. 1, pp. 172-185 (Feb. 1999).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00062">
<othercit>Search Report for European Patent Application No. 03 020 110.7.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00063">
<othercit>Search Report for European Patent Application No. 03 020 111.5.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00064">
<othercit>Shlien, “The Modulated Lapped Transform, Its Time-Varying Forms, and Its Application to Audio Coding Standards,” IEEE Transactions on Speech and Audio Processing, vol. 5, No. 4, pp. 359-366 (Jul. 1997).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00065">
<othercit>Srinivasan et al., “High-Quality Audio Compression Using an Adaptive Wavelet Packet Decomposition and Psychoacoustic Modeling,” IEEE Transactions on Signal Processing, vol. 46, No. 4, pp. 1085-1093 (Apr. 1998).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00066">
<othercit>Terhardt, “Calculating Virtual Pitch,” Hearing Research, 1:155-182 (1979).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00067">
<othercit>Wragg et al., “An Optimised Software Solution for an ARM PoweredTM MP3 Decoder,” 9 pp. [Downloaded from the World Wide Web on Oct. 27, 2001.].</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00068">
<othercit>Zwicker, Psychoakustik, Title Page, Table of Contents, “Teil I: Einfuhrung,” Index, Springer-Verlag, Berlin Heidelberg, New York, pp. II, IX-XI, 1-30, and 157-162 (1982).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00069">
<othercit>Zwicker et al., Das Ohr als Nachrichtenempfä{umlaut over ( )}nger, Title page, Table of Contents, “I: Schallschwingungen,” Index, Hirzel-Verlag, Stuttgart, pp. III, IX-XI, 1-26, and 231-32 (1967).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00070">
<othercit>Brandenburg, “ASPEC Coding”, <i>AES 10</i><sup>th</sup><i>International Conference</i>, pp. 81-90 (1991).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00071">
<othercit>“ISO/IEC 13818-7, Information Technology—Generic Coding of Moving Pictures and Associated Audio Information—Part 7: Advanced Audio Coding (AAC), Technical Corrigendum 1,” 22 pp. (1998).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00072">
<othercit>Jesteadt et al., “Forward Masking as a Function of Frequency, Masker Level, and Signal Delay,” <i>Journal of Acoustical Society of America</i>, 71:950-962 (1982).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00073">
<othercit>Lutfi, “Additivity of Simultaneous Masking,” <i>Journal of Acoustic Soceity of America</i>, 73:262-267 (1983).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00074">
<othercit>Yang et al., “An Inter-Channel Redundancy Removal Approach for High-Quality Multichannel Audio Compression,” in <i>AES 109</i><sup>th</sup><i>Convention</i>, Los Angeles, California, 8 pp. (Sep. 2000).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00075">
<othercit>Wang et al., “A Multichannel Audio Coding Algorithm for Inter-Channel Redundancy Removal,” in <i>AES 100</i><sup>th</sup><i>Convention</i>, Amsterdam, the Netherlands, 6pp. (May 2001).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00076">
<othercit>Yang et al., “Adaptive Karhunen-Loeve Transform for Enhanced Multichannel Audio Coding,” Proc. SPIE vol. 4475, 13 pp., Mathematics of Data/Image Coding, Compression, and Encryption IV San Diego, CA. (Jul. 29-Aug. 3, 2001).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00077">
<othercit>Vaidyanathan, <i>Multirate Systems and Filter Banks</i>, Prentice Hall Signal Processing Series, Cover page, pp. 745-751 (1992).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00078">
<othercit>“MPEG2 Audio for DVD: the Compromise Choice,” 5 pp. (Oct. 1996).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00079">
<othercit>Edler et al., “Perceptual Audio Coding Using a Time-Varying Linear Pre- and Post-Filter,” in <i>AES 109</i><sup>th</sup><i>Convention</i>, Los Angeles, California, 12 pp. (Sep. 2000).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00080">
<othercit>“ISO/IEC 13818-7, Information Technology—Generic Coding of Moving Pictures and Associated Audio Information—Part 7: Advanced Audio Coding (AAC),” 174 pp. (1997).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00081">
<othercit>Wang et al., “EE225a Lecture 13: Karhunen Loève Transform and Discrete Cosine Transform,” Department of EECS, Unversity of California at Berkley, 10 pp. (Mar. 2002).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00082">
<othercit>Meares, D.J., “Matrixed Surround Sound in an MPEG Digital World,” <i>Journal of the Audio Engineering Society</i>, vol. 46, No. 4, 13 pp. (Apr. 1998).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00083">
<othercit>Stuart et al., “Lossless Compression for DVD-Audio,” in <i>AES 9</i><sup>th</sup><i>Regional Convention Tokyo</i>, 4 pp. (1999).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00084">
<othercit>Kuo et al., “A Study of Why Cross Channel Prediction is Not Applicable to Perceptual Audio Coding,” <i>IEEE Signal Processing Letters</i>, vol. 8, No. 9, 3 pp. (Sep. 2001).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00085">
<othercit>Van Assche et al., “Lossless Compression of Pre-Press Image Using a Novel Color Decorrelation Technique,” <i>Proc. SPIE, Very High Resolution and Quality III</i>. vol. 3308, 8 pp. (1998).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00086">
<othercit>Davis, “The AC-3 Multichannel Coder,” Dolby Laboratories, 9 pp. (Downloaded from the World Wide Web on Aug. 15, 2002).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00087">
<othercit>Gibson et al., <i>Digital Compression for Multimedia</i>, Title Page, Contents, “Chapter 7: Frequency Domain Coding,” Morgan Kaufman Publishers, Inc., pp. iii, v-xi, and 227-262 (1998).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00088">
<othercit>Herley et al., “Tilings of the Time-Frequency Plane: Construction of Arbitrary Orthogonal Bases and Fast Tiling Algorithms,” <i>IEEE Transactions on Signal Processing</i>, vol. 41, No. 12, pp. 3341-3359 (1993).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00089">
<othercit>“ISO/IEC 11172-3, Information Technology—Coding of Moving Pictures and Associated Audio for Digital Storage Media at Up to About 1.5 Mbit/s—Part 3: Audio,” 154 pp. (1993).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00090">
<othercit>ITU, Recommendation ITU-R BS 1115, Low Bit-Rate Audio Coding, 9 pp. (1994).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00091">
<othercit>Solari, <i>Digital Video and Audio Compression</i>, Title Page, Contents, “Chapter 8: Sound and Audio,” McGraw-Hill, Inc., pp. iii, v-vi, and 187-211 (1997).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00092">
<othercit>“ATSC Standard: Digital Audio Compression (AC-3), Revision A,” 140 pp. (Aug. 2001).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00093">
<othercit>Chen et al., U.S. Appl. No. 10/017,702, entitled, “Quantization Matrices for Digital Audio,” filed Dec. 14, 2001.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00094">
<othercit>Chen et al., U.S. Appl. No. 10/017,861, entitled, “Techniques for Measurement of Perceptual Audio Quality,” filed Dec. 14, 2001.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00095">
<othercit>Chen et al., U.S. Appl. No. 10/020,708, entitled, “Adaptive Window-Size Selection in Transform Coding,” filed Dec. 14, 2001.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00096">
<othercit>Chen et al., U.S. Appl. No. 10/016,918, entitled, “Quality Improvement Techniques in an Audio Encoder,” filed Dec. 14, 2001.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00097">
<othercit>Chen et al., U.S. Appl. No. 10/017,694, entitled, “Quality and Rate Control Strategy for Digital Audio,” filed Dec. 14, 2001.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
</references-cited>
<number-of-claims>21</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>7042001</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>704500</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>31</number-of-drawing-sheets>
<number-of-figures>51</number-of-figures>
</figures>
<us-related-documents>
<us-provisional-application>
<document-id>
<country>US</country>
<doc-number>60408538</doc-number>
<kind>00</kind>
<date>20020904</date>
</document-id>
</us-provisional-application>
<us-provisional-application>
<document-id>
<country>US</country>
<doc-number>60408517</doc-number>
<kind>00</kind>
<date>20020904</date>
</document-id>
</us-provisional-application>
<us-provisional-application>
<document-id>
<country>US</country>
<doc-number>60408432</doc-number>
<kind>00</kind>
<date>20020904</date>
</document-id>
</us-provisional-application>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20040044527</doc-number>
<kind>A1</kind>
<date>20040304</date>
</document-id>
</related-publication>
</us-related-documents>
<parties>
<applicants>
<applicant sequence="001" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Thumpudi</last-name>
<first-name>Naveen</first-name>
<address>
<city>Sammamish</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="002" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Chen</last-name>
<first-name>Wei-Ge</first-name>
<address>
<city>Issaquah</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
</applicants>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Klarquist Sparkman, LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</parties>
<assignees>
<assignee>
<addressbook>
<orgname>Microsoft Corporation</orgname>
<role>02</role>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Hudspeth</last-name>
<first-name>David</first-name>
<department>2626</department>
</primary-examiner>
<assistant-examiner>
<last-name>Rider</last-name>
<first-name>Justin W.</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">An audio encoder and decoder use architectures and techniques that improve the efficiency of quantization (e.g., weighting) and inverse quantization (e.g., inverse weighting) in audio coding and decoding. The described strategies include various techniques and tools, which can be used in combination or independently. For example, an audio encoder quantizes audio data in multiple channels, applying multiple channel-specific quantizer step modifiers, which give the encoder more control over balancing reconstruction quality between channels. The encoder also applies multiple quantization matrices and varies the resolution of the quantization matrices, which allows the encoder to use more resolution if overall quality is good and use less resolution if overall quality is poor. Finally, the encoder compresses one or more quantization matrices using temporal prediction to reduce the bitrate associated with the quantization matrices. An audio decoder performs corresponding inverse processing and decoding.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="141.82mm" wi="195.24mm" file="US07299190-20071120-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="229.70mm" wi="166.62mm" file="US07299190-20071120-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="213.78mm" wi="166.96mm" file="US07299190-20071120-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="193.72mm" wi="158.83mm" orientation="landscape" file="US07299190-20071120-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="204.89mm" wi="167.81mm" orientation="landscape" file="US07299190-20071120-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="217.51mm" wi="157.65mm" file="US07299190-20071120-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="238.84mm" wi="186.52mm" file="US07299190-20071120-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="235.54mm" wi="174.84mm" file="US07299190-20071120-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="226.91mm" wi="143.43mm" orientation="landscape" file="US07299190-20071120-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="240.11mm" wi="166.54mm" file="US07299190-20071120-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="212.77mm" wi="157.14mm" file="US07299190-20071120-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="211.92mm" wi="141.82mm" orientation="landscape" file="US07299190-20071120-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="227.50mm" wi="136.91mm" orientation="landscape" file="US07299190-20071120-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00013" num="00013">
<img id="EMI-D00013" he="237.41mm" wi="176.36mm" file="US07299190-20071120-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00014" num="00014">
<img id="EMI-D00014" he="174.50mm" wi="91.95mm" file="US07299190-20071120-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00015" num="00015">
<img id="EMI-D00015" he="232.75mm" wi="159.43mm" file="US07299190-20071120-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00016" num="00016">
<img id="EMI-D00016" he="221.15mm" wi="157.99mm" orientation="landscape" file="US07299190-20071120-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00017" num="00017">
<img id="EMI-D00017" he="238.42mm" wi="181.02mm" orientation="landscape" file="US07299190-20071120-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00018" num="00018">
<img id="EMI-D00018" he="179.15mm" wi="151.05mm" orientation="landscape" file="US07299190-20071120-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00019" num="00019">
<img id="EMI-D00019" he="191.60mm" wi="123.44mm" orientation="landscape" file="US07299190-20071120-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00020" num="00020">
<img id="EMI-D00020" he="231.14mm" wi="179.07mm" file="US07299190-20071120-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00021" num="00021">
<img id="EMI-D00021" he="231.31mm" wi="141.82mm" file="US07299190-20071120-D00021.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00022" num="00022">
<img id="EMI-D00022" he="240.54mm" wi="146.64mm" file="US07299190-20071120-D00022.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00023" num="00023">
<img id="EMI-D00023" he="228.77mm" wi="173.82mm" file="US07299190-20071120-D00023.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00024" num="00024">
<img id="EMI-D00024" he="223.35mm" wi="160.44mm" orientation="landscape" file="US07299190-20071120-D00024.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00025" num="00025">
<img id="EMI-D00025" he="239.44mm" wi="160.10mm" file="US07299190-20071120-D00025.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00026" num="00026">
<img id="EMI-D00026" he="193.04mm" wi="166.88mm" orientation="landscape" file="US07299190-20071120-D00026.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00027" num="00027">
<img id="EMI-D00027" he="231.39mm" wi="173.14mm" orientation="landscape" file="US07299190-20071120-D00027.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00028" num="00028">
<img id="EMI-D00028" he="195.24mm" wi="173.06mm" file="US07299190-20071120-D00028.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00029" num="00029">
<img id="EMI-D00029" he="232.41mm" wi="166.12mm" file="US07299190-20071120-D00029.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00030" num="00030">
<img id="EMI-D00030" he="227.25mm" wi="143.76mm" orientation="landscape" file="US07299190-20071120-D00030.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00031" num="00031">
<img id="EMI-D00031" he="230.29mm" wi="174.33mm" file="US07299190-20071120-D00031.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">RELATED APPLICATION INFORMATION</heading>
<p id="p-0002" num="0001">This application claims the benefit of U.S. Provisional Patent Application Ser. No. 60/408,517, filed Sep. 4, 2002, the disclosure of which is incorporated herein by reference.</p>
<p id="p-0003" num="0002">The following U.S. provisional patent applications relate to the present application: 1) U.S. Provisional Patent Application Ser. No. 60/408,432, entitled, “Unified Lossy and Lossless Audio Compression,” filed Sep. 4, 2002, the disclosure of which is hereby incorporated by reference; and 2) U.S. Provisional Patent Application Ser. No. 60/408,538, entitled, “Entropy Coding by Adapting Coding Between Level and Run Length/Level Modes,” filed Sep. 4, 2002, the disclosure of which is hereby incorporated by reference.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0002" level="1">TECHNICAL FIELD</heading>
<p id="p-0004" num="0003">The present invention relates to processing audio information in encoding and decoding. Specifically, the present invention relates to quantization and inverse quantization in audio encoding and decoding.</p>
<heading id="h-0003" level="1">BACKGROUND</heading>
<p id="p-0005" num="0004">With the introduction of compact disks, digital wireless telephone networks, and audio delivery over the Internet, digital audio has become commonplace. Engineers use a variety of techniques to process digital audio efficiently while still maintaining the quality of the digital audio. To understand these techniques, it helps to understand how audio information is represented and processed in a computer.</p>
<p id="h-0004" num="0000">I. Representation of Audio Information in a Computer</p>
<p id="p-0006" num="0005">A computer processes audio information as a series of numbers representing the audio information. For example, a single number can represent an audio sample, which is an amplitude value (i.e., loudness) at a particular time. Several factors affect the quality of the audio information, including sample depth, sampling rate, and channel mode.</p>
<p id="p-0007" num="0006">Sample depth (or precision) indicates the range of numbers used to represent a sample. The more values possible for the sample, the higher the quality because the number can capture more subtle variations in amplitude. For example, an 8-bit sample has 256 possible values, while a 16-bit sample has 65,536 possible values. A 24-bit sample can capture normal loudness variations very finely, and can also capture unusually high loudness.</p>
<p id="p-0008" num="0007">The sampling rate (usually measured as the number of samples per second) also affects quality. The higher the sampling rate, the higher the quality because more frequencies of sound can be represented. Some common sampling rates are 8,000, 11,025, 22,050, 32,000, 44,100, 48,000, and 96,000 samples/second.</p>
<p id="p-0009" num="0008">Mono and stereo are two common channel modes for audio. In mono mode, audio information is present in one channel. In stereo mode, audio information is present in two channels usually labeled the left and right channels. Other modes with more channels such as 5.1 channel, 7.1 channel, or 9.1 channel surround sound (the “1” indicates a sub-woofer or low-frequency effects channel) are also possible. Table 1 shows several formats of audio with different quality levels, along with corresponding raw bitrate costs.</p>
<p id="p-0010" num="0009">
<tables id="TABLE-US-00001" num="00001">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" rowsep="1">TABLE 1</entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>Bitrates for different quality audio information</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="5">
<colspec colname="1" colwidth="42pt" align="left"/>
<colspec colname="2" colwidth="49pt" align="center"/>
<colspec colname="3" colwidth="56pt" align="center"/>
<colspec colname="4" colwidth="28pt" align="left"/>
<colspec colname="5" colwidth="42pt" align="center"/>
<tbody valign="top">
<row>
<entry/>
<entry>Sample Depth</entry>
<entry>Sampling Rate</entry>
<entry/>
<entry>Raw Bitrate</entry>
</row>
<row>
<entry>Quality</entry>
<entry>(bits/sample)</entry>
<entry>(samples/second)</entry>
<entry>Mode</entry>
<entry>(bits/second)</entry>
</row>
<row>
<entry namest="1" nameend="5" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="5">
<colspec colname="1" colwidth="42pt" align="left"/>
<colspec colname="2" colwidth="49pt" align="char" char="."/>
<colspec colname="3" colwidth="56pt" align="char" char="."/>
<colspec colname="4" colwidth="28pt" align="left"/>
<colspec colname="5" colwidth="42pt" align="char" char="."/>
<tbody valign="top">
<row>
<entry>Internet</entry>
<entry>8</entry>
<entry>8,000</entry>
<entry>mono</entry>
<entry>64,000</entry>
</row>
<row>
<entry>telephony</entry>
</row>
<row>
<entry>Telephone</entry>
<entry>8</entry>
<entry>11,025</entry>
<entry>mono</entry>
<entry>88,200</entry>
</row>
<row>
<entry>CD audio</entry>
<entry>16</entry>
<entry>44,100</entry>
<entry>stereo</entry>
<entry>1,411,200</entry>
</row>
<row>
<entry namest="1" nameend="5" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0011" num="0010">Surround sound audio typically has even higher raw bitrate. As Table 1 shows, the cost of high quality audio information is high bitrate. High quality audio information consumes large amounts of computer storage and transmission capacity. Companies and consumers increasingly depend on computers, however, to create, distribute, and play back high quality multi-channel audio content.</p>
<p id="h-0005" num="0000">II. Processing Audio Information in a Computer</p>
<p id="p-0012" num="0011">Many computers and computer networks lack the resources to process raw digital audio. Compression (also called encoding or coding) decreases the cost of storing and transmitting audio information by converting the information into a lower bitrate form. Compression can be lossless (in which quality does not suffer) or lossy (in which quality suffers but bitrate reduction from subsequent lossless compression is more dramatic). Decompression (also called decoding) extracts a reconstructed version of the original information from the compressed form.</p>
<p id="p-0013" num="0012">A. Standard Perceptual Audio Encoders and Decoders</p>
<p id="p-0014" num="0013">Generally, the goal of audio compression is to digitally represent audio signals to provide maximum signal quality with the least possible amount of bits. A conventional audio encoder/decoder [“codec”] system uses subband/transform coding, quantization, rate control, and variable length coding to achieve its compression. The quantization and other lossy compression techniques introduce potentially audible noise into an audio signal. The audibility of the noise depends on how much noise there is and how much of the noise the listener perceives. The first factor relates mainly to objective quality, while the second factor depends on human perception of sound.</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 1</figref> shows a generalized diagram of a transform-based, perceptual audio encoder (<b>100</b>) according to the prior art. <figref idref="DRAWINGS">FIG. 2</figref> shows a generalized diagram of a corresponding audio decoder (<b>200</b>) according to the prior art. Though the codec system shown in <figref idref="DRAWINGS">FIGS. 1 and 2</figref> is generalized, it has characteristics found in several real world codec systems, including versions of Microsoft Corporation's Windows Media Audio [“WMA”] encoder and decoder. Other codec systems are provided or specified by the Motion Picture Experts Group, Audio Layer 3 [“MP3”] standard, the Motion Picture Experts Group 2, Advanced Audio Coding [“AAC”] standard, and Dolby AC3. For additional information about the codec systems, see the respective standards or technical publications.</p>
<p id="p-0016" num="0015">1. Perceptual Audio Encoder</p>
<p id="p-0017" num="0016">Overall, the encoder (<b>100</b>) receives a time series of input audio samples (<b>105</b>), compresses the audio samples (<b>105</b>), and multiplexes information produced by the various modules of the encoder (<b>100</b>) to output a bitstream (<b>195</b>). The encoder (<b>100</b>) includes a frequency transformer (<b>110</b>), a multi-channel transformer (<b>120</b>), a perception modeler (<b>130</b>), a weighter (<b>140</b>), a quantizer (<b>150</b>), an entropy encoder (<b>160</b>), a controller (<b>170</b>), and a bitstream multiplexer [“MUX”] (<b>180</b>).</p>
<p id="p-0018" num="0017">The frequency transformer (<b>110</b>) receives the audio samples (<b>105</b>) and converts them into data in the frequency domain. For example, the frequency transformer (<b>110</b>) splits the audio samples (<b>105</b>) into blocks, which can have variable size to allow variable temporal resolution. Small blocks allow for greater preservation of time detail at short but active transition segments in the input audio samples (<b>105</b>), but sacrifice some frequency resolution. In contrast, large blocks have better frequency resolution and worse time resolution, and usually allow for greater compression efficiency at longer and less active segments. Blocks can overlap to reduce perceptible discontinuities between blocks that could otherwise be introduced by later quantization. For multi-channel audio, the frequency transformer (<b>110</b>) uses the same pattern of windows for each channel in a particular frame. The frequency transformer (<b>110</b>) outputs blocks of frequency coefficient data to the multi-channel transformer (<b>120</b>) and outputs side information such as block sizes to the MUX (<b>180</b>).</p>
<p id="p-0019" num="0018">For multi-channel audio data, the multiple channels of frequency coefficient data produced by the frequency transformer (<b>110</b>) often correlate. To exploit this correlation, the multi-channel transformer (<b>120</b>) can convert the multiple original, independently coded channels into jointly coded channels. For example, if the input is stereo mode, the multi-channel transformer (<b>120</b>) can convert the left and right channels into sum and difference channels:</p>
<p id="p-0020" num="0019">
<maths id="MATH-US-00001" num="00001">
<math overflow="scroll">
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <mrow>
          <mrow>
            <msub>
              <mi>X</mi>
              <mi>Sum</mi>
            </msub>
            <mo>⁡</mo>
            <mrow>
              <mo>[</mo>
              <mi>k</mi>
              <mo>]</mo>
            </mrow>
          </mrow>
          <mo>=</mo>
          <mfrac>
            <mrow>
              <mrow>
                <msub>
                  <mi>X</mi>
                  <mi>Left</mi>
                </msub>
                <mo>⁡</mo>
                <mrow>
                  <mo>[</mo>
                  <mi>k</mi>
                  <mo>]</mo>
                </mrow>
              </mrow>
              <mo>+</mo>
              <mrow>
                <msub>
                  <mi>X</mi>
                  <mi>Right</mi>
                </msub>
                <mo>⁡</mo>
                <mrow>
                  <mo>[</mo>
                  <mi>k</mi>
                  <mo>]</mo>
                </mrow>
              </mrow>
            </mrow>
            <mn>2</mn>
          </mfrac>
        </mrow>
        <mo>,</mo>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>(</mo>
        <mn>1</mn>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
  <mtr>
    <mtd>
      <mrow>
        <mrow>
          <msub>
            <mi>X</mi>
            <mi>Diff</mi>
          </msub>
          <mo>⁡</mo>
          <mrow>
            <mo>[</mo>
            <mi>k</mi>
            <mo>]</mo>
          </mrow>
        </mrow>
        <mo>=</mo>
        <mrow>
          <mfrac>
            <mrow>
              <mrow>
                <msub>
                  <mi>X</mi>
                  <mi>Left</mi>
                </msub>
                <mo>⁡</mo>
                <mrow>
                  <mo>[</mo>
                  <mi>k</mi>
                  <mo>]</mo>
                </mrow>
              </mrow>
              <mo>-</mo>
              <mrow>
                <msub>
                  <mi>X</mi>
                  <mi>Right</mi>
                </msub>
                <mo>⁡</mo>
                <mrow>
                  <mo>[</mo>
                  <mi>k</mi>
                  <mo>]</mo>
                </mrow>
              </mrow>
            </mrow>
            <mn>2</mn>
          </mfrac>
          <mo>.</mo>
        </mrow>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>(</mo>
        <mn>2</mn>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
</maths>
<br/>
Or, the multi-channel transformer (<b>120</b>) can pass the left and right channels through as independently coded channels. The decision to use independently or jointly coded channels is predetermined or made adaptively during encoding. For example, the encoder (<b>100</b>) determines whether to code stereo channels jointly or independently with an open loop selection decision that considers the (a) energy separation between coding channels with and without the multi-channel transform and (b) the disparity in excitation patterns between the left and right input channels. Such a decision can be made on a window-by-window basis or only once per frame to simplify the decision. The multi-channel transformer (<b>120</b>) produces side information to the MUX (<b>180</b>) indicating the channel mode used.
</p>
<p id="p-0021" num="0020">The encoder (<b>100</b>) can apply multi-channel rematrixing to a block of audio data after a multi-channel transform. For low bitrate, multi-channel audio data in jointly coded channels, the encoder (<b>100</b>) selectively suppresses information in certain channels (e.g., the difference channel) to improve the quality of the remaining channel(s) (e.g., the sum channel). For example, the encoder (<b>100</b>) scales the difference channel by a scaling factor ρ:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>{tilde over (<i>X</i>)}<sub>Diff</sub><i>[k]=ρ·X</i><sub>Diff</sub><i>[k]</i>  (3),<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
where the value of ρ is based on: (a) current average levels of a perceptual audio quality measure such as Noise to Excitation Ratio [“NER”], (b) current fullness of a virtual buffer, (c) bitrate and sampling rate settings of the encoder (<b>100</b>), and (d) the channel separation in the left and right input channels.
</p>
<p id="p-0022" num="0021">The perception modeler (<b>130</b>) processes audio data according to a model of the human auditory system to improve the perceived quality of the reconstructed audio signal for a given bitrate. For example, an auditory model typically considers the range of human hearing and critical bands. The human nervous system integrates sub-ranges of frequencies. For this reason, an auditory model may organize and process audio information by critical bands. Different auditory models use a different number of critical bands (e.g., 25, 32, 55, or 109) and/or different cut-off frequencies for the critical bands. Bark bands are a well-known example of critical bands. Aside from range and critical bands, interactions between audio signals can dramatically affect perception. An audio signal that is clearly audible if presented alone can be completely inaudible in the presence of another audio signal, called the masker or the masking signal. The human ear is relatively insensitive to distortion or other loss in fidelity (i.e., noise) in the masked signal, so the masked signal can include more distortion without degrading perceived audio quality. In addition, an auditory model can consider a variety of other factors relating to physical or neural aspects of human perception of sound.</p>
<p id="p-0023" num="0022">The perception modeler (<b>130</b>) outputs information that the weighter (<b>140</b>) uses to shape noise in the audio data to reduce the audibility of the noise. For example, using any of various techniques, the weighter (<b>140</b>) generates weighting factors (sometimes called scaling factors) for quantization matrices (sometimes called masks) based upon the received information. The weighting factors in a quantization matrix include a weight for each of multiple quantization bands in the audio data, where the quantization bands are frequency ranges of frequency coefficients. The number of quantization bands can be the same as or less than the number of critical bands. Thus, the weighting factors indicate proportions at which noise is spread across the quantization bands, with the goal of minimizing the audibility of the noise by putting more noise in bands where it is less audible, and vice versa. The weighting factors can vary in amplitudes and number of quantization bands from block to block. The weighter (<b>140</b>) then applies the weighting factors to the data received from the multi-channel transformer (<b>120</b>).</p>
<p id="p-0024" num="0023">In one implementation, the weighter (<b>140</b>) generates a set of weighting factors for each window of each channel of multi-channel audio, or shares a single set of weighting factors for parallel windows of jointly coded channels. The weighter (<b>140</b>) outputs weighted blocks of coefficient data to the quantizer (<b>150</b>) and outputs side information such as the sets of weighting factors to the MUX (<b>180</b>).</p>
<p id="p-0025" num="0024">A set of weighting factors can be compressed for more efficient representation using direct compression. In the direct compression technique, the encoder (<b>100</b>) uniformly quantizes each element of a quantization matrix. The encoder then differentially codes the quantized elements relative to preceding elements in the matrix, and Huffman codes the differentially coded elements. In some cases (e.g., when all of the coefficients of particular quantization bands have been quantized or truncated to a value of 0), the decoder (<b>200</b>) does not require weighting factors for all quantization bands. In such cases, the encoder (<b>100</b>) gives values to one or more unneeded weighting factors that are identical to the value of the next needed weighting factor in a series, which makes differential coding of elements of the quantization matrix more efficient.</p>
<p id="p-0026" num="0025">Or, for low bitrate applications, the encoder (<b>100</b>) can parametrically compress a quantization matrix to represent the quantization matrix as a set of parameters, for example, using Linear Predictive Coding [“LPC”] of pseudo-autocorrelation parameters computed from the quantization matrix.</p>
<p id="p-0027" num="0026">The quantizer (<b>150</b>) quantizes the output of the weighter (<b>140</b>), producing quantized coefficient data to the entropy encoder (<b>160</b>) and side information including quantization step size to the MUX (<b>180</b>). Quantization maps ranges of input values to single values, introducing irreversible loss of information, but also allowing the encoder (<b>100</b>) to regulate the quality and bitrate of the output bitstream (<b>195</b>) in conjunction with the controller (<b>170</b>). In <figref idref="DRAWINGS">FIG. 1</figref>, the quantizer (<b>150</b>) is an adaptive, uniform, scalar quantizer. The quantizer (<b>150</b>) applies the same quantization step size to each frequency coefficient, but the quantization step size itself can change from one iteration of a quantization loop to the next to affect the bitrate of the entropy encoder (<b>160</b>) output. Other kinds of quantization are non-uniform, vector quantization, and/or non-adaptive quantization.</p>
<p id="p-0028" num="0027">The entropy encoder (<b>160</b>) losslessly compresses quantized coefficient data received from the quantizer (<b>150</b>). The entropy encoder (<b>160</b>) can compute the number of bits spent encoding audio information and pass this information to the rate/quality controller (<b>170</b>).</p>
<p id="p-0029" num="0028">The controller (<b>170</b>) works with the quantizer (<b>150</b>) to regulate the bitrate and/or quality of the output of the encoder (<b>100</b>). The controller (<b>170</b>) receives information from other modules of the encoder (<b>100</b>) and processes the received information to determine a desired quantization step size given current conditions. The controller (<b>170</b>) outputs the quantization step size to the quantizer (<b>150</b>) with the goal of satisfying bitrate and quality constraints.</p>
<p id="p-0030" num="0029">The encoder (<b>100</b>) can apply noise substitution and/or band truncation to a block of audio data. At low and mid-bitrates, the audio encoder (<b>100</b>) can use noise substitution to convey information in certain bands. In band truncation, if the measured quality for a block indicates poor quality, the encoder (<b>100</b>) can completely eliminate the coefficients in certain (usually higher frequency) bands to improve the overall quality in the remaining bands.</p>
<p id="p-0031" num="0030">The MUX (<b>180</b>) multiplexes the side information received from the other modules of the audio encoder (<b>100</b>) along with the entropy encoded data received from the entropy encoder (<b>160</b>). The MUX (<b>180</b>) outputs the information in a format that an audio decoder recognizes. The MUX (<b>180</b>) includes a virtual buffer that stores the bitstream (<b>195</b>) to be output by the encoder (<b>100</b>) in order to smooth over short-term fluctuations in bitrate due to complexity changes in the audio.</p>
<p id="p-0032" num="0031">2. Perceptual Audio Decoder</p>
<p id="p-0033" num="0032">Overall, the decoder (<b>200</b>) receives a bitstream (<b>205</b>) of compressed audio information including entropy encoded data as well as side information, from which the decoder (<b>200</b>) reconstructs audio samples (<b>295</b>). The audio decoder (<b>200</b>) includes a bitstream demultiplexer [“DEMUX”] (<b>210</b>), an entropy decoder (<b>220</b>), an inverse quantizer (<b>230</b>), a noise generator (<b>240</b>), an inverse weighter (<b>250</b>), an inverse multi-channel transformer (<b>260</b>), and an inverse frequency transformer (<b>270</b>).</p>
<p id="p-0034" num="0033">The DEMUX (<b>210</b>) parses information in the bitstream (<b>205</b>) and sends information to the modules of the decoder (<b>200</b>). The DEMUX (<b>210</b>) includes one or more buffers to compensate for short-term variations in bitrate due to fluctuations in complexity of the audio, network jitter, and/or other factors.</p>
<p id="p-0035" num="0034">The entropy decoder (<b>220</b>) losslessly decompresses entropy codes received from the DEMUX (<b>210</b>), producing quantized frequency coefficient data. The entropy decoder (<b>220</b>) typically applies the inverse of the entropy encoding technique used in the encoder.</p>
<p id="p-0036" num="0035">The inverse quantizer (<b>230</b>) receives a quantization step size from the DEMUX (<b>210</b>) and receives quantized frequency coefficient data from the entropy decoder (<b>220</b>). The inverse quantizer (<b>230</b>) applies the quantization step size to the quantized frequency coefficient data to partially reconstruct the frequency coefficient data.</p>
<p id="p-0037" num="0036">From the DEMUX (<b>210</b>), the noise generator (<b>240</b>) receives information indicating which bands in a block of data are noise substituted as well as any parameters for the form of the noise. The noise generator (<b>240</b>) generates the patterns for the indicated bands, and passes the information to the inverse weighter (<b>250</b>).</p>
<p id="p-0038" num="0037">The inverse weighter (<b>250</b>) receives the weighting factors from the DEMUX (<b>210</b>), patterns for any noise-substituted bands from the noise generator (<b>240</b>), and the partially reconstructed frequency coefficient data from the inverse quantizer (<b>230</b>). As necessary, the inverse weighter (<b>250</b>) decompresses the weighting factors, for example, entropy decoding, inverse differentially coding, and inverse quantizing the elements of the quantization matrix. The inverse weighter (<b>250</b>) applies the weighting factors to the partially reconstructed frequency coefficient data for bands that have not been noise substituted. The inverse weighter (<b>250</b>) then adds in the noise patterns received from the noise generator (<b>240</b>) for the noise-substituted bands.</p>
<p id="p-0039" num="0038">The inverse multi-channel transformer (<b>260</b>) receives the reconstructed frequency coefficient data from the inverse weighter (<b>250</b>) and channel mode information from the DEMUX (<b>210</b>). If multi-channel audio is in independently coded channels, the inverse multi-channel transformer (<b>260</b>) passes the channels through. If multi-channel data is in jointly coded channels, the inverse multi-channel transformer (<b>260</b>) converts the data into independently coded channels.</p>
<p id="p-0040" num="0039">The inverse frequency transformer (<b>270</b>) receives the frequency coefficient data output by the multi-channel transformer (<b>260</b>) as well as side information such as block sizes from the DEMUX (<b>210</b>). The inverse frequency transformer (<b>270</b>) applies the inverse of the frequency transform used in the encoder and outputs blocks of reconstructed audio samples (<b>295</b>).</p>
<p id="p-0041" num="0040">B. Disadvantages of Standard P rc ptual Audio Encoders and Decoders</p>
<p id="p-0042" num="0041">Although perceptual encoders and decoders as described above have good overall performance for many applications, they have several drawbacks, especially for compression and decompression of multi-channel audio. The drawbacks limit the quality of reconstructed multi-channel audio in some cases, for example, when the available bitrate is small relative to the number of input audio channels.</p>
<p id="p-0043" num="0042">1. Inflexibility in Frame Partitioning for Multi-Channel Audio</p>
<p id="p-0044" num="0043">In various respects, the frame partitioning performed by the encoder (<b>100</b>) of <figref idref="DRAWINGS">FIG. 1</figref> is inflexible.</p>
<p id="p-0045" num="0044">As previously noted, the frequency transformer (<b>110</b>) breaks a frame of input audio samples (<b>105</b>) into one or more overlapping windows for frequency transformation, where larger windows provide better frequency resolution and redundancy removal, and smaller windows provide better time resolution. The better time resolution helps control audible pre-echo artifacts introduced when the signal transitions from low energy to high energy, but using smaller windows reduces compressibility, so the encoder must balance these considerations when selecting window sizes. For multi-channel audio, the frequency transformer (<b>110</b>) partitions the channels of a frame identically (i.e., identical window configurations in the channels), which can be inefficient in some cases, as illustrated in <figref idref="DRAWINGS">FIGS. 3</figref><i>a</i>-<b>3</b><i>c. </i></p>
<p id="p-0046" num="0045"><figref idref="DRAWINGS">FIG. 3</figref><i>a </i>shows the waveforms (<b>300</b>) of an example stereo audio signal. The signal in channel <b>0</b> includes transient activity, whereas the signal in channel <b>1</b> is relatively stationary. The encoder (<b>100</b>) detects the signal transition in channel <b>0</b> and, to reduce pre-echo, divides the frame into smaller overlapping, modulated windows (<b>301</b>) as shown in <figref idref="DRAWINGS">FIG. 3</figref><i>b</i>. For the sake of simplicity, <figref idref="DRAWINGS">FIG. 3</figref><i>c </i>shows the overlapped window configuration (<b>302</b>) in boxes, with dotted lines delimiting frame boundaries. Later figures also follow this convention.</p>
<p id="p-0047" num="0046">A drawback of forcing all channels to have an identical window configuration is that a stationary signal in one or more channels (e.g., channel <b>1</b> in <figref idref="DRAWINGS">FIGS. 3</figref><i>a</i>-<b>3</b><i>c</i>) may be broken into smaller windows, lowering coding gains. Alternatively, the encoder (<b>100</b>) might force all channels to use larger windows, introducing pre-echo into one or more channels that have transients. This problem is exacerbated when more than two channels are to be coded.</p>
<p id="p-0048" num="0047">AAC allows pair-wise grouping of channels for multi-channel transforms. Among left, right, center, back left, and back right channels, for example, the left and right channels might be grouped for stereo coding, and the back left and back right channels might be grouped for stereo coding. Different groups can have different window configurations, but both channels of a particular group have the same window configuration if stereo coding is used. This limits the flexibility of partitioning for multi-channel transforms in the AAC system, as does the use of only pair-wise groupings.</p>
<p id="p-0049" num="0048">2. Inflexibility in Multi-Channel Transforms</p>
<p id="p-0050" num="0049">The encoder (<b>100</b>) of <figref idref="DRAWINGS">FIG. 1</figref> exploits some inter-channel redundancy, but is inflexible in various respects in terms of multi-channel transforms. The encoder (<b>100</b>) allows two kinds of transforms: (a) an identity transform (which is equivalent to no transform at all) or (b) sum-difference coding of stereo pairs. These limitations constrain multi-channel coding of more than two channels. Even in AAC, which can work with more than two channels, a multi-channel transform is limited to only a pair of channels at a time.</p>
<p id="p-0051" num="0050">Several groups have experimented with multi-channel transformations for surround sound channels. For example, see Yang et al., “An Inter-Channel Redundancy Removal Approach for High-Quality Multichannel Audio Compression,” AES 109<sup>th </sup>Convention, Los Angeles, September 2000 [“Yang”], and Wang et al., “A Multichannel Audio Coding Algorithm for Inter-Channel Redundancy Removal,” AES 110<sup>th </sup>Convention, Amsterdam, Netherlands, May 2001 [“Wang”]. The Yang system uses a Karhunen-Loeve Transform [“KLT”] across channels to decorrelate the channels for good compression factors. The Wang system uses an integer-to-integer Discrete Cosine Transform [“DC”]. Both systems give some good results, but still have several limitations.</p>
<p id="p-0052" num="0051">First, using a KLT on audio samples (whether across the time domain or frequency domain as in the Yang system) does not control the distortion introduced in reconstruction. The KLT in the Yang system is not used successfully for perceptual audio coding of multi-channel audio. The Yang system does not control the amount of leakage from one (e.g., heavily quantized) coded channel across to multiple reconstructed channels in the inverse multi-channel transform. This shortcoming is pointed out in Kuo et al, “A Study of Why Cross Channel Prediction Is Not Applicable to Perceptual Audio Coding,” IEEE Signal Proc. Letters, vol. 8, no. 9, September 2001. In other words, quantization that is “inaudible” in one coded channel may become audible when spread in multiple reconstructed channels, since inverse weighting is performed before the inverse multi-channel transform. The Wang system overcomes this problem by placing the multi-channel transform after weighting and quantization in the encoder (and placing the inverse multi-channel transform before inverse quantization and inverse weighting in the decoder). The Wang system, however, has various other shortcomings. Performing the quantization prior to multi-channel transformation means that the multi-channel transformation must be integer-to-integer, limiting the number of transformations possible and limiting redundancy removal across channels.</p>
<p id="p-0053" num="0052">Second, the Yang system is limited to KLT transforms. While KLT transforms adapt to the audio data being compressed, the flexibility of the Yang system to use different kinds of transforms is limited. Similarly, the Wang system uses integer-to-integer DCT for multi-channel transforms, which is not as good as conventional DCTs in terms of energy compaction, and the flexibility of the Wang system to use different kinds of transforms is limited.</p>
<p id="p-0054" num="0053">Third, in the Yang and Wang systems, there is no mechanism to control which channels get transformed together, nor is there a mechanism to selectively group different channels at different times for multi-channel transformation. Such control helps limit the leakage of content across totally incompatible channels. Moreover, even channels that are compatible overall may be incompatible over some periods.</p>
<p id="p-0055" num="0054">Fourth, in the Yang system, the multi-channel transformer lacks control over whether to apply the multi-channel transform at the frequency band level. Even among channels that are compatible overall, the channels might not be compatible at some frequencies or in some frequency bands. Similarly, the multi-channel transform of the encoder (<b>100</b>) of <figref idref="DRAWINGS">FIG. 1</figref> lacks control at the sub-channel level; it does not control which bands of frequency coefficient data are multi-channel transformed, which ignores the inefficiencies that may result when less than all frequency bands of the input channels correlate.</p>
<p id="p-0056" num="0055">Fifth, even when source channels are compatible, there is often a need to control the number of channels transformed together, so as to limit data overflow and reduce memory accesses while implementing the transform. In particular, the KLT of the Yang system is computationally complex. On the other hand, reducing the transform size also potentially reduces the coding gain compared to bigger transforms.</p>
<p id="p-0057" num="0056">Sixth, sending information specifying multi-channel transformations can be costly in terms of bitrate. This is particularly true for the KLT of the Yang system, as the transform coefficients for the covariance matrix sent are real numbers.</p>
<p id="p-0058" num="0057">Seventh, for low bitrate multi-channel audio, the quality of the reconstructed channels is very limited. Aside from the requirements of coding for low bitrate, this is in part due to the inability of the system to selectively and gracefully cut down the number of channels for which information is actually encoded.</p>
<p id="p-0059" num="0058">3. Inefficiencies in Quantization and Weighting</p>
<p id="p-0060" num="0059">In the encoder (<b>100</b>) of <figref idref="DRAWINGS">FIG. 1</figref>, the weighter (<b>140</b>) shapes distortion across bands in audio data and the quantizer (<b>150</b>) sets quantization step sizes to change the amplitude of the distortion for a frame and thereby balance quality versus bitrate. While the encoder (<b>100</b>) achieves a good balance of quality and bitrate in most applications, the encoder (<b>100</b>) still has several drawbacks.</p>
<p id="p-0061" num="0060">First, the encoder (<b>100</b>) lacks direct control over quality at the channel level. The weighting factors shape overall distortion across quantization bands for an individual channel. The uniform, scalar quantization step size affects the amplitude of the distortion across all frequency bands and channels for a frame. Short of imposing very high or very low quality on all channels, the encoder (<b>100</b>) lacks direct control over setting equal or at least comparable quality in the reconstructed output for all channels.</p>
<p id="p-0062" num="0061">Second, when weighting factors are lossy compressed, the encoder (<b>100</b>) lacks control over the resolution of quantization of the weighting factors. For direct compression of a quantization matrix, the encoder (<b>100</b>) uniformly quantizes elements of the quantization matrix, then uses differential coding and Huffman coding. The uniform quantization of mask elements does not adapt to changes in available bitrate or signal complexity. As a result, in some cases quantization matrices are encoded with more resolution than is needed given the overall low quality of the reconstructed audio, and in other cases quantization matrices are encoded with less resolution than should be used given the high quality of the reconstructed audio.</p>
<p id="p-0063" num="0062">Third, the direct compression of quantization matrices in the encoder (<b>100</b>) fails to exploit temporal redundancies in the quantization matrices. The direct compression removes redundancy within a particular quantization matrix, but ignores temporal redundancy in a series of quantization matrices.</p>
<p id="p-0064" num="0063">C. Down-Mixing Audio Channels</p>
<p id="p-0065" num="0064">Aside from multi-channel audio encoding and decoding, Dolby Pro-Logic and several other systems perform down-mixing of multi-channel audio to facilitate compatibility with speaker configurations with different numbers of speakers. In the Dolby Pro-Logic down-mixing, for example, four channels are mixed down to two channels, with each of the two channels having some combination of the audio data in the original four channels. The two channels can be output on stereo-channel equipment, or the four channels can be reconstructed from the two-channels for output on four-channel equipment.</p>
<p id="p-0066" num="0065">While down-mixing of this nature solves some compatibility problems, it is limited to certain set configurations, for example, four to two channel down-mixing. Moreover, the mixing formulas are pre-determined and do not allow changes over time to adapt to the signal.</p>
<heading id="h-0006" level="1">SUMMARY</heading>
<p id="p-0067" num="0066">In summary, the detailed description is directed to strategies for quantization and inverse quantization in audio encoding and decoding. For example, an audio encoder uses one or more quantization (e.g., weighting) techniques to improve the quality and/or bitrate of audio data. This improves the overall listening experience and makes computer systems a more compelling platform for creating, distributing, and playing back high-quality audio. The strategies described herein include various techniques and tools, which can be used in combination or independently.</p>
<p id="p-0068" num="0067">According to a first aspect of the strategies described herein, an audio encoder quantizes audio data in multiple channels, applying multiple channel-specific quantization factors for the multiple channels. For example, the channel-specific quantization factors are quantizer step modifiers, which give the encoder more control over balancing reconstruction quality between channels.</p>
<p id="p-0069" num="0068">According to a second aspect of the strategies described herein, an audio encoder quantizes audio data, applying multiple quantization matrices. The encoder varies resolution of the quantization matrices. This allows, for example, the encoder to change the resolution of the elements of the quantization matrices to use more resolution if overall quality is good and use less resolution if overall quality is poor.</p>
<p id="p-0070" num="0069">According to a third aspect of the strategies described herein, an audio encoder compresses one or more quantization matrices using temporal prediction. For example, the encoder computes a prediction for a current matrix relative to another matrix, then computes a residual from the current matrix and the prediction. In this way, the encoder reduces bitrate associated with the quantization matrices.</p>
<p id="p-0071" num="0070">For the aspects described above in terms of an audio encoder, an audio decoder performs corresponding inverse processing and decoding.</p>
<p id="p-0072" num="0071">The various features and advantages of the invention will be made apparent from the following detailed description of embodiments that proceeds with reference to the accompanying drawings.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0007" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0073" num="0072"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram of an audio encoder according to the prior art.</p>
<p id="p-0074" num="0073"><figref idref="DRAWINGS">FIG. 2</figref> is a block diagram of an audio decoder according to the prior art.</p>
<p id="p-0075" num="0074"><figref idref="DRAWINGS">FIGS. 3</figref><i>a</i>-<b>3</b><i>c </i>are charts showing window configurations for a frame of stereo audio data according to the prior art.</p>
<p id="p-0076" num="0075"><figref idref="DRAWINGS">FIG. 4</figref> is a chart showing six channels in a 5.1 channel/speaker configuration.</p>
<p id="p-0077" num="0076"><figref idref="DRAWINGS">FIG. 5</figref> is a block diagram of a suitable computing environment in which described embodiments may be implemented.</p>
<p id="p-0078" num="0077"><figref idref="DRAWINGS">FIG. 6</figref> is a block diagram of an audio encoder in which described embodiments may be implemented.</p>
<p id="p-0079" num="0078"><figref idref="DRAWINGS">FIG. 7</figref> is a block diagram of an audio decoder in which described embodiments may be implemented.</p>
<p id="p-0080" num="0079"><figref idref="DRAWINGS">FIG. 8</figref> is a flowchart showing a generalized technique for multi-channel pre-processing.</p>
<p id="p-0081" num="0080"><figref idref="DRAWINGS">FIGS. 9</figref><i>a</i>-<b>9</b><i>e </i>are charts showing example matrices for multi-channel pre-processing.</p>
<p id="p-0082" num="0081"><figref idref="DRAWINGS">FIG. 10</figref> is a flowchart showing a technique for multi-channel pre-processing in which the transform matrix potentially changes on a frame-by-frame basis.</p>
<p id="p-0083" num="0082"><figref idref="DRAWINGS">FIGS. 11</figref><i>a </i>and <b>11</b><i>b </i>are charts showing example tile configurations for multi-channel audio.</p>
<p id="p-0084" num="0083"><figref idref="DRAWINGS">FIG. 12</figref> is a flowchart showing a generalized technique for configuring tiles of multi-channel audio.</p>
<p id="p-0085" num="0084"><figref idref="DRAWINGS">FIG. 13</figref> is a flowchart showing a technique for concurrently configuring tiles and sending tile information for multi-channel audio according to a particular bitstream syntax.</p>
<p id="p-0086" num="0085"><figref idref="DRAWINGS">FIG. 14</figref> is a flowchart showing a generalized technique for performing a multi-channel transform after perceptual weighting.</p>
<p id="p-0087" num="0086"><figref idref="DRAWINGS">FIG. 15</figref> is a flowchart showing a generalized technique for performing an inverse multi-channel transform before inverse perceptual weighting.</p>
<p id="p-0088" num="0087"><figref idref="DRAWINGS">FIG. 16</figref> is a flowchart showing a technique for grouping channels in a tile for multi-channel transformation in one implementation.</p>
<p id="p-0089" num="0088"><figref idref="DRAWINGS">FIG. 17</figref> is a flowchart showing a technique for retrieving channel group information and multi-channel transform information for a tile from a bitstream according to a particular bitstream syntax.</p>
<p id="p-0090" num="0089"><figref idref="DRAWINGS">FIG. 18</figref> is a flowchart showing a technique for selectively including frequency bands of a channel group in a multi-channel transform in one implementation.</p>
<p id="p-0091" num="0090"><figref idref="DRAWINGS">FIG. 19</figref> is a flowchart showing a technique for retrieving band on/off information for a multi-channel transform for a channel group of a tile from a bitstream according to a particular bitstream syntax.</p>
<p id="p-0092" num="0091"><figref idref="DRAWINGS">FIG. 20</figref> is a flowchart showing a generalized technique for emulating a multi-channel transform using a hierarchy of simpler multi-channel transforms.</p>
<p id="p-0093" num="0092"><figref idref="DRAWINGS">FIG. 21</figref> is a chart showing an example hierarchy of multi-channel transforms.</p>
<p id="p-0094" num="0093"><figref idref="DRAWINGS">FIG. 22</figref> is a flowchart showing a technique for retrieving information for a hierarchy of multi-channel transforms for channel groups from a bitstream according to a particular bitstream syntax.</p>
<p id="p-0095" num="0094"><figref idref="DRAWINGS">FIG. 23</figref> is a flowchart showing a generalized technique for selecting a multi-channel transform type from among plural available types.</p>
<p id="p-0096" num="0095"><figref idref="DRAWINGS">FIG. 24</figref> is a flowchart showing a generalized technique for retrieving a multi-channel transform type from among plural available types and performing an inverse multi-channel transform.</p>
<p id="p-0097" num="0096"><figref idref="DRAWINGS">FIG. 25</figref> is a flowchart showing a technique for retrieving multi-channel transform information for a channel group from a bitstream according to a particular bitstream syntax.</p>
<p id="p-0098" num="0097"><figref idref="DRAWINGS">FIG. 26</figref> is a chart showing the general form of a rotation matrix for Givens rotations for representing a multi-channel transform matrix.</p>
<p id="p-0099" num="0098"><figref idref="DRAWINGS">FIGS. 27</figref><i>a</i>-<b>27</b><i>c </i>are charts showing example rotation matrices for Givens rotations for representing a multi-channel transform matrix.</p>
<p id="p-0100" num="0099"><figref idref="DRAWINGS">FIG. 28</figref> is a flowchart showing a generalized technique for representing a multi-channel transform matrix using quantized Givens factorizing rotations.</p>
<p id="p-0101" num="0100"><figref idref="DRAWINGS">FIG. 29</figref> is a flowchart showing a technique for retrieving information for a generic unitary transform for a channel group from a bitstream according to a particular bitstream syntax.</p>
<p id="p-0102" num="0101"><figref idref="DRAWINGS">FIG. 30</figref> is a flowchart showing a technique for retrieving an overall tile quantization factor for a tile from a bitstream according to a particular bitstream syntax.</p>
<p id="p-0103" num="0102"><figref idref="DRAWINGS">FIG. 31</figref> is a flowchart showing a generalized technique for computing per-channel quantization step modifiers for multi-channel audio data.</p>
<p id="p-0104" num="0103"><figref idref="DRAWINGS">FIG. 32</figref> is a flowchart showing a technique for retrieving per-channel quantization step modifiers from a bitstream according to a particular bitstream syntax.</p>
<p id="p-0105" num="0104"><figref idref="DRAWINGS">FIG. 33</figref> is a flowchart showing a generalized technique for adaptively setting a quantization step size for quantization matrix elements.</p>
<p id="p-0106" num="0105"><figref idref="DRAWINGS">FIG. 34</figref> is a flowchart showing a generalized technique for retrieving an adaptive quantization step size for quantization matrix elements.</p>
<p id="p-0107" num="0106"><figref idref="DRAWINGS">FIGS. 35 and 36</figref> are flowcharts showing techniques for compressing quantization matrices using temporal prediction.</p>
<p id="p-0108" num="0107"><figref idref="DRAWINGS">FIG. 37</figref> is a chart showing a mapping of bands for prediction of quantization matrix elements.</p>
<p id="p-0109" num="0108"><figref idref="DRAWINGS">FIG. 38</figref> is a flowchart showing a technique for retrieving and decoding quantization matrices compressed using temporal prediction according to a particular bitstream syntax.</p>
<p id="p-0110" num="0109"><figref idref="DRAWINGS">FIG. 39</figref> is a flowchart showing a generalized technique for multi-channel post-processing.</p>
<p id="p-0111" num="0110"><figref idref="DRAWINGS">FIG. 40</figref> is a chart showing an example matrix for multi-channel post-processing.</p>
<p id="p-0112" num="0111"><figref idref="DRAWINGS">FIG. 41</figref> is a flowchart showing a technique for multi-channel post-processing in which the transform matrix potentially changes on a frame-by-frame basis.</p>
<p id="p-0113" num="0112"><figref idref="DRAWINGS">FIG. 42</figref> is a flowchart showing a technique for identifying and retrieving a transform matrix for multi-channel post-processing according to a particular bitstream syntax.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0008" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0114" num="0113">Described embodiments of the present invention are directed to techniques and tools for processing audio information in encoding and decoding. In described embodiments, an audio encoder uses several techniques to process audio during encoding. An audio decoder uses several techniques to process audio during decoding. While the techniques are described in places herein as part of a single, integrated system, the techniques can be applied separately, potentially in combination with other techniques. In alternative embodiments, an audio processing tool other than an encoder or decoder implements one or more of the techniques.</p>
<p id="p-0115" num="0114">In some embodiments, an encoder performs multi-channel pre-processing. For low bitrate coding, for example, the encoder optionally re-matrixes time domain audio samples to artificially increase inter-channel correlation. This makes subsequent compression of the affected channels more efficient by reducing coding complexity. The pre-processing decreases channel separation, but can improve overall quality.</p>
<p id="p-0116" num="0115">In some embodiments, an encoder and decoder work with multi-channel audio configured into tiles of windows. For example, the encoder partitions frames of multi-channel audio on a per-channel basis, such that each channel can have a window configuration independent of the other channels. The encoder then groups windows of the partitioned channels into tiles for multi-channel transformations. This allows the encoder to isolate transients that appear in a particular channel of a frame with small windows (reducing pre-echo artifacts), but use large windows for frequency resolution and temporal redundancy reduction in other channels of the frame.</p>
<p id="p-0117" num="0116">In some embodiments, an encoder performs one or more flexible multi-channel transform techniques. A decoder performs the corresponding inverse multi-channel transform techniques. In first techniques, the encoder performs a multi-channel transform after perceptual weighting in the encoder, which reduces leakage of audible quantization noise across channels upon reconstruction. In second techniques, an encoder flexibly groups channels for multi-channel transforms to selectively include channels at different times. In third techniques, an encoder flexibly includes or excludes particular frequencies bands in multi-channel transforms, so as to selectively include compatible bands. In fourth techniques, an encoder reduces the bitrate associated with transform matrices by selectively using pre-defined matrices or using Givens rotations to parameterize custom transform matrices. In fifth techniques, an encoder performs flexible hierarchical multi-channel transforms.</p>
<p id="p-0118" num="0117">In some embodiments, an encoder performs one or more improved quantization or weighting techniques. A corresponding decoder performs the corresponding inverse quantization or inverse weighting techniques. In first techniques, an encoder computes and applies per-channel quantization step modifiers, which gives the encoder more control over balancing reconstruction quality between channels. In second techniques, an encoder uses a flexible quantization step size for quantization matrix elements, which allows the encoder to change the resolution of the elements of quantization matrices. In third techniques, an encoder uses temporal prediction in compression of quantization matrices to reduce bitrate.</p>
<p id="p-0119" num="0118">In some embodiments, a decoder performs multi-channel post-processing. For example, the decoder optionally re-matrixes time domain audio samples to create phantom channels at playback, perform special effects, fold down channels for playback on fewer speakers, or for any other purpose.</p>
<p id="p-0120" num="0119">In the described embodiments, multi-channel audio includes six channels of a standard 5.1 channel/speaker configuration as shown in the matrix (<b>400</b>) of <figref idref="DRAWINGS">FIG. 4</figref>. The “5” channels are the left, right, center, back left, and back right channels, and are conventionally spatially oriented for surround sound. The “1” channel is the sub-woofer or low-frequency effects channel. For the sake of clarity, the order of the channels shown in the matrix (<b>400</b>) is also used for matrices and equations in the rest of the specification. Alternative embodiments use multi-channel audio having a different ordering, number (e.g., 7.1, 9.1, 2), and/or configuration of channels.</p>
<p id="p-0121" num="0120">In described embodiments, the audio encoder and decoder perform various techniques. Although the operations for these techniques are typically described in a particular, sequential order for the sake of presentation, it should be understood that this manner of description encompasses minor rearrangements in the order of operations, unless a particular ordering is required. For example, operations described sequentially may in some cases be rearranged or performed concurrently. Moreover, for the sake of simplicity, flowcharts typically do not show the various ways in which particular techniques can be used in conjunction with other techniques.</p>
<p id="h-0009" num="0000">I. Computing Environment</p>
<p id="p-0122" num="0121"><figref idref="DRAWINGS">FIG. 5</figref> illustrates a generalized example of a suitable computing environment (<b>500</b>) in which described embodiments may be implemented. The computing environment (<b>500</b>) is not intended to suggest any limitation as to scope of use or functionality of the invention, as the present invention may be implemented in diverse general-purpose or special-purpose computing environments.</p>
<p id="p-0123" num="0122">With reference to <figref idref="DRAWINGS">FIG. 5</figref>, the computing environment (<b>500</b>) includes at least one processing unit (<b>510</b>) and memory (<b>520</b>). In <figref idref="DRAWINGS">FIG. 5</figref>, this most basic configuration (<b>530</b>) is included within a dashed line. The processing unit (<b>510</b>) executes computer-executable instructions and may be a real or a virtual processor. In a multi-processing system, multiple processing units execute computer-executable instructions to increase processing power. The memory (<b>520</b>) may be volatile memory (e.g., registers, cache, RAM), non-volatile memory (e.g., ROM, EEPROM, flash memory, etc.), or some combination of the two. The memory (<b>520</b>) stores software (<b>580</b>) implementing audio processing techniques according to one or more of the described embodiments.</p>
<p id="p-0124" num="0123">A computing environment may have additional features. For example, the computing environment (<b>500</b>) includes storage (<b>540</b>), one or more input devices (<b>550</b>), one or more output devices (<b>560</b>), and one or more communication connections (<b>570</b>). An interconnection mechanism (not shown) such as a bus, controller, or network interconnects the components of the computing environment (<b>500</b>). Typically, operating system software (not shown) provides an operating environment for other software executing in the computing environment (<b>500</b>), and coordinates activities of the components of the computing environment (<b>500</b>).</p>
<p id="p-0125" num="0124">The storage (<b>540</b>) may be removable or non-removable, and includes magnetic disks, magnetic tapes or cassettes, CD-ROMs, CD-RWs, DVDs, or any other medium which can be used to store information and which can be accessed within the computing environment (<b>500</b>). The storage (<b>540</b>) stores instructions for the software (<b>580</b>) implementing audio processing techniques according to one or more of the described embodiments.</p>
<p id="p-0126" num="0125">The input device(s) (<b>550</b>) may be a touch input device such as a keyboard, mouse, pen, or trackball, a voice input device, a scanning device, network adapter, or another device that provides input to the computing environment (<b>500</b>). For audio, the input device(s) (<b>550</b>) may be a sound card or similar device that accepts audio input in analog or digital form, or a CD-ROM/DVD reader that provides audio samples to the computing environment. The output device(s) (<b>560</b>) may be a display, printer, speaker, CD/DVD-writer, network adapter, or another device that provides output from the computing environment (<b>500</b>).</p>
<p id="p-0127" num="0126">The communication connection(s) (<b>570</b>) enable communication over a communication medium to another computing entity. The communication medium conveys information such as computer-executable instructions, compressed audio information, or other data in a modulated data signal. A modulated data signal is a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media include wired or wireless techniques implemented with an electrical, optical, RF, infrared, acoustic, or other carrier.</p>
<p id="p-0128" num="0127">The invention can be described in the general context of computer-readable media. Computer-readable media are any available media that can be accessed within a computing environment. By way of example, and not limitation, with the computing environment (<b>500</b>), computer-readable media include memory (<b>520</b>), storage (<b>540</b>), communication media, and combinations of any of the above.</p>
<p id="p-0129" num="0128">The invention can be described in the general context of computer-executable instructions, such as those included in program modules, being executed in a computing environment on a target real or virtual processor. Generally, program modules include routines, programs, libraries, objects, classes, components, data structures, etc. that perform particular tasks or implement particular abstract data types. The functionality of the program modules may be combined or split between program modules as desired in various embodiments. Computer-executable instructions for program modules may be executed within a local or distributed computing environment.</p>
<p id="p-0130" num="0129">For the sake of presentation, the detailed description uses terms like “determine,” “generate,” “adjust,” and “apply” to describe computer operations in a computing environment. These terms are high-level abstractions for operations performed by a computer, and should not be confused with acts performed by a human being. The actual computer operations corresponding to these terms vary depending on implementation.</p>
<p id="h-0010" num="0000">II. Generalized Audio Encoder and Decoder</p>
<p id="p-0131" num="0130"><figref idref="DRAWINGS">FIG. 6</figref> is a block diagram of a generalized audio encoder (<b>600</b>) in which described embodiments may be implemented. <figref idref="DRAWINGS">FIG. 7</figref> is a block diagram of a generalized audio decoder (<b>700</b>) in which described embodiments may be implemented.</p>
<p id="p-0132" num="0131">The relationships shown between modules within the encoder and decoder indicate flows of information in the encoder and decoder; other relationships are not shown for the sake of simplicity. Depending on implementation and the type of compression desired, modules of the encoder or decoder can be added, omitted, split into multiple modules, combined with other modules, and/or replaced with like modules. In alternative embodiments, encoders or decoders with different modules and/or other configurations process audio data.</p>
<p id="p-0133" num="0132">A. Generalized Audio Encoder</p>
<p id="p-0134" num="0133">The generalized audio encoder (<b>600</b>) includes a selector (<b>608</b>), a multi-channel pre-processor (<b>610</b>), a partitioner/tile configurer (<b>620</b>), a frequency transformer (<b>630</b>), a perception modeler (<b>640</b>), a quantization band weighter (<b>642</b>), a channel weighter (<b>644</b>), a multi-channel transformer (<b>650</b>), a quantizer (<b>660</b>), an entropy encoder (<b>670</b>), a controller (<b>680</b>), a mixed/pure lossless coder (<b>672</b>) and associated entropy encoder (<b>674</b>), and a bitstream multiplexer [“MUX”] (<b>690</b>).</p>
<p id="p-0135" num="0134">The encoder (<b>600</b>) receives a time series of input audio samples (<b>605</b>) at some sampling depth and rate in pulse code modulated [“PCM”] format. For most of the described embodiments, the input audio samples (<b>605</b>) are for multi-channel audio (e.g., stereo, surround), but the input audio samples (<b>605</b>) can instead be mono. The encoder (<b>600</b>) compresses the audio samples (<b>605</b>) and multiplexes information produced by the various modules of the encoder (<b>600</b>) to output a bitstream (<b>695</b>) in a format such as a Windows Media Audio [“WMA”] format or Advanced Streaming Format [“ASF”]. Alternatively, the encoder (<b>600</b>) works with other input and/or output formats.</p>
<p id="p-0136" num="0135">The selector (<b>608</b>) selects between multiple encoding modes for the audio samples (<b>605</b>). In <figref idref="DRAWINGS">FIG. 6</figref>, the selector (<b>608</b>) switches between a mixed/pure lossless coding mode and a lossy coding mode. The lossless coding mode includes the mixed/pure lossless coder (<b>672</b>) and is typically used for high quality (and high bitrate) compression. The lossy coding mode includes components such as the weighter (<b>642</b>) and quantizer (<b>660</b>) and is typically used for adjustable quality (and controlled bitrate) compression. The selection decision at the selector (<b>608</b>) depends upon user input or other criteria. In certain circumstances (e.g., when lossy compression fails to deliver adequate quality or overproduces bits), the encoder (<b>600</b>) may switch from lossy coding over to mixed/pure lossless coding for a frame or set of frames.</p>
<p id="p-0137" num="0136">For lossy coding of multi-channel audio data, the multi-channel pre-processor (<b>610</b>) optionally re-matrixes the time-domain audio samples (<b>605</b>). In some embodiments, the multi-channel pre-processor (<b>610</b>) selectively re-matrixes the audio samples (<b>605</b>) to drop one or more coded channels or increase inter-channel correlation in the encoder (<b>600</b>), yet allow reconstruction (in some form) in the decoder (<b>700</b>). This gives the encoder additional control over quality at the channel level. The multi-channel pre-processor (<b>610</b>) may send side information such as instructions for multi-channel post-processing to the MUX (<b>690</b>). For additional detail about the operation of the multi-channel pre-processor in some embodiments, see the section entitled “Multi-Channel Pre-Processing.” Alternatively, the encoder (<b>600</b>) performs another form of multi-channel pre-processing.</p>
<p id="p-0138" num="0137">The partitioner/tile configurer (<b>620</b>) partitions a frame of audio input samples (<b>605</b>) into sub-frame blocks (i.e., windows) with time-varying size and window shaping functions. The sizes and windows for the sub-frame blocks depend upon detection of transient signals in the frame, coding mode, as well as other factors.</p>
<p id="p-0139" num="0138">If the encoder (<b>600</b>) switches from lossy coding to mixed/pure lossless coding, sub-frame blocks need not overlap or have a windowing function in theory (i.e., non-overlapping, rectangular-window blocks), but transitions between lossy coded frames and other frames may require special treatment. The partitioner/tile configurer (<b>620</b>) outputs blocks of partitioned data to the mixed/pure lossless coder (<b>672</b>) and outputs side information such as block sizes to the MUX (<b>690</b>). For additional detail about partitioning and windowing for mixed or pure losslessly coded frames, see the related application entitled “Unified Lossy and Lossless Audio Compression.”</p>
<p id="p-0140" num="0139">When the encoder (<b>600</b>) uses lossy coding, variable-size windows allow variable temporal resolution. Small blocks allow for greater preservation of time detail at short but active transition segments. Large blocks have better frequency resolution and worse time resolution, and usually allow for greater compression efficiency at longer and less active segments, in part because frame header and side information is proportionally less than in small blocks, and in part because it allows for better redundancy removal. Blocks can overlap to reduce perceptible discontinuities between blocks that could otherwise be introduced by later quantization. The partitioner/tile configurer (<b>620</b>) outputs blocks of partitioned data to the frequency transformer (<b>630</b>) and outputs side information such as block sizes to the MUX (<b>690</b>). For additional information about transient detection and partitioning criteria in some embodiments, see U.S. patent application Ser. No. 10/016,918, entitled “Adaptive Window-Size Selection in Transform Coding,” filed Dec. 14, 2001, hereby incorporated by reference. Alternatively, the partitioner/tile configurer (<b>620</b>) uses other partitioning criteria or block sizes when partitioning a frame into windows.</p>
<p id="p-0141" num="0140">In some embodiments, the partitioner/tile configurer (<b>620</b>) partitions frames of multi-channel audio on a per-channel basis. The partitioner/tile configurer (<b>620</b>) independently partitions each channel in the frame, if quality/bitrate allows. This allows, for example, the partitioner/tile configurer (<b>620</b>) to isolate transients that appear in a particular channel with smaller windows, but use larger windows for frequency resolution or compression efficiency in other channels. This can improve compression efficiency by isolating transients on a per channel basis, but additional information specifying the partitions in individual channels is needed in many cases. Windows of the same size that are co-located in time may qualify for further redundancy reduction through multi-channel transformation. Thus, the partitioner/tile configurer (<b>620</b>) groups windows of the same size that are co-located in time as a tile. For additional detail about tiling in some embodiments, see the section entitled “Tile Configuration.”</p>
<p id="p-0142" num="0141">The frequency transformer (<b>630</b>) receives audio samples and converts them into data in the frequency domain. The frequency transformer (<b>630</b>) outputs blocks of frequency coefficient data to the weighter (<b>642</b>) and outputs side information such as block sizes to the MUX (<b>690</b>). The frequency transformer (<b>630</b>) outputs both the frequency coefficients and the side information to the perception modeler (<b>640</b>). In some embodiments, the frequency transformer (<b>630</b>) applies a time-varying Modulated Lapped Transform [“MLT”] to the sub-frame blocks, which operates like a DCT modulated by the sine window function(s) of the sub-frame blocks. Alternative embodiments use other varieties of MLT, or a DCT or other type of modulated or non-modulated, overlapped or non-overlapped frequency transform, or use subband or wavelet coding.</p>
<p id="p-0143" num="0142">The perception modeler (<b>640</b>) models properties of the human auditory system to improve the perceived quality of the reconstructed audio signal for a given bitrate. Generally, the perception modeler (<b>640</b>) processes the audio data according to an auditory model, then provides information to the weighter (<b>642</b>) which can be used to generate weighting factors for the audio data. The perception modeler (<b>640</b>) uses any of various auditory models and passes excitation pattern information or other information to the weighter (<b>642</b>).</p>
<p id="p-0144" num="0143">The quantization band weighter (<b>642</b>) generates weighting factors for quantization matrices based upon the information received from the perception modeler (<b>640</b>) and applies the weighting factors to the data received from the frequency transformer (<b>630</b>). The weighting factors for a quantization matrix include a weight for each of multiple quantization bands in the audio data. The quantization bands can be the same or different in number or position from the critical bands used elsewhere in the encoder (<b>600</b>), and the weighting factors can vary in amplitudes and number of quantization bands from block to block. The quantization band weighter (<b>642</b>) outputs weighted blocks of coefficient data to the channel weighter (<b>644</b>) and outputs side information such as the set of weighting factors to the MUX (<b>690</b>). The set of weighting factors can be compressed for more efficient representation. If the weighting factors are lossy compressed, the reconstructed weighting factors are typically used to weight the blocks of coefficient data. For additional detail about computation and compression of weighting factors in some embodiments, see the section entitled “Quantization and Weighting.” Alternatively, the encoder (<b>600</b>) uses another form of weighting or skips weighting.</p>
<p id="p-0145" num="0144">The channel weighter (<b>644</b>) generates channel-specific weight factors (which are scalars) for channels based on the information received from the perception modeler (<b>640</b>) and also on the quality of locally reconstructed signal. The scalar weights (also called quantization step modifiers) allow the encoder (<b>600</b>) to give the reconstructed channels approximately uniform quality. The channel weight factors can vary in amplitudes from channel to channel and block to block, or at some other level. The channel weighter (<b>644</b>) outputs weighted blocks of coefficient data to the multi-channel transformer (<b>650</b>) and outputs side information such as the set of channel weight factors to the MUX (<b>690</b>). The channel weighter (<b>644</b>) and quantization band weighter (<b>642</b>) in the flow diagram can be swapped or combined together. For additional detail about computation and compression of weighting factors in some embodiments, see the section entitled “Quantization and Weighting.” Alternatively, the encoder (<b>600</b>) uses another form of weighting or skips weighting.</p>
<p id="p-0146" num="0145">For multi-channel audio data, the multiple channels of noise-shaped frequency coefficient data produced by the channel weighter (<b>644</b>) often correlate, so the multi-channel transformer (<b>650</b>) may apply a multi-channel transform. For example, the multi-channel transformer (<b>650</b>) selectively and flexibly applies the multi-channel transform to some but not all of the channels and/or quantization bands in the tile. This gives the multi-channel transformer (<b>650</b>) more precise control over application of the transform to relatively correlated parts of the tile. To reduce computational complexity, the multi-channel transformer (<b>650</b>) may use a hierarchical transform rather than a one-level transform. To reduce the bitrate associated with the transform matrix, the multi-channel transformer (<b>650</b>) selectively uses pre-defined matrices (e.g., identity/no transform, Hadamard, DCT Type II) or custom matrices, and applies efficient compression to the custom matrices. Finally, since the multi-channel transform is downstream from the weighter (<b>642</b>), the perceptibility of noise (e.g., due to subsequent quantization) that leaks between channels after the inverse multi-channel transform in the decoder (<b>700</b>) is controlled by inverse weighting. For additional detail about multi-channel transforms in some embodiments, see the section entitled “Flexible Multi-Channel Transforms.” Alternatively, the encoder (<b>600</b>) uses other forms of multi-channel transforms or no transforms at all. The multi-channel transformer (<b>650</b>) produces side information to the MUX (<b>690</b>) indicating, for example, the multi-channel transforms used and multi-channel transformed parts of tiles.</p>
<p id="p-0147" num="0146">The quantizer (<b>660</b>) quantizes the output of the multi-channel transformer (<b>650</b>), producing quantized coefficient data to the entropy encoder (<b>670</b>) and side information including quantization step sizes to the MUX (<b>690</b>). In <figref idref="DRAWINGS">FIG. 6</figref>, the quantizer (<b>660</b>) is an adaptive, uniform, scalar quantizer that computes a quantization factor per tile. The tile quantization factor can change from one iteration of a quantization loop to the next to affect the bitrate of the entropy encoder (<b>660</b>) output, and the per-channel quantization step modifiers can be used to balance reconstruction quality between channels. For additional detail about quantization in some embodiments, see the section entitled “Quantization and Weighting.” In alternative embodiments, the quantizer is a non-uniform quantizer, a vector quantizer, and/or a non-adaptive quantizer, or uses a different form of adaptive, uniform, scalar quantization. In other alternative embodiments, the quantizer (<b>660</b>), quantization band weighter (<b>642</b>), channel weighter (<b>644</b>), and multi-channel transformer (<b>650</b>) are fused and the fused module determines various weights all at once.</p>
<p id="p-0148" num="0147">The entropy encoder (<b>670</b>) losslessly compresses quantized coefficient data received from the quantizer (<b>660</b>). In some embodiments, the entropy encoder (<b>670</b>) uses adaptive entropy encoding as described in the related application entitled, “Entropy Coding by Adapting Coding Between Level and Run Length/Level Modes.” Alternatively, the entropy encoder (<b>670</b>) uses some other form or combination of multi-level run length coding, variable-to-variable length coding, run length coding, Huffman coding, dictionary coding, arithmetic coding, LZ coding, or some other entropy encoding technique. The entropy encoder (<b>670</b>) can compute the number of bits spent encoding audio information and pass this information to the rate/quality controller (<b>680</b>).</p>
<p id="p-0149" num="0148">The controller (<b>680</b>) works with the quantizer (<b>660</b>) to regulate the bitrate and/or quality of the output of the encoder (<b>600</b>). The controller (<b>680</b>) receives information from other modules of the encoder (<b>600</b>) and processes the received information to determine desired quantization factors given current conditions. The controller (<b>670</b>) outputs the quantization factors to the quantizer (<b>660</b>) with the goal of satisfying quality and/or bitrate constraints.</p>
<p id="p-0150" num="0149">The mixed/pure lossless encoder (<b>672</b>) and associated entropy encoder (<b>674</b>) compress audio data for the mixed/pure lossless coding mode. The encoder (<b>600</b>) uses the mixed/pure lossless coding mode for an entire sequence or switches between coding modes on a frame-by-frame, block-by-block, tile-by-tile, or other basis. For additional detail about the mixed/pure lossless coding mode, see the related application entitled “Unified Lossy and Lossless Audio Compression.” Alternatively, the encoder (<b>600</b>) uses other techniques for mixed and/or pure lossless encoding.</p>
<p id="p-0151" num="0150">The MUX (<b>690</b>) multiplexes the side information received from the other modules of the audio encoder (<b>600</b>) along with the entropy encoded data received from the entropy encoders (<b>670</b>, <b>674</b>). The MUX (<b>690</b>) outputs the information in a WMA format or another format that an audio decoder recognizes. The MUX (<b>690</b>) includes a virtual buffer that stores the bitstream (<b>695</b>) to be output by the encoder (<b>600</b>). The virtual buffer then outputs data at a relatively constant bitrate, while quality may change due to complexity changes in the input. The current fullness and other characteristics of the buffer can be used by the controller (<b>680</b>) to regulate quality and/or bitrate. Alternatively, the output bitrate can vary over time, and the quality is kept relatively constant. Or, the output bitrate is only constrained to be less than a particular bitrate, which is either constant or time varying.</p>
<p id="p-0152" num="0151">B. Generalized Audio Decoder</p>
<p id="p-0153" num="0152">With reference to <figref idref="DRAWINGS">FIG. 7</figref>, the generalized audio decoder (<b>700</b>) includes a bitstream demultiplexer [“DEMUX”] (<b>710</b>), one or more entropy decoders (<b>720</b>), a mixed/pure lossless decoder (<b>722</b>), a tile configuration decoder (<b>730</b>), an inverse multi-channel transformer (<b>740</b>), a inverse quantizer/weighter (<b>750</b>), an inverse frequency transformer (<b>760</b>), an overlapper/adder (<b>770</b>), and a multi-channel post-processor (<b>780</b>). The decoder (<b>700</b>) is somewhat simpler than the encoder (<b>700</b>) because the decoder (<b>700</b>) does not include modules for rate/quality control or perception modeling.</p>
<p id="p-0154" num="0153">The decoder (<b>700</b>) receives a bitstream (<b>705</b>) of compressed audio information in a WMA format or another format. The bitstream (<b>705</b>) includes entropy encoded data as well as side information from which the decoder (<b>700</b>) reconstructs audio samples (<b>795</b>).</p>
<p id="p-0155" num="0154">The DEMUX (<b>710</b>) parses information in the bitstream (<b>705</b>) and sends information to the modules of the decoder (<b>700</b>). The DEMUX (<b>710</b>) includes one or more buffers to compensate for short-term variations in bitrate due to fluctuations in complexity of the audio, network jitter, and/or other factors.</p>
<p id="p-0156" num="0155">The one or more entropy decoders (<b>720</b>) losslessly decompress entropy codes received from the DEMUX (<b>710</b>). The entropy decoder (<b>720</b>) typically applies the inverse of the entropy encoding technique used in the encoder (<b>600</b>). For the sake of simplicity, one entropy decoder module is shown in <figref idref="DRAWINGS">FIG. 7</figref>, although different entropy decoders may be used for lossy and lossless coding modes, or even within modes. Also, for the sake of simplicity, <figref idref="DRAWINGS">FIG. 7</figref> does not show mode selection logic. When decoding data compressed in lossy coding mode, the entropy decoder (<b>720</b>) produces quantized frequency coefficient data.</p>
<p id="p-0157" num="0156">The mixed/pure lossless decoder (<b>722</b>) and associated entropy decoder(s) (<b>720</b>) decompress losslessly encoded audio data for the mixed/pure lossless coding mode. For additional detail about decompression for the mixed/pure lossless decoding mode, see the related application entitled “Unified Lossy and Lossless Audio Compression.” Alternatively, decoder (<b>700</b>) uses other techniques for mixed and/or pure lossless decoding.</p>
<p id="p-0158" num="0157">The tile configuration decoder (<b>730</b>) receives and, if necessary, decodes information indicating the patterns of tiles for frames from the DEMUX (<b>790</b>). The tile pattern information may be entropy encoded or otherwise parameterized. The tile configuration decoder (<b>730</b>) then passes tile pattern information to various other modules of the decoder (<b>700</b>). For additional detail about tile configuration decoding in some embodiments, see the section entitled “Tile Configuration.” Alternatively, the decoder (<b>700</b>) uses other techniques to parameterize window patterns in frames.</p>
<p id="p-0159" num="0158">The inverse multi-channel transformer (<b>740</b>) receives the quantized frequency coefficient data from the entropy decoder (<b>720</b>) as well as tile pattern information from the tile configuration decoder (<b>730</b>) and side information from the DEMUX (<b>710</b>) indicating, for example, the multi-channel transform used and transformed parts of tiles. Using this information, the inverse multi-channel transformer (<b>740</b>) decompresses the transform matrix as necessary, and selectively and flexibly applies one or more inverse multi-channel transforms to the audio data. The placement of the inverse multi-channel transformer (<b>740</b>) relative to the inverse quantizer/weighter (<b>750</b>) helps shape quantization noise that may leak across channels. For additional detail about inverse multi-channel transforms in some embodiments, see the section entitled “Flexible Multi-Channel Transforms.”</p>
<p id="p-0160" num="0159">The inverse quantizer/weighter (<b>750</b>) receives tile and channel quantization factors as well as quantization matrices from the DEMUX (<b>710</b>) and receives quantized frequency coefficient data from the inverse multi-channel transformer (<b>740</b>). The inverse quantizer/weighter (<b>750</b>) decompresses the received quantization factor/matrix information as necessary, then performs the inverse quantization and weighting. For additional detail about inverse quantization and weighting in some embodiments, see the section entitled “Quantization and Weighting. In alternative embodiments, the inverse quantizer/weighter applies the inverse of some other quantization techniques used in the encoder.</p>
<p id="p-0161" num="0160">The inverse frequency transformer (<b>760</b>) receives the frequency coefficient data output by the inverse quantizer/weighter (<b>750</b>) as well as side information from the DEMUX (<b>710</b>) and tile pattern information from the tile configuration decoder (<b>730</b>). The inverse frequency transformer (<b>770</b>) applies the inverse of the frequency transform used in the encoder and outputs blocks to the overlapper/adder (<b>770</b>).</p>
<p id="p-0162" num="0161">In addition to receiving tile pattern information from the tile configuration decoder (<b>730</b>), the overlapper/adder (<b>770</b>) receives decoded information from the inverse frequency transformer (<b>760</b>) and/or mixed/pure lossless decoder (<b>722</b>). The overlapper/adder (<b>770</b>) overlaps and adds audio data as necessary and interleaves frames or other sequences of audio data encoded with different modes. For additional detail about overlapping, adding, and interleaving mixed or pure losslessly coded frames, see the related application entitled “Unified Lossy and Lossless Audio Compression.” Alternatively, the decoder (<b>700</b>) uses other techniques for overlapping, adding, and interleaving frames.</p>
<p id="p-0163" num="0162">The multi-channel post-processor (<b>780</b>) optionally re-matrixes the time-domain audio samples output by the overlapper/adder (<b>770</b>). The multi-channel post-processor selectively re-matrixes audio data to create phantom channels for playback, perform special effects such as spatial rotation of channels among speakers, fold down channels for playback on fewer speakers, or for any other purpose. For bitstream-controlled post-processing, the post-processing transform matrices vary over time and are signaled or included in the bitstream (<b>705</b>). For additional detail about the operation of the multi-channel post-processor in some embodiments, see the section entitled “Multi-Channel Post-Processing.” Alternatively, the decoder (<b>700</b>) performs another form of multi-channel post-processing.</p>
<p id="h-0011" num="0000">III. Multi-Channel Pre-Processing</p>
<p id="p-0164" num="0163">In some embodiments, an encoder such as the encoder (<b>600</b>) of <figref idref="DRAWINGS">FIG. 6</figref> performs multi-channel pre-processing on input audio samples in the time-domain.</p>
<p id="p-0165" num="0164">In general, when there are N source audio channels as input, the number of coded channels produced by the encoder is also N. The coded channels may correspond one-to-one with the source channels, or the coded channels may be multi-channel transform-coded channels. When the coding complexity of the source makes compression difficult or when the encoder buffer is full, however, the encoder may alter or drop (i.e., not code) one or more of the original input audio channels. This can be done to reduce coding complexity and improve the overall perceived quality of the audio. For quality-driven pre-processing, the encoder performs the multi-channel pre-processing in reaction to measured audio quality so as to smoothly control overall audio quality and channel separation.</p>
<p id="p-0166" num="0165">For example, the encoder may alter the multi-channel audio image to make one or more channels less critical so that the channels are dropped at the encoder yet reconstructed at the decoder as “phantom” channels. Outright deletion of channels can have a dramatic effect on quality, so it is done only when coding complexity is very high or the buffer is so full that good quality reproduction cannot be achieved through other means.</p>
<p id="p-0167" num="0166">The encoder can indicate to the decoder what action to take when the number of coded channels is less than the number of channels for output. Then, a multi-channel post-processing transform can be used in the decoder to create phantom channels, as described below in the section entitled “Multi-Channel Post-Processing.” Or, the encoder can signal to the decoder to perform multi-channel post-processing for another purpose.</p>
<p id="p-0168" num="0167"><figref idref="DRAWINGS">FIG. 8</figref> shows a generalized technique (<b>800</b>) for multi-channel pre-processing. The encoder performs (<b>810</b>) multi-channel pre-processing on time-domain multi-channel audio data (<b>805</b>), producing transformed audio data (<b>815</b>) in the time domain. For example, the pre-processing involves a general N to N transform, where N is the number of channels. Theencoder multiplies N samples with a matrix A.
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>y</i><sub>pre</sub><i>=A</i><sub>pre</sub><i>·x</i><sub>pre </sub>  (4),<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
where x<sub>pre </sub>and y<sub>pre </sub>are the N channel input to and the output from the pre-processing, and A<sub>pre </sub>is a general NxN transform matrix with real (i.e., continuous) valued elements. The matrix A<sub>pre </sub>can be chosen to artificially increase the inter-channel correlation in y<sub>pre </sub>compared to x<sub>pre</sub>. This reduces complexity for the rest of the encoder, but at the cost of lost channel separation.
</p>
<p id="p-0169" num="0168">The output y<sub>pre </sub>is then fed to the rest of the encoder, which encodes (<b>820</b>) the data using techniques shown in <figref idref="DRAWINGS">FIG. 6</figref> or other compression techniques, producing encoded multi-channel audio data (<b>825</b>).</p>
<p id="p-0170" num="0169">The syntax used by the encoder and decoder allows description of general or pre-defined post-processing multi-channel transform matrices, which can vary or be turned on/off on a frame-to-frame basis. The encoder uses this flexibility to limit stereo/surround image impairments, trading off channel separation for better overall quality in certain circumstances by artificially increasing inter-channel correlation. Alternatively, the decoder and encoder use another syntax for multi-channel pre- and post-processing, for example, one that allows changes in transform matrices on a basis other than frame-to-frame.</p>
<p id="p-0171" num="0170"><figref idref="DRAWINGS">FIGS. 9</figref><i>a</i>-<b>9</b><i>e </i>show multi-channel pre-processing transform matrices (<b>900</b>-<b>904</b>) used to artificially increase inter-channel correlation under certain circumstances in the encoder. The encoder switches between pre-processing matrices to change how much inter-channel correlation is artificially increased between the left, right, and center channels, and between the back left and back right channels, in a 5.1 channel playback environment.</p>
<p id="p-0172" num="0171">In one implementation, at low bitrates, the encoder evaluates the quality of reconstructed audio over some period of time and, depending on the result, selects one of the pre-processing matrices. The quality measure evaluated by the encoder is Noise to Excitation Ratio [“NER”], which is the ratio of the energy in the noise pattern for a reconstructed audio clip to the energy in the original digital audio clip. Low NER values indicate good quality, and high NER values indicate poor quality. The encoder evaluates the NER for one or more previously encoded frames. For additional information about NER and other quality measures, see U.S. patent application Ser. No. 10/017,861, entitled “Techniques for Measurement of Perceptual Audio Quality,” filed Dec. 14, 2001, hereby incorporated by reference. Alternatively, the encoder uses another quality measure, buffer fullness, and/or some other criteria to select a pre-processing transform matrix, or the encoder evaluates a different period of multi-channel audio.</p>
<p id="p-0173" num="0172">Returning to the examples shown in <figref idref="DRAWINGS">FIGS. 9</figref><i>a</i>-<b>9</b><i>e</i>, at low bitrates, the encoder slowly changes the pre-processing transform matrix based on the NER n of a particular stretch of audio clip. The encoder compares the value of n to threshold values n<sub>low </sub>and n<sub>high</sub>, which are implementation-dependent. In one implementation, n<sub>low </sub>and n<sub>high </sub>have the pre-determined values n<sub>low</sub>=0.05 and n<sub>high</sub>=0.1. Alternatively, n<sub>low </sub>and n<sub>high </sub>have different values or values that change over time in reaction to bitrate or other criteria, or the encoder switches between a different number of matrices.</p>
<p id="p-0174" num="0173">A low value of n (e.g., n≦n<sub>low</sub>) indicates good quality coding. So, the encoder uses the identity matrix A<sub>low </sub>(<b>900</b>) shown in <figref idref="DRAWINGS">FIG. 9</figref><i>a</i>, effectively turning off the pre-processing.</p>
<p id="p-0175" num="0174">On the other hand, a high value of n (e.g., n≧n<sub>high</sub>) indicates poor quality coding. So, the encoder uses the matrix A<sub>high,1 </sub>(<b>902</b>) shown in <figref idref="DRAWINGS">FIG. 9</figref><i>c</i>. The matrix A<sub>high,1 </sub>(<b>902</b>) introduces severe surround image distortion, but at the same time imposes very high correlation between the left, right, and center channels, which improves subsequent coding efficiency by reducing complexity. The multi-channel transformed center channel is the average of the original left, right, and center channels. The matrix A<sub>high,1 </sub>(<b>902</b>) also compromises the channel separation between the rear channels—the input back left and back right channels are averaged.</p>
<p id="p-0176" num="0175">An intermediate value of n (e.g., n<sub>low</sub>&lt;n&lt;n<sub>high</sub>) indicates intermediate quality coding. So, the encoder may use the intermediate matrix A<sub>int er,1 </sub>(<b>901</b>) shown in FIG. <b>9</b><i>b</i>. In the intermediate matrix A<sub>int er,1 </sub>(<b>901</b>), the factor α measures the relative position of n between n<sub>low </sub>and n<sub>high</sub>.</p>
<p id="p-0177" num="0176">
<maths id="MATH-US-00002" num="00002">
<math overflow="scroll">
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <mi>α</mi>
        <mo>=</mo>
        <mrow>
          <mfrac>
            <mrow>
              <mi>n</mi>
              <mo>-</mo>
              <msub>
                <mi>n</mi>
                <mi>low</mi>
              </msub>
            </mrow>
            <mrow>
              <msub>
                <mi>n</mi>
                <mi>high</mi>
              </msub>
              <mo>-</mo>
              <msub>
                <mi>n</mi>
                <mi>low</mi>
              </msub>
            </mrow>
          </mfrac>
          <mo>.</mo>
        </mrow>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>(</mo>
        <mn>5</mn>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
</maths>
<br/>
The intermediate matrix A<sub>int er,1 </sub>(<b>901</b>) gradually transitions from the identity matrix A<sub>low </sub>(<b>900</b>) to the low quality matrix A<sub>high,1 </sub>(<b>902</b>).
</p>
<p id="p-0178" num="0177">For the matrices A<sub>int er,1 </sub>(<b>901</b>) and A<sub>high,1 </sub>(<b>902</b>) shown in <figref idref="DRAWINGS">FIGS. 9</figref><i>b </i>and <b>9</b><i>c</i>, the encoder later exploits redundancy between the channels for which the encoder artificially increased inter-channel correlation, and the encoder need not instruct the decoder to perform any multi-channel post-processing for those channels.</p>
<p id="p-0179" num="0178">When the decoder has the ability to perform multi-channel post-processing, the encoder can delegate reconstruction of the center channel to the decoder. If so, when the NER value n indicates poor quality coding, the encoder uses the matrix A<sub>high,2 </sub>(<b>904</b>) shown in <b>9</b><i>e</i>, with which the input center channel leaks into left and right channels. In the output, the center channel is zero, reducing the coding complexity.</p>
<p id="p-0180" num="0179">
<maths id="MATH-US-00003" num="00003">
<math overflow="scroll">
<mrow>
  <mrow>
    <mo>[</mo>
    <mtable>
      <mtr>
        <mtd>
          <mrow>
            <mo>(</mo>
            <mrow>
              <mfrac>
                <mi>a</mi>
                <mn>1.5</mn>
              </mfrac>
              <mo>+</mo>
              <mfrac>
                <mrow>
                  <mn>5</mn>
                  <mo>·</mo>
                  <mi>c</mi>
                </mrow>
                <mn>1.5</mn>
              </mfrac>
            </mrow>
            <mo>)</mo>
          </mrow>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mrow>
            <mo>(</mo>
            <mrow>
              <mfrac>
                <mi>b</mi>
                <mn>1.5</mn>
              </mfrac>
              <mo>+</mo>
              <mfrac>
                <mrow>
                  <mi>.5</mi>
                  <mo>·</mo>
                  <mi>c</mi>
                </mrow>
                <mn>1.5</mn>
              </mfrac>
            </mrow>
            <mo>)</mo>
          </mrow>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mn>0</mn>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mi>d</mi>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mfrac>
            <mrow>
              <mi>e</mi>
              <mo>+</mo>
              <mi>f</mi>
            </mrow>
            <mn>2</mn>
          </mfrac>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mfrac>
            <mrow>
              <mi>e</mi>
              <mo>+</mo>
              <mi>f</mi>
            </mrow>
            <mn>2</mn>
          </mfrac>
        </mtd>
      </mtr>
    </mtable>
    <mo>]</mo>
  </mrow>
  <mo>=</mo>
  <mrow>
    <msub>
      <mi>A</mi>
      <mrow>
        <mi>high</mi>
        <mo>,</mo>
        <mn>2</mn>
      </mrow>
    </msub>
    <mo>·</mo>
    <mrow>
      <mo>[</mo>
      <mtable>
        <mtr>
          <mtd>
            <mi>a</mi>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mi>b</mi>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mi>c</mi>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mi>d</mi>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mi>e</mi>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mi>f</mi>
          </mtd>
        </mtr>
      </mtable>
      <mo>]</mo>
    </mrow>
  </mrow>
</mrow>
</math>
</maths>
<br/>
When the encoder uses the pre-processing transform matrix A<sub>high,2 </sub>(<b>904</b>), the encoder (through the bitstream) instructs the decoder to create a phantom center by averaging the decoded left and right channels. Later multi-channel transformations in the encoder may exploit redundancy between the averaged back left and back right channels (without post-processing), or the encoder may instruct the decoder to perform some multi-channel post-processing for the back left and right channels.
</p>
<p id="p-0181" num="0180">When the NER value n indicates intermediate quality coding, the encoder may use the intermediate matrix A<sub>int er,2 </sub>(<b>903</b>) shown in <figref idref="DRAWINGS">FIG. 9</figref><i>d </i>to transition between the matrices shown in <figref idref="DRAWINGS">FIGS. 9</figref><i>a </i>and <b>9</b><i>e. </i></p>
<p id="p-0182" num="0181"><figref idref="DRAWINGS">FIG. 10</figref> shows a technique (<b>1000</b>) for multi-channel pre-processing in which the transform matrix potentially changes on a frame-by-frame basis. Changing the transform matrix can lead to audible noise (e.g., pops) in the final output if not handled carefully. To avoid introducing the popping noise, the encoder gradually transitions from one transform matrix to another between frames.</p>
<p id="p-0183" num="0182">The encoder first sets (<b>1010</b>) the pre-processing transform matrix, as described above. The encoder then determines (<b>1020</b>) if the matrix for the current frame is the different than the matrix for the previous frame (if there was a previous frame). If the current matrix is the same or there is no previous matrix, the encoder applies (<b>1030</b>) the matrix to the input audio samples for the current frame. Otherwise, the encoder applies (<b>1040</b>) a blended transform matrix to the input audio samples for the current frame. The blending function depends on implementation. In one implementation, at sample i in the current frame, the encoder uses a short-term blended matrix A<sub>pre,i</sub>.</p>
<p id="p-0184" num="0183">
<maths id="MATH-US-00004" num="00004">
<math overflow="scroll">
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <mrow>
          <msub>
            <mi>A</mi>
            <mrow>
              <mi>pre</mi>
              <mo>,</mo>
              <mi>i</mi>
            </mrow>
          </msub>
          <mo>=</mo>
          <mrow>
            <mrow>
              <mfrac>
                <mrow>
                  <mi>NumSamples</mi>
                  <mo>-</mo>
                  <mi>i</mi>
                </mrow>
                <mi>NumSamples</mi>
              </mfrac>
              <mo>⁢</mo>
              <msub>
                <mi>A</mi>
                <mrow>
                  <mi>pre</mi>
                  <mo>,</mo>
                  <mi>prev</mi>
                </mrow>
              </msub>
            </mrow>
            <mo>+</mo>
            <mrow>
              <mfrac>
                <mi>i</mi>
                <mi>NumSamples</mi>
              </mfrac>
              <mo>⁢</mo>
              <msub>
                <mi>A</mi>
                <mrow>
                  <mi>pre</mi>
                  <mo>,</mo>
                  <mi>current</mi>
                </mrow>
              </msub>
            </mrow>
          </mrow>
        </mrow>
        <mo>⁢</mo>
        <mstyle>
          <mspace width="0.3em" height="0.3ex"/>
        </mstyle>
        <mo>,</mo>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>(</mo>
        <mn>6</mn>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
</maths>
<br/>
where A<sub>pre,prev </sub>and A<sub>pre,current </sub>are the pre-processing matrices for the previous and current frames, respectively, and NumSamples is the number of samples in the current frame. Alternatively, the encoder uses another blending function to smooth discontinuities in the pre-processing transform matrices.
</p>
<p id="p-0185" num="0184">Then, the encoder encodes (<b>1050</b>) the multi-channel audio data for the frame, using techniques shown in <figref idref="DRAWINGS">FIG. 6</figref> or other compression techniques. The encoder repeats the technique (<b>1000</b>) on a frame-by-frame basis. Alternatively, the encoder changes multi-channel pre-processing on some other basis.</p>
<p id="h-0012" num="0000">IV. Tile Configuration</p>
<p id="p-0186" num="0185">In some embodiments, an encoder such as the encoder (<b>600</b>) of <figref idref="DRAWINGS">FIG. 6</figref> groups windows of multi-channel audio into tiles for subsequent encoding. This gives the encoder flexibility to use different window configurations for different channels in a frame, while also allowing multi-channel transforms on various combinations of channels for the frame. A decoder such as the decoder (<b>700</b>) of <figref idref="DRAWINGS">FIG. 7</figref> works with tiles during decoding.</p>
<p id="p-0187" num="0186">Each channel can have a window configuration independent of the other channels. Windows that have identical start and stop times are considered to be part of a tile. A tile can have one or more channels, and the encoder performs multi-channel transforms for channels in a tile.</p>
<p id="p-0188" num="0187"><figref idref="DRAWINGS">FIG. 11</figref><i>a </i>shows an example tile configuration (<b>1100</b>) for a frame of stereo audio. In <figref idref="DRAWINGS">FIG. 11</figref><i>a</i>, each tile includes a single window. No window in either channel of the stereo audio both starts and stops at the same time as a window in the other channel.</p>
<p id="p-0189" num="0188"><figref idref="DRAWINGS">FIG. 11</figref><i>b </i>shows an example tile configuration (<b>1101</b>) for a frame of 5.1 channel audio. The tile configuration (<b>1101</b>) includes seven tiles, numbered <b>0</b> through <b>6</b>. Tile <b>0</b> includes samples from channels <b>0</b>, <b>2</b>, <b>3</b>, and <b>4</b> and spans the first quarter of the frame. Tile <b>1</b> includes samples from channel <b>1</b> and spans the first half of the frame. Tile <b>2</b> includes samples from channel <b>5</b> and spans the entire frame. Tile <b>3</b> is like tile <b>0</b>, but spans the second quarter of the frame. Tiles <b>4</b> and <b>6</b> include samples in channels <b>0</b>, <b>2</b>, and <b>3</b>, and span the third and fourth quarters, respectively, of the frame. Finally, tile <b>5</b> includes samples from channels <b>1</b> and <b>4</b> and spans the last half of the frame. As shown in <figref idref="DRAWINGS">FIG. 11</figref><i>b</i>, a particular tile can include windows in non-contiguous channels.</p>
<p id="p-0190" num="0189"><figref idref="DRAWINGS">FIG. 12</figref> shows a generalized technique (<b>1200</b>) for configuring tiles of a frame of multi-channel audio. The encoder sets (<b>1210</b>) the window configurations for the channels in the frame, partitioning each channel into variable-size windows to trade-off time resolution and frequency resolution. For example, a partitioner/tile configurer of the encoder partitions each channel independently of the other channels in the frame.</p>
<p id="p-0191" num="0190">The encoder then groups (<b>1220</b>) windows from the different channels into tiles for the frame. For example, the encoder puts windows from different channels into a single tile if the windows have identical start positions and identical end positions. Alternatively, the encoder uses criteria other than or in addition to startlend positions to determine which sections of different channels to group together into a tile.</p>
<p id="p-0192" num="0191">In one implementation, the encoder performs the tile grouping (<b>1220</b>) after (and independently from) the setting (<b>1210</b>) of the window configurations for a frame. In other implementations, the encoder concurrently sets (<b>1210</b>) window configurations and groups (<b>1220</b>) windows into tiles, for example, to favor time correlation (using longer windows) or channel correlation (putting more channels into single tiles), or to control the number of tiles by coercing windows to fit into a particular set of tiles.</p>
<p id="p-0193" num="0192">The encoder then sends (<b>1230</b>) tile configuration information for the frame for output with the encoded audio data. For example, the partitioner/tile configurer of the encoder sends tile size and channel member information for the tiles to a MUX. Alternatively, the encoder sends other information specifying the tile configurations. In one implementation, the encoder sends (<b>1230</b>) the tile configuration information after the tile grouping (<b>1220</b>). In other implementations, the encoder performs these actions concurrently.</p>
<p id="p-0194" num="0193"><figref idref="DRAWINGS">FIG. 13</figref> shows a technique (<b>1300</b>) for configuring tiles and sending tile configuration information for a frame of multi-channel audio according to a particular bitstream syntax. <figref idref="DRAWINGS">FIG. 13</figref> shows the technique (<b>1300</b>) performed by the encoder to put information into the bitstream; the decoder performs a corresponding technique (reading flags, getting configuration information for particular tiles, etc.) to retrieve tile configuration information for the frame according to the bitstream syntax. Alternatively, the decoder and encoder use another syntax for one or more of the options shown in <figref idref="DRAWINGS">FIG. 13</figref>, for example, one that uses different flags or different ordering.</p>
<p id="p-0195" num="0194">The encoder initially checks (<b>1310</b>) if none of the channels in the frame are split into windows. If so, the encoder sends (<b>1312</b>) a flag bit (indicating that no channels are split), then exits. Thus, a single bit indicates if a given frame is one single tile or has multiple tiles.</p>
<p id="p-0196" num="0195">On the other hand, if at least one channel is split into windows, the encoder checks (<b>1320</b>) whether all channels of the frame have the same window configuration. If so, the encoder sends (<b>1322</b>) a flag bit (indicating that all channels have the same window configuration—each tile in the frame has all channels) and a sequence of tile sizes, then exits. Thus, the single bit indicates if the channels all have the same configuration (as in a conventional encoder bitstream) or have a flexible tile configuration.</p>
<p id="p-0197" num="0196">If at least some channels have different window configurations, the encoder scans through the sample positions of the frame to identify windows that have both the same start position and the same end position. But first, the encoder marks (<b>1330</b>) all sample positions in the frame as ungrouped. The encoder then scans (<b>1340</b>) for the next ungrouped sample position in the frame according to a channel/time scan pattern. In one implementation, the encoder scans through all channels at a particular time looking for ungrouped sample positions, then repeats for the next sample position in time, etc. In other implementations, the encoder uses another scan pattern.</p>
<p id="p-0198" num="0197">For the detected ungrouped sample position, the encoder groups (<b>1350</b>) like windows together in a tile. In particular, the encoder groups windows that start at the start position of the window including the detected ungrouped sample position, and that also end at the same position as the window including the detected ungrouped sample position. In the frame shown in <figref idref="DRAWINGS">FIG. 11</figref><i>b</i>, for example, the encoder would first detect the sample position at the beginning of channel <b>0</b>. The encoder would group the quarter-frame length windows from channels <b>0</b>, <b>2</b>, <b>3</b>, and <b>4</b> together in a tile since these windows each have the same start position and same end position as the other windows in the tile.</p>
<p id="p-0199" num="0198">The encoder then sends (<b>1360</b>) tile configuration information specifying the tile for output with the encoded audio data. The tile configuration information includes the tile size and a map indicating which channels with ungrouped sample positions in the frame at that point are in the tile. The channel map includes one bit per channel possible for the tile. Based on the sequence of tile information, the decoder determines where a tile starts and ends in a frame. The encoder reduces bitrate for the channel map by taking into account which channels can be present in the tile. For example, the information for tile <b>0</b> in <figref idref="DRAWINGS">FIG. 11</figref><i>b </i>includes the tile size and a binary pattern “101110” to indicate that channels <b>0</b>, <b>2</b>, <b>3</b>, and <b>4</b> are part of the tile. After that point, only sample positions in channels <b>1</b> and <b>5</b> are ungrouped. So, the information for tile <b>1</b> includes the tile size and the binary pattern “10” to indicate that channel <b>1</b> is part of the tile but channel <b>5</b> is not. This saves four bits in the binary pattern. The tile information for tile <b>2</b> then includes only the tile size (and not the channel map), since channel <b>5</b> is the only channel that can have a window starting in tile <b>2</b>. The tile information for tile <b>3</b> includes the tile size and the binary pattern “1111” since the channels <b>1</b> and <b>5</b> have grouped positions in the range for tile <b>3</b>. Alternatively, the encoder and decoder use another technique to signal channel patterns in the syntax.</p>
<p id="p-0200" num="0199">The encoder then marks (<b>1370</b>) the sample positions for the windows in the tile as grouped and determines (<b>1380</b>) whether to continue or not. If there are no more ungrouped sample positions in the frame, the encoder exits. Otherwise, the encoder scans (<b>1340</b>) for the next ungrouped sample position in the frame according to the channel/time scan pattern.</p>
<p id="h-0013" num="0000">V. Flexibl Multi-Channel Transforms</p>
<p id="p-0201" num="0200">In some embodiments, an encoder such as the encoder (<b>600</b>) of <figref idref="DRAWINGS">FIG. 6</figref> performs flexible multi-channel transforms that effectively take advantage of inter-channel correlation. A decoder such as the decoder (<b>700</b>) of <figref idref="DRAWINGS">FIG. 7</figref> performs corresponding inverse multi-channel transforms.</p>
<p id="p-0202" num="0201">Specifically, the encoder and decoder do one or more of the following to improve multi-channel transformations in different situations.</p>
<p id="p-0203" num="0202">1. The encoder performs the multi-channel transform after perceptual weighting, and the decoder performs the corresponding inverse multi-channel transform before inverse weighting. This reduces unmasking of quantization noise across channels after the inverse multi-channel transform.</p>
<p id="p-0204" num="0203">2. The encoder and decoder group channels for multi-channel transforms to limit which channels get transformed together.</p>
<p id="p-0205" num="0204">3. The encoder and decoder selectively turn multi-channel transforms on/off at the frequency band level to control which bands are transformed together.</p>
<p id="p-0206" num="0205">4. The encoder and decoder use hierarchical multi-channel transforms to limit computational complexity (especially in the decoder).</p>
<p id="p-0207" num="0206">5. The encoder and decoder use pre-defined multi-channel transform matrices to reduce the bitrate used to specify the transform matrices.</p>
<p id="p-0208" num="0207">6. The encoder and decoder use quantized Givens rotation-based factorization parameters to specify multi-channel transform matrices for bit efficiency.</p>
<p id="h-0014" num="0000">A. Multi-Channel Transform on Weighted Multi-Channel Audio</p>
<p id="p-0209" num="0208">In some embodiments, the encoder positions the multi-channel transform after perceptual weighting (and the decoder positions the inverse multi-channel transform before the inverse weighting) such that the cross-channel leaked signal is controlled, measurable, and has a spectrum like the original signal.</p>
<p id="p-0210" num="0209"><figref idref="DRAWINGS">FIG. 14</figref> shows a technique (<b>1400</b>) for performing one or more multi-channel transforms after perceptual weighting in the encoder. The encoder perceptually weights (<b>1410</b>) multi-channel audio, for example, applying weighting factors to multi-channel audio in the frequency domain. In some implementations, the encoder applies both weighting factors and per-channel quantization step modifiers to the multi-channel audio data before the multi-channel transform(s).</p>
<p id="p-0211" num="0210">The encoder then performs (<b>1420</b>) one or more multi-channel transforms on the weighted audio data, for example, as described below. Finally, the encoder quantizes (<b>1430</b>) the multi-channel transformed audio data.</p>
<p id="p-0212" num="0211"><figref idref="DRAWINGS">FIG. 15</figref> shows a technique (<b>1500</b>) for performing an inverse-multi-channel transform before inverse weighting in the decoder. The decoder performs (<b>1510</b>) one or more inverse multi-channel transforms on quantized audio data, for example, as described below. In particular, the decoder collects samples from multiple channels at a particular frequency index into a vector x<sub>mc </sub>and performs the inverse multi-channel transform A<sub>mc </sub>to generate the output y<sub>mc</sub>.
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>y</i><sub>mc</sub><i>=A</i><sub>mc</sub><i>·x</i><sub>mc </sub>  (7).<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0213" num="0212">Subsequently, the decoder inverse quantizes and inverse weights (<b>1520</b>) the multi-channel audio, coloring the output of the inverse multi-channel transform with mask(s). Thus, leakage that occurs across channels (due to quantization) is spectrally shaped so that the leaked signal's audibility is measurable and controllable, and the leakage of other channels in a given reconstructed channel is spectrally shaped like the original uncorrupted signal of the given channel. (In some implementations, per-channel quantization step modifiers also allow the encoder to make reconstructed signal quality approximately the same across all reconstructed channels.)</p>
<p id="p-0214" num="0213">B. Channel Groups</p>
<p id="p-0215" num="0214">In some embodiments, the encoder and decoder group channels for multi-channel transforms to limit which channels get transformed together. For example, in embodiments that use tile configuration, the encoder determines which channels within a tile correlate and groups the correlated channels. Alternatively, an encoder and decoder do not use tile configuration, but still group channels for frames or at some other level.</p>
<p id="p-0216" num="0215"><figref idref="DRAWINGS">FIG. 16</figref> shows a technique (<b>1600</b>) for grouping channels of a tile for multi-channel transformation in one implementation. In the technique (<b>1600</b>), the encoder considers pair-wise correlations between the signals of channels as well as correlations between bands in some cases. Alternatively, an encoder considers other and/or additional factors when grouping channels for multi-channel transformation.</p>
<p id="p-0217" num="0216">First, the encoder gets (<b>1610</b>) the channels for a tile. For example, in the tile configuration shown in <figref idref="DRAWINGS">FIG. 11</figref><i>b</i>, tile <b>3</b> has four channels in it: <b>0</b>, <b>2</b>, <b>3</b>, and <b>4</b>.</p>
<p id="p-0218" num="0217">The encoder computes (<b>1620</b>) pair-wise correlations between the signals in channels, and then groups (<b>1630</b>) channels accordingly. Suppose that for tile <b>3</b> of <figref idref="DRAWINGS">FIG. 11</figref><i>b</i>, channels <b>0</b> and <b>2</b> are pair-wise correlated, but neither of those channels is pair-wise correlated with channel <b>3</b> or channel <b>4</b>, and channel <b>3</b> is not pair-wise correlated with channel <b>4</b>. The encoder groups (<b>1630</b>) channels <b>0</b> and <b>2</b> together, puts channel <b>3</b> in a separate group, and puts channel <b>4</b> in still another group.</p>
<p id="p-0219" num="0218">A channel that is not pair-wise correlated with any of the channels in a group may still be compatible with that group. So, for the channels that are incompatible with a group, the encoder optionally checks (<b>1640</b>) compatibility at band level and adjusts (<b>1650</b>) the one or more groups of channels accordingly. In particular, this identifies channels that are compatible with a group in some bands, but incompatible in some other bands. For example, suppose that channel <b>4</b> of tile <b>3</b> in <figref idref="DRAWINGS">FIG. 11</figref><i>b </i>is actually compatible with channels <b>0</b> and <b>2</b> at most bands, but that incompatibility in a few bands skews the pair-wise correlation results. The encoder adjusts (<b>1650</b>) the groups to put channels <b>0</b>, <b>2</b>, and <b>4</b> together, leaving channel <b>3</b> in its own group. The encoder may also perform such testing when some channels are “overall” correlated, but have incompatible bands. Turning off the transform at those incompatible bands improves the correlation among the bands that actually get multi-channel transform coded, and hence improves coding efficiency.</p>
<p id="p-0220" num="0219">A channel in a given tile belongs to one channel group. The channels in a channel group need not be contiguous. A single tile may include multiple channel groups, and each channel group may have a different associated multi-channel transform. After deciding which channels are compatible, the encoder puts channel group information into the bitstream.</p>
<p id="p-0221" num="0220"><figref idref="DRAWINGS">FIG. 17</figref> shows a technique (<b>1700</b>) for retrieving channel group information and multi-channel transform information for a tile from a bitstream according to a particular bitstream syntax, irrespective of how the encoder computes channel groups. <figref idref="DRAWINGS">FIG. 17</figref> shows the technique (<b>1700</b>) performed by the decoder to retrieve information from the bitstream; the encoder performs a corresponding technique to format channel group information and multi-channel transform information for the tile according to the bitstream syntax. Alternatively, the decoder and encoder use another syntax for one or more of the options shown in <figref idref="DRAWINGS">FIG. 17</figref>.</p>
<p id="p-0222" num="0221">First, the decoder initializes several variables used in the technique (<b>1700</b>). The decoder sets (<b>1710</b>) #ChannelsToVisit equal to the number of channels in the tile #ChannelsInTile and sets (<b>1712</b>) the number of channel groups #ChannelGroups to 0.</p>
<p id="p-0223" num="0222">The decoder checks (<b>1720</b>) whether #ChannelsToVisit is greater than 2. If not, the decoder checks (<b>1730</b>) whether #ChannelsToVisit equals 2. If so, the decoder decodes (<b>1740</b>) the multi-channel transform for the group of two channels, for example, using a technique described below. The syntax allows each channel group to have a different multi-channel transform. On the other hand, if #ChannelsToVisit equal 1 or 0, the decoder exits without decoding a multi-channel transform.</p>
<p id="p-0224" num="0223">If #ChannelsToVisit is greater than 2, the decoder decodes (<b>1750</b>) the channel mask for a group in the tile. Specifically, the decoder reads #ChannelsToVisit bits from the bitstream for the channel mask. Each bit in the channel mask indicates whether a particular channel is or is not in the channel group. For example, if the channel mask is “10110” then the tile includes 5 channels, and channels <b>0</b>, <b>2</b>, and <b>3</b> are in the channel group.</p>
<p id="p-0225" num="0224">The decoder then counts (<b>1760</b>) the number of channels in the group and decodes (<b>1770</b>) the multi-channel transform for the group, for example, using a technique described below. The decoder updates (<b>1780</b>) #ChannelsToVisit by subtracting the counted number of channels in the current channel group, increments (<b>1790</b>) #ChannelGroups, and checks (<b>1720</b>) whether the number of channels left to visit #ChannelsToVisit is greater than 2.</p>
<p id="p-0226" num="0225">Alternatively, in embodiments that do not use tile configurations, the decoder retrieves channel group information and multi-channel transform information for a frame or at some other level.</p>
<p id="h-0015" num="0000">C. Band On/Off Control for Multi-Channel Transform</p>
<p id="p-0227" num="0226">In some embodiments, the encoder and decoder selectively turn multi-channel transforms on/off at the frequency band level to control which bands are transformed together. In this way, the encoder and decoder selectively exclude bands that are not compatible in multi-channel transforms. When the multi-channel transform is turned off for a particular band, the encoder and decoder uses the identity transform for that band, passing through the data at that band without altering it.</p>
<p id="p-0228" num="0227">The frequency bands are critical bands or quantization bands. The number of frequency bands relates to the sampling frequency of the audio data and the tile size. In general, the higher the sampling frequency or larger the tile size, the greater the number of frequency bands.</p>
<p id="p-0229" num="0228">In some implementations, the encoder selectively turns multi-channel transforms on/off at the frequency band level for channels of a channel group of a tile. The encoder can turn bands on/off as the encoder groups channels for a tile or after the channel grouping for the tile. Alternatively, an encoder and decoder do not use tile configuration, but still turn multi-channel transforms on/off at frequency bands for a frame or at some other level.</p>
<p id="p-0230" num="0229"><figref idref="DRAWINGS">FIG. 18</figref> shows a technique (<b>1800</b>) for selectively including frequency bands of channels of a channel group in a multi-channel transform in one implementation. In the technique (<b>1800</b>), the encoder considers pair-wise correlations between the signals of the channels at a band to determine whether to enable or disable the multi-channel transform for the band. Alternatively, an encoder considers other and/or additional factors when selectively turning frequency bands on or off for a multi-channel transform.</p>
<p id="p-0231" num="0230">First, the encoder gets (<b>1810</b>) the channels for a channel group, for example, as described with reference to <figref idref="DRAWINGS">FIG. 16</figref>. The encoder then computes (<b>1820</b>) pair-wise correlations between the signals in the channels for different frequency bands. For example, if the channel group includes two channels, the encoder computes a pair-wise correlation at each frequency band. Or, if the channel group includes more than two channels, the encoder computes pair-wise correlations between some or all of the respective channel pairs at each frequency band.</p>
<p id="p-0232" num="0231">The encoder then turns (<b>1830</b>) bands on or off for the multi-channel transform for the channel group. For example, if the channel group includes two channels, the encoder enables the multi-channel transform for a band if the pair-wise correlation at the band satisfies a particular threshold. Or, if the channel group includes more than two channels, the encoder enables the multi-channel transform for a band if each or a majority of the pair-wise correlations at the band satisfies a particular threshold. In alternative embodiments, instead of turning a particular frequency band on or off for all channels, the encoder turns the band on for some channels and off for other channels.</p>
<p id="p-0233" num="0232">After deciding which bands are included in multi-channel transforms, the encoder puts band on/off information into the bitstream.</p>
<p id="p-0234" num="0233"><figref idref="DRAWINGS">FIG. 19</figref> shows a technique (<b>1900</b>) for retrieving band on/off information for a multi-channel transform for a channel group of a tile from a bitstream according to a particular bitstream syntax, irrespective of how the encoder decides whether to turn bands on or off. <figref idref="DRAWINGS">FIG. 19</figref> shows the technique (<b>1900</b>) performed by the decoder to retrieve information from the bitstream; the encoder performs a corresponding technique to format band on/off information for the channel group according to the bitstream syntax. Alternatively, the decoder and encoder use another syntax for one or more of the options shown in <figref idref="DRAWINGS">FIG. 19</figref>.</p>
<p id="p-0235" num="0234">In some implementations, the decoder performs the technique (<b>1900</b>) as part of the decoding of the multi-channel transform (<b>1740</b> or <b>1770</b>) of the technique (<b>1700</b>). Alternatively, the decoder performs the technique (<b>1900</b>) separately.</p>
<p id="p-0236" num="0235">The decoder gets (<b>1910</b>) a bit and checks (<b>1920</b>) the bit to determine whether all bands are enabled for the channel group. If so, the decoder enables (<b>1930</b>) the multi-channel transform for all bands of the channel group.</p>
<p id="p-0237" num="0236">On the other hand, if the bit indicates all bands are not enabled for the channel group, the decoder decodes (<b>1940</b>) the band mask for the channel group. Specifically, the decoder reads a number of bits from bitstream, where the number is the number of bands for the channel group. Each bit in the band mask indicates whether a particular band is on or off for the channel group. For example, if the band mask is “111111110110000” then the channel group includes 15 bands, and bands <b>0</b>, <b>1</b>, <b>2</b>, <b>3</b>, <b>4</b>, <b>5</b>, <b>6</b>, <b>7</b>, <b>9</b>, and <b>10</b> are turned on for the multi-channel transform. The decoder then enables (<b>1950</b>) the multi-channel transform for the indicated bands.</p>
<p id="p-0238" num="0237">Alternatively, in embodiments that do not use tile configurations, the decoder retrieves band on/off information for a frame or at some other level.</p>
<p id="p-0239" num="0238">D. Hierarchical Multi-Channel Transforms</p>
<p id="p-0240" num="0239">In some embodiments, the encoder and decoder use hierarchical multi-channel transforms to limit computational complexity, especially in the decoder. With the hierarchical transform, an encoder splits an overall transformation into multiple stages, reducing the computational complexity of individual stages and in some cases reducing the amount of information needed to specify the multi-channel transform(s). Using this cascaded structure, the encoder emulates the larger overall transform with smaller transforms, up to some accuracy. The decoder performs a corresponding hierarchical inverse transform.</p>
<p id="p-0241" num="0240">In some implementations, each stage of the hierarchical transform is identical in structure and, in the bitstream, each stage is described independent of the one or more other stages. In particular, each stage has its own channel groups and one multi-channel transform matrix per channel group. In alternative implementations, different stages have different structures, the encoder and decoder use a different bitstream syntax, and/or the stages use another configuration for channels and transforms.</p>
<p id="p-0242" num="0241"><figref idref="DRAWINGS">FIG. 20</figref> shows a generalized technique (<b>2000</b>) for emulating a multi-channel transform using a hierarchy of simpler multi-channel transforms. <figref idref="DRAWINGS">FIG. 20</figref> shows an n stage hierarchy, where n is the number of multi-channel transform stages. For example, in one implementation, n is 2. Alternatively, n is more than 2.</p>
<p id="p-0243" num="0242">The encoder determines (<b>2010</b>) a hierarchy of multi-channel transforms for an overall transform. The encoder decides the transform sizes (i.e., channel group size) based on the complexity of the decoder that will perform the inverse transforms. Or the encoder considers target decoder profile/decoder level or some other criteria.</p>
<p id="p-0244" num="0243"><figref idref="DRAWINGS">FIG. 21</figref> is a chart showing an example hierarchy (<b>2100</b>) of multi-channel transforms. The hierarchy (<b>2100</b>) includes 2 stages. The first stage includes N+1 channel groups and transforms, numbered from 0 to N; the second stage includes M+1 channel groups and transforms, numbered from 0 to M. Each channel group includes 1 or more channels. For each of the N+1 transforms of the first stage, the input channels are some combination of the channels input to the multi-channel transformer. Not all input channels must be transformed in the first stage. One or more input channels may pass through the first stage unaltered (e.g., the encoder may include such channels in an channel group that uses an identity matrix.) For each of the M+1 transforms of the second stage, the input channels are some combination of the output channels from the first stage, including channels that may have passed through the first stage unaltered.</p>
<p id="p-0245" num="0244">Returning to <figref idref="DRAWINGS">FIG. 20</figref>, the encoder performs (<b>2020</b>) the first stage of multi-channel transforms, performs the next stage of multi-channel transforms, finally performing (<b>2030</b>) the n<sup>th </sup>stage of multi-channel transforms. A decoder performs corresponding inverse multi-channel transforms during decoding.</p>
<p id="p-0246" num="0245">In some implementations, the channel groups are the same at multiple stages of the hierarchy, but the multi-channel transforms are different. In such cases, and in certain other cases as well, the encoder may combine frequency band on/off information for the multiple multi-channel transforms. For example, suppose there are two multi-channel transforms and the same three channels in the channel group for each. The encoder may specify no transform/identity transform at both stages for band <b>0</b>, only multi-channel transform stage <b>1</b> for band <b>1</b> (no stage <b>2</b> transform), only multi-channel transform stage <b>2</b> for band <b>2</b> (no stage <b>1</b> transform), both stages of multi-channel transforms for band <b>3</b>, no transform at both stages for band <b>4</b>, etc.</p>
<p id="p-0247" num="0246"><figref idref="DRAWINGS">FIG. 22</figref> shows a technique (<b>2200</b>) for retrieving information for a hierarchy of multi-channel transforms for channel groups from a bitstream according to a particular bitstream syntax. <figref idref="DRAWINGS">FIG. 22</figref> shows the technique (<b>2200</b>) performed by the decoder to parse the bitstream; the encoder performs a corresponding technique to format the hierarchy of multi-channel transforms according to the bitstream syntax. Alternatively, the decoder and encoder use another syntax, for example, one that includes additional flags and signaling bits for more than two stages.</p>
<p id="p-0248" num="0247">The decoder first sets (<b>2210</b>) a temporary value iTmp equal to the next bit in the bitstream. The decoder then checks (<b>2220</b>) the value of the temporary value, which signals whether or not the decoder should decode (<b>2230</b>) channel group and multi-channel transform information for a stage <b>1</b> group.</p>
<p id="p-0249" num="0248">After the decoder decodes (<b>2230</b>) channel group and multi-channel transform information for a stage <b>1</b> group, the decoder sets (<b>2240</b>) iTmp equal to the next bit in the bitstream. The decoder again checks (<b>2220</b>) the value of iTmp, which signals whether or not the bitstream includes channel group and multi-channel transform information for any more stage <b>1</b> groups. Only the channel groups with non-identity transforms are specified in the stage <b>1</b> portion of the bitstream; channels that are not described in the stage <b>1</b> part of the bitstream are assumed to be part of a channel group that uses an identity transform.</p>
<p id="p-0250" num="0249">If the bistream includes no more channel group and multi-channel transform information for stage <b>1</b> groups, the decoder decodes (<b>2250</b>) channel group and multi-channel transform information for all stage <b>2</b> groups.</p>
<p id="p-0251" num="0250">E. Pre-Defined or Custom Multi-Channel Transforms</p>
<p id="p-0252" num="0251">In some embodiments, the encoder and decoder use pre-defined multi-channel transform matrices to reduce the bitrate used to specify transform matrices. The encoder selects from among multiple available pre-defined matrix types and signals the selected matrix in the bitstream with a small number (e.g., 1, 2) of bits. Some types of matrices require no additional signaling in the bitstream, but other types of matrices require additional specification. The decoder retrieves the information indicating the matrix type and (if necessary) the additional information specifying the matrix.</p>
<p id="p-0253" num="0252">In some implementations, the encoder and decoder use the following pre-defined matrix types: identity, Hadamard, DCT type II, or arbitrary unitary. Alternatively, the encoder and decoder use different and/or additional pre-defined matrix types.</p>
<p id="p-0254" num="0253"><figref idref="DRAWINGS">FIG. 9</figref><i>a </i>shows an example of an identity matrix for 6 channels in another context. The encoder efficiently specifies an identity matrix in the bitstream using flag bits, assuming the number of dimensions for the identity matrix are known to both the encoder and decoder from other information (e.g., the number of channels in a group).</p>
<p id="p-0255" num="0254">A Hadamard matrix has the following form.</p>
<p id="p-0256" num="0255">
<maths id="MATH-US-00005" num="00005">
<math overflow="scroll">
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <mrow>
          <msub>
            <mi>A</mi>
            <mi>Hadamard</mi>
          </msub>
          <mo>=</mo>
          <mrow>
            <mi>ρ</mi>
            <mo>⁡</mo>
            <mrow>
              <mo>[</mo>
              <mtable>
                <mtr>
                  <mtd>
                    <mn>0.5</mn>
                  </mtd>
                  <mtd>
                    <mrow>
                      <mo>-</mo>
                      <mn>0.5</mn>
                    </mrow>
                  </mtd>
                </mtr>
                <mtr>
                  <mtd>
                    <mn>0.5</mn>
                  </mtd>
                  <mtd>
                    <mn>0.5</mn>
                  </mtd>
                </mtr>
              </mtable>
              <mo>]</mo>
            </mrow>
          </mrow>
        </mrow>
        <mo>,</mo>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>(</mo>
        <mn>8</mn>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
</maths>
<br/>
where ρ is a normalizing scalar (√{square root over (2)}). The encoder efficiently specifies a Hadamard matrix for stereo data in the bitstream using flag bits.
</p>
<p id="p-0257" num="0256">A DCT type II matrix has the following form.</p>
<p id="p-0258" num="0257">
<maths id="MATH-US-00006" num="00006">
<math overflow="scroll">
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <mrow>
          <msub>
            <mi>A</mi>
            <mrow>
              <mi>DCT</mi>
              <mo>,</mo>
              <mi>II</mi>
            </mrow>
          </msub>
          <mo>=</mo>
          <mrow>
            <mo>[</mo>
            <mtable>
              <mtr>
                <mtd>
                  <msub>
                    <mi>a</mi>
                    <mrow>
                      <mn>0</mn>
                      <mo>,</mo>
                      <mn>0</mn>
                    </mrow>
                  </msub>
                </mtd>
                <mtd>
                  <msub>
                    <mi>a</mi>
                    <mrow>
                      <mn>0</mn>
                      <mo>,</mo>
                      <mn>1</mn>
                    </mrow>
                  </msub>
                </mtd>
                <mtd>
                  <mi>⋯</mi>
                </mtd>
                <mtd>
                  <msub>
                    <mi>a</mi>
                    <mrow>
                      <mn>0</mn>
                      <mo>,</mo>
                      <mrow>
                        <mi>N</mi>
                        <mo>-</mo>
                        <mn>1</mn>
                      </mrow>
                    </mrow>
                  </msub>
                </mtd>
              </mtr>
              <mtr>
                <mtd>
                  <msub>
                    <mi>a</mi>
                    <mrow>
                      <mn>1</mn>
                      <mo>,</mo>
                      <mn>0</mn>
                    </mrow>
                  </msub>
                </mtd>
                <mtd>
                  <msub>
                    <mi>a</mi>
                    <mrow>
                      <mn>1</mn>
                      <mo>,</mo>
                      <mn>1</mn>
                    </mrow>
                  </msub>
                </mtd>
                <mtd>
                  <mi>⋯</mi>
                </mtd>
                <mtd>
                  <msub>
                    <mi>a</mi>
                    <mrow>
                      <mn>1</mn>
                      <mo>,</mo>
                      <mrow>
                        <mi>N</mi>
                        <mo>-</mo>
                        <mn>1</mn>
                      </mrow>
                    </mrow>
                  </msub>
                </mtd>
              </mtr>
              <mtr>
                <mtd>
                  <mi>⋯</mi>
                </mtd>
                <mtd>
                  <mi>⋯</mi>
                </mtd>
                <mtd>
                  <mi>⋯</mi>
                </mtd>
                <mtd>
                  <mi>⋯</mi>
                </mtd>
              </mtr>
              <mtr>
                <mtd>
                  <msub>
                    <mi>a</mi>
                    <mrow>
                      <mrow>
                        <mi>N</mi>
                        <mo>-</mo>
                        <mn>1</mn>
                      </mrow>
                      <mo>,</mo>
                      <mn>0</mn>
                    </mrow>
                  </msub>
                </mtd>
                <mtd>
                  <msub>
                    <mi>a</mi>
                    <mrow>
                      <mrow>
                        <mi>N</mi>
                        <mo>-</mo>
                        <mn>1</mn>
                      </mrow>
                      <mo>,</mo>
                      <mn>1</mn>
                    </mrow>
                  </msub>
                </mtd>
                <mtd>
                  <mi>⋯</mi>
                </mtd>
                <mtd>
                  <msub>
                    <mi>a</mi>
                    <mrow>
                      <mrow>
                        <mi>N</mi>
                        <mo>-</mo>
                        <mn>1</mn>
                      </mrow>
                      <mo>,</mo>
                      <mrow>
                        <mi>N</mi>
                        <mo>-</mo>
                        <mn>1</mn>
                      </mrow>
                    </mrow>
                  </msub>
                </mtd>
              </mtr>
            </mtable>
            <mo>]</mo>
          </mrow>
        </mrow>
        <mo>,</mo>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>(</mo>
        <mn>9</mn>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
</maths>
<br/>
where
</p>
<p id="p-0259" num="0258">
<maths id="MATH-US-00007" num="00007">
<math overflow="scroll">
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <mrow>
          <msub>
            <mi>a</mi>
            <mrow>
              <mi>n</mi>
              <mo>,</mo>
              <mi>m</mi>
            </mrow>
          </msub>
          <mo>=</mo>
          <mrow>
            <msub>
              <mi>k</mi>
              <mi>m</mi>
            </msub>
            <mo>·</mo>
            <mrow>
              <mi>cos</mi>
              <mo>⁡</mo>
              <mrow>
                <mo>(</mo>
                <mfrac>
                  <mrow>
                    <mrow>
                      <mi>m</mi>
                      <mo>·</mo>
                      <mrow>
                        <mo>(</mo>
                        <mrow>
                          <mi>n</mi>
                          <mo>+</mo>
                          <mn>0.5</mn>
                        </mrow>
                        <mo>)</mo>
                      </mrow>
                    </mrow>
                    <mo>⁢</mo>
                    <mi>π</mi>
                  </mrow>
                  <mi>N</mi>
                </mfrac>
                <mo>)</mo>
              </mrow>
            </mrow>
          </mrow>
        </mrow>
        <mo>,</mo>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>(</mo>
        <mn>10</mn>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
</maths>
<br/>
and where
</p>
<p id="p-0260" num="0259">
<maths id="MATH-US-00008" num="00008">
<math overflow="scroll">
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <msub>
          <mi>k</mi>
          <mi>m</mi>
        </msub>
        <mo>=</mo>
        <mrow>
          <mo>{</mo>
          <mrow>
            <mtable>
              <mtr>
                <mtd>
                  <msqrt>
                    <mfrac>
                      <mn>1</mn>
                      <mi>N</mi>
                    </mfrac>
                  </msqrt>
                </mtd>
                <mtd>
                  <mrow>
                    <mi>m</mi>
                    <mo>=</mo>
                    <mn>0</mn>
                  </mrow>
                </mtd>
              </mtr>
              <mtr>
                <mtd>
                  <msqrt>
                    <mfrac>
                      <mn>2</mn>
                      <mi>N</mi>
                    </mfrac>
                  </msqrt>
                </mtd>
                <mtd>
                  <mrow>
                    <mi>m</mi>
                    <mo>&gt;</mo>
                    <mn>0</mn>
                  </mrow>
                </mtd>
              </mtr>
            </mtable>
            <mo>⁢</mo>
            <mstyle>
              <mspace width="0.3em" height="0.3ex"/>
            </mstyle>
            <mo>.</mo>
          </mrow>
        </mrow>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>(</mo>
        <mn>11</mn>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
</maths>
</p>
<p id="p-0261" num="0260">For additional information about DCT type II matrices, see Rao et al., <i>Discrete Cosine Transform</i>, Academic Press (1990). The DCT type II matrix can have any size (i.e., work for any size channel group). The encoder efficiently specifies a DCT type II matrix in the bitstream using flag bits, assuming the number of dimensions for the DCT type II matrix are known to both the encoder and decoder from other information (e.g., the number of channels in a group).</p>
<p id="p-0262" num="0261">A square matrix A<sub>square </sub>is unitary if its transposition is its inverse.
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>A</i><sub>square</sub><i>·A</i><sub>square</sub><sup>T</sup><i>=A</i><sub>square</sub><sup>T</sup><i>·A</i><sub>square</sub><i>=I </i>  (12),<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
where I is the identity matrix. The encoder uses arbitrary unitary matrices to specify KLT transforms for effective redundancy removal. The encoder efficiently specifies an arbitrary unitary matrix in the bitstream using flag bits and a parameterization of the matrix. In some implementations, the encoder parameterizes the matrix using quantized Givens factorizing rotations, as described below. Alternatively, the encoder uses another parameterization.
</p>
<p id="p-0263" num="0262"><figref idref="DRAWINGS">FIG. 23</figref> shows a technique (<b>2300</b>) for selecting a multi-channel transform type from among plural available types. The encoder selects a transform type on a channel group-by-channel group basis or at some other level.</p>
<p id="p-0264" num="0263">The encoder selects (<b>2310</b>) a multi-channel transform type from among multiple available types. For example, the available types include identity, Hadamard, DCT type II, and arbitrary unitary. Alternatively, the types include different and/or additional matrix types. The encoder uses an identity, Hadamard, or DCT type II matrix (rather than an arbitrary unitary matrix) if possible or if needed in order to reduce the bits needed to specify the transform matrix. For example, the encoder uses an identity, Hadamard, or DCT type II matrix if redundancy removal is comparable or close enough (by some criteria) to redundancy removal with the arbitrary unitary matrix. Or, the encoder uses an identity, Hadamard, or DCT type II matrix if the encoder must reduce bitrate. In a general situation, however, the encoder uses an arbitrary unitary matrix for the best compression efficiency.</p>
<p id="p-0265" num="0264">The encoder then applies (<b>2320</b>) a multi-channel transform of the selected type to the multi-channel audio data.</p>
<p id="p-0266" num="0265"><figref idref="DRAWINGS">FIG. 24</figref> shows a technique (<b>2400</b>) for retrieving a multi-channel transform type from among plural available types and performing an inverse multi-channel transform. The decoder retrieves transform type information on a channel group-by-channel group basis or at some other level.</p>
<p id="p-0267" num="0266">The decoder retrieves (<b>2410</b>) a multi-channel transform type from among multiple available types. For example, the available types include identity, Hadamard, DCT type II, and arbitrary unitary. Alternatively, the types include different and/or additional matrix types. If necessary, the decoder retrieves additional information specifying the matrix.</p>
<p id="p-0268" num="0267">After reconstructing the matrix, the decoder applies (<b>2420</b>) an inverse multi-channel transform of the selected type to the multi-channel audio data.</p>
<p id="p-0269" num="0268"><figref idref="DRAWINGS">FIG. 25</figref> shows a technique (<b>2500</b>) for retrieving multi-channel transform information for a channel group from a bitstream according to a particular bitstream syntax. <figref idref="DRAWINGS">FIG. 25</figref> shows the technique (<b>2500</b>) performed by the decoder to parse the bitstream; the encoder performs a corresponding technique to format the multi-channel transform information according to the bitstream syntax. Alternatively, the decoder and encoder use another syntax, for example, one that uses different flag bits, different ordering, or different transform types.</p>
<p id="p-0270" num="0269">Initially, the decoder checks (<b>2510</b>) whether the number of channels in the group #ChannelsInGroup is greater than 1. If not, the channel group is for mono audio, and the decoder uses (<b>2512</b>) an identity transform for the group.</p>
<p id="p-0271" num="0270">If #ChannelsInGroup is greater than 1, the decoder checks (<b>2520</b>) whether #ChannelsInGroup is greater than 2. If not, the channel group is for stereo audio, and the decoder sets (<b>2522</b>) a temporary value iTmp equal to the next bit in the bitstream. The decoder then checks (<b>2524</b>) the value of the temporary value, which signals whether the decoder should use (<b>2530</b>) a Hadamard transform for the channel group. If not, the decoder sets (<b>2526</b>) iTmp equal to the next bit in the bitstream and checks (<b>2528</b>) the value of iTmp, which signals whether the decoder should use (<b>2550</b>) an identity transform for the channel group. If not, the decoder decodes (<b>2570</b>) a generic unitary transform for the channel group.</p>
<p id="p-0272" num="0271">If #ChannelsInGroup is greater than 2, the channel group is for surround sound audio, and the decoder sets (<b>2540</b>) a temporary value iTmp equal to the next bit in the bitstream. The decoder checks (<b>2542</b>) the value of the temporary value, which signals whether the decoder should use (<b>2550</b>) an identity transform of size #ChannelsInGroup for the channel group. If not, the decoder sets (<b>2560</b>) iTmp equal to the next bit in the bitstream and checks (<b>2562</b>) the value of iTmp. The bit signals whether the decoder should decode (<b>2570</b>) a generic unitary transform for the channel group or use (<b>2580</b>) a DCT type II transform of size #ChannelsInGroup for the channel group.</p>
<p id="p-0273" num="0272">When the decoder uses a Hadamard, DCT type II, or generic unitary transform matrix for the channel group, the decoder decodes (<b>2590</b>) multi-channel transform band on/off information for the matrix, then exits.</p>
<p id="p-0274" num="0273">F. Givens Rotation Representation of Transform Matrices</p>
<p id="p-0275" num="0274">In some embodiments, the encoder and decoder use quantized Givens rotation-based factorization parameters to specify an arbitrary unitary transform matrix for bit efficiency.</p>
<p id="p-0276" num="0275">In general, a unitary transform matrix can be represented using Givens factorizing rotations. Using this factorization, a unitary transform matrix can be represented as:</p>
<p id="p-0277" num="0276">
<maths id="MATH-US-00009" num="00009">
<math overflow="scroll">
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <msub>
          <mi>A</mi>
          <mi>unitary</mi>
        </msub>
        <mo>=</mo>
        <mrow>
          <msub>
            <mi>Θ</mi>
            <mrow>
              <mn>0</mn>
              <mo>,</mo>
              <mrow>
                <mi>N</mi>
                <mo>-</mo>
                <mn>2</mn>
              </mrow>
            </mrow>
          </msub>
          <mo>⁢</mo>
          <mstyle>
            <mspace width="0.6em" height="0.6ex"/>
          </mstyle>
          <mo>⁢</mo>
          <mi>⋯</mi>
          <mo>⁢</mo>
          <mstyle>
            <mspace width="0.6em" height="0.6ex"/>
          </mstyle>
          <mo>⁢</mo>
          <msub>
            <mi>Θ</mi>
            <mrow>
              <mn>0</mn>
              <mo>,</mo>
              <mn>1</mn>
            </mrow>
          </msub>
          <mo>⁢</mo>
          <msub>
            <mi>Θ</mi>
            <mrow>
              <mn>0</mn>
              <mo>,</mo>
              <mn>0</mn>
            </mrow>
          </msub>
          <mo>⁢</mo>
          <msub>
            <mi>Θ</mi>
            <mrow>
              <mn>1</mn>
              <mo>,</mo>
              <mrow>
                <mi>N</mi>
                <mo>-</mo>
                <mn>3</mn>
              </mrow>
            </mrow>
          </msub>
          <mo>⁢</mo>
          <mstyle>
            <mspace width="0.6em" height="0.6ex"/>
          </mstyle>
          <mo>⁢</mo>
          <mi>⋯</mi>
          <mo>⁢</mo>
          <mstyle>
            <mspace width="0.6em" height="0.6ex"/>
          </mstyle>
          <mo>⁢</mo>
          <msub>
            <mi>Θ</mi>
            <mrow>
              <mn>1</mn>
              <mo>,</mo>
              <mn>1</mn>
            </mrow>
          </msub>
          <mo>⁢</mo>
          <msub>
            <mi>Θ</mi>
            <mrow>
              <mn>1</mn>
              <mo>,</mo>
              <mn>0</mn>
            </mrow>
          </msub>
          <mo>⁢</mo>
          <mstyle>
            <mspace width="0.6em" height="0.6ex"/>
          </mstyle>
          <mo>⁢</mo>
          <mi>⋯</mi>
          <mo>⁢</mo>
          <mstyle>
            <mspace width="0.6em" height="0.6ex"/>
          </mstyle>
          <mo>⁢</mo>
          <mrow>
            <msub>
              <mi>Θ</mi>
              <mrow>
                <mrow>
                  <mi>N</mi>
                  <mo>-</mo>
                  <mn>2</mn>
                </mrow>
                <mo>,</mo>
                <mn>0</mn>
              </mrow>
            </msub>
            <mo>⁡</mo>
            <mrow>
              <mo>[</mo>
              <mtable>
                <mtr>
                  <mtd>
                    <msub>
                      <mi>α</mi>
                      <mn>0</mn>
                    </msub>
                  </mtd>
                  <mtd>
                    <mn>0</mn>
                  </mtd>
                  <mtd>
                    <mi>⋯</mi>
                  </mtd>
                  <mtd>
                    <mn>0</mn>
                  </mtd>
                </mtr>
                <mtr>
                  <mtd>
                    <mn>0</mn>
                  </mtd>
                  <mtd>
                    <msub>
                      <mi>α</mi>
                      <mn>1</mn>
                    </msub>
                  </mtd>
                  <mtd>
                    <mi>⋯</mi>
                  </mtd>
                  <mtd>
                    <mn>0</mn>
                  </mtd>
                </mtr>
                <mtr>
                  <mtd>
                    <mi>⋯</mi>
                  </mtd>
                  <mtd>
                    <mi>⋯</mi>
                  </mtd>
                  <mtd>
                    <mi>⋯</mi>
                  </mtd>
                  <mtd>
                    <mi>⋯</mi>
                  </mtd>
                </mtr>
                <mtr>
                  <mtd>
                    <mn>0</mn>
                  </mtd>
                  <mtd>
                    <mn>0</mn>
                  </mtd>
                  <mtd>
                    <mi>⋯</mi>
                  </mtd>
                  <mtd>
                    <msub>
                      <mi>α</mi>
                      <mrow>
                        <mi>N</mi>
                        <mo>-</mo>
                        <mn>1</mn>
                      </mrow>
                    </msub>
                  </mtd>
                </mtr>
              </mtable>
              <mo>]</mo>
            </mrow>
          </mrow>
        </mrow>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>(</mo>
        <mn>13</mn>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
</maths>
<br/>
where α<sub>i </sub>is +1 or −1 (sign of rotation), and each Θ is of the form of the rotation matrix (<b>2600</b>) shown in <figref idref="DRAWINGS">FIG. 26</figref>. The rotation matrix (<b>2600</b>) is almost like an identity matrix, but has four sine/cosine terms with varying positions. <figref idref="DRAWINGS">FIGS. 27</figref><i>a</i>-<b>27</b><i>c </i>show example rotation matrices for Givens rotations for representing a multi-channel transform matrix The two cosine terms are always on the diagonal, the two sine terms are in same row/column as the cosine terms. Each Θ has one rotation angle, and its value can have a range
</p>
<p id="p-0278" num="0277">
<maths id="MATH-US-00010" num="00010">
<math overflow="scroll">
<mrow>
  <mrow>
    <mo>-</mo>
    <mfrac>
      <mi>π</mi>
      <mn>2</mn>
    </mfrac>
  </mrow>
  <mo>≤</mo>
  <msub>
    <mi>ω</mi>
    <mi>k</mi>
  </msub>
  <mo>&lt;</mo>
  <mrow>
    <mfrac>
      <mi>π</mi>
      <mn>2</mn>
    </mfrac>
    <mo>.</mo>
  </mrow>
</mrow>
</math>
</maths>
<br/>
The number of such rotation matrices Θ needed to completely describe an NxN unitary matrix A<sub>unitary </sub>is:
</p>
<p id="p-0279" num="0278">
<maths id="MATH-US-00011" num="00011">
<math overflow="scroll">
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <mfrac>
          <mrow>
            <mi>N</mi>
            <mo>⁡</mo>
            <mrow>
              <mo>(</mo>
              <mrow>
                <mi>N</mi>
                <mo>-</mo>
                <mn>1</mn>
              </mrow>
              <mo>)</mo>
            </mrow>
          </mrow>
          <mn>2</mn>
        </mfrac>
        <mo>.</mo>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>(</mo>
        <mn>14</mn>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
</maths>
</p>
<p id="p-0280" num="0279">For additional information about Givens factorizing rotations, see Vaidyanathan, <i>Multirate Systems and Filter Banks</i>, Chapter 14.6, “Factorization of Unitary Matrices,” Prentice Hall (1993), hereby incorporated by reference.</p>
<p id="p-0281" num="0280">In some embodiments, the encoder quantizes the rotation angles for the Givens factorization to reduce bitrate. <figref idref="DRAWINGS">FIG. 28</figref> shows a technique (<b>2800</b>) for representing a multi-channel transform matrix using quantized Givens factorizing rotations. Alternatively, an encoder or processing tool uses quantized Givens factorizing rotations to represent a unitary matrix for some purpose other than multi-channel transformation of audio channels.</p>
<p id="p-0282" num="0281">The encoder first computes (<b>2810</b>) an arbitrary unitary matrix for a multi-channel transform. The encoder then computes (<b>2820</b>) the Givens factorizing rotations for the unitary matrix.</p>
<p id="p-0283" num="0282">To reduce bitrate, the encoder quantizes (<b>2830</b>) the rotation angles. In one implementation, the encoder uniformly quantizes each rotation angle to one of 64 (2<sup>6</sup>=64) possible values. The rotation signs are indicated with one bit each, so the encoder uses the following number of bits to represent the NxN unitary matrix.</p>
<p id="p-0284" num="0283">
<maths id="MATH-US-00012" num="00012">
<math overflow="scroll">
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <mrow>
          <mrow>
            <mn>6</mn>
            <mo>·</mo>
            <mfrac>
              <mrow>
                <mi>N</mi>
                <mo>⁡</mo>
                <mrow>
                  <mo>(</mo>
                  <mrow>
                    <mi>N</mi>
                    <mo>-</mo>
                    <mn>1</mn>
                  </mrow>
                  <mo>)</mo>
                </mrow>
              </mrow>
              <mn>2</mn>
            </mfrac>
          </mrow>
          <mo>+</mo>
          <mi>N</mi>
        </mrow>
        <mo>=</mo>
        <mrow>
          <mrow>
            <mn>3</mn>
            <mo>⁢</mo>
            <msup>
              <mi>N</mi>
              <mn>2</mn>
            </msup>
          </mrow>
          <mo>-</mo>
          <mrow>
            <mn>2</mn>
            <mo>⁢</mo>
            <mrow>
              <mi>N</mi>
              <mo>.</mo>
            </mrow>
          </mrow>
        </mrow>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>(</mo>
        <mn>15</mn>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
</maths>
<br/>
This level of quantization allows the encoder to represent the NxN unitary matrix for multi-channel transform with a very good degree of precision. Alternatively, the encoder uses some other level and/or type of quantization.
</p>
<p id="p-0285" num="0284"><figref idref="DRAWINGS">FIG. 29</figref> shows a technique (<b>2900</b>) for retrieving information for a generic unitary transform for a channel group from a bitstream according to a particular bitstream syntax. <figref idref="DRAWINGS">FIG. 29</figref> shows the technique (<b>2900</b>) performed by the decoder to parse the bitstream; the encoder performs a corresponding technique to format the information for the generic unitary transform according to the bitstream syntax. Alternatively, the decoder and encoder use another syntax, for example, one that uses different ordering or resolution for rotation angles.</p>
<p id="p-0286" num="0285">First, the decoder initializes several variables used in the rest of the decoding. Specifically, the decoder sets (<b>2910</b>) the number of angles to decode #AnglesToDecode based upon the number of channels in the channel group #ChannelsInGroup as shown in Equation 14. The decoder also sets (<b>2912</b>) the number of signs to decode #SignsToDecode based upon #ChannelsInGroup. The decoder also resets (<b>2914</b>, <b>2916</b>) an angles decoded counter iAnglesDecoded and a signs decoded counter iSignsDecoded.</p>
<p id="p-0287" num="0286">The decoder checks (<b>2920</b>) whether there are any angles to decode and, if so, sets (<b>2922</b>) the value for the next rotation angle, reconstructing the rotation angle from the 6 bit quantized value.
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>RotationAngle[iAnglesDecoded]=π*(getBits(6)−32)/64   (16).<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0288" num="0287">The decoder then increments (<b>2924</b>) the angles decoded counter and checks (<b>2920</b>) whether there are any additional angles to decode.</p>
<p id="p-0289" num="0288">When there are no more angles to decode, the decoder checks (<b>2940</b>) whether there are any additional signs to decode and, if so, sets (<b>2942</b>) the value for the next sign, reconstructing the sign from the 1 bit value.
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>RotationSign[iSignsDecoded]=(2*getBits(1))−1   (17).<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0290" num="0289">The decoder then increments (<b>2944</b>) the signs decoded counter and checks (<b>2940</b>) whether there are any additional signs to decode. When there are no more signs to decode, the decoder exits.</p>
<p id="h-0016" num="0000">VI. Quantization and Weighting</p>
<p id="p-0291" num="0290">In some embodiments, an encoder such as the encoder (<b>600</b>) of <figref idref="DRAWINGS">FIG. 6</figref> performs quantization and weighting on audio data using various techniques described below. For multi-channel audio configured into tiles, the encoder computes and applies quantization matrices for channels of tiles, per-channel quantization step modifiers, and overall quantization tile factors. This allows the encoder to shape noise according to an auditory model, balance noise between channels, and control overall distortion.</p>
<p id="p-0292" num="0291">A corresponding decoder such as the decoder (<b>700</b>) of <figref idref="DRAWINGS">FIG. 7</figref> performs inverse quantization and inverse weighting. For multi-channel audio configured into tiles, the decoder decodes and applies overall quantization tile factors, per-channel quantization step modifiers, and quantization matrices for channels of tiles. The inverse quantization and inverse weighting are fused into a single step.</p>
<p id="p-0293" num="0292">A. Overall Tile Quantization Factor</p>
<p id="p-0294" num="0293">In some embodiments, to control the quality and/or bitrate for the audio data of a tile, a quantizer in an encoder computes a quantization step size Q<sub>t </sub>for the tile. The quantizer may work in conjunction with a rate/quality controller to evaluate different quantization step sizes for the tile before selecting a tile quantization step size that satisfies the bitrate and/or quality constraints. For example, the quantizer and controller operate as described in U.S. patent application Ser. No. 10/017,694, entitled “Quality and Rate Control Strategy for Digital Audio,” filed Dec. 14, 2001, hereby incorporated by reference.</p>
<p id="p-0295" num="0294"><figref idref="DRAWINGS">FIG. 30</figref> shows a technique (<b>3000</b>) for retrieving an overall tile quantization factor from a bitstream according to a particular bitstream syntax. <figref idref="DRAWINGS">FIG. 30</figref> shows the technique (<b>3000</b>) performed by the decoder to parse the bitstream; the encoder performs a corresponding technique to format the tile quantization factor according to the bitstream syntax. Alternatively, the decoder and encoder use another syntax, for example, one that works with different ranges for the tile quantization factor, uses different logic to encode the tile factor, or encodes groups of tile factors.</p>
<p id="p-0296" num="0295">First, the decoder initializes (<b>3010</b>) the quantization step size Q<sub>t </sub>for the tile. In one implementation, the decoder sets Q<sub>t </sub>to:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>Q</i><sub>t</sub>=90·ValidBitsPerSample/16   (18),<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
where ValidBitsPerSample is a number 16≦ValidBitsPerSample≦24 that is set for the decoder or the audio clip, or set at some other level.
</p>
<p id="p-0297" num="0296">Next, the decoder gets (<b>3020</b>) six bits indicating the first modification of Q<sub>t </sub>relative to the initialized value of Q<sub>t</sub>, and stores the value −32≦Tmp≦31 in the temporary variable Tmp. The function SignExtend( ) determines a signed value from an unsigned value. The decoder adds (<b>3030</b>) the value of Tmp to the initialized value of Q<sub>t</sub>, then determines (<b>3040</b>) the sign of the variable Tmp, which is stored in the variable SignofDelta.</p>
<p id="p-0298" num="0297">The decoder checks (<b>3050</b>) whether the value of Tmp equals −32 or 31. If not, the decoder exits. If the value of Tmp equals −32 or 31, the encoder may have signaled that Q<sub>t </sub>should be further modified. The direction (positive or negative) of the further modification(s) is indicated by SignofDelta, and the decoder gets (<b>3060</b>) the next five bits to determine the magnitude 0≦Tmp≦31 of the next modification. The decoder changes (<b>3070</b>) the current value of Q<sub>t </sub>in the direction of SignofDelta by the value of Tmp, then checks (<b>3080</b>) whether the value of Tmp is 31. If not, the decoder exits. If the value of Tmp is 31, the decoder gets (<b>3060</b>) the next five bits and continues from that point.</p>
<p id="p-0299" num="0298">In embodiments that do not use tile configurations, the encoder computes an overall quantization step size for a frame or other portion of audio data.</p>
<p id="p-0300" num="0299">B. Per-Channel Quantizati n Step M difiers</p>
<p id="p-0301" num="0300">In some embodiments, an encoder computes a quantization step modifier for each channel in a tile: Q<sub>c,0</sub>,Q<sub>c,1</sub>, . . . , Q<sub>c#ChannelInTile−1</sub>. The encoder usually computes these channel-specific quantization factors to balance reconstruction quality across all channels. Even in embodiments that do not use tile configurations, the encoder can still compute per-channel quantization factors for the channels in a frame or other unit of audio data. In contrast, previous quantization techniques such as those used in the encoder (<b>100</b>) of <figref idref="DRAWINGS">FIG. 1</figref> use a quantization matrix element per band of a window in a channel, but have no overall modifier for the channel.</p>
<p id="p-0302" num="0301"><figref idref="DRAWINGS">FIG. 31</figref> shows a generalized technique (<b>3100</b>) for computing per-channel quantization step modifiers for multi-channel audio data. The encoder uses several criteria to compute the quantization step modifiers. First, the encoder seeks approximately equal quality across all the channels of reconstructed audio data. Second, if speaker positions are known, the encoder favors speakers that are more important to perception in typical uses for the speaker configuration. Third, if speaker types are known, the encoder favors the better speakers in the speaker configuration. Alternatively, the encoder considers criteria other than or in addition to these criteria.</p>
<p id="p-0303" num="0302">The encoder starts by setting (<b>3110</b>) quantization step modifiers for the channels. In one implementation, the encoder sets (<b>3110</b>) the modifiers based upon the energy in the respective channels. For example, for a channel with relatively more energy (i.e., louder) than the other channels, the quantization step modifiers for the other channels are made relatively higher. Alternatively, the encoder sets (<b>3110</b>) the modifiers based upon other or additional criteria in an “open loop” estimation process. Or, the encoder can set (<b>3110</b>) the modifiers to equal values initially (relying on “closed loop” evaluation of results to converge on the final values for the modifiers).</p>
<p id="p-0304" num="0303">The encoder quantizes (<b>3120</b>) the multi-channel audio data using the quantization step modifiers as well as other quantization (including weighting) factors, if such other factors have not already been applied.</p>
<p id="p-0305" num="0304">After subsequent reconstruction, the encoder evaluates (<b>3130</b>) the quality of the channels of reconstructed audio using NER or some other quality measure. The encoder checks (<b>3140</b>) whether the reconstructed audio satisfies the quality criteria (and/or other criteria) and, if so, exits. If not, the encoder sets (<b>3110</b>) new values for the quantization step modifiers, adjusting the modifiers in view of the evaluated results. Alternatively, for one-pass, open loop setting of the step modifiers, the encoder skips the evaluation (<b>3130</b>) and checking (<b>3140</b>).</p>
<p id="p-0306" num="0305">Per-channel quantization step modifiers tend to change from window/tile to window/tile. The encoder codes the quantization step modifiers as literals or variable length codes, and then packs them into the bitstream with the audio data. Or, the encoder uses some other technique to process the quantization step modifiers.</p>
<p id="p-0307" num="0306"><figref idref="DRAWINGS">FIG. 32</figref> shows a technique (<b>3200</b>) for retrieving per-channel quantization step modifiers from a bitstream according to a particular bitstream syntax. <figref idref="DRAWINGS">FIG. 32</figref> shows the technique (<b>3200</b>) performed by the decoder to parse the bitstream; the encoder performs a corresponding technique (setting flags, packing data for the quantization step modifiers, etc.) to format the quantization step modifiers according to the bitstream syntax. Alternatively, the decoder and encoder use another syntax, for example, one that works with different flags or logic to encode the quantization step modifiers.</p>
<p id="p-0308" num="0307"><figref idref="DRAWINGS">FIG. 32</figref> shows retrieval of per-channel quantization step modifiers for a tile. Alternatively, in embodiments that do not use tiles, the decoder retrieves per-channel step modifiers for frames or other units of audio data.</p>
<p id="p-0309" num="0308">To start, the decoder checks (<b>3210</b>) whether the number of channels in the tile is greater than 1. If not, the audio data is mono. The decoder sets (<b>3212</b>) the quantization step modifier for the mono channel to 0 and exits.</p>
<p id="p-0310" num="0309">For multi-channel audio, the decoder initializes several variables. The decoder gets (<b>3220</b>) bits indicating the number of bits per quantization step modifier (#BitsPerQ) for the tile. In one implementation, the decoder gets three bits. The decoder then sets (<b>3222</b>) a channel counter iChannelsDone to 0.</p>
<p id="p-0311" num="0310">The decoder checks (<b>3230</b>) whether the channel counter is less than the number of channels in the tile. If not, all channel quantization step modifiers for the tile have been retrieved, and the decoder exits.</p>
<p id="p-0312" num="0311">On the other hand, if the channel counter is less than the number of channels in the tile, the decoder gets (<b>3232</b>) a bit and checks (<b>3240</b>) the bit to determine whether the quantization step modifier for the current channel is 0. If so, the decoder sets (<b>3242</b>) the quantization step modifier for the current channel to 0.</p>
<p id="p-0313" num="0312">If the quantization step modifier for the current channel is not 0, the decoder checks (<b>3250</b>) whether #BitsPerQ is greater than 0 to determine whether the quantization step modifier for the current channel is 1. If so, the decoder sets (<b>3252</b>) the quantization step modifier for the current channel to 1.</p>
<p id="p-0314" num="0313">If #BitsPerQ is greater than 0, the decoder gets the next #BitsPerQ bits in the bitstream, adds 1 (since value of 0 triggers an earlier exit condition), and sets (<b>3260</b>) the quantization step modifier for the current channel to the result.</p>
<p id="p-0315" num="0314">After the decoder sets the quantization step modifier for the current channel, the decoder increments (<b>3270</b>) the channel counter and checks (<b>3230</b>) whether the channel counter is less than the number of channels in the tile.</p>
<p id="p-0316" num="0315">C. Quantization Matrix Encoding and Decoding</p>
<p id="p-0317" num="0316">In some embodiments, an encoder computes a quantization matrix for each channel in a tile. The encoder improves upon previous quantization techniques such as those used in the encoder (<b>100</b>) of <figref idref="DRAWINGS">FIG. 1</figref> in several ways. For lossy compression of quantization matrices, the encoder uses a flexible step size for quantization matrix elements, which allows the encoder to change the resolution of the elements of quantization matrices. Apart from this feature, the encoder takes advantage of temporal correlation in quantization matrix values during compression of quantization matrices.</p>
<p id="p-0318" num="0317">As previously discussed, a quantization matrix serves as a step size array, one step value per bark frequency band (or otherwise partitioned quantization band) for each channel in a tile. The encoder uses quantization matrices to “color” the reconstructed audio signal to have spectral shape comparable to that of the original signal. The encoder usually determines quantization matrices based on psychoacoustics and compresses the quantization matrices to reduce bitrate. The compression of quantization matrices can be lossy.</p>
<p id="p-0319" num="0318">The techniques described in this section are described with reference to quantization matrices for channels of tiles. For notation, let Q<sub>m,iChannel,iBand </sub>represent the quantization matrix element for channel iChannel for the band iBand. In embodiments that do not use tile configurations, the encoder can still use a flexible step size for quantization matrix elements and/or take advantage of temporal correlation in quantization matrix values during compression.</p>
<p id="p-0320" num="0319">1. Flexible Quantization Step Size for Mask Information</p>
<p id="p-0321" num="0320"><figref idref="DRAWINGS">FIG. 33</figref> shows a generalized technique (<b>3300</b>) for adaptively setting a quantization step size for quantization matrix elements. This allows the encoder to quantize mask information coarsely or finely. In one implementation, the encoder sets the quantization step size for quantization matrix elements on a channel-by-channel basis for a tile (i.e., matrix-by-matrix basis when each channel of the tile has a matrix). Alternatively, the encoder sets the quantization step size for mask elements on a tile by-tile or frame-by-frame basis, for an entire audio sequence, or at some other level.</p>
<p id="p-0322" num="0321">The encoder starts by setting (<b>3310</b>) a quantization step size for one or more mask(s). (The number of affected masks depends on the level at which the encoder assigns the flexible quantization step size.) In one implementation, the encoder evaluates the quality of reconstructed audio over some period of time and, depending on the result, selects the quantization step size to be 1, 2, 3, or 4 dB for mask information. The quality measure evaluated by the encoder is NER for one or more previously encoded frames. For example, if the overall quality is poor, the encoder may set (<b>3310</b>) a higher value for the quantization step size for mask information, since resolution in the quantization matrix is not an efficient use of bitrate. On the other hand, if the overall quality is good, the encoder may set (<b>3310</b>) a lower value for the quantization step size for mask information, since better resolution in the quantization matrix may efficiently improve perceived quality. Alternatively, the encoder uses another quality measure, evaluation over a different period, and/or other criteria in an open loop estimate for the quantization step size. The encoder can also use different or additional quantization step sizes for the mask information. Or, the encoder can skip the open loop estimate, instead relying on closed loop evaluation of results to converge on the final value for the step size.</p>
<p id="p-0323" num="0322">The encoder quantizes (<b>3320</b>) the one or more quantization matrices using the quantization step size for mask elements, and weights and quantizes the multi-channel audio data.</p>
<p id="p-0324" num="0323">After subsequent reconstruction, the encoder evaluates (<b>3330</b>) the quality of the reconstructed audio using NER or some other quality measure. The encoder checks (<b>3340</b>) whether the quality of the reconstructed audio justifies the current setting for the quantization step size for mask information. If not, the encoder may set (<b>3310</b>) a higher or lower value for the quantization step size for mask information. Otherwise, the encoder exits. Alternatively, for one-pass, open loop setting of the quantization step size for mask information, the encoder skips the evaluation (<b>3330</b>) and checking (<b>3340</b>).</p>
<p id="p-0325" num="0324">After selection, the encoder indicates the quantization step size for mask information at the appropriate level in the bitstream.</p>
<p id="p-0326" num="0325"><figref idref="DRAWINGS">FIG. 34</figref> shows a generalized technique (<b>3400</b>) for retrieving an adaptive quantization step size for quantization matrix elements. The decoder can thus change the quantization step size for mask elements on a channel-by-channel basis for a tile, on a tile by-tile or frame-by-frame basis, for an entire audio sequence, or at some other level.</p>
<p id="p-0327" num="0326">The decoder starts by getting (<b>3410</b>) a quantization step size for one or more mask(s). (The number of affected masks depends on the level at which the encoder assigned the flexible quantization step size.) In one implementation, the quantization step size is 1, 2, 3, or 4 dB for mask information. Alternatively, the encoder and decoder use different or additional quantization step sizes for the mask information.</p>
<p id="p-0328" num="0327">The decoder then inverse quantizes (<b>3420</b>) the one or more quantization matrices using the quantization step size for mask information, and reconstructs the multi-channel audio data.</p>
<p id="p-0329" num="0328">2. Temporal Prediction of Quantization Matrices</p>
<p id="p-0330" num="0329"><figref idref="DRAWINGS">FIG. 35</figref> shows a generalized technique (<b>3500</b>) for compressing quantization matrices using temporal prediction. With the technique (<b>3500</b>), the encoder takes advantage of temporal correlation in mask values. This reduces the bitrate associated with the quantization matrices.</p>
<p id="p-0331" num="0330"><figref idref="DRAWINGS">FIGS. 35 and 36</figref> show temporal prediction for quantization matrices in a channel of a frame of audio data. Alternatively, an encoder compresses quantization matrices using temporal prediction between multiple frames, over some other sequence of audio, or for a different configuration of quantization matrices.</p>
<p id="p-0332" num="0331">With reference to <figref idref="DRAWINGS">FIG. 35</figref>, the encoder gets (<b>3510</b>) quantization matrices for a frame. The quantization matrices in a channel tend to be the same from window to window, making them good candidates for predictive coding.</p>
<p id="p-0333" num="0332">The encoder then encodes (<b>3520</b>) the quantization matrices using temporal prediction. For example, the encoder uses the technique (<b>3600</b>) shown in <figref idref="DRAWINGS">FIG. 36</figref>. Alternatively, the encoder uses another technique with temporal prediction.</p>
<p id="p-0334" num="0333">The encoder determines (<b>3530</b>) whether there are any more matrices to compress and, if not, exits. Otherwise, the encoder gets the next quantization matrices. For example, the encoder checks whether matrices of the next frame are available for encoding.</p>
<p id="p-0335" num="0334"><figref idref="DRAWINGS">FIG. 36</figref> shows a more detailed technique (<b>3600</b>) for compressing quantization matrices in a channel using temporal prediction in one implementation. The temporal prediction uses a re-sampling process across tiles of differing window sizes and uses run-level coding on prediction residuals to reduce bitrate.</p>
<p id="p-0336" num="0335">The encoder starts (<b>3610</b>) the compression for next quantization matrix to be compressed and checks (<b>3620</b>) whether an anchor matrix is available, which usually depends on whether the matrix is the first in its channel. If an anchor matrix is not available, the encoder directly compresses (<b>3630</b>) the quantization matrix. For example, the encoder differentially encodes the elements of the quantization matrix (where the difference for an element is relative to the element of the previous band) and assigns Huffman codes to the differentials. For the first element in the matrix (i.e., the mask element for the band <b>0</b>), the encoder uses a prediction constant that depends on the quantization step size for the mask elements.
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>PredConst=45/MaskQuantMultiplier<sub>iChannel </sub>  (19).<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
Alternatively, the encoder uses another compression technique for the anchor matrix.
</p>
<p id="p-0337" num="0336">The encoder then sets (<b>3640</b>) the quantization matrix as the anchor matrix for the channel of the frame. When the encoder uses tiles, the tile including the anchor matrix for a channel can be called the anchor tile. The encoder notes the anchor matrix size or the tile size for the anchor tile, which may be used to form predictions for matrices with a different size.</p>
<p id="p-0338" num="0337">On the other hand, if an anchor matrix is available, the encoder compresses the quantization matrix using temporal prediction. The encoder computes (<b>3650</b>) a prediction for the quantization matrix based upon the anchor matrix for the channel. If the quantization matrix being compressed has the same number of bands as the anchor matrix, the prediction is the elements of the anchor matrix. If the quantization matrix being compressed has a different number of bands than the anchor matrix, however, the encoder re-samples the anchor matrix to compute the prediction.</p>
<p id="p-0339" num="0338">The re-sampling process uses the size of the quantization matrix being compressed/current tile size and the size of the anchor matrix/anchor tile size.
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>MaskPrediction[iBand]=AnchorMask[iScaledBand]  (20),<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
where iScaledBand is the anchor matrix band that includes the representative (e.g., average) frequency of iBand. iBand is in terms of the current quantization matrix/current tile size, whereas iScaledBand is in terms of the anchor matrix/anchor tile size.
</p>
<p id="p-0340" num="0339"><figref idref="DRAWINGS">FIG. 37</figref> illustrates one technique for re-sampling the anchor matrix when the encoder uses tiles. <figref idref="DRAWINGS">FIG. 37</figref> shows an example mapping (<b>3700</b>) of bands of a current tile to bands of an anchor tile to form a prediction. Frequencies in the middle of band boundaries (<b>3720</b>) of the quantization matrix in the current tile are mapped (<b>3730</b>) to frequencies of the anchor matrix in the anchor tile. The values for the mask prediction are set depending on where the mapped frequencies are relative to the band boundaries (<b>3710</b>) of the anchor matrix in the anchor tile. Alternatively, the encoder uses temporal prediction relative to the preceding quantization matrix in the channel or some other preceding matrix, or uses another re-sampling technique.</p>
<p id="p-0341" num="0340">Returning to <figref idref="DRAWINGS">FIG. 36</figref>, the encoder computes (<b>3660</b>) a residual for the quantization matrix relative to the prediction. Ideally, the prediction is perfect and the residual has no energy. If necessary, however, the encoder encodes (<b>3670</b>) the residual. For example, the encoder uses run-level coding or another compression technique for the prediction residual.</p>
<p id="p-0342" num="0341">The encoder then determines (<b>3680</b>) whether there are any more matrices to be compressed and, if not, exits. Otherwise, the encoder gets (<b>3610</b>) the next quantization matrix and continues.</p>
<p id="p-0343" num="0342"><figref idref="DRAWINGS">FIG. 38</figref> shows a technique (<b>3800</b>) for retrieving and decoding quantization matrices compressed using temporal prediction according to a particular bitstream syntax. The quantization matrices are for the channels of a single tile of a frame. <figref idref="DRAWINGS">FIG. 38</figref> shows the technique (<b>3800</b>) performed by the decoder to parse information into the bitstream; the encoder performs a corresponding technique. Alternatively, the decoder and encoder use another syntax for one or more of the options shown in <figref idref="DRAWINGS">FIG. 38</figref>, for example, one that uses different flags or different ordering, or one that does not use tiles.</p>
<p id="p-0344" num="0343">The decoder checks (<b>3810</b>) whether the encoder has reached the beginning of a frame. If so, the decoder marks (<b>3812</b>) all anchor matrices for the frame as being not set.</p>
<p id="p-0345" num="0344">The decoder then checks (<b>3820</b>) whether the anchor matrix is available in the channel of the next quantization matrix to be encoded. If no anchor matrix is available, the decoder gets (<b>3830</b>) the quantization step size for the quantization matrix for the channel. In one implementation, the decoder gets the value 1, 2, 3, or 4 dB.
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>MaskQuantMultiplier<sub>iChannel</sub>=getBits(2)+1   (21).<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0346" num="0345">The decoder then decodes (<b>3832</b>) the anchor matrix for the channel. For example, the decoder Huffman decodes differentially coded elements of the anchor matrix (where the difference for an element is relative to the element of the previous band) and reconstructs the elements. For the first element, the decoder uses the prediction constant used in the encoder.
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>PredConst=45/MaskQuantMultiplier<sub>iChannel </sub>  (22).<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
Alternatively, the decoder uses another decompression technique for the anchor matrix in a channel in the frame.
</p>
<p id="p-0347" num="0346">The decoder then sets (<b>3834</b>) the quantization matrix as the anchor matrix for the channel of the frame and sets the values of the quantization matrix for the channel to those of the anchor matrix.
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>Q</i><sub>m,iChannel,iBand</sub>=AnchorMask[iBand]  (23).<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0348" num="0347">The decoder also notes the tile size for the anchor tile, which may be used to form predictions for matrices in tiles with a different size than the anchor tile.</p>
<p id="p-0349" num="0348">On the other hand, if an anchor matrix is available for the channel, the decoder decompresses the quantization matrix using temporal prediction. The decoder computes (<b>3840</b>) a prediction for the quantization matrix based upon the anchor matrix for the channel. If the quantization matrix for the current tile has the same number of bands as the anchor matrix, the prediction is the elements of the anchor matrix. If the quantization matrix for the current tile has a different number of bands as the anchor matrix, however, the encoder re-samples the anchor matrix to get the prediction, for example, using the current tile size and anchor tile size as shown in <figref idref="DRAWINGS">FIG. 37</figref>.
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>MaskPrediction[iBand]=AnchorMask[iScaledBand]  (24).<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0350" num="0349">Alternatively, the decoder uses temporal prediction relative to the preceding quantization matrix in the channel or some other preceding matrix, or uses another re-sampling technique.</p>
<p id="p-0351" num="0350">The decoder gets (<b>3842</b>) the next bit in the bitstream and checks (<b>3850</b>) whether the bitstream includes a residual for the quantization matrix. If there is no mask update for this channel in the current tile, the mask prediction residual is 0, so:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>Q</i><sub>m,iChannel,iBand</sub>=MaskPrediction[iBand]  (25).<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0352" num="0351">On the other hand, if there is a prediction residual, the decoder decodes (<b>3852</b>) the residual, for example, using run-level decoding or some other decompression technique. The decoder then adds (<b>3854</b>) the prediction residual to the prediction to reconstruct the quantization matrix. For example, the addition is a simple scalar addition on a band-by-band basis to get the element for band iBand for the current channel iChannel:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>Q</i><sub>m,iChannel,iBand</sub>=MaskPrediction[iBand]+MaskPredResidual[iBand]  (26).<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0353" num="0352">The decoder then checks (<b>3860</b>) whether quantization matrices for all channels in the current tile have been decoded and, if so, exits. Otherwise, the decoder continues decoding for the next quantization matrix in the current tile.</p>
<p id="p-0354" num="0353">D. Combined Inverse Quantization and Inverse Weighting</p>
<p id="p-0355" num="0354">Once the decoder retrieves all the necessary quantization and weighting information, the decoder inverse quantizes and inverse weights the audio data. In one implementation, the decoder performs the inverse quantization and inverse weighting in one step, which is shown in two equations below for the sake of clear printing.
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>Combined<i>Q=Q</i><sub>t</sub><i>+Q</i><sub>c,iChannel</sub>−(Max(<i>Q</i><sub>m,iChannel,*</sub>)−<i>Q</i><sub>m,iChannel,iBand</sub>)·MaskQuantMultiplier <sub>iChannel </sub>  (27a),<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>y</i><sub>iqw</sub><i>[n]=</i>10<sup>CombinedQ/20</sup><i>·x</i><sub>iqw</sub><i>[n]</i>  (27b).<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
where x<sub>iqw </sub>is the input (e.g., inverse MC-transformed coefficient) of channel iChannel, and n is a coefficient index in band iBand. Max(Q<sub>m,iChannel,*</sub>) is the maximum mask value for the channel iChannel over all bands. (The difference between the largest and smallest weighting factors for a mask is typically much less than the range of potential values for mask elements, so the amount of quantization adjustment per weighting factor is computed relative to the maximum.) MaskQuantMultiplier<sub>iChannel </sub>is the mask quantization step multiplier for the quantization matrix of channel iChannel, and y<sub>iqw </sub>is the output of this step.
</p>
<p id="p-0356" num="0355">Alternatively, the decoder performs the inverse quantization and weighting separately or using different techniques.</p>
<p id="h-0017" num="0000">VII. Multi-Channel Post-Processing</p>
<p id="p-0357" num="0356">In some embodiments, a decoder such as the decoder (<b>700</b>) of <figref idref="DRAWINGS">FIG. 7</figref> performs multi-channel post-processing on reconstructed audio samples in the time-domain.</p>
<p id="p-0358" num="0357">The multi-channel post-processing can be used for many different purposes. For example, the number of decoded channels may be less than the number of channels for output (e.g., because the encoder dropped one or more input channels or multi-channel transformed channels to reduce coding complexity or buffer fullness). If so, a multi-channel post-processing transform can be used to create one or more phantom channels based on actual data in the decoded channels. Or, even if the number of decoded channels equals the number of output channels, the post-processing transform can be used for arbitrary spatial rotation of the presentation, remapping of output channels between speaker positions, or other spatial or special effects. Or, if the number of decoded channels is greater than the number of output channels (e.g., playing surround sound audio on stereo equipment), the post-processing transform can be used to “fold-down” channels. In some embodiments, the fold-down coefficients potentially vary over time—the multi-channel post-processing is bitstream-controlled. The transform matrices for these scenarios and applications can be provided or signaled by the encoder.</p>
<p id="p-0359" num="0358"><figref idref="DRAWINGS">FIG. 39</figref> shows a generalized technique (<b>3900</b>) for multi-channel post-processing. The decoder decodes (<b>3910</b>) encoded multi-channel audio data (<b>3905</b>) using techniques shown in <figref idref="DRAWINGS">FIG. 7</figref> or other decompression techniques, producing reconstructed time-domain multi-channel audio data (<b>3915</b>).</p>
<p id="p-0360" num="0359">The decoder then performs (<b>3920</b>) multi-channel post-processing on the time-domain multi-channel audio data (<b>3915</b>). For example, when the encoder produces M decoded channels and the decoder outputs N channels, the post-processing involves a general M to N transform. The decoder takes M co-located (in time) samples, one from each of the reconstructed M coded channels, then pads any channels that are missing (i.e., the N-M channels dropped by the encoder) with zeros. The decoder multiplies the N samples with a matrix A<sub>post</sub>.
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>y</i><sub>post</sub><i>=A</i><sub>post</sub><i>·x</i><sub>post </sub>  (28),<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
where x<sub>post </sub>and y<sub>post </sub>are the N channel input to and the output from the multi-channel post-processing, A<sub>post </sub>is a general NxN transform matrix, and x<sub>post </sub>is padded with zeros to match the output vector length N.
</p>
<p id="p-0361" num="0360">The matrix A<sub>post </sub>can be a matrix with pre-determined elements, or it can be a general matrix with elements specified by the encoder. The encoder signals the decoder to use a pre-determined matrix (e.g., with one or more flag bits) or sends the elements of a general matrix to the decoder, or the decoder may be configured to always use the same matrix A<sub>post</sub>. The matrix A<sub>post </sub>need not possess special characteristics such as being as symmetric or invertible. For additional flexibility, the multi-channel post-processing can be turned on/off on a frame-by-frame or other basis (in which case, the decoder may use an identity matrix to leave channels unaltered).</p>
<p id="p-0362" num="0361"><figref idref="DRAWINGS">FIG. 40</figref> shows an example matrix A<sub>P-center </sub>(<b>4000</b>) used to create a phantom center channel from left and right channels in a 5.1 channel playback environment with the channels ordered as shown in <figref idref="DRAWINGS">FIG. 4</figref>. The example matrix A<sub>P-center </sub>(<b>4000</b>) passes the other channels through unaltered. The decoder gets samples co-located in time from the left, right, sub-woofer, back left, and back right channels and pads the center channel with 0 s. The decoder then multiplies the six input samples by the matrix A<sub>P-center </sub>(<b>4000</b>).</p>
<p id="p-0363" num="0362">
<maths id="MATH-US-00013" num="00013">
<math overflow="scroll">
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <mrow>
          <mo>[</mo>
          <mtable>
            <mtr>
              <mtd>
                <mi>a</mi>
              </mtd>
            </mtr>
            <mtr>
              <mtd>
                <mi>b</mi>
              </mtd>
            </mtr>
            <mtr>
              <mtd>
                <mfrac>
                  <mrow>
                    <mi>a</mi>
                    <mo>+</mo>
                    <mi>b</mi>
                  </mrow>
                  <mn>2</mn>
                </mfrac>
              </mtd>
            </mtr>
            <mtr>
              <mtd>
                <mi>d</mi>
              </mtd>
            </mtr>
            <mtr>
              <mtd>
                <mi>e</mi>
              </mtd>
            </mtr>
            <mtr>
              <mtd>
                <mi>f</mi>
              </mtd>
            </mtr>
          </mtable>
          <mo>]</mo>
        </mrow>
        <mo>=</mo>
        <mrow>
          <msub>
            <mi>A</mi>
            <mrow>
              <mi>P</mi>
              <mo>⁢</mo>
              <mstyle>
                <mtext>-</mtext>
              </mstyle>
              <mo>⁢</mo>
              <mi>Center</mi>
            </mrow>
          </msub>
          <mo>·</mo>
          <mrow>
            <mrow>
              <mo>[</mo>
              <mtable>
                <mtr>
                  <mtd>
                    <mi>a</mi>
                  </mtd>
                </mtr>
                <mtr>
                  <mtd>
                    <mi>b</mi>
                  </mtd>
                </mtr>
                <mtr>
                  <mtd>
                    <mn>0</mn>
                  </mtd>
                </mtr>
                <mtr>
                  <mtd>
                    <mi>d</mi>
                  </mtd>
                </mtr>
                <mtr>
                  <mtd>
                    <mi>e</mi>
                  </mtd>
                </mtr>
                <mtr>
                  <mtd>
                    <mi>f</mi>
                  </mtd>
                </mtr>
              </mtable>
              <mo>]</mo>
            </mrow>
            <mo>.</mo>
          </mrow>
        </mrow>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>(</mo>
        <mn>29</mn>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
</maths>
</p>
<p id="p-0364" num="0363">Alternatively, the decoder uses a matrix with different coefficients or a different number of channels. For example, the decoder uses a matrix to create phantom channels in a 7.1 channel, 9.1 channel, or some other playback environment from coded channels for 5.1 multi-channel audio.</p>
<p id="p-0365" num="0364"><figref idref="DRAWINGS">FIG. 41</figref> shows a technique (<b>4100</b>) for multi-channel post-processing in which the transform matrix potentially changes on a frame-by-frame basis. Changing the transform matrix can lead to audible noise (e.g., pops) in the final output if not handled carefully. To avoid introducing the popping noise, the decoder gradually transitions from one transform matrix to another between frames.</p>
<p id="p-0366" num="0365">The decoder first decodes (<b>4110</b>) the encoded multi-channel audio data for a frame, using techniques shown in <figref idref="DRAWINGS">FIG. 7</figref> or other decompression techniques, and producing reconstructed time-domain multi-channel audio data. The decoder then gets (<b>4120</b>) the post-processing matrix for the frame, for example, as shown in <figref idref="DRAWINGS">FIG. 42</figref>.</p>
<p id="p-0367" num="0366">The decoder determines (<b>4130</b>) if the matrix for the current frame is the different than the matrix for the previous frame (if there was a previous frame). If the current matrix is the same or there is no previous matrix, the decoder applies (<b>4140</b>) the matrix to the reconstructed audio samples for the current frame. Otherwise, the decoder applies (<b>4150</b>) a blended transform matrix to the reconstructed audio samples for the current frame. The blending function depends on implementation. In one implementation, at sample i in the current frame, the decoder uses a short-term blended matrix A<sub>post,i</sub>.</p>
<p id="p-0368" num="0367">
<maths id="MATH-US-00014" num="00014">
<math overflow="scroll">
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <mrow>
          <msub>
            <mi>A</mi>
            <mrow>
              <mi>post</mi>
              <mo>,</mo>
              <mi>i</mi>
            </mrow>
          </msub>
          <mo>=</mo>
          <mrow>
            <mrow>
              <mfrac>
                <mrow>
                  <mi>NumSamples</mi>
                  <mo>-</mo>
                  <mi>i</mi>
                </mrow>
                <mi>NumSamples</mi>
              </mfrac>
              <mo>⁢</mo>
              <msub>
                <mi>A</mi>
                <mrow>
                  <mi>post</mi>
                  <mo>,</mo>
                  <mi>prev</mi>
                </mrow>
              </msub>
            </mrow>
            <mo>+</mo>
            <mrow>
              <mfrac>
                <mi>i</mi>
                <mi>NumSamples</mi>
              </mfrac>
              <mo>⁢</mo>
              <msub>
                <mi>A</mi>
                <mrow>
                  <mi>post</mi>
                  <mo>,</mo>
                  <mi>current</mi>
                </mrow>
              </msub>
            </mrow>
          </mrow>
        </mrow>
        <mo>,</mo>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>(</mo>
        <mn>30</mn>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
</maths>
<br/>
where A<sub>post,prev </sub>and A<sub>post,current </sub>are the post-processing matrices for the previous and current frames, respectively, and NumSamples is the number of samples in the current frame. Alternatively, the decoder uses another blending function to smooth discontinuities in the post-processing transform matrices.
</p>
<p id="p-0369" num="0368">The decoder repeats the technique (<b>4100</b>) on a frame-by-frame basis. Alternatively, the decoder changes multi-channel post-processing on some other basis.</p>
<p id="p-0370" num="0369"><figref idref="DRAWINGS">FIG. 42</figref> shows a technique (<b>4200</b>) for identifying and retrieving a transform matrix for multi-channel post-processing according to a particular bitstream syntax. The syntax allows specification pre-defined transform matrices as well as custom matrices for multi-channel post-processing. <figref idref="DRAWINGS">FIG. 42</figref> shows the technique (<b>4200</b>) performed by the decoder to parse the bitstream; the encoder performs a corresponding technique (setting flags, packing data for elements, etc.) to format the transform matrix according to the bitstream syntax. Alternatively, the decoder and encoder use another syntax for one or more of the options shown in <figref idref="DRAWINGS">FIG. 42</figref>, for example, one that uses different flags or different ordering.</p>
<p id="p-0371" num="0370">First, the decoder determines (<b>4210</b>) if the number of channels #Channels is greater than 1. If #Channels is 1, the audio data is mono, and the decoder uses (<b>4212</b>) an identity matrix (i.e., performs no multi-channel post-processing per se).</p>
<p id="p-0372" num="0371">On the other hand, if #Channels is &gt;1, the decoder sets (<b>4220</b>) a temporary value iTmp equal to the next bit in the bitstream. The decoder then checks (<b>4230</b>) the value of the temporary value, which signals whether or not the decoder should use (<b>4232</b>) an identity matrix.</p>
<p id="p-0373" num="0372">If the decoder uses something other than an identity matrix for the multi-channel audio, the decoder sets (<b>4240</b>) the temporary value iTmp equal to the next bit in the bitstream. The decoder then checks (<b>4250</b>) the value of the temporary value, which signals whether or not the decoder should use (<b>4252</b>) a pre-defined multi-channel transform matrix. If the decoder uses (<b>4252</b>) a pre-defined matrix, the decoder may get one or more additional bits from the bitstream (not shown) that indicate which of several available pre-defined matrices the decoder should use.</p>
<p id="p-0374" num="0373">If the decoder does not use a pre-defined matrix, the decoder initializes various temporary values for decoding a custom matrix. The decoder sets (<b>4260</b>) a counter iCoefsDone for coefficients done to 0 and sets (<b>4262</b>) the number of coefficients #CoefsToDo to decode to equal the number of elements in the matrix (#Channels<sup>2</sup>). For matrices known to have particular properties (e.g., symmetric), the number of coefficients to decode can be decreased. The decoder then determines (<b>4270</b>) whether all coefficients have been retrieved from the bitstream and, if so, ends. Otherwise, the decoder gets (<b>4272</b>) the value of the next element A[iCoefsDone] in the matrix and increments (<b>4274</b>) iCoefsDone. The way elements are coded and packed into the bitstream is implementation dependent. In <figref idref="DRAWINGS">FIG. 42</figref>, the syntax allows four bits of precision per element of the transform matrix, and the absolute value of each element is less than or equal to 1. In other implementations, the precision per element is different, the encoder and decoder use compression to exploit patterns of redundancy in the transform matrix, and/or the syntax differs in some other way.</p>
<p id="p-0375" num="0374">Having described and illustrated the principles of our invention with reference to described embodiments, it will be recognized that the described embodiments can be modified in arrangement and detail without departing from such principles. It should be understood that the programs, processes, or methods described herein are not related or limited to any particular type of computing environment, unless indicated otherwise. Various types of general purpose or specialized computing environments may be used with or perform operations in accordance with the teachings described herein. Elements of the described embodiments shown in software may be implemented in hardware and vice versa.</p>
<p id="p-0376" num="0375">In view of the many possible embodiments to which the principles of our invention may be applied, we claim as our invention all such embodiments as may come within the scope and spirit of the following claims and equivalents thereto.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-math idrefs="MATH-US-00001" nb-file="US07299190-20071120-M00001.NB">
<img id="EMI-M00001" he="14.14mm" wi="76.20mm" file="US07299190-20071120-M00001.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00002" nb-file="US07299190-20071120-M00002.NB">
<img id="EMI-M00002" he="6.69mm" wi="76.20mm" file="US07299190-20071120-M00002.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00003" nb-file="US07299190-20071120-M00003.NB">
<img id="EMI-M00003" he="34.54mm" wi="76.20mm" file="US07299190-20071120-M00003.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00004" nb-file="US07299190-20071120-M00004.NB">
<img id="EMI-M00004" he="7.03mm" wi="76.20mm" file="US07299190-20071120-M00004.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00005" nb-file="US07299190-20071120-M00005.NB">
<img id="EMI-M00005" he="7.45mm" wi="76.20mm" file="US07299190-20071120-M00005.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00006" nb-file="US07299190-20071120-M00006.NB">
<img id="EMI-M00006" he="15.16mm" wi="76.20mm" file="US07299190-20071120-M00006.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00007" nb-file="US07299190-20071120-M00007.NB">
<img id="EMI-M00007" he="6.69mm" wi="76.20mm" file="US07299190-20071120-M00007.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00008" nb-file="US07299190-20071120-M00008.NB">
<img id="EMI-M00008" he="17.27mm" wi="76.20mm" file="US07299190-20071120-M00008.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00009" nb-file="US07299190-20071120-M00009.NB">
<img id="EMI-M00009" he="20.83mm" wi="76.20mm" file="US07299190-20071120-M00009.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00010" nb-file="US07299190-20071120-M00010.NB">
<img id="EMI-M00010" he="5.67mm" wi="76.20mm" file="US07299190-20071120-M00010.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00011" nb-file="US07299190-20071120-M00011.NB">
<img id="EMI-M00011" he="6.35mm" wi="76.20mm" file="US07299190-20071120-M00011.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00012" nb-file="US07299190-20071120-M00012.NB">
<img id="EMI-M00012" he="6.35mm" wi="76.20mm" file="US07299190-20071120-M00012.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00013" nb-file="US07299190-20071120-M00013.NB">
<img id="EMI-M00013" he="25.74mm" wi="76.20mm" file="US07299190-20071120-M00013.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00014" nb-file="US07299190-20071120-M00014.NB">
<img id="EMI-M00014" he="7.03mm" wi="76.20mm" file="US07299190-20071120-M00014.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-claim-statement>We claim:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. In an audio encoder, a computer-implemented method comprising:
<claim-text>receiving audio data in plural channels;</claim-text>
<claim-text>partitioning each channel of the plural channels into variable-size windows, wherein window configuration of each channel of the plural channels is independent of other channels of the plural channels;</claim-text>
<claim-text>grouping the windows into plural tiles, wherein for each of the plural tiles the grouped windows in the tile have identical start positions and identical stop positions; and</claim-text>
<claim-text>quantizing the audio data, including for a tile of the plural tiles applying a channel-specific quantization factor for each channel of the plural channels for the grouped windows in the tile.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the plural channels consist of two channels.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the plural channels consist of more than two channels.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the channel-specific quantization factors are channel-specific quantization step modifiers.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref> wherein the applying the modifiers balances perceptual reconstruction quality across the plural channels.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising, in the encoder, computing the quantization factors based at least in part upon one or more criteria.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref> wherein the criteria include equality in perceptual reconstruction quality across the plural channels.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref> wherein the criteria include favoring one or more of the plural channels that are more important than other channels perceptually.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref> wherein the computing is based at least in part upon respective energies in the plural channels.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising, in the encoder, computing the quantization factors by open loop estimation.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising, in the encoder, computing the quantization factors by closed loop evaluation.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. In an audio decoder, a computer-implemented method comprising:
<claim-text>receiving encoded audio data in plural channels;</claim-text>
<claim-text>retrieving information for plural channel-specific quantizer step modifiers for one or more tiles, each of the one or more tiles grouping plural windows that:
<claim-text>are in different channels of the plural channels, and</claim-text>
<claim-text>have identical start positions and identical stop positions; and</claim-text>
</claim-text>
<claim-text>decoding the audio data, including for a tile of the one or more tiles applying one of the channel-specific quantizer step modifiers for each channel of the plural channels for the grouped windows in the tile in inverse quantization.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref> wherein the plural channels consist of two channels.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref> wherein the plural channels consist of more than two channels.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref> wherein the retrieving includes getting plural bits indicating precision of the plural channel-specific quantizer step modifiers.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref> wherein the retrieving includes getting a single bit per modifier to indicate whether that modifier has a value of zero.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref> wherein the applying is part of a combined step for quantization, and wherein for each of plural coefficients of the audio data the combined step includes a single multiplication by a total quantization amount.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. A computer-readable medium storing computer-executable instructions for causing a computer programmed thereby to perform a method in an audio encoder, the method comprising:
<claim-text>receiving audio data in plural channels;</claim-text>
<claim-text>partitioning each channel of the plural channels into variable-size windows, wherein window configuration of each channel of the plural channels is independent of other channels of the plural channels;</claim-text>
<claim-text>grouping the windows into plural tiles, wherein for each of the plural tiles the grouped windows in the tile have identical start positions and identical stop positions; and</claim-text>
<claim-text>quantizing the audio data, including for a tile of the plural tiles applying a channel-specific quantization factor for each channel of the plural channels for the grouped windows in the tile.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. A computer-readable medium storing computer-executable instructions for causing a computer programmed thereby to perform a method in an audio decoder, the method comprising:
<claim-text>receiving encoded audio data in plural channels;</claim-text>
<claim-text>retrieving information for plural channel-specific quantizer step modifiers for one or more tiles, each of the one or more tiles grouping plural windows that:
<claim-text>are in different channels of the plural channels, and</claim-text>
<claim-text>have identical start positions and identical stop positions; and</claim-text>
</claim-text>
<claim-text>decoding the audio data, including for a tile of the one or more tiles applying one of the channel-specific quantizer step modifiers for each channel of the plural channels for the grouped windows in the tile in inverse quantization.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. An audio encoder, comprising:
<claim-text>means for receiving audio data in plural channels;</claim-text>
<claim-text>means for partitioning each channel of the plural channels into variable-size windows, wherein window configuration of each channel of the plural channels is independent of other channels of the plural channels;</claim-text>
<claim-text>means for grouping the windows into plural tiles, wherein for each of the plural tiles the grouped windows in the tile have identical start positions and identical stop positions; and</claim-text>
<claim-text>means for quantizing the audio data, including for a tile of the plural tiles applying a channel-specific quantization factor for each channel of the plural channels for the grouped windows in the tile.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. An audio decoder, comprising:
<claim-text>means for receiving encoded audio data in plural channels;</claim-text>
<claim-text>means for retrieving information for plural channel-specific quantizer step modifiers for one or more tiles, each of the one or more tiles grouping plural windows that:
<claim-text>are in different channels of the plural channels, and</claim-text>
<claim-text>have identical staff positions and identical stop positions; and</claim-text>
</claim-text>
<claim-text>means for decoding the audio data, including for a tile of the one or more tiles applying one of the channel-specific quantizer step modifiers for each channel of the plural channels for the grouped windows in the tile in inverse quantization.</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>
