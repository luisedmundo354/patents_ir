<us-patent-grant lang="EN" dtd-version="v4.2 2006-08-23" file="US07299335-20071120.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20071106" date-publ="20071120">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>07299335</doc-number>
<kind>B2</kind>
<date>20071120</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>11140310</doc-number>
<date>20050527</date>
</document-id>
</application-reference>
<us-application-series-code>11</us-application-series-code>
<us-term-of-grant>
<us-term-extension>269</us-term-extension>
<disclaimer>
<text>This patent is subject to a terminal disclaimer.</text>
</disclaimer>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>12</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>9</main-group>
<subgroup>45</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>711205</main-classification>
<further-classification>711202</further-classification>
<further-classification>711203</further-classification>
<further-classification>711206</further-classification>
<further-classification>711207</further-classification>
<further-classification>717124</further-classification>
<further-classification>717136</further-classification>
</classification-national>
<invention-title id="d0e55">Translation information retrieval transparent to processor core</invention-title>
<references-cited>
<citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5913923</doc-number>
<kind>A</kind>
<name>Dunlap et al.</name>
<date>19990600</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5990914</doc-number>
<kind>A</kind>
<name>Horan et al.</name>
<date>19991100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6145122</doc-number>
<kind>A</kind>
<name>Miller et al.</name>
<date>20001100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>6560688</doc-number>
<kind>B1</kind>
<name>Strongin et al.</name>
<date>20030500</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>6741254</doc-number>
<kind>B1</kind>
<name>Jeddeloh</name>
<date>20040500</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2002/0062427</doc-number>
<kind>A1</kind>
<name>Chauvel et al.</name>
<date>20020500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711151</main-classification></classification-national>
</citation>
<citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2002/0152428</doc-number>
<kind>A1</kind>
<name>James et al.</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714 42</main-classification></classification-national>
</citation>
<citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2004/0193831</doc-number>
<kind>A1</kind>
<name>Moyer</name>
<date>20040900</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00009">
<othercit>Breen, Kristopher C. et al.; “Aliasing and Anti-Aliasing in Branch History Table Prediction”; ACM SIGARCH Computer Architecture News; pp. 1-4; vol. 31, No. 5; USA.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00010">
<othercit>U.S. Appl. No. 11/120,272, filed May 2, 2005.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00011">
<othercit>U.S. Appl. No. 11/120,287, filed May 2, 2005.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00012">
<othercit>U.S. Appl. No. 11/120,288, filed May 2, 2005.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
</references-cited>
<number-of-claims>22</number-of-claims>
<us-exemplary-claim>21</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>None</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>7</number-of-drawing-sheets>
<number-of-figures>10</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20060271919</doc-number>
<kind>A1</kind>
<date>20061130</date>
</document-id>
</related-publication>
</us-related-documents>
<parties>
<applicants>
<applicant sequence="001" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Moyer</last-name>
<first-name>William C.</first-name>
<address>
<city>Dripping Springs</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
</applicants>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<last-name>Dolezal</last-name>
<first-name>David G.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</parties>
<assignees>
<assignee>
<addressbook>
<orgname>Freescale Semiconductor, Inc.</orgname>
<role>02</role>
<address>
<city>Austin</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Sough</last-name>
<first-name>Hyung</first-name>
<department>2188</department>
</primary-examiner>
<assistant-examiner>
<last-name>Chery</last-name>
<first-name>Mardochee</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A system for obtaining translation information from a data processing system transparent to the operation of a processor core of the data processing system. In one embodiment, the processor includes a processor core and memory management circuitry. The memory management circuitry stores translation information. The data processing system includes debugging circuitry for obtaining translation information stored in the memory management circuitry and for providing that information externally.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="168.91mm" wi="242.74mm" file="US07299335-20071120-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="243.16mm" wi="171.53mm" orientation="landscape" file="US07299335-20071120-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="253.75mm" wi="171.37mm" file="US07299335-20071120-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="249.00mm" wi="137.84mm" file="US07299335-20071120-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="189.06mm" wi="167.98mm" file="US07299335-20071120-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="227.92mm" wi="165.44mm" file="US07299335-20071120-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="166.71mm" wi="131.40mm" file="US07299335-20071120-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="248.67mm" wi="140.72mm" file="US07299335-20071120-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">RELATED APPLICATIONS </heading>
<p id="p-0002" num="0001">This application is related to the application entitled “TRANSLATION INFORMATION RETRIEVAL” having Ser No. 11/140,176, having a common inventor, having a common filing date, and having a common assignee, all of which is incorporated by reference in its entirety.</p>
<heading id="h-0002" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0003" num="0002">1. Field of the Invention</p>
<p id="p-0004" num="0003">This invention relates in general to a data processor and more particularly to obtaining translation information of a data processor.</p>
<p id="p-0005" num="0004">2. Description of the Related Art</p>
<p id="p-0006" num="0005">In some data processing systems, address translation to convert a virtual memory or I/O address to a physical memory or alternate I/O address is performed with a remapping function that accesses translation information stored e.g. in a translation lookaside buffer of a memory management unit (MMU) of a data processor.</p>
<p id="p-0007" num="0006">Debugging processes are utilized e.g. in the development of code for a data processing system. Debugging processes may be implemented with an external debugger, utilizing a debug communication protocol to communicate debug information to the debugger from the data processing system. Providing debug information in real-time, without intrusion on the normal operation of the data processing system is highly desirable, in order for the actual debug operations to remain transparent to operation of the system. One example of a debug communications protocol is the IEEE ISTO-5001 NEXUS debug standard which is used by a debugger operably coupled to the data processor undergoing debug.</p>
<p id="p-0008" num="0007">Many debug capabilities are defined in ISTO-5001 standard to monitor program execution by providing visibility into program flow and data flow. This visibility consists of a sequence of information messages provided over a dedicated multi-bit or multi-terminal serial interface or auxiliary port to an external development system. Program flow messages are then combined with a static image of the program to reconstruct the actual instruction execution sequence of the embedded processor. Data flow messages track processor reads and writes to pre-defined address ranges.</p>
<p id="p-0009" num="0008">ISTO-5001 dynamic debug is implemented using program trace messaging including synchronization messaging, and data trace messaging. Implementation of program trace messaging requires monitoring the sequence of instruction fetches performed by the processor core in conjunction with status information which indicates change of flow (COF) events, including direct or indirect change of flow events. Direct COF events involve program counter relative branches and indirect COF events involve register indirect branches and exception vectoring. Implementation of program trace synchronization messages requires the currently executing instruction address or reasonable neighboring instruction address to be transmitted. Implementation of data trace messaging requires monitoring data access addresses and conditionally providing associated data. Data trace messaging includes read messaging or data reads within one or more defined address ranges and write messaging or data writes within one or more defined address ranges.</p>
<p id="p-0010" num="0009">As part of the operation of the standard, debug messages are generated by the data processor system which contain address and data information for either program events (Program Trace Messaging), or data events (Data Read Messaging, Data Write Messaging), as well as other debug information. This address and data information is typically formatted by the debugger and presented to the user of the debugger. Correlation of the information to the program undergoing execution is an important part of the debugging process, so that actual program flow and the dynamic values of system data variables can be monitored.</p>
<p id="p-0011" num="0010">In systems employing virtual memory, the user's program and data values may be placed in physical memory address locations which do not correlate with the address locations resulting from the display of the compiled or assembly program and data layout, which correspond to virtual address locations. Virtual to physical address mapping (or translation) is performed by the data processor to obtain the correct program instructions and data variable values.</p>
<p id="p-0012" num="0011">However, in some embodiments, the virtual to physical mapping information is not known to an external debugger. What is needed is an improved system for providing translation information to external debugger without impacting the operation of a processor core of a data processing system.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0013" num="0012">The present invention may be better understood, and its numerous objects, features, and advantages made apparent to those skilled in the art by referencing the accompanying drawings.</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram of one embodiment of a data processing system according to the present invention.</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 2</figref> is a block diagram of a translation lookaside buffer of a memory management unit.</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 3</figref> is a block diagram of one embodiment illustrating the coupling of signal lines between debug circuitry according to the present invention.</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 4</figref> is flow diagram of one process for obtaining translation information accordingly to one embodiment of the present invention.</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 5</figref> is flow diagram of one process for obtaining translation information accordingly to one embodiment of the present invention.</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 6</figref> is flow diagram of one process for obtaining translation information accordingly to one embodiment of the present invention.</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 7</figref> is flow diagram of one process for obtaining translation information accordingly to one embodiment of the present invention.</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 8</figref> is flow diagram of one process for obtaining translation information accordingly to one embodiment of the present invention.</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 9</figref> is flow diagram of one process for obtaining translation information accordingly to one embodiment of the present invention.</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 10</figref> is a flow diagram of one embodiment for developing and installing code on a data processing system utilizing the information obtained in a debugging process according to the present invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<p id="p-0024" num="0023">The use of the same reference symbols in different drawings indicates identical items unless otherwise noted.</p>
<heading id="h-0004" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0025" num="0024">The following sets forth a detailed description of a mode for carrying out the invention. The description is intended to be illustrative of the invention and should not be taken to be limiting.</p>
<p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram of a data processing system <b>101</b>. In the embodiment shown, data processing system <b>101</b> includes a processor <b>102</b>. Processor <b>102</b> includes a processor core <b>103</b> and a memory management unit <b>105</b> operably coupled to processor core <b>103</b> via a bus. The bus includes virtual address bus lines <b>107</b>, control signal lines <b>109</b>, status signal lines <b>111</b>, and data signal lines <b>122</b>.</p>
<p id="p-0027" num="0026">System <b>101</b> includes a memory <b>115</b> (e.g. a RAM such as DRAM, SRAM, MRAM) and other circuitry <b>113</b> that is operably coupled to processor <b>102</b> via a communications bus <b>119</b>. In one embodiment, communications bus <b>119</b> includes data lines <b>122</b>, status lines <b>121</b>, control lines <b>123</b>, and physical address lines <b>125</b>. Processor <b>102</b> may be coupled to external circuitry such as non volatile memories (e.g. hard drive, CD drives) via interface circuitry located in other circuitry <b>113</b>. In one embodiment, other circuitry <b>113</b> may include other devices such as a ROM, general purpose I/O, UARTs, and other conventional peripheral devices. In other embodiments, other circuitry <b>113</b> may include circuitry that performs one or more other functions. As an example, other circuitry <b>113</b> may include circuitry to perform one or more of the following functions: timer function, data processing function, communication function, input/output function, memory function, analog to digital conversion, display driver function, and/or external bus interface function. Other circuitry <b>113</b> may be coupled via signals <b>141</b> in order to communicate external to data processing system <b>101</b>. Some embodiments may not include other circuitry <b>113</b>.</p>
<p id="p-0028" num="0027">In one embodiment, data processor <b>102</b> is a CPU. In other embodiments, data processor <b>102</b> may be another type of data processor such as e.g. a digital signal processor (DSP), intelligent direct memory access (DMA) controller, graphics controller, or embedded processor.</p>
<p id="p-0029" num="0028">In one embodiment, processor core <b>103</b> includes at least one instruction execution unit for executing instructions for performing processor operations. In one embodiment, the instruction execution unit includes circuitry for implementing stages of a processor pipeline. Examples of such stages includes a fetch stage, a decode stage, an execute stage, a memory data access stage, and a register write back stage. In other embodiments, processor <b>102</b> may include multiple processor cores with each having different or similar execution pipelines and functionality.</p>
<p id="p-0030" num="0029">In the embodiment shown, processor <b>102</b> performs data processor operations by obtaining data and instructions from memory <b>115</b> and writing data to memory <b>115</b> and/or other circuitry <b>113</b>. In one embodiment, processor core <b>103</b> executes instructions on data operands, both of which are received from memory <b>115</b>. In performing these operations, processor core <b>103</b> provides a virtual address to memory management unit <b>105</b> via address lines <b>107</b>. In response to a request, MMU <b>105</b> determines whether the data is in cache <b>134</b> by checking to see if the received virtual address is located in one of its translation look aside buffers (TLB) (e.g. <b>131</b>, <b>132</b>). If the requested data is not in cache <b>134</b>, a cache miss is generated. In response to a cache miss, memory <b>115</b>, I/O circuitry (e.g. of other circuitry <b>113</b>), or external circuitry (e.g. via other circuitry <b>113</b>) are accessed to obtain the data or instruction. In such accesses, MMU <b>105</b> translates the virtual address received from processor <b>102</b> to a physical address of a memory location or I/O circuit to receive or provide the requested data or instruction to those devices via communications bus <b>119</b>. In other embodiments, other types of processors may operate in other ways and/or have other configurations.</p>
<p id="p-0031" num="0030">In the embodiment shown, MMU <b>105</b> includes two TLB buffers <b>131</b> and <b>133</b>, but may include a different number in other embodiments. MMU <b>105</b> may include different levels of caches as well. MMU <b>105</b> includes a control circuit <b>135</b> for controlling the operations of MMU <b>105</b>.</p>
<p id="p-0032" num="0031">MMU <b>105</b> includes a configuration register <b>139</b> for storing configuration information regarding MMU <b>105</b>. Configuration information includes information regarding the configuration and capabilities of MMU <b>105</b>. Examples of configuration information include the number of entries of a TLB, the number of TLBs, the size of the TLB's, the entry size of the TLBs, and other configuration information e.g. whether the MMU is fully associative or 2-way associative. Other types of configuration information include information regarding other capabilities of MMU <b>105</b>, such as the ability to lock entries and the types of control operations available (e.g. such as flushing).</p>
<p id="p-0033" num="0032">In some embodiments, the MMU may be implemented as part of the processor core <b>103</b>. In some embodiments, a processor may include multiple MMUs e.g. where the processor includes multiple caches with each cache having an MMU. In some embodiments, the memory management unit may be implemented in a load store unit. In some embodiments, cache <b>134</b> is located external to MMU <b>105</b>. Other embodiments may not include cache <b>134</b>. Still in other embodiments, multiple caches may be implemented anywhere within or external to processor <b>102</b>.</p>
<p id="p-0034" num="0033">Data processing system <b>101</b> includes debug circuitry <b>117</b>. In the embodiment of <figref idref="DRAWINGS">FIG. 1</figref>, processor <b>102</b>, memory <b>115</b>, other circuitry <b>113</b>, and debug circuitry <b>117</b> are implemented on an integrated circuit <b>106</b>. Integrated circuit <b>106</b> includes external terminals <b>154</b>. Debug circuitry <b>117</b> is operably coupled to external debug circuitry <b>171</b> via external terminals <b>154</b> and signal lines <b>153</b>. In the embodiment shown, circuitry <b>171</b> is external to integrated circuit <b>106</b>, although in alternate embodiments, all or a portion of circuitry <b>171</b> may be contained within integrated circuit <b>106</b>. In some embodiments of the present invention, debug circuitry <b>117</b> and its interaction with other portions of data processing system <b>101</b> is compliant with one or more existing standards, such as JTAG or the IEEE ISTO-5001 standard. In one embodiment, lines <b>153</b> and external debug terminals <b>154</b> implement the signaling protocols of the IEEE ISTO-5001 NEXUS standard or JTAG-TAP standard. In one embodiment, an auxiliary port of the IEEE ISTO-5001 NEXUS standard may be implemented with terminals <b>154</b>.</p>
<p id="p-0035" num="0034">In one embodiment, external debug circuitry <b>171</b> includes circuitry for providing debug commands and receiving debug information using terminals <b>154</b>. In one embodiment, external debug circuitry <b>171</b> and debug circuitry <b>117</b> execute debugging operations as per the IEEE ISTO-5001 NEXUS standard by exchanging debug commands and program and data trace information as well as other status information associated with processor <b>102</b>. In one embodiment, circuitry <b>171</b> and circuitry <b>117</b> communicate via terminals <b>154</b> and via a command and communications protocol set forth in the ISTO-5001 NEXUS standard.</p>
<p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. 2</figref> is a block diagram of a TLB (e.g. <b>131</b> or <b>133</b>). TLB <b>201</b> includes a control circuit <b>203</b> and buffer <b>205</b>. Buffer <b>205</b> includes a plurality of entries (shown as entries <b>0</b>-N in <figref idref="DRAWINGS">FIG. 2</figref>). Each entry includes a virtual address field <b>209</b>, a physical address field <b>211</b>, an attributes field <b>213</b>, and a valid (“V”) field <b>215</b> indicating validity of the entry information. Field <b>209</b> includes the virtual address of the entry and field <b>211</b> includes the associated physical address translation of the virtual address located in virtual address field <b>209</b> of that entry. Attributes field <b>213</b> includes attribute information associated with the information stored in the address location including e.g. whether the memory location as designated by the physical addresses is restricted or whether the data associated with entry can be accessed by another processor operation. Other types of attribute information include write-protection, cacheability, memory coherence (or shared), the level of privilege required to allow access to locations mapped by the entry, whether information corresponding to the range of addresses has been modified, and other characteristics of the locations corresponding to the range of addresses mapped by the entry.</p>
<p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. 3</figref> is a block diagram further illustrating the signals of bus <b>151</b> between debug circuitry <b>117</b> and MMU debug circuitry <b>137</b> according to one embodiment of the present invention. In the embodiment shown, bus <b>151</b> includes command lines <b>317</b> (which are unidirectional from circuitry <b>117</b> to circuitry <b>137</b> in the embodiment shown) for carrying command signals from circuitry <b>117</b> to circuitry <b>137</b>. Bus <b>151</b> also includes command response signal lines <b>319</b> for carrying the command response signals from circuitry <b>137</b> to circuitry <b>117</b>, translation status lines <b>305</b> for carrying the translation status signals, virtual address (request) lines <b>309</b>, physically address and attribute lines <b>311</b> for providing the physical address and attributes from circuitry <b>137</b> to circuitry <b>117</b>. Bus <b>151</b> further includes virtual address (update) lines <b>313</b>, entry number lines <b>315</b>, and TLB update lines <b>316</b>. In other embodiments, the coupling between circuitry <b>117</b> and <b>137</b> may have other configurations. For examples, in other embodiments, the different information may be carried on common bus lines according to a communications protocol. Also in other embodiments, information may be communicated serially.</p>
<p id="p-0038" num="0037">Debug circuitry <b>117</b> also includes a control register <b>304</b> and control circuit <b>303</b> for controlling the operations of debug circuit <b>117</b>.</p>
<p id="p-0039" num="0038">In one embodiment, circuitry <b>117</b> and <b>137</b> are implemented as hardwired circuitry. In some embodiments, circuitry <b>117</b> and/or <b>137</b> may be implemented with a processor executing software or firmware. Still in other embodiments, debug circuitry <b>117</b> and <b>137</b> may be implemented as an integrated unit.</p>
<p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. 4</figref> is a flow diagram for obtaining translation configuration information from MMU <b>105</b> during a debug process according to one embodiment of the present invention. In operation <b>403</b>, debug circuitry <b>117</b> receives a command via lines <b>153</b> from circuitry <b>171</b> to obtain MMU configuration information from MMU <b>105</b>. In one embodiment, commands are provided to debug circuitry <b>117</b> by writing commands to control register <b>304</b> of debug circuitry <b>117</b>. In one example, debug circuitry <b>117</b> is capable of performing various operations for requesting information. Commands generated by circuitry <b>171</b> would be used to request the various types of information. See the ISTO-5001 NEXUS standard for examples of some of these commands.</p>
<p id="p-0041" num="0040">In operation <b>405</b>, debug circuitry <b>117</b> requests the configuration information from MMU debug circuitry <b>137</b> via command lines <b>317</b>. In one embodiment, circuitry <b>117</b> is capable of generating different types of commands to retrieve different types of information. In operation <b>407</b>, MMU debug circuitry <b>137</b> retrieves configuration information from register <b>139</b>. In operation <b>411</b>, MMU debug circuitry <b>137</b> provides the retrieved configuration information to debug circuitry <b>117</b> via lines <b>319</b>. In operation <b>413</b>, debug circuitry <b>117</b> provides the retrieved information to circuitry <b>171</b>.</p>
<p id="p-0042" num="0041">The operations for obtaining translation information depicted in the flow diagram of <figref idref="DRAWINGS">FIG. 4</figref> (as well as depicted in the flow diagrams of <figref idref="DRAWINGS">FIGS. 5-8</figref>) may be performed transparent to the operation of processor core <b>103</b>. As used herein, obtaining translation information “transparent to the operation of a processor core” means that translation information can be obtained without interrupting or disrupting processing operations of a processor core. For example, referring to <figref idref="DRAWINGS">FIG. 1</figref>, translation information may be obtained without halting or interrupting the execution of processor instructions by processor core <b>103</b>, since the information is obtained unobtrusively by MMU debug circuitry <b>137</b>. Obtaining translation information transparent to the operation of a processor core may allow, in some embodiments, for real-time debugging to occur unobtrusively.</p>
<p id="p-0043" num="0042">One advantage of a system that is able to obtain configuration information (or other types of translation information) transparent to the operation of the processor core is that it may allow a debugging system to view such information without utilizing a processor operation and thus without interrupting normal operation of the processor to obtain such information.</p>
<p id="p-0044" num="0043">The configuration information that is retrieved can be used by the debugging system to indicate to the user what capabilities are supported by MMU <b>105</b>. The information can further be used to assist the debugger in performing additional information requests to be described with reference to <figref idref="DRAWINGS">FIGS. 5-9</figref>.</p>
<p id="p-0045" num="0044"><figref idref="DRAWINGS">FIG. 5</figref> is a flow diagram of operations for obtaining translation information from a specified TLB entry of a TLB. In operation <b>503</b>, circuitry <b>117</b> receives a command from circuitry <b>171</b> to obtain the translation information from a specified entry of a TLB. In one example, the command would include a request to obtain all translation information associated with a specific entry (e.g. the 10<sup>th </sup>entry) of a specific TLB (e.g. TLB<b>0</b> or TLB<b>1</b> in the embodiment shown). In some embodiments, the request for information from a specific entry may be included in a request for translation information for a range of entries (e.g. entries <b>15</b>-<b>30</b>). In still another example, a command would include a request to obtain specific translation information (e.g. attributes, physical address) for a specified entry. Such information can then be provided to the user of the debugger to inform the user of at least a partial state of the translation mapping being performed by MMU <b>105</b>, and thus assist in reconciling the relationship between the virtual addresses associated with program code and data variables, and the actual physical location of that code and data within data processing system <b>101</b>, which may not remain constant or fixed as the system executes applications. Some virtual memory systems will typically remap information dynamically as resources are requested and released.</p>
<p id="p-0046" num="0045">In operation <b>505</b>, debug circuitry <b>117</b> requests the specified TLB entry information from MMU debug circuitry <b>137</b> via command lines <b>317</b> and entry number lines <b>315</b>. In operation <b>507</b>, MMU debug circuitry <b>137</b> retrieves the information from the specified TLB entry or entries in the specified TLB. In operation <b>509</b>, MMU debug circuitry <b>137</b> provides retrieved information to debug circuitry <b>117</b> via lines <b>311</b> and lines <b>313</b> (depending upon the specified information). Such information may include the entry's virtual and physical address fields along with attributes and validity information as shown in <figref idref="DRAWINGS">FIG. 2</figref>. In operation <b>511</b>, debug circuitry <b>117</b> provides the retrieved information to circuitry <b>171</b>.</p>
<p id="p-0047" num="0046"><figref idref="DRAWINGS">FIG. 6</figref> is a flow diagram for obtaining information for a specific virtual address or addresses. In operation <b>603</b>, debug circuitry <b>117</b> receives a command from circuitry <b>171</b> via terminals <b>154</b> to obtain TLB information associated with a specific virtual address. In one embodiment, the command may be to obtain all TLB information for a specified address. In other embodiments, the command may be to obtain specified TLB information (e.g. attributes, physical address) for a particular virtual address. In one embodiment, the command may be to obtain information from a specific TLB. In other embodiments, the command may be to obtain information from all TLBs within MMU <b>105</b>. In one embodiment, a request to obtain TLB information for a virtual address may be included in a request to obtain TLB information in a range of virtual addresses. In one embodiment, the command provided by circuitry <b>117</b> would be a command to obtain information from multiple addresses. The command includes a number indicating the range of addresses to use from the address provided on lines <b>309</b>.</p>
<p id="p-0048" num="0047">In operation <b>605</b>, debug circuitry <b>117</b> requests a search for information associated with the specific virtual address by MMU debug circuitry <b>137</b> via command lines <b>317</b>, translation request control lines <b>307</b>, and virtual address lines <b>309</b>. In one embodiment, a command indicating a request is provided on command lines <b>317</b>, the type of translation is provided on translation request control lines <b>307</b>, and the specific virtual address is provided on virtual address lines <b>309</b>.</p>
<p id="p-0049" num="0048">In operation <b>607</b>, MMU debug searches its TLBs for information associated with the specified virtual address. In one embodiment, it searches the virtual address field <b>209</b> of each TLB (or a specified TLB depending on the type of translation request) for the specified virtual address.</p>
<p id="p-0050" num="0049">If in <b>609</b> a determination is made that no TLB of MMU <b>105</b> includes an entry for the virtual address, MMU debug circuitry <b>137</b> provides an indication of a translation miss to debug circuitry <b>117</b> via status lines <b>305</b> in operation <b>611</b>. If in <b>609</b> a determination is made that a TLB has an entry for the specified virtual address (referred to as a TLB hit), MMU debug circuitry <b>137</b> provides an indication of a translation hit to debug circuitry <b>117</b> via translation status line <b>305</b> and provides the translation entry information to debug circuitry <b>117</b> via physical address and attributes lines <b>311</b> in operation <b>613</b>. In one embodiment, the entry number(s) of the hitting entry(s) may also be provided by MMU debug circuitry <b>137</b> to debug circuitry <b>117</b> via entry number lines <b>315</b> in operation <b>613</b>.</p>
<p id="p-0051" num="0050">In operation <b>615</b>, debug circuitry <b>137</b> provides the retrieved information (or indication of the TLB miss) to circuitry <b>171</b> via lines <b>153</b> and terminals <b>154</b>.</p>
<p id="p-0052" num="0051">By obtaining translation information associated with a specific virtual address, or a ranges of specified virtual addresses, the debugger of system <b>101</b> may properly correlate the real-time debug information provided as part of the operation of a real-time trace information standard such as ISTO-5001 NEXUS, in which debug messages are generated by the data processor containing address and data information for either program events (Program Trace Messaging), or data events (Data Read Messaging, Data Write Messaging), as well as other debug information. These messages include physical address information. By correlating the physical address information contained in the real-time trace information to corresponding virtual addresses used by the programmer of the application being executed by data processing system <b>101</b>, this address and data information can be formatted by the debugger and presented to the user of the debugger. Correlation of the physical address information obtained by real-time trace messages to the virtual addresses of the program undergoing execution may be an important part of the debugging process, so that actual program flow and the dynamic values of system data variables can be properly and easily monitored.</p>
<p id="p-0053" num="0052"><figref idref="DRAWINGS">FIG. 7</figref> shows a flow diagram for obtaining all information from a TLB, independent of specific virtual address(es). In this embodiment, it may be desirable for a programmer to obtain all translation information of a data processing system, so that the complete state of one or more TLBs of MMU <b>105</b> may be examined by the debugger of system <b>101</b>.</p>
<p id="p-0054" num="0053">In operation <b>703</b>, debug circuitry <b>117</b> receives a command from circuitry <b>171</b> to obtain all TLB entry information from a TLB of a MMU. In one embodiment, a request to obtain information all information from one TLB of an MMU may be included in a command to obtain all information from all TLBs of an MMU. In some embodiments, the command may be to obtain all information of specific fields of a TLB (e.g. physical address, attributes) or TLBs.</p>
<p id="p-0055" num="0054">In operation <b>705</b>, debug circuitry <b>117</b> requests MMU debug circuitry <b>137</b> to provide all TLB entry information of a TLB (or all TLBs of MMU <b>105</b>) via command lines <b>317</b>.</p>
<p id="p-0056" num="0055">In the embodiment shown in <figref idref="DRAWINGS">FIG. 7</figref>, the entry information is provided on an entry by entry basis. However, the entry information maybe provided to circuitry <b>117</b> by other techniques in other embodiments. In operation <b>707</b>, the current entry (designated as N) to be provided is set to <b>0</b> (the first entry) by MMU debug circuitry <b>137</b>. In operation <b>709</b>, MMU debug circuitry <b>137</b> retrieves the information for TLB entry for the current entry (N). In operation <b>711</b>, MMU debug circuitry <b>137</b> provides the retrieved information for the current TLB entry (N) to debug circuitry <b>117</b> via lines (physical address and attributes), lines <b>313</b> (virtual address), and lines <b>315</b> (entry number). In some embodiments, a hand shake procedure is set up where circuitry <b>117</b> provides a “received command” in response to receiving the information of each entry. In response to the “received command, circuitry <b>137</b> provides the information for the next entry. In other embodiments, no handshake procedure is utilized</p>
<p id="p-0057" num="0056">In operation <b>713</b>, debug circuitry <b>117</b> provides the retrieved information from entry N to circuitry <b>171</b>. In some embodiments, operation <b>713</b> may be performed by a handshake process.</p>
<p id="p-0058" num="0057">In operation <b>715</b>, MMU debug circuitry <b>137</b> makes a determination of whether the current entry N is the last entry of a TLB (or the last entry of the last TLB of an MMU). If the determination is no in operation <b>715</b>, the current entry N is incremented to the next entry number in operation <b>717</b> and operations <b>709</b>, <b>711</b>, <b>713</b>, and <b>715</b> are repeated for additional entries until a determination is made that the information has been retrieved for the last TLB entry in operation <b>715</b>. If the determination is yes in operation <b>715</b>, MMU debug circuitry <b>137</b> provides a “done” response via lines <b>319</b> to debug circuitry <b>117</b> in operation <b>719</b>. Debug circuitry <b>117</b> provides a done response to circuitry <b>171</b> indicating that all of the information has been provided in operation <b>721</b>.</p>
<p id="p-0059" num="0058">In other embodiments, debug circuitry <b>117</b> may include memory (not shown) for buffering translation information before being provided to circuitry <b>171</b>. Accordingly, in some embodiments, translation information maybe provided to circuitry <b>171</b> at a different time or under a different looping scheme than the information is provided from MMU debug circuitry <b>137</b> to debug circuitry <b>117</b>.</p>
<p id="p-0060" num="0059">In some embodiments, MMU debug circuitry <b>137</b> and debug circuitry <b>117</b> may be configured or placed in a mode to broadcast all changes in TLB information as the system executes. In such a mode, any updates to the TLB(s) will be automatically provided to circuitry <b>171</b>. One advantage of this mode is that it may speed up the debugging process, since the current state of the TLB(s) can be automatically tracked by circuitry <b>171</b> and provided to the debugger of system <b>101</b> without the need to periodically query the state of MMU <b>105</b>.</p>
<p id="p-0061" num="0060">In <b>803</b>, debug circuitry <b>117</b> receives a command from circuitry <b>171</b> to enter a broadcast mode. In operation <b>805</b>, debug circuitry <b>117</b> provides a command via command lines <b>317</b> to MMU debug circuitry <b>137</b> to enter into a broad cast mode. In operation <b>807</b> MMU debug circuitry <b>137</b> enters a broadcast mode and waits for an update to a TLB to occur.</p>
<p id="p-0062" num="0061">An update to a TLB may occur for a number reasons including the writing or invalidation of data or instructions from a cache e.g. <b>134</b>, the remapping of data or instructions within system <b>101</b>, a paging operation to transfer information from a non-volatile memory e.g. hard disk drive or CD ROM to a faster volatile memory (e.g. RAM) during the operation of data processing system <b>101</b>, or invalidation of a TLB entry.</p>
<p id="p-0063" num="0062">If in operation <b>809</b> an update is determined to have occurred, in operation <b>811</b> MMU debug circuitry <b>137</b> provides updated TLB translation information including the entry number of the updated information to debug circuitry <b>117</b> via lines <b>311</b> (physical address and attributes), lines <b>313</b> (virtual address), and lines <b>315</b> (entry number). Debug circuitry <b>117</b> provides received information to circuitry <b>171</b> in operation <b>813</b>.</p>
<p id="p-0064" num="0063">In some embodiments, circuitry <b>137</b> would be configured to automatically provide any updated TLB information to circuitry <b>117</b> without having to be placed in a broadcast mode. In some embodiments, circuitry <b>117</b> would be configured to automatically provide any updated TLB information to circuitry <b>171</b>.</p>
<p id="p-0065" num="0064">Providing a processor with circuitry that can broadcast updates of translation information without interfering with processor operations may provide for a more efficient debugging process. Furthermore it can provide an indication of an update to the TLB automatically, there by alerting the debugging circuitry that there has been an update. An advantage that may occur with this mode is that it may speed up the debugging process, since the current state of the TLB(s) can be automatically tracked by circuitry <b>171</b> and provided to the debugger of system <b>101</b> without the need to periodically query the state of MMU <b>105</b>.</p>
<p id="p-0066" num="0065">In some embodiments, processor operations may be utilized to obtain translation information. In one embodiment, debug circuitry <b>137</b> would generate an interrupt to processor core <b>103</b> to obtain requested translation information. Such interrupts could be utilized to obtain requested information if the requested translation information is not present in MMU <b>105</b> and must be provided external to processor <b>102</b>.</p>
<p id="p-0067" num="0066">In one embodiment, the interrupt to obtain requested translation information is a low priority interrupt that would be serviced after other higher priority tasks have been completed. In one embodiment, the interrupt is a vectored interrupt where circuitry <b>137</b> provides the vector to processor core <b>103</b> with an interrupt signal on lines <b>152</b>. In some embodiments, interrupt priority of the requesting interrupt may be programmable within a range of interrupt priority levels. In one embodiment, an interrupt may be generated with a specified priority level. However, other types of interrupts may be performed in other embodiments. In some embodiments, an interrupt may be generated by circuitry <b>137</b> via other circuitry (not shown) having an output connected to an interrupt line of processor core <b>103</b>. In one embodiment, an interrupt may be generated by debug circuitry <b>117</b> (or by an interrupt generating circuit coupled to debug circuitry <b>117</b>) when translation information is requested by circuitry <b>171</b>.</p>
<p id="p-0068" num="0067">In one embodiment, in response to an interrupt, processor core <b>103</b> suspends the current execution stream and obtains the translation information by executing processor operations as part of an interrupt handling routine performed by processor core <b>103</b>.</p>
<p id="p-0069" num="0068">In other embodiments, translation information may be obtained by processor core <b>103</b> by utilizing program threads. A program thread is a path of instructions that constitute an executable program to complete a task or series of tasks. An operating system may control the execution of a number of program threads which may be executed to accomplish various tasks. A program thread may be activated when the processor core is examining a list of tasks in priority order to determine whether they should be activated. During the operation of a data processing system, an operating system may periodically check whether a request for activation of a thread has been made based on the priority of the thread.</p>
<p id="p-0070" num="0069">In one embodiment, initiation of a new program thread may be generated by debug circuitry <b>117</b> or by MMU debug circuitry <b>137</b> (or by an interrupt generating circuit—coupled to debug circuitry <b>117</b> or MMU debug circuitry <b>137</b> in some embodiments) when translation information is requested by circuitry <b>171</b>. In one embodiment, in response to generation of a new program thread, the new thread is added to the list of active threads requesting execution.</p>
<p id="p-0071" num="0070">In one embodiment, the thread priority is programmable to a predetermined priority level. For example, the thread priority may be programmed to a lower value than other threads that are more time critical such that it may is executed with a lower priority (e.g. at a priority level just above the idle thread) such that it minimally affects processor core operation. In one embodiment, threads of higher priority would be checked first for activation with lower priority threads being checked after a determination that higher priority threads have not been requested for activation.</p>
<p id="p-0072" num="0071">In one embodiment, a request for activation of a thread is made by circuitry <b>137</b> by writing a specified value to a request register (not shown) of processor core <b>103</b> via bus <b>151</b>. In other embodiments, activation of a thread may be requested in other manners. In one embodiment, as part of thread activation, a thread priority may be provided along with the request for activation. In other embodiments the thread priority may be predetermined by examining the state of a control register field, or may be hardwired to a specific value.</p>
<p id="p-0073" num="0072"><figref idref="DRAWINGS">FIG. 9</figref> sets forth a flow diagram showing modifications of the operations of <figref idref="DRAWINGS">FIG. 6</figref> for implementing the use of processor core operations (e.g. a program thread or interrupt handling routine) to obtain translation information by a processor core. In the embodiment shown, the operations of <figref idref="DRAWINGS">FIG. 9</figref> are performed if the requested translation information for a specific virtual address is not found in a TLB of MMU <b>105</b> by circuitry <b>137</b> (indicated as “no” in operation <b>609</b> of <figref idref="DRAWINGS">FIG. 6</figref>).</p>
<p id="p-0074" num="0073">If no in operation <b>609</b>, circuitry <b>137</b> requests activation of a program thread responsible for obtaining the translation information or generates an interrupt to processor core <b>103</b> via lines <b>152</b>. In one embodiment, the program thread or interrupt has a predetermined priority. In other embodiments the priority may be provided by MMU debug circuitry <b>137</b> along with the request, utilizing lines <b>152</b>.</p>
<p id="p-0075" num="0074">In response, the processor core <b>103</b> activates the program thread or performs an interrupt handling routine to obtain the requested translation information in operation <b>905</b>. The activation of the thread or the generation or handling of an interrupt is based on the priority level of the thread or interrupt. In one embodiment, code <b>116</b> for performing the program thread or for the interrupt handling routine is stored in memory <b>115</b> during operation, but may be written to a cache during operation as well. In one embodiment, the code <b>116</b> may be stored in ROM or other non-volatile memory (e.g. designated as other circuitry <b>113</b> in <figref idref="DRAWINGS">FIG. 1</figref>).</p>
<p id="p-0076" num="0075">Processor core <b>103</b>, executing a program thread or interrupt handling routine, may obtain translation information in a number of ways. In one embodiment, the translation information is obtained by searching a hierarchy of tables (e.g. page tables <b>118</b>) in memory <b>115</b> containing translation information. In one embodiment, the searching of the hierarchy of tables can be performed by table walking, either by a hardware state machine in MMU <b>105</b> (not shown) or by processor operations performed by core <b>103</b>.</p>
<p id="p-0077" num="0076">In operation <b>907</b>, processor core <b>103</b> provides the retrieved translation information to MMU debug circuitry <b>137</b> via lines <b>152</b>. In another embodiment, processor core <b>103</b> writes the requested information to a register in MMU debug circuitry <b>137</b> via the memory bus (data lines <b>122</b> and virtual address lines <b>107</b>). In such an embodiment, MMU debug circuitry <b>137</b> may includes registers having a designated I/O or memory address. Processor core <b>103</b> then continues with the execution of the next selected thread or continue with the interrupted processes.</p>
<p id="p-0078" num="0077">In operation <b>909</b>, MMU debug circuitry <b>137</b> provides the requested translation information to debug circuitry <b>117</b> via bus <b>151</b>. In operation <b>911</b>, debug circuitry <b>117</b> provides the retrieved translation information to debug circuitry <b>171</b>.</p>
<p id="p-0079" num="0078">In other embodiments, debug circuitry <b>117</b> may generate an interrupt to processor core <b>103</b> or cause the activation of the program thread in processor core <b>103</b>. Also, in other embodiments, processor core <b>103</b> may provide the information directly to debug circuitry <b>117</b> without writing it to MMU <b>105</b>.</p>
<p id="p-0080" num="0079">One advantage of using lower priority programmed threads or lower priority interrupts to obtain translation information by a processor core is that the translation information retrieval may be performed with a minimal amount of interference to normal processor core operation. In some cases, the retrieval may be performed during time when the processor core is idle.</p>
<p id="p-0081" num="0080">In one embodiment, the interrupt level of the interrupt for obtaining translation information is programmable or the thread priority level is programmable. In one embodiment, the retrieval of priority information is programmable. Thus, the level of priority may be changed dynamically. In some embodiments, this priority modification is be done by a command received by debug circuitry <b>117</b> from lines <b>153</b> or is done as a result of a processor <b>102</b> operation. In other embodiments, the priority modification may be performed by another component of system <b>101</b>.</p>
<p id="p-0082" num="0081">Retrieved translation information may be used by circuitry <b>171</b> for debugging code being executed by processor core <b>103</b>. This code being debugged may be part of a computer program that then would be loaded onto an another electronic system that includes a data processing system similar to data processing system <b>101</b>.</p>
<p id="p-0083" num="0082"><figref idref="DRAWINGS">FIG. 10</figref> is a flow chart setting forth a process showing how translated information obtained by MMU <b>105</b> during a debug process is used to develop code for installation on another data processing system.</p>
<p id="p-0084" num="0083">In operation <b>1003</b>, the information is obtained from MMU <b>105</b> and eventually provided to circuitry <b>171</b>. In operation <b>1005</b>, the translation information is used to develop program code (e.g. application or system code). In one embodiment, the translation information is used to debug the code that the processor core <b>103</b> is executing.</p>
<p id="p-0085" num="0084">In operation <b>1007</b>, the developed program code is installed on a data processing system (e.g. similar to data processing system <b>101</b>) for use by that system. In one embodiment, the code is loaded onto the data processing system as part of the manufacturing process (e.g. as with a cell phone or factory installed computer software). In other embodiments, the code may be part of an aftermarket software application purchased by the user of the data processing system.</p>
<p id="p-0086" num="0085">Data processing systems of other embodiments may have other configurations. For example in some embodiments, circuitry <b>117</b> may be omitted where the debug circuitry <b>171</b> obtains information from MMU debug circuitry <b>137</b> directly. In other embodiments, circuitry <b>137</b> may be omitted and circuitry <b>117</b> may obtain the information from MMU <b>105</b>. Still in other embodiments, circuitry <b>117</b> and <b>137</b> may be combined.</p>
<p id="p-0087" num="0086">One embodiment includes a method of obtaining translation information from a data processor. The data processor includes a processor core and memory management circuitry. The method includes obtaining translation information from the memory management circuitry. The obtaining is performed transparent to the operation of the processor core. The translation information is utilized in performing processor operations of the data processor. The method also includes providing the translation information external to the data processor.</p>
<p id="p-0088" num="0087">In another embodiment, a data processing system includes a data processor. The data processor includes a processor core and memory management circuitry operably coupled to the processor core. The memory management circuitry stores translation information. The translation information is utilized in performing processor operations of the data processor. The data processing system also includes debug circuitry. The debug circuitry is configured to obtain translation information from the memory management circuitry transparent to the operation of the processor core and coupled to provide obtained information external to the data processor.</p>
<p id="p-0089" num="0088">Another embodiment includes a method of debugging a data processor. The data processor includes a processor core and memory management circuitry. The processor core and memory management circuitry are implemented in an integrated circuit. The method includes obtaining translation information from the memory management circuitry wherein the obtaining is performed transparent to the operation of the processor core. The translation information is utilized in performing processor operations of the data processor. The method also includes providing the translation information external to the data processor via at least one external debugging terminal of the integrated circuit and using the translation information to debug code being executed by the processor core.</p>
<p id="p-0090" num="0089">While particular embodiments of the present invention have been shown and described, it will be recognized to those skilled in the art that, based upon the teachings herein, further changes and modifications may be made without departing from this invention and its broader aspects, and thus, the appended claims are to encompass within their scope all such changes and modifications as are within the true spirit and scope of this invention.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method of obtaining translation information from a data processor, the data processor including a processor core and memory management circuitry, the method comprising:
<claim-text>obtaining translation information from the memory management circuitry, wherein the obtaining is performed transparent to the operation of the processor core, wherein the translation information is utilized in performing processor operations of the data processor, wherein the obtaining further includes:
<claim-text>requesting translation information by debug circuitry from the memory management circuitry; and</claim-text>
<claim-text>receiving the translation information by the debug circuitry from the memory management circuitry in response to the requesting;</claim-text>
</claim-text>
<claim-text>providing the translation information external to the data processor.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the translation information includes configuration information.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the translation information includes attribute information.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the providing the translation information external to the data processor includes providing the translation information to external debug circuitry.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein:
<claim-text>the processor core and the memory management circuitry are implemented on an integrated circuit;</claim-text>
<claim-text>wherein the providing the translation information external to the data processor includes providing the translation information external to the integrated circuit.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising:
<claim-text>receiving a request for translation information, wherein the request is generated external to the data processor;</claim-text>
<claim-text>wherein the obtaining translation information from the memory management circuitry is obtained in response to the request.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref> wherein the memory management circuitry includes a translation buffer, wherein the request includes a request for translation information for all entries of the translation buffer.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref> further comprising:
<claim-text>wherein in response to receiving the request, searching the memory management circuitry for information corresponding to the request.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref> further comprising:
<claim-text>providing an indication external to the data processor that the memory management circuitry does not include translation information corresponding to the request.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref> further comprising:
<claim-text>wherein the request includes an indication of a specific entry of a translation buffer of the memory management circuitry;</claim-text>
<claim-text>wherein translation information provided includes information associated with the specific entry of the translation buffer.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref> further comprising:
<claim-text>wherein the request includes an indication of a virtual address;</claim-text>
<claim-text>wherein translation information provided includes information associated with the virtual address in the memory management circuitry.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising:
<claim-text>placing the data processor in a mode wherein a change in translation information in the memory management circuitry initiates the obtaining.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising:
<claim-text>wherein the obtaining is performed in response to a change in translation information.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising:
<claim-text>using the translation information to debug code being executed by the processor core to develop program code;</claim-text>
<claim-text>installing the program code in a data processing system.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising:
<claim-text>receiving a request for translation information associated with a specified virtual address, wherein the request is generated external to the data processor;</claim-text>
<claim-text>determining if an indication of the specified virtual address is stored in the memory management circuitry; and</claim-text>
<claim-text>wherein the obtaining includes obtaining information associated with the virtual address from the memory management circuitry if the determining indicates that an indication of the specified virtual address is stored in the memory management circuitry.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. A data processing system comprising:
<claim-text>a data processor, the data processor including:
<claim-text>a processor core;</claim-text>
<claim-text>memory management circuitry operably coupled to the processor core, the memory management circuitry storing translation information, wherein the translation information is utilized in performing processor operations of the data processor;</claim-text>
</claim-text>
<claim-text>debug circuitry, the debug circuitry configured to obtain translation information from the memory management circuitry transparent to the operation of the processor core, wherein the debug circuitry is configured to request translation information from the memory management circuitry transparent to the operation of the processor core and to receive translation information from the memory management circuitry transparent to the operation of the processor core provided in response to a request from the debug circuitry, the debug circuitry coupled to provide obtained information external to the data processor.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The data processing system of <claim-ref idref="CLM-00016">claim 16</claim-ref> wherein the data processor and the debug circuitry are implemented in an integrated circuit, the integrated circuit including at least one external debug terminal operably coupled to the debug circuitry, the debug circuitry operable to provide the translation information externally via the at least one external debug terminal.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The data processing system of <claim-ref idref="CLM-00017">claim 17</claim-ref> wherein the debug circuitry is operable to receive external requests for translation information via the at least one external debug terminal.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The data processing system of <claim-ref idref="CLM-00016">claim 16</claim-ref> wherein the memory management circuitry stores translation information in a translation look aside buffer.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The data processing system of <claim-ref idref="CLM-00016">claim 16</claim-ref> wherein the memory management circuitry includes a storage device that includes a plurality of entries, wherein each entry of the plurality of entries is configured to store translation information, wherein the translation information stored in each entry includes virtual address information and physical address information.</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. A data processing system comprising:
<claim-text>a data processor, the data processor including:
<claim-text>a processor core;</claim-text>
<claim-text>memory management circuitry operably coupled to the processor core, the memory management circuitry storing translation information, wherein the translation information is utilized in performing processor operations of the data processor;</claim-text>
</claim-text>
<claim-text>debug circuitry, the debug circuitry configured to obtain translation information from the memory management circuitry transparent to the operation of the processor core and coupled to provide obtained information external to the data processor;</claim-text>
<claim-text>wherein the debug circuitry includes a memory management debug circuitry portion implemented in the memory management circuitry and a second debug circuitry portion, wherein the memory management debug circuitry portion is operably coupled to the second debug circuitry portion to receive requests for translation information from the second debug circuitry portion and coupled to provide translation information to the second debug circuitry portion.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. A method of debugging a data processor, the data processor including a processor core and memory management circuitry, the processor core and memory management circuitry are implemented in an integrated circuit, the method comprising:
<claim-text>obtaining translation information from the memory management circuitry wherein the obtaining is performed transparent to the operation of the processor core, wherein the translation information is utilized in performing processor operations of the data processor, wherein the obtaining further includes:
<claim-text>requesting translation information by debug circuitry from the memory management circuitry; and</claim-text>
<claim-text>receiving the translation information by the debug circuitry from the memory management circuitry in response to the requesting;</claim-text>
</claim-text>
<claim-text>providing the translation information external to the data processor via at least one external debugging terminal of the integrated circuit;</claim-text>
<claim-text>using the translation information to debug code being executed by the processor core.</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>
