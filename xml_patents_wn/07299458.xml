<us-patent-grant lang="EN" dtd-version="v4.2 2006-08-23" file="US07299458-20071120.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20071106" date-publ="20071120">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>07299458</doc-number>
<kind>B2</kind>
<date>20071120</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>10285399</doc-number>
<date>20021031</date>
</document-id>
</application-reference>
<us-application-series-code>10</us-application-series-code>
<us-term-of-grant>
<us-term-extension>5</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>9</main-group>
<subgroup>44</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>717133</main-classification>
<further-classification>717132</further-classification>
<further-classification>717156</further-classification>
<further-classification>716  7</further-classification>
</classification-national>
<invention-title id="d0e53">System and method for converting control flow graph representations to control-dataflow graph representations</invention-title>
<references-cited>
<citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5230057</doc-number>
<kind>A</kind>
<name>Shido et al.</name>
<date>19930700</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5303377</doc-number>
<kind>A</kind>
<name>Gupta et al.</name>
<date>19940400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717155</main-classification></classification-national>
</citation>
<citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>5570040</doc-number>
<kind>A</kind>
<name>Lytle et al.</name>
<date>19961000</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>5737766</doc-number>
<kind>A</kind>
<name>Tan</name>
<date>19980400</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>5831864</doc-number>
<kind>A</kind>
<name>Raghunathan et al.</name>
<date>19981100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>716  2</main-classification></classification-national>
</citation>
<citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>5870588</doc-number>
<kind>A</kind>
<name>Rompaey et al.</name>
<date>19990200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>703 13</main-classification></classification-national>
</citation>
<citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>5892962</doc-number>
<kind>A</kind>
<name>Cloutier</name>
<date>19990400</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>5903771</doc-number>
<kind>A</kind>
<name>Sgro et al.</name>
<date>19990500</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>5978588</doc-number>
<kind>A</kind>
<name>Wallace</name>
<date>19991100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717159</main-classification></classification-national>
</citation>
<citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>6023755</doc-number>
<kind>A</kind>
<name>Casselman</name>
<date>20000200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>6052773</doc-number>
<kind>A</kind>
<name>DeHon et al.</name>
<date>20000400</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>6076152</doc-number>
<kind>A</kind>
<name>Huppenthal et al.</name>
<date>20000600</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>6192439</doc-number>
<kind>B1</kind>
<name>Grunewald et al.</name>
<date>20010200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>6202204</doc-number>
<kind>B1</kind>
<name>Wu et al.</name>
<date>20010300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717151</main-classification></classification-national>
</citation>
<citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>6226776</doc-number>
<kind>B1</kind>
<name>Panchul et al.</name>
<date>20010500</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>6401187</doc-number>
<kind>B1</kind>
<name>Motokawa et al.</name>
<date>20020600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711213</main-classification></classification-national>
</citation>
<citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>6745384</doc-number>
<kind>B1</kind>
<name>Biggerstaff</name>
<date>20040600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717156</main-classification></classification-national>
</citation>
<citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>6762764</doc-number>
<kind>B2</kind>
<name>Hiwada et al.</name>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>345506</main-classification></classification-national>
</citation>
<citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>2002/0056078</doc-number>
<kind>A1</kind>
<name>Inagaki et al.</name>
<date>20020500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717155</main-classification></classification-national>
</citation>
<citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>2002/0095666</doc-number>
<kind>A1</kind>
<name>Tabata et al.</name>
<date>20020700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717149</main-classification></classification-national>
</citation>
<citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>2002/0095667</doc-number>
<kind>A1</kind>
<name>Archambault</name>
<date>20020700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717154</main-classification></classification-national>
</citation>
<citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>2003/0066061</doc-number>
<kind>A1</kind>
<name>Wu et al.</name>
<date>20030400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717158</main-classification></classification-national>
</citation>
<citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>2003/0101419</doc-number>
<kind>A1</kind>
<name>Yamashita et al.</name>
<date>20030500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>716  1</main-classification></classification-national>
</citation>
<citation>
<patcit num="00024">
<document-id>
<country>US</country>
<doc-number>2003/0137518</doc-number>
<kind>A1</kind>
<name>Hiwada et al.</name>
<date>20030700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>345506</main-classification></classification-national>
</citation>
<citation>
<patcit num="00025">
<document-id>
<country>US</country>
<doc-number>2003/0140337</doc-number>
<kind>A1</kind>
<name>Aubury</name>
<date>20030700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717158</main-classification></classification-national>
</citation>
<citation>
<patcit num="00026">
<document-id>
<country>US</country>
<doc-number>2004/0003220</doc-number>
<kind>A1</kind>
<name>May et al.</name>
<date>20040100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>712245</main-classification></classification-national>
</citation>
<citation>
<nplcit num="00027">
<othercit>Kramer, R.; Gupta, R.; Soff, M.; “The Combining DAG: A Technique for Parallel Data Flow Analysis”; IEEE Transactions on Parallel and Distributed Systems; vol. 5, Issue 8, pp. 805-813, Aug. 1994.</othercit>
</nplcit>
<category>cited by examiner</category>
</citation>
<citation>
<nplcit num="00028">
<othercit>Agarwal, A., et al., “The Raw Compiler Project”, pp. 1-12, http://cag-www.lcs.mit.edu/raw, Proceedings of the Second SUIF Compiler Workshop, Aug. 21-23, 1997.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00029">
<othercit>Albaharna, Osama, et al., “On the viability of FPGA-based integrated coprocessors”, © 1996 IEEE, Publ. No. 0-8186-7548-9/96, pp. 206-215.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00030">
<othercit>Amerson, Rick, et al., “Teramac—Configurable Custom Computing”, © 1995 IEEE, Publ. No. 0-8186-7086-X/95, pp. 32-38.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00031">
<othercit>Barthel, Dominique Aug. 25-26, 1997, “PVP a Parallel Video coProcessor”, Hot Chips IX, pp. 203-210.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00032">
<othercit>Bertin, Patrice, et al., “Programmable active memories: a performance assessment”, © 1993 Massachusetts Institute of Technology, pp. 88-102.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00033">
<othercit>Bittner, Ray, et al., “Computing kernels implemented with a wormhole RTR CCM”, © 1997 IEEE, Publ. No. 0-8186-8159-4/97, pp. 98-105.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00034">
<othercit>Buell, D., et al. “Splash 2: FPGAs in a Custom Computing Machine—Chapter 1—Custom Computing Machines: An Introduction”, pp. 1-11, http://www.computer.org/espress/catalog/bp07413/spls-ch1.html (originally believed published in J. of Supercomputing, vol. IX, 1995, pp. 219-230.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00035">
<othercit>Casselman, Steven, “Virtual Computing and The Virtual Computer”, © 1993 IEEE, Publ. No. 0-8186-3890-7/93, pp. 43-48.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00036">
<othercit>Chan, Pak, et al., “Architectural tradeoffs in field-programmable-device-based computing systems”, © 1993 IEEE, Publ. No. 0-8186-3890-7/93, pp. 152-161.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00037">
<othercit>Clark, David, et al., “Supporting FPGA microprocessors through retargetable software tools,”, © 1996 IEEE, Publ. No. 0-8186-7548-9/96, pp. 195-103.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00038">
<othercit>Cuccaro, Steven, et al., “The CM-2X: a hybrid CM-2/Xilink prototype”, © 1993 IEEE, Publ. No. 0-8186-3890-7/93, pp. 121-130.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00039">
<othercit>Culbertson, W. Bruce, et al., “Exploring architectures for volume visualization on the Teramac custom computer”, © 1996 IEEE, Publ. No. 0-8186-7548-9/96, pp. 80-88.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00040">
<othercit>Culbertson, W. Bruce, et al., “Defect tolerance on the Teramac custom computer”, © 1997 IEEE, Publ. No. 0-8186-8159-4/97, pp. 116-123.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00041">
<othercit>Dehon, Andre, “DPGA-Coupled microprocessors: commodity IC for the early 21<sup>st </sup>century”, © 1994 IEEE, Publ. No. 0-8186-5490-2/94, pp. 31-39.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00042">
<othercit>Dehon, A., et al., “MATRIX A Reconfigurable Computing Device with Configurable Instruction Distribution”, Hot Chips IX, Aug. 25-26, 1997, Stanford, California, MIT Artificial Intelligence Laboratory.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00043">
<othercit>Dhaussy, Philippe, et al., “Global control synthesis for an MIMD/FPGA machine”, © 1994 IEEE, Publ. No. 0-8186-5490-2/94, pp. 72-81.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00044">
<othercit>Elliott, Duncan, et al., “Computational Ram: a memory-SIMD hybrid and its application to DSP”, © 1992 IEEE, Publ. No. 0-7803-0246-X/92, pp. 30.3.1-30.6.4.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00045">
<othercit>Fortes, Jose, et al., “Systolic arrays, a survey of seven projects”, © 1987 IEEE, Publ. No. 0018-9162/87/0700-0091, pp. 91-103.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00046">
<othercit>Gokhale, M., et al., “Processing in Memory: The Terasys Massively Parallel PIM Array” © Apr. 1995, IEEE, pp. 23-31.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00047">
<othercit>Gunther, Bernard, et al., “Assessing Document Relevance with Run-Time Reconfigurable Machines”, © 1996 IEEE, Publ. No. 0-8186-7548-9/96, pp. 10-17.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00048">
<othercit>Hagiwara, Hiroshi, et al., “A dynamically microprogrammalbe computer with low-level parallelism”, © 1980 IEEE, Publ. No. 0018-9340/80/07000-0577, pp. 577-594.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00049">
<othercit>Hartenstein, R. W., et al. “A General Approach in System Design Integrating Reconfigurable Accelerators,” http:xputers.informatik.uni-kl.de/papers/paper026-1.html, IEEE 1996 Conference, Austin, TX, Oct. 9-11, 1996.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00050">
<othercit>Hartenstein, Reiner, et al., “A reconfigurable data-driven ALU for Xputers”, © 1994 IEEE, Publ. No. 0-8186-5490-2/94, pp. 139-146.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00051">
<othercit>Hauser, John, et al.: “GARP: a MIPS processor with a reconfigurable co-processor”, © 1997 IEEE, Publ. No. 0-08186-8159-4/97, pp. 12-21.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00052">
<othercit>Hayes, John, et al., “A microprocessor-based hypercube, supercomputer”, © 1986 IEEE, Publ. No. 0272-1732/86/1000-0006, pp. 6-17.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00053">
<othercit>Herpel, H. -J., et al., “A Reconfigurable Computer for Embedded Control Applications”, © 1993 IEEE, Publ. No. 0-8186-3890-7/93, pp. 111-120.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00054">
<othercit>Hogl, H., et al., “Enable++: A second generation FPGA processor”, © 1995 IEEE, Publ. No. 0-8186-7086-X/95, pp. 45-53.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00055">
<othercit>King, William, et al., “Using MORRPH in an industrial machine vision system”. © 1996 IEEE, Publ. No. 08186-7548-9/96, pp. 18-26.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00056">
<othercit>Manohar, Swaminathan, et al., “A pragmatic approach to systolic design”, © 1998 IEEE, Publ. No. CH2603-9/88/0000/0463, pp. 463-472.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00057">
<othercit>Mauduit, Nicolas, et al., “Lneuro 1.0: a piece of hardware LEGO for building neural network systems,” © 1992 IEEE, Publ. No. 1045-9227/92, pp. 414-422.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00058">
<othercit>Mirsky, Ethan A., “Coarse-Grain Reconfigurable Computing”, Massachusetts Institute of Technology, Jun. 1996.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00059">
<othercit>Mirsky, Ethan, et al., “MATRIX: A Reconfigurable Computing Architecture with Configurable Instruction Distribution and Deployable Resources”, © 1996 IEEE, Publ. No. 0-8186-7548-9/96, pp. 157-166.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00060">
<othercit>Morley, Robert E., Jr., et al., “A Massively Parallel Systolic Array Processor System”, © 1988 IEEE, Publ. No. CH2603-9/88/000/0217, pp. 217-225.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00061">
<othercit>Patterson, David, et al., “A case for intelligent DRAM: IRAM”, Hot Chips VIII, Aug. 19-20, 1996, pp. 75-94.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00062">
<othercit>Peterson, Janes, et al., “Scheduling and partitioning ANSI-C programs onto multi-FPGA CCM architectures”, © 1996 IEEE, Publ. No. 0-8186-7548-9/96, pp. 178-187.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00063">
<othercit>Schmit, Herman, “Incremental reconfiguration for pipelined applications,” © 1997 IEEE, Publ. No. 0-8186-8159-4/97, pp. 47-55.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00064">
<othercit>Sitkoff, Nathan, et al., “Implementing a Genetic Algorithm on a Parallel Custom Computing Machine”, Publ. No. 0-8186-7086-X/95, pp. 180-187.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00065">
<othercit>Stone, Harold, “A logic-in-memory computer”, © 1970 IEEE, IEEE Transactions on Computers, pp. 73-78, Jan. 1990.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00066">
<othercit>Tangen, Uwe, et al., “A parallel hardware evolvable computer POLYP extended abstract”, © 1997 IEE, Publ. No. 0-8186-8159/4/97, pp. 238-239.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00067">
<othercit>Thornburg, Mike, et al., “Transformable Computers”, © 1994 IEEE, Publ. No. 0-8186-5602-6/94, pp. 674-679.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00068">
<othercit>Tomita, Shinji, et al., “A computer low-level parallelism QA-2”, © 1986 IEEE, Publ. No. 0-0384-7495/86/0000/0280, pp. 280-289.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00069">
<othercit>Trimberger, Steve, et al., “A time-multiplexed FPGA”, © 1997 IEEE, Publ. No. 0-8186-8159-4/97, pp. 22-28.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00070">
<othercit>Ueda, Hirotada, et al., “A multiprocessor system utilizing enhanced DSP's for image processing”, © 1988 IEEE, Publ. No. CH2603-9/88/0000/0611, pp. 611-620.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00071">
<othercit>Villasenor, John, et al., “Configurable computing”, © 1997 Scientific American, Jun. 1997.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00072">
<othercit>Wang, Quiang, et al., “Automated field-programmable compute accelerator design using partial evaluation”, © 1997 IEEE, Publ. No. 0-8186-8159-4/97, pp. 145-154.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00073">
<othercit>W.H. Mangione-Smith and B.L. Hutchings. Configurable computing: The Road Ahead. In Proceedings of the Reconfigurable Architectures Workshop (RAW'97), pp. 81-96, 1997.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00074">
<othercit>Wirthlin, Michael, et al., “The Nano processor: a low resource reconfigurable processor”, © 1994 IEEE, Publ. No. 0-8186-5490-2/94, pp. 23-30.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00075">
<othercit>Wirthlin, Michael, et al., “A dynamic instruction set computer”, © 1995 IEEE, Publ. No. 0-8186-7086-X/95, pp. 99-107.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00076">
<othercit>Wittig, Ralph, et al., “One Chip: An FPGA processor with reconfigurable logic”, © 1996 IEEE, Publ. No. 0-8186-7548-9/96, pp. 126-135.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00077">
<othercit>Yamauchi, Tsukasa, et al., “SOP: A reconfigurable massively parallel system and its control-data flow based compiling method”, © 1996 IEEE, Publ. No. 0-8186-7548-9/96, pp. 148-156.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00078">
<othercit>“Information Brief”, PCI Bus Technology, © IBM Personal Computer Company, 1997, pp. 1-3.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00079">
<othercit>Yun, Hyun-Kyu and Silverman, H. F.; “A distributed memory MIMD multi-computer with reconfigurable custom computing capabilities”, Brown University, Dec. 10-13, 1997, pp. 7-13.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00080">
<othercit>Hoover, Chris and Hart, David; “San Diego Supercomputer Center, Timelogic and Sun Validate Ultra-Fast Hidden Markov Model Analysis-One DeCypher-accelerated Sun Fire 6800 beats 2,600 CPUs running Linux-”, San Diego Supercomputer Center, http://www.sdsc.edu/Press/02/050802<sub>—</sub>markovmodel.html, May 8, 2002, pp. 1-3.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00081">
<othercit>Caliga, David and Barker, David Peter, “Delivering Acceleration: The Potential for Increased HPC Application Performance Using Reconfigurable Logic”, SRC Computers, Inc., Nov. 2001, pp. 20.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00082">
<othercit>Hammes, J.P., Rinker, R. E., McClure, D. M., Böhm, A. P. W., Najjar, W. A., “The SA-C Compiler Dataflow Description”, Colorado State University, Jun. 21, 2001, pp. 1-25.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00083">
<othercit>Callahan, Timothy J. and Wawrzynek, John, “Adapting Software Pipelining for Reconfigurable Computing”, University of California at Berkeley, Nov. 17-19, 2000, pp. 8.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00084">
<othercit>Ratha, Nalini K., Jain, Anil K. and Rover, Diane T., “An FPGA-based Point Pattern Matching Processor with Application to Fingerprint Matching”, Michigan State University, Department of Computer Science, pp. 8.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00085">
<othercit>Dehon, André, “Comparing Computing Machines”, University of California at Berkeley, Proceedings of SPIE vol. 3526, Nov. 2-3, 1998, pp. 11.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00086">
<othercit>Vemuri, Ranga R. and Harr, Randolph E., “Configurable Computing: Technology and Applications”, University of Cincinnati and Synopsys Inc., IEEE, Apr. 2000, pp. 39-40.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00087">
<othercit>Dehon André, “The Density Advantage of Configurable Computing”, California Institute of Technology, IEEE, Apr. 2000. pp. 41-49.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00088">
<othercit>Haynes, Simon D., Stone, John, Cheung, Peter Y.K. and Luk, Wayne, “Video Image Processing with the Sonic Architecture”, Sony Broadcast &amp; Professional Europe, Imperial College, University of London, IEEE, Apr. 2000, pp. 50-57.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00089">
<othercit>Platzner , Marco, “Reconfigurable Accelerators for Combinatorial Problems”, Swiss Federal Institute of Technology (ETH) Zurich, IEEE, Apr. 2000, pp. 58-60.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00090">
<othercit>Callahan, Timothy J., Hauser, John R. and Wawrzynek, John, “The Garp Architecture and C Compiler”, University of California, Berkeley, IEEE, Apr. 2000. pp. 62-69.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00091">
<othercit>Goldsten, Seth Copen, Schmit, Herman, Budiu , Mihai, Cadambi, Srihari, Moe, Matt and Taylor, R. Reed, “PipeRench: A Reconfigurable Architecture and Compiler”, Carnegie Mellon University, IEEE, Apr. 2000, pp. 70-76.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00092">
<othercit>Muchnick, Steven S., “Advanced Compiler Design and Implementation”, Morgan Kaufmann Publishers, pp. 217.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00093">
<othercit>Hammes, Jeffrey P., Dissertation “Compiling SA-C To Reconfigurable Computing Systems”, Colorado State University, Department of Computer Science, Summer 2000, pp. 179.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00094">
<othercit>Automatic Target Recognition, Colorado State University &amp; USAF, http://www.cs.colostate.edu/cameron/applications.html, pp. 1-3.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00095">
<othercit>Chodowiec, Pawel, Khuon, Po, Gaj, Kris, Fast Implementations of Secret-Key Block Ciphers Using Mixed Inner- and Outer-Round Pipelining, George Mason University, Feb. 11-13, 2001, pp. 9.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
</references-cited>
<number-of-claims>18</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>717151</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>717158</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>717159</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>717155</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>717156</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>717157</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>36</number-of-drawing-sheets>
<number-of-figures>37</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20040088689</doc-number>
<kind>A1</kind>
<date>20040506</date>
</document-id>
</related-publication>
</us-related-documents>
<parties>
<applicants>
<applicant sequence="001" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Hammes</last-name>
<first-name>Jeffrey</first-name>
<address>
<city>Colorado Springs</city>
<state>CO</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
</applicants>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<last-name>Kubida</last-name>
<first-name>William J.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="02" rep-type="attorney">
<addressbook>
<last-name>Martensen</last-name>
<first-name>Michael C.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="03" rep-type="attorney">
<addressbook>
<orgname>Hogan &amp; Hartson LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</parties>
<assignees>
<assignee>
<addressbook>
<orgname>SRC Computers, Inc.</orgname>
<role>02</role>
<address>
<city>Colorado Springs</city>
<state>CO</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Thomson</last-name>
<first-name>William</first-name>
<department>2194</department>
</primary-examiner>
<assistant-examiner>
<last-name>Ho</last-name>
<first-name>Andy</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">An embodiment of the invention includes a method of forming a control-dataflow graph that includes separating a control flow graph into two or more basic blocks, and converting said two or more basic blocks into code blocks, where the code blocks are formed into the control-dataflow graph. Another embodiment of the invention includes a method of forming a control-dataflow graph that includes separating a control flow graph into two or more basic blocks, forming a lode node in at least one of said basic blocks, forming a store node in at least one of said code blocks, inserting a delay node in at least one of said code blocks, segregating external hardware logic modules from said control flow graph, and converting said two or more basic blocks into code blocks, wherein the code blocks are formed into the control-dataflow graph.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="178.05mm" wi="168.40mm" file="US07299458-20071120-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="201.59mm" wi="168.40mm" file="US07299458-20071120-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="251.12mm" wi="171.03mm" file="US07299458-20071120-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="216.83mm" wi="180.59mm" orientation="landscape" file="US07299458-20071120-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="242.40mm" wi="178.73mm" orientation="landscape" file="US07299458-20071120-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="257.73mm" wi="177.63mm" file="US07299458-20071120-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="254.00mm" wi="95.33mm" orientation="landscape" file="US07299458-20071120-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="128.10mm" wi="159.34mm" orientation="landscape" file="US07299458-20071120-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="136.31mm" wi="93.81mm" file="US07299458-20071120-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="252.56mm" wi="148.25mm" file="US07299458-20071120-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="253.75mm" wi="162.64mm" file="US07299458-20071120-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="172.72mm" wi="137.33mm" file="US07299458-20071120-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="262.72mm" wi="176.53mm" file="US07299458-20071120-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00013" num="00013">
<img id="EMI-D00013" he="258.57mm" wi="180.09mm" file="US07299458-20071120-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00014" num="00014">
<img id="EMI-D00014" he="154.43mm" wi="118.28mm" file="US07299458-20071120-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00015" num="00015">
<img id="EMI-D00015" he="222.33mm" wi="133.60mm" orientation="landscape" file="US07299458-20071120-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00016" num="00016">
<img id="EMI-D00016" he="247.73mm" wi="135.81mm" orientation="landscape" file="US07299458-20071120-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00017" num="00017">
<img id="EMI-D00017" he="248.67mm" wi="120.90mm" orientation="landscape" file="US07299458-20071120-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00018" num="00018">
<img id="EMI-D00018" he="199.64mm" wi="107.87mm" file="US07299458-20071120-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00019" num="00019">
<img id="EMI-D00019" he="218.86mm" wi="176.19mm" file="US07299458-20071120-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00020" num="00020">
<img id="EMI-D00020" he="262.47mm" wi="171.11mm" orientation="landscape" file="US07299458-20071120-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00021" num="00021">
<img id="EMI-D00021" he="253.66mm" wi="175.18mm" orientation="landscape" file="US07299458-20071120-D00021.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00022" num="00022">
<img id="EMI-D00022" he="249.94mm" wi="178.65mm" orientation="landscape" file="US07299458-20071120-D00022.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00023" num="00023">
<img id="EMI-D00023" he="173.14mm" wi="165.86mm" orientation="landscape" file="US07299458-20071120-D00023.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00024" num="00024">
<img id="EMI-D00024" he="129.29mm" wi="159.00mm" orientation="landscape" file="US07299458-20071120-D00024.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00025" num="00025">
<img id="EMI-D00025" he="254.68mm" wi="167.05mm" orientation="landscape" file="US07299458-20071120-D00025.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00026" num="00026">
<img id="EMI-D00026" he="229.53mm" wi="123.02mm" orientation="landscape" file="US07299458-20071120-D00026.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00027" num="00027">
<img id="EMI-D00027" he="259.25mm" wi="182.80mm" orientation="landscape" file="US07299458-20071120-D00027.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00028" num="00028">
<img id="EMI-D00028" he="259.00mm" wi="189.48mm" orientation="landscape" file="US07299458-20071120-D00028.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00029" num="00029">
<img id="EMI-D00029" he="207.09mm" wi="166.37mm" file="US07299458-20071120-D00029.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00030" num="00030">
<img id="EMI-D00030" he="265.77mm" wi="179.32mm" file="US07299458-20071120-D00030.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00031" num="00031">
<img id="EMI-D00031" he="211.58mm" wi="170.18mm" file="US07299458-20071120-D00031.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00032" num="00032">
<img id="EMI-D00032" he="264.92mm" wi="184.15mm" file="US07299458-20071120-D00032.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00033" num="00033">
<img id="EMI-D00033" he="255.19mm" wi="181.02mm" orientation="landscape" file="US07299458-20071120-D00033.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00034" num="00034">
<img id="EMI-D00034" he="251.46mm" wi="182.63mm" orientation="landscape" file="US07299458-20071120-D00034.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00035" num="00035">
<img id="EMI-D00035" he="260.60mm" wi="181.44mm" file="US07299458-20071120-D00035.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00036" num="00036">
<img id="EMI-D00036" he="242.32mm" wi="178.48mm" file="US07299458-20071120-D00036.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">COPYRIGHT NOTICE/PERMISSION</heading>
<p id="p-0002" num="0001">A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document of the patent disclosure as it appears in the United States Patent and Trademark Office patent file or records, but otherwise, reserves all copyright rights whatsoever. The following notice applies to the software and data and described below, inclusive of the drawing figures where applicable: Copyright © 2002, SRC Computers, Inc.</p>
<heading id="h-0002" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0003" num="0002">1. Field of the Invention</p>
<p id="p-0004" num="0003">The present invention relates, in general, to adapting a high-level language program to operate in a hybrid reconfigurable hardware-instruction processor computing environment. More specifically, the invention relates to converting a high level language program into a unified executable that can run on a hybrid reconfigurable hardware-instruction processor computer.</p>
<p id="p-0005" num="0004">2. Background</p>
<p id="p-0006" num="0005">As instruction processors continue to increase rapidly in processing power, they are used more often to do computationally intensive calculations that were once exclusively done by supercomputers. However, there are still computationally intensive tasks, including, for example, compute-intensive image processing and hydrodynamic simulations that remain impractical to do on modem instruction processors.</p>
<p id="p-0007" num="0006">Reconfigurable computing is a technology receiving increased interest in the computing arts. Traditional general purpose computing is characterized by computer code executed serially on one or more general purpose processors. Reconfigurable computing is characterized by programming reconfigurable hardware, such as Field Programmable Gate Arrays (FPGAs) to execute logic routines.</p>
<p id="p-0008" num="0007">Reconfigurable computing offers significant performance advances in computation-intensive processing. For example, the reconfigurable hardware may be programmed with a logic configuration that has more parallelism and pipelining characteristics than a conventional instruction processor. Also, the reconfigurable hardware may be programmed with a custom logic configuration that is very efficient for executing the tasks assigned by the program. Furthermore, dividing a program's processing requirements between the instruction processor and the reconfigurable hardware may increase the overall processing power of the computer.</p>
<p id="p-0009" num="0008">Hybrid computing platforms have been developed that include both general-purpose processor(s) and reconfigurable hardware. An exemplary hybrid-computing platform is the SRC-6E commercially available from SRC Computers, Inc., in Colorado Springs, Colo., USA. The SRC-6E system architecture includes multiple general-purpose instruction processors executing a standard operating system, e.g., Linux. Attached to the general-purpose instruction processors are specially configured Multi-Adaptive Processors (MAPs).</p>
<p id="p-0010" num="0009">Unfortunately, an important stumbling block for users who may wish to use reconfigurable computing is the difficulty of programming the reconfigurable hardware. Conventional methods of programming reconfigurable hardware included the use of hardware description languages (HDLs); low-level languages that require digital circuit expertise as well as explicit handling of timing. Thus, there remains a need for processes that can take a program written in a high level language and convert it into code that can be executed on a hybrid reconfigurable hardware-instruction processor computer with minimal modifications to the original program.</p>
<heading id="h-0003" level="1">SUMMARY</heading>
<p id="p-0011" num="0010">One embodiment of the invention includes a method of converting high-level language source code into a unified executable comprising: generating an object file from a reconfigurable hardware portion of the high-level language source code, and integrating the object file into the unified executable.</p>
<p id="p-0012" num="0011">Another embodiment of the invention includes a method of forming a unified executable comprising: converting a high level language program into a control flow graph representation, converting the control flow graph representation into a control-data flow graph representation, partitioning the control-data flow graph into a instruction processor portion and a reconfigurable hardware portion, converting the reconfigurable hardware portion of the control-data flow graph into a hardware definition language portion and the instruction processor portion into a instruction processor object file, converting the hardware definition language portion into a reconfigurable hardware bitstream, converting the reconfigurable hardware bitstream into a bitstream object file that is readable by a instruction processor, and integrating the bitstream object file with the instruction processor object file to form the unified executable.</p>
<p id="p-0013" num="0012">Another embodiment of the invention includes a system for forming a unified executable comprising a partitioner to partition control-dataflow graph representations into a reconfigurable hardware portion and a instruction processor portion.</p>
<p id="p-0014" num="0013">Another embodiment of the invention includes a system for forming a unified executable that is executable on a hybrid reconfigurable hardware-instruction processor computer, said system comprising: a high-level language converter to convert a high-level language into control flow graph representations, a control flow graph to control-dataflow graph converter to convert the control flow graph representations into control-dataflow graph representations, a partitioner to partition the control-dataflow graph representations into a reconfigurable hardware portion and a instruction processor portion, a control-dataflow graph to hardware definition language converter to convert the reconfigurable hardware portion of the control-dataflow graph representations to a hardware definition language file, a hardware definition language to bitstream converter to convert the hardware definition language file to a bitstream file, a bitstream to object file converter to convert the bitstream file into a bitstream object file, and a linker to integrate the bitstream object file into the unified executable.</p>
<p id="p-0015" num="0014">Another embodiment of the invention includes a computer program product comprising: a computer usable medium having computer readable program code embodied therein for causing a formation of a unified executable, the computer readable program code comprising, computer readable program code for causing a computer to convert a high level language source code into a control flow graph representation, computer readable program code for causing the computer to convert the control flow graph representation into a control-data flow graph representation, computer readable program code for causing the computer to partition the control-data flow graph into a instruction processor portion and a reconfigurable hardware portion, computer readable program code for causing the computer to convert the reconfigurable hardware portion of the control-data flow graph into a hardware definition language portion and the instruction processor portion into a instruction processor object file, computer readable program code for causing the computer to convert the hardware definition language portion into a reconfigurable hardware bitstream, computer readable program code for causing the computer to convert the reconfigurable hardware bitstream into a bitstream object file that is readable by a instruction processor, and computer readable program code for causing the computer to integrate the bitstream object file with the instruction processor object file to form the unified executable.</p>
<p id="p-0016" num="0015">Additional novel features shall be set forth in part in the description that follows, and in part will become apparent to those skilled in the art upon examination of the following specification or may be learned by the practice of the invention. The features and advantages of the invention may be realized and attained by means of the instrumentalities, combinations, and methods particularly pointed out in the appended claims.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 1</figref> shows a system for converting a high level language program into a unified executable according to an embodiment of the invention;</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 2</figref> shows a flowchart for converting a high level language program into a unified executable according to an embodiment of the invention;</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 3</figref> shows a flowchart for converting high-level language (HLL) source code to a hardware logic executable according to an embodiment of the invention;</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 4</figref> shows a flowchart for converting a instruction processor executable to a hardware logic executable according to an embodiment of the invention;</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 5</figref> shows a diagram for separating high-level language source according to an embodiment of the invention;</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 6</figref> shows a flowchart for converting high-level language source code into control flow graph representations according to an embodiment of the invention;</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 7</figref> shows a portion of a control flow graph according to an embodiment of the invention;</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 8</figref> shows a dataflow graph according to an embodiment of the invention;</p>
<p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. 9</figref> shows an example of a hybrid CFG-DFG segment according to an embodiment of the invention;</p>
<p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. 10</figref> shows an example of a dataflow graph with a conditional according to an embodiment of the invention;</p>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. 11</figref> shows an example of concurrent code blocks according to an embodiment of the invention;</p>
<p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. 12</figref> shows a flowchart for converting a CFG representation to a hybrid control-dataflow graph according to an embodiment of the invention;</p>
<p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. 13</figref> shows another example of a dataflow graph according to an embodiment of the invention;</p>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. 14</figref> shows an example of parameter versus local variable stores according to an embodiment of the invention;</p>
<p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. 15</figref> shows an example of a graphical interpretation of an op-code sequence;</p>
<p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. 16</figref> shows an example of DFG fragments built up from the op-code sequence in <figref idref="DRAWINGS">FIG. 10</figref> according to an embodiment of the invention;</p>
<p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. 17</figref> shows an example of DFG fragments after removal of scalar param indirection according to an embodiment of the invention;</p>
<p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. 18</figref> shows an example of a DFG block code according to an embodiment of the invention;</p>
<p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. 19</figref> shows an example of three array references used with embodiments of the invention;</p>
<p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. 20</figref> shows op-code structures of a subroutine call and the corresponding block code according to an embodiment of the invention;</p>
<p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. 21</figref> shows op-code structures of a function call and the corresponding block code according to an embodiment of the invention;</p>
<p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. 22</figref> shows op-code structures of a branch and the corresponding block code according to an embodiment of the invention;</p>
<p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. 23</figref> shows a portion of a CFG representation with basic blocks and logic added to a center block to handle incoming and outgoing flow control according to an embodiment of the invention;</p>
<p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. 24</figref> shows basic blocks with selector inputs tied to the blocks' OR nodes according to an embodiment of the invention;</p>
<p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. 25A</figref> shows examples of op-code subtrees used with embodiments of the invention;</p>
<p id="p-0042" num="0041"><figref idref="DRAWINGS">FIG. 25B</figref> shows more examples of op-code subtrees used with embodiments of the invention;</p>
<p id="p-0043" num="0042"><figref idref="DRAWINGS">FIG. 26</figref> shows an example DGF for a loop used with embodiments of the invention;</p>
<p id="p-0044" num="0043"><figref idref="DRAWINGS">FIG. 27</figref> shows an example of a pipelined DFG without delays according to an embodiment of the invention;</p>
<p id="p-0045" num="0044"><figref idref="DRAWINGS">FIG. 28</figref> shows a portion of a code block after merging according to an embodiment of the invention;</p>
<p id="p-0046" num="0045"><figref idref="DRAWINGS">FIG. 29</figref> shows a flowchart for partitioning CFG-DFG representations into a reconfigurable hardware portion and a instruction processor portion according to an embodiment of the invention;</p>
<p id="p-0047" num="0046"><figref idref="DRAWINGS">FIG. 30</figref> shows a flowchart for forming a unified executable according to an embodiment of the invention;</p>
<p id="p-0048" num="0047"><figref idref="DRAWINGS">FIG. 31</figref> shows an example MAP emulator system according to an embodiment of the invention;</p>
<p id="p-0049" num="0048"><figref idref="DRAWINGS">FIG. 32</figref> shows another example of a MAP emulator system according to an embodiment of the invention;</p>
<p id="p-0050" num="0049"><figref idref="DRAWINGS">FIG. 33</figref> shows a flowchart of a dataflow simulator according to an embodiment of the invention; and</p>
<p id="p-0051" num="0050"><figref idref="DRAWINGS">FIG. 34</figref> shows an example of token flow in a dataflow simulation according to an embodiment of the invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DETAILED DESCRIPTION</heading>
<heading id="h-0006" level="1">System Overview</heading>
<p id="p-0052" num="0051">Referring now to <figref idref="DRAWINGS">FIG. 1</figref>, an embodiment of a hybrid reconfigurable hardware-instruction processor system for converting a program written in a high level programming language into a unified executable <b>100</b> is shown. In an embodiment, the reconfigurable hardware portion of system <b>100</b> may include multi-adaptive processors (MAPs) that may integrate field programmable gate array (FPGA) reconfigurable circuitry with logic to control the FPGAs and communicate with the instruction processor portion of system <b>100</b>. In another embodiment, electronic communication between the reconfigurable hardware and instruction processors in system <b>100</b> may include using a switch/network adaptor port and/or a switch for linking multiple MAPs to instruction processors.</p>
<p id="p-0053" num="0052">An embodiment of system <b>100</b> includes a MAP Programming Environment that includes MAPs, instruction processors, a high level language (HLL) file to unified executable converter <b>104</b>, support hardware logic modules <b>118</b>, user hardware logic modules <b>120</b> and a runtime library <b>122</b> among other components. In an embodiment of system <b>100</b>, an HLL source code file <b>102</b> is input into converter <b>104</b>. The HLL source code file <b>102</b> may be written in a conventional high level language such as, for example, C, C++, FORTRAN, COBOL, BASIC, PASCAL, and Java among others.</p>
<p id="p-0054" num="0053">The HLL file <b>102</b> may be input into converter <b>104</b> where it may be converted to a unified executable <b>124</b> through the components of the converter <b>104</b>. An embodiment of converter <b>104</b> may include an HLL converter <b>106</b>, a CFG to CFG-DFG converter <b>108</b>, a partitioner <b>110</b>, a CFG-DFG to HDL converter <b>112</b>, an HDL to bitstream converter <b>114</b> and a linker <b>116</b>, among other components.</p>
<p id="p-0055" num="0054">The converter <b>104</b> may include an HLL converter <b>106</b> that converts the high level language file into control flow graph (CFG) representations. In one embodiment the HLL converter <b>106</b> includes a software module including logic instructions for initiating a traditional compilation by reading the high level language source code, parsing the source code, converting the code into an internal representation and a symbol table. HLL converter <b>106</b> may also include logic instructions for performing syntactic and semantic checking of the source code, and for generating appropriate diagnostic messages in response to errors in the source code.</p>
<p id="p-0056" num="0055">Also, HLL converter <b>106</b> may include logic instructions for optimization of the internal representation of the source code. Among other things, HLL converter <b>106</b> outputs a CFG representation. The CFG representation can be further processed either by the instruction processor compiler to produce instruction processor sequences, or passed on to another software module such as CFG to CFG-DFG converter <b>108</b> for data flow analysis and generation of logic for a reconfigurable processor (e.g., a MAP).</p>
<p id="p-0057" num="0056">In an embodiment, the CFG to CFG-DFG converter <b>108</b> may be a software module including logic instructions for receiving the CFG representation created by HLL converter <b>106</b> and converting a CFG representation to a control-data-flow graph representation. The control-data-flow graph may be used throughout the remainder of the compiler phases. The CFG to CFG-DFG converter <b>108</b> may also optimize the degree of parallelism in the compiled code. The functions of the CFG to CFG-DFG converter <b>108</b> may include: creating a control-data-flow graph from a CFG representation passed by HLL converter <b>106</b> that may be used by the remaining components of converter <b>104</b>, converting basic blocks to a code block in the data flow graph, converting input/output scalars, converting input/output arrays, dealing with scalar references in code blocks, dealing with array references in code blocks, constructing loop control, dealing with pointer references, dealing with calls to instruction processor code, dealing with system calls to instruction processor OS, expanding intrinsic function calls, expanding external function calls, optimizing loops, optimizing multi-threads, optimizing data path and logic unit data widths, and optimizing structure including the elimination of unneeded structure, among other functions.</p>
<p id="p-0058" num="0057">The partitioner <b>110</b> may be a software module including logic instructions for sizing the logic to fit in the available resources of the hybrid computing system. The partitioner <b>110</b> may receive as an input the control-data-flow graph generated by CFG to CFG-DFG converter <b>108</b> and may map the control-data-flow graph onto the available resources such that performance is optimized.</p>
<p id="p-0059" num="0058">In an exemplary embodiment, partitioner <b>110</b> may receive as input the following information: logic unit sizes from hardware logic module information file, chip sizes from resource file, interface size and speed from resource file, data storage performance and sizes from resource file, partitioning syntax input from the programmer, such as pragmas or directives, profiling information from control-dataflow graph (CFG-DFG) emulator and profiling information from the instruction processor profiling tool.</p>
<p id="p-0060" num="0059">In an exemplary embodiment, the partitioner <b>110</b> may also include logic instructions for annotating the CFG-DFG with the above information and estimating performance parameters of sub-graphs based on execution in the instruction processor and the MAP. The partitioner <b>110</b> may further include logic instructions for assessing the sizing of the logic and allocating the logic based on, e.g., the resources of the integrated circuits and the MAP.</p>
<p id="p-0061" num="0060">The partitioner <b>110</b> may also include logic instructions for defining interface logic on the MAP and assigning MAP proxy code to the instruction processor. The MAP proxy provides a target for the instruction processor code that transitions to a thread of control on the MAP. The MAP proxy accepts a call, and initiates any parameter passing required to the MAP. The MAP proxy may also receives requests from the MAP.</p>
<p id="p-0062" num="0061">The output of the partitioner <b>110</b> may include a CFG-DFG that may be implemented as logic in the MAP, and a CFG-DFG that may be implemented on the instruction processor.</p>
<p id="p-0063" num="0062">CFG-DFG to HDL converter <b>112</b> may be a software module that includes logic instructions for converting the CFG-DFG into a hardware definition of the physical logic that will be instantiated in the reconfigurable processor(s) that in the MAP(s). CFGD-DFG to HDL converter <b>112</b> receives as an input a CFG-DFG file from CFG to CFG-DFG converter <b>108</b> and converts the CFG-DFG file to an internal representation. The hardware logic module information file is also read to provide node input, output and latency information. Nodes and paths between nodes are checked for compatibility and bit width consistency.</p>
<p id="p-0064" num="0063">Some nodes are inlined rather than instantiating the node. Inlining refers to generating the hardware definition rather than referring to the definition as a instantiated logic module. All of the nodes in the CFG-DFG are checked for proper node dependency and consistent data flow. Each node is then instantiated, and then all wiring connecting the nodes is declared. An output file containing the hardware definition language is created. The output file may be written in a hardware definition language such as Verilog or EDIF.</p>
<p id="p-0065" num="0064">The HDL to bitstream converter <b>114</b> may include conventional synthesis tools for compiling Verilog to EDIF, and Place and Route tools for converting EDIF files to a bitstream that is loadable into MAP may be used to process the output of the CFG-DFG to HDL converter <b>112</b>.</p>
<p id="p-0066" num="0065">The linker <b>116</b> may be a software module that includes logic instructions for taking object files including bitstream object files, instruction processor files and other object files and integrating them to form the unified executable <b>124</b>.</p>
<p id="p-0067" num="0066">In another embodiment, system <b>100</b> may include a conventional instruction processor compiler (not shown) that may be used to compile the portion of the high level language that is not converted to logic to be run in the MAP.</p>
<p id="p-0068" num="0067">System <b>100</b> may also include a bitstream configurator (not shown) that may include a software module that includes logic instructions for creating a unified executable file. The bitstream file is encapsulated as a compiled C routine that can be incorporated into an executable file using a compiler and standard linker. The executable containing the application instruction processor instructions, the MAP logic bitstream, as well as any required library code may be referred to as the unified executable.</p>
<p id="p-0069" num="0068">System <b>100</b> may also include a Binary Translator (not shown), which is a companion tool to the converter <b>104</b>. Converter <b>104</b> may take high-level language source code as input and create a CFG representation and a unified executable. The Binary Translator may take an executable file and covert it into a CFG representation, and provides that to a secondary input to converter <b>104</b>, bypassing the need for source code.</p>
<p id="p-0070" num="0069">System <b>100</b> also includes modules <b>118</b> and <b>120</b> and library <b>122</b> that may provide a run-time environment for the HLL to unified executable conversion process. The run-time environment may include library routines that are included in the instruction processor portion of each application. These library routines provide support services for the MAP. This includes resource allocation and deallocation, communication between instruction processor and MAP, debugging, and performance analysis. At least three distinct environments may be supported by the run-time routines: 1) execution with MAP hardware, 2) execution with emulated MAP and dataflow graph emulation, 3) execution with emulated MAP and simulated user logic.</p>
<heading id="h-0007" level="1">Method Overview</heading>
<p id="p-0071" num="0070">Referring now to <figref idref="DRAWINGS">FIG. 2</figref>, a method of converting a high level language (HLL) into a unified executable <b>200</b> according to an embodiment of the invention is shown. The method <b>200</b> may start with the conversion of an HLL program into a control flow graph (CFG) at step <b>202</b>. In an embodiment, conversion <b>202</b> of the HLL program to a specified CFG format may be performed by a conventional HLL compiler. Conversion <b>202</b> of the HLL program to CFG may include using a compiler to parse the HLL program into CFG representations and to generate instruction code that is executable on a instruction processor. The instruction code may then be written to object files that may be linked together with a linker-loader that resolves addresses.</p>
<p id="p-0072" num="0071">The programming language used in the HLL program may be a conventional high level language such as C, C++, FORTRAN, COBOL, BASIC, Java and PASCAL, among others. The HLL program may include a variety of data entities including scalars, arrays and user-specifieed aggregates, among others, and their associated operators. The HLL program may also include function calls, subroutines, loops, and conditionals, among other operations.</p>
<p id="p-0073" num="0072">In an embodiment of the invention, the next step of method <b>200</b> may be the conversion of the CFG representations into hybrid control-dataflow graph representations (CFG-DFG) at step <b>204</b>. Briefly, this conversion <b>204</b> may include separating the CFG representations into its component basic blocks, adding load and store data to the top and bottom of the basic blocks, and converting the basic blocks into code blocks of CFG-DFG representations. A more detailed description of conversion <b>204</b> is provided below.</p>
<p id="p-0074" num="0073">The next step of method <b>200</b> may be the partitioning of the CFG-DFG representations into a reconfigurable hardware portion and a instruction processor portion, at step <b>206</b>. In one embodiment, the CFG-DFG representations may be input into a partitioner program that may scan the data and divide it into a portion for the reconfigurable hardware and a portion for the instruction processor. In another embodiment, the partitioner program may receive instructions from a user inserted partitioning syntax, for example a C pragma or a compiler directive, that guides how the CFG-DFG code is partitioned into reconfigurable hardware and instruction processor portions. For example, a pragma may instruct the partitioner program to put a particular loop operation in the instruction processor portion of the partitioned CFG-DFG representations. The pragmas may be included in the original HLL program source code or may be provided directly to the partitioner program.</p>
<p id="p-0075" num="0074">At this point in this embodiment of method <b>200</b>, the partitioned CFG-DFG representations from the partitioning step <b>206</b> may be split into separate process steps. The instruction processor portion from partition step <b>106</b> may be converted into a instruction processor object file <b>208</b>. In one embodiment, the instruction processor portion of the hybrid CFG-DFG representations is converted back into CFG representations and then may be converted into instruction code that is executable on a instruction processor. The instruction code may then be written to object files that may be linked together with a linker-loader that resolves addresses. In another embodiment, the instruction processor portion of the hybrid CFG-DFG representations may be identified with portions of the original CFG representations and those portions of the original CFG representations may be converted to object files.</p>
<p id="p-0076" num="0075">Turning now to the reconfigurable hardware portion of the CFG-DFG representations from partitioning step <b>206</b>, this portion may be converted from CFG-DFG representations into a hardware definition language (HDL) file <b>210</b>. The hardware definition language may include conventional HDLs such as Verilog and EDIF among others.</p>
<p id="p-0077" num="0076">The hardware definition language file may then be converted into a bitstream data file <b>212</b> that can be loaded into individual reconfigurable circuits in the reconfigurable hardware. For example, the bitstream data files may be loaded into field programmable gate arrays (FPGAs) in the Multi-Adaptive Processors (MAPs) used in the hybrid instruction processor-reconfigurable hardware computers of the present invention. In an embodiment, a Place &amp; Route program may be used to perform the HDL to bitstream conversion <b>212</b>. Based on the HDL files, the Place &amp; Route program may instantiate and interconnect hardware logic modules for the reconfigurable hardware. The Place &amp; Route program may also direct where modules may physically go and how they are coupled to each other in the reconfigurable hardware.</p>
<p id="p-0078" num="0077">In an embodiment of method <b>200</b>, after the bitstream files are created, they may be converted into bitstream object files at step <b>214</b>. The bitstream to object file conversion <b>214</b> may include converting the bitstream data into high-level language source code (e.g., placing the bitstream in a C structure) and converting the high-level language file into an object file that may be readable by a instruction processor.</p>
<p id="p-0079" num="0078">In an embodiment of method <b>200</b>, after converting the bitstream files into bitstream object files at step <b>214</b> and converting a instruction processor portion of the CFG-DFG representations into a instruction processor object file at step <b>208</b>, the object files may be collected at step <b>216</b>. Additional object files may also be collected with the bitstream object files and the instruction processor object files. For example, additional object files may come from previous iterations of method <b>200</b>. Additional object files may also be taken from previous instruction processor compilations as well as from object libraries.</p>
<p id="p-0080" num="0079">Once the bitstream object files, microprocessor object instruction processorfiles and any additional object files are collected, they may be linked together <b>218</b> to form a unified executable <b>220</b>. In an embodiment, linking the object files <b>218</b> may be done by a linker program. The unified executable <b>220</b> may be readable by a instruction processor that may execute the unified executable <b>220</b> to configure a hybrid reconfigurable hardware-mircoprocessor computer to run the HLL program.</p>
<p id="p-0081" num="0080">Referring now to <figref idref="DRAWINGS">FIG. 3</figref>, a flowchart of a method of converting high-level language source code to a hardware logic executable according to an embodiment of the invention is shown. The method may start with the analysis of high-level language (HLL) source code <b>302</b> being processed in a partition step <b>304</b>. If a partition is found in the HLL source code <b>302</b>, then the code may be divided up and converted into control flow graph (CFG) representations in steps <b>306</b> and <b>308</b>.</p>
<p id="p-0082" num="0081">In one embodiment, after the partitioned portion of the HLL source code <b>302</b> is converted to CFG representations at step <b>308</b>, the CFG representations may be used to generate a MAP proxy <b>322</b> (see details of MAP proxy in High-Level Language Converter Section), or be converted into CFG-DFG representations for hardware logic at step <b>316</b>. For a portion of the CFG representations that results in the generation of a MAP proxy <b>322</b>, that portion may then be converted into binary instruction processor code at step <b>324</b>, then linked with all other binary files at step <b>326</b> to become part of a hardware logic executable <b>328</b>. For a portion of the CFG representations converted to CFG-DFG representations for hardware logic at step <b>316</b>, the CFG-DFG representations may be converted into a hardware definition logic (HDL) code, such as Verilog code at step <b>318</b>, then converted to hardware logic binary at step <b>320</b> and linked with all other binary files at step <b>326</b> to become part of the hardware executable <b>328</b>. The remaining HLL source code <b>302</b> that is not part of the partitioned source code may be converted into CFG representations at step <b>306</b>. Then the CFG representations may be converted into instruction processor binary code at step <b>324</b> before being linked with all other binary files <b>326</b> to become part of a hardware logic executable <b>328</b> (i.e., unified executable).</p>
<p id="p-0083" num="0082">For HLL source code <b>302</b> that does not have partitions, the entire code may be converted into CFG representations at step <b>310</b> and may be partitioned into a reconfigurable hardware portion and a instruction processor portion at step <b>312</b>. The instruction processor portion may be converted into instruction processor binary code at step <b>324</b> and ultimately be formed into hardware logic executable <b>328</b>. The reconfigurable hardware portion may be partitioned and that portion generate a MAP proxy at step <b>322</b> while that same portion is converted into CFG-DFG representations. This partitioned portion may ultimately become part of hardware logic executable <b>328</b>.</p>
<p id="p-0084" num="0083">Referring now to <figref idref="DRAWINGS">FIG. 4</figref>, a flowchart of a method <b>400</b> of operation for a binary translator according to an embodiment of the invention is shown. In one embodiment, instruction processor executable <b>402</b> may be edited at step <b>404</b> so that it may become part of the hardware logic executable <b>426</b>. In another embodiment, the instruction processor executable <b>402</b> may be translated into CFG representations at step <b>406</b>.</p>
<p id="p-0085" num="0084">After the instruction processor executable <b>402</b> is translated into CFG representations at step <b>406</b>, and coverted into a CFG-DFG representation, it may then be partitioned at step <b>408</b> into a reconfigurable hardware portion and a instruction processor portion. The instruction processor portion and any remaining portions of the CFG representations <b>420</b> may then converted into instruction processor binary code at step <b>422</b>. The instruction processor binary code may then be linked with all other binary files at step <b>424</b> to become part of a hardware logic executable <b>426</b>.</p>
<p id="p-0086" num="0085">The reconfigurable hardware portion may be partitioned and that portion causes generation of a MAP proxy at step <b>416</b> while that same portion is converted at step <b>414</b> into hardware definition language (HDL) code (e.g., Verilog), which then may be converted to hardware logic binary at step <b>418</b>. The hardware logic binary may be linked with all other binary files at step <b>424</b> to become part of the hardware logic executable <b>426</b>.</p>
<p id="p-0087" num="0086">The MAP proxy generated by the partitioned portion may be converted into instruction processor binary code at step <b>422</b> and then linked with all other binary files at step <b>424</b> to become part of the hardware logic executable <b>426</b>.</p>
<p id="p-0088" num="0087"><figref idref="DRAWINGS">FIGS. 2 and 3</figref> illustrate method steps that may be used in the process of converting a HLL program into a unified executable or hardware logic executable according embodiments of the invention. <figref idref="DRAWINGS">FIG. 4</figref> illustrates method steps that may be used in the process of converting a instruction processor executable file into a hardware logic executable. It should be appreciated that additional steps and alternate sequences for the steps shown are contemplated in additional embodiments of the invention.</p>
<heading id="h-0008" level="1">Map Execution Selector</heading>
<p id="p-0089" num="0088">In an exemplary embodiment, a method is provided for identifying regions of source code written in a high-level language that may be segregated and targeted for hardware logic, while other portions of the code may be compiled for execution on a conventional processor. An exemplary method uses special bracketing syntax showing which region(s) of code are to be executed on the hardware logic and provides scoping information for variables contained within the bracketed region. This information may be used to build the communication and data movement routines that facilitate execution of region(s) identified to execute on the hardware logic without further user intervention.</p>
<p id="p-0090" num="0089">Many high-level programming languages include language constructs which may be used to specify region(s) of user code that may be compiled and executed on hardware logic, rather than a general purpose processor. For example, in the Fortran language the syntax “!dir$” may be used, and in C the syntax “#pragma” may be used. Using these constructs, the syntax to bracket the user code contains either the start or stop identifier and the scoping rules for the variables contained within the bracketed code, and additional syntax for copying out privately computed data.</p>
<p id="p-0091" num="0090">For example, consider the following small Fortran procedure:</p>
<p id="p-0092" num="0091">
<tables id="TABLE-US-00001" num="00001">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="offset" colwidth="49pt" align="left"/>
<colspec colname="1" colwidth="14pt" align="left"/>
<colspec colname="2" colwidth="154pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="2" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry/>
<entry>program main</entry>
</row>
<row>
<entry/>
<entry>!</entry>
</row>
<row>
<entry/>
<entry/>
<entry>parameter (n=1000)</entry>
</row>
<row>
<entry/>
<entry/>
<entry>integer(kind=8) a(n), b(n), c(n)</entry>
</row>
<row>
<entry/>
<entry/>
<entry>integer (kind=8) cc</entry>
</row>
<row>
<entry/>
<entry>c</entry>
</row>
<row>
<entry/>
<entry/>
<entry>common / arrs/ a,b,c</entry>
</row>
<row>
<entry/>
<entry>c</entry>
</row>
<row>
<entry/>
<entry/>
<entry>call initialize (a, b, c)</entry>
</row>
<row>
<entry/>
<entry>c</entry>
</row>
<row>
<entry/>
<entry/>
<entry>do i = 1, n</entry>
</row>
<row>
<entry/>
<entry/>
<entry>cc = a(i) * b(i)</entry>
</row>
<row>
<entry/>
<entry/>
<entry>if (cc .le. 42) then</entry>
</row>
<row>
<entry/>
<entry/>
<entry>c(i) = cc</entry>
</row>
<row>
<entry/>
<entry/>
<entry>else</entry>
</row>
<row>
<entry/>
<entry/>
<entry>c(i) = a(i)</entry>
</row>
<row>
<entry/>
<entry/>
<entry>endif</entry>
</row>
<row>
<entry/>
<entry/>
<entry>end do</entry>
</row>
<row>
<entry/>
<entry>c</entry>
</row>
<row>
<entry/>
<entry/>
<entry>stop</entry>
</row>
<row>
<entry/>
<entry/>
<entry>end</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0093" num="0092">This code segment first declares three arrays (a, b, c) that will be used to hold data used in the computation. The arrays are declared in a common block, meaning their storage allocation will be in the instruction processor's memory and not a local stack space associated with the procedure. There is an external call to a procedure that can be assumed to initialize the data in the arrays. After that initialization call is a do-loop that contains the computation portion of this procedure.</p>
<p id="p-0094" num="0093">The portion of code that has been identified to execute on the hardware logic is determined to be the loop body enclosed by the do-loop construct. Using syntax that is recognized by the compiling system which will generate hardware logic, the Fortran code may be modified to resemble this:</p>
<p id="p-0095" num="0094">
<tables id="TABLE-US-00002" num="00002">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="63pt" align="left"/>
<colspec colname="1" colwidth="154pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>program main</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="49pt" align="left"/>
<colspec colname="1" colwidth="168pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>!</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="63pt" align="left"/>
<colspec colname="1" colwidth="154pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>parameter (n=1000)</entry>
</row>
<row>
<entry/>
<entry>integer(kind=8) a(n), b(n), c(n)</entry>
</row>
<row>
<entry/>
<entry>integer (kind=8) cc</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="49pt" align="left"/>
<colspec colname="1" colwidth="168pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>c</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="63pt" align="left"/>
<colspec colname="1" colwidth="154pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>common / arrs/ a,b,c</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="49pt" align="left"/>
<colspec colname="1" colwidth="168pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>c</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="63pt" align="left"/>
<colspec colname="1" colwidth="154pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>call initialize (a, b, c)</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="49pt" align="left"/>
<colspec colname="1" colwidth="168pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>c</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="63pt" align="left"/>
<colspec colname="1" colwidth="154pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>!dir$ start_MAP global (a,b,c,n)</entry>
</row>
<row>
<entry/>
<entry>!dir$! private( (i,cc)</entry>
</row>
<row>
<entry/>
<entry>do i = 1, n</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="77pt" align="left"/>
<colspec colname="1" colwidth="140pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>cc = a(i) * b(i)</entry>
</row>
<row>
<entry/>
<entry>if (cc .le. 42) then</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="91pt" align="left"/>
<colspec colname="1" colwidth="126pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>c(i) = cc</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="77pt" align="left"/>
<colspec colname="1" colwidth="140pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>else</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="91pt" align="left"/>
<colspec colname="1" colwidth="126pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>c(i) = a(i)</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="77pt" align="left"/>
<colspec colname="1" colwidth="140pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry> endif</entry>
</row>
<row>
<entry/>
<entry>end do</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="63pt" align="left"/>
<colspec colname="1" colwidth="154pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>!dir$ end_MAP</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="49pt" align="left"/>
<colspec colname="1" colwidth="168pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>c</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="63pt" align="left"/>
<colspec colname="1" colwidth="154pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>stop</entry>
</row>
<row>
<entry/>
<entry>end</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0096" num="0095">Here the do-loop has been bracketed with pair of directives that will provide the information needed by the compiling system. The compiling system processes this information to build both the procedure that will run on a general purpose processor and the subprogram that will execute on hardware logic.</p>
<p id="p-0097" num="0096">The conversion of this single Fortran procedure into separately compilable procedures may involve several compilation phases. In one phase, the compilation system processes the individual source files contained within the program, discarding from further reconfigurable hardware logic compilation source files that do not have syntax indicating that hardware compilation is desired. When the compilation systems encounters syntax indicating that reconfigurable hardware compilation is desired, the compiling system starts to build up the infrastructure needed to implement the compilation of this source file on both the instruction processor and the bracketed portion on the hardware logic. In addition to creating source files needed for the instruction processor compilation phase and the hardware logic compilation phase, the mechanisms used to allocate, reserve, and release the hardware logic resources are also generated.</p>
<p id="p-0098" num="0097">The bracketing syntax may include scoping information for all variables used within the bracketed region. This scoping information may be used by the compiling system to build the correct data movement statements and to ensure that the integrity of the program remains the same as it would be if it had been run entirely on the instruction processor. Scoping data and variables as “global” indicates to the compiling system that this data is persistent across the calling boundary between the instruction processor and the hardware logic. The mechanism that moves the data to the hardware logic and retrieves the data from the hardware logic may be built into the new subprograms being created by the compiling system. Global data may be handled in a similar fashion so that the integrity of the data is preserved.</p>
<p id="p-0099" num="0098">Scoping data and variables as “private” indicates to the compiling system that these variables are local in scope to just the hardware logic, and therefore their resultant values do not need to persist past the point of hardware logic execution. As a variation to this syntax, there is an additional syntax that allows private data to be “copied out” to a local variable in the instruction processor version of the source file.</p>
<p id="p-0100" num="0099">The compiling system can use this data scoping information to generate two separate source files, each of which represents a portion of the original source file containing the bracketing syntax. One of the new source files will be compiled and executed on the instruction processor's system. The other source file will be used to generate the hardware logic. This process is illustrated in <figref idref="DRAWINGS">FIG. 5</figref>.</p>
<heading id="h-0009" level="1">High-Level Language Converter</heading>
<p id="p-0101" num="0100">A component of the compiling system that is invoked first to initiate a traditional compilation phase, similar to compilation on any instruction processor system. This component receives as input any programming language code and extracts from the source file(s) tokens which can then be parsed. While the parsing phase is taking place, semantic analysis may also be performed, so that after this phase an internal representation of the code and a symbol table may be produced. Semantic error checking is done and the appropriate diagnostic messages are issued.</p>
<p id="p-0102" num="0101">The internal representation of the source code now generated by this compilation phase resembles control flow blocks of code. The next step is to expand on these control flow blocks into the internal language that will be processed by the optimizer. During this expansion phase, each control flow block may be expanded into units called either basic blocks or extended basic blocks. A flow graph may be a directed graph of the basic blocks in a function, which represents the function's control flow. Each node in the graph corresponds to a basic block. The flow graph may be updated during compilation as optimizations occur. The major global optimizations performed during this step may include invariant code motion; induction variable analysis; and, global register assignment. Other optimizations may include the merging of code blocks as well as peephole optimizations that result in optimized control flow code blocks.</p>
<p id="p-0103" num="0102">After the global register assignment optimization, the calling parameters of the routine may be written to an intermediate file that may be used as the input into the next compilation phase. The calling parameters are written along with their data types, followed by the user symbols associated with the routine and their data types. After writing out the symbols used in the routine, the next portion of the file contains the traversal of the terminal code blocks showing the type of basic block represented and the instructions associated with the code block. Once this control flow representation has been produced, the final step produces all the instructions that were generated during the compilation of the routine. These instructions may correspond to the instructions listed in the control flow blocks.</p>
<p id="p-0104" num="0103">As is the case for any architecture, a compiler is required to process a program written in higher-level languages into equivalent programs in a machine language for execution on a computer. System <b>100</b> satisfies the above requirement with the ability to translate programs for a traditional instruction processor alone, or in combination with a reconfigurable processor. The compiler phase used to translate this higher-level language is based on instruction processor compiler technology. The HLL converter uses a mixed model of compilation with language-specific front-ends to generate a common high-level intermediate representation. This first level of representation is then input into various basic optimizations, including control flow analysis, so that the resulting second-level intermediate representation can be referred to as a control flow representation. The control flow representation becomes a major component in the control flow information file that is generated as output by the HLL converter. The following text provides additional details on the contents of this file and also the additional files that can be produced as a result of this stage of compilation.</p>
<p id="p-0105" num="0104">Input to the HLL converter can consist of two different types of source code. Any higher-level language source code can used as input into the HLL converter, provided that this code is written to conform to the language standards which it represents. Another input to the HLL converter is source code that represents control flow information for the higher-level language originally represented. This control flow information has been written to a well-defined interface specification so that control flow information from a previous compilation can be used (as described later) or control flow information that has been derived from another source, such as another uP executable, can be used.</p>
<p id="p-0106" num="0105">After the control flow analysis has revealed the hierarchical flow of control within each procedure, a representation of the control flow can be generated as an intermediate language. The control flow information file that is produced at this point contains, but is not necessarily limited to, the following: entry symbols, user symbols, basic blocks, and intermediate representation instructions, among others.</p>
<p id="p-0107" num="0106">Entry symbols represent the symbols created by the HLL converter that will be the parameters passed in a calling routine, which serves as the interface between the instruction processor portion of the executable and the hardware logic. These symbols may pass addresses of data that will accessed by the hardware logic as well as scalar values for computation.</p>
<p id="p-0108" num="0107">User symbols are the symbols that represent the variables in the region of code being compiled for hardware logic. These symbols correspond to variable names in the higher-level source code, including constructs such as arrays and structures. Symbols may also represent any external routine calls; it is here that hardware logic modules may be visible in the compilation process.</p>
<p id="p-0109" num="0108">A basic block may be a maximal sequence of instructions that can be entered only at the first of them and exited only from the last of them. The basic blocks representing the given source code are listed here. Every basic block starts with a block information header entry. This entry provides the relative block number, the source line number that this basic block represents, the label defined by this block (if one exists) as it is represented in the associated symbol table. Following this information is a list of flags representing attributes for these basic blocks. These flags provide more information about the block such as if this block contains the entry to the procedure; if this block has any external references; and, if this block's control falls through to its immediate successor. Immediately following the block information header line is a list of the instructions that represent terminal nodes. Examples of these types of instructions are stores of data to memory, unconditional or conditional branches or procedure calls. Each terminal node is represented by its relative number within the basic block, the line number which points to the “tree” of instructions representing the statement, and then flags that provide more information on that node.</p>
<p id="p-0110" num="0109">The instructions referenced by the basic block section may be listed in the intermediate representation instructions. This section contains the individual instructions that have been generated during compilation and used for optimizations up to this point. These instructions have been grouped into basic blocks and their relationship with one another has already been established in the previous section. They are generated here in the order that they were created during the compilation process.</p>
<p id="p-0111" num="0110">The first entry is the relative number of the instruction in this instruction list. Next is the instruction name, followed by each of the operands for this instruction. Information for operands may be provided if the operand is a label pointing to an entry in a table of variable and entry point names. Internally generated names from the compilation are also shown. Information may be provided about the datasizes being loaded or stored from memory. More details on the types of instructions that can be referenced in the control flow information file are given in the interface specification section.</p>
<p id="p-0112" num="0111">The generation of the control flow information file is based on options provided either in the compilation command line or in the source code itself. Adding an option to the compilation command designates which subprogram contained within a larger source file of subprograms is to be targeted for hardware logic. During compilation, only the designated subprogram will have its control flow information written out to a separate file for further hardware logic compilation. The remaining source code subprograms will be compiled to generate the instruction processor machine code.</p>
<p id="p-0113" num="0112">Control flow information files can also be generated based on the existence of partitioning, or bracketing, syntax that is recognized and parsed by the compiler. This partitioning syntax is used in conjunction with language-specific source lines such that, if this source code is compiled for a different architecture then the partitioning syntax may be ignored during compilation. Keywords defined for this syntax enable a region of the entire source code to be extracted and compiled as a separate subprogram for hardware logic. As described above with the command line option, only this specially bracketed region will have its control flow information written out to a separate control flow information file for further hardware logic compilation.</p>
<p id="p-0114" num="0113">If no partitioning syntax is present in the code and there is no command line option to designate a specific subprogram as being targeted for hardware logic compilation, then the compiler may default to compiling the entire source code as a candidate for hardware logic. The control flow information about each subprogram may be written out and passed along for further compilation. The next compilation step will do the analysis needed in determining the best point in the control flow for partitioning to create a subset control flow information file. This new control flow information file is passed back to the HLL converter to create the necessary MAP proxy routines needed.</p>
<p id="p-0115" num="0114">The compiler utilized to generate a control flow information file from a higher-level language or to process a previously generated control flow information file must also create various other procedures that provide the necessary functionality for hardware logic execution. These procedures provide functionality by supporting an interface between the execution of the code on the uP processor and the execution of the code on the reconfigurable processor. This interface functionality is termed, “MAP proxy”. <figref idref="DRAWINGS">FIG. 6</figref> shows an example of the interface functionality.</p>
<p id="p-0116" num="0115">Code contained in the control flow information file <b>610</b> may include the region of source code that will be executed on the hardware logic. That file continues through the compilation process with the result being FPGA bitstreams suitable for hardware logic execution.</p>
<p id="p-0117" num="0116">Code contained in the MAP proxy <b>615</b> may be scheduled for execution on the instruction processor in place of the region of control flow information that has been partitioned for execution on hardware logic. This code handles the data movement needed in support of the hardware logic execution by inserting data manipulation constructs that are appropriate for the target reconfigurable processor. The MAP proxy also may insert runtime library calls used when executing to interact with the operating system. This interaction includes the allocation of hardware logic resources; querying of hardware logic status; the release of hardware logic resources back to the system; and, the transfer of control from the instruction processor process to the hardware logic.</p>
<p id="p-0118" num="0117">The final step for the HLL converter is to generate the machine code needed to execute on the targeted instruction processor processor. The HLL converter produces control flow information for the entire source code and also the MAP proxy code. This information is then translated down to the machine code, so that the binary files produced from this compilation can be used as input into the linking step that will result in the unified executable.</p>
<heading id="h-0010" level="1">Hardware Logic Module Information Files: Concept and Structure</heading>
<p id="p-0119" num="0118">Another component of the compilation system is a data base that describes the mapping of the operators, intrinsic function calls, and procedure calls in the source of the MAP procedure to existing (system defined) hardware logic modules. The database is called the system info file.</p>
<p id="p-0120" num="0119">Optionally, a user may define additional hardware logic modules which may be called as if calling a procedure in the source of a MAP procedure, or which may be used to redefine the intrinsic system defined hardware logic modules described in the system info file. In order to compile for MAP using user defined hardware logic modules, the user must provide a data base which maps the procedure name or operator overload to the user defined hardware logic module. This database is called the user info file.</p>
<p id="p-0121" num="0120">Every opcode in the nodes of a dataflow graph representation of the MAP procedure being compiled must be defined in an info file entry.</p>
<p id="p-0122" num="0121">Hardware logic module informationfiles are used by both the CFG to CFG-DFG converter dataflow graph generator and by the CFG-DFG to HDL converter Verilog generation phases of compilation.</p>
<p id="p-0123" num="0122">A hardware logic module information file includes of one or more entries concatenated into a single file. Each entry describes a unique operation (op-code) represented in the dataflow graph or a function or subroutine that has been instantiated thru a call from the MAPprocedure being compiled. This description includes an interface to the hardware logic module that is to be instantiated to perform the operation, including it's inputs, outputs, any input or output signals the module is to be connected to, and characteristics of the hardware logic module. Optionally, an entry may contain functionally equivalent pseudo code that may be used in dataflow graph emulation mode, or various simulation modes to emulate/simulate the modules functionality.</p>
<p id="p-0124" num="0123">A hardware logic module information file entry is delimited with a begin-def and end-def marker, and takes the form:</p>
<p id="p-0125" num="0124">
<tables id="TABLE-US-00003" num="00003">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="42pt" align="left"/>
<colspec colname="1" colwidth="175pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>BEGIN_DEF “&lt;opcode&gt;”</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="56pt" align="left"/>
<colspec colname="1" colwidth="161pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>&lt;mapping and emulation information&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="42pt" align="left"/>
<colspec colname="1" colwidth="175pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>END_DEF</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0126" num="0125">The &lt;opcode&gt; is the ASCII string matching the op-code in the dataflow graph corresponding to the operation, or the name of a procedure called in the source code of the MAP procedure. The &lt;mapping and emulation information&gt; consists of a sequence of entries, each ending with a semicolon. The order of these sections of the hardware logic module information file entries does not matter.
<ul id="ul0001" list-style="none">
    <li id="ul0001-0001" num="0000">
    <ul id="ul0002" list-style="none">
        <li id="ul0002-0001" num="0126">MACRO=“&lt;macro_name&gt;”;</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0127" num="0127">The &lt;macro_name&gt; is the ASCII string representing the name of the hardware logic module that performs the function of the operation or procedure the hardware logic module information file entry describes.
<ul id="ul0003" list-style="none">
    <li id="ul0003-0001" num="0000">
    <ul id="ul0004" list-style="none">
        <li id="ul0004-0001" num="0128">LATENCY=&lt;num&gt;;</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0128" num="0129">The &lt;num&gt; is an integer value specifying the number of clock cycles between the presentation of data to the hardware logic module's inputs and the availability of corresponding results on the outputs.
<ul id="ul0005" list-style="none">
    <li id="ul0005-0001" num="0000">
    <ul id="ul0006" list-style="none">
        <li id="ul0006-0001" num="0130">STATEFUL=YES|NO;</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0129" num="0131">YES indicates the hardware logic module holds state between iterations, typically in an internal register; NO indicates it does not.
<ul id="ul0007" list-style="none">
    <li id="ul0007-0001" num="0000">
    <ul id="ul0008" list-style="none">
        <li id="ul0008-0001" num="0132">EXTERNAL=YES|NO;</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0130" num="0133">YES indicates the hardware logic module interacts with entities outside of its code block; NO indicates it does not.
<ul id="ul0009" list-style="none">
    <li id="ul0009-0001" num="0000">
    <ul id="ul0010" list-style="none">
        <li id="ul0010-0001" num="0134">PIPELINED=YES|NO;</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0131" num="0135">YES indicates the hardware logic module is pipelined such that it can accept new inputs each clock; NO indicates it is not.
<ul id="ul0011" list-style="none">
    <li id="ul0011-0001" num="0000">
    <ul id="ul0012" list-style="none">
        <li id="ul0012-0001" num="0136">INPUTS=&lt;num&gt;:&lt;input specs&gt;;</li>
        <li id="ul0012-0002" num="0137">OUTPUTS=&lt;num&gt;:&lt;output specs&gt;;</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0132" num="0138">&lt;num&gt; is the number of inputs or outputs to the operation or procedure in the source of the MAP procedure, or to the node which represents it in the dataflow graph. There must be &lt;num&gt; input or output specs specified in the INPUTS or OUTPUTS specifier.</p>
<p id="p-0133" num="0139">Each &lt;input spec&gt; takes the form:
<ul id="ul0013" list-style="none">
    <li id="ul0013-0001" num="0000">
    <ul id="ul0014" list-style="none">
        <li id="ul0014-0001" num="0140">I&lt;n&gt;=&lt;type&gt;&lt;nbits&gt; BITS (&lt;input_port_name&gt;)</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0134" num="0141">Each&lt;output spec&gt; takes the form:
<ul id="ul0015" list-style="none">
    <li id="ul0015-0001" num="0000">
    <ul id="ul0016" list-style="none">
        <li id="ul0016-0001" num="0142">o&lt;n&gt;=&lt;type&gt;&lt;nbits&gt; BITS (&lt;output_port_name&gt;)</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0135" num="0143">&lt;n&gt; is an integer that specifies the zero based input or output sequence number to the operation or procedure call in the source of the MAP procedure or in the node of the dataflow graph. The numbering of the inputs and outputs is independent; each begins at zero.</p>
<p id="p-0136" num="0144">&lt;type&gt; is the data type of the input or output. It may be INT, FLOAT, or ADDRESS. (This will be expanded to include additional types, COMPLEX, LOGICAL, REAL, INTEGER, CHAR, CHARACTER). &lt;input_port_name&gt; and &lt;output_port_name&gt; represent the corresponding input or output port names of the associated hardware logic module.
<ul id="ul0017" list-style="none">
    <li id="ul0017-0001" num="0145">IN_SIGNAL:&lt;nbits&gt; BITS “&lt;macro_port_name&gt;”=“&lt;internal_signal-name”;</li>
    <li id="ul0017-0002" num="0146">OUT_SIGNAL:&lt;nbits&gt; BITS “&lt;macro_port_name&gt;”=“&lt;internal_signal_name”;</li>
</ul>
</p>
<p id="p-0137" num="0147">These describe hardware logic module connections which are not visible at the source code or dataflow graph level. &lt;nbits&gt; is the nuber of bits of the input or output signal. &lt;macro_port_name&gt; is the name of the signal into (IN_SIGNAL) or out (OUT_SIGNAL) of the hardware logic module. &lt;internal_signal_name&gt; is the name of the source (IN_SIGNAL) or target (OUT_SIGNAL) signal in the compiled hardware logic.</p>
<p id="p-0138" num="0148">There are currently three internal source signals available:
<ul id="ul0018" list-style="none">
    <li id="ul0018-0001" num="0000">
    <ul id="ul0019" list-style="none">
        <li id="ul0019-0001" num="0149">CLOCK</li>
        <li id="ul0019-0002" num="0150">rst</li>
        <li id="ul0019-0003" num="0151">code_block_reset</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0139" num="0152">CLOCK is the clock source for all hardware logic modules. rst is the one-time global reset. code_block_reset is a reset signal that is activated anytime a hardware logic module's code block is activated.</p>
<p id="p-0140" num="0153">There are currently no documented signals to target. These will include error, overflow, or exception conditions detected during execution of the hardware logic module in the future.
<ul id="ul0020" list-style="none">
    <li id="ul0020-0001" num="0000">
    <ul id="ul0021" list-style="none">
        <li id="ul0021-0001" num="0154">DFG=#&lt;simcode&gt;#</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0141" num="0155">&lt;simcode&gt; is C code which is used as an functional definition of the hardware logic module's behavior during dataflow emulation.</p>
<p id="p-0142" num="0156">Syntax extensions are planned to the hardware logic module information file entries to specify variations of these or additional characteristics of the hardware logic modules. These characteristic variations and additions include, but are not limited to the description of hardware logic modules which can accept new inputs each n iterations, which can accept inputs for n iterations and produce i results after j clock periods, a means to specify the frequency at which a hardware logic module executes, actual code or a directory path to a file containing HDL code which define the hardware logic module for simulation, and a specification of resource requirements for the hardware logic module.</p>
<heading id="h-0011" level="1">Translating Hardware Logic Module Information Files</heading>
<p id="p-0143" num="0157">In addition to the data flow graph, there is a second input file to the CFG-DFG to HDL converter. This is a CFG-DFG to HDL converter binary file containing the interfaces and information about the hardware logic modules contained in the hardware logic module information files. In an embodiment of the present invention, a small executable may be used which translates the ASCII hardware logic module information file into CFG-DFG to HDL converter internal tables and is executed during compilation prior to invoking the CFG-DFG to HDL converter.</p>
<p id="p-0144" num="0158">This translation program may be invoked with one required and two optional command line options. The required option, -o outfile, indicates the name of the output file where the CFG-DFG to HDL converter tables are to be written. The option -d deleted_signal indicates the name of an input or output signal in the hardware logic module information file to be ignored; that is, the translation program will skip processing of a signal named deleted_signal in an hardware logic module information file which is specified in a -d option. This allows an hardware logic module information file entry for a hardware logic module to contain test signals or signals used in simulation that may not exist when generating actual hardware logic. The second optional command line argument is -r sigval=newsigval. The translation program replaces occurrences of pin or wire names specified by sigval in the hardware logic module information file with the string newsigval in the resulting CFG-DFG to HDL converter table. This option allows renaming the hardware logic module's input and output signals which are to be connected by the CFG-DFG to HDL converter. The CFG-DFG to HDL converter may ignore any connections that are to be connected to a wire whose name begins with “unconnected_”. By renaming “unconnected_” wires with this option, they may be processed by the CFG-DFG to HDL converter. As with the -d option, -r is useful when generating an HDL like Verilog which will be used in a test bench or simulation environment and that may have signals that are not actually present in the generated Verilog for the resulting hardware logic. Multiple -d and -r options may be specified.</p>
<p id="p-0145" num="0159">The translation program may start by initializing the CFG-DFG to HDL converter tables to be built, calling gr_tables_init in the CFG-DFG to HDL converter support library. Next the command line options may be processed. An array of character pointers is built containing the list of deleted signals specified by the -d command line options. Two parallel arrays of character pointers are built for the renamed signals (-r option). The first array contains the strings specified by sigval in the option, the second array contains the strings specified by newsigval in the option. For a given renamed signal in the first array, its corresponding new name is located at the same index in the second array. The output file name specified with the -o option is inserted into the CFG-DFG to HDL converter OUTPUT_FILES table.</p>
<p id="p-0146" num="0160">After tables are initialized and the command line is processed, the hardware logic module information file(s) are parsed and an array of subref data structures is constructed. There may be two hardware logic module information files containing an arbitrary number of entries. One hardware logic module information file is assumed to contain interfaces which map the opcodes which appear in nodes of the data flow graph to specific hardware logic modules known to the compilation system (the intrinsic operations). This hardware logic module information file is called the system hardware logic module information file, and is located by reading a environment variable. The second hardware logic module information file, which is optional, contains interfaces to user provided hardware logic modules which are not intrinsically know to the compiler, as well as any user provided redefinitions of any of the intrinsic hardware logic modules. Parsing of the hardware logic module information file and creation of the array of subref structures is performed by a function shared with CFG to CFG-DFG converter, fetch_all_subrefs. The parser and semantic routines of fetch_all_subrefs may be generated by the gnu tools flex and bison.</p>
<p id="p-0147" num="0161">A subref structure is used to store the information in the hardware logic module information files internally to the translator program and The CFG to CFG-DFG converter. As each opcode info file definition is parsed, the information is stored into a subref structure. Parsing continues until all the hardware logic module information file entries have been parsed, and an array of subref structures has been built. The translator program then enters loops thru the array processing one subref structure at a time while building the CFG-DFG to HDL converter tables which hold the hardware logic module interfaces.</p>
<p id="p-0148" num="0162">The CFG-DFG to HDL converter tables built from the processing of the subref structures are EQUIV_IN, EQUIV_OUT, EQUIV_IN_PRS, PIN_NAMES, HELD, BEHAV_V, and BEHAV_C. The content of each of these tables is indicated in the discussion of subref structure processing (below). There is one EQUIV_IN and one EQUIV_OUT table entry created for each subref structure processed. The table index for the EQUIV_IN and EQUIV_OUT table entries for a given subref are the same.</p>
<p id="p-0149" num="0163">Processing of a subref structure begins by checking the opcode name field of the subref structure. If no name was specified in the hardware logic module information file entry, an error is issued and the rest of the current subref structure is skipped. If a name is specified, the CFG-DFG to HDL converter tables built from previous subref processing are searched for a previous subref with the same opcode name. If one is found, a warning may be issued, and further processing of the duplicate named subref may be skipped; the first hardware logic module information file entry for the opcode name is used. Note that the user's info file entries are the first entries parsed, and their corresponding subref structures appear in the array of subrefs with the smallest array indices. Thus, a user may provide their own hardware logic module for any given opcode which is intrinsically known to the compiler, and due to the order of processing of the subref array, the user's info file entry for that opcode overrides any entry in the system's info file.</p>
<p id="p-0150" num="0164">The index of the first free entry in the EQUIV_IN_PRS is saved and will later be placed in the EQUIV_IN table entry for the current hardware logic module information file entry. This is used to locate the first input parameter for the hardware logic module. The latency for the hardware logic module is also save for later insertion into the EQUIV_OUT table entry for the current info file entry. If the latency is not specified or if it is negative, and error is issued and a value of zero is used for the latency.</p>
<p id="p-0151" num="0165">The output parameters may be processed first. For each output, an EQUIV_IN_PRS table entry is created. The output's bit width and the index to the EQUIV_IN/EQUIV_OUT table entries for this subref are inserted into the EQUIV_IN_PRS table entry. A flag indicating this is an output is also set in the EQUIV_IN_PRS table entry, distinguishing it from an input. A PIN_NAMES table entry is then created for the output parameter. A PIN_NAMES table entry has the output parameter's name, it's width in bits, the index to it's previously created EQUIV_IN_PRS table entry, the index of the current subref's EQUIV_IN/EQUIV_OUT table entry, and a flag indicating this is an output pin set. If this is the first PIN_NAMES table entry created for the current subref (the first output parameter processed for the module), the PIN_NAMES table index is saved for later insertion into the EQUIV_OUT table for the current subref.</p>
<p id="p-0152" num="0166">The output signals for the opcode are processed after the output parameters. The list of deleted signals specified by d command line options is searched to determine if the output signal should be entered into the CFG-DFG to HDL converter HELD and PIN_NAMES tables. If it is found, the signal is skipped; otherwise a HELD table entry is created. The HELD table entry contains the index to the associated PIN_NAMES table entry for the signal, the bit width of the signal, and the name of the external signal the output signal should be connected to. The table of renamed signals specified by -r command line options may be searched to see if the signal has been remapped. If it has, the remapped signal name is used; otherwise the name specified in the hardware logic module information file is used. If no external signal name is specified, and error is issued. A PIN_NAMES table entry may then be created for the output signal. The PIN_NAMES table entry contains the EQUIV_IN/EQUIV_OUT tables index for the current subref entries, the output signal's bit width, the index of the HELD table entry created for this signal, the signal's name internal to the hardware logic module, and two flags indicating the signal is an output and that there is a HELD table entry for the signal. If this is the first signal processed for the subref structure, the index of the PIN_NAMES table entry is save for insertion in the EQUIV_OUT table entry for the subref.</p>
<p id="p-0153" num="0167">After the output signals are processed, the input parameters for the subref are processed. An EQUIV_IN_PRS and a PIN_NAMES table entry are created for each input. The contents of the EQUIV_IN_PRS entry may be identical in content to one made for an output parameter with the exception that the flag indicating an output parameter is not set. The PIN_NAMES table entry contains the same information as a PIN_NAMES table entry for an output parameter, except a flag indicating an input is set rather than the flag indicating an output parameter.</p>
<p id="p-0154" num="0168">The input signals are processed after the input parameters. For each input signal, a HELD and a PIN_NAMES table entry are created. The processing of the input signals and the resulting table entries are identical to that for output signals, except a flag indicating the signal is an input rather than an output is inserted in the PIN_NAMES table entries.</p>
<p id="p-0155" num="0169">The last PIN_NAMES table entry has now been made for the subref, and the last entry's index is save for insertion into the subref's EQUIV_OUT table entry.</p>
<p id="p-0156" num="0170">Finally the EQUIV_IN and the EQUIV_OUT table entries are generated for the subref. The EQUIV_IN table entries contain the index of the first EQUIV_IN_PRS table entry made processing this subref structure. The index of the last EQUIV_IN_PRS table entry made for this subref, and the name of the data flow graph opcode this subref defines. The EQUIV_OUT table entry contains the latency of the associated hardware logic module, the name of the hardware logic module, the index of the first PIN_NAMES table entry associated with the subref, the index of the last PIN_NAMES table entry associated with the subref.</p>
<p id="p-0157" num="0171">Processing of the subref is now complete. info2grf continues until all subrefs structures are processed. If no errors were found during processing, the CFG-DFG to HDL converter tables are written to the output file and a zero status code is returned. Otherwise, no tables are output and a non-zero status code is returned. The translation program may then terminate.</p>
<heading id="h-0012" level="1">Converting CFG Into Hybrid CFG-DFG</heading>
<p id="p-0158" num="0172">Embodiments are now described for converting CFG representations into hybrid CFG-DFG representations. The original CFG representations may include nodes and directed edges, where each node may be a basic block of code, and each edge may show a transfer of control from the exit of one block to the beginning of another. The code in a basic block may have a single point of entrance and a single exit, that is, it may represent a straight sequence of statements that cannot be branched into or out of other than at the beginning and the end, respectively. The statements in a basic block may be sequential.</p>
<p id="p-0159" num="0173">The hybrid CFG-DFG representations may have CFG representations at its upper level, but with dataflow graphs in each code block. In one embodient, CFG to CFG-DFG conversion may consolidate groups of basic blocks, including groups that form inner loops, into flat and possibly pipelined code blocks.</p>
<p id="p-0160" num="0174"><figref idref="DRAWINGS">FIG. 7</figref> shows an example of a portion of a CFG that corresponding to the following code fragment:</p>
<p id="p-0161" num="0175">
<tables id="TABLE-US-00004" num="00004">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="offset" colwidth="77pt" align="left"/>
<colspec colname="1" colwidth="28pt" align="left"/>
<colspec colname="2" colwidth="112pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="2" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>If</entry>
<entry>(a&gt;b) {</entry>
</row>
<row>
<entry/>
<entry/>
<entry>a = a + 1;</entry>
</row>
<row>
<entry/>
<entry/>
<entry>b = a * 3;</entry>
</row>
<row>
<entry/>
<entry/>
<entry>}</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="77pt" align="left"/>
<colspec colname="1" colwidth="140pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>else     {</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="offset" colwidth="77pt" align="left"/>
<colspec colname="1" colwidth="28pt" align="left"/>
<colspec colname="2" colwidth="112pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry/>
<entry>b = a + 3;</entry>
</row>
<row>
<entry/>
<entry/>
<entry>a = a* 2;</entry>
</row>
<row>
<entry/>
<entry/>
<entry>}</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0162" num="0176">In this example, the conditional test comparing ‘a’ and ‘b’ may be stored to a register or temporary variable, and may the last statement in its basic block. Based on the result of the comparison, control may be transferred to one of two blocks that represent the “true” and “false” parts of the conditional construct. Each of these blocks, after executing its statements, may transfer control to the block containing the code that follows the conditional. Note that the code blocks in a CFG may contain sequential statements, each of which may reference registers or variables by reading and writing them. Also, note that the directed edges between blocks may represent a transfer of control that could be viewed as a one-bit “trigger” signal.</p>
<p id="p-0163" num="0177">While CFG representations may be used in many compilers as an internal intermediate representation, dataflow graphs are not usually used because the dataflow execution paradigm is poorly suited to conventional von Neumann processors, due to its use of arbitrarily many functional units and its asynchronous execution. However, the dataflow model is well-suited for reconfigurable hardware. In a dataflow graph, the nodes may represent functional units (e.g., integer add). The directed edges between nodes may represent data connections that bring output data items from one functional unit to the inputs of other functional units. <figref idref="DRAWINGS">FIG. 4</figref> shows a dataflow graph for the following code fragment:
<ul id="ul0022" list-style="none">
    <li id="ul0022-0001" num="0000">
    <ul id="ul0023" list-style="none">
        <li id="ul0023-0001" num="0178">{</li>
        <li id="ul0023-0002" num="0179">int d;</li>
        <li id="ul0023-0003" num="0180">a=b+c;</li>
        <li id="ul0023-0004" num="0181">b=a*4;</li>
        <li id="ul0023-0005" num="0182">d=c−a;</li>
        <li id="ul0023-0006" num="0183">a=a*5−d</li>
        <li id="ul0023-0007" num="0184">}</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0164" num="0185">The incoming values of ‘b’ and ‘c’ may be loaded at the top of the graph. Their values may flow out of the output ports (bottom) of the LOAD nodes. The dataflow graph may expose instruction-level parallelism. Here, three instructions (two multiplies and a subtract) may occur at the same time. Note that the ‘d’ variable may not need storage since it may be local to the graph and may exist as an edge. Also note that the intermediate value assigned to ‘a’ may not be stored to that variable, but simply may exists as an edge since a subsequent assignment below may create the final value of ‘a’. A dataflow graph such as this may be mapped directly onto reconfigurable hardware by instantiating selected functional units. In this example one add, two subtracts and two multiplies would be created.</p>
<p id="p-0165" num="0186">The sequential statements in each basic block of a CFG representation may be converted to a dataflow graph, thereby producing a hybrid where the upper level nodes are code blocks with single-bit edges, and within each block may be a dataflow graph whose nodes may functional units and whose edges may be data connections. <figref idref="DRAWINGS">FIG. 8</figref> shows an example of such a conversion applied to the CFG of <figref idref="DRAWINGS">FIG. 7</figref>.</p>
<p id="p-0166" num="0187">In an embodiment of the invention, subsets of basic blocks in a CFG representation may be merged into a single dataflow code block where conditionals may be handled by computing both sides and then selecting the appropriate values based on the predicate expression of the conditional. <figref idref="DRAWINGS">FIG. 9</figref> also shows and example of such a code block, where the code blocks of <figref idref="DRAWINGS">FIG. 8</figref> have been merged.</p>
<p id="p-0167" num="0188">In addition to scalar and array data types, high-level languages may have structures, which are user-specified data types that may be composites of simpler types. Conventional compiler front ends, when generating CFG representations, may deal with these by producing the appropriate address calculations in the basic blocks they produce. When such a structure may be in a local memory, the address calculations may be left unchanged when converting the graph to a control-dataflow graph. In the case of structures as local variables, the conversion process uses the type information along with the address offsets to determine which field of the structure is being referenced.</p>
<p id="p-0168" num="0189">Pointers may be dealt with according to the architectural details of the target machine. If the reconfigurable hardware “sees” the same memory space as the processor that has passed address parameters to it, pointer arithmetic may work with no modification. If not, an adjustment factor is computed at run-time; this factor may be the difference between an address in the processor's memory and the place the data was copied to in the reconfigurable hardware's OBM. The control-dataflow graphs are generated so that they may include the addition of this factor when referencing a pointer.</p>
<p id="p-0169" num="0190">Conventional high-level languages may have a small set of fixed-size arithmetic data types (e.g., 32-bit integers and 64-bit integers). This corresponds to the fact that the von Neumann processors they target may have fixed-size functional units. In reconfigurable hardware, it may be possible to instantiate functional units of any bit-width, which may achieve a saving of space by using an amount of precision needed for a given program. One way this savings may be achieved is to extend the high-level language to include new data types with user-specified bit-widths. Another approach may be to allow the user to specify the bit-width of the standard types (e.g., “Int”) for a section of source code.</p>
<p id="p-0170" num="0191">It may possible for the compiler to infer the safety of reducing the precision of some functional units and the data paths they connect to. For example, in the code:
<ul id="ul0024" list-style="none">
    <li id="ul0024-0001" num="0000">
    <ul id="ul0025" list-style="none">
        <li id="ul0025-0001" num="0192">unsigned int a, b;</li>
        <li id="ul0025-0002" num="0193">unsigned char c;</li>
        <li id="ul0025-0003" num="0194">. . .</li>
        <li id="ul0025-0004" num="0195">c=a+b;
<br/>
it may be safe to change the addition operation to an 8-bit adder, since higher bits of the result may be lost when assigning the result.
</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0171" num="0196">In another embodiment, a component of the translation of CFG representations to control-dataflow graphs may be a database that describes the mapping of operators and function calls to existing hardware logic modules. This database, may be called an “info file”, and maybe used at various steps during compilation.</p>
<p id="p-0172" num="0197">Function calls may be dealt with in a variety of ways, depending on the nature of the routine being called: If the routine is associated, via the “info file”, with a hardware logic module, then a single node may be produced in the dataflow graph to represent it as a functional unit. If the routine meets appropriate criteria, it may be inlined so that the call mechanism may not be needed. If the function is tail recursive, it may be converted to a loop. If a function does not fall in the above categories, then a stack-oriented call mechanism may be used. In another embodiment, LIFO stacks may be implemented in the reconfigurable logic that may hold the various instantiations of local variables as the recursion takes place. Stack information may also direct the flow of control so that the returns of the recursive calls take place correctly.</p>
<p id="p-0173" num="0198">The hybrid control-dataflow graph may adapt itself to multiple threads of execution within a subroutine compiled to reconfigurable hardware. While the semantics of high-level languages may specify sequential execution (where one code block may be active at any given time), parallelism at the code block level may be easy to implement when the compiler can determine that parallel execution may not produce incorrect results. This determination may come in a variety of ways, depending on the language and its possible extensions: For example, if the language contains parallel constructs, the parallelism may come in as part of the CFG representation. Also, a sequential language may be extended by user pragmas that may allow the programmer to direct the compiler to make certain parts of the code parallel. Analysis may allow the compiler to prove that certain code blocks may be safely executed in parallel.</p>
<p id="p-0174" num="0199"><figref idref="DRAWINGS">FIG. 11</figref> shows an embodiment that has, at left, a sequential part of a CFG representation, and at right a transformed graph where two code blocks have been made concurrent. The trigger signal from the preceding block fans out to trigger both concurrent blocks, and a “join” mechanism called a LATCH_AND may used to merge the “done” signals from the two blocks. The LATCH_AND may be designed so that it latches each input signal when it goes high, so that the incoming triggers may not have to occur simultaneously.</p>
<p id="p-0175" num="0200">The control-dataflow graph's connectivity information may be used to improve the performance of logic placement in an FPGA. In current place-and-route tools, the placement problem may be viewed at a very low level, where the items being placed may be small logic blocks. If the hardware logic modules available to the compiler are already determined to be of specified shapes, the compiler may do placement at a much higher, hence much simpler, level of granularity, with a potentially significant speedup of the process.</p>
<p id="p-0176" num="0201"><figref idref="DRAWINGS">FIG. 12</figref> shows the top-level process for converting a subroutine's CFG representation to a hybrid control-dataflow graph. One or more “info files” may be read to obtain information about the available hardware logic macros that may be available for implementation of the dataflow graph as reconfigurable logic. After reading the CFG representation into its internal data structure, the compiler may segregate “external” hardware logic module calls into individual blocks. This may be done because external modules interact with resources outside of their code blocks and race conditions might result if they were to execute concurrently. Next, individual blocks may be combined into larger blocks, as in the example of <figref idref="DRAWINGS">FIG. 10</figref>.</p>
<p id="p-0177" num="0202">Each block may then processed. For non-loop blocks, LOAD nodes may be created for the various scalar values that are referenced. Then the dataflow graph of the block's computation may be created. Finally, a STORE node may be created for each scalar variable to store its final value. Inner loops may require some additional handling. When the head block of an inner loop is found, the rest of the loop's blocks may be gathered and topologically sorted. Then LOAD and CIRCULATE nodes may be built for the scalars. The loop's code blocks may then be processed in a manner similar to that of non-loop blocks.</p>
<p id="p-0178" num="0203">After each DFG is created, delay nodes may be inserted to balance the path lengths (that may be measured in clock ticks) through the dataflow graph. Then a variety of optimizations may be performed on the graph. After all DFGs have been created, they may be written to a DFG file, and a logic emulation file may be created.</p>
<p id="p-0179" num="0204">The CFG representation may consist of two parts: an array of opcodes and a sequence of basic blocks. The opcodes may be read into an array of structures whose elements consist of one opcode and references to the opcode's data sources. Each basic block in the CFG representation may stored in a structure like the one shown below:</p>
<p id="p-0180" num="0205">
<tables id="TABLE-US-00005" num="00005">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>typedef struct {</entry>
</row>
<row>
<entry> // the following fields are initialized by reading the CFG</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="98pt" align="left"/>
<colspec colname="2" colwidth="119pt" align="left"/>
<tbody valign="top">
<row>
<entry> int id;</entry>
<entry>// id of block in the Inizio dump</entry>
</row>
<row>
<entry> int label;</entry>
<entry>// this block's label in the Inizio dump</entry>
</row>
<row>
<entry> INT_NODE *anchors;</entry>
<entry>// list of opcode anchors in this block</entry>
</row>
<row>
<entry> int flags;</entry>
<entry>// characteristics for this block</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>// the following fields are filled in by analyzing the block</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="98pt" align="left"/>
<colspec colname="2" colwidth="119pt" align="left"/>
<tbody valign="top">
<row>
<entry> int outgoing_true;</entry>
<entry>// block to go to if test is true</entry>
</row>
<row>
<entry> int outgoing_false;</entry>
<entry>// block to go to if test is false</entry>
</row>
<row>
<entry> INT_NODE *incoming;</entry>
<entry>// list of blocks that can jump to this</entry>
</row>
<row>
<entry/>
<entry> block</entry>
</row>
<row>
<entry> INT_NODE *anchor_nodes;</entry>
<entry>// list of store and branch nodes in this</entry>
</row>
<row>
<entry/>
<entry> block</entry>
</row>
<row>
<entry> VAR_INFO *scalars;</entry>
<entry>// info on all scalars used in this block</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="left"/>
<tbody valign="top">
<row>
<entry> SCALAR_ASSOC *scalar_sources;// sources of scalars at output of</entry>
</row>
<row>
<entry> block</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="98pt" align="left"/>
<colspec colname="2" colwidth="119pt" align="left"/>
<tbody valign="top">
<row>
<entry> int active;</entry>
<entry>// source of this block's ‘active’</entry>
</row>
<row>
<entry/>
<entry> expression</entry>
</row>
<row>
<entry> int src_true;</entry>
<entry>// source node of this block's true</entry>
</row>
<row>
<entry/>
<entry> expression</entry>
</row>
<row>
<entry> int src_false;</entry>
<entry>// source node of this block's false</entry>
</row>
<row>
<entry/>
<entry> expression</entry>
</row>
<row>
<entry> int is_loop_head;</entry>
<entry>// tells whether this is a loop head</entry>
</row>
<row>
<entry> int is_loop_tail;</entry>
<entry>// tells whether this is a loop tail</entry>
</row>
<row>
<entry> int was_flattened;</entry>
<entry>// tells whether this is head of a</entry>
</row>
<row>
<entry/>
<entry> flattened loop</entry>
</row>
<row>
<entry> NODEPOOL *pool;</entry>
<entry>// dataflow nodes for this block</entry>
</row>
<row>
<entry> } BLOCK_INFO;</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0181" num="0206">As the dataflow graph is built for a block, its nodes may be allocated in the “pool” field of the basic block structure. An example of the dataflow node structure may be show as:
<ul id="ul0026" list-style="none">
    <li id="ul0026-0001" num="0000">
    <ul id="ul0027" list-style="none">
        <li id="ul0027-0001" num="0207">typedef struct edge {</li>
        <li id="ul0027-0002" num="0208">int node;</li>
        <li id="ul0027-0003" num="0209">int port;</li>
        <li id="ul0027-0004" num="0210">struct edge *link;</li>
        <li id="ul0027-0005" num="0211">} Edge;</li>
        <li id="ul0027-0006" num="0212">typedef struct {</li>
        <li id="ul0027-0007" num="0213">int bitwidth;</li>
        <li id="ul0027-0008" num="0214">int is_const;</li>
        <li id="ul0027-0009" num="0215">char *constval;</li>
        <li id="ul0027-0010" num="0216">Edge *back_edges;</li>
        <li id="ul0027-0011" num="0217">int pseudoreg;</li>
        <li id="ul0027-0012" num="0218">} InputPort;</li>
        <li id="ul0027-0013" num="0219">typedef struct {</li>
        <li id="ul0027-0014" num="0220">int bitwidth;</li>
        <li id="ul0027-0015" num="0221">Edge *targets;</li>
        <li id="ul0027-0016" num="0222">int pseudoreg;</li>
        <li id="ul0027-0017" num="0223">} OutputPort;</li>
        <li id="ul0027-0018" num="0224">typedef struct {</li>
        <li id="ul0027-0019" num="0225">char *nodetype;</li>
        <li id="ul0027-0020" num="0226">int num_inputs;</li>
        <li id="ul0027-0021" num="0227">InputPort *inputs;</li>
        <li id="ul0027-0022" num="0228">int num outputs;</li>
        <li id="ul0027-0023" num="0229">OutputPort *outputs;</li>
        <li id="ul0027-0024" num="0230">char *dt_str;</li>
        <li id="ul0027-0025" num="0231">char *str;</li>
        <li id="ul0027-0026" num="0232">int ili;</li>
        <li id="ul0027-0027" num="0233">int mark;</li>
        <li id="ul0027-0028" num="0234">} Node;</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0182" num="0235">In one embodiment, two files may be written as output: A dataflow graph file and an emulation logic file. The following simple C source function may be examples of these files:</p>
<p id="p-0183" num="0236">
<tables id="TABLE-US-00006" num="00006">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="42pt" align="left"/>
<colspec colname="1" colwidth="175pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>void subr (int a, int b, int *c, int mapno) {</entry>
</row>
<row>
<entry/>
<entry>   if (a &gt; b)</entry>
</row>
<row>
<entry/>
<entry>     *c = a + b;</entry>
</row>
<row>
<entry/>
<entry>     }</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0184" num="0237">The example code below shows the dataflow graph file that may be produced when the example C function is compiled:</p>
<p id="p-0185" num="0238">
<tables id="TABLE-US-00007" num="00007">
<table frame="none" colsep="0" rowsep="0" pgwide="1">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="259pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>variable_count: 4</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="245pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>“a” integer*4 scalar param</entry>
</row>
<row>
<entry/>
<entry>“b” integer*4 scalar param</entry>
</row>
<row>
<entry/>
<entry>“c” integer*4 scalar param</entry>
</row>
<row>
<entry/>
<entry>“mapno” integer*4 scalar param</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="259pt" align="left"/>
<tbody valign="top">
<row>
<entry>BLOCK 0:</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="245pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>node_count: 6</entry>
</row>
<row>
<entry/>
<entry>#0 SRC{circumflex over ( )}INITIATE, input_count 0, output_count 1</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="231pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>O0: 1 bits (r0) --&gt; 4.0 3.0 2.0</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="245pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>#1 SRC{circumflex over ( )}ICMP_le, input_count 2, output_count 1</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="231pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>I0: 32 bits (r3)</entry>
</row>
<row>
<entry/>
<entry>I1: 32 bits (r2)</entry>
</row>
<row>
<entry/>
<entry>O0: 1 bits (r1) --&gt; 5.1</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="245pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>#2 SRC{circumflex over ( )}LD_SCALAR_VAL_DR23_32 “b”, input_count 1, output_count 1</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="231pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>I0: 1 bits (r0)</entry>
</row>
<row>
<entry/>
<entry>O0: 32 bits (r2) --&gt; 1.1</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="245pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>#3 SRC{circumflex over ( )}LD_SCALAR_VAL_DR22_32 “a”, input_count 1, output_count 1</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="231pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>I0: 1 bits (r0)</entry>
</row>
<row>
<entry/>
<entry>O0: 32 bits (r3) --&gt; 1.0</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="245pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>#4 SRC{circumflex over ( )}LATCH_AND_1, input_count 1, output_count 1</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="231pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>I0: 1 bits (r0)</entry>
</row>
<row>
<entry/>
<entry>O0: 1 bits (r4) --&gt; 5.0</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="245pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>#5 SRC{circumflex over ( )}OUTPUT, input_count 2, output_count 0</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="231pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>I0: 1 bits (r4)</entry>
</row>
<row>
<entry/>
<entry>I1: 1 bits (r1)</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="259pt" align="left"/>
<tbody valign="top">
<row>
<entry>TRUE TO_BLOCK 2</entry>
</row>
<row>
<entry>FALSE TO_BLOCK 1</entry>
</row>
<row>
<entry>BLOCK 1:</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="245pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>node_count: 7</entry>
</row>
<row>
<entry/>
<entry>#6 SRC{circumflex over ( )}INITIATE, input_count 0, output_count 1</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="231pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>O0: 1 bits (r5) --&gt; 11.0 10.1 9.0 8.0</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="245pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>#7 SRC{circumflex over ( )}IADD, input_count 2, output_count 1</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="231pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>I0: 32 bits (r8)</entry>
</row>
<row>
<entry/>
<entry>I1: 32 bits (r7)</entry>
</row>
<row>
<entry/>
<entry>O0: 32 bits (r6) --&gt; 10.0</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="245pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>#8 SRC{circumflex over ( )}LD_SCALAR_VAL_DR22_32 “a”, input_count 1, output_count 1</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="231pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>I0: 1 bits (r5)</entry>
</row>
<row>
<entry/>
<entry>O0: 32 bits (r7) --&gt; 7.1</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="245pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>#9 SRC{circumflex over ( )}LD_SCALAR_VAL_DR23_32 “b”, input_count 1, output_count 1</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="231pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>I0: 1 bits (r5)</entry>
</row>
<row>
<entry/>
<entry>O0: 32 bits (r8) --&gt; 7.0</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="245pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>#10 SRC{circumflex over ( )}ST_SCALAR_VAL_DR24_32 “c”, input_count 2, output_count 1</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="231pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>I0: 32 bits (r6)</entry>
</row>
<row>
<entry/>
<entry>I1: 1 bits (r5)</entry>
</row>
<row>
<entry/>
<entry>O0: 1 bits (r9) --&gt; 11.1</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="245pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>#11 SRC{circumflex over ( )}LATCH_AND_2, input_count 2, output_count 1</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="231pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>I0: 1 bits (r5)</entry>
</row>
<row>
<entry/>
<entry>I1: 1 bits (r9)</entry>
</row>
<row>
<entry/>
<entry>O0: 1 bits (r10) --&gt; 12.0</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="245pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>#12 SRC{circumflex over ( )}OUTPUT, input_count 2, output_count 0</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="231pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>I0: 1 bits (r10)</entry>
</row>
<row>
<entry/>
<entry>I1: 1 bits “0x1”</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="259pt" align="left"/>
<tbody valign="top">
<row>
<entry>TO_BLOCK 2</entry>
</row>
<row>
<entry>BLOCK 2:</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="245pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>node_count: 2</entry>
</row>
<row>
<entry/>
<entry>#13 SRC{circumflex over ( )}INITIATE, input_count 0, output_count 1</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="231pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>O0: 1 bits (r11) --&gt; 14.0</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="245pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>#14 SRC{circumflex over ( )}OUTPUT, input_count 2, output_count 0</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="231pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>I0: 1 bits (r11)</entry>
</row>
<row>
<entry/>
<entry>I1: 1 bits “0x1”</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="259pt" align="left"/>
<tbody valign="top">
<row>
<entry>EXIT</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0186" num="0239">The example dataflow graph above has two sections. The first is a list of the parameters and local variables, with name, type and kind (parameter or local). The second section is a listing of code blocks. In this example, the code blocks were not merged. Each block has a unique id number, and a set of dataflow nodes. Every block has a SRC^INITIATE node and a SRC^OUTPUT node as its beginning and ending nodes. For each node there is the following information: its function, its input and output counts, bit-width of each input, constant values for those inputs whose input is specified as constant, bit-width of each output, target list of each output (i.e., which other node input ports are fed by the output). Input and output ports may also have unique pseudo register ids in parentheses.</p>
<p id="p-0187" num="0240">The end of each block may specifie where control flow goes when the block is exited. Two target blocks may be specified as TRUE and FALSE targets when the block ends in a conditional. Otherwise one block may be specified, or EXIT may specified when the block is the exit of the function. <figref idref="DRAWINGS">FIG. 13</figref> shows this set of code blocks in pictorial form.</p>
<p id="p-0188" num="0241">Along with the dataflow graph file, an emulation logic file may also written. This may be a simple C routine that may be executed as a thread, emulating the reconfigurable logic part of a program. An example of an emulation logic file for an example C function may be shown as:</p>
<p id="p-0189" num="0242">
<tables id="TABLE-US-00008" num="00008">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>#include &lt;sys/types.h&gt;</entry>
</row>
<row>
<entry/>
<entry>#include &lt;stdio.h&gt;</entry>
</row>
<row>
<entry/>
<entry>#include &lt;dfl.h&gt;</entry>
</row>
<row>
<entry/>
<entry>#include &lt;emul_funcs.h&gt;</entry>
</row>
<row>
<entry/>
<entry>#define a_DF MAP_DR2</entry>
</row>
<row>
<entry/>
<entry>#define b_DF MAP_DR3</entry>
</row>
<row>
<entry/>
<entry>#define c_DF MAP_DR4</entry>
</row>
<row>
<entry/>
<entry>#define mapno_DF MAP_DR5</entry>
</row>
<row>
<entry/>
<entry>#define ULOGIC_FR_START MAP_FR2</entry>
</row>
<row>
<entry/>
<entry>#define ULOGIC_FR_DONE MAP_FR4</entry>
</row>
<row>
<entry/>
<entry>extern MAP_Control_t *DFG_map;</entry>
</row>
<row>
<entry/>
<entry>int num_new_refs = 0;</entry>
</row>
<row>
<entry/>
<entry>NameFireFunc *new_fire_ref = NULL;</entry>
</row>
<row>
<entry/>
<entry>NameExecFunc *new_exec_ref = NULL;</entry>
</row>
<row>
<entry/>
<entry>void tst076_logic_1 (MAP_Control_t *map) {</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>uint64 src, val;</entry>
</row>
<row>
<entry/>
<entry>DFG_map = map;</entry>
</row>
<row>
<entry/>
<entry>while (1) {</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="42pt" align="left"/>
<colspec colname="1" colwidth="175pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>ULOG_WaitOnFRSet (map, ULOGIC_FR_START);</entry>
</row>
<row>
<entry/>
<entry>ULOG_Write_FR (map, ULOGIC_FR_START, 0);</entry>
</row>
<row>
<entry/>
<entry>src = ULOG_Read_DR_GRP (map, a_DF, MAP<sub>—</sub></entry>
</row>
<row>
<entry/>
<entry>DR_GRP1);</entry>
</row>
<row>
<entry/>
<entry>DFG_store_scalar_value (“a”, src);</entry>
</row>
<row>
<entry/>
<entry>src = ULOG_Read_DR_GRP (map, b_DF, MAP<sub>—</sub></entry>
</row>
<row>
<entry/>
<entry>DR_GRP1);</entry>
</row>
<row>
<entry/>
<entry>DFG_store_scalar_value (“b”, src);</entry>
</row>
<row>
<entry/>
<entry>src = ULOG_Read_DR_GRP (map, c_DF, MAP<sub>—</sub></entry>
</row>
<row>
<entry/>
<entry>DR_GRP1);</entry>
</row>
<row>
<entry/>
<entry>DFG_store_scalar_value (“c”, src);</entry>
</row>
<row>
<entry/>
<entry>src = ULOG_Read_DR_GRP (map, mapno_DF, MAP<sub>—</sub></entry>
</row>
<row>
<entry/>
<entry>DR_GRP1);</entry>
</row>
<row>
<entry/>
<entry>DFG_store_scalar_value (“mapno”, src);</entry>
</row>
<row>
<entry/>
<entry>dfg_simulate (“tst076.dfg”, 0);</entry>
</row>
<row>
<entry/>
<entry>val = DFG_load_scalar_value (“c”);</entry>
</row>
<row>
<entry/>
<entry>ULOG_Write_DR_GRP (map, c_DF, MAP<sub>—</sub></entry>
</row>
<row>
<entry/>
<entry>DR_GRP1, val);</entry>
</row>
<row>
<entry/>
<entry>ULOG_Write_FR (map, ULOGIC_FR_DONE, 1);</entry>
</row>
<row>
<entry/>
<entry>ULOG_WaitOnFRClear (map, ULOGIC_FR_DONE);</entry>
</row>
<row>
<entry/>
<entry>}</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>}</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>void tst076_logic_2 (MAP_Control_t *map) { }</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0190" num="0243">In the example emulation logic file above, an infinite loop may act as the FPGA. As such, it may obey the same protocols, in this example using flag registers FR<b>2</b> and FR<b>4</b> as start and end handshakes, respectively. When it receives the start signal from FR<b>2</b>, the emulation routine may load initial values for the user subroutine's parameters. It then may call dfg_simulate, passing in the name of the DFG file to be executed. The dataflow simulator may do a token-driven simulation, returning when the EXIT code block has completed. Final values of the parameters may then be returned, followed by a FR<b>4</b> handshake. The routine may then go back to the top of the loop to await another signal that it should execute.</p>
<p id="p-0191" num="0244">Another embodiment of the conversion of a basic block in the CFG to a code block in the DFG is now described. In this embodiment, loads/stores may be treated in two different ways, depending on whether they are scalar or array references. Scalar references may be converted to DFG edges, with a single load at the start of the block and a single store at the end. Array references may be converted to on-board memory (OBM) references.</p>
<p id="p-0192" num="0245">Scalar variable references for pass-by-reference parameters may differ from local variable references. The CFG output of the compiler's front end may reflect this: It may put a level of indirection into such parameter references. <figref idref="DRAWINGS">FIG. 14</figref> illustrates the distinction.</p>
<p id="p-0193" num="0246">In another example, the following set of operations are considered:
<ul id="ul0028" list-style="none">
    <li id="ul0028-0001" num="0000">
    <ul id="ul0029" list-style="none">
        <li id="ul0029-0001" num="0247">a=b+c</li>
        <li id="ul0029-0002" num="0248">c=b−c</li>
        <li id="ul0029-0003" num="0249">a=b*5</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0194" num="0250">The front end may produce a set of op codes in its CFG output, shown in <figref idref="DRAWINGS">FIG. 15</figref>. Since this was Fortran source, the scalars may be brought in by reference, so the LDA (Load Address) nodes may perform an indirection step by fetching addresses from the addresses that may be input to them.</p>
<p id="p-0195" num="0251">Note that the graph sharing may not indicate common subexpressions. For example, the output of node may go to two places, representing the two reads of variable ‘c’ in the code. Those two reads may not produce the same value however since there may be an intervening store in between them.</p>
<p id="p-0196" num="0252">In an embodiment, the first step in processing a basic block may be to build dataflow graph fragments from the op codes. This may be done by a routine that starts at each anchor (bottom-most) op code and recursively builds a tree above it. There may be no sharing among the fragments, so the result of this routine may be to build the fragments shown in <figref idref="DRAWINGS">FIG. 16</figref>.</p>
<p id="p-0197" num="0253">In an embodiment, after the DFG fragments are built, the LDA nodes may be removed from beneath any ACONs (Address Constants) that carry scalar pass-by-reference parameters. This reflects the fact that the MAP compiler (i.e, the portion of the system that compiles portions of HLL source code to reconfigurable hardware) may be treating them as copy-and-restore, rather than by reference. This may leave the DFG fragments looking like those shown in <figref idref="DRAWINGS">FIG. 17</figref>.</p>
<p id="p-0198" num="0254">Next a list of all the referenced variables may be made, by starting at the anchors and looking upward to find ACONs. An INITIATE node may be created as the head of the DFG, and a layer of LD_SCALAR nodes may be created to bring in the initial values of the scalars. A temporary array of data structures may be created as a reference for the sources of each variable. An example of the structure is shown as:</p>
<p id="p-0199" num="0255">
<tables id="TABLE-US-00009" num="00009">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="offset" colwidth="21pt" align="left"/>
<colspec colname="1" colwidth="91pt" align="left"/>
<colspec colname="2" colwidth="105pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="2" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>typedef struct {</entry>
<entry/>
</row>
<row>
<entry/>
<entry>int node;</entry>
<entry>// node that produces the value</entry>
</row>
<row>
<entry/>
<entry>int port;</entry>
<entry>// port that produces the value</entry>
</row>
<row>
<entry/>
<entry>char *name;</entry>
<entry>// name of variable</entry>
</row>
<row>
<entry/>
<entry>} SCALAR_ASSOC;</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0200" num="0256">The array may be initialized to refer all of the variables to their LD_SCALAR nodes. Subroutine and function calls may be processed and then the DFG fragments may be converted to a DFG.</p>
<p id="p-0201" num="0257">In one embodiment, the CFG-to-DFG conversion may be a routine that starts at the bottom of each DFG fragment and does the following: Scan upward to find load nodes. For each load, look at the ACON above it to determine which variable is being loaded. Remove the load node and rewire the node it targets so that it is fed by the current source of that variable. If the anchor is a store of a scalar, it looks at the right-hand input to see which variable is being stored. It then may eliminate the store node and record the node's left source as the new source for that variable.</p>
<p id="p-0202" num="0258">In the example, when the first anchor is processed, the LDKR nodes for values ‘b’ and ‘c’ may be found; they may be eliminated and the nodes they feed may be rewired to be fed from the LD_SCALAR nodes at the top of the DFG. Then the STKR node may be eliminated and the KADD node may be noted, in the temporary array, as being the new source of variable ‘a’. When the next anchor is processed, its two LDKR nodes may be found. The ‘b’ value's source may still be its LD_SCALAR node, but the ‘a’ value's source may be the KADD. The LDKR nodes may be eliminated and their targets may be wired to the appropriate sources. The STKR node may then be eliminated and the KSUB node may be noted as the new source of variable ‘c’. When the third anchor is processed, its LDKR may be eliminated and its target may be rewired to the output of the KSUB. Then the STKR may be eliminated and the KMUL may be noted as the new source of variable ‘a’.</p>
<p id="p-0203" num="0259">Once all the anchors are processed, a layer of ST_SCALAR nodes may be created, storing the final values of the scalars by referencing the last sources of those variables. The ST_SCALARs have trigger outputs that may be gathered into a LATCH_AND node, and that node may feed an OUTPUT node at the DFG's bottom Any LD_SCALAR nodes whose outputs are unused may be removed by a dead-code elimination pass. The compiler may also looks for ST_SCALAR nodes that are storing the value that's coming from that variable's LD_SCALAR node, and may eliminate them since their values have not changed. <figref idref="DRAWINGS">FIG. 18</figref> illustrates an example of the resulting DFG code block for this example.</p>
<p id="p-0204" num="0260">In an embodiment, the DFG generator may distinguish between loads/stores of scalar variables versus loads/stores of array elements. When it sees a load or store node (e.g. LDKR or STKR), it may determine the kind of load/store by looking at its address input. If it sees something of the form shown in <figref idref="DRAWINGS">FIG. 14</figref>, it may use the ACON node to find the variable's name, and it may consult an internal ‘variables’ data structure to find out whether it is a scalar variable.</p>
<p id="p-0205" num="0261"><figref idref="DRAWINGS">FIG. 19</figref> shows an example of what array references may look like. Note that in this example of a hardcoded ‘1’ index, the reference looks structurally the same as a scalar local variable reference; consultation of the ‘variables’ structure may tell it that this may be an array. Note also that ACON nodes may have a variable name and a constant offset. In the second example in <figref idref="DRAWINGS">FIG. 19</figref>, the offset of 48 comes from the fact that the reference is six elements away from the base address, and each element is eight bytes in size. The third form is where the address is fed by an expression tree. Here the ACON node for ‘BB’ may be given a −8 offset to compensate for the fact that the array's indices start at one. The IMUL node may multiply by 8 because addresses are byte-oriented.</p>
<p id="p-0206" num="0262">Load and store nodes for array references may be left in place, though each store node may be given an additional enable input. In the case of a basic block, this enable input may be fed by the block's INITIATE node.</p>
<p id="p-0207" num="0263">In another embodiment, as the block's CFG is being transformed into a DFG, an anchor may be a subroutine call rather than a store. Consider the code fragment:
<ul id="ul0030" list-style="none">
    <li id="ul0030-0001" num="0000">
    <ul id="ul0031" list-style="none">
        <li id="ul0031-0001" num="0264">a=b+c</li>
        <li id="ul0031-0002" num="0265">call xyz (b, a, c)</li>
        <li id="ul0031-0003" num="0266">a=c*5</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0208" num="0267">The front end output for this code is shown at left in <figref idref="DRAWINGS">FIG. 20</figref>. It may be fed by a linked list of ARGAR nodes, each bringing in one argument to the call. After the DFG generator has built the DFG fragments from the op codes, the routine may be called that finds the subroutine call anchors. For each one, it may remove the linked list of ARGAR nodes and gives the call node multiple inputs with the arguments wired to them. This requires knowledge about the subroutine, which may be drawn from the ‘info’ file. For a stateful node, an extra input may be created for connection to an enable signal. For an external node, an extra input and an extra output may be given for trigger and done signals. (Note that by the time this step is being performed, the extra indirection for scalar parameters may have already been removed.)</p>
<p id="p-0209" num="0268">The info file may specify, for each argument, whether it is a value or an address. It also may specify which are inputs and which are outputs. If an input argument is a value (but not a constant), an appropriate load node may be created. If it's an address, it may be left unchanged. For this example, assume that this is a 2-input, 1-output subroutine. The middle of <figref idref="DRAWINGS">FIG. 20</figref> shows the DFG code fragment for the subroutine call after the call has been converted to DFGJSR, and LDKR nodes have been added for the two inputs.</p>
<p id="p-0210" num="0269">Later in the subroutine call processing, the DFGJSR node may cause another consultation with the info file. The two inputs may be handled in the same way as with inputs to other nodes: the source of the variable may be noted, the LDKR node may be removed, and the input may be wired directly to the source. For outputs, the incoming edge may be removed, the ACON node may be examined to determine which variable is receiving the output value, and that output may be noted as the new source of that variable. At right in <figref idref="DRAWINGS">FIG. 20</figref> is the complete code block after conversion to DFG.</p>
<p id="p-0211" num="0270">Calls to intrinsic functions may show up in the CFG output as non-anchor JSR and QJSR nodes. After the subroutine calls have been handled, the JSR and QJSR nodes that remain may be function calls.</p>
<p id="p-0212" num="0271">An example of such a function call may be shown as:
<ul id="ul0032" list-style="none">
    <li id="ul0032-0001" num="0000">
    <ul id="ul0033" list-style="none">
        <li id="ul0033-0001" num="0272">a=b+c</li>
        <li id="ul0033-0002" num="0273">c=min (b, a)</li>
        <li id="ul0033-0003" num="0274">a=c*5</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0213" num="0275">The function call may yield a CFG whose second assignment is shown in <figref idref="DRAWINGS">FIG. 21</figref>. As with subroutine calls, its arguments form a linked list. The arguments may be flattened to multiple inputs, as shown in the middle of the figure. From this point, the building of the DFG may take place in the usual way, yielding the graph shown at right of <figref idref="DRAWINGS">FIG. 21</figref>.</p>
<p id="p-0214" num="0276">The basic block may end in a conditional branch. In this case, the second input to the OUTPUT node may be fed by the result of a compare. As an example, consider the code:
<ul id="ul0034" list-style="none">
    <li id="ul0034-0001" num="0000">
    <ul id="ul0035" list-style="none">
        <li id="ul0035-0001" num="0277">a=b+c</li>
        <li id="ul0035-0002" num="0278">c=min (b, a)</li>
        <li id="ul0035-0003" num="0279">a=c*5</li>
        <li id="ul0035-0004" num="0280">if (a .gt. 42) a=a+1</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0215" num="0281">Note that the “a=a+1” statement is not part of the basic block; the block ends with the conditional test. The last anchor is the ICJMPZ node, and the structure above it is shown at left in <figref idref="DRAWINGS">FIG. 22</figref>. The QJSR, the DFRIR and the ICJMPZ nodes get replaced with a KCJMP. Later, the KCJMP may be turned into a KCMP _le. At right is the DFG for the code block, where the KCMP _le node may be fed by the final value of ‘a’ and its output goes to the second input of the OUTPUT.</p>
<p id="p-0216" num="0282">As was shown in <figref idref="DRAWINGS">FIGS. 9 and 10</figref>, basic blocks may be merged into a single large code block. This process may include dealing with conditionals inside the code block by computing all paths and selecting the appropriate values using multiplexers, called SELECTOR nodes. As an example, consider the code:</p>
<p id="p-0217" num="0283">
<tables id="TABLE-US-00010" num="00010">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="70pt" align="left"/>
<colspec colname="1" colwidth="147pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>aa = AL[i];</entry>
</row>
<row>
<entry/>
<entry>if (aa &gt; 42)</entry>
</row>
<row>
<entry/>
<entry>   bb = aa + 1;</entry>
</row>
<row>
<entry/>
<entry>else        \\</entry>
</row>
<row>
<entry/>
<entry>   bb = aa − 1;</entry>
</row>
<row>
<entry/>
<entry>BL[i] = bb;</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0218" num="0284">In this example, both expressions aa+1 and aa−1 are computed in each iteration, and the ‘bb’ value that is assigned to the ‘BL’ array is fed by a SELECTOR. The job of building a merged code block out of various basic blocks may include building the DFG segments for the individual blocks, and wiring them together using selectors and control signals derived from the predicate expressions of the conditionals.</p>
<p id="p-0219" num="0285">In an embodiment, the first step in creating a merged code block may include topological sorting of the merged basic blocks. This as the blocks are processed, blocks that feed control to a given block may be converted before that block is converted. In the early steps of processing, each block may be converted to a DFG similar to individual blocks. LD_SCALAR nodes may be built at the top of the DFG. Then the code blocks may be converted. The differences between a merged code block and an individual basic block may include the boolean control signals and the selector node hookup.</p>
<p id="p-0220" num="0286">In an example, consider an arbitrary block ‘B’ in a set of blocks to be merged, with three blocks able to send control to ‘B’, and ‘B’ sending control to one of two blocks when it is done. (Note: there may be any number of blocks that can send control to a block, but a given block sends control to two blocks). <figref idref="DRAWINGS">FIG. 23</figref>, at left, shows this. Assume that there is a one-bit signal from each of the incoming blocks that is high if it is transferring control to block ‘B’. Block ‘B’s active signal is computed by ORing the incoming signals. Block ‘B’ then may compute activation signals for the two blocks that it can activate. Since ‘B’ can activate two blocks, it ends with a conditional. The conditional's predicate is ANDed with the block's activation signal to provide an activation signal for the “true” signal, and the inverted predicate is ANDed with the block's activation signal to provide an activation signal for the “false” signal. <figref idref="DRAWINGS">FIG. 23</figref>, at right, shows the nodes that compute these signals in ‘B’.</p>
<p id="p-0221" num="0287">The basic block data structure has fields to store control information that may include: The ‘incoming’ field, which is a linked list of all the blocks that have control flow edges into the current block. The ‘active’ field, which is the id of the node whose output represents the current block's active signal, i.e. the output of the OR node sequence. The ‘src_true’ field, which is the id of the node that computes the “true” output control signal. The ‘src_false’ field, which is the id of the node that computes the “false” output control signal.</p>
<p id="p-0222" num="0288">After the control signals have been built, selectors are installed for the incoming data values. <figref idref="DRAWINGS">FIG. 23</figref> shows the selector nodes added to the example of <figref idref="DRAWINGS">FIG. 24</figref>, for a variable ‘x’. The outputs from the OR chain may feed these selectors. A set of selectors may be created for each variable in the loop.</p>
<p id="p-0223" num="0289">The conversion of an inner loop to a pipelined DFG may build on the conversion techniques described above. Consider an example of a loop shown as:
<ul id="ul0036" list-style="none">
    <li id="ul0036-0001" num="0000">
    <ul id="ul0037" list-style="none">
        <li id="ul0037-0001" num="0290">common/banka/AL(0:9999)</li>
        <li id="ul0037-0002" num="0291">common/bankb/BL(0:9999)</li>
        <li id="ul0037-0003" num="0292">do i=0,n−1</li>
        <li id="ul0037-0004" num="0293">aa=AL(i)</li>
        <li id="ul0037-0005" num="0294">call xyz (aa, bb)</li>
        <li id="ul0037-0006" num="0295">BL(i)=bb</li>
        <li id="ul0037-0007" num="0296">enddo</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0224" num="0297">The loop is a single basic block, with a conditional branch to itself. <figref idref="DRAWINGS">FIGS. 25A &amp; 25B</figref> shows the code fragments for the anchors. The first one reads ‘AL(i)’ and stores it in ‘aa’. The second once calls the subroutine ‘xyz’. The third one stores ‘bb’ into ‘BL(i)’. The fourth increments ‘i’. The fifth decrements ‘.Y0001’. The sixth tests ‘.Y0001’ and branches back to this block if it is greater than zero.</p>
<p id="p-0225" num="0298">This loop's code block could be transformed using the basic block approach. Each time the block was fired, it would do its loads, compute its values, and do its stores. Then it would pass control back to itself and repeat for the next iteration. While there would be some instruction level parallelism in this execution. In another embodiment, array values may be read and written on every clock, taking advantage of pipelined implementations of the various functional units.</p>
<p id="p-0226" num="0299">To achieve pipelined execution, a loop “generator” may be created, which will control the loop by firing off iteration at specified intervals. This node may be called LOOP_DRIVER. It may be triggered by the INITIATE node at the head of the code block, and may begin to emit a train of pulses. Each pulse may signal the firing of one iteration of the loop. The LOOP_DRIVER node may not determine when the loop is finished. Other parts of the dataflow graph may test for termination conditions. An iteration may be fired on every clock tick, or may be slowed down to accommodate loop carried dependencies or multiple OBM accesses. An input to the LOOP_DRIVER node may specify its “duty cycle” (i.e., how many clock ticks should occur between iteration firings).</p>
<p id="p-0227" num="0300">Loop-carried scalar dependencies may exist, so there may be a mechanism to manage these in the pipelined loop. The CIRCULATE node (in 32- or 64-bit form) exists to hold the current value of a scalar variable, and may be connected to the LOOP_DRIVER node's output. When the CIRCULATE sees its first input go high, it knows that the loop is starting up. It may capture the initial value from its second input, and thereafter proceeds to capture a new value from its third input each time the LOOP_DRIVER fires an iteration. This third input is its “circulated” value. In the case where the scalar variable does not change its value in the loop, the CIRCULATE node's output may be connected directly to its own third input.</p>
<p id="p-0228" num="0301">In an embodiment, loop termination may be determined by a conditional test somewhere in the loop body. Since the loop may be pipelined, by the time the termination condition is detected there may be some additional iterations already under way. These overflow iterations are not harmful as long as they are prevented from writing values to OBM. Thus the termination detection may gate an enable signal to the OBM stores in the loop. It also may trigger a TERMINATION node that in turn signals the ST_SCALAR nodes to capture the current values of the scalar variables.</p>
<p id="p-0229" num="0302"><figref idref="DRAWINGS">FIG. 26</figref> shows an embodiment of the DFG for the loop of <figref idref="DRAWINGS">FIGS. 25A &amp; 25B</figref>. The top layer of LD_SCALAR nodes and the bottom layer of ST_SCALAR nodes may be the same as in a simple basic block DFG. The shaded area shows the loop-specific part of the graph. There are CIRCULATE nodes for variables ‘al’, ‘bl’, ‘.Y000’ and ‘i’. The first two of these may be base addresses that do not change. The last two are down and up-counters, respectively. The LOOP_DRIVER is the loop's controller. The zero on its second input indicates that it does not need to insert any clock ticks in between loop iterations. The CIRCULATE nodes watch the LOOP_DRIVER's output signal; each time it indicates a new loop iteration, they capture their circulated input values. Loop termination may be detected by the IGT node, which compares the down-counter with zero. When the IGT output goes false, the LOOP_VALID detects this and disables the LDKR and STKR nodes, and signals the TERMINATION node. The TERMINATION node in turn triggers the ST_SCALARs so that they capture the final values from the CIRCULATE nodes.</p>
<p id="p-0230" num="0303">In an embodiment, pipelined logic in each functional unit may be active on every clock tick. Appropriate “matching” may be done for the values appearing on the input ports of any given functional unit. <figref idref="DRAWINGS">FIG. 27</figref>, at left, shows a DFG fragment that computes the expression C=A−(A+B)*B, with some assumed latencies next to the nodes. Below it is a chart showing the values of the signals on each clock tick. Because of the node latencies, the values appearing at the ports of the multiply and subtract nodes may not aligned properly. Delay nodes, which are fixed length FIFO queues, may be inserted as shown at right. The insertion is done such that, for every node in the DFG, the path lengths to all of its inputs may be equal.</p>
<p id="p-0231" num="0304">After the DFGs are built, a variety of optimizations can be performed.</p>
<p id="p-0232" num="0305">For example, after the control-dataflow graph code block has been created, some SELECTOR nodes in the graph may have both value inputs fed from the same source. Such a node can be eliminated since the same value is being selected regardless of the predicate value feeding it. This situation occurs often when basic blocks have been merged to form one larger code block. <figref idref="DRAWINGS">FIG. 28</figref> shows part of a code block that occurs when the following code fragment has its blocks merged:</p>
<p id="p-0233" num="0306">
<tables id="TABLE-US-00011" num="00011">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="70pt" align="left"/>
<colspec colname="1" colwidth="147pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>if (a &gt; b)</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="91pt" align="left"/>
<colspec colname="1" colwidth="126pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>a = b + c;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="70pt" align="left"/>
<colspec colname="1" colwidth="147pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>else</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="91pt" align="left"/>
<colspec colname="1" colwidth="126pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>b = a − c;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="70pt" align="left"/>
<colspec colname="1" colwidth="147pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>X[i] = a * b − c;</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0234" num="0307">In this example, the right-most SELECTOR's two value inputs are fed by the same source, because ‘c’ has not been assigned in either branch of the conditional. This SELECTOR can be removed.</p>
<p id="p-0235" num="0308">In another example, merged code blocks often show opportunities for simplification of boolean expressions. <figref idref="DRAWINGS">FIG. 28</figref> shows an example. The output of the OR node is the boolean expression ex+ex′, which simplifies to e. The OR node can be eliminated. More significant opportunities like this occur when nested conditionals are merged. Also, pipelined loop code blocks may be fused, feeding the output values from one loop directly into another loop.</p>
<heading id="h-0013" level="1">The Partitioner</heading>
<p id="p-0236" num="0309">Referring now to <figref idref="DRAWINGS">FIG. 29</figref> an embodiment of the partitioner component of the invention is shown. In one embodiment, the partitioner component may determine where portions of an algorithm will be executed, and therefore the targets of the compilation process. The partitioner may operate on the control-data flow graph internal representation of the HLL that defines the algorithm being compiled. The control-data flow graph taken by the partitioner may be the CFG-DFG produced by the CFG to CFG-DFG converter. The CFG-DFG is the graph of a set of functions that may be found in the file being compiled. The decision process results in portions of the code targeted to instructions for the instruction processor, and portions of logic in multiple reconfigurable chips contained in multiple reconfigurable processors.</p>
<p id="p-0237" num="0310">The partitioning process may take a single control-data flow graph as input and produce a set of output control-data flow graphs, each with a specific targeted implementation. The output CFG-DFG may be composed of partition blocks, which are sub-graphs of the original, and edges which represent the connections between the partitioned code.</p>
<p id="p-0238" num="0311">The partitioning decision is based on several factors including: the nature of the input control-data flow graph, the available hardware resources, and the size and performance characteristics of the hardware resources, among other factors.</p>
<p id="p-0239" num="0312">Many partitioning algorithms can be devised, and alternative algorithms may be invoked and evaluated in the decision process. Each such partitioning process has as its objective the targeting of hardware resources according to an optimization strategy. Given an input control-data flow graph may create a set of connected sub-graphs that fit within the available resources of the hybrid computing platform, while meeting a set of optimization criteria. The optimization criteria could for example be, maximizing the use of reconfigurable resources, minimizing the number of reconfigurable chips, minimizing the interconnection, or maximizing overall performance.</p>
<p id="p-0240" num="0313">From the initial control-data flow graph a new graph is created that may be composed of partition blocks and edges. Each partition block contains a sub-graph of the original control-data flow graph (i.e., CFG-DFG) and an assignment to a reconfigurable chip or instruction processor. Each edge of the new graph may represent a physical connection between the assigned resources.</p>
<p id="p-0241" num="0314">The task of partitioning then becomes one of creating partition blocks that meet optimization criteria, size limitations, and can be feasibly connected to the other partition blocks. The following describes one such partitioning approach for achieving an optimum performance across a hybrid system.</p>
<p id="p-0242" num="0315">In one embodiment, the partitioning step may be defined as an assignment of sub-graphs to partition blocks based upon programmer supplied partitioning syntax or directives, such as C pragmas or compiler directives, that have been passed to the partitioner as annotations in the input control-data flow graph.</p>
<p id="p-0243" num="0316">If any of the CFG-DFG sub-graph remains after acting on the programmer provided partitioning syntax direction on partitioning, then the compiler initiated partitioning may proceed as follows: enumerate all sub-graphs of the remaining CFG-DFG as candidate partition blocks; order the candidate partition blocks in order of potential, using information including: profiling data from instruction processor profiler, and DFG emulation profiling, performance estimates based on the degree of parallelism, and performance information found in the hardware logic module information file for each operation of the block, and performance of the data flow between the candidate partition block and adjoining blocks; compare partition block estimated performance as reconfigurable logic versus instruction processor code; assign candidate partition block to chip or instruction processor based on comparison; proceed through all candidate blocks; order candidate partition block by estimated performance; and select final candidate block that completely cover the CFG-DFG construct output CFG-DFG containing partition blocks.</p>
<p id="p-0244" num="0317">Once this is completed the set of partition blocks may define the execution locations and the control-data flow graphs that are loaded into those resources. The partition blocks are passed to a HLL converter. Blocks intended to run on the instruction processor may continue the compilation process into code generation and production of object files. The blocks that are targeted for reconfigurable chips, may be passed to the HLL coverter to generate the MAP Proxy code, and then pass the CFG-DFG to CGF to CFG-DFG converter to continue the process of generating logic. The partition block eventually continues the compilation process to CFG-DFG to HDL converter and ultimately to the creation of a bitstream to be included in a unified executable.</p>
<heading id="h-0014" level="1">Preparing for HDL Conversion</heading>
<p id="p-0245" num="0318">One of the outputs of The CFG to CFG-DFG converter is an ASCII text file that represents the transformed data flow graph of the procedure being compiled. The next step in compilation is the translation of this file (i.e., a .dfg file) into a format usable by the CFG-DFG to HDL converter verilog code generation phase of compilation. The MAP compiler implements a software module including logic instructions that translates an ASCII .dfg file into CFG-DFG to HDL converter internal formatted tables representing the procedure being compiled in CFG-DFG to HDL converter “tuple” format. The translated tables may be written to a binary formatted file (.grf file) which is one of the inputs to the CFG-DFG to HDL converter.</p>
<p id="p-0246" num="0319">An embodiment of the translator may have the following steps: In a first step, the command line may be parsed. The software module has one non-optional argument, which is the input file name (i.e., the .dfg file). If the input file argument is specified, then the file name is saved and the file is opened. If the input file cannot be opened, processing terminates.</p>
<p id="p-0247" num="0320">The next step in the conversion is the reading and parsing of the input file. Parsing may be performed by calling routines generated by flex (scanner generator) and bison (parser generation). As the files are parsed, the software module builds internal data structures to represent the data flow graph. The internal data-structures used to represent the graph are the same structures used by The CFG to CFG-DFG converter. The two primary structures are an array of structures representing procedure variables, and array of structures representing the basic code blocks comprising the executable portion of the procedure being compiled.</p>
<p id="p-0248" num="0321">Then, the software module may begin construction of the CFG-DFG to HDL converter tables. In one embodiment, this step is performed after the internal structures for the data flow graph have been built. The output file name may constructed from the input file name, e.g., by substituting a .grf suffix for the .dfg suffix. The input file name may be entered into a CFG-DFG to HDL converter FILENAME table, and the output file name may be entered into the CFG-DFG to HDL converter OUPTPUT_FILES table.</p>
<p id="p-0249" num="0322">Then, the symbol table may be translated to the CFG-DFG to HDL converter SCALARS table. In one embodiment, this step takes place after the CFG-DFG to HDL converter tables are initialized. The formal parameters to the procedure being compiled are by convention the first entries of the CFG-DFG to HDL converter SCALARS table. A pass is made thru the data flow graph's variables array to extract the formal parameters. For each parameter, a flag may be set in the SCALARS table indicating it is a formal parameter to the procedure. One of two other flags may be set in each entry indicating if the parameter is a scalar variable or an array. The .dfg memory storage size for a scalar or a single array element is its bit length. This may be converted to byte length and inserted in the SCALARS table entry for each parameter. Finally the name of the parameter is inserted into the SCALARS table entry and the entry completed parameter entry is inserted into the SCALARS table.</p>
<p id="p-0250" num="0323">When all the formal parameters have been processed, a second pass may be made through the data flow graphs symbol table and the remaining entries for the variables that are not formal parameters to the procedure may be processed. The processing may be performed as described for the formal parameters, except the SCALARS table entries have a local variable flag set in them instead of a the flag indicating the entry is for a formal parameter.</p>
<p id="p-0251" num="0324">Translation of the data flow graphs basic code blocks follows translation of the symbol table. A block in the data flow graph is a sequential list of nodes. A node is an operation performed on one or more input operands, with one or more outputs. The operation is represented as an ASCII string opcode. The operands are represented as an integer indicating a pseudo register number containing an input or output value. Alternately, an input operand may be a constant. In translating a data flow graph block, four CFG-DFG to HDL converter verilog generator tables are built. There is a BLOCKS table, which is a list of the code blocks. The RAW_NODES table is a sequential list of the nodes contained in the block. The PRS table is a list of the pseudo registers defined and the constants and pseudo registers referenced by each node. The CONSTANTS table contains any constant values used in the procedure being compiled.</p>
<p id="p-0252" num="0325">The translator passes thru the data flow graph's blocks array, processing one block at a time. Each new block gets and entry in the CFG-DFG to HDL converter BLOCKS table. A CFG-DFG to HDL converter BLOCKS table entry contains indices to the first and last CFG-DFG to HDL converter RAW_NODES table entries for the nodes in the block, which are described below. If the block is an exit block, meaning it is a block containing a return from the procedure being compiled, no additional information is entered into the BLOCKS table entry. If the block is a drop thru block, meaning it does not end with a conditional branch, the index to the BLOCKS table entry for the successor block is entered into the current block's BLOCKS table entry. Otherwise, the block must end with a conditional branch. In this case, the BLOCKS table indices of the two possible successor blocks (the branch true block and the branch false block) are entered into the current blocks BLOCKS table entry.</p>
<p id="p-0253" num="0326">The RAW_NODES table entries are constructed by the translator passing thru each node in the block. Processing of a node proceeds as follows. Each output pseudo register is entered into the PRS table. As it is an output, and thus defined by the operation of the node, a flag is set in the PRS table entry indicating it is defined by that node. The pseudo register number is also inserted into the PRS table entry, along with the index of the parent nodes RAW_NODES table entry in inserted into each PRS table entry as well. After the output pseudo registers are processed for the node, the inputs are processed. Input pseudo registers are entered into the PRS table in the same manner as the outputs, except the defined flag is not set on their entries. An inputs to a node which is a constants also gets a PRS table entry. When a constant input is encountered, the CFG-DFG to HDL converter CONSTANTS table is searched for an entry that matches the current constant. If a match is found, the index of the match is used, otherwise a new CONSTANTS table entry is made and the index of the new entry is used. The PRS table entry for a constant has the CONSTANTS table entry inserted to it, a flag set indicating this is a constant and not a pseudo register reference entry, and the parent node's RAW_NODES table index inserted into it.</p>
<p id="p-0254" num="0327">When all the inputs and outputs for a node are processed, a RAW_NODES table entry is made for the node. The RAW_NODES table entry contains the opcode of the node, the PRS table indices of the first and last PRS table entries associated with the node.</p>
<p id="p-0255" num="0328">When all the nodes have been translated, the tranlator writes out the CFG-DFG to HDL converter tables built thru the translation of the data flow graph to the .grf output file, and processing is complete.</p>
<heading id="h-0015" level="1">CFG-DFG Into HDL Conversion</heading>
<p id="p-0256" num="0329">One component of a compilation system for reconfigurable FPGA chips is described. The compilation system has the capability to compile higher level languages such as C and Fortran into configuration bitstreams for an FPGA that operates within a larger execution framework.</p>
<p id="p-0257" num="0330">The larger execution framework is specific to the design of the SRC MAP product. The compilation system is, in theory, readily adaptable to any aribtrary such environment.</p>
<p id="p-0258" num="0331">The component described is “CFG-DFG to HDL converter”. The purpose of CFG-DFG to HDL converter is to convert the output of “the CFG to CFG-DFG converter” into Verilog language. Verilog is a hardware description language (HDL) that can serve as input to the standard toolset provided by the manufacturers of FPGA chips.</p>
<p id="p-0259" num="0332">The CFG to CFG-DFG converter is another component of the compilation system. The purpose of The CFG to CFG-DFG converter is to process the op-codes of a traditional high level language compiler into a form more suited for pipelined execution on the MAP/FPGA system.</p>
<p id="p-0260" num="0333">The CFG to CFG-DFG converter output essentially consists of a data flow graph (DFG) created from the traditional output of a compiler, which is more of a control flow graph (CFG) form. CFG-DFG to HDL converter does not require the DFG form to perform its functions. It can also readily work with CFG style input. However, efficient execution in the MAP/FPGA requires the DFG form.</p>
<p id="p-0261" num="0334">The overall compilation strategy is that the Verilog language created by the Traditional Compiler/The CFG to CFG-DFG converter/CFG-DFG to HDL converter combination serves as the guide for how to connect pre-defined “hardware” modules together to acheive an efficient representation on the FPGA/MAP of the user code. Thus, CFG-DFG to HDL converter does not perform any “synthesis” of op-code constructs into Verilog language. CFG-DFG to HDL converter simply selects from a known set of pre-defined hardware modules those modules that match the functionality that a specific op-code node requires, and provides the interconnections between them. The creation, maintenance, and managment of the pre-defined hardware modules is a major component of the overall compilation effort, and is not discussed here, except for a discussion of how the relationship between op-code nodes and pre-defined hardware modules is managed.</p>
<p id="p-0262" num="0335">While performing its tasks, CFG-DFG to HDL converter manages a set of internal tables that represent various pieces of information required for the processing. Eventually, the tables have enough information such that the Verilog representaion of the user code can be output. Input files for CFG-DFG to HDL converter consist of a simple file format, which contains some information already pre-processed into CFG-DFG to HDL converter table format.</p>
<p id="p-0263" num="0336">Note that CFG-DFG to HDL converter only has a single table format. Table management is simplified by only allowing the addition, and not deletion, of table entries. Entries can be marked invalid with flags, and simply not copied to further stages of table development. Table entries are also of fixed sized, making table searches rapid.</p>
<p id="p-0264" num="0337">CFG-DFG to HDL converter inputs consist of command-line switches, and two types of input files. Command line switches are used to specify the names of input files, and to control precise details of CFG-DFG to HDL converter processing. For the purpose of this document, the details of CFG-DFG to HDL converter processing controlled by these switches are unimportant. Hence, the only substantive inputs are the two types of input files as discussed here.</p>
<p id="p-0265" num="0338">An input op-codefile is specified with the “-f” switch. Only one op-code file may be input. This file consists of the data flow graph output of the CFG to CFG-DFG converter converted to CFG-DFG to HDL converter file format by the translator utility called “dfg2grf” described above.</p>
<p id="p-0266" num="0339">Op-code nodes: An op-code node consists of the name of the node, and lists of input and output psuedo registers. A psuedo register is simply a number, and is used to correlate the flow of data between nodes.</p>
<p id="p-0267" num="0340">Block information. Indicates how the opcodes are divided into basic blocks. A basic block has the same definition as in a traditional compiler, i.e.: a sequence of instructions with a single entry point and a single exit point.</p>
<p id="p-0268" num="0341">Constants information. An op-code node may reference a constant value as an input, instead of a psuedo register.</p>
<p id="p-0269" num="0342">“Scalars” Information. Information about arguments passed to the compiled subroutine function.</p>
<p id="p-0270" num="0343">Filename information. Used to generate the output filename of the generated Verilog file.</p>
<p id="p-0271" num="0344">Any number of “CFG-DFG to HDL converter info” files may be input by use of the “-a” switch. A “CFG-DFG to HDL converter info” file consists of “info” file information converted to CFG-DFG to HDL converter file/table format by the “info2grf” utility. The input to “info2grf” consists of an ascii text “info” file, and is intended to be edited and maintained by developers/users.</p>
<p id="p-0272" num="0345">The “info” file is the mechanism by which CFG-DFG to HDL converter makes the association between the op-code node names, and the resulting module names that are output in the Verilog language file. It can also be used to input information about a user-defined op-code/module relationship.</p>
<p id="p-0273" num="0346">Information contained in the input CFG-DFG to HDL converter hardware logic module information file: “info” files contain all information about modules used by the compilation system as a whole. Only the information used by CFG-DFG to HDL converter is mentioned here. The information used by CFG-DFG to HDL converter is:</p>
<p id="p-0274" num="0347">Name of the op-code node. Name of the module that corresponds to the op-code node. Latency in clocks of the time betwen inputs and corresponding outputs. A list of inputs, their bit-widths, and their names, in order as the psuedo registers appear in the op-code node in the The CFG to CFG-DFG converter-output flow graph. A list of outputs, their bit-widths, and their names, in order as the psuedo registers appear in the op-code node in the The CFG to CFG-DFG converter-output flow graph. Names, bitwidths, and the external signal names to which they connect, of any hardware-related module I/O connections that are required for execution, but do not appear in the flow graph. (This would include, for example, a CLOCK signal, or enable/reset signals that may be implicit in the context of a given node's residence in a block).</p>
<p id="p-0275" num="0348">CFG-DFG to HDL converter outputs: CFG-DFG to HDL converter output consists of a Verilog language file, which is ascii text. The filename is generated from information carried in the op-code input file. In general, the filename is the “basename” of the high level language file, suffixed with “.v”. For example, a high level language file named “toto.c” results in a Verilog language file named “toto.v”.</p>
<p id="p-0276" num="0349">The Verilog language file has three “include” statements referencing “PREAMBLE.v”, “AMBLE.v”, and “POSTAMBLE.v” “OBM_DR_SET.v” and “FR_SET.v”. These three include statements bracket and divide the declaritive and instantitive sections of the generated Verilog code. They allow the generated Verilog code to be used without modification in a variety of execution and simulation environments, by providing different files to resolve the includes.</p>
<p id="p-0277" num="0350">CFG-DFG to HDL converter Processing Flow: Initilization: Initialization processing of CFG-DFG to HDL converter consists of validating the command line switches, and reading the input files. The data within the input files is read directly into internal CFG-DFG to HDL converter tables.</p>
<p id="p-0278" num="0351">One of the primary functions is the creation of many internal tables that contain information to be used throught CFG-DFG to HDL converter processing. The two most primary tables that are created are the EQUIV_IN and EQUIV_OUT tables. These tables contain the essence of the information contained in the “info” files. The entries in these two tables have a one-to-one correspondence, and direct CFG-DFG to HDL converter to convert a given named op-code node in the input flow graph to a given instantiation of a pre-defined hardware module in the output Verilog file. A MODULES table is also created, which has the details of the module connections for the modules indexed by EQUIV_OUT.</p>
<p id="p-0279" num="0352">Various tables for special purpose processing are also created at initialization. This allows information for target hardware specific processing to be contained in one area of the source code. All special purpose processing specific for the target hardware environment can be controlled, for example, by the various flags and table settings generated in this initialization phase. It is thus possible to re-target CFG-DFG to HDL converter processing for another platform by first, adding such functionality as required elsewhere, and then selecting the initilization processing that would occur to enable this. In theory different execution environments could be supported through the simple use of command-line switches.</p>
<p id="p-0280" num="0353">Such special case target hardware specific processing includes support</p>
<p id="p-0281" num="0354">for: Lists of global signals that the non-psuedo register-related connections of modules will connect to. Information regarding the memory banks and how memory related op-code nodes will be connected. Information regarding the “MIRROR” modules, which are the SRC mechanism for connecting parameters input to the compiled subroutine to the FPGA instantiated design, and potentially returning an updated value. Connections to “code_block_reset” will actually be connected to the “block_reset” signal of the current block of residence for a given module.</p>
<p id="p-0282" num="0355">Process raw input to the internal tables: The input table of op-code flow graph nodes is read into the NODE table, and the names of the op-code nodes are searched for in the EQUIV_IN table. When found, the corresponding EQUIV_OUT table entry gives the MODULE index of the predefined hardware module. An index to this module information is placed in the NODE table.</p>
<p id="p-0283" num="0356">Verify consistency of bit widths between op-code nodes: Now, all op-code nodes in the NODES table have an assigned hardware module. All the psuedo registers are now examined, to verify that there is consistent bit-width matching for psuedo registers marking the output of one module going to the input of another module. While this work is performed, a table containing psuedo register information is built.</p>
<p id="p-0284" num="0357">Note that CFG-DFG to HDL converter has no information about, or need for, the “type” of the data that flows between modules. Only the bitwidth is important.</p>
<p id="p-0285" num="0358">Mark certain shift functions for “inlining”: The NODES table is examined, and certain modules that represent a “shift” operation are processed. The name convention of the module indicates whether the shift is by a constant amount, and by how much. If the module is such a shift, this fact, and the direction of the shift, is marked in the NODES table entry with flags. The shift count for the module is also extracted and placed in a field of the NODES table entry. This information will be used during output of the generated Verilog code to “inline”, or represent directly with Verilog code syntax, the functionality of the module without actually instantiating the module.</p>
<p id="p-0286" num="0359">Analyze op-code node dependency: The NODES table and associated psuedo registers are now examined to create a table of node dependecies (NODE_DEPS). The NODE_DEPS table indicates which op-code nodes in the NODES table are pre-requisites of (i.e. have data flowing directly to, via a psuedo register) other op-code nodes.</p>
<p id="p-0287" num="0360">Op-code nodes are issued as follows: The NODE_DEPS table is examined, and a total count of number of predecessors for a given NODE entry is created and stored in the NODE table entry. A “clock counter” in every NODE table entry is zeroed. A table is created (PICT_NODES) that has a list of every NODE entry that has a predecessor count of zero.</p>
<p id="p-0288" num="0361">Issue op-code nodes as follows: Placement of a NODES table entry's index in the PICT_NODES table is the basic indication that an op-code node has been “issued”. When the PICT_NODE entry is made, an entry is also made in a table listing the specific instance of the module. (INSTANCES table) Since there might be many instances of the same module type, it is through the INSTANCES table that unique names are generated for each instance of a given module type.</p>
<p id="p-0289" num="0362">After an initilization phase as described above, the process of issuance of op-code nodes continues as follows: For all new entries in the PICT_NODES table, examine the NODE_DEPS table and decrement the predecessor count in those NODE table entries who have the issued op-code node as a predecessor. Adjust the clock count of each affected NODE table entry by the latency of the module who was the predecessor. Create an associated INSTANCES table entry for each node newly added to the PICT_NODES table.</p>
<p id="p-0290" num="0363">Perform “wiring” of outputs of predecessor INSTANCES table entries to the newly created INSTANCES table entries by building up information in the WIRING table. The WIRING table has information regarding source and destination INSTANCES table index, and the argument, or parameter, number.</p>
<p id="p-0291" num="0364">Now examine the NODES table for op-code nodes whose predecessor count has newly gone to zero. add these entries to the PICT_NODES table, and continue as above. Continue this process until all op-code nodes have been issued.</p>
<p id="p-0292" num="0365">Output HDL file: Processing has now developed to the point where the output of the HDL file can commence. There is still some processing that occurs during this process including emitting declaritive statements for all “wire” connections and wiring to connect the basic blocks to each other.</p>
<p id="p-0293" num="0366">For all entries in INSTANCES table, first check to see if it has been “inlined”. If so, output appropriate HDL syntax. If not, output instance declaration of the appropriate module, and the connections of the module's I/O pins to the various wires etc. as described in the WIRING table.</p>
<heading id="h-0016" level="1">Bitstream Configuration</heading>
<p id="p-0294" num="0367">A component of the compiling system that does the inclusion of the bitstream file created from the Xilinx tools into a compilable C code that will ultimately be integrated into the user's executable. This component takes as input <b>1</b> or <b>2</b> FPGA bitstream files which are in a binary files containing programming data only. The result of this compilation phase is a C code that contains two structures, one for each fpga bitstream. Each structure contains the packed representation of the FPGA bitstream contained in an array, described below; a pointer to the internal location for the bitstream; the number of the FPGA this bitstream represents, the length of the bitstream array; the address of the beginning of the bitstream array; and, a pointer to the C version of the MAP routine used for emulation.</p>
<p id="p-0295" num="0368">The FPGA bitstream files are read into a buffer as 4096 byte quantities. This buffer is then packed into 64-bit words and written out to the bitstream array contained in the appropriate bitstream's structure. The last quantity read from the bitstream file is padded out to be complete 64-bit words and those words are also written out to the array. After completing the entire bitstream file, a check is done to determine if the last word is the last word of the cache line. If not, more padding is done to ensure that the last array words completely fill out the 4 word cache line on the micro-processor system.</p>
<p id="p-0296" num="0369">After completing the translation of the bitstream file, the remaining information and pointers are inserted into the structure that represents the first FPGA bitstream. The same process is done again to read in and translate the second FPGA bitstream. Either one of these bitstreams may be present, or neither may be present for this compilation phase. The bitstream configurator handles all cases of null or present fpga bitstream files and build the appropriate data structures to reflect that.</p>
<heading id="h-0017" level="1">Integration Into a Unified Executable</heading>
<p id="p-0297" num="0370">As a result of creating object files that will be executed on different and therefore non-homogeneous platforms, the next step in the compilation process must bring these various components together to build what will be referred to as a “unified executable”. A unified executable, then, contains both the machine code that will execute on the instruction processor as well as the machine code that will execute on the hardware logic processor.</p>
<p id="p-0298" num="0371">Since the unified executable resides in the address space of the instruction processor during its execution, the format of the unified executable must be compatible with the application interface accepted by the instruction processor. In order to allow fpga bitstreams to exist within the unified executable, a method was developed to encapsulate the bitstream data into an acceptable format.</p>
<p id="p-0299" num="0372">Once bitstreams have been generated by the compilation process, they are read into C structures, with one C structure created for each bitstream being accessed in this program. These C structures are unique to each bitstream, as they have been named to match the internal name created during the control flow information file generation phase. Tagging the separate control flow information files with unique names allows the resultant bitstream to also have a unique identifier when built into a C structure. If the bitstream configuration is meant to be used in another compilation process, the C structure could be saved at this point as a binary file.</p>
<p id="p-0300" num="0373">Bitstream C structures can either reside in the unified executable or on the microprocessor at a location that has been made available during execution. By default, the bitstreams created during the compilation process are embedded in the unified execution and therefore are in the address space at execution time. If there are many bitstream structures being configured for a particular executable, then it is possible to embed only some or none of the bitstream C structures in the unified executable. If not all of the bitstream structures reside in the executable's address space at execution time, then the runtime environment will need to read in the appropriate bitstream structures at the point where the hardware logic configuration for that bitstream is invoked.</p>
<p id="p-0301" num="0374">After deciding whether to include the bitstream C structures in the unified executable, the available standard linker on the microrocessor can be used to create it from the object files. Since all the object files are of the appropriate binary interface, nothing special must be done to accommodate including both micro processor machine code and hardware logic machine code.</p>
<p id="p-0302" num="0375">As shown in the following diagram, the bitstreams representing the hardware logic configuration to be run at execution time may exist in one of two locations shown in <figref idref="DRAWINGS">FIG. 30</figref>.</p>
<heading id="h-0018" level="1">Runtime Environment</heading>
<p id="p-0303" num="0376">The runtime environment in which the unified binary executes may be extended beyond the runtime environment in which a instruction processor binary executes. The MAP library may include support routines for emulation and simulation of a dataflow graph. From a user view, there are three categories of routines in the runtime environment: memory management, MAP resource management, and MAP execution.</p>
<p id="p-0304" num="0377">Memory Management: Hardware limitations may require blocks of memory transferred between the instruction processor environment and the reconfigurable processor environment to start on cache boundaries. Two functions are provided to aid in cache alignment in the event such hardware limitations are present.</p>
<p id="p-0305" num="0378">The first function, addr32 (or, alternately IADDR32 for Fortran), is a software module including logic instructions for accepting an arbitrary memory address and returning the address of the first cache aligned word of memory which is equal to or greater than the input address argument. An array that is to be aligned may be declared with padding at the beginning and end of the array that approximates the memory of a cache line. A pointer may be declared to point to the cache aligned array. The padded array may be passed as an argument to addr32, and the pointer may be set to the result of the function. References to the aligned array may be made thru the pointer.</p>
<p id="p-0306" num="0379">The second function, Cache Aligned Allocate (Alternatively CACHE_ALIGNED_ALLOCATE for Fortran) is software module that includes logic instructions for receiving a single integer argument and generating a pointer to the allocated space which begins on a cache aligned boundary. The argument may be the size of the memory allocation request in bytes. This function may be used to declare a pointer. In addition, users may call this function to allocate the required space for an array, and set the pointer to the result of the function. References to the array may be made thru the pointer.</p>
<p id="p-0307" num="0380">MAP resource management: It is possible to dynamically modify the runtime environment by adding and deleting reconfigurable hardware resources to the job. While executing on the instruction processor, no MAP resources are needed. Prior to executing a MAP procedure, reconfigurable hardware resources must be allocated to the job. This could occur at job start-up time, or anytime prior to MAP execution. After execution of the MAP procedure, execution of the unified binary may not require MAP resources for some time, so it may be desirable to release one or more MAP processors until they are again needed. Similarly, it may be necessary to add additional map resources prior to executing another MAP procedure. Two functions are provided to manage MAP resources.</p>
<p id="p-0308" num="0381">The first function, map_allocate (MAP_ALLOCATE (N, STAT) for Fortran) is a software module that receives a single input argument that indicates the number of MAP resources to be allocated. A zero result value (STAT for Fortran) indicates successful allocation. A non-zero result (STAT) indicates the request was not successfully satisfied.</p>
<p id="p-0309" num="0382">The second function, map_free (MAP_FREE (N, STAT) for Fortran) is a software module that has a single input argument indicating the number of MAP resources to release from the job. A zero return value (STAT for Fortran) indicates the resources were successfully freed from the job. A non-zero return value (STAT) indicates an error was encountered in trying to release the resources.</p>
<p id="p-0310" num="0383">MAP resources are identified by a MAP id number. The first MAP allocated to a job has a MAP id of 0. If n resources are allocated to a job at any time, they are identified as 0, 1, . . . n−1. MAP resources with the largest valued MAP id numbers are deallocated first. For example, if seven MAP resources are allocated to a job, they are identified by the integers 0 thru 6. If three are deallocated, MAP ids 0 thru 3 remain allocated to the job. If two are then allocated, the most recently allocated MAP ids are 4 and 5.</p>
<p id="p-0311" num="0384">MAP execution: The details of configuring the reconfigurable hardware with the logic bitstreams, and the details of transfer of control to the reconfigurable hardware and back to the instruction processor hidden from the user in the runtime environment. The MAP proxy code generated by the HLL converter performs these tasks. The routine MAP_Execute called by the proxy code is discussed here.</p>
<p id="p-0312" num="0385">MAP_Execute and its various runtime entry points perform the following functions. First, the MAP proxy code has indicated which MAP resources are to be used for execution of the MAP procedure. MAP_Execute locks the resources to prevent other threads of execution (or user jobs) from accessing the resources while the MAP procedure is executing. It checks to see if the resources to be used are correctly configured with the user logic for the MAP procedure to be executed. If not, it locates the appropriate logic bit streams and configures the MAP resources. Execution on the reconfigurable hardware is initiated. MAP_Execute waits for execution to complete, unlocks the resources, and then signals completion to, or transfers control back to the instruction processor.</p>
<heading id="h-0019" level="1">Emulation in the Runtime Environment</heading>
<p id="p-0313" num="0386">Emulation is a very useful debugging tool as well as a tool that allows performance profiling at the data flow graph level. Emulation capability is built into the run time environment of executables built by the MAP compiling system.</p>
<p id="p-0314" num="0387">The run-time libraries support three distinct environments: 1) execution with MAP hardware, 2) execution with emulated MAP and dataflow graph emulation, 3) execution with emulated MAP, and simulated user logic. The selection of the particular environment is done at run-time based on environment variable settings:
<ul id="ul0038" list-style="none">
    <li id="ul0038-0001" num="0000">
    <ul id="ul0039" list-style="none">
        <li id="ul0039-0001" num="0388">MAPHW=MAPIII—indicates executing with MAP hardware</li>
        <li id="ul0039-0002" num="0389">MAPHW=EMUIII—indicates executing with the MAP emulator</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0315" num="0390">If emulation mode is being used, an additional environment variable determines how the logic for the MAP is handled:
<ul id="ul0040" list-style="none">
    <li id="ul0040-0001" num="0000">
    <ul id="ul0041" list-style="none">
        <li id="ul0041-0001" num="0391">ULOGIC_TYPE=EMU—indicates that data flow graph emulation is to be used</li>
        <li id="ul0041-0002" num="0392">ULOGIC_TYPE=SIM—indicates that user logic will run in a Verilog Simulator</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0316" num="0393">When MAPHW=EMUIII is set, the run-time library routines that manage the MAP call MAP emulation routines instead of the MAP hardware support routines. Every executable is capable of running on either hardware or in emulation. The MAP Emulator takes the place of the MAP control processor and its resources: the communication link, the Onboard Memory, Data Registers, and Flag Registers, providing software emulation versions of these resources. <figref idref="DRAWINGS">FIGS. 31 and 32</figref> show the structure of the MAP emulator.</p>
<p id="p-0317" num="0394">The MAP Emulator executes as pthreads separate from the instruction processor application code and processes. The emulator threads are started when the run-time routines detect that emulation mode is selected rather than MAP hardware mode. Just as the MAP hardware runs asynchronous to the instruction processor, the emulator also run asynchronously.</p>
<p id="p-0318" num="0395">The function of the MAP emulator is to emulate the communication and control link to the instruction processor based application, and to provide interfaces to the User Logic running in Data Flow Emulation or as Verilog Simulation.</p>
<p id="p-0319" num="0396">Data Flow emulation runs also as a separate pthread interfacing to the MAP emulator through the interface routines used to read or write Flag registers, Data Registers, and On-Board Memory.</p>
<p id="p-0320" num="0397">If the user logic generated by the MAP compiler has been created as Verilog, a Verilog simulator can be used to execute the user logic together with the MAP emulator. The Verilog simulation is run as a separate executable that communicates with the MAP emulator through a shared memory segment. In this case the simulator provides the Onboard memory, Data registers and Flag Registers, while the MAP emulator provides the MAP control processor.</p>
<p id="p-0321" num="0398"><figref idref="DRAWINGS">FIG. 31</figref> shows the MAP emulator together with DFG emulation, and <figref idref="DRAWINGS">FIG. 32</figref> shows the MAP emulator with a Verilog Simulator.</p>
<p id="p-0322" num="0399">In another embodiment, dataflow graph emulation may be conducted as follows: The CFG to CFG-DFG converter step of the MAP compiler creates two files: a dataflow graph (in text form) of the user's subroutine, and an emulation logic file. The dataflow graph file may be dual purpose: It may be used by the CFG-DFG to HDL converter to produce a Verilog translation of the subroutine, and it also may be read in by the emulation logic routine when emulation is being used to validate the source code or to collect performance data.</p>
<p id="p-0323" num="0400">In an embodiment, a dataflow graph may include nodes and directed edges, where nodes may be functional units and edges are data connections that carry output values from one node to inputs of other nodes. It may be possible to run a dataflow simulator using the dataflow graph. Simulation can be useful to: 1) validate both the source code and its translation to dataflow form, 2) print trace information for debugging and, 3) gather performance estimations, among other functions.</p>
<p id="p-0324" num="0401">In an embodiment Dataflow simulation may take place in a token driven simulation mode that may be a loosely coupled, asynchronous simulation where sequencing may be valid but time is not taken into account. In this mode, there is no notion of things happening “simultaneously”. Any node can be executed at any time, as long as there are values available on its inputs. The data values are called “tokens”, and tokens can queue at the input ports of the nodes. In another embodiment, a clock accurate simulation takes into account the system clock and the execution latencies of the functional units. Here the word “simultaneous” has meaning.</p>
<p id="p-0325" num="0402"><figref idref="DRAWINGS">FIG. 33</figref> shows a flow chart of an embodiment of a token driven dataflow simulator. In one example of an embodiment, the routine “dfg_simulate” may be called from the emulation logic file to start the simulator. In this example, the simulator may start by reading the DFG file and building an internal representation. Then it begins the simulation, starting with block zero (by definition, the entrance block). Each time it simulates a code block, it first clears the queues and node states, then triggers the block's execution by sending a single token to the INITIATE node at the top of the block. It then loops, looking for nodes that can fire. In this example, the “firing rule” for most nodes is that the node can fire if there is a token available on every one of its inputs. “Firing” consists of taking a token from each input queue, and using these values to perform the node's particular function. That function produces one or more output values, which are sent out as tokens on the node's outputs. When an output fans out to multiple nodes, a value token may be delivered to each of the queues of the target nodes.</p>
<p id="p-0326" num="0403"><figref idref="DRAWINGS">FIG. 34</figref> shows an example of a DFG fragment according to an embodiment, where the fragment is stepped through each iteration of the simulator's inner loop. Three values are waiting on the input queues at the start. The top two nodes are marked as able to fire. They consume a token from each queue, and send result tokens to the queues of the nodes fed by their outputs. Note that at t=1, the bottom node has a value on its right input, but none on its left input, so it cannot fire. At t=2 there are two tokens in the queue of the right input of the bottom node. After five passes of the simulator's inner loop, this fragment has no more values that can be processed.</p>
<p id="p-0327" num="0404">There are, in general, many correct firing orders for a dataflow graph. It would have been equally valid, in the above example, to have fired the upper nodes three times before firing any of the other nodes. The fact that tokens arrive in queues in order, ensures that corresponding values on the inputs of each node will “match up” correctly. The node input queues in the simulator are designed to expand as needed: any time a value is sent to a queue and the queue is full, the queue size is increased to accommodate the new value. The processing order shown in the flow chart, where in each sweep across the nodes a node will fire only once even if it had more values it could have processed, may be chosen so as to minimize the necessary queue lengths.</p>
<p id="p-0328" num="0405">Various node firing orders that may occur during asynchronous dataflow simulation produce equivalent results when the dataflow nodes are “pure functional”, that is, when each node's output tokens(s) may depend on the input tokens that have been fetched to compute the outputs. Not all nodes may be pure functional. Some nodes may have “state”, i.e. they have some memory of what they have done previously. These nodes may be called “stateful”. Some nodes may interact with the surrounding hardware, i.e. they read or write to flag registers, data registers or on-board memory. The dataflow simulator may execute these nodes by making calls to the appropriate MAP emulator functions.</p>
<p id="p-0329" num="0406">In another embodiment, dataflow simulation may take place in a mode that more closely mimics what happens on reconfigurable hardware. Clock-accurate simulation assumes the existence of a system clock, and the functional units execute synchronously, coordinated by the clock. In the hardware, every functional unit may perform an operation in every clock cycle, regardless of whether there are valid data on its inputs. The dataflow graphs, and the logic circuits that are produced from the graphs, may be produced in such a way that “junk” data from the functional units is ignored.</p>
<p id="p-0330" num="0407">Clock-accurate simulation may be very wasteful of compute time if it operates in a mode where each node of the graph computes in every clock cycle. In an embodiment, it is possible to simulate in a mode where valid computations are performed by the dataflow nodes, as in token-driven simulation, and the synchronous aspect of the system is captured by attaching “time stamps” to the tokens. The simulation queues up tokens on the inputs, and the node firings and executions may match up values on the queues by their time stamps.</p>
<p id="p-0331" num="0408">Though clock-accurate simulation may be more complex than asynchronous token-driven simulation, they may more closely reflect the operations and synchronization that occur on reconfigurable hardware. Thus a clock-accurate simulation has the following advantages: 1) Incorrectly-placed delay nodes will produce error indications in a clock-accurate simulation, whereas they will appear to execute correctly in an asynchronous simulation. 2) Clock-accurate simulation can give accurate execution time predictions, since it simulates the system clock. 3) When reads and writes to the same memory bank occur in an asynchronous simulation, the order in which they occur may be unspecified and therefore they may not occur in the same order as they would occur on the reconfigurable hardware. But clock-accurate simulation may produce an execution order that is guaranteed to match what happens on the hardware.</p>
<p id="p-0332" num="0409">In another embodiment, issues related to the simulation of dataflow graphs produced by the MAP compiler are addressed, including:</p>
<p id="p-0333" num="0410">Stateful node issues: A stateful node has one or more internal fields in its node structure that it uses to keep track of some aspect of what has occurred in the past. One example of a stateful node is an accumulator that sums up the values of the token stream on its input. An accumulator node needs a place in its node structure to hold the current value of the accumulating sum. Other node types may require more complex state. The dataflow node structure has the field of type “NodeState”, which is defined by the struct:</p>
<p id="p-0334" num="0411">
<tables id="TABLE-US-00012" num="00012">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="70pt" align="left"/>
<colspec colname="1" colwidth="147pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>typedef struct {</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="91pt" align="left"/>
<colspec colname="1" colwidth="126pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>int initialized;</entry>
</row>
<row>
<entry/>
<entry>void *state;</entry>
</row>
<row>
<entry/>
<entry>} NodeState;</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0335" num="0412">In an embodiment, whenever a code block is entered, the “initialized” fields of its stateful nodes are set to “false”. The node execution routine for stateful nodes will check this field, and if it is false they may perform an initialization, typically by allocating a data structure appropriate for the state of the node type, and setting the “state” pointer to point to it. The fields of that structure are also set to an appropriate initial state. The “initialized” field is then set to “true” so that subsequent firings of the node will not attempt to reinitialize.</p>
<p id="p-0336" num="0413">Firing and Execution Rules: In an embodiment, each node type in a dataflow graph has two functions associated with it: a “firing rule” and an “execution rule”. The firing rule for most nodes may be simple: a node can fire when there may be a data value on every one if its inputs. There may be a few exceptions to this in the case of loop control nodes that manage the pipelined behavior of a loop dataflow graph. The execution rule for a node is the specification of how it uses its input values to create its output values, i.e. the execution rule may be the node's function. When the simulator reads the dataflow graph file and builds the internal node structures, each node has two function pointers that may be used to point to the firing and execution functions for that node.</p>
<p id="p-0337" num="0414">User Macros: In an embodiment, the MAP compiler allows users to reference their own hardware logic units when compiling codes to reconfigurable hardware. In order to do dataflow simulation of a compiled code, the user supplies an execution function for each unit being referenced. This is the “execution rule” for the node. For user macros, it is assumed that it will obey the “normal” firing rule, i.e., that the node can fire when there is a value on every input. The dataflow simulation routines for user macros are read in from the “info” file and are then handled internally in the same way that the SRC built-in macros are handled: the user's simulation function may be compiled and the associated dataflow nodes are given pointers to the function.</p>
<p id="p-0338" num="0415">Although the invention has been described and illustrated with a certain degree of particularity, it is understood that the present disclosure has been made only by way of example, and that numerous changes in the combination and arrangement of parts can be resorted to by those skilled in the art without departing from the spirit and scope of the invention, as hereinafter claimed.</p>
<p id="p-0339" num="0416">The words “comprise,” “comprising,” “include,” “including,” and “includes” when used in this specification and in the following claims are intended to specify the presence of stated features, integers, components, or steps, but they do not preclude the presence or addition of one or more other features, integers, components, steps, or groups.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>I claim:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method of forming a control-dataflow graph comprising:
<claim-text>separating a control flow graph into two or more basic blocks; and</claim-text>
<claim-text>converting said two or more basic blocks into code blocks, wherein the code blocks are formed into the control-dataflow graph and wherein nodes in the control-dataflow graph represent functional units and directed edges between the nodes represent data connections that bring output data items from one functional unit to the inputs of other functional units</claim-text>
<claim-text>portioning the control-dataflow graph into a reconfigurable hardware portion and an instruction processor portion wherein the reconfigurable hardware portion is converted into a bit-stream data file that can be loaded into individual circuits in a reconfigurable processor and wherein the instruction processor portion is converted into an instruction processor object file; and</claim-text>
<claim-text>linking together the bit-stream data file and the instruction processor object file to form a unified executable capable of configuring the reconfigurable processor to run a high level language.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, comprising forming a load node in at least one of said basic blocks.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, comprising forming a store node in at least one of said code blocks.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, comprising inserting a delay node in at least one of said code blocks.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein said code blocks comprise a first code block and a second code block that are sequentially executed.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, comprising converting said first and second code blocks into concurrent code blocks that are executed in parallel.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, comprising merging done signals from said concurrent code blocks with a LATCH_AND function.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the control flow graph comprises at least one opcode.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the control-dataflow graph comprises an upper-level node, which corresponds to a code block, with single-bit edges that represent control flow between code blocks.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. A method of forming a control-dataflow graph comprising:
<claim-text>separating hardware logic module calls in a basic block of a control-flow graph into individual code blocks;</claim-text>
<claim-text>combining two or more of the individual code blocks into a combined code block; and</claim-text>
<claim-text>converting the combined code block into at least a portion of the control-dataflow graph and wherein nodes in the control-dataflow graph represent functional units and directed edges between the nodes represent data connections that bring output data items from one functional unit to the inputs of other functional units</claim-text>
<claim-text>portioning the control-dataflow graph into a reconfigurable hardware portion and an instruction processor portion, wherein the reconfigurable hardware portion is converted into a bit-stream data file that can be loaded into individual circuits in a reconfigurable processor and wherein the instruction processor portion is converted into an instruction processor object file; and</claim-text>
<claim-text>linking together the bit-stream data file and the instruction processor object file to form a unified executable capable of configuring the reconfigurable processor to run a high level language.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, comprising forming a load node in the combined code block.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, comprising forming a store node in the control-dataflow graph.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein said combined code block comprises a loop function.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The method of <claim-ref idref="CLM-00013">claim 13</claim-ref>, comprising topoiogically sorting code blocks associated with the loop function starting with a head loop block.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The method of <claim-ref idref="CLM-00014">claim 14</claim-ref>, comprising forming a circulate node in the code blocks associated with the loop function.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, comprising forming deiay nodes in the control-dataflow graph block.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, comprising optimizing said code blocks by removing unnecessary selectors, simplifying Boolean expressions, or fusing pipelined loops.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. A computer program product comprising:
<claim-text>a computer usabie medium having a computer readabie program code embodied therein for causing a formation of a control-dataflow graph for converting high level languages into executable code, the computer readable program code comprising:</claim-text>
<claim-text>computer readable program code for causing a computer to separate hardware logic module calls in a basic block of a control flow graph into individual code blocks;</claim-text>
<claim-text>computer readable program code for causing the computer to combine two or more of the individual code blocks into a combined code block;</claim-text>
<claim-text>computer readable program code for causing the computer to convert the combined code block into at least a portion of the control-dataflow graph and wherein nodes in the control-dataflow graph represent functional units and directed edges between the nodes represent data connections that bring output data items from one functional unit to the inputs of other functional units</claim-text>
<claim-text>computer readable program code for portioning the control-dataflow graph into a reconfigurable hardware portion and an instruction processor portion, wherein the reconfigurable hardware portion is converted into a bit-stream data file that can be loaded into individual circuits in a reconfigurable processor and wherein the instruction processor portion is converted into an instruction processor object file; and</claim-text>
<claim-text>computer readable program code for linking together the bit-stream data file and the instruction processor object file to form a unified executable capable of configuring the reconfigurable processor to run a high level language.</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>
