<us-patent-grant lang="EN" dtd-version="v4.2 2006-08-23" file="US07299303-20071120.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20071106" date-publ="20071120">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>07299303</doc-number>
<kind>B2</kind>
<date>20071120</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>10158541</doc-number>
<date>20020529</date>
</document-id>
</application-reference>
<us-application-series-code>10</us-application-series-code>
<us-term-of-grant>
<us-term-extension>1109</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>13</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>3</main-group>
<subgroup>00</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>13</main-group>
<subgroup>42</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>710 10</main-classification>
<further-classification>710  8</further-classification>
<further-classification>710  9</further-classification>
<further-classification>710 33</further-classification>
</classification-national>
<invention-title id="d0e53">System and method for pendant bus for serially chaining multiple portable pendant peripherals</invention-title>
<references-cited>
<citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5537605</doc-number>
<kind>A</kind>
<name>Teece</name>
<date>19960700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>712  1</main-classification></classification-national>
</citation>
<citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5617420</doc-number>
<kind>A</kind>
<name>Whetsel</name>
<date>19970400</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>5819051</doc-number>
<kind>A</kind>
<name>Murray et al.</name>
<date>19981000</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>5938742</doc-number>
<kind>A</kind>
<name>Faddell et al.</name>
<date>19990800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>710  9</main-classification></classification-national>
</citation>
<citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>6665742</doc-number>
<kind>B2</kind>
<name>Owen et al.</name>
<date>20031200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>710 10</main-classification></classification-national>
</citation>
<citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>6686530</doc-number>
<kind>B2</kind>
<name>Juszkiewicz et al.</name>
<date>20040200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification> 84600</main-classification></classification-national>
</citation>
<citation>
<nplcit num="00007">
<othercit>Cypress Semiconductor Corp. “<i>USB On-The-Go Protocol</i>” pp. 1-79.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
</references-cited>
<number-of-claims>8</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>710  8- 10</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>710 33</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>20</number-of-drawing-sheets>
<number-of-figures>20</number-of-figures>
</figures>
<us-related-documents>
<us-provisional-application>
<document-id>
<country>US</country>
<doc-number>60349787</doc-number>
<kind>00</kind>
<date>20020116</date>
</document-id>
</us-provisional-application>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20030133471</doc-number>
<kind>A1</kind>
<date>20030717</date>
</document-id>
</related-publication>
</us-related-documents>
<parties>
<applicants>
<applicant sequence="001" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Calligaro</last-name>
<first-name>Michael P.</first-name>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="002" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Voth</last-name>
<first-name>David William</first-name>
<address>
<city>Woodinville</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="003" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Ramig</last-name>
<first-name>Randal J.</first-name>
<address>
<city>Seattle</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="004" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Cazzaro</last-name>
<first-name>Roberto</first-name>
<address>
<city>Kirkland</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
</applicants>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Merchant &amp; Gould P.C.</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</parties>
<assignees>
<assignee>
<addressbook>
<orgname>Microsoft Corporation</orgname>
<role>02</role>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Peyton</last-name>
<first-name>Tammara</first-name>
<department>2182</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A communication protocol for use between serially chained portable pendant peripherals and a portable host device. The bus communications system protocol enables multiple low power input/output peripherals to communicate over a bi-directional data line with a portable host device such as a PDA or cellular phone. A message packet data structure for use in the bus communications system includes a device identifier, a packet type identifier, and message data bits. The packet type identifier describes the actions associated with the packet. A method determines whether the message packet received by a device is intended for the device by evaluating if the device identifier is zero. If the device identifier is other than zero, the method modifies the device identifier and communicates the message packet to another device in the bus communications system.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="108.88mm" wi="234.70mm" file="US07299303-20071120-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="239.61mm" wi="167.89mm" orientation="landscape" file="US07299303-20071120-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="251.54mm" wi="183.90mm" orientation="landscape" file="US07299303-20071120-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="185.25mm" wi="174.41mm" orientation="landscape" file="US07299303-20071120-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="165.44mm" wi="151.64mm" file="US07299303-20071120-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="241.55mm" wi="191.77mm" file="US07299303-20071120-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="215.73mm" wi="169.33mm" orientation="landscape" file="US07299303-20071120-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="148.42mm" wi="155.70mm" file="US07299303-20071120-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="153.50mm" wi="161.46mm" file="US07299303-20071120-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="179.15mm" wi="159.68mm" file="US07299303-20071120-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="176.53mm" wi="177.21mm" file="US07299303-20071120-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="147.91mm" wi="157.65mm" file="US07299303-20071120-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="160.61mm" wi="168.99mm" file="US07299303-20071120-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00013" num="00013">
<img id="EMI-D00013" he="225.21mm" wi="169.42mm" file="US07299303-20071120-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00014" num="00014">
<img id="EMI-D00014" he="247.57mm" wi="166.37mm" file="US07299303-20071120-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00015" num="00015">
<img id="EMI-D00015" he="191.77mm" wi="168.32mm" file="US07299303-20071120-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00016" num="00016">
<img id="EMI-D00016" he="243.16mm" wi="175.01mm" orientation="landscape" file="US07299303-20071120-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00017" num="00017">
<img id="EMI-D00017" he="237.91mm" wi="156.21mm" file="US07299303-20071120-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00018" num="00018">
<img id="EMI-D00018" he="179.49mm" wi="153.42mm" file="US07299303-20071120-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00019" num="00019">
<img id="EMI-D00019" he="145.97mm" wi="155.53mm" file="US07299303-20071120-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00020" num="00020">
<img id="EMI-D00020" he="253.07mm" wi="194.56mm" file="US07299303-20071120-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">RELATED APPLICATIONS</heading>
<p id="p-0002" num="0001">This application claims the benefit of U.S. Provisional Application No. 60/349,787 filed on Jan. 16, 2002, which is hereby claimed under 35 U.S.C. §119(e).</p>
<p id="p-0003" num="0002">This application hereby incorporates by reference co-pending U.S. application Ser. No. 10/159,899 entitled “System and Method for a Pendant Bus,” filed on May 29, 2002.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0002" level="1">FIELD OF THE INVENTION</heading>
<p id="p-0004" num="0003">The present invention relates generally to bus communication, and more particularly to a bus communication protocol system and method between low-speed portable serial devices.</p>
<heading id="h-0003" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0005" num="0004">Computing devices are becoming increasing more powerful and portable. With the increase in portability, end-users have also increased their desire to easily and inexpensively attach portable peripheral components to their portable computing devices. For example, an end-user purchasing a portable cellular phone or personal digital assistant (PDA) may wish to connect to it an external keypad, remote audio control, headphones, a game control device, or other similar low-speed portable devices. Moreover, the end-user may wish to connect many peripheral components at the same time to the portable host device.</p>
<p id="p-0006" num="0005">Today, however, the end-user is provided a limited selection of portable peripheral components. Often, the selection is limited to a microphone and headphones. This limitation may arise because a host device manufacturer has implemented a proprietary bus architecture. The result is that the end-user is further limited to the peripherals provided by a single manufacturer.</p>
<p id="p-0007" num="0006">While several bus architectures, such as USB, I2C, and SPI, exist today, none of them provide a simple, cost-effective, low-speed portable device.</p>
<p id="p-0008" num="0007">Therefore, there is a need in the art for a system and method for providing a general purpose, functional bus for chaining low-speed portable peripheral components to a portable host device. It is with respect to these considerations and others that the present invention has been made.</p>
<heading id="h-0004" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0009" num="0008">This summary of the invention section is intended to introduce the reader to aspects of the invention and is not a complete description of the invention. Particular aspects of the invention are pointed out in other sections herein below, and the invention is set forth in the appended claims, which alone demarcate its scope.</p>
<p id="p-0010" num="0009">The present invention provides a system and method for a communication protocol between serially chained pendant peripherals and a portable host device. The system protocol enables multiple low power input/output peripherals to communicate over a bi-directional data line with a portable host device such as a PDA or cellular phone.</p>
<p id="p-0011" num="0010">In one aspect of the present invention, a computer-readable medium is encoded with a data structure for use in a pendant bus communications system. The data structure comprises a first data field, a second data field, and a third data field. The first data field includes a device identifier having a current value. The current value is modified each time the data structure is evaluated by a pendant peripheral device in the pendant bus communications system. The current value matches a predetermined value, if the data structure reaches a pendant peripheral device with which the data structure is associated. The second data field includes a packet type identifier. The packet type identifier includes information that describes actions to be taken by the associated pendant peripheral device in response to receiving the data structure. The third data field includes data bits. A format of the data bits is defined by the packet type identifier in the second data field.</p>
<p id="p-0012" num="0011">In accordance with another aspect of the present invention, a computer-readable medium encoded with a message packet comprises a message packet means for communicating information between a pendant peripheral device and a host device over a serial pendant bus communications system. In another aspect of the computer-readable medium, the message packet means comprises one of a control type, a data type, a command type, an indicator type, a character text type, a bitmap text type, a smart keyboard type, a graphics type, a test type, and a Need Driver type.</p>
<p id="p-0013" num="0012">In accordance with still another aspect of the present invention, a computer-implemented method is directed at determining whether a message packet received by a pendant peripheral device in a bus communications system is intended for the pendant peripheral device. The method evaluates a device identifier field associated with the message packet. The device identifier field includes a value associated with an intended pendant peripheral device. If the value corresponds to a predetermined value, then the method operates on the message packet. If the value is other than the predetermined value, then the method modifies the value of the device identifier field and communicates the message packet to another device in the bus communications system.</p>
<p id="p-0014" num="0013">In accordance with yet another aspect of the present invention, a method for communicating a message to a pendant peripheral device in a bus communications system is provided. The method computes a value which if modified in a predictable manner by intervening pendant peripheral devices between a host-computing device and an intended pendant peripheral device results in a predetermined value associated with the intended pendant peripheral device. The method also issues the message including the computed value over the bus communications system.</p>
<p id="p-0015" num="0014">In still another aspect of the present invention, a method is directed at indicating that a device has been plugged into a bus communications system. The method includes issuing a first control packet indicating that the device has been plugged into the bus communications system. The control packet describes features supported by the plugged-in device in a first level of detail. The method also includes receiving a second control packet requesting further detail of the supported features of the plugged-in device, and issuing a first data packet describing supported features of the plugged-in device in a second level of detail.</p>
<p id="p-0016" num="0015">In yet another aspect of the present invention, a method is directed towards communicating that a pendant peripheral device has been unplugged from a bus communications system. The method includes receiving a message packet indicating an occurrence of an unplug event resulting from a pendant peripheral device being unplugged from the bus communications system. Moreover, the method includes evaluating the message packet to determine a value that indicates a number of intervening pendant peripheral devices between a host-computing device and the unplugged pendant peripheral device.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0017" num="0016">Non-limiting and non-exhaustive embodiments of the present invention are described with reference to the following drawings. In the drawings, like reference numerals refer to like parts throughout the various figures unless otherwise specified.</p>
<p id="p-0018" num="0017">For a better understanding of the present invention, reference will be made to the following Detailed Description of the Invention, which is to be read in association with the accompanying drawings, wherein:</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 1</figref> illustrates a functional block diagram of an exemplary portable computing system incorporating a pendant bus communication system;</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 2</figref> is a schematic diagram illustrating exemplary data and clock lines, and circuitry of the pendant bus communication system shown in <figref idref="DRAWINGS">FIG. 1</figref>;</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 3</figref> is a graphical representation of a message construct or format for use in a pendant bus communication system;</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 4</figref> is a graphical representation of one embodiment of a control message packet format for use in a pendant bus communication system;</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 5</figref> is a graphical representation of one embodiment of an error control packet format for use in a pendant bus communication system;</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 6</figref> is a graphical representation of one embodiment of a plug/unplug packet format for use in a pendant bus communication system;</p>
<p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. 7</figref> is a graphical representation of one embodiment of a soft reset control packet format for use in a pendant bus communication system;</p>
<p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. 8</figref> is a graphical representation of one embodiment of a hard reset control packet format for use in a pendant bus communication system;</p>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. 9</figref> is a graphical representation of one embodiment of a Get Device Capabilities control packet format for use in a pendant bus communication system;</p>
<p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. 10</figref> is a graphical representation of one embodiment of a Device globally Unique IDentifier (GUID) control packet format for use in a pendant bus communication system;</p>
<p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. 11</figref> is a graphical representation of one embodiment of a data message packet format for use in a pendant bus communication system;</p>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. 12</figref> is a graphical representation of one embodiment of a command message packet format for use in a pendant bus communication system;</p>
<p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. 13</figref> is one embodiment of a table for possible application data information for use in an application data information field of the command message packet shown in <figref idref="DRAWINGS">FIG. 12</figref>;</p>
<p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. 14</figref> is a graphical representation of one embodiment of an indicator message packet format for use in a pendant bus communication system;</p>
<p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. 15</figref> is a graphical representation of one embodiment of a character text message packet format for use in a pendant bus communication system;</p>
<p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. 16</figref> is a graphical representation of one embodiment of a bitmap text message packet format for use in a pendant bus communication system;</p>
<p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. 17</figref> is a graphical representation of one embodiment of a smart keyboard message packet format for use in a pendant bus communication system;</p>
<p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. 18</figref> is a graphical representation of one embodiment of a test message packet format for use in a pendant bus communication system;</p>
<p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. 19</figref> is a graphical representation of one embodiment of a Need Driver message packet format for use in a pendant bus communication system; and</p>
<p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. 20</figref> are message flow diagrams illustrating one implementation of messaging protocol flows between a pendant host device and a pendant peripheral, in accordance with the present invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0006" level="1">DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT</heading>
<p id="p-0039" num="0038">The present invention now will be described more fully hereinafter with reference to the accompanying drawings, which form a part hereof, and which show, by way of illustration, specific exemplary embodiments by which the invention may be practiced. This invention may, however, be embodied in many different forms and should not be construed as limited to the embodiments set forth herein; rather, these embodiments are provided so that this disclosure will be thorough and complete, and will fully convey the scope of the invention to those skilled in the art. Among other things, the present invention may be embodied as methods or devices. Accordingly, the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment or an embodiment combining software and hardware aspects. The following detailed description is, therefore, not to be taken in a limiting sense.</p>
<p id="p-0040" num="0039">Throughout the specification, the term “connected” means a direct connection between the things that are connected, without any intermediary devices or components. The term “coupled,” means a direct connection between the things that are connected, or an indirect connection through one or more either passive or active intermediary devices or components. The term “circuit” means one or more passive and/or active components that are arranged to cooperate with one another to provide a desired function. The term “signal” means at least one current signal, voltage signal, or data signal. The meaning of “a,” “an,” and “the” include plural references. The meaning of “in” includes “in” and “on.”</p>
<p id="p-0041" num="0040">Briefly stated, the present invention provides a pendant bus communication protocol system and method for communicating between serially chained portable pendant peripherals and a portable host device. Moreover, a data structure is provided for a message packet for use in the pendant bus communication system.</p>
<p id="h-0007" num="0000">Illustrative Environment</p>
<p id="p-0042" num="0041"><figref idref="DRAWINGS">FIG. 1</figref> illustrates a functional block diagram of one embodiment of an exemplary pendant bus communication system <b>100</b>, in accordance with the present invention.</p>
<p id="p-0043" num="0042">As shown in the figure, pendant bus communication system <b>100</b> includes host device <b>102</b>, pendant peripherals <b>104</b>-<b>106</b>, and optional headphones <b>110</b>. Optional headphones <b>110</b> may include an optional microphone (not shown). Optional headphones <b>110</b> also may be replaced by an optional microphone (not shown). It is understood that while only three pendant peripherals (<b>104</b>-<b>106</b>) are illustrated in <figref idref="DRAWINGS">FIG. 1</figref>, the present invention is not so limited, and additional pendant peripherals may be included without departing from the scope or spirit of the present invention. For example, in one embodiment, pendant bus communication system <b>100</b> includes up to about 16 pendant peripherals that are serially chained together.</p>
<p id="p-0044" num="0043">In the nomenclature of pendant bus communication system <b>100</b>, an “upstream” pendant peripheral is the pendant peripheral closest to host device <b>102</b> of two connected pendant peripherals, while a “downstream” pendant peripheral is the pendant peripheral furthest from host device <b>102</b>.</p>
<p id="p-0045" num="0044">Pendant peripherals <b>104</b>-<b>106</b> may include any of a number of low power, low speed portable I/O devices that an end-user may wish to connect to host device <b>102</b>. For example, pendant peripherals <b>104</b>-<b>106</b> may include a portable audio player control device, a portable keypad, a portable game control device, and the like. Pendant peripherals <b>104</b>-<b>106</b> also may be configured to provide graphical displays, as well as audio output or input for the end-user. Pendant peripherals <b>104</b>-<b>106</b> are described in more detail in conjunction with <figref idref="DRAWINGS">FIG. 3</figref>.</p>
<p id="p-0046" num="0045">A typical low speed portable I/O device, suitable as a pendant peripheral, includes devices with bus speeds of up to about 25 KHz. One example of the present invention provides for a pendant peripheral with a transfer rate of about 3.84 Kbits per second, with about 25% pendant bus utilization.</p>
<p id="p-0047" num="0046">Host device <b>102</b> is in communication with pendant peripheral <b>104</b> through data<sub>1</sub>, clock<sub>1</sub>, and audio<sub>1 </sub>lines. Pendant peripheral <b>104</b> is in communication with pendant peripheral <b>105</b> through data<sub>2</sub>, clock<sub>2</sub>, and audio<sub>2 </sub>lines. Similarly, downstream pendant peripheral <b>106</b> is in communication with a prior pendant peripheral in the serial chain through data<sub>N</sub>, clock<sub>N</sub>, and audio<sub>N </sub>lines. Optional headphones <b>110</b> are in communication with pendant peripheral <b>106</b> through data<sub>H</sub>, clock<sub>H</sub>, and audio<sub>H </sub>lines.</p>
<p id="p-0048" num="0047">Data<sub>1-N and H </sub>lines provide a bi-directional communication path for message packets to be sent between host device <b>102</b> and a pendant peripheral in the chain employing a store-and-forward approach. Communications typically occurs between host device <b>102</b> and pendant peripheral <b>104</b>-<b>106</b>, and not between two pendant peripherals. An exemplary data<sub>1 </sub>line is described in more detail below in conjunction with <figref idref="DRAWINGS">FIG. 2</figref>.</p>
<p id="p-0049" num="0048">Clock<sub>1 </sub>line provides a clock signal Clk<sub>1 </sub>(not shown) that is driven by a clocking circuit (not shown) in host device <b>102</b>. Clock signal Clk<sub>1 </sub>is directed towards controlling the timing of message packet transfers between host device <b>102</b> and pendant peripheral <b>104</b>.</p>
<p id="p-0050" num="0049">Similarly, clock<sub>2 </sub>line provides a clock signal Clk<sub>2 </sub>(not shown) that is driven by a clocking circuit (not shown) in pendant peripheral <b>104</b>. Clock<sub>N </sub>line provides a clock signal Clk<sub>N </sub>(not shown) that is driven by a clocking circuit (not shown) in pendant peripheral <b>105</b>; and clock<sub>H </sub>line provides a clock signal Clk<sub>H </sub>(not shown) that is driven by a clocking circuit (not shown) in pendant peripheral <b>106</b>. That is, each clock line is always controlled by the upstream device. Moreover, each clock line is isolated from every other clock line. Each upstream device controls the transfer of message packets between itself and a downstream device, such that there is no contention for a data line.</p>
<p id="p-0051" num="0050">Audio<sub>1-N and H </sub>lines support audio communications between host device <b>102</b> and optional headphones <b>100</b> (or optional microphone, not shown). Pendant peripherals <b>104</b>-<b>106</b> may also be configured to provide audio information on audio<sub>2−N, and H </sub>lines. Typically, however, audio information is ‘passed’ through pendant peripherals <b>104</b>-<b>106</b> to optional headphones <b>100</b>. Moreover, it will be readily appreciated that audio<sub>1-N, and H </sub>lines may provide mono- or stereo-signals, without departing from the scope or spirit of the present invention.</p>
<p id="p-0052" num="0051">A single cable is typically employed to bundle a given set of data, clock, and audio lines between two portable devices. For example, data<sub>1</sub>, clock<sub>1</sub>, and audio<sub>1 </sub>lines are typically bundled into a single cable that may be coupled between host device <b>102</b> and pendant peripheral <b>104</b>. A typical cable length may be upward towards six feet. Moreover, standard twisted unshielded cable may be employed, without departing from the scope or spirit of the present invention. Each cable employs a special 2.5 mm jack to couple the selected portable devices. The special 2.5 mm jack is downward compatible with standard 2.5 mm audio jack configurations.</p>
<p id="p-0053" num="0052">Included in each single cable are at least two additional lines (see <figref idref="DRAWINGS">FIG. 2</figref>). The first additional line provides power from host device <b>102</b> that may be employed by pendant peripherals <b>104</b>-<b>106</b>. The second additional line provides a common ground. By providing power to pendant peripherals <b>104</b>-<b>106</b>, a pendant peripheral need not include its own power source, thereby enabling it to be lighter in weight, and smaller in size.</p>
<p id="p-0054" num="0053"><figref idref="DRAWINGS">FIG. 2</figref> is a schematic diagram illustrating one embodiment of data and clock lines, and circuitry of pendant bus communication system <b>100</b> of <figref idref="DRAWINGS">FIG. 1</figref>, in accordance with the present invention. As seen in <figref idref="DRAWINGS">FIG. 2</figref>, host-pendant peripheral system <b>200</b> includes host device <b>102</b> and pendant peripheral <b>104</b>, coupled through clock<sub>1 </sub>line and a data<sub>1 </sub>line. Pendant peripheral <b>104</b> includes pendant controller <b>206</b>.</p>
<p id="p-0055" num="0054">As shown in <figref idref="DRAWINGS">FIG. 2</figref>, data<sub>1 </sub>line includes a cable, a first pull-down resister R<b>1</b><sub>D</sub>, a first series-drive resister R<b>1</b><sub>S</sub>, a first load capacitance circuit C<b>1</b><sub>L</sub>, a second series-drive resister R<b>2</b><sub>S</sub>, a second load capacitance circuit C<b>2</b><sub>L</sub>, and a first pull-up resister R<b>1</b><sub>U</sub>. Also shown in the figure, first series-drive resister R<b>1</b><sub>S </sub>and first load capacitance circuit C<b>1</b><sub>L </sub>comprise filter <b>201</b>, while second series-drive resister R<b>2</b><sub>S </sub>and second load capacitance circuit C<b>2</b><sub>L </sub>comprise filter <b>202</b>.</p>
<p id="p-0056" num="0055">Host device <b>102</b> is coupled to data<sub>1 </sub>line at node N<b>202</b> through a first general-purpose input/output connection GPIO<sub>1</sub>. First pull-down resister R<b>1</b><sub>D </sub>is coupled between node N<b>202</b> and a circuit ground potential GND. First series-drive resister R<b>1</b><sub>S </sub>is coupled between node N<b>202</b> and node N<b>204</b>. First load capacitance circuit C<b>1</b><sub>L </sub>is coupled between node N<b>204</b> and circuit ground potential GND. Second load capacitance circuit C<b>2</b><sub>L </sub>is coupled between node N<b>204</b> and circuit ground potential GND. Second series-drive resister R<b>2</b><sub>S </sub>is coupled between node N<b>204</b> and node N<b>208</b>. First pull-up resister R<b>1</b><sub>U </sub>is coupled between node N<b>206</b> and node N<b>208</b>. Pendant controller <b>206</b> is coupled to data<sub>1 </sub>line at node N<b>208</b>.</p>
<p id="p-0057" num="0056">Also shown in <figref idref="DRAWINGS">FIG. 2</figref>, clock<sub>1 </sub>line includes a second pull-down resister R<b>2</b><sub>D</sub>, a third series-drive resister R<b>3</b><sub>S</sub>, a third load capacitance circuit C<b>3</b><sub>L</sub>, a fourth series-drive resister R<b>4</b><sub>S</sub>, a fourth load capacitance circuit C<b>4</b><sub>L</sub>, and a second pull-up resister R<b>2</b><sub>U</sub>. Moreover, shown in the figure, third series-drive resister R<b>3</b><sub>S </sub>and third load capacitance circuit C<b>3</b><sub>L </sub>comprise filter <b>203</b>, while fourth series-drive resister R<b>4</b><sub>S </sub>and fourth load capacitance circuit C<b>4</b><sub>L </sub>comprise filter <b>204</b>.</p>
<p id="p-0058" num="0057">Host device <b>102</b> is also coupled to clock<sub>1 </sub>line at node N<b>210</b> through a second general-purpose input/output connection GPIO<sub>2</sub>. Second pull-down resister R<b>2</b><sub>D </sub>is coupled between node N<b>210</b> and circuit ground potential GND. Third series-drive resister R<b>3</b><sub>S </sub>is coupled between node N<b>210</b> and node N<b>212</b>. Third load capacitance circuit C<b>3</b><sub>L </sub>is coupled between node N<b>212</b> and circuit ground potential GND. Fourth load capacitance circuit C<b>4</b><sub>L </sub>is coupled between node N<b>212</b> and circuit ground potential GND. Fourth series-drive resister R<b>4</b><sub>S </sub>is coupled between node N<b>212</b> and node N<b>216</b>. Second pull-up resister R<b>2</b><sub>U </sub>is coupled between node N<b>214</b> and node N<b>216</b>. Pendant controller <b>206</b> is also coupled to clock<sub>1 </sub>line at node N<b>216</b>.</p>
<p id="p-0059" num="0058">In one embodiment of the present invention, pendant peripheral <b>104</b> includes first and second pull-up resisters R<b>1</b><sub>U </sub>and R<b>2</b><sub>U</sub>, and filters <b>202</b> and <b>204</b>. Additionally, host device <b>102</b> includes first and second pull-down resisters R<b>1</b><sub>D </sub>and R<b>2</b><sub>D</sub>, and filters <b>201</b> and <b>203</b>.</p>
<p id="p-0060" num="0059">In another embodiment, first pull-down resister R<b>1</b><sub>D </sub>and second pull-down resister R<b>2</b><sub>D</sub>, are of approximately equal resistance values. Resistance values for first and second pull-down resisters R<b>1</b><sub>D </sub>and R<b>2</b><sub>D </sub>are selected to overcome any leakage current that may arise in data<sub>1</sub>, line and clock<sub>1 </sub>line, respectively, such that a “hard zero” value is approached when the line is unplugged. Typical values for first and second pull-down resisters R<b>1</b><sub>D </sub>and R<b>2</b><sub>D </sub>are between about 370K-10M ohms, and preferably are about 390K ohms. First, second, third, and fourth series-drive resisters R<b>1</b><sub>S</sub>, R<b>2</b><sub>S</sub>, R<b>3</b><sub>S</sub>, and R<b>4</b><sub>S</sub>, are all of approximately equal resistance values, ranging between about 0.95K to about 1.05K ohms. In one exemplary embodiment, first, second, third, and fourth series-drive resisters R<b>1</b><sub>S</sub>, R<b>2</b><sub>S</sub>, R<b>3</b><sub>S</sub>, and R<b>4</b><sub>S</sub>, are nominally 1K ohms. Moreover, first and second pull-resisters R<b>1</b><sub>U </sub>and R<b>2</b><sub>U </sub>are of approximately equal resistance values, ranging from between about 14K-16K ohms, and nominally about 15K ohms.</p>
<p id="p-0061" num="0060">Similarly, first, second, third, and fourth load capacitance circuits C<b>1</b><sub>L</sub>, C<b>2</b><sub>L</sub>, C<b>3</b><sub>L</sub>, and C<b>4</b><sub>L </sub>are approximately equal in capacitance values, ranging from between about 90 pF-110 pF, and nominally about 100 pF.</p>
<p id="p-0062" num="0061">Filters <b>201</b>-<b>204</b> are arranged to operate as low-pass signal filters such that electromagnetic interference (EMI) is minimized on data<sub>1 </sub>and clock<sub>1 </sub>lines. Moreover, filters <b>201</b>-<b>204</b> also are arranged to protect against electrostatic discharges (ESD) of up to about 15 KV.</p>
<p id="p-0063" num="0062">Pendant peripheral <b>104</b> may have more components, features, or functionality than illustrated in <figref idref="DRAWINGS">FIG. 2</figref>. Briefly, however, pendant controller <b>206</b> is arranged to receive, send, and process data<sub>1 </sub>signals with another device. Moreover, pendant controller <b>206</b> may store received data<sub>1 </sub>signals in message buffers (not shown), and forward received data<sub>1 </sub>signals to yet another device in pendant bus communication system <b>100</b> Pendant controller <b>206</b> may also enable pendant peripheral <b>104</b> to format and display data<sub>1 </sub>signals to an end-user. Pendant peripheral <b>206</b> may further receive inputs from the end-user, process the inputs, and transmit the inputs as data<sub>1 </sub>signals upstream to host device <b>102</b>.</p>
<p id="p-0064" num="0063">In one embodiment, pendant controller <b>206</b> is implemented as a microprocessor. However, it is understood that other controller types could be utilized without departing from the scope or spirit of the invention.</p>
<p id="p-0065" num="0064">In operation, a supply voltage V<sub>kk </sub>from host device <b>102</b> is coupled to node N<b>206</b> and to node N<b>214</b>, to provide limited power to pendant peripheral <b>104</b>. Supply voltage V<sub>kk </sub>typically ranges between about 2.7V-3.6V, and is nominally about 3.V. Moreover, supply voltage V<sub>kk</sub>, together with first pull-up resister R<b>1</b><sub>U </sub>creates an open-collector circuit configuration that enables pendant devices to communicate bi-directionally on a single data line.</p>
<p id="p-0066" num="0065">First pull-up resister R<b>1</b><sub>U </sub>operates to hold a data<sub>1 </sub>line signal in a high (typically, a non-active, logical 1) state until pendant peripheral <b>104</b> drives the data<sub>1 </sub>line signal low (a logical 0). That is, if pendant peripheral <b>104</b> wants to send a message packet to host device <b>102</b>, pendant peripheral <b>104</b> first asserts (drives low) the data<sub>1 </sub>line signal.</p>
<p id="p-0067" num="0066">When pendant peripheral <b>104</b> is first coupled to data<sub>1 </sub>line, first pull-up resister R<b>1</b><sub>U </sub>operates to drive the data<sub>1 </sub>line high, overriding a weak low signal level on data<sub>1 </sub>line. Similarly, second pull-up resister R<b>2</b><sub>U </sub>operates to pull the clock<sub>1 </sub>line high. Once coupled to data<sub>1 </sub>line, pendant peripheral <b>104</b> communicates a plug/unplug control packet to host device <b>102</b> by driving the data<sub>1 </sub>line low, creating a logical 0. The drop in the data<sub>1 </sub>line signal level is sensed by host device <b>102</b> and interpreted as pendant peripheral <b>104</b> being “plugged in.”</p>
<p id="p-0068" num="0067">When pendant peripheral <b>104</b> is unplugged or uncoupled from data<sub>1 </sub>line, first pull-down resister R<b>1</b><sub>D </sub>drives data<sub>1 </sub>line to a ground potential. A logical 0 indicates a disconnect condition. Similarly, second pull-down resister R<b>2</b><sub>D </sub>drives clock<sub>1 </sub>line signal to a ground potential, creating a logical 0 on clock<sub>1 </sub>line. When a downstream pendant peripheral, such as pendant peripheral <b>105</b> in <figref idref="DRAWINGS">FIG. 1</figref> is unplugged, the upstream pendant peripheral detects the disconnect by sensing the logical 0 on the relevant data line. The upstream pendant peripheral then transmits a “unplug” packet (i.e., a plug/unplug control packet) to host device <b>102</b> indicating that a downstream pendant peripheral has been removed. A plug/unplug control packet format is described in more detail below in conjunction with <figref idref="DRAWINGS">FIGS. 3-4</figref>.</p>
<p id="h-0008" num="0000">Pendant Messaging Packet Protocols</p>
<p id="p-0069" num="0068"><figref idref="DRAWINGS">FIG. 3</figref> is a graphical representation of a message construct or format for use in pendant bus communications systems, in accordance with the present invention. The disclosed embodiment is but one format and alternatives will become readily apparent to those skilled in the art from the teachings of the present invention.</p>
<p id="p-0070" num="0069">As shown in the figure, message packet <b>300</b> includes bus version field <b>302</b>, device identifier field <b>304</b>, message packet type field <b>306</b>, and message data field <b>308</b>.</p>
<p id="p-0071" num="0070">The bus version field <b>302</b> represents the version of pendant bus communication protocol to which the message packet <b>300</b> adheres.</p>
<p id="p-0072" num="0071">Device identifier field <b>304</b> dynamically associates message packet <b>300</b> with a pendant peripheral on the pendant bus. Each time message packet <b>300</b> is forwarded upstream (i.e., toward the host device), a forwarding pendant peripheral increments device identifier field <b>304</b> in the message packet. In one embodiment, device identifier field <b>304</b> is incremented by one. Upon reaching host device <b>102</b>, the device identifier field <b>304</b> indicates where in the chain the pendant peripheral that originated message packet <b>300</b> is located. Similarly, each time message packet <b>300</b> is forwarded downstream, a forwarding pendant peripheral decrements the device identifier field <b>304</b>. In one embodiment, device identifier field <b>304</b> is decremented by one. When the device identifier field <b>304</b> is zero, the message packet <b>300</b> has reached its destination. Thus, every pendant peripheral perceives its device identifier to be zero, thereby reducing enumeration overhead on the pendant bus. Moreover, host device <b>102</b> need only maintain a list of a location in the chain and a set of capabilities associated with each pendant peripheral in the chain.</p>
<p id="p-0073" num="0072">It is readily apparent that device identifier field <b>304</b> need not be perceived as zero. For example, every pendant peripheral may perceive its device identifier to be one, minus one, or the like, without departing from the scope or spirit of the present invention.</p>
<p id="p-0074" num="0073">Message packet type field <b>306</b> indicates a type of format of message data field <b>308</b>. As shown in <figref idref="DRAWINGS">FIG. 3</figref>, message packet type <b>306</b> may indicate a variety of message packet types. Message packet type field <b>306</b> and associated message data field <b>308</b> are described in detail below.</p>
<p id="p-0075" num="0074">In one embodiment of the present invention, message packet type field <b>306</b> represents control message packet types, data message packet types, command message packet types, indicator message packet types, character text message packet types, bitmap text message packet types, smart keyboard message types, graphics message packet types, test message packet types, and a Need Driver message packet type. Each of these message packet types is described below. The present invention, however, is not limited to these message packet types, and other message packet types may readily included without departing from the scope of spirit of the present invention.</p>
<p id="p-0076" num="0075">Message data field <b>308</b> includes data that is employed by a selected device, such as pendant peripheral<sub>1-N</sub>, or host device <b>102</b>, in <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0077" num="0076">In one embodiment of the present invention, message packet <b>300</b> is 48 bits long. In message packet <b>300</b>, as described in the present implementation, the 0 bit is the first bit to travel down data<sub>1-N, and H </sub>lines of <figref idref="DRAWINGS">FIG. 1</figref>. Bits associated with message packet <b>300</b>, however, typically are bitwise little endian. For example, a four bit value of 1, will travel down data<sub>1-N, and H </sub>lines as a 1 followed by three 0s. Thus, as shown in <figref idref="DRAWINGS">FIG. 3</figref>, bus version field <b>302</b> includes bits <b>3</b> through <b>0</b>. Device identifier field <b>304</b> includes bits <b>7</b> through <b>4</b>. Message packet type field <b>306</b> includes bits <b>11</b> through <b>8</b>, and message data field <b>308</b> includes bits <b>47</b> through <b>12</b>.</p>
<p id="p-0078" num="0077">Several embodiments of message packet <b>300</b> formats are now described for different message packet types, in accordance with the present invention, with reference to <figref idref="DRAWINGS">FIGS. 4-19</figref>.</p>
<p id="p-0079" num="0078">The first message packet type described is a control message packet type. <figref idref="DRAWINGS">FIG. 4</figref> is a graphical representation of one embodiment of a control message packet format for use in a pendant bus communication system, in accordance with the present invention. Control message packet types include error control packet types, plug/unplug control packet types, soft reset control packet types, hard reset control packet types, get device capabilities control packet types, and device Globally Unique Identifier (GUID) control packet types; each of which are described below.</p>
<p id="p-0080" num="0079"><figref idref="DRAWINGS">FIG. 5</figref> is a graphical representation of one embodiment of an error control packet format for use in a pendant bus communication system. Error control packet types include message packets where message data field <b>308</b> represents possible error (and no error) events. For example, message data field <b>308</b> may indicate an error if an end-user attempts to couple too many pendant peripherals to pendant bus communication system <b>100</b>. An error may also arise if message packet <b>300</b> is recognizably garbled or if a multi-packet communication is out of sequence.</p>
<p id="p-0081" num="0080">Plug/unplug control packet type is another control message packet type. <figref idref="DRAWINGS">FIG. 6</figref> is a graphical representation of one embodiment of a plug/unplug control packet format for use in a pendant bus communications system, in accordance with the present invention. In this embodiment, plug/unplug control packet <b>600</b> includes message data field <b>608</b>, structured as shown in <figref idref="DRAWINGS">FIG. 6</figref>. In one embodiment, message data field <b>608</b> is 16 bits long.</p>
<p id="p-0082" num="0081">Plug/unplug control packet types are employed to indicate to host device <b>102</b> that a pendant peripheral is plugged into or removed from pendant bus communication system <b>100</b>. Plug/unplug control packet types also indicate to host device <b>102</b> which message packet types a pendant peripheral is enabled to employ.</p>
<p id="p-0083" num="0082">As briefly described above, when a pendant device first receives power, it communicates a plug/unplug control packet type to host device <b>102</b>. If an upstream pendant peripheral is unplugged from a downstream pendant peripheral, the immediate downstream pendant peripheral that is still connected sends a plug/unplug control packet type with all bits in message data field <b>408</b> set to 0. If host device <b>102</b> sees a plug/unplug control packet type with a message data field set to 0, host device <b>102</b> interprets the packet as an unplug message packet type, and recognizes that the pendant peripheral after the one that sent the packet is unplugged.</p>
<p id="p-0084" num="0083"><figref idref="DRAWINGS">FIG. 7</figref> is a graphical representation of one embodiment of a soft reset control packet format for use in a pendant bus communication system, as another control message packet type. Soft reset control packet types may be communicated by host device <b>102</b> or by a pendant peripheral. In one embodiment of the soft reset control packet type, no data is included in its message data field.</p>
<p id="p-0085" num="0084">If host device <b>102</b> communicates a soft reset control packet type to a pendant peripheral, the pendant peripheral resets any internal states and starts over as though it has just been plugged in. Moreover, after a soft reset, the reset pendant peripheral communicates a plug/unplug control packet type, described above.</p>
<p id="p-0086" num="0085">If a pendant peripheral communicates a soft reset control packet type to host device <b>102</b>, host device <b>102</b> interprets the message as though the pendant peripheral is unplugged. Host device <b>102</b> may no longer accept message packets from the pendant peripheral, until a plug/unplug control packet type is received from the ‘unplugged’ pendant peripheral. However, the ‘unplugged’ pendant peripheral still forwards upstream to host device <b>102</b> message packets from pendant peripherals further down the chain.</p>
<p id="p-0087" num="0086">A pendant peripheral may select to communicate a soft reset control packet type to host device <b>102</b> if the pendant peripheral has a capability it wishes to power-down. For example, a pendant peripheral may include a display screen, but has not received message packets with display information for a pre-determined period of time. The pendant peripheral may select to power down the display screen to conserve power. The pendant peripheral does this by communicating a soft reset control packet type to host device <b>102</b>. The pendant peripheral may then communicate to host device <b>102</b> a plug/unplug control packet type that does not include a definition of support for the display screen. Alternatively, the pendant peripheral may send a soft reset control packet and not send message packets thereafter. In either reset event, however, the pendant peripheral still forwards message packets from another device and still modifies the device identifier within the forwarded message packet.</p>
<p id="p-0088" num="0087"><figref idref="DRAWINGS">FIG. 8</figref> is a graphical representation of one embodiment of a hard reset control packet format for use in a pendant bus communication system. In one embodiment, the hard reset control packet type is sent by host device <b>102</b> to a pendant peripheral in the chain. No data need be included in the message data field of a hard reset control packet type.</p>
<p id="p-0089" num="0088">If a pendant peripheral receives a hard reset control packet type, the receiving pendant peripheral interprets it as an instruction to force a hard reset of the pendant peripheral plugged immediately downstream to it. A hard reset message type may be communicated by host device <b>102</b>, when host device <b>102</b> does not obtain a response from a selected pendant peripheral after an attempt to reset the selected pendant peripheral, such as with a soft reset control packet type, or the like. The hard reset control packet type enables host device <b>102</b> to hard reset a selected pendant peripheral without resetting all pendant peripherals upstream to the selected pendant peripheral.</p>
<p id="p-0090" num="0089">If the selected pendant peripheral to be hard reset is the first device in the pendant bus chain, host device <b>102</b> may directly perform the hard reset by communicating a direct reset signal.</p>
<p id="p-0091" num="0090"><figref idref="DRAWINGS">FIG. 9</figref> is a graphical representation of one embodiment of a Get Device Capabilities control packet format for use in a pendant bus communication system, as another control message packet type. The get device capabilities (Get Dev Caps) control packet may be communicated by a host device to learn more about a capability of a selected pendant peripheral. For example, if the pendant peripheral's plug/unplug control packet type includes information indicating that the pendant peripheral supports character text, host device may communicate a Get Dev Caps control packet indicating a desire to learn more about the pendant peripheral's character text capabilities. The pendant peripheral responds with a data message packet type that includes the appropriate character text capabilities.</p>
<p id="p-0092" num="0091">If host device <b>102</b> determines that it desires more information, host device <b>102</b> sends another Get Dev Caps control packet with an Extended Dev Caps bit set. It may be, however, that a given message packet type does not support Extended Dev Caps. If the message packet type does not support Extended Dev Caps, the pendant peripheral communicates an Error control packet type to host device <b>102</b>.</p>
<p id="p-0093" num="0092"><figref idref="DRAWINGS">FIG. 10</figref> is a graphical representation of one embodiment of a Device Globally Unique IDentifier (GUID) control packet format for use in a pendant bus communication system, as another control message packet type. It is envisioned that pendant peripherals are capable of performing actions without associated software installed on host device <b>102</b>. However, the present invention does enable pendant peripherals to be associated with software on host device <b>102</b>.</p>
<p id="p-0094" num="0093">If a pendant peripheral desires software on host device <b>102</b> to be associated with the pendant peripheral, the pendant peripheral requests the association be established though a Globally Unique IDentifier (GUID) stored in a system registry in host device <b>102</b>. The pendant peripheral performs this request by communicating a Device GUID control packet to host device <b>102</b>.</p>
<p id="p-0095" num="0094">Additional system registry information may also be included that generates a request to the host device <b>102</b> to load a special driver to communicate with the pendant peripheral (see Needs Driver message packet type, below).</p>
<p id="p-0096" num="0095">If the pendant peripheral associated with the installed software communicates a soft reset control packet type, host device <b>102</b> clears the GUID.</p>
<p id="p-0097" num="0096">Host device <b>102</b> is configured to assume that a pendant peripheral does not require a GUID association. Thus, host device <b>102</b> sends an error control packet type if a pendant peripheral requests an action that is associated with installed software, and host device <b>102</b> has not received a Device GUID control packet type from the requesting pendant peripheral. The requesting pendant peripheral is expected then to communicate the Device GUID control packet type.</p>
<p id="p-0098" num="0097">In one embodiment of the present invention, a Device GUID is 128 bits long. Thus, a pendant peripheral requesting association with software on host device <b>102</b> first communicates a Device GUID control packet type. The requesting pendant peripheral then communicates three data message packet types.</p>
<p id="p-0099" num="0098">If the communications between host device <b>102</b> and the requesting pendant peripheral is broken prior to receipt of the appropriate message packets, host device <b>102</b> discards the received message packets. Host device <b>102</b> further communicates an error control packet type to the requesting pendant peripheral. Moreover, if host device <b>102</b> does receive the Device GUID control packet, but does not locate a matching GUID in the system registry, host device <b>102</b> sends an Error control packet type to the requesting pendant peripheral, indicating the requested software is not installed.</p>
<p id="p-0100" num="0099">As indicated in <figref idref="DRAWINGS">FIG. 3</figref>, a message packet type that is other than a control message packet type includes data message packet types. <figref idref="DRAWINGS">FIG. 11</figref> is a graphical representation of one embodiment of a data message packet format for use in a pendant bus communication system. Data message packet types may be communicated as responses to other message packet types.</p>
<p id="p-0101" num="0100"><figref idref="DRAWINGS">FIG. 12</figref> is a graphical representation of one embodiment of a command message packet format for use in a pendant bus communication system, as another message packet type. Command message packet types may be employed by a pendant peripheral to request actions from host device <b>102</b>. For example, a pendant peripheral may request an application on host device <b>102</b>, such as a media player, to play the next track.</p>
<p id="p-0102" num="0101">As shown in <figref idref="DRAWINGS">FIG. 12</figref>, command message packet types include application data information <b>1202</b>. Application data information <b>1202</b> need not be specific to a particular vendor. For example, application data information <b>1202</b> for a ‘media player’ may enable a Microsoft media player and a Real Audio Player. <figref idref="DRAWINGS">FIG. 13</figref> is one embodiment of a table for possible application data information for use in an application data information field of the command message packet shown in <figref idref="DRAWINGS">FIG. 12</figref>.</p>
<p id="p-0103" num="0102">If application data information <b>1202</b> is null (all 0s), then the command message packet type is interpreted by host device <b>102</b> to be intended for whatever application is currently in a foreground mode in host device <b>102</b>.</p>
<p id="p-0104" num="0103">If a pendant peripheral wishes to make use of an application on host device <b>102</b>, the pendant peripheral determines whether the appropriate software that maps the application to the requesting pendant peripheral is loaded on host device <b>102</b>. Moreover, the requesting pendant peripheral sends a Device GUID control packet type to host device <b>102</b> prior to sending a command message packet type. If a pendant peripheral sends a command message packet type for an application without first sending a Device GUID control packet type, an error message packet type may be sent by host device <b>102</b>.</p>
<p id="p-0105" num="0104">Moreover, command message packet types may have different meanings depending on which application the command message packet type is sent. For example, a command message packet type that includes a ‘next’ command in a command field <b>1204</b> of the command message packet (see <figref idref="DRAWINGS">FIG. 12</figref>) might result in an action to play the next song when sent to media player. However, the same command message packet type might result in an action of going to a next page if the command message packet type is sent to an electronic book reader. Thus, a receiving application on host device <b>102</b> determines how to interpret an action in the application data information field of a command message packet. The receiving application may even select to ignore an action.</p>
<p id="p-0106" num="0105"><figref idref="DRAWINGS">FIG. 14</figref> is a graphical representation of one embodiment of an indicator message packet format for use in a pendant bus communication system, as still another message packet type. Host device <b>102</b> employs indicator message packet types to a drive various indicators such as LEDs, graphical displays, and the like, on a selected pendant peripheral. In one embodiment, the selected pendant peripheral determines the actions taken when an indicator message packet type is received. For example, an indicator message packet that includes a request for a sound may be interpreted by the selected pendant peripheral as a request to mix multiple indicators into a single LED display.</p>
<p id="p-0107" num="0106"><figref idref="DRAWINGS">FIG. 15</figref> is a graphical representation of one embodiment of a character text message packet format for use in a pendant bus communication system, as another message packet type. A character text message packet may be communicated by host device <b>102</b> to a selected pendant peripheral. Character text message packet types may be employed for example, in a pendant peripheral that might display a name of song that is playing on host device <b>102</b>. Thus, a pendant peripheral that supports character text message packet types should support a Get Dev Caps control packet type from host device <b>102</b>.</p>
<p id="p-0108" num="0107">In one embodiment of the present invention, character text is communicated to a selected pendant peripheral as Unicode included within a message data field. Received character text is formatted and displayed by the selected pendant peripheral, in a supported font type. If the received character text exceeds the display size of the selected pendant peripheral, the character text may be scrolled. Scrolling support may be performed by the selected pendant peripheral.</p>
<p id="p-0109" num="0108">In one embodiment of the present invention, each character text message packet type communicates up to about two Unicode characters along with additional code bits indicating a sequence of storage for the Unicode characters. As character text messages need not include null terminators, a selected pendant peripheral is configured to recognize the last character text that host device <b>102</b> communicated.</p>
<p id="p-0110" num="0109">To clear a display screen on a selected pendant peripheral, host device <b>102</b> may communicate a character text message packet type that includes a Loc Code of 0, along with a Char Code of Null (all bits are 0).</p>
<p id="p-0111" num="0110">Bitmap text message packet type is another message packet type that host device <b>102</b> may employ to communicate information intended for display on a display screen of a selected pendant peripheral. Bitmap text message packet types may be employed in conjunction with character text message packet types for example, to display Japanese Kanji and similar Far East characters as bitmap text.</p>
<p id="p-0112" num="0111">If a pendant peripheral indicates that it supports bitmap text message packet types, then character text not supported by the pendant peripheral may be sent as a bitmapped text.</p>
<p id="p-0113" num="0112"><figref idref="DRAWINGS">FIG. 16</figref> is a graphical representation of one embodiment of a bitmap text message packet format for use in a pendant bus communication system. As shown in the figure, a single bitmap character may employ up to about nine contiguous bitmap text message packets, with potentially different content in message data field <b>1608</b>. To speed up transfer of the bitmap text message packets, in one embodiment of the present invention, no sequencing bits are employed. Because the nine bitmap text message packets are sent as a contiguous sequence of message packets, an error event is flagged if the nine bitmap text message packets are not received by the selected pendant peripheral.</p>
<p id="p-0114" num="0113">As illustrated in <figref idref="DRAWINGS">FIG. 16</figref>, a first data bit in the message data field of the first bitmap text message packet defines the value of the upper left corner of a bitmap text character.</p>
<p id="p-0115" num="0114">A message packet type that may be employed to display graphics is a graphics display message packet type. Host device <b>102</b> may employ the graphics display message packet type to communicate graphical images to a pendant peripheral that has identified itself as supporting graphics.</p>
<p id="p-0116" num="0115"><figref idref="DRAWINGS">FIG. 17</figref> is a graphical representation of one embodiment of a smart keyboard message packet format for use in a pendant bus communication system, as another message packet type. If a pendant peripheral supports buttons or keys and a display, then smart keyboard message packet type may be employed by the pendant peripheral to direct host device <b>102</b> to provide text for display as a result of a key or button entry.</p>
<p id="p-0117" num="0116">A pendant peripheral that supports smart keyboard message packet types includes additional software and related hardware to track states arising from a keystroke, such as shift keys and the like.</p>
<p id="p-0118" num="0117"><figref idref="DRAWINGS">FIG. 18</figref> is a graphical representation of one embodiment of a test message packet format for use in a pendant bus communication system. A test message packet type is provided for performing loop tests. For example, if the test message packet type with a Loop bit set high is received by host device <b>102</b>, host device <b>102</b> loops back the message packet, so that the sending pendant peripheral may conduct a self-test. If a test message packet type with a Loop bit set high is received by a pendant peripheral, the pendant peripheral clears the Loop bit and returns the test message packet to host device <b>102</b>.</p>
<p id="p-0119" num="0118"><figref idref="DRAWINGS">FIG. 19</figref> is a graphical representation of one embodiment of a Need Driver message packet format for use in a pendant bus communication system. A Need Driver message packet type may be employed when a pendant peripheral requires a software driver on host device <b>102</b> to be associated with the pendant peripheral. The requesting pendant peripheral may communicate a Device GUID control packet type, prior to communicating a Need Driver message packet type.</p>
<p id="h-0009" num="0000">Generalized Operation</p>
<p id="p-0120" num="0119">The operation of certain aspects of the present invention will now be described with respect to <figref idref="DRAWINGS">FIGS. 1 and 20</figref>. In the nomenclature of pendant bus communication system <b>100</b>, in <figref idref="DRAWINGS">FIG. 1</figref>, a “read” is defined as moving a message packet from a pendant peripheral, such as pendant peripheral <b>104</b>, to an upstream host device, such as host device <b>102</b>. A “write” is defined as moving a message packet from an upstream host device, such as host device <b>102</b>, to a downstream pendant peripheral, such as pendant peripheral <b>104</b>. As described above in conjunction with <figref idref="DRAWINGS">FIG. 1</figref>, each set of clock and data lines between portable peripherals are isolated from each other, such that a “read” or “write” may occur separately between two pendant peripherals. For example, a “read” may occur when moving a message packet from pendant peripheral <b>105</b> to its upstream “host device,” pendant peripheral <b>104</b>. Similarly, an isolated “write” may occur when moving a message packet from pendant peripheral <b>104</b> downstream to pendant peripheral <b>105</b>.</p>
<p id="p-0121" num="0120">A packet transfer protocol is employed to clock message packets between host device <b>102</b> and a pendant peripheral in the pendant peripheral communication system <b>100</b>. The packet transfer protocol is described in a co-pending application, Ser. No. 10/159,899 entitled “System and Method for a Pendant Bus,” filed May 29, 2002, and is hereby incorporated by reference. Briefly, however, when data<sub>1 </sub>and clock<sub>1 </sub>lines, in <figref idref="DRAWINGS">FIG. 1</figref>, are idle (e.g., pulled high), pendant peripheral <b>104</b> may request a read of a message packet by asserting (driving low) the data<sub>1 </sub>line signal. Alternatively, host device <b>102</b> may commence a write of a message packet by asserting the clock<sub>1 </sub>line signal. Host device <b>102</b> determines whether the message packet transfer will be a read or a write transfer. Clock signal(s) Clk<sub>1 </sub>are provided by host device <b>102</b> over the clock<sub>1 </sub>line to manage the transfer of the message packet as a series of bits over the data<sub>1 </sub>line.</p>
<p id="p-0122" num="0121">Host device <b>102</b> may further select to send a message packet directed to pendant peripheral <b>105</b>. To do so, host device <b>102</b> associates a device identifier of 1 with the message packet. As pendant peripheral <b>104</b> receives the bits for message packet from host device <b>102</b>, they are stored in a buffer (not shown). Upon a successful transfer of the message packet, pendant peripheral <b>104</b> processes the message packet to determine if it owns the message packet (e.g., whether the device identifier equals zero). If pendant peripheral <b>104</b> determines that the device identifier is other than zero, pendant peripheral <b>104</b> decrements the device identifier associated with the message packet. Pendant peripheral <b>104</b> asserts the clock<sub>2 </sub>line signal to indicate intent to transfer a write message packet to pendant peripheral <b>105</b>. Pendant peripheral <b>104</b> then drives clock signal(s) Clk<sub>2 </sub>over the clock<sub>2 </sub>line to regulate the transfer of the modified message packet to pendant peripheral <b>105</b>.</p>
<p id="p-0123" num="0122">As pendant peripheral <b>105</b> receives the bits for the modified message packet, they are stored in its buffer (not shown). Upon a successful transfer of the message packet, pendant peripheral <b>105</b> processes the message packet to determine whether the device identifier associated with the modified message packet is zero. If the device identifier is zero, pendant peripheral <b>105</b> processes the message packet to determine the message packet type.</p>
<p id="p-0124" num="0123">If pendant peripheral <b>105</b> wishes to send a read message packet to host device <b>102</b>, the read message packet is sent to pendant peripheral <b>104</b> to be relayed upstream, performing substantially similar actions as described above. However, when pendant peripheral <b>104</b> receives the read message packet, it increments the device identifier associated with the read message packet. Pendant peripheral <b>104</b> then proceeds to communicate the modified message packet upstream to host device <b>102</b>.</p>
<p id="p-0125" num="0124">As described above, a message packet type may initiate a flow or sequence of message packet types. <figref idref="DRAWINGS">FIG. 20</figref> illustrates message flow diagrams for one implementation of messaging protocol flows between a pendant host device and a pendant peripheral, in accordance with the present invention.</p>
<p id="p-0126" num="0125">Shown in <figref idref="DRAWINGS">FIG. 20</figref> is device initiation message flow <b>2002</b>. A pendant peripheral communicates a plug/unplug control packet type to the host device, when the pendant peripheral is first plugged into the pendant bus communication system. Upon receipt of the plug/unplug control packet, host device <b>102</b> communicates a Get Dev Caps control packet to the pendant peripheral associated with the plug/unplug control packet, as indicated by the device identifier included in the message packet.</p>
<p id="p-0127" num="0126">Upon receipt of the Get Dev Caps control packet, the identified pendant peripheral responds by communicating a data message packet. The data message packet includes a device capability structure in the message data field for the capabilities supported by the identified pendant peripheral.</p>
<p id="p-0128" num="0127">If host device <b>102</b> determines it desires more information about the capabilities of the identified pendant peripheral, host device <b>102</b> may send a Get Dev Caps control packet with the extended capabilities bit set.</p>
<p id="p-0129" num="0128">Upon receipt of the Get Dev Caps control packet with the extended capabilities bit set, the identified pendant peripheral may select to respond with a data message packet that provides information in the message data field about the extended capabilities supported. Alternatively, if the identified pendant peripheral does not support extended capabilities for a device capability, the identified pendant peripheral communicates to host device <b>102</b>, an error message packet.</p>
<p id="p-0130" num="0129">Also shown in <figref idref="DRAWINGS">FIG. 20</figref>, is a soft reset message flow <b>2004</b>. As shown in the figure, soft reset message flow <b>2004</b> may commence when host device <b>102</b> communicates a soft reset control packet to an identified pendant peripheral. Upon receipt of the soft reset control packet, the identified pendant peripheral performs a reset of itself, and responds to host device <b>102</b>, by communicating a plug/unplug control packet. If host device <b>102</b> receives the plug/unplug control packet, performs substantially the same actions as described above in device initiation message flow <b>2002</b>.</p>
<p id="p-0131" num="0130">Although not illustrated in <figref idref="DRAWINGS">FIG. 20</figref>, but described above, a pendant peripheral may also initiate a soft reset control packet. The initiating pendant peripheral may communicate a plug/unplug control packet at some later time.</p>
<p id="p-0132" num="0131"><figref idref="DRAWINGS">FIG. 20</figref> also shows an associate host driver message flow <b>2006</b>. A requesting pendant peripheral may initiate a request for an application residing on host device <b>102</b> to perform an action, by communicating a command message packet to host device <b>102</b>. Upon receipt of the command message packet, host device <b>102</b> determines whether an application is associated with the requesting pendant peripheral. If an application is not associated with the requesting pendant peripheral, host device <b>102</b> responds by communicating an error message packet to the requesting pendant peripheral.</p>
<p id="p-0133" num="0132">Upon receipt of the error message packet, the requesting pendant peripheral proceeds to communicate to host device <b>102</b> a Device GUID control packet. If host device <b>102</b> receives the Device GUID control packet, it will store the received GUID in a system registry. The requesting pendant peripheral proceeds to communicate a Need Driver message packet to host device <b>102</b>. Upon receipt of the Need Driver message packet, host device <b>102</b> associates the stored GUID with an identified application. The requesting pendant peripheral may then proceed to retransmit a command message packet. The host device <b>102</b> having associated an identified application to a registered pendant peripheral performs the requested commands.</p>
<p id="p-0134" num="0133">The above specification, examples, and data provide a complete description of the manufacture and use of the composition of the invention. However, various changes in size, shape, materials, components, circuit elements, wiring connections, and contacts, as well as in the details of the illustrated circuitry and construction and method of operation may be made without departing from the scope or spirit of the present invention. Thus, the invention resides in the claims hereinafter appended.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>We claim:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A computer-readable medium encoded with a data structure for use in a pendant bus communications system that includes a host device and pendant peripheral devices that are serially chained together, the data structure comprising:
<claim-text>a first data field including a device identifier having a current value, the current value being modified each time the data structure is evaluated by one of the pendant peripheral devices in the pendant bus communications system, wherein the current value matches a predetermined value if the data structure reaches one of the pendant peripheral devices with which the data structure is associated; wherein the predetermined value is the same value for each of the pendent peripheral devices;</claim-text>
<claim-text>a second data field including a packet type identifier, wherein the packet type identifier includes information that describes actions to be taken by the associated pendant peripheral device in response to receiving the data structure; and</claim-text>
<claim-text>a third data field including data bits, wherein a format of the data bits is defined by the packet type identifier in the second data field.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The computer-readable medium of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the predetermined value is zero.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The computer-readable medium of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the current value is incremented by the evaluating pendant peripheral device as the data structure is communicated upstream in the pendant bus communication system.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The computer-readable medium of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the current value is decremented by the evaluating pendant peripheral device as the data structure is communicated upstream in the pendant bus communication system.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The computer-readable medium of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the packet type identifier is a selected one from a group comprising a control message packet type, a data message packet type, a command message packet type, an indicator message packet type, a character text message packet type, a bitmap text message packet type, a smart keyboard message type, a graphics message packet type, a test message packet type, and a Need Driver message packet type.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The computer-readable medium of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the control message packet type identifier is selected from a group consisting of an error control packet type, a plug/unplug control packet type, a soft reset control packet type, a hard reset control packet types a get device capabilities control packet type, and device Globally Unique Identifier (GUID) control packet type.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The computer-readable medium of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the data structure further comprises a bus version that identifies a version of the pendant bus communications system.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The computer-readable medium of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the data structure comprises a message packet.</claim-text>
</claim>
</claims>
</us-patent-grant>
