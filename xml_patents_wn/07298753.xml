<us-patent-grant lang="EN" dtd-version="v4.2 2006-08-23" file="US07298753-20071120.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20071106" date-publ="20071120">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>07298753</doc-number>
<kind>B1</kind>
<date>20071120</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>10364048</doc-number>
<date>20030210</date>
</document-id>
</application-reference>
<us-application-series-code>10</us-application-series-code>
<us-term-of-grant>
<us-term-extension>1060</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>H</section>
<class>04</class>
<subclass>L</subclass>
<main-group>12</main-group>
<subgroup>28</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>370401</main-classification>
<further-classification>370395</further-classification>
<further-classification>370216</further-classification>
<further-classification>370219</further-classification>
<further-classification>370220</further-classification>
</classification-national>
<invention-title id="d0e53">Technique for managing heavy signaling traffic that is directed to a particular signaling control unit</invention-title>
<references-cited>
<citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>4800488</doc-number>
<kind>A</kind>
<name>Agrawal et al.</name>
<date>19890100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709225</main-classification></classification-national>
</citation>
<citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5313454</doc-number>
<kind>A</kind>
<name>Bustini et al.</name>
<date>19940500</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>5548578</doc-number>
<kind>A</kind>
<name>Matsune et al.</name>
<date>19960800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370248</main-classification></classification-national>
</citation>
<citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>5898691</doc-number>
<kind>A</kind>
<name>Liu</name>
<date>19990400</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>6356629</doc-number>
<kind>B1</kind>
<name>Fourie et al.</name>
<date>20020300</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>6427161</doc-number>
<kind>B1</kind>
<name>LiVecchi</name>
<date>20020700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>718102</main-classification></classification-national>
</citation>
<citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>6615264</doc-number>
<kind>B1</kind>
<name>Stoltz et al.</name>
<date>20030900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709227</main-classification></classification-national>
</citation>
<citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>6625121</doc-number>
<kind>B1</kind>
<name>Lau et al.</name>
<date>20030900</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>6674721</doc-number>
<kind>B1</kind>
<name>Ditia et al.</name>
<date>20040100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>6725378</doc-number>
<kind>B1</kind>
<name>Schuba et al.</name>
<date>20040400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726 13</main-classification></classification-national>
</citation>
<citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>2002/0064130</doc-number>
<kind>A1</kind>
<name>Siu et al.</name>
<date>20020500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370235</main-classification></classification-national>
</citation>
<citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>2002/0147853</doc-number>
<kind>A1</kind>
<name>Sherman et al.</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709310</main-classification></classification-national>
</citation>
<citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>2003/0182437</doc-number>
<kind>A1</kind>
<name>Kobayashi et al.</name>
<date>20030900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709232</main-classification></classification-national>
</citation>
<citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>2004/0139170</doc-number>
<kind>A1</kind>
<name>Shen et al.</name>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709218</main-classification></classification-national>
</citation>
<citation>
<nplcit num="00015">
<othercit>U.S. Appl. No. 09/491,991, filed Jan. 26, 2000.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00016">
<othercit>U.S. Appl. No. 09/753,004, filed Dec. 29, 2000.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
</references-cited>
<number-of-claims>51</number-of-claims>
<us-exemplary-claim>51</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>370401</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>370395</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>370216</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>370219</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>370220</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>4</number-of-drawing-sheets>
<number-of-figures>5</number-of-figures>
</figures>
<parties>
<applicants>
<applicant sequence="001" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Dhar</last-name>
<first-name>Sandeep</first-name>
<address>
<city>Milpitas</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="002" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Venkataraman</last-name>
<first-name>Lakshminarayanan</first-name>
<address>
<city>Sunnyvale</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="003" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Gopalkrishnan</last-name>
<first-name>Shankar</first-name>
<address>
<city>Sunnyvale</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
</applicants>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Blale;y, Sokoloff, Taylor &amp; Zafman LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</parties>
<assignees>
<assignee>
<addressbook>
<orgname>Cisco Technology, Inc.</orgname>
<role>02</role>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Orgad</last-name>
<first-name>Edan</first-name>
<department>2616</department>
</primary-examiner>
<assistant-examiner>
<last-name>Lee</last-name>
<first-name>Andrew C.</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A method is described that involves sending a positive imposter response as a consequence of a status request message having been received. The status request message refers to a network connection. The status request message was sent to the networking system to ask the networking system to inquire into the status of the network connection.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="148.25mm" wi="225.47mm" file="US07298753-20071120-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="264.92mm" wi="165.18mm" orientation="landscape" file="US07298753-20071120-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="227.84mm" wi="157.82mm" orientation="landscape" file="US07298753-20071120-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="242.15mm" wi="139.78mm" file="US07298753-20071120-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="239.69mm" wi="174.92mm" file="US07298753-20071120-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">FIELD OF INVENTION</heading>
<p id="p-0002" num="0001">The field of invention relates generally to networking; and, more specifically to a technique for managing heavy signaling traffic that is directed to a particular signaling control unit.</p>
<heading id="h-0002" level="1">BACKGROUND</heading>
<p id="p-0003" num="0002">A complex network typically has built into its functionality the ability to maintain and control the connections that it supports. For example, when a user effectively asks to send information to a particular destination (e.g., through the sending of a “connection request” to the network), a network should be able to intelligently inquire as to whether or not sufficient resources exist within the network to transport the information; and, if so, establish the connection so that the information can be transported. Moreover, the network should also be able to monitor the status of the connection (and, on a larger scale, the network itself) so that if an event arises that causes the connection to be interrupted—the network can take appropriate action(s) (e.g., re-route the connection, teardown the connection and ask the user to resend the information, etc.).</p>
<p id="p-0004" num="0003">The equipment that forms the nodes of the network (e.g., the routers and/or switches that accept customer traffic from various copper and/or fiber optic lines and re-direct the customer traffic onto copper and/or fiber optic lines) are typically constructed with specific functional capabilities that allow these intelligent tasks to be performed. Typically, each network node is designed to have a “signaling control unit” that is responsible for processing connection setup/teardown procedures as well as connection maintenance procedures. Often, although not a strict requirement, the signaling control unit is also responsible for the execution of a routing algorithm that allows its corresponding node to “figure out” (in light of the network's overall topography/configuration (or changes thereto)) where received traffic is to be forwarded.</p>
<p id="p-0005" num="0004">The signaling control units of the various node are designed to send “signaling” messages to one another so that the network as a whole can successfully perform these connection and network related configuration and maintenance tasks. A problem may arise, however, if a certain type of event (or chain of events) causes a “flood” of these messages to be sent to a particular signaling control unit (e.g., the signaling control unit of a specific node within the network) in a short amount of time. Specifically, if the magnitude of the incoming flood of messages exceeds a signaling control unit's capacity for handling these messages, the signaling control unit is likely to fail in the performance of its connection and/or network management related services.</p>
<p id="p-0006" num="0005"><figref idref="DRAWINGS">FIG. 1</figref> illustrates one type of event where a “flood” of signaling messages are sent to a particular signaling control unit. According to the example of <figref idref="DRAWINGS">FIG. 1</figref>, network node <b>101</b><sub>1 </sub>is communicatively coupled to nodes <b>101</b><sub>2 </sub>through <b>101</b><sub>N </sub>through networking lines <b>102</b><sub>2 </sub>through <b>102</b><sub>N−1</sub>, respectively. According to the simple example of <figref idref="DRAWINGS">FIG. 1</figref>, the “primary” signaling control function <b>105</b><sub>1 </sub>of node <b>101</b><sub>1 </sub>includes, amongst its various tasks and responsibilities, a smaller sub-function that may be referred to as the Received Status Request Function <b>106</b>. A status request is a type of signaling message that asks (the node to which the message was sent) for a report (for the node that sent the message) as to the status of a particular connection. The status request includes an embedded entry that identifies the particular connection to which the status request pertains.</p>
<p id="p-0007" num="0006">Under normal operating conditions, the Received Status Request Function <b>106</b> is responsible for handling every status request that node <b>101</b><sub>1 </sub>is expected to respond to. Note that the Received Status Request Function <b>106</b> includes a queue <b>107</b> and a status request engine (SRE) <b>108</b>. As a status request can be sent to node <b>101</b><sub>1 </sub>from any of nodes <b>101</b><sub>2 </sub>through <b>101</b><sub>N</sub>, queue <b>107</b> is responsible for gathering and queuing each received status request regardless of its sending source (a feature that <figref idref="DRAWINGS">FIG. 1</figref> attempts to capture through input flow <b>115</b>). Whenever the status request engine <b>108</b> is able to handle a “next” status request, a “next” status request is removed from the queue <b>107</b> and is processed by the status request engine <b>108</b>.</p>
<p id="p-0008" num="0007">The processing of a status request as performed by the status request engine <b>108</b> entails: 1) inquiring, internally within node <b>101</b><sub>1</sub>, into the status of the connection to which the status request referred (a process flow that <figref idref="DRAWINGS">FIG. 1</figref> attempts to capture through the “Connection OK?” request flow <b>109</b>); and, 2) once an understanding of the status of the connection at issue is gained, initiating the formation of a signaling message (that is to be sent to the node that sent the status request) that reports the status of the connection from the perspective of node <b>101</b><sub>1 </sub>(a process flow that <figref idref="DRAWINGS">FIG. 1</figref> attempts to capture through response flow <b>110</b>).</p>
<p id="p-0009" num="0008">Note that node <b>101</b><sub>1 </sub>is implemented with redundant signaling control functions <b>105</b><sub>1 </sub>and <b>105</b><sub>2</sub>. In a typical implementation, control function <b>105</b><sub>1 </sub>is implemented with a first electronic card and control function <b>105</b><sub>2 </sub>is implemented with a second electronic card. Under normal operating conditions, one of the control functions (e.g., signaling control function <b>105</b><sub>1</sub>) is deemed “primary” and the other control function (e.g., <b>105</b><sub>2</sub>) is deemed “inactive” or “on standby”. Redundant signaling control functions are used because of the importance of signaling to a working network. Here, if the “primary” control function <b>105</b><sub>1 </sub>suffers a significant failure (e.g., if a semiconductor chip used to implement the primary control function <b>105</b><sub>1 </sub>stops working), node <b>101</b><sub>1 </sub>is designed to automatically “switchover” to control function <b>105</b><sub>2 </sub>for the implementation of its signaling control tasks. That is, upon a significant failure by primary control function <b>105</b><sub>1</sub>, control function <b>105</b><sub>2 </sub>is converted from being a secondary/standby control function to the primary control function of node <b>101</b><sub>1</sub>.</p>
<p id="p-0010" num="0009">Because the switchover to a new primary control function (and/or the failure of the elder control function) may cause temporary disruption to the signaling tasks of node <b>101</b><sub>1</sub>, node <b>101</b><sub>1 </sub>broadcasts to its neighboring nodes <b>101</b><sub>2 </sub>through <b>101</b><sub>N </sub>that it has undergone a “switchover” to a new primary control function. The broadcast is illustrated in <figref idref="DRAWINGS">FIG. 1</figref> by the sending of N−1 signaling messages <b>103</b><sub>1 </sub>through <b>103</b><sub>N−1 </sub>to each of nodes <b>101</b><sub>2 </sub>through <b>101</b><sub>N</sub>, respectively. According to various signaling control implementations, the receipt of a signaling message that indicates a node has undergone a control function switchover causes a recipient of such a signaling message to send a status inquiry, to the node that underwent a control function switchover, for each connection that is carried by both the recipient of the signaling message and the sender of the signaling message.</p>
<p id="p-0011" num="0010">According to the example of <figref idref="DRAWINGS">FIG. 1</figref>, this causes a “flood’ of status request messages (represented collectively by status request message trains <b>104</b><sub>1 </sub>through <b>104</b><sub>N−1</sub>) to be sent to node <b>101</b><sub>1</sub>, as a status request message for each connection carried by node <b>101</b><sub>1 </sub>and nodes <b>101</b><sub>2 </sub>through <b>101</b><sub>N </sub>collectively is sent from nodes <b>101</b><sub>2 </sub>through <b>101</b><sub>N </sub>collectively to node <b>101</b><sub>1</sub>. As a consequence, in many instances, the queue of control function <b>105</b><sub>2 </sub>that is equivalent to queue <b>107</b> of control function <b>105</b><sub>1 </sub>(not shown in <figref idref="DRAWINGS">FIG. 1</figref>) is not designed with a depth that is sufficient to queue all of the incoming status request messages; and/or, the status request engine of control function <b>105</b><sub>2 </sub>does not have the processing power to process the flood of status request messages within a reasonable amount of time.</p>
<p id="p-0012" num="0011">According to various signaling control function implementations, if a response to a status inquiry is not received within a specific amount of time, the sending node of the status inquiry message is designed to teardown the connection on the assumption that the connection has already been dropped (on the assumption that the node that failed to respond to the status inquiry message is no longer supporting the connection). In the example of <figref idref="DRAWINGS">FIG. 1</figref>, the failure of control function <b>105</b><sub>2 </sub>to adequately handle the flood of incoming status inquiries should cause nodes <b>101</b><sub>2 </sub>through <b>101</b><sub>N </sub>to begin to drop those connections whose corresponding status request messages were not responded to or were not responded to on time. Note that, in such a situation, these connections are apt to be dropped inadvertently. That is, the connections themselves are fully operational (i.e., were not catastrophically affected by the switchover event) and therefore should not be dropped; and, it is merely the shortcoming in the capacity of the Received Status Request Function of control function <b>105</b><sub>2 </sub>to handle the flood of status requests that has caused these properly functioning connections to be dropped.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">FIGURES</heading>
<p id="p-0013" num="0012">The present invention is illustrated by way of example and not limitation in the figures of the accompanying drawings, in which like references indicate similar elements, and in which:</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 1</figref> shows a network node having redundant control functions;</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 2</figref> shows a functional architecture that allows a node that receives a flood of signaling messages to handle the flood of signaling messages;</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 3</figref><i>a </i>shows a methodology that can be executed by the functional architecture of <figref idref="DRAWINGS">FIG. 2</figref>;</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 3</figref><i>b </i>shows a methodology to be executed by a node that sent a positive imposter response;</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 4</figref> shows a networking system architecture that distributes a portion of the functional architecture of <figref idref="DRAWINGS">FIG. 2</figref> to its LIC cards.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 2</figref> shows a functional architecture that prevents a flood of incoming status request messages from reaching the primary queue <b>207</b> that services the service request engine (SRE) <b>208</b>. As a consequence, the Received Status Request Function <b>206</b> is saved from being overloaded in the face of a sudden flood of service request messages. The functional architecture of <figref idref="DRAWINGS">FIG. 2</figref> can be viewed as having two states: 1) normal; and, 2) active offload. In the normal state, the current number of received service request messages yet to be responded to is deemed to be within the processing capacity of the Received Status Request Function <b>206</b>; and, as such, the Received Status Request Function <b>206</b> is not provided with any active help. In the active offload state, the current number of received or anticipated service request messages yet to be responded to is deemed to be beyond the processing capacity of the Received Status Request Function <b>206</b>; and, as such, the Received Status Request Function <b>206</b> is provided with active help.</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 3</figref><i>a </i>shows a methodology that helps describe the functional tasks that are performed in either of the two states. More precisely, sequence <b>302</b> describes the processing that is entertained during the normal state; and, sequence <b>303</b> describes the processing that is entertained during the active offload state. Whether the processing of service request messages is to be entertained in the normal state or the active offload state depends upon whether or not a specific, looked for “trigger” event has arisen <b>301</b>. If a trigger event that is worthy of helping the Received Status Request Function <b>206</b> is deemed to have arisen <b>301</b>; then, the active offload state is entered and sequence <b>303</b> is executed. If such a trigger event is deemed to have not arisen; then, sequence <b>302</b> is executed within the normal state.</p>
<p id="p-0021" num="0020">Referring to <figref idref="DRAWINGS">FIGS. 2 and 3</figref><i>a</i>, execution within the normal state simply means that received status request messages are queued <b>302</b> into the primary queue <b>207</b> of the Received Status Request Function <b>206</b>. As a consequence, whenever the status request engine <b>208</b> is able to handle a “next” status request, a “next” status request is removed from the queue <b>207</b> and is processed by the status request engine <b>208</b>. In an embodiment, the processing of a status request (as performed by the status request engine <b>208</b>) entails: 1) inquiring into, within the node where the Received Status Request Function <b>206</b> resides, the status of the connection to which the status request referred (a process flow that <figref idref="DRAWINGS">FIG. 2</figref> attempts to capture through the “Connection OK?” request flow <b>209</b><i>b</i>); and, 2) once an understanding of the status of the connection at issue is gained, initiating the formation of a signaling message (that is to be sent to the node that sent the status request) that reports the status of the connection from the perspective of the node where the Received Status Request Function <b>206</b> resides (a process flow that <figref idref="DRAWINGS">FIG. 2</figref> attempts to capture through response flow <b>210</b>).</p>
<p id="p-0022" num="0021">As such, the operation of the Received Status Request Engine <b>206</b> is largely the same as that described in the Background. Note that, if <figref idref="DRAWINGS">FIG. 2</figref> is viewed as a hardware implementation, during the normal state, received status request messages that are received at input <b>211</b> are directed by multiplexer <b>216</b> along input <b>215</b> to the primary queue <b>207</b>. Here, the event detection and state control function <b>201</b> is responsible for controlling the channel select of multiplexer <b>216</b> (so that, during the normal state, received status request messages that are presented at input <b>211</b> are directed to primary queue <b>207</b> rather than reserve queue <b>203</b>). As can be distilled from its name, the event detection and state control function <b>201</b> is capable of detecting a trigger event that is sufficient to cause entry from the normal state into the active offload state (e.g., the event detection and state control function <b>201</b> is able to detect or predict a flooding of status request messages); and, likewise, is also capable of causing entry from the active offload state into the normal state (e.g., in light of a prior flood of status request messages being suitably abated).</p>
<p id="p-0023" num="0022">Upon detection of a trigger event worthy of entry into the active offload state, a positive imposter response is sent for each subsequently received status request message <b>303</b> while in the active offload state. Here, a positive imposter response is a formal response to a received status request message that: 1) indicates that the connection to which the received status request message was directed is properly working; and, 2) was not verified for correctness (i.e., no inquiry was actually made into the true status of the connection to which the received status request message was directed). The former quality corresponds to the response being “positive”; the later quality corresponds to the response being an “imposter”. Thus, in an embodiment, a positive imposter response corresponds to a signaling message that is sent back to the node that originally sent the received status request message and that indicates that the connection at issue is working properly, where, in fact, the true status of the connection at issue was not actually looked into.</p>
<p id="p-0024" num="0023">The sending of a positive imposter response for each status request message that is received during the active offload state should have the opposite effect from that described in the Background. That is, whereas, under prior art implementations, a flooding of status request messages tends to result in a large number of properly working connections being inadvertently dropped (as described in the Background), the automatic sending of positive imposter responses for each of the status request messages received under flooded circumstances should result in a large number of properly working connections being maintained rather than inadvertently dropped. Here, recalling that the original sending node of a status request message is configured to automatically tear down a connection if a positive response is not timely received—the automatic sending of a positive imposter response should effectively prevent a properly working connection from being torn down (because the automatic sending of the response should cause the response to be timely received; and, because the response indicates that the connection at issue is working properly).</p>
<p id="p-0025" num="0024">Referring to <figref idref="DRAWINGS">FIG. 2</figref>, the event detection and state control function <b>201</b>, upon recognition that a trigger condition for entering the active offload state has been reached (e.g., through detection of signaling control function card “switchover” at input <b>205</b>), changes the channel select input to multiplexer <b>216</b> so that received status request messages are entered into the reserve queue <b>203</b>. For each status request message that is entered into the reserve queue <b>203</b>, the imposter status request response function <b>202</b> identifies the address of the node that sent the status request message and the connection to which the status request message was directed. As a consequence of gaining this information the imposter response function <b>202</b> performs a pair of acts for each message that is queued into the reserve queue <b>203</b>.</p>
<p id="p-0026" num="0025">Firstly, as discussed above, for each status request message that was queued into the reserve queue <b>203</b>, the imposter status request response function <b>202</b> initiates the sending of a positive imposter response (noting that a response is sent to the address of the node that originated a request and also references the connection that the request was directed to). Secondly, at an appropriate later time, the imposter status request function <b>202</b> initiates an inquiry into the true status of each connection that a positive imposter response was sent on behalf of <b>303</b>. Here, process flow <b>212</b> is drawn to indicate the former act and process flow <b>209</b><i>b</i><sub>1 </sub>is drawn to indicate the later act.</p>
<p id="p-0027" num="0026">By inquiring, at a later time, into the actual status of each connection for whom a positive imposter response was sent, a network node that receives a sudden flood of status request messages is able to actually work through these request messages at a slower overall rate than what is necessary to ensure that the connections to which they pertain are not torn down by the nodes that initially sent the status request messages. As such, working connections are not inadvertently dropped; and, the flooded node is able to actually process the messages at a rate that is consistent within its own capacity limits. <figref idref="DRAWINGS">FIG. 3</figref><i>b </i>shows an embodiment of a methodology that may be executed by the flooded node in response to the later inquiry that is initiated by the imposter status request response function <b>202</b>.</p>
<p id="p-0028" num="0027">According to the methodology of <figref idref="DRAWINGS">FIG. 3</figref><i>b</i>, if a connection for whom a positive imposter response was sent is properly working <b>304</b>; then, nothing is done <b>306</b> (i.e., no signaling messages are sent). In this case, the previously sent positive imposter response provided correct information to the node that originated the status request message (i.e., that the referenced connection is working). As such, no corrective action or update is needed. If the connection is not working properly, the flooded node initiates a teardown of the connection <b>305</b> (if a teardown sequence for the connection has not already started). Here, the tearing down of a connection typically involves the sending of another type of signaling message to the node that originated the status request message (e.g., a signaling message that indicates the connection at issue is to be torn down or is being torn down).</p>
<p id="p-0029" num="0028">As such, regardless of the outcome of the inquiry <b>304</b> into the true status of the connection—a formal response to the status request message (as would normally be provided via flow <b>210</b> from the status request engine <b>208</b>) is not needed. Note that the flooded node may initiate a teardown of a non-working connection (e.g., including the sending of a signaling message that causes the node that sent the status request message to recognize that the connection is to be torn down) independently of and prior to the inquiry <b>304</b> that is initiated by the imposter status request response function <b>202</b>. If so, the flooded node can effectively ignore the inquiry <b>304</b> that is initiated by the imposter status request response function <b>202</b>. If not, the inquiry <b>304</b> that is initiated by the imposter status request response function <b>202</b> can be used by the flooded node to initiate the teardown of the connection; or, “mark” the connection for teardown at a later time.</p>
<p id="p-0030" num="0029">Here, a few additional comments regarding the imposter status request function <b>202</b> are in order. Firstly, the amount of time that is expended before a later inquiry is made into the true status of a connection for whom an imposter response was sent may vary from embodiment to embodiment. Some embodiments may be designed so as to have a “fixed” time between: 1) the arrival of a status request message within the active offload state; and, 2) the time that the imposter status request function <b>202</b> initiates the inquiry <b>304</b> into the true status of the connection to which the received status request message referred. Other embodiments may have varied times between the pair of events described just above, on a request message by request message basis. For example, by being designed to recognize when the resources that check into the status of a connection are available, the imposter status request function <b>202</b> may initiate an inquiry only when such resources are available.</p>
<p id="p-0031" num="0030">Moreover, the precise nature by which the later inquiry is made by the imposter status request function <b>202</b> may also vary from embodiment to embodiment. Here, it is important to recognize that the architecture of <figref idref="DRAWINGS">FIG. 2</figref> is a functional architecture that is drawn to help the reader understand basic operational features. Thus, even though hardware implementations that strictly conform to the depiction of <figref idref="DRAWINGS">FIG. 2</figref> are possible, it is altogether foreseeable that other implementations may be developed. For example, each of the “functions” <b>206</b>, <b>201</b>, <b>202</b> may be developed as software routines rather than hardware circuitry. Other implementations where any or each of the functions <b>206</b>, <b>201</b>, <b>202</b> are implemented in hardware (e.g., with logic circuitry) or a combination of hardware and software are also possible.</p>
<p id="p-0032" num="0031">Note also that, for convenience, <figref idref="DRAWINGS">FIG. 2</figref> draws the appropriately timed later inquiry flow <b>209</b><i>b</i><sub>1 </sub>as being a component of the service request engine output <b>209</b><i>b </i>(in order to suggest that the hardware and/or software resources responsible for checking into the status of a connection (not shown in <figref idref="DRAWINGS">FIG. 2</figref>) may receive such a request from either entity <b>202</b>, <b>208</b>). Although possible, no strict “connection” between the operation of the service request engine <b>208</b> and the operation of the imposter status request function <b>202</b> is required. Note also that the reserve queue <b>203</b> indicates that status request messages may be flushed once the imposter status request function recognizes that a positive imposter response is to be sent for (and that a later inquiry is to be made into the status of) the connection to which the status request message referred. Here, the imposter status request function <b>202</b> may be designed so as to have some form of access to a data keeping resource that allows a record of those connections for which a later inquiry <b>304</b> is needed to be kept track of.</p>
<p id="p-0033" num="0032">A few additional comments are also in order with respect to the nature of the trigger events that cause the active offload state to be entered. As already discussed, one such event is a “switchover” to a new signaling control function card. The ability to detect this event is suggested in <figref idref="DRAWINGS">FIG. 2</figref> by input <b>205</b> to the event detection and state control function <b>201</b>. Another suitable event is the recognition that the primary queue <b>207</b> is beginning to “fill up”. In order to implement such a trigger condition, a queue threshold <b>220</b> may be pre-configured such that, when the state of the primary queue <b>207</b> reaches the threshold <b>220</b>, the event detection and state control function <b>201</b> recognizes that a trigger state has been reached; and, as a consequence, the active offload state is automatically entered. Here, any number of events could cause the threshold to be reached (e.g., a larger node, as part of its internal maintenance routine, suddenly sends a status request connection for each of its connections; the service request engine <b>208</b> becomes less effective because processing resources have been devoted elsewhere, etc.).</p>
<p id="p-0034" num="0033">Note also that, referring to <figref idref="DRAWINGS">FIG. 3</figref><i>a</i>, entry into the active offload state is maintained until the flood of status request messages is deemed to have been sufficiently abated (i.e., the answer to inquiry <b>301</b> is “yes” until the flood appears to be over). In one embodiment, once the active offload state is entered, the flood is deemed to be abated after a specific amount of time has passed. That is, the active offload state is maintained for a set amount of time after the active offload state is entered; then, upon expiration of this time period, the normal state is entered. This effectively corresponds to answering “yes” to inquiry <b>301</b> until expiration of the time period; and then, upon expiration of the time period, answering “no” to inquiry <b>301</b> until the next trigger event arises. For events that are triggered by the reaching of a threshold within the primary queue <b>207</b>, rather than using a specific time period, the normal state may be returned to once the state of the primary queue falls to a second, lower threshold level.</p>
<p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. 4</figref> shows an embodiment of a networking system <b>401</b> that can be used as a node within a network. The networking system of <figref idref="DRAWINGS">FIG. 4</figref> includes a plurality of line interface cards <b>422</b><sub>1 </sub>through <b>422</b><sub>M </sub>(LICs). Each LIC typically interfaces to at least one ingress networking line (e.g., a copper or fiber optic line upon which networking data units are received) and to at least one egress networking line (e.g., a copper or fiber optic line upon which networking data units are transmitted). For simplicity, the ingress and egress lines for each of LICs <b>422</b><sub>1 </sub>through <b>422</b><sub>M </sub>are drawn as bi-directional merged networking lines <b>423</b><sub>1 </sub>through <b>423</b><sub>M</sub>, respectively. The networking system also includes a switching fabric <b>421</b> that switches networking data units (e.g., packets, cells, frames, etc.) toward their appropriate ingress and egress networking lines.</p>
<p id="p-0036" num="0035">That is, for example, a networking data unit that is received at LIC <b>422</b><sub>1 </sub>and that is associated with a connection that “connects” to a node that communicates to node <b>401</b> through LIC <b>422</b><sub>M </sub>will be directed: 1) from LIC <b>422</b><sub>1 </sub>to switching fabric <b>421</b> over link <b>424</b><sub>1</sub>; 2) through switching fabric <b>421</b> from link <b>424</b><sub>1 </sub>to link <b>424</b><sub>M</sub>; and, 3) from link <b>424</b><sub>M </sub>to LIC <b>422</b><sub>M </sub>for transmission over the appropriate egress networking line. As such, links <b>422</b><sub>1 </sub>through <b>422</b><sub>M </sub>are used to transport ingress/egress traffic to/from the switching fabric <b>421</b> and their corresponding LICs <b>422</b><sub>1 </sub>through <b>422</b><sub>M</sub>. In alternate embodiments links <b>424</b><sub>1 </sub>through <b>424</b><sub>M </sub>may be replaced with a bus. Working networks not only carry customer data (in the form of networking data units that are switched by the switching fabric <b>421</b>) but also carry signaling messages (as described in the background). Here, signaling control function cards <b>405</b><sub>1</sub>, <b>405</b><sub>2 </sub>implement the signaling function of the node <b>401</b> (noting that one of cards <b>405</b><sub>1</sub>, <b>405</b><sub>2 </sub>may be the primary card while the other is the secondary card).</p>
<p id="p-0037" num="0036">According to the approach of <figref idref="DRAWINGS">FIG. 4</figref>, a Received Status Request Function <b>420</b> (which corresponds to the Received Status Request Function <b>206</b> of <figref idref="DRAWINGS">FIG. 2</figref>) is implemented on each of cards <b>405</b><sub>1</sub>, <b>405</b><sub>2</sub>. By contrast, the imposter status request function <b>402</b><sub>1 </sub>is distributed across each of LICs <b>422</b><sub>1 </sub>through <b>422</b><sub>M</sub>. As a consequence, in the normal state, service request messages are sent from the particular LICs that they are received at and forwarded to the primary signaling control card; but, in the active offload state, service request messages are effectively intercepted by the LICs that they are received at. As a consequence, while in the active offload state, service request messages are not sent to the signaling control card. This, in turn, corresponds to the protection provided to the Received Status Request Function during the active offload state (i.e., the Received Status Request Function is not inundated with status request messages).</p>
<p id="p-0038" num="0037">Moreover, the LICs <b>422</b><sub>1 </sub>through <b>422</b><sub>M </sub>themselves are responsible for generating the positive imposter responses. The event detection and state control function has not been drawn in <figref idref="DRAWINGS">FIG. 4</figref> because, in an embodiment where the LICs <b>422</b><sub>1 </sub>through <b>422</b><sub>M </sub>take over a portion of the active offload state function (as described just above), the event detection and state control function could be distributed across the LICs <b>422</b><sub>1 </sub>through <b>422</b><sub>M</sub>; or, could be centralized onto the signaling control cards. Note that service request messages pass over links <b>415</b><sub>1 </sub>through <b>415</b><sub>M </sub>to the signaling control card during the normal state; and, delayed inquiries into the status of the connection that has already had a positive imposter response sent on its behalf are initiated over links <b>409</b><sub>1 </sub>through <b>409</b><sub>M</sub>. Each of links <b>409</b><sub>1 </sub>through <b>409</b><sub>M </sub>and/or <b>415</b><sub>1 </sub>through <b>415</b><sub>M </sub>may be implemented as either point-to-point or a bus.</p>
<p id="p-0039" num="0038">These same links may be kept separated per LIC (e.g., link <b>409</b><sub>1 </sub>and <b>415</b><sub>1 </sub>for LIC <b>422</b><sub>1</sub>) or may be merged together as a common transport medium. It is important to recognize that alternative networking systems may also be constructed where positive imposter responses are generated from the signaling control cards (rather than the LICs as discussed above with respect to <figref idref="DRAWINGS">FIG. 4</figref>). Such approaches correspond to a centralized approaches rather than a distributed approach.</p>
<p id="p-0040" num="0039">Also since any or all of the relevant functions discussed above may be implemented wholly or partially in software, embodiments of these functions may be embodied wholly or partially within a machine readable medium. Note that, particularly in the case of distributed approaches, more than one machine readable medium may be used.</p>
<p id="p-0041" num="0040">Note also that embodiments of the present description may be implemented not only within a semiconductor chip but also within machine readable media. For example, the designs discussed above may be stored upon and/or embedded within machine readable media associated with a design tool used for designing semiconductor devices. Examples include a circuit description formatted in the VHSIC Hardware Description Language (VHDL) language, Verilog language or SPICE language. Some circuit description examples include: a behaviorial level description, a register transfer level (RTL) description, a gate level netlist and a transistor level netlist. Machine readable media may also include media having layout information such as a GDS-II file. Furthermore, netlist files or other machine readable media for semiconductor chip design may be used in a simulation environment to perform the methods of the teachings described above.</p>
<p id="p-0042" num="0041">Thus, it is also to be understood that embodiments of this invention may be used as or to support a software program executed upon some form of processing core (such as the Central Processing Unit (CPU) of a computer) or otherwise implemented or realized upon or within a machine readable medium. A machine readable medium includes any mechanism for storing or transmitting information in a form readable by a machine (e.g., a computer). For example, a machine readable medium includes read only memory (ROM); random access memory (RAM); magnetic disk storage media; optical storage media; flash memory devices; electrical, optical, acoustical or other form of propagated signals (e.g., carrier waves, infrared signals, digital signals, etc.); etc.</p>
<p id="p-0043" num="0042">In the foregoing specification, the invention has been described with reference to specific exemplary embodiments thereof. It will, however, be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention as set forth in the appended claims. The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>The invention claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A computer implemented method to be executed by a computer in a networking system, said computer performing said method comprising:
<claim-text>sending a positive imposter response as a consequence of a status request message having been received, said status request message referring to a network connection, said status request message having been sent to said networking system to ask said networking system to inquire into the status of said network connection, said positive imposter response indicating that said network connection is working properly without inquiring into a true status of said network connection.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising placing said networking system in a state that causes said sending, said networking system being placed into said state because a switch has been made to a new primary signaling control card within said networking system.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref> further comprising keeping said networking system in said state for a fixed period of time after said switch, and, sending a positive imposter response for each status request message that is received while said networking system is within said state.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref> further comprising placing said networking system into a second state as a consequence of said fixed period of time having expired, and, not sending a positive imposter response for any status request message that is received while said networking system is within said second state.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref> further comprising queuing into said queue all status request messages that are received while said networking system is within said second state, and, using a service request engine to service said queue.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising placing said networking system in a state that causes said sending, said networking system being placed into said state because a queue that provides status request messages to a service request engine has reached a specified threshold level.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref> further comprising keeping said system in said state until said queue reaches a level that is lower than said threshold level, and, sending a positive imposter response for each status request message that is received while said networking system is within said state.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref> further comprising placing said networking system into a second state as a consequence of said queue reaching said lower level, and, not sending a positive imposter response for any status request message that is received while said networking system is within said second state.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref> further comprising queuing into said queue all status request messages that are received while said networking system is within said second state, and, using said service request engine to service said queue.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising inquiring into the status of said network connection after said positive imposter response has been sent.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref> further comprising not sending another response to said status request message if said connection is properly working.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref> further comprising initiating a tear down of said connection if said connection is not properly working.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising recognizing, on a line interface card (LIC), that said request message has arrived and authorizing said sending on said LIC.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. A computer readable storage medium having stored thereon a plurality of instructions, said plurality of instructions when executed by a computer within a networking system, cause said computer to perform a method, said method comprising:
<claim-text>sending a positive imposter response as a consequence of a status request message having been received, said status request message referring to a network connection, said status request message having been sent to said networking system to ask said networking system to inquire into the status of said network connection, said positive imposter response indicating that said network connection is working properly without inquiring into a true status of said network connection.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The computer readable storage medium of <claim-ref idref="CLM-00014">claim 14</claim-ref> wherein said method further comprises:
<claim-text>placing said networking system in a state that causes said sending, said networking system being placed into said state because a switch has been made to a new primary signaling control card within said networking system.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The computer readable storage medium of <claim-ref idref="CLM-00015">claim 15</claim-ref> wherein said method further comprises:
<claim-text>keeping said networking system in said state for a fixed period of time after said switch, and, sending a positive imposter response for each status request message that is received while said networking system is within said state.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The computer readable storage medium of <claim-ref idref="CLM-00016">claim 16</claim-ref> wherein said method further comprises: placing said networking system into a second state as a consequence of said fixed period of time having expired, and, not sending a positive imposter response for any status request message that is received while said networking system is within said second state.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The computer readable storage medium of <claim-ref idref="CLM-00017">claim 17</claim-ref> wherein said method further comprises queuing into said queue all status request messages that are received while said networking system is within said second state, and, using a service request engine to service said queue.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The computer readable storage medium of <claim-ref idref="CLM-00014">claim 14</claim-ref> wherein said method further comprises: placing said networking system in a state that causes said sending, said networking system being placed into said state because a queue that provides status request messages to a service request engine has reached a specified threshold level.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The computer readable storage medium of <claim-ref idref="CLM-00019">claim 19</claim-ref> wherein said method further comprises keeping said networking system in said state until said queue reaches a level that is lower than said threshold level, and, sending a positive imposter response for each status request message that is received while said networking system is within said state.</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. The computer readable storage medium of <claim-ref idref="CLM-00020">claim 20</claim-ref> wherein said method further comprises placing said networking system into a second state as a consequence of said queue reaching said lower level, and, not sending a positive imposter response for any status request message that is received while said networking system is within said second state.</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. The computer readable storage medium of <claim-ref idref="CLM-00021">claim 21</claim-ref> wherein said method further comprises queuing into said queue all status request messages that are received while said networking system is within said second state, and, using said service request engine to service said queue.</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. The computer readable storage medium of <claim-ref idref="CLM-00014">claim 14</claim-ref> wherein said method further comprises inquiring into the status of said network connection after said positive imposter response has been sent.</claim-text>
</claim>
<claim id="CLM-00024" num="00024">
<claim-text>24. The computer readable storage medium of <claim-ref idref="CLM-00023">claim 23</claim-ref> wherein said method further comprises not sending another response to said status request message if said connection is properly working.</claim-text>
</claim>
<claim id="CLM-00025" num="00025">
<claim-text>25. The computer readable storage medium of <claim-ref idref="CLM-00023">claim 23</claim-ref> wherein said method further comprises initiating a tear down of said connection if said connection is not properly working.</claim-text>
</claim>
<claim id="CLM-00026" num="00026">
<claim-text>26. The computer readable storage medium of <claim-ref idref="CLM-00025">claim 25</claim-ref> wherein said method further comprises recognizing, on a line interface card (LIC), that said request message has arrived and authorizing said sending on said LIC.</claim-text>
</claim>
<claim id="CLM-00027" num="00027">
<claim-text>27. A networking system, comprising:
<claim-text>means for sending a positive imposter response as a consequence of a status request message having been received, said status request message referring to a network connection, said status request message having been sent to said networking system to ask said networking system to inquire into the status of said network connection, said positive imposter response indicating that said network connection is working properly without inquiring into a true status of said network connection; and,</claim-text>
</claim-text>
<claim-text>means for placing said networking in a state that causes said sending.</claim-text>
</claim>
<claim id="CLM-00028" num="00028">
<claim-text>28. The networking system of <claim-ref idref="CLM-00027">claim 27</claim-ref> wherein said means for placing said networking system in a state further comprises means for detecting that a switch has been made to a new primary signaling control card within said networking system.</claim-text>
</claim>
<claim id="CLM-00029" num="00029">
<claim-text>29. The networking system of <claim-ref idref="CLM-00028">claim 28</claim-ref> further comprising means for keeping said networking system in said state for a fixed period of time after said switch, and, said means for sending a positive imposter response further comprises means for sending a positive imposter response for each status request message that is received while said networking system is within said state.</claim-text>
</claim>
<claim id="CLM-00030" num="00030">
<claim-text>30. The networking system of <claim-ref idref="CLM-00029">claim 29</claim-ref> further comprising means for placing said networking system into a second state as a consequence of said fixed period of time having expired, and wherein said means for sending a positive imposter response does not send a positive imposter response for any status request message that is received while said networking system is within said second state.</claim-text>
</claim>
<claim id="CLM-00031" num="00031">
<claim-text>31. The networking system of <claim-ref idref="CLM-00030">claim 30</claim-ref> further comprising means for queuing into said queue all status request messages that are received while said networking system is within said second state, and, a service request engine that services said queue.</claim-text>
</claim>
<claim id="CLM-00032" num="00032">
<claim-text>32. The networking system of <claim-ref idref="CLM-00027">claim 27</claim-ref> wherein said means for placing said networking system in a state further comprises means for detecting that a queue that provides status request messages to a service request engine has reached a specified threshold level.</claim-text>
</claim>
<claim id="CLM-00033" num="00033">
<claim-text>33. The networking system of <claim-ref idref="CLM-00032">claim 32</claim-ref> further comprising means for keeping said networking system in said state until said queue reaches a level that is lower than said threshold level, and wherein, said means for sending a positive imposter response further comprises means for sending a positive imposter response for each status request message that is received while said networking system is within said state.</claim-text>
</claim>
<claim id="CLM-00034" num="00034">
<claim-text>34. The networking system of <claim-ref idref="CLM-00033">claim 33</claim-ref> further comprising means for placing said networking system into a second state as a consequence of said queue reaching said lower level, and wherein, said means for sending a positive imposter response does not send a positive imposter response for any status request message that is received while said networking system is within said second state.</claim-text>
</claim>
<claim id="CLM-00035" num="00035">
<claim-text>35. The networking system of <claim-ref idref="CLM-00034">claim 34</claim-ref> further comprising means for queuing into said queue all status request messages that are received while said networking system is within said second state into.</claim-text>
</claim>
<claim id="CLM-00036" num="00036">
<claim-text>36. The networking system of <claim-ref idref="CLM-00027">claim 27</claim-ref> further comprising means for inquiring into the status of said network connection after said positive imposter response has been sent.</claim-text>
</claim>
<claim id="CLM-00037" num="00037">
<claim-text>37. The networking system of <claim-ref idref="CLM-00036">claim 36</claim-ref> further comprising means for initiating a tear down of said connection if said connection is not properly working.</claim-text>
</claim>
<claim id="CLM-00038" num="00038">
<claim-text>38. The networking system of <claim-ref idref="CLM-00027">claim 27</claim-ref> further comprising means for recognizing, on a line interface card (LIC), that said request message has arrived and means for authorizing said sending on said LIC.</claim-text>
</claim>
<claim id="CLM-00039" num="00039">
<claim-text>39. An apparatus, comprising:
<claim-text>a networking system that sends a positive imposter response as a consequence of a status request message having been received, said status request message referring to a network connection, said status request message having been sent to said networking system to ask said networking system to inquire into the status of said network connection, said positive imposter response indicating that said network connection is working properly without inquiring into a true status of said network connection.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00040" num="00040">
<claim-text>40. The apparatus of <claim-ref idref="CLM-00039">claim 39</claim-ref> wherein said networking system can be placed into a state that causes said sending, said networking system being placed into said state because a switch has been made to a new signaling primary control card within said networking system.</claim-text>
</claim>
<claim id="CLM-00041" num="00041">
<claim-text>41. The apparatus of <claim-ref idref="CLM-00040">claim 40</claim-ref> wherein said networking system remains in said state for a fixed period of time after said switch, and, sends a positive imposter response for each status request message that is received while said networking system is within said state.</claim-text>
</claim>
<claim id="CLM-00042" num="00042">
<claim-text>42. The apparatus of <claim-ref idref="CLM-00041">claim 41</claim-ref> wherein said networking system can be placed into a second state as a consequence of said fixed period of time having expired, and wherein, said networking system does not send a positive imposter response for any status request message that is received while said networking system is within said second state.</claim-text>
</claim>
<claim id="CLM-00043" num="00043">
<claim-text>43. The apparatus of <claim-ref idref="CLM-00042">claim 42</claim-ref> further comprising a queue that queues all status request messages that are received while said networking system is within said second state, and, a service request engine to service said queue.</claim-text>
</claim>
<claim id="CLM-00044" num="00044">
<claim-text>44. The apparatus of <claim-ref idref="CLM-00039">claim 39</claim-ref> wherein said networking system can be placed into a state that causes said sending, said networking system being placed into said state because a queue that provides status request messages to a service request engine has reached a specified threshold level.</claim-text>
</claim>
<claim id="CLM-00045" num="00045">
<claim-text>45. The apparatus of <claim-ref idref="CLM-00044">claim 44</claim-ref> wherein said networking system remains in said state until said queue reaches a level that is lower than said threshold level, and wherein, said networking system sends a positive imposter response for each status request message that is received while said networking system is within said state.</claim-text>
</claim>
<claim id="CLM-00046" num="00046">
<claim-text>46. The apparatus of <claim-ref idref="CLM-00045">claim 45</claim-ref> wherein said networking system can be placed into a second state as a consequence of said queue reaching said lower level, and wherein, said networking system does not send a positive imposter response for any status request message that is received while said networking system is within said second state.</claim-text>
</claim>
<claim id="CLM-00047" num="00047">
<claim-text>47. The apparatus of <claim-ref idref="CLM-00045">claim 45</claim-ref> wherein said networking system inquires into the status of said network connection after said positive imposter response has been sent.</claim-text>
</claim>
<claim id="CLM-00048" num="00048">
<claim-text>48. The apparatus of <claim-ref idref="CLM-00047">claim 47</claim-ref> wherein said networking system does not send another response to said status request message if said connection is properly working.</claim-text>
</claim>
<claim id="CLM-00049" num="00049">
<claim-text>49. The apparatus of <claim-ref idref="CLM-00047">claim 47</claim-ref> wherein said networking system initiates a tear down of said connection if said connection is not properly working.</claim-text>
</claim>
<claim id="CLM-00050" num="00050">
<claim-text>50. The apparatus of <claim-ref idref="CLM-00039">claim 39</claim-ref> wherein said networking system further comprises a line interface card (LIC) that recognizes that said request message has arrived and that authorizes said sending.</claim-text>
</claim>
<claim id="CLM-00051" num="00051">
<claim-text>51. A networking system, comprising:
<claim-text>a) an event detection and state control unit;</claim-text>
<claim-text>b) a received status request unit, said received status request unit further comprising a primary queue and a service request engine unit;</claim-text>
<claim-text>c) a multiplexer that multiplexes received status requests into:
<claim-text>a) said primary queue if said event detection and state control unit determines that said networking system is to be within a normal operating mode;</claim-text>
<claim-text>b) a reserve queue if said event detection and state control unit determines that said networking system may receive a flood of request messages or has received a flood of request messages;</claim-text>
<claim-text>c) a positive imposter status request response unit coupled to said reserve queue, said positive imposter status request response unit to send a positive imposter status request response for each status request entered into said reserve queue.</claim-text>
</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>
