<us-patent-grant lang="EN" dtd-version="v4.2 2006-08-23" file="US07299354-20071120.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20071106" date-publ="20071120">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>07299354</doc-number>
<kind>B2</kind>
<date>20071120</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>10675381</doc-number>
<date>20030930</date>
</document-id>
</application-reference>
<us-application-series-code>10</us-application-series-code>
<us-term-of-grant>
<us-term-extension>698</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>H</section>
<class>04</class>
<subclass>L</subclass>
<main-group>9</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>713165</main-classification>
<further-classification>713168</further-classification>
<further-classification>713176</further-classification>
<further-classification>380278</further-classification>
<further-classification>380 44</further-classification>
<further-classification>380 46</further-classification>
</classification-national>
<invention-title id="d0e53">Method to authenticate clients and hosts to provide secure network boot</invention-title>
<references-cited>
<citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5349643</doc-number>
<kind>A</kind>
<name>Cox et al.</name>
<date>19940900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713155</main-classification></classification-national>
</citation>
<citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5826015</doc-number>
<kind>A</kind>
<name>Schmidt</name>
<date>19981000</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>5978912</doc-number>
<kind>A</kind>
<name>Rakavy et al.</name>
<date>19991100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>6105013</doc-number>
<kind>A</kind>
<name>Curry et al.</name>
<date>20000800</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>6189100</doc-number>
<kind>B1</kind>
<name>Barr et al.</name>
<date>20010200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>6199194</doc-number>
<kind>B1</kind>
<name>Wang et al.</name>
<date>20010300</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>6684326</doc-number>
<kind>B1</kind>
<name>Cromer et al.</name>
<date>20040100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>6871210</doc-number>
<kind>B1</kind>
<name>Subramanian</name>
<date>20050300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709203</main-classification></classification-national>
</citation>
<citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>6976163</doc-number>
<kind>B1</kind>
<name>Hind et al.</name>
<date>20051200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>7085385</doc-number>
<kind>B2</kind>
<name>Frantz et al.</name>
<date>20060800</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>7089300</doc-number>
<kind>B1</kind>
<name>Birse et al.</name>
<date>20060800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709221</main-classification></classification-national>
</citation>
<citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>7103772</doc-number>
<kind>B2</kind>
<name>JÃ¸rgensen et al.</name>
<date>20060900</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>2002/0120847</doc-number>
<kind>A1</kind>
<name>Kamperman</name>
<date>20020800</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>2003/0226017</doc-number>
<kind>A1</kind>
<name>Palekar et al.</name>
<date>20031200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>2003/0226018</doc-number>
<kind>A1</kind>
<name>Tardo et al.</name>
<date>20031200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>2004/0010686</doc-number>
<kind>A1</kind>
<name>Goh et al.</name>
<date>20040100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>2004/0193867</doc-number>
<kind>A1</kind>
<name>Zimmer et al.</name>
<date>20040900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713  2</main-classification></classification-national>
</citation>
<citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>2005/0010680</doc-number>
<kind>A1</kind>
<name>Zick et al.</name>
<date>20050100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709237</main-classification></classification-national>
</citation>
<citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>2005/0044363</doc-number>
<kind>A1</kind>
<name>Zimmer et al.</name>
<date>20050200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>2005/0081036</doc-number>
<kind>A1</kind>
<name>Hsu</name>
<date>20050400</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>2005/0144448</doc-number>
<kind>A1</kind>
<name>England et al.</name>
<date>20050600</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>2005/0278531</doc-number>
<kind>A1</kind>
<name>England et al.</name>
<date>20051200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>2006/0095769</doc-number>
<kind>A1</kind>
<name>Zuccherato et al.</name>
<date>20060500</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
</references-cited>
<number-of-claims>27</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>713165</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>713  2</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>713168</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>713176</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>726  4</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>726 10</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>726 14</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>726 15</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>726 22</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>726 13</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>726  2</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709227</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>710315</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>710105</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>380278</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>380 44</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>380 46</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>5</number-of-drawing-sheets>
<number-of-figures>5</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20050071677</doc-number>
<kind>A1</kind>
<date>20050331</date>
</document-id>
</related-publication>
</us-related-documents>
<parties>
<applicants>
<applicant sequence="001" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Khanna</last-name>
<first-name>Rahul</first-name>
<address>
<city>Beaverton</city>
<state>OR</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="002" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Zimmer</last-name>
<first-name>Vincent J.</first-name>
<address>
<city>Federal Way</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
</applicants>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Blakely, Sokoloff, Taylor &amp; Zafman LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</parties>
<assignees>
<assignee>
<addressbook>
<orgname>Intel Corporation</orgname>
<role>02</role>
<address>
<city>Santa Clara</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Truong</last-name>
<first-name>T. B.</first-name>
<department>2135</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A method for authenticating clients and boot server hosts to provide a secure network boot environment. Messages are exchanged between a client and a boot server or authentication server proxy for the boot server during pre-boot operations of the client to authentic the boot server and the client. In one embodiment, authentication is performed by comparing shared secrets stored on each of the client and the boot server or authentication proxy. The shared secret comprises authentication credentials that may be provisioned by an administrator, user, or by the client itself via a trusted platform module. Authentication provisioning schemes include an Extensible Authentication Protocol (EAP) exchange. In one embodiment, authentication is performed during the pre-boot via an authenticated Dynamic Host Configuration Protocol (DHCP) process. The scheme provides a faster and more simplified authentication mechanism, without requiring extensive set-up for IT administrators or significantly changing the login and OS boot user experience.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="166.71mm" wi="178.48mm" file="US07299354-20071120-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="259.25mm" wi="186.86mm" file="US07299354-20071120-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="239.78mm" wi="185.67mm" file="US07299354-20071120-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="212.77mm" wi="189.82mm" file="US07299354-20071120-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="200.91mm" wi="193.29mm" file="US07299354-20071120-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="238.17mm" wi="192.11mm" file="US07299354-20071120-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">FIELD OF THE INVENTION</heading>
<p id="p-0002" num="0001">The field of invention relates generally to computer systems and, more specifically but not exclusively relates to an authentication technique to enable secure network booting.</p>
<heading id="h-0002" level="1">BACKGROUND INFORMATION</heading>
<p id="p-0003" num="0002">It is becoming ever more common to provide network booting of operating systems (OS) in enterprise environments, web server environments, and the like. Under a network operating system boot, an OS image is loaded (booted) from a network resource, such as a boot server. This scheme provides advantages relating to configuration control and generally reduces IT management costs, while at the same time reducing licensing costs.</p>
<p id="p-0004" num="0003">While advantageous in many ways, the conventional network-booting scheme is unsecure. For instance, an insider may advertise the availability of a rogue boot server masquerading as a legitimate boot server that serves malicious OS images. The net result is that unknowing users load a malicious OS image, which may contain a virus that causes widespread havoc or a Trojan that sits unnoticed for days, weeks, or months until an activation event occurs, causing the Trojan code to be launched.</p>
<p id="p-0005" num="0004">In view of this problem, techniques have been developed to authenticate boot images (or boot servers hosting such boot images) such that malicious or otherwise unauthentic images can be easily identified, preventing such images from being booted. For example, BOOT Integrity Services, commonly called BIS, provide a mechanism to authenticate a boot image that is derived from a DHCP (Dynamic Host Controller Protocol) offer. Even through the mechanism is sufficient to ascertain that the image is not modified in any way (i.e., is authentic), it has some shortcomings that may prevent its use in more secure environments.</p>
<p id="p-0006" num="0005">One problem is the conventional scheme uses digital certificates that need to be certified. The certificate generated by the server needs to be authenticated by CA (Certificate Authority) and CRL (Certificate Revocation List) if not Self-Signed. If one of these servers is down, a false certificate may accidentally be accepted. In the case of Self-Signed certificated, its origin cannot be verified. Even though there is a provision for public key cryptography, an established mechanism for authentication of the client and boot server is still lacking. This may cause a malicious DHCP Server to act as a âMan in the Middleâ or a âMalicious Proxy DHCP Serverâ.</p>
<p id="p-0007" num="0006">Public Key cryptography can be very taxing because of exponent mathematics. This is more so in low power clients, such as PDA (Personal Digital Assistant) or wireless clients. For example, on a 16 MHz client, a 512-bit modular multiplication costs about 100 ms per calculation. As a result, decrypting a downloaded boot image via public key encryption may take seconds or even minutes, depending upon the type of client performing the download.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0008" num="0007">The foregoing aspects and many of the attendant advantages of this invention will become more readily appreciated as the same becomes better understood by reference to the following detailed description, when taken in conjunction with the accompanying drawings, wherein like reference numerals refer to like parts throughout the various views unless otherwise specified:</p>
<p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. 1</figref> is a flowchart illustrating operations and logic implemented to perform a secure network boot process, according to one embodiment of the invention;</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. 2</figref> is message flow diagram illustrating the exchange of messages and generation of message content in support of a DHCP (Dynamic Host Configuration Protocol) authentication scheme, according to one embodiment of the invention;</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 3</figref> is a message flow diagram illustrating the exchange of messages and generation of message content under an Extensible Authentication Protocol (EAP) scheme that is used to provision shared credentials on a client (supplicant) and a server (authenticator), according to one embodiment of the invention</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 4</figref> is a schematic diagram illustrating the exchange of messages between a PXE (pre-boot execution environment) client, DHCP server, and boot server during a secure network boot process, according to one embodiment of the invention</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 5</figref> is a schematic block diagram illustrating a configuration of an exemplary computer system that may be used to practice embodiments of the invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION OF PREFERRED EMBODIMENTS</heading>
<p id="p-0014" num="0013">Embodiments of methods and system for supporting a secure network boot using a simplified authentication mechanism are described herein. In the following description, numerous specific details are set forth to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize, however, that the invention can be practiced without one or more of the specific details, or with other methods, components, materials, etc. In other instances, well-known structures, materials, or operations are not shown or described in detail to avoid obscuring aspects of the invention.</p>
<p id="p-0015" num="0014">Reference throughout this specification to âone embodimentâ or âan embodimentâ means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus, the appearances of the phrases âin one embodimentâ or âin an embodimentâ in various places throughout this specification are not necessarily all referring to the same embodiment. Furthermore, the particular features, structures, or characteristics may be combined in any suitable manner in one or more embodiments.</p>
<p id="p-0016" num="0015">Embodiments of the present invention provide a secure network boot flow that implements an authentication scheme that does not require the client to use public key encryption methods with each boot. Rather, shared secret data one the client and boot server (or authentication proxy) are compared during pre-boot using a secure message exchange process. This provides a faster and more simplified authentication mechanism, without requiring extensive set-up for IT administrators or significantly changing the login and OS boot user experience.</p>
<p id="p-0017" num="0016">As an overview of one embodiment of the flow process, attention is directed to the flowchart of <figref idref="DRAWINGS">FIG. 1</figref>. The process starts off in a start block <b>100</b>, which depicts a restart event, i.e., an event corresponding to a restart or reset of a computer system. In response to the restart event, system initialization begins in a block <b>102</b>A. During system initialization, system firmware is loaded and executed to verify operation of various system components (e.g., POST (power-on self test) operations), set up run-time firmware services, and to prepare the system for subsequent loading of an operating system.</p>
<p id="p-0018" num="0017">During the system initialization, a determination is made in a decision block <b>104</b> to whether an administrative action is requested. For example, for a newly-deployed system, an administrator may wish to perform some initial security measures, such as setting up a userID (i.e., Login) and password. Typically, the administrative action may be made available via a console input, function key activation, or selection of an administrative action option presented to a user during system initialization.</p>
<p id="p-0019" num="0018">If the answer to decision block <b>104</b> is YES, the logic proceeds to a decision block <b>106</b> in which a determination is made to whether this is a first time âtake ownershipâ event. In brief, a take ownership event concerns setting up access to a system via some sort of authentication scheme involving âownershipâ or authentication credentials. Ownership may apply to complete access to a system, or may be restricted to a particular aspect of the system, such as a boot server could âownâ control of a system's operating system. In accordance with principles of the current embodiment, the determination in decision block <b>106</b> relates to establishing a one-time shared secret between a client system and a boot server.</p>
<p id="p-0020" num="0019">Thus, if the answer to decision block <b>106</b> is YES, the logic proceeds to a block <b>108</b> in which authentication credentials are provisioned. In one embodiment, this comprises a shared secret that is issued in the form of a shared key (K<sub>owner</sub>) and stored on either the client (if selected from a key list already stored on the boot server or an authentication server or proxy server of either), or stored on both the client and the boot server (if dynamically generated by the boot server, authentication server, or proxy). There are several schemes for provisioning authentication credentials that are well-known in the security arts that may be used.</p>
<p id="p-0021" num="0020">For example, in one embodiment, a credential-provisioning scheme is implemented via an in-system Baseboard Management Controller (BMC) service processor and associated local or remote intelligent platform management interface (IPMI)â(http://www.intel.com/design/servers/ipmi/spec.htm) messaging that is used to load a shared secret password. Also, a system can support various âTake Ownershipâ or âGet Acquaintedâ protocols; these get acquainted protocols involve the user taking ownership of the platform. A means by which this credential provisioning can be handled can be an out-of-band channel (IPMI), a local console (i.e., setup screen where user types in initial password), or imprinting the system in a staging area (i.e., private network using Web Page served from the client and system administrator typing in initial password).</p>
<p id="p-0022" num="0021">An alternate provisioning, âtake owner-shipâ, or âget acquaintedâ protocol involves the use of public and private keys. With the advent of trusted platform modules (TPM), such as the TPM described in the Trusted Computing Group (http://www.trustedcomputinggroup.org), there is a set of key-pairs that are stored in a platform. To instantiate the shared key between the client and server, the client can use an Anonymous Identification Key (AIK) for which some local service vets. Then there can be a challenge/response sequence wherein the server authenticates the client using this key only during the âget acquaintedâ phase and the public key is used to encrypt a random number or string that shall become the shared secret. In this case, there is a secure means by which to establish the shared secret. There are also network protocols, such as the Extensible Authentication Protocol (EAP, RFC 2284), that facilitate this exchange in a simple, efficient manner. One advantage of EAP is that the protocol, in tandem with 802.1x switches, allows this exchange to occur prior to subsequent authenticated DHCP exchanges (i.e., you can do it prior to ascertaining your IP address). This does not require a full public key infrastructure (PKI) implementation, either. It can be a locally-administered infrastructure. Details of an exemplary EAP process for obtaining credentials are described below with reference to <figref idref="DRAWINGS">FIG. 3</figref>.</p>
<p id="p-0023" num="0022">Returning to the flowchart of <figref idref="DRAWINGS">FIG. 1</figref>, once the credentials are provisioned, the logic proceeds to either a block <b>110</b> in which additional administrative actions may be performed, or proceeds directly to continuing system initialization in a block <b>112</b>. In the event the one-time take ownership event has already been performed, in one embodiment a determination is made in a decision block <b>114</b> whether the administrator is authenticated. For example, there may be implementations under which an authentication challenge in the form of a key exchange is issued prior to allowing administrative access to a system. If the challenge is successful, the logic proceeds to block <b>110</b> in which the administrative action is performed. If the challenge is unsuccessful, the administrative action is not allowed, causing the logic to proceed to block <b>112</b> to continue the system initialization.</p>
<p id="p-0024" num="0023">During a latter portion of the initialization sequence (generally), a determination is made in a decision block <b>114</b> to whether the system is to be booted from a network (i.e., a remote boot) or from local media. In general, a boot sequence can be defined for a Microsoft WindowsÂ® operating system by editing the boot.ini file. Similar techniques may be used for other operation systems, such as UNIX variants, LINUX variants, etc. In effect, the boot sequence will try to boot from one or more boot targets listed in the sequence in the order in which the boot targets are listed, e.g., CD-ROM, local disk, network boot, etc. If a remote boot request is made, the logic proceeds to a block <b>116</b> in which the boot image is authenticated using an authenticated DHCP process, as described below. The operating system is then booted in a block <b>120</b> if it is determined the boot image is authentic in a decision block <b>118</b>, otherwise an error message is generated in a block <b>122</b>. If a local boot image is available (and is encountered as a boot option prior to a network boot option), the OS is booted from the local media, as depicted in a block <b>120</b>.</p>
<p id="p-0025" num="0024">Further details of the operations of the boot image authentication process of block <b>116</b> in accordance with one embodiment are shown in <figref idref="DRAWINGS">FIG. 2</figref>. The process employs an implementation of authentication for DHCP messages, as defined in RFC (request for comment) <b>3118</b>. DHCP transports protocol stack configuration parameters from centrally administered servers to TCP/IP hosts. Among those parameters is an IP (Internet Protocol) address. DHCP servers can be configured to dynamically allocate addresses from a pool of addresses, eliminating a manual step in configuration of TCP/IP hosts.</p>
<p id="p-0026" num="0025">DHCP threats are similar to those for OS boot services discussed above. A typical threat to DHCP is inherently an insider threat (assuming a properly configured network where BOOTP ports are blocked on the enterprise's perimeter gateways.) Regardless of the gateway configuration, however, the potential attacks by insiders and outsiders are the same.</p>
<p id="p-0027" num="0026">The attack specific to a DHCP client is the possibility of the establishment of a ârogueâ server with the intent of providing incorrect configuration information to the client. The motivation for doing so may be to establish a âman in the middleâ attack or it may be for a âdenial of serviceâ (DoS) attack. There is another threat to DHCP clients from mistakenly or accidentally configured DHCP servers that answer DHCP client requests with unintentionally incorrect configuration parameters.</p>
<p id="p-0028" num="0027">The threat specific to a DHCP server is an invalid client masquerading as a valid client. The motivation for this may be for âtheft of serviceâ, or to circumvent auditing for any number of nefarious purposes. The threat common to both the client and the server is the resource DoS attack. These attacks typically involve the exhaustion of valid addresses, or the exhaustion of CPU or network bandwidth, and are present anytime there is a shared resource. In current practice, redundancy mitigates DoS attacks the best.</p>
<p id="p-0029" num="0028">Returning to the event flow and message exchange diagram of <figref idref="DRAWINGS">FIG. 2</figref>, the authentication process starts at a client <b>200</b>, which generates a nonce N<sub>c </sub>(as used herein, a subscript c represents a client-generated object, while a subscript s represents a boot server-generated object) and receives a Password and Login data in response to corresponding user entries. A nonce is a randomly generated value used to defeat âplaybackâ attacks in communication Protocols. One party randomly generates a nonce and sends it to the other party. The receiver encrypts it using the agreed upon secret key and returns it to the sender. Since the nonce was randomly generated by the sender, this defeats playback attacks because the replayer cannot know in advance the nonce the sender will generate. The receiver denies connections that do not have the correctly encrypted nonce.</p>
<p id="p-0030" num="0029">A hash H<sub>c </sub>is then derived by performing an SHA1 (secure hashing algorithm hash) on nonce N<sub>c</sub>+password+Login). The client <b>200</b> then sends a DHCP_DISCOVER message containing Nonce N<sub>c </sub>and the Login data to a DHCP server <b>202</b>. In one embodiment, DHCP server <b>202</b> is co-located with an OS boot server. In another embodiment, the DHCP server and the OS boot server are separate systems that share authentication credential data. An authentication server of DHCP proxy may be used as well.</p>
<p id="p-0031" num="0030">Upon receiving the DHCP_DISCOVER message, DHCP server <b>202</b> generates a nonce N<sub>s </sub>and examines the Password and Login data. DHCP server <b>202</b> also generates a public key K<sub>pub </sub>(using a base/modulus (n) and exponent (e) for an RSA key) and a hash H<sub>câ²</sub>, which is a hash on the nonce N<sub>c</sub>+Password+Login. The nonce N<sub>s</sub>, key K<sub>pub</sub>, and hash H<sub>câ²</sub>, are then returned to client <b>200</b> via a DHCP_OFFER message.</p>
<p id="p-0032" num="0031">Upon receipt of the DHCP_OFFER message, client <b>200</b> compares hashes H<sub>c </sub>and H<sub>câ²</sub>. If they do not match, an âAuthentication Errorâ is returned to server <b>202</b>. If they do match, client <b>200</b> generates a nonce N<sub>câ²</sub> and a temporary key K<sub>temp</sub>, which is derived from a hash of nonce N<sub>câ²</sub>+nonce N<sub>s</sub>+Password+Login. Client <b>200</b> then sends an encrypted shared secret T, which is derived from an ephemeral key (Ek is the encryption operation used to generate the ephemeral key) of nonce N<sub>câ²</sub> and a hash H<sub>sâ²</sub> of nonce N<sub>s</sub>+Password+Login in a DHCP_REQUEST message.</p>
<p id="p-0033" num="0032">In response, server <b>202</b> extracts the nonce N<sub>câ²</sub> and Hash on N<sub>câ²</sub>+Password+Login. If the hash H<sub>s </sub>matches hash H<sub>sâ²</sub>, the client request is honored; otherwise an âAuthentication Errorâ is returned to the client <b>200</b>. Server <b>202</b> then generates another nonce N<sub>sâ²</sub> and independently computes K<sub>temp </sub>via a hash on nonce N<sub>câ²</sub>, nonce N<sub>s</sub>, Password and Login. It then sends nonce N<sub>sâ²</sub> using secret key cryptography (e.g., data encryption standard 3-DES) with the key derived from K<sub>temp </sub>and sends the encrypted data to client <b>200</b> in a DHCP_ACK (DHCP acknowledge) message. The new key to be used for any future sessions (the session key) is K<sub>s</sub>=Hash (N<sub>câ²</sub>, N<sub>sâ²</sub>, Password, Login).</p>
<p id="p-0034" num="0033">The client <b>200</b> derives the nonce N<sub>sâ²</sub> using the pre-calculated K<sub>temp </sub>using 3-DES decryption, and calculates the session key K<sub>s</sub>=Hash (N<sub>câ²</sub>, N<sub>sâ²</sub>, Password, Login). The client <b>200</b> can then use TFTP (Trivial File Transfer Protocol) to download the OS boot Image and extract it using the newly calculated session key K<sub>s</sub>. In one embodiment, the IPSec Authentication Header is used to prefix the encrypted TFTP data payloads.</p>
<p id="p-0035" num="0034">As discussed above, at some point in time prior to performing a secure network boot, it will be necessary to provide a shared secret to both the client that boots the authenticated boot image and the server from which the image is served. In one embodiment, the Extensible Authentication Protocol is employed as the means for communicating authentication information between a Supplicant (EAP peer) and an Authenticator (EAP server). EAP is a general protocol that supports multiple authentication mechanisms. For example, through the use of EAP, support for a number of authentication schemes may be added, including smart cards, Kerberos, Public Key Encryption, One Time Passwords, and others.</p>
<p id="p-0036" num="0035">An exemplary EAP-based shared secret (i.e., key) exchange is shown in <figref idref="DRAWINGS">FIG. 3</figref>. The process involves two phases, including a phase <b>1</b> under which authentication is performed, and a phase <b>2</b> during which secure messages are exchanged. The process begins at an EAP server (Authenticator) <b>302</b>, which sends an EAP request message <b>304</b> containing a SessionID and a Sid to an EAP Peer (Supplicant) <b>300</b>. In one embodiment, the SessionID is a 256-bit random value generated by the authenticator. The Sid comprises and EAP server identity. In one embodiment, the Sid comprises a network access identifier as specified by RFC <b>2486</b>.</p>
<p id="p-0037" num="0036">In response to receiving EAP request message <b>304</b>, EAP peer <b>300</b> returns an EAP response message <b>306</b> including a concatenation of a first hash Hash1, a Pid value, a Kid value, a public key (PubKey) and a random number Prandom selected by the EAP peer. Hash<b>1</b> is an SHA<b>1</b> hash of the first message (i.e., EAP request message <b>304</b>). Pid identifies the EAP Peer <b>300</b>, and hence, the owner or device key. In one embodiment, Pid comprises a GUID (globally unique identifier). Kid identifies the symmetric key the EAP peer expects to use in this context. PubKey is EAP peer <b>300</b>'s public key portion of the device key.</p>
<p id="p-0038" num="0037">The EAP server <b>302</b> then sends an EAP request message <b>308</b> containing a second hash Hash<b>2</b> comprising a hash on EAP response message <b>306</b>, and an SAuth value, which comprises a concatenation of 3 items, encrypted under EAP peer <b>300</b>'s public device key: (1) session key K<sub>s</sub>, (2) value of Hash<b>2</b> repeated, and (3) an HMAC-SHA1-96 digest on the concatenation of K<sub>s </sub>| Hash<b>2</b>. In response, EAP peer <b>300</b> returns an EAP response <b>310</b> containing a third hash Hash<b>3</b> comprising a hash on EAP request message <b>308</b>, and a Mac3 value, comprising an HMAC-SHA1-96 digest of Hash<b>3</b> under the KCK portion of K<sub>s</sub>. This completes the phase <b>1</b> authentication process.</p>
<p id="p-0039" num="0038">In one embodiment, K<sub>s </sub>comprises a 60-octet (480-bit) key with an internal structure of three 20-octete (160-bit) subkeys, including:</p>
<p id="p-0040" num="0039">(1) KCKâ1<sup>st </sup>octet of K<sub>s</sub>. Key confirmation key.</p>
<p id="p-0041" num="0040">(2) KDKâ2<sup>nd </sup>octet of K<sub>s</sub>. Key derivation key.</p>
<p id="p-0042" num="0041">(3) KEKâ3<sup>rd </sup>octet of K<sub>s</sub>. Key encryption key.</p>
<p id="p-0043" num="0042">During phase <b>2</b>, the secure messaging phase, messages are exchanged in a secure manner under which an encrypted format is used that references the previous message received at each participant. This is depicted by the ânâ and ân+1â nomenclature shown in <figref idref="DRAWINGS">FIG. 3</figref>. Each message includes a concatenation of a hash on the previous message (e.g., Hash(n)), a one-byte ID value identifying the type of data being conveyed, Adata, identifying data that is authenticated, Edata, identifying encrypted data, and an Mac value, comprising an HMAC-SHA1-96 digest of the other fields in the message, using the KCK portion of the session key K<sub>s</sub>. In one embodiment, the encrypted Edata only includes keys and keying material. During the phase <b>2</b> operations, a shared secret, such as a key, may be securely exchanged between the EAP peer <b>300</b> and EAP server <b>302</b>.</p>
<p id="p-0044" num="0043"><figref idref="DRAWINGS">FIG. 4</figref> shows a set of message exchanges comprising an encapsulation of the authentication and secure boot image process involving a PXE (pre-boot execution environment) client <b>400</b>, a DHCP (or a DHCP/Proxy) server <b>402</b>, and a boot server <b>404</b>. In addition to being hosted by separate machines (as shown), DHCP server <b>402</b> and boot server <b>404</b> may be co-located. DHCP server <b>402</b> is also representative of an authentication server, in general.</p>
<p id="p-0045" num="0044">PXE is defined on a foundation of industry-standard Internet protocols and services that are widely deployed in the industry, namely TCP/IP, DHCP, and TFTP. These standardize the form of the interactions between clients and servers. To ensure that the meaning of the client-server interaction is standardized as well, certain vendor option fields in the DHCP protocol are used, which are allowed by the DHCP standard. The operations of standard DHCP and/or BOOTP servers (that serve up IP addresses and/or network bootstrap programs) will not be disrupted by the use of the extended protocol. Clients and servers that are aware of these extensions will recognize and use this information, and those that do not recognize the extensions will ignore them.</p>
<p id="p-0046" num="0045">PXE client <b>400</b> and DHCP server <b>402</b> perform the authentication process of <figref idref="DRAWINGS">FIG. 2</figref>, confirming shared secret <b>406</b>, as depicted by PXE DHCP and DHCP acknowledge messages, using the PXE protocol. In brief, the PXE protocol operates as follows. The client initiates the protocol by broadcasting a DHCP_DISCOVER containing an extension that identifies the request as coming from a client that implements the PXE protocol. Assuming that a DHCP server or a Proxy DHCP server implementing this extended protocol is available, after several intermediate steps, the server sends the client a list of appropriate boot servers. The client then discovers a boot server of the type selected and receives the name of an executable file on the chosen boot server. The client uses TFTP to download the executable from the boot server. Finally, the client initiates execution of the downloaded image.</p>
<p id="p-0047" num="0046">During this authentication process, a session key K<sub>s </sub>is also generated. PXE client <b>400</b> then sends a PXE boot server discover message to boot server <b>404</b>. In short, the PXE boot server discover message is a message that is sent to listening devices on a network that is used in discovering the existence of any PXE boot servers on the network. In response to the discover message, the boot server returns an acknowledgement, and PXE client <b>400</b> sends a PXE download request. Packets encrypted using the session key Ks and corresponding to a target boot image are then served by boot server <b>404</b> to PXE client <b>400</b>. As an option, session key Ks may be updated during this process. Subsequently, a final set of encrypted packets are received by PXE client <b>400</b>. Once downloaded, the secure boot image is loaded and executed, as depicted by a block <b>406</b>.</p>
<p id="p-0048" num="0047">The foregoing authentication and secure boot technique provides several advantageous over current network boot processes. These include:</p>
<p id="p-0049" num="0048">1. It is faster because the client doesn't use any public key encryption methods after the initial shared secret exchange. In some embodiments, there is one time public key encryption using the server's public key. Even in this case, if the server's public exponent is small (i.e., 3 or less), there are going to be at minimum of 2 multiplications without loss of any security. The rest of the computation is mostly hash calculations or secret key cryptography like 3-DES. The average time taken by these algorithms for 512 bit modular computations on 16 MHz machine is 4-5 ms. Therefore a very large boot file can be downloaded securely and faster.</p>
<p id="p-0050" num="0049">2. The end of the authenticated DHCP process completes security negotiations. After that, most of the communication is based upon Secret Key Cryptography using the independently computed key.</p>
<p id="p-0051" num="0050">3. Both Client &amp; Server are able to authenticate each other by the end of the authenticated DHCP process, while establishing a secret key for future communication.</p>
<p id="p-0052" num="0051">4. Prevents a âMan in the Middleâ attack using a malicious DHCP server.</p>
<p id="p-0053" num="0052">5. No digital certificates or 3<sup>rd </sup>parties are required to authenticate the identity of each other.</p>
<p id="p-0054" num="0053">6. Uses the default password and login that may have been provided by the network administrator or ISP. In some embodiments, this is used as a shared key between them.</p>
<p id="p-0055" num="0054">7. The technique provides a simple means to provision credentials. The âgetting to knowâ or âtake ownershipâ phase is often omitted. This one-time or rare-event can be based upon more time-consuming public key cryptographic operations.</p>
<heading id="h-0005" level="1">Exemplary Computer System for Practicing Embodiments of the Invention</heading>
<p id="p-0056" num="0055"><figref idref="DRAWINGS">FIG. 5</figref> is an illustration of one embodiment of an exemplary computer system <b>500</b> on which embodiments of the present invention may be implemented. Computer system <b>500</b> includes a processor <b>502</b> coupled to a bus <b>506</b>. Memory <b>504</b>, storage <b>512</b>, non-volatile storage <b>505</b>, display controller <b>508</b>, input/output controller <b>516</b> and modem or network interface <b>514</b> are also coupled to bus <b>506</b>. The computer system <b>500</b> interfaces to external systems through the modem or network interface <b>514</b>. This interface <b>514</b> may began analog modem, Integrated Services Digital Network (ISDN) modem, cable modem, Digital Subscriber Line (DSL) modem, a T-1 line interface, a T-3 line interface, token ring interface, satellite transmission interface, or other interfaces for coupling a computer system to other computer systems. A carrier wave signal <b>523</b> is received/transmitted by modem or network interface <b>514</b> to communicate with computer system <b>500</b>. In the embodiment illustrated in <figref idref="DRAWINGS">FIG. 5</figref>, carrier waive signal <b>523</b> is used to interface computer system <b>500</b> with a computer network <b>524</b>, such as a local area network (LAN), wide area network (WAN), or the Internet. In one embodiment, computer network <b>524</b> is further coupled to a remote computer (not shown), such that computer system <b>500</b> and the remote computer can communicate.</p>
<p id="p-0057" num="0056">Processor <b>502</b> may be a conventional microprocessor including, but not limited to, an Intel Corporation x86, Pentium, or Itanium family microprocessor, a Motorola family microprocessor, or the like. Memory <b>504</b> may include, but not limited to, Dynamic Random Access Memory (DRAM), Static Random Access Memory (SRAM), Synchronized Dynamic Random Access Memory (SDRAM), Rambus Dynamic Random Access Memory (RDRAM), or the like. Display controller <b>508</b> controls in a conventional manner a display <b>510</b>, which in one embodiment may be a cathode ray tube (CRT), a liquid crystal display (LCD), and active matrix display or the like. An input/output device <b>518</b> coupled to input/output controller <b>516</b> may be a keyboard, disk drive, printer, scanner and other input and output devices, including a mouse, trackball, trackpad, joystick, or other pointing device.</p>
<p id="p-0058" num="0057">In general, non-volatile storage <b>505</b> is used to store instructions, such as firmware, and/or data. Non-volatile storage devices include, but are not limited to, Read-Only Memory (ROM), Flash memory, Erasable Programmable Read Only Memory (EPROM), Electronically Erasable Programmable Read Only Memory (EEPROM), or the like.</p>
<p id="p-0059" num="0058">Storage <b>512</b> in one embodiment may be a magnetic hard disk, an optical disk, or another form of storage for large amounts of data. Some data may be written by a direct memory access process into memory <b>504</b> during execution of software in computer system <b>500</b>. It is appreciated that software may reside in storage <b>512</b>, memory <b>504</b>, non-volatile storage <b>505</b> or may be transmitted or received via modem or network interface <b>514</b>.</p>
<p id="p-0060" num="0059">In embodiments in which the âtake ownershipâ protocol is implemented via a trusted platform module, a TMP 526 may be provided. In general, TMP 526 may be used to generate a shared secret (i.e., key) using one of many mechanisms defined by corresponding specifications available at http:H/www.trustedcomptuinggroup.org. The shared secret is generally depicted as an ownership token <b>528</b>.</p>
<p id="p-0061" num="0060">For the purposes of the specification, a machine-readable medium includes any mechanism that provides (i.e., stores and/or transmits) information in a form readable or accessible by a machine (e.g., a computer, network device, personal digital assistant, manufacturing tool, any device with a set of one or more processors, etc.). For example, a machine-readable medium includes, but is not limited to, recordable/non-recordable media (e.g., a read only memory (ROM), a random access memory (RAM), a magnetic disk storage media, an optical storage media, a flash memory device, etc.).</p>
<p id="p-0062" num="0061">It will be appreciated that computer system <b>500</b> is one example of many possible computer systems that have different architectures. For example, computer systems that utilize the Microsoft Windows operating system in combination with Intel microprocessors often have multiple buses, one of which may be considered a peripheral bus. Network computers may also be considered as computer systems that may be used with the present invention. Network computers may not include a hard disk or other mass storage, and the executable programs are loaded from a corded or wireless network connection into memory <b>504</b> for execution by processor <b>502</b>. In addition, handheld or palmtop computers, which are sometimes generally referred to as personal digital assistants (PDAs) or pocket PCs, may also be considered as computer systems that may be used with the present invention. As with network computers, handheld computers may not include a hard disk or other mass storage, and the executable programs are loaded from a corded or wireless network connection into memory <b>504</b> for execution by processor <b>502</b>. A typical computer system will usually include at least a processor <b>502</b>, memory <b>504</b>, and a bus <b>506</b> coupling memory <b>504</b> to processor <b>502</b>.</p>
<p id="p-0063" num="0062">It will also be appreciated that in one embodiment, computer system <b>500</b> is controlled by operating system software that includes a file management system, such as a disk operating system, which is part of the operating system software. For example, one embodiment of the present invention utilizes Microsoft WindowsÂ® as the operating system for computer system <b>500</b>. In other embodiments, other operating systems that may also be used with computer system <b>500</b> include, but are not limited to, the Apple MacintoshÂ® operating system, the Linux operating system, the Microsoft Windows CEÂ® operating system, the Unix operating system, the 3Com PalmÂ® operating system, or the like.</p>
<p id="p-0064" num="0063">The above description of illustrated embodiments of the invention, including what is described in the Abstract, is not intended to be exhaustive or to limit the invention to the precise forms disclosed. While specific embodiments of, and examples for, the invention are described herein for illustrative purposes, various equivalent modifications are possible within the scope of the invention, as those skilled in the relevant art will recognize.</p>
<p id="p-0065" num="0064">These modifications can be made to the invention in light of the above detailed description. The terms used in the following claims should not be construed to limit the invention to the specific embodiments disclosed in the specification and the claims. Rather, the scope of the invention is to be determined entirely by the following claims, which are to be construed in accordance with established doctrines of claim interpretation.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method, comprising:
<claim-text>authenticating, during a pre-boot phase of a client, a boot server on which an operating system (OS) boot image is stored;</claim-text>
<claim-text>downloading an OS boot image from the boot server if it is authenticated; and</claim-text>
<claim-text>loading the OS boot image on the client, wherein a shared secret is stored at the client and at the boot server, wherein authenticating the boot server includes:</claim-text>
<claim-text>generating a random value at the client;</claim-text>
<claim-text>transmitting the random value to the boot server;</claim-text>
<claim-text>receiving an encrypted value at the client, the encrypted value encrypted at the boot server using the random value and the shared secret stored by the boot server;</claim-text>
<claim-text>decrypting the encrypted value at the client using the shared secret stored by the client; and</claim-text>
<claim-text>comparing the random value with the encrypted value that is decrypted.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising provisioning the shared secret to at least one of the client and the boot server during a one-time provisioning event such that both the client and the boot server have access to the shared secret.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the shared secret is provisioned using an Extensible Authentication Protocol (EAP message) exchange between an authenticator EAP server and the client.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the shared secret is provisioned from the client to the server and is formulated via a key that is generated by a trusted platform module stored by the client.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the shared secret is provisioned using a take ownership protocol under which one of a user or administrator takes ownership of a computer system by providing authentication credentials for that system.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the take ownership protocol comprises provisioning authentication credentials via one of the following: provisioning authentication credentials on the client via an out-of-band channel, enabling a user to enter authentication credentials via a local console, and imprinting the client with authentication credentials via remote entry of the authentication credentials by a system administrator.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the boot server is authenticated using an authenticated dynamic host configuration protocol (DHCP) message exchange process.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising authenticating the client prior to allowing a client to download an OS boot image.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the client is authenticated using an authenticated dynamic host configuration protocol (DHCP) message exchange process.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the client is authenticated by performing the operations of:
<claim-text>encrypting the shared secret stored at the client;</claim-text>
<claim-text>passing the encrypted shared secret to one of the boot server and an authentication proxy for the boot server;</claim-text>
<claim-text>decrypting the encrypted shared secret at said one of the boot server and the proxy for the boot server; and</claim-text>
<claim-text>comparing a shared secret stored at said one of the boot server and the authentication proxy for the boot server with the encrypted shared secret that is decrypted.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>generating a session key; and</claim-text>
<claim-text>employing the session key for encryption and decryption of data transferred between the boot server and the client.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, further comprising:
<claim-text>updating the session key at some point during download of the OS boot image; and</claim-text>
<claim-text>employing the updated session key for encryption and decryption of data transferred between the boot server and the client while downloading a subsequent portion of the OS boot image.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the shared secret is derived from the combination of a user login and a password corresponding to the user login.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. A computer system, comprising:
<claim-text>a processor;</claim-text>
<claim-text>memory, coupled to the processor;</claim-text>
<claim-text>a network interface, coupled to the processor;</claim-text>
<claim-text>a firmware storage device, coupled to the processor; having firmware instructions stored therein that when executed on the processor cause operations to be performed, including:
<claim-text>interacting with a boot server via messages sent to and received from the boot server through the network interface during a pre-boot initialization phase of the computer system to authenticate the boot server;</claim-text>
<claim-text>downloading an OS boot image from the boot server if it is authenticated; and</claim-text>
<claim-text>loading the OS boot image into the memory, wherein a shared secret is stored at the computer system and at the boot server, wherein the boot server is authenticated by execution of the firmware instructions to further perform operations including:</claim-text>
</claim-text>
<claim-text>generating a random value at the computer system;</claim-text>
<claim-text>transmitting the random value to the boot server;</claim-text>
<claim-text>receiving an encrypted value at the computer system, the encrypted value encrypted at the boot server using the random value and the shared secret stored by the boot server;</claim-text>
<claim-text>decrypting the encrypted value at the computer system using the shared secret stored by the computer system; and</claim-text>
<claim-text>comparing the random value with the encrypted value that is decrypted.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The system of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the boot server is authenticated using an authenticated dynamic host configuration protocol (DHCP) message exchange process.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein execution of the firmware instructions further performs authentication of the computer system via the authenticated DHCP message exchange process.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The system of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the OS boot image is served from the boot server in an encrypted form, and execution of the firmware instructions further performs the operation of decrypting the OS boot image.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The system of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein execution of the firmware instructions further performs the operation of interacting, via a message exchange, with the boot server to agree on a session key that is used to encrypt and decrypt the OS boot image.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The system of <claim-ref idref="CLM-00014">claim 14</claim-ref>, further comprising a trusted platform module, operatively coupled to the processor and storing an ownership token that is used to formulate the shared secret.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The system of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the ownership token comprises a key that is instantiated via the trusted platform module.</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. A machine-readable media providing instructions to perform operations on a computer system, including:
<claim-text>interacting with one of a boot server or authentication server via messages generated by the computer system and sent to the boot server or authentication server and messages received from the boot server or authentication server and processed by the computer system during a pre-boot initialization phase of the computer system to authenticate the boot server;</claim-text>
<claim-text>sending a request to the boot server to download an OS boot image from the boot server if it is authenticated;</claim-text>
<claim-text>downloading the OS boot image from the boot server; and</claim-text>
<claim-text>loading the OS boot image into memory of the computer system, wherein a shared secret is stored at the computer system and at the boot server, wherein the boot server is authenticated by execution of the firmware instructions to further perform operations including:</claim-text>
<claim-text>generating a random value at the computer system;</claim-text>
<claim-text>transmitting the random value to the boot server;</claim-text>
<claim-text>receiving an encrypted value at the computer system, the encrypted value encrypted at the boot server using the random value and the shared secret stored by the boot server;</claim-text>
<claim-text>decrypting the encrypted value at the computer system using the shared secret stored by the computer system; and</claim-text>
<claim-text>comparing the random value with the encrypted value that is decrypted.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. The machine-readable media of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the media comprises a firmware storage device and the instructions comprise firmware instructions.</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. The machine-readable media of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein execution of the instructions performs the further operation of broadcasting a boot server discovery message to locate the boot server.</claim-text>
</claim>
<claim id="CLM-00024" num="00024">
<claim-text>24. The machine-readable media of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein execution of the instructions performs the further operations of:
<claim-text>encrypting the shared secret stored at the computer system; and</claim-text>
<claim-text>sending the shared secret in encrypted form to one of the boot server or an authentication proxy for the boot server.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00025" num="00025">
<claim-text>25. The machine-readable media of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the boot server is authenticated using an authenticated dynamic host configuration protocol (DHCP) message exchange process.</claim-text>
</claim>
<claim id="CLM-00026" num="00026">
<claim-text>26. The machine-readable media of <claim-ref idref="CLM-00025">claim 25</claim-ref>, wherein execution of the instructions further performs authentication of the computer system via the authenticated DHCP message exchange process.</claim-text>
</claim>
<claim id="CLM-00027" num="00027">
<claim-text>27. The machine-readable media of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein execution of the instructions further performs the operations of:
<claim-text>generating a user interface on the computer system via which a user can enter authentication credentials;</claim-text>
<claim-text>generating the shared secret based on the authentication credentials; and</claim-text>
<claim-text>sending the shared secret to the boot server or authentication server.</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>
