<us-patent-grant lang="EN" dtd-version="v4.2 2006-08-23" file="US07299164-20071120.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20071106" date-publ="20071120">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>07299164</doc-number>
<kind>B2</kind>
<date>20071120</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>10683925</doc-number>
<date>20031010</date>
</document-id>
</application-reference>
<us-application-series-code>10</us-application-series-code>
<us-term-of-grant>
<us-term-extension>668</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>17</main-group>
<subgroup>10</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>703  2</main-classification>
<further-classification>703 13</further-classification>
</classification-national>
<invention-title id="d0e53">Mixed-signal finite state machine models ensuring analog continuity</invention-title>
<references-cited>
<citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>2002/0167544</doc-number>
<kind>A1</kind>
<name>Raghavan et al.</name>
<date>20021100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>345763</main-classification></classification-national>
</citation>
<citation>
<nplcit num="00002">
<othercit>Panos J. Antsaklis, “Special Issue on Hybrid Systems: Theory and Application A Brief Introduction to the Theory and Applications of Hybrid Systems”, Jul. 200, Proceedings of the IEEE, vol. 88, No. 7, pp. 879-887.</othercit>
</nplcit>
<category>cited by examiner</category>
</citation>
<citation>
<nplcit num="00003">
<othercit>Ernst Christen et al.; “VHDL-AMS—A Hardware Description Language for Analog and Mixed-Signal Applications”, Oct. 1999, IEEE Transactions on Circuits and Systems-II: Analog and Digital Signal Processing, vol. 46, No. 10, pp. 1263-1272.</othercit>
</nplcit>
<category>cited by examiner</category>
</citation>
<citation>
<nplcit num="00004">
<othercit>Tom J. Kazmierski; “Fuzzy-logic digita-analogue interfaces for accurate mixed-signal simulation”, 1998, Proceedings of the conference on Design, automation and test in Europe, pp. 941-944.</othercit>
</nplcit>
<category>cited by examiner</category>
</citation>
</references-cited>
<number-of-claims>10</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>703  2</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>703 13</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>9</number-of-drawing-sheets>
<number-of-figures>13</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20050080600</doc-number>
<kind>A1</kind>
<date>20050414</date>
</document-id>
</related-publication>
</us-related-documents>
<parties>
<applicants>
<applicant sequence="001" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Courtay</last-name>
<first-name>Alan</first-name>
<address>
<city>Tigard</city>
<state>OR</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
</applicants>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Bever, Hoffman &amp; Harms, LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="02" rep-type="attorney">
<addressbook>
<last-name>Harms</last-name>
<first-name>Jeanette S.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</parties>
<assignees>
<assignee>
<addressbook>
<orgname>Synopsys, Inc.</orgname>
<role>02</role>
<address>
<city>Mountain View</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Rodriguez</last-name>
<first-name>Paul</first-name>
<department>2123</department>
</primary-examiner>
<assistant-examiner>
<last-name>Guill</last-name>
<first-name>Russ</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A modeling technique that extends the formalism of finite state machines to analog and mixed-signal systems is proposed. The intended use of this technique is to generate continuous mixed-signal models from a state diagram description. Analog equations can be associated with the states of a finite state machine. A state vector ensures analog continuity between state equations during transitions. Specifically, the state vector components are weight coefficients that vary continuously between 0 and 1, thereby allowing the different state equations of an analog variable to be enabled or disabled depending on which state is active. The state vector formalism supports concurrency (i.e. several states being active at the same time) as well as interrupted transitions (i.e. transitions occurring before the transition time of a previous transition has elapsed). The profile and duration of a transition can be set, thereby allowing a user to accurately match the real behavior of a system as well as aid the simulator to converge.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="207.18mm" wi="84.92mm" file="US07299164-20071120-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="227.84mm" wi="153.16mm" file="US07299164-20071120-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="183.56mm" wi="100.41mm" file="US07299164-20071120-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="236.98mm" wi="192.70mm" file="US07299164-20071120-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="236.81mm" wi="168.49mm" file="US07299164-20071120-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="187.96mm" wi="158.24mm" file="US07299164-20071120-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="257.39mm" wi="132.50mm" file="US07299164-20071120-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="213.02mm" wi="182.88mm" file="US07299164-20071120-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="188.72mm" wi="121.41mm" file="US07299164-20071120-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="199.05mm" wi="126.41mm" file="US07299164-20071120-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0002" num="0001">1. Field of the Invention</p>
<p id="p-0003" num="0002">The present invention relates to the generation of mixed-signal finite state machine models ensuring analog continuity.</p>
<p id="p-0004" num="0003">2. Discussion of the Related Art</p>
<p id="p-0005" num="0004">Simulation allows engineers to determine whether a design functions properly in a software environment before implementing it in silicon, real hardware, or embedded software. Specifically, simulation is used to predict the behavior of a system by relying on the mathematical models of the system components. Three levels of models are typically distinguished in system simulation: digital, analog, and mixed-signal.</p>
<p id="p-0006" num="0005">A digital or event-driven model of a system describes the system with signal assignments, also called events. An event is scheduled and executed in response to changes of values of signals and uses the present values of signals it reads to determine new values for other signals. The signals are discontinuous variables, i.e. their change occurs at discrete time points. The connectivity between the different digital models in a design defines the signal flow. Due to their high simulation speed, digital models are usually preferred to simulate algorithms or electronic circuitries at a high level of abstraction (behavioral).</p>
<p id="p-0007" num="0006">Analog models are used whenever the need arises to characterize detailed physical effects like energy transfers in an electrical network. Just like the effects they represent, analog models are continuous. They are composed of sets of simultaneous equations. These equations are differential and algebraic equations with sets of unknowns that are continuous functions of time. These unknowns are the analog variables of the system. While digital simulators primarily handle an event queue, analog solvers deal with a system of non-linear differential equations. In a transient analysis, most analog solvers choose the time points at which the system is solved in order to meet their accuracy criteria. Because of the highly iterative numerical techniques involved (numerical integration, non-linear solution algorithm and matrix inversion), analog simulation is computationally expensive, especially for large designs.</p>
<p id="p-0008" num="0007">Mixed-signal models include both analog and digital components, and often focus on the interface between analog and digital systems. Such models allow portions of a digital system to be analyzed in more detail by using analog equations without the burden of simulating a fully analog design. Mixed-signal models are also needed when a system is explicitly mixed-signal with separate digital and analog parts. For example, a power converter includes analog switches and digital control circuitry working concurrently. Hardware description languages such as MAST, VHDL-AMS or Verilog-AMS, offer mixed-signal capabilities. However the exchange of data between the digital simulation kernel and the analog solver has to be implemented carefully by the author of the model in order to get accurate results and avoid convergence problems. The analog-to-digital conversion involves triggering events when analog conditions are met. The timing of the events often needs to rely on threshold detections. The digital-to-analog conversion involves creating continuous profiles using ramp or slew functions in order to avoid discontinuity in the analog equations. Mixed-signal modeling languages provide functions to implement these conversions, but this task remains non-trivial for most end-users and is still a barrier to potential increases in design productivity.</p>
<p id="p-0009" num="0008">A popular way of representing a digital or event-driven system is through a state diagram description. State diagrams are a powerful visual formalism for capturing complex system behavior at a high level of abstraction. The models derived from a state diagram description are called finite state machine models. A finite state machine model represents a system that progresses through a series of states by responding to a set of transition conditions. The model stores all of the system's possible states, as well as each state's conditions to transition to another state. State charts have been widely used to describe digital or event-driven systems. The state transitions define the conditions upon which events are triggered. The actions performed during a transition (transition action, state entry or state exit action) are merely event-driven variable assignments assumed to take an insignificant amount of time. Most digital state machine modeling tools also support concurrency: more than one state can be active at the same time. This feature allows a user to easily model parallel activities in a system. States that are related directly or indirectly through transitions cannot be active at the same time. They are exclusive and belong to the same concurrent group of states. In a system, there are always as many concurrent groups as active states.</p>
<p id="p-0010" num="0009">Several attempts to extend the state machine formalism to analog mixed-signal models have been proposed. Simplorer™, licensed by Ansoft Corporation, and Dymola™, licensed by Dynasim, are examples of commercial simulators allowing the user to create mixed-signal state machine models. In the case of Simplorer™, the state machines are digital but their time-discrete output can be directly used in the analog equations of the model. However the user is left with the task of inserting ramp functions outside the state machine to address discontinuities. This task requires significant modeling and computer language expertise. In the case of Dymola, analog equations defining analog variables can be directly associated with the states. But there is no provision to avoid discontinuity in the generated models.</p>
<p id="p-0011" num="0010">The problem of discontinuity with respect to implementing a mixed-signal finite state machine model is further described in reference to <figref idref="DRAWINGS">FIGS. 1A and 1B</figref>. For example, consider a digitally controlled analog switch model (hereinafter switch model) <b>100</b> shown in <figref idref="DRAWINGS">FIG. 1A</figref>. Switch model <b>100</b> has two electrical terminals p and m, and a digital control pin c. As shown in <figref idref="DRAWINGS">FIG. 1B</figref>, switch model <b>100</b> comprises three states: “on”, “off” and “burnt”. The conditions that affect those states are the value of the input pin c (0 or 1) and the power dissipated by the switch (given by Ohm's law as the product of the voltage v by the current i). Setting the control pin to 0 results in the switch turning off, and setting the control pin to 1 results in the switch turning on. If the power dissipated in the switch exceeds a predetermined value pmax, then the switch moves into the “burnt” state.</p>
<p id="p-0012" num="0011">In a mixed-signal finite state machine model (hereinafter model), the analog variables are defined through distinct equations depending on which state is active. For example in switch model <b>100</b>, the current is defined as follows:</p>
<p id="p-0013" num="0012">
<maths id="MATH-US-00001" num="00001">
<math overflow="scroll">
<mtable>
  <mtr>
    <mtd>
      <mtable>
        <mtr>
          <mtd>
            <mrow>
              <mi>State</mi>
              <mo>⁢</mo>
              <mstyle>
                <mspace width="0.8em" height="0.8ex"/>
              </mstyle>
              <mo>⁢</mo>
              <mmultiscripts>
                <mi>off</mi>
                <none/>
                <mi>″</mi>
                <mprescripts/>
                  <none/>
                  <mi>``</mi>
              </mmultiscripts>
              <mo>⁢</mo>
              <mstyle>
                <mtext>:</mtext>
              </mstyle>
            </mrow>
          </mtd>
          <mtd>
            <mrow>
              <mi>i</mi>
              <mo>=</mo>
              <mfrac>
                <mi>v</mi>
                <mi>roff</mi>
              </mfrac>
            </mrow>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mrow>
              <mi>State</mi>
              <mo>⁢</mo>
              <mstyle>
                <mspace width="0.8em" height="0.8ex"/>
              </mstyle>
              <mo>⁢</mo>
              <mmultiscripts>
                <mi>on</mi>
                <none/>
                <mi>″</mi>
                <mprescripts/>
                  <none/>
                  <mi>``</mi>
              </mmultiscripts>
              <mo>⁢</mo>
              <mstyle>
                <mtext>:</mtext>
              </mstyle>
            </mrow>
          </mtd>
          <mtd>
            <mrow>
              <mi>i</mi>
              <mo>=</mo>
              <mfrac>
                <mi>v</mi>
                <mi>ron</mi>
              </mfrac>
            </mrow>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mrow>
              <mi>State</mi>
              <mo>⁢</mo>
              <mstyle>
                <mspace width="0.8em" height="0.8ex"/>
              </mstyle>
              <mo>⁢</mo>
              <mmultiscripts>
                <mi>burnt</mi>
                <none/>
                <mi>″</mi>
                <mprescripts/>
                  <none/>
                  <mi>``</mi>
              </mmultiscripts>
              <mo>⁢</mo>
              <mstyle>
                <mtext>:</mtext>
              </mstyle>
            </mrow>
          </mtd>
          <mtd>
            <mrow>
              <mi>i</mi>
              <mo>=</mo>
              <mn>0</mn>
            </mrow>
          </mtd>
        </mtr>
      </mtable>
    </mtd>
    <mtd>
      <mrow>
        <mo>(</mo>
        <mn>1</mn>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
</maths>
</p>
<p id="p-0014" num="0013">In state “off”, switch model <b>100</b> provides a high resistance roff to current flowing between the p and m terminals. In state “on”, it provides a minimal resistance ron. In state “burnt”, switch model <b>100</b> allows no current to flow between the p and m terminals.</p>
<p id="p-0015" num="0014">When a transition occurs in switch model <b>100</b>, the simulator has to cope with stiff change in the model equations. If no precautions are taken during the model elaboration, the discontinuity in the analog equations is likely to result in simulation convergence problems. Specifically, it can cause spikes (e.g. unreal abrupt changes in voltage or current), higher sensitivity to simulation parameters (e.g. truncation error, time step, etc.), excessive CPU times, and/or aborted simulations. Because the switch is likely to be placed in a design that includes many other models, identifying the origin of the simulation problems and then resolving them can be highly time consuming.</p>
<p id="p-0016" num="0015">Therefore, a need arises for a method of automatically implementing analog continuity in mixed-signal finite state machine models. This method must still allow the user to define concurrent states. Indeed, concurrency is an important feature of an event-driven state machine that must be preserved.</p>
<heading id="h-0002" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0017" num="0016">In accordance with one feature of the invention, analog equations can be associated with the states of a finite state machine. A mathematical formalism allows the generated models to ensure analog continuity during transitions. This formalism is based on the definition of state vectors. The components of a state vector are weight coefficients varying continuously between 0 and 1, thereby allowing the different state equations of an analog variable to be enabled or disabled depending on the active state.</p>
<p id="p-0018" num="0017">Consider the case of one state-dependent analog variable x in a system containing N states. It is first assumed that each state S<sub>j </sub>carries a distinct governing equation or definition for x: Eq<sub>j</sub>=0 with 1&lt;=j&lt;=N (in its most general form, the equations are non-linear and differential). The following composite equation is then implemented in the model:</p>
<p id="p-0019" num="0018">
<maths id="MATH-US-00002" num="00002">
<math overflow="scroll">
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <mrow>
          <munderover>
            <mo>∑</mo>
            <mrow>
              <mi>j</mi>
              <mo>=</mo>
              <mn>1</mn>
            </mrow>
            <mi>N</mi>
          </munderover>
          <mo>⁢</mo>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
          <mo>⁢</mo>
          <mrow>
            <msub>
              <mi>s</mi>
              <mi>j</mi>
            </msub>
            <mo>·</mo>
            <msub>
              <mi>Eq</mi>
              <mi>j</mi>
            </msub>
          </mrow>
        </mrow>
        <mo>=</mo>
        <mn>0</mn>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>(</mo>
        <mn>2</mn>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
</maths>
<br/>
where (s<sub>j</sub>) is the state vector enabling the equation of the active state while disabling the others. To avoid discontinuity during a state transition, the s<sub>j </sub>coefficients act as ramp functions varying between 0 and 1. The user can set their profile to be linear or cubic as well as their duration. The objective of this calibration is to match the behavior of the device and/or aid the simulator to converge. Long transition times with a cubic profile typically create less abrupt changes and tend to facilitate convergence.
</p>
<p id="p-0020" num="0019">Another aspect of the invention is to allow a transition to occur before the transition time of a previous transition has elapsed, and still guarantee analog continuity. In this case, the previous transition is interrupted while the system is redirected towards a third state. Since the state vector allows several state equations to contribute to the system behavior at the same time, it can be viewed as a multi-dimensional ramp.</p>
<p id="p-0021" num="0020">States with no equations can also be permitted. When visiting such states, the state vector remains unchanged and the enabled equation of an analog variable is the one of a previously visited state. This feature provides significant flexibility when defining the state chart. It is also required to support concurrency (i.e. more than one state being active at the same time). When analog variables are defined through equations in the same states, they share the same state vector. If this is not the case, the model includes more than one state vector.</p>
<p id="p-0022" num="0021">In summary, the model generation software uses the state vector formalism to automatically implement multi-dimensional ramp functions in mixed-signal state machine models and consequently increase their robustness.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE FIGURES</heading>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 1A</figref> illustrates a standard topology for a digitally controlled analog switch model.</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 1B</figref> shows the states of the switch model of <figref idref="DRAWINGS">FIG. 1A</figref>. The dot close to the state “off” indicates that this state is the initial one.</p>
<p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. 2A</figref> illustrates the linear profile of a ramp function applied to an analog variable during a state transition.</p>
<p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. 2B</figref> illustrates the cubic profile of a ramp function applied to an analog variable during a state transition.</p>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. 3A</figref> shows the state vector of the switch model of <figref idref="DRAWINGS">FIG. 1B</figref> as function of time during an interrupted transition, i.e. a transition within a transition.</p>
<p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. 3B</figref> shows the trajectory of the state vector corresponding to the transition sequence shown in <figref idref="DRAWINGS">FIG. 3A</figref>.</p>
<p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. 4A</figref> shows a state machine model with concurrent states.</p>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. 4B</figref> shows the distribution of equations for the analog variables x<sub>1</sub>, x<sub>2</sub>, x<sub>3 </sub>and x<sub>4 </sub>in the states of <figref idref="DRAWINGS">FIG. 4A</figref>. A cross in a table cell indicates that an equation exists for the variable of corresponding column in the state of corresponding row.</p>
<p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. 4C</figref> lists the combinations of equations possibly enabled at the same time in the system described in <figref idref="DRAWINGS">FIGS. 4A and 4B</figref>.</p>
<p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. 5</figref> illustrates the functional flow of a mixed-signal state machine modeling tool.</p>
<p id="p-0033" num="0032"><figref idref="DRAWINGS">FIGS. 6A</figref>, <b>6</b>B and <b>6</b>C illustrate screen shots from a modeling tool inserting multi-dimensional ramp functions in mixed-signal finite state machine models.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT</heading>
<p id="p-0034" num="0033">A mixed-signal finite state machine model attempts to reproduce or predict the behavior of an analog mixed-signal system including several modes of operation. The modes of operation are represented by states. A state is a Boolean variable that is either active or inactive. Activity in a finite state machine is determined by state transitions. A state transition is defined by a pair of states (an origin and a destination state) and a Boolean expression (the transition condition). When the origin state is active and the transition condition becomes true, the destination state then becomes active and the origin state inactive.</p>
<p id="p-0035" num="0034">The state-dependent analog variables characterizing the analog mixed-signal system (such as electrical voltages or currents) are defined through different analog equations depending on which state is active. Analog equations are associated with states in such a way that, when a state is active, its associated equations are enabled and define the values of the analog variables. However, instantly enabling and disabling analog equations during a state transition introduces discontinuities likely to cause convergence difficulties in most simulators. The discussion that follows shows how this problem can be addressed.</p>
<p id="p-0036" num="0035">A digitally controlled analog switch model (see switch model <b>100</b> in <figref idref="DRAWINGS">FIGS. 1A and 1B</figref>) is an example of a mixed-signal finite state machine model. In switch model <b>100</b>, the only state-dependent analog variable is the current flowing between terminals p and m. Each state carries a distinct governing equation for the current (see equations (1)). A composite equation for the current is formed as follows:</p>
<p id="p-0037" num="0036">
<maths id="MATH-US-00003" num="00003">
<math overflow="scroll">
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <mi>i</mi>
        <mo>=</mo>
        <mrow>
          <mrow>
            <msub>
              <mi>s</mi>
              <mn>1</mn>
            </msub>
            <mo>·</mo>
            <mfrac>
              <mi>v</mi>
              <mi>roff</mi>
            </mfrac>
          </mrow>
          <mo>+</mo>
          <mrow>
            <msub>
              <mi>s</mi>
              <mn>2</mn>
            </msub>
            <mo>·</mo>
            <mfrac>
              <mi>v</mi>
              <mi>ron</mi>
            </mfrac>
          </mrow>
          <mo>+</mo>
          <mrow>
            <msub>
              <mi>s</mi>
              <mn>3</mn>
            </msub>
            <mo>·</mo>
            <mn>0</mn>
          </mrow>
        </mrow>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>(</mo>
        <mn>3</mn>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
</maths>
<br/>
where (s<sub>1</sub>, s<sub>2</sub>, s<sub>3</sub>) is the state vector of the variable i. Note that the composite equation (3) is in an explicit form. This is possible when the user expresses all the state equations in an explicit form. If one equation is implicit, then the composite equation will also be implicit. In one embodiment, the explicit form can be used, thereby requiring less computation by the simulator and being less likely to create convergence difficulties. The software writing the model in the hardware description language (e.g. MAST, VHDL-AMS, or Verilog-AMS) should be able to recognize the form of the equations given by the user to cast the composite equation in the appropriate form. Symbolic simplifications of the composite equation can also be performed at this point. For example, after symbolic simplifications, the composite equation (3) can be implemented in the model as follows:
</p>
<p id="p-0038" num="0037">
<maths id="MATH-US-00004" num="00004">
<math overflow="scroll">
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <mi>i</mi>
        <mo>=</mo>
        <mrow>
          <mi>v</mi>
          <mo>·</mo>
          <mrow>
            <mo>(</mo>
            <mrow>
              <mfrac>
                <msub>
                  <mi>s</mi>
                  <mn>1</mn>
                </msub>
                <mi>roff</mi>
              </mfrac>
              <mo>+</mo>
              <mfrac>
                <msub>
                  <mi>s</mi>
                  <mn>2</mn>
                </msub>
                <mi>ron</mi>
              </mfrac>
            </mrow>
            <mo>)</mo>
          </mrow>
        </mrow>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>(</mo>
        <mn>4</mn>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
</maths>
</p>
<p id="p-0039" num="0038">In general, let (x<sub>i</sub>) be a vector of M state-dependent analog variables in a system with N states. It is first assumed that the system does not have concurrent states and that each state S<sub>j </sub>contains a distinct governing or constraint equation for all variables x<sub>i</sub>:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>Eq<sub>i,j</sub>(<i>x</i><sub>1</sub><i>,x</i><sub>2</sub><i>, . . . ,x</i><sub>M</sub>)=0 with 1<i>≦i≦M </i>and 1<i>≦j≦N</i>  (5)<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0040" num="0039">Note that the case of concurrent states and the case where not all states carry an equation for the variables (x<sub>i</sub>) are discussed later. In their most general form, equations (5) are non-linear and differential. Note also that the constraint equation of a variable x<sub>i </sub>can involve the other variables x<sub>1 </sub>to x<sub>M </sub>as well as input stimulus variables and the time variable. However, for the sake of readability, equations (5) are written as Eq<sub>i,j</sub>=0.</p>
<p id="p-0041" num="0040">To ensure continuity during state transitions, the following system of equations is implemented in the model:</p>
<p id="p-0042" num="0041">
<maths id="MATH-US-00005" num="00005">
<math overflow="scroll">
<mtable>
  <mtr>
    <mtd>
      <msub>
        <mrow>
          <mo>(</mo>
          <mrow>
            <mrow>
              <munderover>
                <mo>∑</mo>
                <mrow>
                  <mi>j</mi>
                  <mo>=</mo>
                  <mn>1</mn>
                </mrow>
                <mi>N</mi>
              </munderover>
              <mo>⁢</mo>
              <mstyle>
                <mspace width="0.3em" height="0.3ex"/>
              </mstyle>
              <mo>⁢</mo>
              <mrow>
                <msub>
                  <mi>s</mi>
                  <mi>j</mi>
                </msub>
                <mo>·</mo>
                <msub>
                  <mi>Eq</mi>
                  <mrow>
                    <mi>i</mi>
                    <mo>,</mo>
                    <mi>j</mi>
                  </mrow>
                </msub>
              </mrow>
            </mrow>
            <mo>=</mo>
            <mn>0</mn>
          </mrow>
          <mo>)</mo>
        </mrow>
        <mrow>
          <mn>1</mn>
          <mo>≤</mo>
          <mi>i</mi>
          <mo>≤</mo>
          <mi>M</mi>
        </mrow>
      </msub>
    </mtd>
    <mtd>
      <mrow>
        <mo>(</mo>
        <mn>6</mn>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
</maths>
<br/>
where (s<sub>j</sub>) is the state vector used in the composite equations defining the variables x<sub>i</sub>. The s<sub>j </sub>coefficients vary continuously between 0 and 1 in order to enable the equations of the active state while disabling the others.
</p>
<p id="p-0043" num="0042">When the condition of a transition from a currently active state S<sub>b </sub>to a destination state S<sub>e </sub>is met, the simulation time and the state vector (s<sub>j</sub>) at the beginning of the transition are respectively recorded in a discrete-in-time variable t<sub>b </sub>and a discrete-in-time vector (sb<sub>j</sub>) (in these notations, the letter “b” stands for “begin” and the letter “e” for “end”). The state vector corresponding to the destination state S<sub>e </sub>is also recorded in a discrete-in-time vector (se<sub>j</sub>) as follows:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>if j=e, se<sub>j</sub>=1 else se<sub>j</sub>=0  (7)<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0044" num="0043">From time t<sub>b </sub>on, the state vector (s<sub>j</sub>) is computed as follows:</p>
<p id="p-0045" num="0044">
<maths id="MATH-US-00006" num="00006">
<math overflow="scroll">
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <msub>
          <mi>s</mi>
          <mi>j</mi>
        </msub>
        <mo>=</mo>
        <mrow>
          <mrow>
            <msub>
              <mi>sb</mi>
              <mi>j</mi>
            </msub>
            <mo>·</mo>
            <mrow>
              <mo>(</mo>
              <mrow>
                <mn>1</mn>
                <mo>-</mo>
                <mrow>
                  <mi>F</mi>
                  <mo>⁡</mo>
                  <mrow>
                    <mo>(</mo>
                    <mfrac>
                      <mrow>
                        <mi>t</mi>
                        <mo>-</mo>
                        <msub>
                          <mi>t</mi>
                          <mi>b</mi>
                        </msub>
                      </mrow>
                      <mi>tt</mi>
                    </mfrac>
                    <mo>)</mo>
                  </mrow>
                </mrow>
              </mrow>
              <mo>)</mo>
            </mrow>
          </mrow>
          <mo>+</mo>
          <mrow>
            <msub>
              <mi>se</mi>
              <mi>j</mi>
            </msub>
            <mo>·</mo>
            <mrow>
              <mi>F</mi>
              <mo>⁡</mo>
              <mrow>
                <mo>(</mo>
                <mfrac>
                  <mrow>
                    <mi>t</mi>
                    <mo>-</mo>
                    <msub>
                      <mi>t</mi>
                      <mi>b</mi>
                    </msub>
                  </mrow>
                  <mi>tt</mi>
                </mfrac>
                <mo>)</mo>
              </mrow>
            </mrow>
          </mrow>
        </mrow>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>(</mo>
        <mn>8</mn>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
</maths>
<br/>
where
<ul id="ul0001" list-style="none">
    <li id="ul0001-0001" num="0000">
    <ul id="ul0002" list-style="none">
        <li id="ul0002-0001" num="0045">t is the current simulation time</li>
        <li id="ul0002-0002" num="0046">tt is the transition time from state S<sub>b </sub>to state S<sub>e </sub></li>
        <li id="ul0002-0003" num="0047">F is a ramp function (linear or cubic).</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0046" num="0048">The linear ramp function, shown in <figref idref="DRAWINGS">FIG. 2A</figref>, is defined as follows:</p>
<p id="p-0047" num="0049">
<maths id="MATH-US-00007" num="00007">
<math overflow="scroll">
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <mrow>
          <mi>F</mi>
          <mo>⁡</mo>
          <mrow>
            <mo>(</mo>
            <mi>x</mi>
            <mo>)</mo>
          </mrow>
        </mrow>
        <mo>=</mo>
        <mrow>
          <mo>{</mo>
          <mtable>
            <mtr>
              <mtd>
                <mn>0</mn>
              </mtd>
              <mtd>
                <mi>if</mi>
              </mtd>
              <mtd>
                <mrow>
                  <mi>x</mi>
                  <mo>≤</mo>
                  <mn>0</mn>
                </mrow>
              </mtd>
            </mtr>
            <mtr>
              <mtd>
                <mi>x</mi>
              </mtd>
              <mtd>
                <mi>if</mi>
              </mtd>
              <mtd>
                <mrow>
                  <mn>0</mn>
                  <mo>&lt;</mo>
                  <mi>x</mi>
                  <mo>≤</mo>
                  <mn>1</mn>
                </mrow>
              </mtd>
            </mtr>
            <mtr>
              <mtd>
                <mn>1</mn>
              </mtd>
              <mtd>
                <mi>if</mi>
              </mtd>
              <mtd>
                <mrow>
                  <mi>x</mi>
                  <mo>&gt;</mo>
                  <mn>1</mn>
                </mrow>
              </mtd>
            </mtr>
          </mtable>
        </mrow>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>(</mo>
        <mn>9</mn>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
</maths>
</p>
<p id="p-0048" num="0050">The cubic ramp function, shown in <figref idref="DRAWINGS">FIG. 2B</figref>, is defined as follows:</p>
<p id="p-0049" num="0051">
<maths id="MATH-US-00008" num="00008">
<math overflow="scroll">
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <mrow>
          <mi>F</mi>
          <mo>⁡</mo>
          <mrow>
            <mo>(</mo>
            <mi>x</mi>
            <mo>)</mo>
          </mrow>
        </mrow>
        <mo>=</mo>
        <mrow>
          <mo>{</mo>
          <mtable>
            <mtr>
              <mtd>
                <mn>0</mn>
              </mtd>
              <mtd>
                <mi>if</mi>
              </mtd>
              <mtd>
                <mrow>
                  <mi>x</mi>
                  <mo>≤</mo>
                  <mn>0</mn>
                </mrow>
              </mtd>
            </mtr>
            <mtr>
              <mtd>
                <mrow>
                  <mrow>
                    <mrow>
                      <mo>-</mo>
                      <mn>2</mn>
                    </mrow>
                    <mo>⁢</mo>
                    <msup>
                      <mi>x</mi>
                      <mn>3</mn>
                    </msup>
                  </mrow>
                  <mo>+</mo>
                  <mrow>
                    <mn>3</mn>
                    <mo>⁢</mo>
                    <msup>
                      <mi>x</mi>
                      <mn>2</mn>
                    </msup>
                  </mrow>
                </mrow>
              </mtd>
              <mtd>
                <mi>if</mi>
              </mtd>
              <mtd>
                <mrow>
                  <mn>0</mn>
                  <mo>&lt;</mo>
                  <mi>x</mi>
                  <mo>≤</mo>
                  <mn>1</mn>
                </mrow>
              </mtd>
            </mtr>
            <mtr>
              <mtd>
                <mn>1</mn>
              </mtd>
              <mtd>
                <mi>if</mi>
              </mtd>
              <mtd>
                <mrow>
                  <mi>x</mi>
                  <mo>&gt;</mo>
                  <mn>1</mn>
                </mrow>
              </mtd>
            </mtr>
          </mtable>
        </mrow>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>(</mo>
        <mn>10</mn>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
</maths>
</p>
<p id="p-0050" num="0052">As shown in <figref idref="DRAWINGS">FIG. 2B</figref>, the cubic profile provides continuity in the first derivative with respect to time. Continuity in the slope sometimes helps the simulator to converge by reducing the stiffness of the change in the governing equations of the state-dependent analog variables. In one embodiment, the user can choose the profile (i.e. linear or cubic) as well as the transition time.</p>
<p id="p-0051" num="0053">One important aspect of equation (8) is that it can handle a transition occurring before the transition time of a previous transition has elapsed. This situation is illustrated in <figref idref="DRAWINGS">FIGS. 3A and 3B</figref> using switch model <b>100</b>. At time t<sub>1</sub>, the initial state “off” is active and the digital control pin is set to 1. The condition for the transition from “off” to “on” being met, the state vector (s<sub>i</sub>) moves from (1,0,0) to (0,1,0) according to equation (8). The weight s<sub>1 </sub>of the “off” state begins decreasing to zero while the weight s<sub>2 </sub>of the “on” state begins increasing to one (the weight s<sub>3 </sub>of the “burnt” state remains equal to zero). During this transition, the external circuit where the model is placed forces current to flow through the closing switch. As a result, the power dissipated in the switch increases until it reaches the value of the maximum power “pmax” at time t<sub>2</sub>. Even though the state vector has not reached its destination point of coordinates (0,1,0) yet, the active state of the model has been “on” since time t<sub>1 </sub>(indeed the analog equations always lag behind the active state). When the condition of the transition from “on” to “burnt” is met at time t<sub>2</sub>, the active state becomes “burnt”. The first transition is then interrupted and the state vector (s<sub>i</sub>) is redirected towards (0,0,1) which is eventually reached at time t<sub>2</sub>+tt. In this example, the profile of the ramp function is cubic (as seen in <figref idref="DRAWINGS">FIG. 3A</figref>). However, note that the trajectory of the state vector in the state diagram of <figref idref="DRAWINGS">FIG. 3B</figref> would be depicted identically for the transitions having a linear profile.</p>
<p id="p-0052" num="0054">During this transition sequence, continuity in the value is guaranteed but not continuity in the slope (despite the cubic profile). Continuity in the slope is only achieved if no transition occurs within a transition. However, in most cases, continuity in the value is sufficient to ensure convergence.</p>
<p id="p-0053" num="0055">The state vector values are not discrete, but rather form a continuum of intermediate states. By induction, it is easily proven from equation (8) that, at all times, the equality below is verified:</p>
<p id="p-0054" num="0056">
<maths id="MATH-US-00009" num="00009">
<math overflow="scroll">
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <mrow>
          <munderover>
            <mo>∑</mo>
            <mrow>
              <mi>j</mi>
              <mo>=</mo>
              <mn>1</mn>
            </mrow>
            <mi>N</mi>
          </munderover>
          <mo>⁢</mo>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
          <mo>⁢</mo>
          <msub>
            <mi>s</mi>
            <mi>j</mi>
          </msub>
        </mrow>
        <mo>=</mo>
        <mn>1</mn>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>(</mo>
        <mn>11</mn>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
</maths>
</p>
<p id="p-0055" num="0057">Equation (11) is the equation of a hypercube (i.e. a linear space of reduced dimension (N−1)) containing the points of coordinates ((1,0, . . . ,0), (0,1,0, . . . ,0), (0,0,1, . . . ,0), (0,0,0, . . . ,1)). The domain where the state vector takes its values is therefore included in the hypercube defined by equation (11). In the case of switch model <b>100</b>, the state vector domain is included in the plane containing the 3 points of coordinates (1,0,0), (0,1,0) and (0,0,1). Note that the region allowed inside the hypercube is restricted by the following boundary conditions:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>∀j, 0≦s<sub>j</sub>≦1  (12)<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0056" num="0058">So far, it has been assumed that all states carry an equation for the variables (x<sub>i</sub>). However the state vector formalism can still apply to relaxed systems where this assumption is not verified. When a state with no equation for an analog variable x<sub>i </sub>becomes active, x<sub>i </sub>simply keeps its governing equation from a previously visited state. To ensure that such an equation exists, the initial state (or states) must carry an equation for all the state-dependent analog variables in the system.</p>
<p id="p-0057" num="0059">Relaxed equation definition is required to support concurrency. It also brings flexibility when describing systems with more than one state-dependent analog variable. Indeed, more combinations of enabled analog equations are obtained for a given number of states when some states do not carry an equation for all variables. For example, consider a system <b>401</b> and a table <b>402</b> that describes system <b>401</b> shown in <figref idref="DRAWINGS">FIGS. 4A and 4B</figref>, respectively. System <b>401</b> is described by 5 states (S<b>1</b>-S<b>5</b>) and 4 analog variables (x<sub>1</sub>-x<sub>4</sub>). A crossed cell in table <b>402</b> indicates that an equation exists for the variable of corresponding column in the state of corresponding row. At any time, the behavior of the system is determined by the combination of currently enabled analog equations.</p>
<p id="p-0058" num="0060">In the example depicted in <figref idref="DRAWINGS">FIGS. 4A and 4B</figref>, there are 8 possible combinations of analog equations. The combinations are listed in table <b>403</b> shown in <figref idref="DRAWINGS">FIG. 4C</figref>. Each cell in the table shows, for the combination of corresponding row, the state associated with the enabled equation of the variable of corresponding column. For example, the row number 1 corresponds to a combination where the following equations are enabled: equation of x<sub>1 </sub>associated with state S<b>1</b>, equation of x<sub>2 </sub>associated with state S<b>1</b>, equation of x<sub>3 </sub>associated with state S<b>4</b> and equation of x<sub>4 </sub>associated with state S<b>4</b>. This combination is simply realized when states S<b>1</b> and S<b>4</b> are active (see table <b>402</b>). The combination of row number 2 is more interesting. It is realized after a transition from S<b>1</b> to S<b>3</b> with S<b>4</b> active. In this situation, because the variable x<sub>1 </sub>does not have an equation in state S<b>3</b> (see table <b>402</b>), the equation governing x<sub>1 </sub>is the one of the previously visited state S<b>1</b>.</p>
<p id="p-0059" num="0061">Therefore, with only 5 states in the state diagram, a system with up to 8 modes of operation can be modeled (whether all combinations can actually be reached depends on the transitions defined between the states). This economy of states makes the diagram more parsimonious and easier to implement or read.</p>
<p id="p-0060" num="0062">The cells in table <b>402</b> not having a cross are indicative of relaxed equation definitions, i.e. allow more combinations of equations than the number of states in the diagram. Relaxed equation definitions also allow a system with memory to be more easily modeled. Indeed the analog variables in a state left without equations are determined by previously visited states.</p>
<p id="p-0061" num="0063">One state vector (s<sub>j</sub>) is generally not sufficient to model a relaxed system. The concept of equation base is introduced in order to determine the minimum number of state vectors required. The equation base B<sub>i </sub>of a variable x<sub>i </sub>is the set of states carrying an equation for x<sub>i</sub>. By definition, the active state of an equation base is the last state visited in the base. Note that this is not necessarily an active state of the system.</p>
<p id="p-0062" num="0064">Analog variables with the same equation base can share a common state vector. In other words, there are as many state vectors as distinct equation bases in the system. For example, system <b>401</b> requires 3 state vectors, one for x<sub>1</sub>, one for x<sub>2</sub>, and one for the pair {x<sub>3</sub>, x<sub>4</sub>}. The size of a state vector is the number of states in its base. The system of equations to implement in a relaxed equation state machine model becomes:</p>
<p id="p-0063" num="0065">
<maths id="MATH-US-00010" num="00010">
<math overflow="scroll">
<mtable>
  <mtr>
    <mtd>
      <msub>
        <mrow>
          <mo>(</mo>
          <mrow>
            <mrow>
              <munder>
                <mo>∑</mo>
                <mrow>
                  <mi>j</mi>
                  <mo>∈</mo>
                  <mi>Bi</mi>
                </mrow>
              </munder>
              <mo>⁢</mo>
              <mstyle>
                <mspace width="0.3em" height="0.3ex"/>
              </mstyle>
              <mo>⁢</mo>
              <mrow>
                <msub>
                  <mi>s</mi>
                  <mi>j</mi>
                </msub>
                <mo>·</mo>
                <msub>
                  <mi>Eq</mi>
                  <mrow>
                    <mi>i</mi>
                    <mo>,</mo>
                    <mi>j</mi>
                  </mrow>
                </msub>
              </mrow>
            </mrow>
            <mo>=</mo>
            <mn>0</mn>
          </mrow>
          <mo>)</mo>
        </mrow>
        <mrow>
          <mn>1</mn>
          <mo>≤</mo>
          <mi>i</mi>
          <mo>≤</mo>
          <mi>M</mi>
        </mrow>
      </msub>
    </mtd>
    <mtd>
      <mrow>
        <mo>(</mo>
        <mn>13</mn>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
</maths>
</p>
<p id="p-0064" num="0066">At all times, the model must keep track of the active state in each base. A state vector is only altered when a transition occurs leading to a state in the associated base that is not the currently active state of the base. If a transition leads to a state without equations, the state is not in the base. Therefore the state vector remains unaffected.</p>
<p id="p-0065" num="0067">Note that relaxed equation definitions and concurrency are distinct properties. Concurrency can be analyzed by simply looking at the transitions. Considering the system described in <figref idref="DRAWINGS">FIG. 4A</figref>, there is no transition path, direct or indirect, linking the group of states formed by S<b>1</b>, S<b>2</b> and S<b>3</b> to the group formed by S<b>4</b> and S<b>5</b>. Therefore these two groups are concurrent and each one has an active state. If concurrency is not determined by the association of governing equations with the states, it however imposes some restriction on this association. Indeed an analog variable cannot be defined through governing equations associated with concurrent states. Failing to observe this rule results in a conflict where two active states try to concurrently enable distinct equations for an analog variable. For example, such a conflict would have occurred if the table <b>402</b> had contained a cross in the cell (S<b>1</b>, x<sub>3</sub>).</p>
<p id="p-0066" num="0068">In accordance with one aspect of the invention, the multi-dimensional ramp technique can be automated and programmed in a modeling tool. <figref idref="DRAWINGS">FIG. 5</figref> illustrates the functional flow of an exemplary mixed-signal finite state machine modeling tool <b>500</b>. Through a graphical user interface <b>501</b>, the user can specify the following model information: terminals, variables (static, continuous and event-driven variables), state diagram structural elements (states, transitions, blocks, etc.), and governing equations for the analog variables in the different states. An elaborator module <b>502</b> can process this information to provide syntactic/semantic checks, analyze variable dependencies, generate symbolic simplifications, and, of importance, automatically insert ramps in the models. At this point, a mixed-signal machine model <b>503</b> can be generated in a mixed-signal hardware description language.</p>
<p id="p-0067" num="0069"><figref idref="DRAWINGS">FIG. 6A</figref> illustrates an exemplary screen shot <b>600</b> from a modeling tool Model Architect StateAMS™, licensed by Synopsys, Inc., that provides a graphical interface for a user to define information regarding a mixed-signal state machine model. Specifically, screen shot <b>600</b> includes a field <b>601</b> that allows a user to edit the topology of the model, a field <b>602</b> that allows a user to edit the states of the model and the conditions triggering such states, and a field <b>603</b> that allows a user to define the model quantities or variables. <figref idref="DRAWINGS">FIG. 6B</figref> illustrates a screen shot <b>610</b> that allows a user to edit the state-dependent variables. <figref idref="DRAWINGS">FIG. 6C</figref> illustrates a screen shot <b>620</b> from StateAMS™ tool that allows a user to edit the information associated with a transition (condition, profile, time, etc.).</p>
<p id="p-0068" num="0070">A modeling tool automatically including the above-described ramp functions can be incorporated into many simulators, such as the Saber® mixed-signal simulator and the H-SPICE® analog simulator (both licensed by Synopsys, Inc.). Such a modeling tool can use various languages, including but not limited to the MAST Hardware Description Language (HDL)(an industry standard language developed by Synopsys, Inc. that can be used for analog, mixed-signal, and mixed-technology applications), VHDL-AMS (described in IEEE Standard 1076.1, which was approved in 1999), or Verilog-AMS (developed by Acellera in 1998).</p>
<p id="p-0069" num="0071">Although illustrative embodiments of the invention have been described in detail herein with reference to the figures (with respect to the analog switch model example), it is to be understood that the invention is not limited to those precise embodiments. They are not intended to be exhaustive or to limit the invention to the precise forms disclosed. As such, many modifications and variations will be apparent.</p>
<p id="p-0070" num="0072">Accordingly, it is intended that the scope of the invention be defined by the following claims and their equivalents.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-math idrefs="MATH-US-00001" nb-file="US07299164-20071120-M00001.NB">
<img id="EMI-M00001" he="17.27mm" wi="76.20mm" file="US07299164-20071120-M00001.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00002" nb-file="US07299164-20071120-M00002.NB">
<img id="EMI-M00002" he="9.14mm" wi="76.20mm" file="US07299164-20071120-M00002.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00003" nb-file="US07299164-20071120-M00003.NB">
<img id="EMI-M00003" he="6.35mm" wi="76.20mm" file="US07299164-20071120-M00003.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00004" nb-file="US07299164-20071120-M00004.NB">
<img id="EMI-M00004" he="6.35mm" wi="76.20mm" file="US07299164-20071120-M00004.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00005" nb-file="US07299164-20071120-M00005.NB">
<img id="EMI-M00005" he="9.57mm" wi="76.20mm" file="US07299164-20071120-M00005.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00006" nb-file="US07299164-20071120-M00006.NB">
<img id="EMI-M00006" he="6.01mm" wi="76.20mm" file="US07299164-20071120-M00006.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00007" nb-file="US07299164-20071120-M00007.NB">
<img id="EMI-M00007" he="11.26mm" wi="76.20mm" file="US07299164-20071120-M00007.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00008" nb-file="US07299164-20071120-M00008.NB">
<img id="EMI-M00008" he="12.02mm" wi="76.20mm" file="US07299164-20071120-M00008.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00009" nb-file="US07299164-20071120-M00009.NB">
<img id="EMI-M00009" he="9.14mm" wi="76.20mm" file="US07299164-20071120-M00009.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00010" nb-file="US07299164-20071120-M00010.NB">
<img id="EMI-M00010" he="7.45mm" wi="76.20mm" file="US07299164-20071120-M00010.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-claim-statement>The invention claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method of generating a mixed-signal finite state machine model of a system from a state diagram, method including:
<claim-text>allowing a user to define an analog variable through a set of state equations corresponding to different states in the state diagram;</claim-text>
<claim-text>forming a composite equation for the analog variable constructed as a weighted sum of the set of state equations;</claim-text>
<claim-text>using a set of ramp functions as weights in the composite equation varying continuously between 0 and 1 to further define the analog variable, the set of ramp functions forming a state vector and ensuring continuity of the analog variable during a state transition;</claim-text>
<claim-text>generating the mixed-signal finite state machine model by using the defined analog variable; and</claim-text>
<claim-text>outputting the mixed-signal finite state machine model for use in simulation.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further allowing the user to set a profile, selected from linear and cubic, and a transition time for the state transition, thereby matching real behavior of the system.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the cubic profile provides continuity in the first derivative for the analog variable during the state transition.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the state vector ensures continuity of the analog variable when a new transition occurs before the transition time of a previous transition has elapsed.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the mixed-signal finite state machine model goes through a continuum of intermediate states contained in a hypercube space where summed state vector components equal 1.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein only one state in the state diagram is required to carry an equation for the analog variable, this state being an initial state.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further allowing a user to define a plurality of analog variables through equations associated with different states in the state diagram, the plurality of analog variables being associated with a minimum set of state vectors.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the minimum set of state vectors is obtained by having analog variables, defined through equations in the same states, share a common state vector.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further allowing the user to express the set of state equations in an implicit or explicit form.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further ensuring that the analog variable is not defined through equations associated with concurrent states.</claim-text>
</claim>
</claims>
</us-patent-grant>
