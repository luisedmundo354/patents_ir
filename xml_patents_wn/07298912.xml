<us-patent-grant lang="EN" dtd-version="v4.2 2006-08-23" file="US07298912-20071120.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20071106" date-publ="20071120">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>07298912</doc-number>
<kind>B2</kind>
<date>20071120</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>11304340</doc-number>
<date>20051213</date>
</document-id>
</application-reference>
<us-application-series-code>11</us-application-series-code>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>K</subclass>
<main-group>9</main-group>
<subgroup>36</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>H</section>
<class>04</class>
<subclass>B</subclass>
<main-group>1</main-group>
<subgroup>66</subgroup>
<symbol-position>L</symbol-position>
<classification-value>N</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>382234</main-classification>
<further-classification>382240</further-classification>
</classification-national>
<invention-title id="d0e43">Method and apparatus for assigning codeblocks to coders operating in parallel</invention-title>
<references-cited>
<citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>3580655</doc-number>
<kind>A</kind>
<name>Leith et al.</name>
<date>19710500</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>3950103</doc-number>
<kind>A</kind>
<name>Schmidt-Weinmar</name>
<date>19760400</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>4136954</doc-number>
<kind>A</kind>
<name>Jamieson</name>
<date>19790100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>4155097</doc-number>
<kind>A</kind>
<name>Lux</name>
<date>19790500</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>4190861</doc-number>
<kind>A</kind>
<name>Lux</name>
<date>19800200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>4223354</doc-number>
<kind>A</kind>
<name>Noble et al.</name>
<date>19800900</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>4393456</doc-number>
<kind>A</kind>
<name>Marshall, Jr.</name>
<date>19830700</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>4437087</doc-number>
<kind>A</kind>
<name>Petr</name>
<date>19840300</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>4569075</doc-number>
<kind>A</kind>
<name>Nussbaumer</name>
<date>19860200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>4599567</doc-number>
<kind>A</kind>
<name>Goupillaud et al.</name>
<date>19860700</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>4652881</doc-number>
<kind>A</kind>
<name>Lewis</name>
<date>19870300</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>4663660</doc-number>
<kind>A</kind>
<name>Fedele et al.</name>
<date>19870500</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>4674125</doc-number>
<kind>A</kind>
<name>Carlson et al.</name>
<date>19870600</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>4701006</doc-number>
<kind>A</kind>
<name>Perlmutter</name>
<date>19871000</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>4751742</doc-number>
<kind>A</kind>
<name>Meeker</name>
<date>19880600</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>4760563</doc-number>
<kind>A</kind>
<name>Beylkin</name>
<date>19880700</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>4785348</doc-number>
<kind>A</kind>
<name>Fonsalas et al.</name>
<date>19881100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>4785349</doc-number>
<kind>A</kind>
<name>Keith et al.</name>
<date>19881100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>4799179</doc-number>
<kind>A</kind>
<name>Masson et al.</name>
<date>19890100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>4805129</doc-number>
<kind>A</kind>
<name>David</name>
<date>19890200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>4815023</doc-number>
<kind>A</kind>
<name>Arbeiter</name>
<date>19890300</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>4817182</doc-number>
<kind>A</kind>
<name>Adelson et al.</name>
<date>19890300</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>4821223</doc-number>
<kind>A</kind>
<name>David</name>
<date>19890400</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00024">
<document-id>
<country>US</country>
<doc-number>4827336</doc-number>
<kind>A</kind>
<name>Acampora et al.</name>
<date>19890500</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00025">
<document-id>
<country>US</country>
<doc-number>4829378</doc-number>
<kind>A</kind>
<name>Le Gall</name>
<date>19890500</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00026">
<document-id>
<country>US</country>
<doc-number>4837517</doc-number>
<kind>A</kind>
<name>Barber</name>
<date>19890600</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00027">
<document-id>
<country>US</country>
<doc-number>4839889</doc-number>
<kind>A</kind>
<name>Gockler</name>
<date>19890600</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00028">
<document-id>
<country>US</country>
<doc-number>4858017</doc-number>
<kind>A</kind>
<name>Torbey</name>
<date>19890800</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00029">
<document-id>
<country>US</country>
<doc-number>4864398</doc-number>
<kind>A</kind>
<name>Avis et al.</name>
<date>19890900</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00030">
<document-id>
<country>US</country>
<doc-number>4868868</doc-number>
<kind>A</kind>
<name>Yazu et al.</name>
<date>19890900</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00031">
<document-id>
<country>US</country>
<doc-number>4881075</doc-number>
<kind>A</kind>
<name>Weng</name>
<date>19891100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00032">
<document-id>
<country>US</country>
<doc-number>4894713</doc-number>
<kind>A</kind>
<name>Delogne et al.</name>
<date>19900100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00033">
<document-id>
<country>US</country>
<doc-number>4897717</doc-number>
<kind>A</kind>
<name>Hamilton et al.</name>
<date>19900100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00034">
<document-id>
<country>US</country>
<doc-number>4899147</doc-number>
<kind>A</kind>
<name>Schiavo et al.</name>
<date>19900200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00035">
<document-id>
<country>US</country>
<doc-number>4904073</doc-number>
<kind>A</kind>
<name>Lawton et al.</name>
<date>19900200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00036">
<document-id>
<country>US</country>
<doc-number>4918524</doc-number>
<kind>A</kind>
<name>Ansari et al.</name>
<date>19900400</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00037">
<document-id>
<country>US</country>
<doc-number>4922544</doc-number>
<kind>A</kind>
<name>Stansfield et al.</name>
<date>19900500</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00038">
<document-id>
<country>US</country>
<doc-number>4929223</doc-number>
<kind>A</kind>
<name>Walsh</name>
<date>19900500</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00039">
<document-id>
<country>US</country>
<doc-number>4929946</doc-number>
<kind>A</kind>
<name>O'Brien et al.</name>
<date>19900500</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00040">
<document-id>
<country>US</country>
<doc-number>4936665</doc-number>
<kind>A</kind>
<name>Whitney</name>
<date>19900600</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00041">
<document-id>
<country>US</country>
<doc-number>4973961</doc-number>
<kind>A</kind>
<name>Chamzas et al.</name>
<date>19901100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00042">
<document-id>
<country>US</country>
<doc-number>4974187</doc-number>
<kind>A</kind>
<name>Lawton</name>
<date>19901100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00043">
<document-id>
<country>US</country>
<doc-number>4982283</doc-number>
<kind>A</kind>
<name>Acampora</name>
<date>19910100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00044">
<document-id>
<country>US</country>
<doc-number>4985927</doc-number>
<kind>A</kind>
<name>Norwood et al.</name>
<date>19910100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00045">
<document-id>
<country>US</country>
<doc-number>4987480</doc-number>
<kind>A</kind>
<name>Lippman et al.</name>
<date>19910100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00046">
<document-id>
<country>US</country>
<doc-number>4999705</doc-number>
<kind>A</kind>
<name>Puri</name>
<date>19910300</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00047">
<document-id>
<country>US</country>
<doc-number>5000183</doc-number>
<kind>A</kind>
<name>Bonnefous</name>
<date>19910300</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00048">
<document-id>
<country>US</country>
<doc-number>5001764</doc-number>
<kind>A</kind>
<name>Wood et al.</name>
<date>19910300</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00049">
<document-id>
<country>US</country>
<doc-number>5014134</doc-number>
<kind>A</kind>
<name>Lawton et al.</name>
<date>19910500</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00050">
<document-id>
<country>US</country>
<doc-number>5018210</doc-number>
<kind>A</kind>
<name>Merryman et al.</name>
<date>19910500</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00051">
<document-id>
<country>US</country>
<doc-number>5049992</doc-number>
<kind>A</kind>
<name>Citta et al.</name>
<date>19910900</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00052">
<document-id>
<country>US</country>
<doc-number>5049993</doc-number>
<kind>A</kind>
<name>Le Gall et al.</name>
<date>19910900</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00053">
<document-id>
<country>US</country>
<doc-number>5068911</doc-number>
<kind>A</kind>
<name>Resnikoff et al.</name>
<date>19911100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00054">
<document-id>
<country>US</country>
<doc-number>5072308</doc-number>
<kind>A</kind>
<name>Lin et al.</name>
<date>19911200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00055">
<document-id>
<country>US</country>
<doc-number>5073964</doc-number>
<kind>A</kind>
<name>Resnikoff</name>
<date>19911200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00056">
<document-id>
<country>US</country>
<doc-number>5081645</doc-number>
<kind>A</kind>
<name>Resnikoff et al.</name>
<date>19920100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00057">
<document-id>
<country>US</country>
<doc-number>5095447</doc-number>
<kind>A</kind>
<name>Manns et al.</name>
<date>19920300</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00058">
<document-id>
<country>US</country>
<doc-number>5097261</doc-number>
<kind>A</kind>
<name>Langdon, Jr. et al.</name>
<date>19920300</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00059">
<document-id>
<country>US</country>
<doc-number>5097331</doc-number>
<kind>A</kind>
<name>Chen et al.</name>
<date>19920300</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00060">
<document-id>
<country>US</country>
<doc-number>5101280</doc-number>
<kind>A</kind>
<name>Moronaga et al.</name>
<date>19920300</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00061">
<document-id>
<country>US</country>
<doc-number>5101446</doc-number>
<kind>A</kind>
<name>Resnikoff et al.</name>
<date>19920300</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00062">
<document-id>
<country>US</country>
<doc-number>5103306</doc-number>
<kind>A</kind>
<name>Weiman et al.</name>
<date>19920400</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00063">
<document-id>
<country>US</country>
<doc-number>5109451</doc-number>
<kind>A</kind>
<name>Aono et al.</name>
<date>19920400</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00064">
<document-id>
<country>US</country>
<doc-number>5121191</doc-number>
<kind>A</kind>
<name>Cassereau et al.</name>
<date>19920600</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00065">
<document-id>
<country>US</country>
<doc-number>5124930</doc-number>
<kind>A</kind>
<name>Nicolas et al.</name>
<date>19920600</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00066">
<document-id>
<country>US</country>
<doc-number>5128757</doc-number>
<kind>A</kind>
<name>Citta et al.</name>
<date>19920700</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00067">
<document-id>
<country>US</country>
<doc-number>5128791</doc-number>
<kind>A</kind>
<name>LeGall et al.</name>
<date>19920700</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00068">
<document-id>
<country>US</country>
<doc-number>5148498</doc-number>
<kind>A</kind>
<name>Resnikoff et al.</name>
<date>19920900</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00069">
<document-id>
<country>US</country>
<doc-number>5152953</doc-number>
<kind>A</kind>
<name>Ackermann</name>
<date>19921000</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00070">
<document-id>
<country>US</country>
<doc-number>5156943</doc-number>
<kind>A</kind>
<name>Whitney</name>
<date>19921000</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00071">
<document-id>
<country>US</country>
<doc-number>5173880</doc-number>
<kind>A</kind>
<name>Duren et al.</name>
<date>19921200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00072">
<document-id>
<country>US</country>
<doc-number>5182645</doc-number>
<kind>A</kind>
<name>Breeuwer et al.</name>
<date>19930100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00073">
<document-id>
<country>US</country>
<doc-number>5223926</doc-number>
<kind>A</kind>
<name>Stone et al.</name>
<date>19930600</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00074">
<document-id>
<country>US</country>
<doc-number>5235434</doc-number>
<kind>A</kind>
<name>Wober</name>
<date>19930800</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00075">
<document-id>
<country>US</country>
<doc-number>5241395</doc-number>
<kind>A</kind>
<name>Chen</name>
<date>19930800</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00076">
<document-id>
<country>US</country>
<doc-number>5262958</doc-number>
<kind>A</kind>
<name>Chui et al.</name>
<date>19931100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00077">
<document-id>
<country>US</country>
<doc-number>5276525</doc-number>
<kind>A</kind>
<name>Gharavi</name>
<date>19940100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00078">
<document-id>
<country>US</country>
<doc-number>5315670</doc-number>
<kind>A</kind>
<name>Shapiro</name>
<date>19940500</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00079">
<document-id>
<country>US</country>
<doc-number>5321776</doc-number>
<kind>A</kind>
<name>Shapiro</name>
<date>19940600</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00080">
<document-id>
<country>US</country>
<doc-number>5335016</doc-number>
<kind>A</kind>
<name>Nakagawa</name>
<date>19940800</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00081">
<document-id>
<country>US</country>
<doc-number>5347479</doc-number>
<kind>A</kind>
<name>Miyazaki</name>
<date>19940900</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00082">
<document-id>
<country>US</country>
<doc-number>5349348</doc-number>
<kind>A</kind>
<name>Anderson et al.</name>
<date>19940900</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00083">
<document-id>
<country>US</country>
<doc-number>5379355</doc-number>
<kind>A</kind>
<name>Allen</name>
<date>19950100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00084">
<document-id>
<country>US</country>
<doc-number>5381145</doc-number>
<kind>A</kind>
<name>Allen et al.</name>
<date>19950100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00085">
<document-id>
<country>US</country>
<doc-number>5384869</doc-number>
<kind>A</kind>
<name>Wilkinson et al.</name>
<date>19950100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00086">
<document-id>
<country>US</country>
<doc-number>5412741</doc-number>
<kind>A</kind>
<name>Shapiro</name>
<date>19950500</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00087">
<document-id>
<country>US</country>
<doc-number>5414780</doc-number>
<kind>A</kind>
<name>Carnahan</name>
<date>19950500</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00088">
<document-id>
<country>US</country>
<doc-number>5416604</doc-number>
<kind>A</kind>
<name>Park</name>
<date>19950500</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00089">
<document-id>
<country>US</country>
<doc-number>5420891</doc-number>
<kind>A</kind>
<name>Akansu</name>
<date>19950500</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00090">
<document-id>
<country>US</country>
<doc-number>5442458</doc-number>
<kind>A</kind>
<name>Rabbani et al.</name>
<date>19950800</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00091">
<document-id>
<country>US</country>
<doc-number>5453945</doc-number>
<kind>A</kind>
<name>Tucker et al.</name>
<date>19950900</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00092">
<document-id>
<country>US</country>
<doc-number>5455874</doc-number>
<kind>A</kind>
<name>Ormsby et al.</name>
<date>19951000</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00093">
<document-id>
<country>US</country>
<doc-number>5481308</doc-number>
<kind>A</kind>
<name>Hartung et al.</name>
<date>19960100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00094">
<document-id>
<country>US</country>
<doc-number>5495292</doc-number>
<kind>A</kind>
<name>Zhang et al.</name>
<date>19960200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00095">
<document-id>
<country>US</country>
<doc-number>5497435</doc-number>
<kind>A</kind>
<name>Berger</name>
<date>19960300</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00096">
<document-id>
<country>US</country>
<doc-number>5511151</doc-number>
<kind>A</kind>
<name>Russell et al.</name>
<date>19960400</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00097">
<document-id>
<country>US</country>
<doc-number>5534925</doc-number>
<kind>A</kind>
<name>Zhong</name>
<date>19960700</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00098">
<document-id>
<country>US</country>
<doc-number>5537493</doc-number>
<kind>A</kind>
<name>Wilkinson</name>
<date>19960700</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00099">
<document-id>
<country>US</country>
<doc-number>5541594</doc-number>
<kind>A</kind>
<name>Huang et al.</name>
<date>19960700</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00100">
<document-id>
<country>US</country>
<doc-number>5546477</doc-number>
<kind>A</kind>
<name>Knowles et al.</name>
<date>19960800</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00101">
<document-id>
<country>US</country>
<doc-number>5563960</doc-number>
<kind>A</kind>
<name>Shapiro</name>
<date>19961000</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00102">
<document-id>
<country>US</country>
<doc-number>5566089</doc-number>
<kind>A</kind>
<name>Hoogenboom</name>
<date>19961000</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00103">
<document-id>
<country>US</country>
<doc-number>5602589</doc-number>
<kind>A</kind>
<name>Vishwanath et al.</name>
<date>19970200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00104">
<document-id>
<country>US</country>
<doc-number>5631977</doc-number>
<kind>A</kind>
<name>Koshi</name>
<date>19970500</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00105">
<document-id>
<country>US</country>
<doc-number>5638498</doc-number>
<kind>A</kind>
<name>Tyler et al.</name>
<date>19970600</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00106">
<document-id>
<country>US</country>
<doc-number>5657085</doc-number>
<kind>A</kind>
<name>Katto</name>
<date>19970800</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00107">
<document-id>
<country>US</country>
<doc-number>5701367</doc-number>
<kind>A</kind>
<name>Koshi et al.</name>
<date>19971200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00108">
<document-id>
<country>US</country>
<doc-number>5717789</doc-number>
<kind>A</kind>
<name>Anderson et al.</name>
<date>19980200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00109">
<document-id>
<country>US</country>
<doc-number>5754793</doc-number>
<kind>A</kind>
<name>Eom et al.</name>
<date>19980500</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00110">
<document-id>
<country>US</country>
<doc-number>5808683</doc-number>
<kind>A</kind>
<name>Tong et al.</name>
<date>19980900</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00111">
<document-id>
<country>US</country>
<doc-number>5809176</doc-number>
<kind>A</kind>
<name>Yajima</name>
<date>19980900</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00112">
<document-id>
<country>US</country>
<doc-number>5850482</doc-number>
<kind>A</kind>
<name>Meany et al.</name>
<date>19981200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00113">
<document-id>
<country>US</country>
<doc-number>5867602</doc-number>
<kind>A</kind>
<name>Zandi et al.</name>
<date>19990200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00114">
<document-id>
<country>US</country>
<doc-number>5880856</doc-number>
<kind>A</kind>
<name>Ferriere</name>
<date>19990300</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00115">
<document-id>
<country>US</country>
<doc-number>5966465</doc-number>
<kind>A</kind>
<name>Keith et al.</name>
<date>19991000</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00116">
<document-id>
<country>US</country>
<doc-number>6020975</doc-number>
<kind>A</kind>
<name>Chen et al.</name>
<date>20000200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00117">
<document-id>
<country>US</country>
<doc-number>6026198</doc-number>
<kind>A</kind>
<name>Okada</name>
<date>20000200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00118">
<document-id>
<country>US</country>
<doc-number>6088062</doc-number>
<kind>A</kind>
<name>Kanou et al.</name>
<date>20000700</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00119">
<document-id>
<country>US</country>
<doc-number>6101279</doc-number>
<kind>A</kind>
<name>Nguyen et al.</name>
<date>20000800</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00120">
<document-id>
<country>US</country>
<doc-number>6118902</doc-number>
<kind>A</kind>
<name>Knowles</name>
<date>20000900</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00121">
<document-id>
<country>US</country>
<doc-number>6121970</doc-number>
<kind>A</kind>
<name>Guedalia</name>
<date>20000900</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00122">
<document-id>
<country>US</country>
<doc-number>6128413</doc-number>
<kind>A</kind>
<name>Benamara</name>
<date>20001000</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00123">
<document-id>
<country>US</country>
<doc-number>6160846</doc-number>
<kind>A</kind>
<name>Chiang et al.</name>
<date>20001200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00124">
<document-id>
<country>US</country>
<doc-number>6201897</doc-number>
<kind>B1</kind>
<name>Nixon</name>
<date>20010300</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00125">
<document-id>
<country>US</country>
<doc-number>6229929</doc-number>
<kind>B1</kind>
<name>Lynch et al.</name>
<date>20010500</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00126">
<document-id>
<country>US</country>
<doc-number>6236765</doc-number>
<kind>B1</kind>
<name>Acharya</name>
<date>20010500</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00127">
<document-id>
<country>US</country>
<doc-number>6237010</doc-number>
<kind>B1</kind>
<name>Hui et al.</name>
<date>20010500</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00128">
<document-id>
<country>US</country>
<doc-number>6263109</doc-number>
<kind>B1</kind>
<name>Ordentlich et al.</name>
<date>20010700</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00129">
<document-id>
<country>US</country>
<doc-number>6263120</doc-number>
<kind>B1</kind>
<name>Matsuoka</name>
<date>20010700</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00130">
<document-id>
<country>US</country>
<doc-number>6327392</doc-number>
<kind>B1</kind>
<name>Li</name>
<date>20011200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00131">
<document-id>
<country>US</country>
<doc-number>6330666</doc-number>
<kind>B1</kind>
<name>Wise et al.</name>
<date>20011200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00132">
<document-id>
<country>US</country>
<doc-number>6332043</doc-number>
<kind>B1</kind>
<name>Ogata</name>
<date>20011200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>382240</main-classification></classification-national>
</citation>
<citation>
<patcit num="00133">
<document-id>
<country>US</country>
<doc-number>6339658</doc-number>
<kind>B1</kind>
<name>Moccagatta et al.</name>
<date>20020100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00134">
<document-id>
<country>US</country>
<doc-number>6350989</doc-number>
<kind>B1</kind>
<name>Lee et al.</name>
<date>20020200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00135">
<document-id>
<country>US</country>
<doc-number>6356668</doc-number>
<kind>B1</kind>
<name>Honsinger et al.</name>
<date>20020300</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00136">
<document-id>
<country>US</country>
<doc-number>6466698</doc-number>
<kind>B1</kind>
<name>Creusere</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00137">
<document-id>
<country>US</country>
<doc-number>6483946</doc-number>
<kind>B1</kind>
<name>Martucci et al.</name>
<date>20021100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00138">
<document-id>
<country>US</country>
<doc-number>6486981</doc-number>
<kind>B1</kind>
<name>Shimura et al.</name>
<date>20021100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>358500</main-classification></classification-national>
</citation>
<citation>
<patcit num="00139">
<document-id>
<country>US</country>
<doc-number>6546143</doc-number>
<kind>B1</kind>
<name>Taubman et al.</name>
<date>20030400</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00140">
<document-id>
<country>US</country>
<doc-number>6625321</doc-number>
<kind>B1</kind>
<name>Li et al.</name>
<date>20030900</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00141">
<document-id>
<country>US</country>
<doc-number>6650782</doc-number>
<kind>B1</kind>
<name>Joshi et al.</name>
<date>20031100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00142">
<document-id>
<country>US</country>
<doc-number>6668090</doc-number>
<kind>B1</kind>
<name>Joshi et al.</name>
<date>20031200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00143">
<document-id>
<country>US</country>
<doc-number>2001/0003544</doc-number>
<kind>A1</kind>
<name>Kajiwara et al.</name>
<date>20010600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>382240</main-classification></classification-national>
</citation>
<citation>
<patcit num="00144">
<document-id>
<country>US</country>
<doc-number>2001/0021223</doc-number>
<kind>A1</kind>
<name>Andrew</name>
<date>20010900</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00145">
<document-id>
<country>US</country>
<doc-number>2001/0047517</doc-number>
<kind>A1</kind>
<name>Christopoulos et al.</name>
<date>20011100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00146">
<document-id>
<country>US</country>
<doc-number>2003/0110299</doc-number>
<kind>A1</kind>
<name>Larsson et al.</name>
<date>20030600</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00147">
<document-id>
<country>EP</country>
<doc-number>0510933</doc-number>
<kind>A1</kind>
<date>19921000</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00148">
<document-id>
<country>EP</country>
<doc-number>0593013</doc-number>
<kind>A2</kind>
<date>19940400</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00149">
<document-id>
<country>EP</country>
<doc-number>0611051</doc-number>
<kind>A1</kind>
<date>19940800</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00150">
<document-id>
<country>EP</country>
<doc-number>0622741</doc-number>
<kind>A2</kind>
<date>19941100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00151">
<document-id>
<country>EP</country>
<doc-number>701375</doc-number>
<kind>A2</kind>
<date>19960300</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00152">
<document-id>
<country>EP</country>
<doc-number>0967556</doc-number>
<kind>A2</kind>
<date>19991200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00153">
<document-id>
<country>EP</country>
<doc-number>1035511</doc-number>
<kind>A2</kind>
<date>20000900</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00154">
<document-id>
<country>EP</country>
<doc-number>1164781</doc-number>
<kind>A1</kind>
<date>20011200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00155">
<document-id>
<country>GB</country>
<doc-number>2 211 691</doc-number>
<kind>A</kind>
<date>19890700</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00156">
<document-id>
<country>GB</country>
<doc-number>2 284 121</doc-number>
<kind>A</kind>
<date>19950500</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00157">
<document-id>
<country>GB</country>
<doc-number>2 285 374</doc-number>
<kind>A</kind>
<date>19950700</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00158">
<document-id>
<country>GB</country>
<doc-number>2 293 733</doc-number>
<kind>A</kind>
<date>19960400</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00159">
<document-id>
<country>GB</country>
<doc-number>2 293 734</doc-number>
<kind>A</kind>
<date>19960400</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00160">
<document-id>
<country>GB</country>
<doc-number>2 303 030</doc-number>
<kind>A</kind>
<date>19970200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00161">
<document-id>
<country>GB</country>
<doc-number>2 303 031</doc-number>
<kind>A</kind>
<date>19970200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00162">
<document-id>
<country>GB</country>
<doc-number>2 341 035</doc-number>
<kind>A</kind>
<date>20000300</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00163">
<document-id>
<country>JP</country>
<doc-number>406038193</doc-number>
<kind>A</kind>
<date>19920700</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00164">
<document-id>
<country>JP</country>
<doc-number>06-245077</doc-number>
<date>19940900</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00165">
<document-id>
<country>JP</country>
<doc-number>6-350989</doc-number>
<date>19941200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00166">
<document-id>
<country>JP</country>
<doc-number>7-79350</doc-number>
<date>19950300</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00167">
<document-id>
<country>WO</country>
<doc-number>WO 88/10049</doc-number>
<date>19881200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00168">
<document-id>
<country>WO</country>
<doc-number>WO 91/03902</doc-number>
<date>19910300</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00169">
<document-id>
<country>WO</country>
<doc-number>WO 91/18361</doc-number>
<date>19911100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00170">
<document-id>
<country>WO</country>
<doc-number>WO 93/10634</doc-number>
<date>19930500</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00171">
<document-id>
<country>WO</country>
<doc-number>WO 94/17492</doc-number>
<date>19940800</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00172">
<document-id>
<country>WO</country>
<doc-number>WO 94/23385</doc-number>
<date>19941000</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00173">
<document-id>
<country>WO</country>
<doc-number>WO 95/19683</doc-number>
<date>19950700</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00174">
<document-id>
<country>WO</country>
<doc-number>WO 96/09718</doc-number>
<date>19960300</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00175">
<document-id>
<country>WO</country>
<doc-number>WO 00/49571</doc-number>
<date>20000800</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00176">
<document-id>
<country>WO</country>
<doc-number>WO 01/16764</doc-number>
<kind>A1</kind>
<date>20010300</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00177">
<othercit>European International Search Report for European Appln No. US09/823,733, mailed May 19, 2006 (4 pages).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00178">
<othercit>Taubman, D., et al.: “Embedded Block Coding in JPEG2000,” International Conference on Image Processing, Sep. 10-13, 2000, pp. 33-36, XP10529916.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00179">
<othercit>Antonini, et al., “Image Coding Using Wavelet Transform”, <i>IEEE Transactions on Image Processing</i>, vol. 1, No. 2, Apr. 1992, pp. 205-220.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00180">
<othercit>Blumberg, et al., “Visual Realism and Interativity for the Internet”, IEEE, 1997, pp. 269-273.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00181">
<othercit>Boliek, et al., “Decoding compression with reversible embedded wavelets (CREW) codestreams”, Journal of Electronic Imaging, Jul. 1998, vol. 7 (3), pp. 402-409.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00182">
<othercit>Boliek, et al., “JPEG 2000 for Efficient Imaging in a Client/Server Environment”, Proceedings of the PIE, SPIE, Bellingham, VA, US, vol. 4472, Jul. 31, 2001, pp. 212-223, XP008010308.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00183">
<othercit>Boliek, et al., “JPEG 2000 Next Generation Image Compression System”, IEEE 0-7803-6297, 45-48.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00184">
<othercit>Calderbank, et al., “Wavelet Transforms That Map Integers to Integers”, Aug. 1996.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00185">
<othercit>Carey, et al: “Regularity-Preserving Image Interpolation”, IEEE Transactions on Image Processing, vol. 8., No. 9, Sep. 1999, pp. 1293-1297, XP002246254.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00186">
<othercit>Carrato, et al: “A Simple Edge-Sensitive Image Interpolation Filter”, Proceedings of the International Confrence on Image Processing (ICIP) Lausanne, Sep. 16-19, 1996, New York, IEEE, US, vol. 1, pp. 711-714, XP010202493.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00187">
<othercit>Chen, et al., “Wavelet Pyramid Image Coding with Predictable and Controllable Subjective Picture Quality”, <i>IEICE Trans. Fundamentals</i>, vol. E76-A., No. 9, Sep. 1993, pp. 1458-1468.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00188">
<othercit>Cheong, et al., “Subband Image Coding with Biorthogonal Wavelets”, <i>IEICE Trans. Fundamentals</i>, vol. E75-A, No. 7, Jul. 1992, pp. 871-881.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00189">
<othercit>Chrysafis, et al., “An Algorith for Low Memory Wavelet Image Compression”, IEEE 0-7803-5467-2/99, pp. 354-358.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00190">
<othercit>Chrysafis, et al., “Line Based Reduced Memory, Wavelet Image Compression,” Data Compression Conference, 1998, DCC '98, Proceedings Snowbird, UT, Mar. 1998, pp. 398-407.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00191">
<othercit>Chui, et al., “Wavelets on a Bounded Interval”, <i>Numerical Methods of Approximation Theory</i>, vol. 9, 1992, pp. 53-75.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00192">
<othercit>Crochiere, et al., “Digital Coding of Speech in Sub-bands”, 1976, American Telephone and Telegraph Company, The Bell System Technical Journal, vol. 55, No. 8, Oct. 1976, p. 1069-1085.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00193">
<othercit>Denk, et al., “Architectures for Lattice Structure Based Orthonormal Discrete Wavelet Transforms”, <i>IEEE</i>, 1994, pp. 259-270.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00194">
<othercit>Deshpande, et al., “HTTP Streaming of JPEG2000 Images”, IEEE, 2001, pp. 15-19.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00195">
<othercit>Dutch Search Report, 133082, Nov. 26, 1996.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00196">
<othercit>Esteban, et al., “1977 IEEE International Conference on Acoustics, Speech &amp; Signal Processing”, “Application of Quadrature Mirror Filters to Split Band Voice Coding Schemes”, p. 191-195.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00197">
<othercit>French Search Report, FR9511023, Nov. 26, 1996.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00198">
<othercit>French Search Report, FR9511024, Nov. 26, 1996.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00199">
<othercit>German Search Report, Dated Mar. 21, 1997, 3 pages.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00200">
<othercit>Gharavi, et al., “Proceedings: ICASSP 87”, 1987 International Conference on Acoustics, Speech, and Signal Processing, Apr. 6, 7, 8, 9, 1987, vol. 4 of 4, “Application of Quadrature Mirror Filtering to the Coding of Monochrome and Color Images”, p. 2384-2387.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00201">
<othercit>Gharavi, et al., “Sub-band Coding of Digital Images Using Two-Dimensional Quadrature Mirror Filtering:, SPIE vol. 707 Visual Communications and Image Processing”, 1986, p. 51-61.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00202">
<othercit>Gordon, Benjamin M., et al., “A 1.2 mW Video-Rate 2-D Color Subband Decoder,” IEEE Journal of Solid-State Circuits, IEEE Inc. New York, vol. 30, No. 12, Dec. 1, 1995, pp. 1510-1516.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00203">
<othercit>Hauf, et al., “The FlashPix™ Image File Format”, The Fourth Color Imaging Conference: Color Science, Systems and Application, 1996, pp. 234-238.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00204">
<othercit>Howard, et al., “Fast and Efficient Lossless Image Compression”, <i>IEEE</i>, 1993, pp. 351-360.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00205">
<othercit>Information Technology—JPEG 2000 Image Coding System—Part 1: Core Coding System, ISO/IEC 15444-1, Dec. 15, 2000, p. 5, 14, 22.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00206">
<othercit>International Search Report for Application No.: GB 9518298.6, dated Nov. 8, 1995.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00207">
<othercit>JPEG 2000 Part 1 Final Committee Draft Version 1.0, Image Compression Standard described in ISO/IEC 1/SC 29/WG 1 N1646, Mar. 16, 2000.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00208">
<othercit>Komatsu, et al., “Reversible Subband Coding of Images”, SPIE vol. 2501, pp. 676-648.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00209">
<othercit>Langdon, Jr., “Sunset: A Hardware-Oriented Algorithm for Lossless Compression of Gray Scale Images”, <i>SPIE vol. 1444, Image Capture, Formatting, and Display</i>, 1991, pp. 272-282.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00210">
<othercit>Le Gall, et al., “Sub-band coding of Digital Images Using Symmetric Short Kernal Filters and Arithmetic Coding Techniques”, 1988, International Conference on Acoustics, Speech and Signal Processing, pp. 761-764.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00211">
<othercit>Lewis, et al., “Image Compression Using the 2-D Wavelet Transform”, <i>IEEE Transactions on Image Processing</i>, vol. 1, No. 2, Apr. 1992, pp. 244-250.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00212">
<othercit>Lux, P., “A Novel Set of Closed Orthogonal Functions for Picture Coding”, 1977, pp. 267-274.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00213">
<othercit>Marcellin, et al., “An Overview of JPEG-2000”, Proceedings. DCC 2000 Snowbird, UT, USA, Mar. 28-30, 2000, pp. 523-541, XP010377392.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00214">
<othercit>Meng, Teresa H., “A Wireless Portable Video-on-Demand System,” VLSI Design, 1998, Proceedings Eleventh International Conference on Chennai, India 407, Jan. 1998, California, pp. 4-9.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00215">
<othercit>Ohta, et al., “Wavelet Picture Coding with Transform Coding Approach”, Jul. 1992, No. 7, pp. 776-784.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00216">
<othercit>Padmanabhan, et al., “Feedback-Based Orthogonal Digital Filters”, <i>IEEE Transactions on Circuits and Systems</i>, Aug. 1993, No. 8, pp. 512-525.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00217">
<othercit>Pollara et al., “Rate-distortion Efficiency of Subband Coding with Integer Coefficient Filters”, Jul. 1994, p. 419, Information Theory, 1994, IEEE.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00218">
<othercit>Reeves, et al: “Multiscale-Based Image Enhancement”, Electrical and Computer Engineering, 1997. Engineering Innovation: Voyage of Discovery. IEEE 1997 Canadian Conference on St. Johns, NFLD., Canada May 25-28, 1997, New York, NY. (pp. 500-503), XP010235053.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00219">
<othercit>Reusens, “New Results in Subband/Wavelet Image Coding”, May 1993, p. 381-385.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00220">
<othercit>Said, et al., “Image Compression Using the Spatial-Orientation Tree”, <i>IEEE</i>, 1993, pp. 279-282.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00221">
<othercit>Said, et al., “Reversible Image Compression Via Multiresolution representation and Predictive Coding”, Aug. 11, 1993, pp. 664-674.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00222">
<othercit>Shah, et al., “A Chip Set for Lossless Image Compression”, <i>IEEE Journal of Solid-State Circuits</i>, vol. 26, No. 3, Mar. 1991, pp. 237-244.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00223">
<othercit>Shapiro, J. M., “An Embedded Hierarchical Image Coder Using Zerotrees of Wavelet Coefficients”, <i>IEEE</i>, 1993, pp. 214-223.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00224">
<othercit>Shapiro, J. M., “Embedded Image Coding Using Zerotrees of Wavelet Coefficients”, <i>IEEE Transactions on Signal Processing</i>, Dec. 1993, No. 12, pp. 3445-3462.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00225">
<othercit>Smith, et al., “Exact Reconstruction Techniques for Tree-Structured Subband Coders”, IEEE Transactions on Acoustics, Speech, and Signal Processing, vol. ASSP-34, No. 3, Jun. 1986, pp. 434-441.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00226">
<othercit>Stoffel, et al: “A Survey of Electronic Techniques For Pictorial Image Reproduction,” IEEE Transactions On Communications, vol. COM-29, No. 12, Dec. 1981, pp. 1898-1925, XP000560531 IEEE, New York (US).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00227">
<othercit>SZU, et al., “Image Wavelet Transforms Implemented by Discrete Wavelet Chips”, <i>Optical Engineering</i>, Jul. 1994, vol. 33, No. 7, pp. 2310-2325.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00228">
<othercit>Vetterli, Martin, “Filter Banks Allowing Perfect Reconstruction”, Signal Processing 10 (1986), p. 219-244.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00229">
<othercit>Vetterli, Martin, “Multi-Dimensional Sub-band Coding: Some Theory and Algorithms”, Signal Processing 6 (1984) p. 97-112.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00230">
<othercit>Villasenor, et al., “Filter Evaluation and Selection in Wavelet Image Compression”, <i>IEEE</i>, 1994, pp. 351-360.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00231">
<othercit>Westernick, et al., “Proceedings: ICASSP 87”, 1987 International Conference on Acoustics, Speech, and Signal Processing, Apr. 6, 7, 8, 9, 1987, vol. 3 of 4, “Sub-band coding of Images Using Predictive Vector Quantization”, p. 1378-1381.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00232">
<othercit>Woods, “Subband Image Coding”, 1991, pp. 101-108, 163-167, and 180-189.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00233">
<othercit>Woods, et al., “Subband Coding of Images”, <i>IEEE Transactions on Acoustics, Speech, and Signal Processing</i>, vol. 1 ASSP-34, No. 5, Oct. 1986, pp. 1278-1288.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00234">
<othercit>Woods, et al., “Sub-band coding of Images”, Proceedings ICASSP 86, Tokyo, Japan, Apr. 1986, p. 1005-1008.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00235">
<othercit>Wu, et al., “New Compression Paradigms in JPEG2000”, Applications of Digital Image Processing XXIII, San Diego, CA USA, Jul. 31-Aug. 3, 2000, vol. 4115, pp. 418-429, XP008013391, Proceedings of the DPIE—The International Society for Optical Engineering, 2000, SPIE-Int. Soc. Opt. Eng., USA.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00236">
<othercit>Xiong, et al., “Joint Optimization of Scalar and Tree-structured Quantization of Wavelet Image Decompositions”, Jan. 11, 1993, pp. 891-895.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00237">
<othercit>Flashpix Format Specification, Version 1.0.2, Jul. 2, 1998 Copyright 1997 Digital Imaging Group.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00238">
<othercit>Internet Imaging Protocol, Version 1.0.5, Oct. 1997 Copyright 1997 Hewlett Packard Company, Live Pictures, Inc., and Eastman Kodak Company.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00239">
<othercit>XSL Transformations (XSLT), Version 1.0, W3C Recommendation Nov. 16, 1999 by the W3C.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
</references-cited>
<number-of-claims>22</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>382166</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>382232</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>382234</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>382238</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>382240</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>382247</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>382248</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>3752401</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>37524011</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>37524019</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>37524024</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>26</number-of-drawing-sheets>
<number-of-figures>38</number-of-figures>
</figures>
<us-related-documents>
<continuation>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>09823739</doc-number>
<kind>00</kind>
<date>20010330</date>
</document-id>
<parent-grant-document>
<document-id>
<country>US</country>
<doc-number>7006697</doc-number>
<kind>A </kind>
</document-id>
</parent-grant-document>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>11304340</doc-number>
</document-id>
</child-doc>
</relation>
</continuation>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20060093226</doc-number>
<kind>A1</kind>
<date>20060504</date>
</document-id>
</related-publication>
</us-related-documents>
<parties>
<applicants>
<applicant sequence="001" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Gormish</last-name>
<first-name>Michael J.</first-name>
<address>
<city>Redwood City</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="002" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Schwartz</last-name>
<first-name>Edward L.</first-name>
<address>
<city>Sunnyvale</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="003" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Satoh</last-name>
<first-name>Yutaka</first-name>
<address>
<city>Yokohama</city>
<country>JP</country>
</address>
</addressbook>
<nationality>
<country>JP</country>
</nationality>
<residence>
<country>JP</country>
</residence>
</applicant>
</applicants>
</parties>
<assignees>
<assignee>
<addressbook>
<orgname>Ricoh Co., Ltd.</orgname>
<role>03</role>
<address>
<city>Tokyo</city>
<country>JP</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Couso</last-name>
<first-name>Yon J.</first-name>
<department>2624</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A method and apparatus for assigning codeblocks to coders operating in parallel is described. In one embodiment, the method comprises decomposing input data into a plurality of code-blocks, and assigning the plurality of code-blocks, on a code-block basis, to a plurality of MQ coders to code the plurality of code-blocks in parallel to balance, to the extent possible, an amount of coding to be performed by each of the plurality of MQ coders.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="207.09mm" wi="176.61mm" file="US07298912-20071120-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="203.62mm" wi="119.72mm" orientation="landscape" file="US07298912-20071120-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="175.18mm" wi="177.29mm" file="US07298912-20071120-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="189.06mm" wi="172.38mm" orientation="landscape" file="US07298912-20071120-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="140.21mm" wi="125.56mm" file="US07298912-20071120-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="203.88mm" wi="153.59mm" file="US07298912-20071120-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="211.58mm" wi="168.40mm" orientation="landscape" file="US07298912-20071120-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="210.82mm" wi="153.33mm" file="US07298912-20071120-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="199.98mm" wi="168.06mm" orientation="landscape" file="US07298912-20071120-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="257.47mm" wi="173.06mm" orientation="landscape" file="US07298912-20071120-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="217.42mm" wi="91.44mm" orientation="landscape" file="US07298912-20071120-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="264.50mm" wi="164.17mm" orientation="landscape" file="US07298912-20071120-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="85.09mm" wi="41.91mm" file="US07298912-20071120-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00013" num="00013">
<img id="EMI-D00013" he="228.35mm" wi="183.98mm" file="US07298912-20071120-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00014" num="00014">
<img id="EMI-D00014" he="231.99mm" wi="183.90mm" file="US07298912-20071120-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00015" num="00015">
<img id="EMI-D00015" he="229.28mm" wi="181.61mm" file="US07298912-20071120-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00016" num="00016">
<img id="EMI-D00016" he="146.47mm" wi="112.61mm" file="US07298912-20071120-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00017" num="00017">
<img id="EMI-D00017" he="224.79mm" wi="182.03mm" file="US07298912-20071120-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00018" num="00018">
<img id="EMI-D00018" he="123.70mm" wi="140.80mm" file="US07298912-20071120-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00019" num="00019">
<img id="EMI-D00019" he="244.26mm" wi="180.42mm" orientation="landscape" file="US07298912-20071120-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00020" num="00020">
<img id="EMI-D00020" he="210.90mm" wi="180.51mm" orientation="landscape" file="US07298912-20071120-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00021" num="00021">
<img id="EMI-D00021" he="240.11mm" wi="176.95mm" orientation="landscape" file="US07298912-20071120-D00021.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00022" num="00022">
<img id="EMI-D00022" he="249.09mm" wi="185.59mm" orientation="landscape" file="US07298912-20071120-D00022.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00023" num="00023">
<img id="EMI-D00023" he="253.15mm" wi="159.51mm" orientation="landscape" file="US07298912-20071120-D00023.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00024" num="00024">
<img id="EMI-D00024" he="254.76mm" wi="157.14mm" orientation="landscape" file="US07298912-20071120-D00024.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00025" num="00025">
<img id="EMI-D00025" he="170.69mm" wi="92.96mm" file="US07298912-20071120-D00025.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00026" num="00026">
<img id="EMI-D00026" he="208.87mm" wi="124.88mm" orientation="landscape" file="US07298912-20071120-D00026.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<p id="p-0002" num="0001">This is a continuation of application Ser. No. 09/823,739, filed on Mar. 30, 2001 now U.S. Pat No. 7,006,697, entitled “Method and Apparatus for Assigning Codeblocks to Coders Operating In Parallel,” incorporated by reference herein and assigned to the corporate assignee of the present invention.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">FIELD OF THE INVENTION</heading>
<p id="p-0003" num="0002">The present invention relates to the field of compression and decompression; more particularly, the present invention relates to assigning codeblocks to coders operating in parallel.</p>
<heading id="h-0002" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0004" num="0003">Data compression is an extremely useful tool for storing and transmitting large amounts of data. For example, the time required to transmit an image, such as a facsimile transmission of a document, is reduced drastically when compression is used to decrease the number of bits required to represent the image.</p>
<p id="p-0005" num="0004">Many different data compression techniques exist in the prior art. Compression techniques can be divided into two broad categories, lossy coding and lossless coding. Lossy coding involves coding that results in the loss of information, such that there is no guarantee of perfect reconstruction of the original data. The goal of lossy compression is that changes to the original data are done in such a way that they are not objectionable or detectable. In lossless compression, all the information is retained and the data is compressed in a manner which allows for perfect reconstruction.</p>
<p id="p-0006" num="0005">In lossless compression, input symbols or intensity data are converted to output codewords. The input may include image, audio, one-dimensional (e.g., data changing spatially), two-dimensional (e.g., data changing in two spatial directions), or multi-dimensional/multi-spectral data. If the compression is successful, the codewords are represented in fewer bits than the number of bits in the “normal” representation of the input symbols (or intensity data). Lossless coding methods include dictionary methods of coding (e.g., Lempel-Ziv), run length encoding, enumerative coding and entropy coding. In lossless image compression, compression is based on predictions or contexts, plus coding. The JBIG standard for facsimile compression and DPCM (differential pulse code modulation—an option in the JPEG standard) for continuous-tone images are examples of lossless compression for images. In lossy compression, input symbols or intensity data are quantized prior to conversion to output codewords. Quantization is intended to preserve relevant characteristics of the data while eliminating unimportant characteristics. Prior to quantization, lossy compression system often use a transform to provide energy compaction. JPEG is an example of a lossy coding method for image data.</p>
<p id="p-0007" num="0006">Reversible transforms (wavelet, component) may be used for both lossy and lossless compression. Irreversible transforms (wavelet, component, discrete cosine) may be used only for lossy.</p>
<p id="p-0008" num="0007">The new JPEG 2000 decoding standard utilizes transforms and provides a new coding scheme and codestream definition for images. Although JPEG 2000 is a decoding standard, and thus defines what a decoder must do, this definition restricts an encoder especially for lossless compression. Under the JPEG 2000 Standard, each image may be divided into rectangular tiles. If there is more than one tile, the tiling of the image creates tile-components. An image may have multiple components. For example, a color image might have red, green and blue components. Tile-components can be extracted or decoded independently of each other.</p>
<p id="p-0009" num="0008">After tiling of an image, the tile-components are decomposed into one or more different decomposition levels using a wavelet transformation. These decomposition levels contain a number of subbands populated with coefficients that describe the horizontal and vertical spatial frequency characteristics of the original tile-components. The coefficients provide frequency information about a local area, rather than across the entire image. That is, a small number of coefficients completely describe a single sample. A decomposition level is related to the next decomposition level by a spatial factor of two, such that each successive decomposition level of the subbands has approximately half the horizontal resolution and half the vertical resolution of the previous decomposition level.</p>
<p id="p-0010" num="0009">Although there are as many coefficients as there are samples, the information content tends to be concentrated in just a few coefficients. Through quantization, the numerical precision of a number of coefficients may be reduced with a disproportionately low introduction of distortion (quantization noise). Additional processing by an entropy coder reduces the number of bits required to represent these quantized coefficients, sometimes significantly compared to the original image.</p>
<p id="p-0011" num="0010">The individual subbands of a tile-component are further divided into code-blocks. These code-blocks can be grouped into precincts. These rectangular arrays of coefficients can be extracted independently. The individual bit-planes of the coefficients in a code-block are entropy coded with three coding passes. Each of these coding passes collects contextual information about the bit-plane compressed image data.</p>
<p id="p-0012" num="0011">The bit stream compressed image data created from these coding passes is grouped in layers. Layers are arbitrary groupings of successive coding passes from code-blocks. Although there is great flexibility in layering, the premise is that each successive layer contributes to a higher quality image. Code-blocks of subband coefficients at each resolution level are partitioned into rectangular areas called precincts.</p>
<p id="p-0013" num="0012">Packets are a fundamental unit of the compressed codestream. A packet contains compressed image data from one layer of a precinct of one resolution level of one tile-component. These packets are placed in a defined order in the codestream.</p>
<p id="p-0014" num="0013">The codestream relating to a tile, organized in packets, are arranged in one, or more, tile-parts. A tile-part header, comprised of a series of markers and marker segments, or tags, contains information about the various mechanisms and coding styles that are needed to locate, extract, decode, and reconstruct every tile-component. At the beginning of the entire codestream is a main header, comprised of markers and marker segments, that offers similar information as well as information about the original image.</p>
<p id="p-0015" num="0014">The codestream is optionally wrapped in a file format that allows applications to interpret the meaning of, and other information about, the image. The file format may contain data besides the codestream.</p>
<p id="p-0016" num="0015">The decoding of a JPEG 2000 codestream is performed by reversing the order of the encoding steps. <figref idref="DRAWINGS">FIG. 1</figref> is a block diagram of the JPEG 2000 standard decoding scheme that operates on a compressed image data codestream. Referring to <figref idref="DRAWINGS">FIG. 1</figref>, a bitstream initially is received by data ordering block <b>101</b> that regroups layers and subband coefficients. Arithmetic coder <b>102</b> uses contextual information from previously coded coefficients provided by the bit modeling block <b>103</b> about the bit-plane compressed image data, and its internal state, to decode a compressed bit stream.</p>
<p id="p-0017" num="0016">Next, the codestream is quantized by quantization block <b>104</b>, which may be quantizing based on a region of interest (ROI) as indicated by ROI block <b>105</b>. After quantization, an inverse wavelet/spatial transform is applied to the coefficients via transform block <b>107</b>, followed by DC level shifting and optional component transform block <b>108</b>. This results in generation of a reconstructed image.</p>
<heading id="h-0003" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0018" num="0017">A method and apparatus for assigning codeblocks to coders operating in parallel is described. In one embodiment, the method comprises decomposing input data into a plurality of code-blocks, and assigning the plurality of code-blocks, on a code-block basis, to a plurality of MQ coders to code the plurality of code-blocks in parallel to balance, to the extent possible, an amount of coding to be performed by each of the plurality of MQ coders.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0019" num="0018">The present invention will be understood more fully from the detailed description given below and from the accompanying drawings of various embodiments of the invention, which, however, should not be taken to limit the invention to the specific embodiments, but are for explanation and understanding only.</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram of the JPEG 2000 standard decoding scheme.</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 2A</figref> shows an example 8×8 code-block of coefficients with the sub-bit-plane pass identified for each coefficient and a label showing the order of processing for each coding pass.</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 2B</figref> illustrates a memory for a variable length run and skip counts.</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIGS. 3A-D</figref> illustrate neighborhood coefficients and memory organization for one embodiment of a context model.</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 4</figref> shows one embodiment of a significance memory organization for random access of a 16×16 code-block.</p>
<p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. 5</figref> shows the memories and registers used in the significance propagation pass for random access.</p>
<p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. 6</figref> illustrates the significance state from memory and stored in registers for random access.</p>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. 7</figref> is a block diagram of one embodiment of significance propagation pass logic.</p>
<p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. 8</figref> illustrates an example of performance of one embodiment of a context model on a 4×4 block.</p>
<p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. 9</figref> illustrates one embodiment of an organization of a significance memory for sequential accesses of a 16×16 code-block.</p>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. 10</figref> illustrates one embodiment of the memories and registers used for the significance propagation pass.</p>
<p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. 11</figref> shows how memory and registers may be used to provide the proper region for context model operation.</p>
<p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. 12</figref> is a block diagram of one embodiment of pass determination logic.</p>
<p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. 13</figref> is a block diagram of one embodiment of double context generation logic.</p>
<p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. 14A</figref> is a block diagram of one embodiment of an “early context” MQ-decoder.</p>
<p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. 14B</figref> is one embodiment of a typical decoding implementation.</p>
<p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. 15</figref> is a block diagram of one embodiment of a “late context” MQ-decoder.</p>
<p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. 16A</figref> illustrates how a comparison of probability class indices may operate.</p>
<p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. 16B</figref> is a block diagram of a multiplexor that determines the MPS or LPS for each Qe_Value.</p>
<p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. 17</figref> illustrates the intervals for multiple MPS decoding.</p>
<p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. 18</figref> illustrates one embodiment of an assignment of code blocks in parallel for 4:4:4 data.</p>
<p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. 19</figref> illustrates one embodiment of an assignment of code blocks in parallel for 4:2:2 data.</p>
<p id="p-0042" num="0041"><figref idref="DRAWINGS">FIG. 20</figref> illustrates an alternative embodiment of an assignment of code blocks in parallel for 4:1:1 data.</p>
<p id="p-0043" num="0042"><figref idref="DRAWINGS">FIG. 21</figref> is a diagram of memory for one embodiment of a coder that includes multiple MQ coders, each having an associated context model.</p>
<p id="p-0044" num="0043"><figref idref="DRAWINGS">FIG. 22A</figref> shows how to use a limited number of bitplanes of memory for each coefficient during encoding.</p>
<p id="p-0045" num="0044"><figref idref="DRAWINGS">FIG. 22B</figref> illustrates a block diagram of one embodiment of control logic to control access to the memory.</p>
<p id="p-0046" num="0045"><figref idref="DRAWINGS">FIG. 23</figref> illustrates using a small amount of memory for variable length (VL) code information instead of counters.</p>
<p id="p-0047" num="0046"><figref idref="DRAWINGS">FIG. 24</figref> is a block diagram of one embodiment of a forward transform.</p>
<p id="p-0048" num="0047"><figref idref="DRAWINGS">FIGS. 25A and 26B</figref> are block diagrams of embodiments of the low pass filter.</p>
<p id="p-0049" num="0048"><figref idref="DRAWINGS">FIGS. 26A and 25B</figref> are block diagrams of embodiments of a high pass filter.</p>
<p id="p-0050" num="0049"><figref idref="DRAWINGS">FIG. 27</figref> is a block diagram of an alternative embodiment of a forward transform.</p>
<p id="p-0051" num="0050"><figref idref="DRAWINGS">FIG. 28</figref> is a block diagram of one embodiment of an inverse transform.</p>
<p id="p-0052" num="0051"><figref idref="DRAWINGS">FIG. 29</figref> is a block diagram of one embodiment of an encoder/decoder.</p>
<p id="p-0053" num="0052"><figref idref="DRAWINGS">FIG. 30</figref> illustrates an example of a 16 bit word having both run counts and skip counts.</p>
<p id="p-0054" num="0053"><figref idref="DRAWINGS">FIG. 31</figref> illustrates an exemplary 8×8 region of significance state bits for determining the coding pass.</p>
<p id="p-0055" num="0054"><figref idref="DRAWINGS">FIG. 32</figref> is a diagram of one embodiment of determine pass logic.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DETAILED DESCRIPTION OF THE PRESENT INVENTION</heading>
<p id="p-0056" num="0055">Techniques for performing coding are described. These techniques may be used for implementing JPEG 2000 or for manipulating or adding to the feature set. That is, the JPEG2000 standard, Information Technology—JPEG 2000 image coding system: Core Coding System, ITU-T Rec. T.800|ISO/IEC FDIS 15444-1: 2000 JPEG Image Coding System, incorporated herein by reference, leaves many choices to implementers. It is a purpose of the techniques described herein to use choices in JPEG 2000 to make high speed, low cost, low memory and/or feature rich implementations in software, hardware, and/or firmware.</p>
<p id="p-0057" num="0056">In the following description, numerous details are set forth to provide a thorough understanding of the present invention. It will be apparent, however, to one skilled in the art, that the present invention may be practiced without these specific details. In other instances, well-known structures and devices are shown in block diagram form, rather than in detail, in order to avoid obscuring the present invention. Furthermore, any block, logic or functionality not described in detail may be implemented with well-known implementations or may be easily implemented by those skilled in the art using well-known hardware, software and/or firmware. Note that sometimes techniques and implementations are described using psuedo code. This is not meant to imply that the techniques are implemented solely in software; instead, such a description is often chosen to easily describe the functionality of terms one skilled in the art would easily understand.</p>
<p id="p-0058" num="0057">Some portions of the detailed descriptions which follow are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here, and generally, conceived to be a self-consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like.</p>
<p id="p-0059" num="0058">It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion, it is appreciated that throughout the description, discussions utilizing terms such as “processing” or “computing” or “calculating” or “determining” or “displaying” or the like, refer to the action and processes of a computer system, or similar electronic computing device, that manipulates and transforms data represented as physical (electronic) quantities within the computer system's registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage, transmission or display devices.</p>
<p id="p-0060" num="0059">The present invention also relates to apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes, or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium, such as, but is not limited to, any type of disk including floppy disks, optical disks, CD-ROMs, and magnetic-optical disks, read-only memories (ROMs), random access memories (RAMs), EPROMs, EEPROMs, magnetic or optical cards, or any type of media suitable for storing electronic instructions, and each coupled to a computer system bus.</p>
<p id="p-0061" num="0060">The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein, or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear from the description below. In addition, the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.</p>
<p id="p-0062" num="0061">A machine-readable medium includes any mechanism for storing or transmitting information in a form readable by a machine (e.g., a computer). For example, a machine-readable medium includes read only memory (“ROM”); random access memory (“RAM”); magnetic disk storage media; optical storage media; flash memory devices; electrical, optical, acoustical or other form of propagated signals (e.g., carrier waves, infrared signals, digital signals, etc.); etc.</p>
<p id="h-0006" num="0000">Overview</p>
<p id="p-0063" num="0062"><figref idref="DRAWINGS">FIG. 29</figref> is a block diagram of one emodiment of a coder. Referring to <figref idref="DRAWINGS">FIG. 29</figref>, a data interface <b>2901</b> is coupled to receive data to be encoded or output data after decoding. A DC level shifter <b>2902</b> is coupled to data interface <b>2901</b> to perform DC level shifting during encoding and decoding. Wavelet transform <b>2903</b> is coupled to a DC level shifter to perform forward or inverse wavelet transforms depending on the direction of flow. In one embodiment, wavelet transform <b>2903</b> performs a 5,3 reversible wavelet transform and a 5,3 irreversible wavelet transform to decompose an image into two to five levels of decomposition. Line buffers <b>2904</b> are coupled to wavelet transform <b>2903</b> to provide memory to support wavelet transform <b>2903</b> when performing the wavelet transform.</p>
<p id="p-0064" num="0063">A scaler quantization/dequantization block <b>2905</b> is coupled to wavelet transform <b>2903</b> to perform scaler quantization. In one embodiment, scaler quantization is only used for the 5,3 irreversible wavelet transform. A precoder <b>2906</b> is coupled to scaler quantizer to perform preceding. In one embodiment, the precoding converts coefficients from two's complement to sign magnitude (or vice versa for decoding). The precoding also determines zero bitplanes. Work memory A and work memory B are coupled to precoder <b>2906</b> along with packet header processing <b>2907</b>. The interface to work memory A and B and packet header <b>2907</b> is also coupled to bit modeling MQ-coders <b>2908</b><sub>1-N</sub>. Each of the MQ-coders <b>2908</b><sub>1-N </sub>is coupled to individual code memory <b>2911</b><sub>N </sub>to store coded data (compressed data in JPEG 2000 terminology). The coded data from code memory and the packet header from packet header <b>2907</b> is output as coded data. This is a JPEG 2000 bitstream. An additional functional block (not shown) may be used to create/read the main and tile-part headers. The bitstream and the headers make a JPEG 2000 codestream.</p>
<p id="h-0007" num="0000">Context Model Data Structure with Skipping for Sub-bit-planes</p>
<p id="p-0065" num="0064">In JPEG 2000, for bit-planes of coefficients that are not initially all-zero bit-planes (starting with the most significant bit (MSB) down), each coefficient is coded in one of three sub-bit-plane passes: significance propagation, refinement, and cleanup. <figref idref="DRAWINGS">FIG. 2A</figref> shows an example 8×8 code-block with the sub-bit-plane pass identified for one bit-plane for each coefficient. Referring to <figref idref="DRAWINGS">FIG. 2A</figref>, SP refers to the significance propagation pass, R refers to refinement pass, and C refers to the cleanup pass. The indices from 0 to 63 in <figref idref="DRAWINGS">FIG. 2A</figref> show the code block scan order. Thus, the scanning order is down four coefficents and then back up to the top row, respectively continuing across the code-block. Once scanning has completed across the code-block, scanning continues at the fifth coefficient of each column down across rest of the code-block.</p>
<p id="p-0066" num="0065">A typical implementation might read the entire block of coefficients 3 times, once for each coding pass of a bit-plane. This technique describes a way to read the entire block of coefficients for the significance propagation pass of each bit-plane, but to read only those coefficients actually needed for the refinement and cleanup passes.</p>
<p id="p-0067" num="0066">On the left side of each cell in <figref idref="DRAWINGS">FIG. 2A</figref>, solid lines indicate coefficients in the refinement sub-bit-plane pass and dotted lines indicate coefficients that are skipped in the refinement sub-bit-plane pass. Solid lines on the right side of each cell in <figref idref="DRAWINGS">FIG. 2A</figref> are similar for the cleanup sub-bit-plane pass. Once the pass has been identified for each coefficient, then the coefficients may be processed.</p>
<p id="p-0068" num="0067">Data structures may be built during the significance propagation pass using a process described below. The data structures may be used by the context model to reduce the number of accesses to the memory. Using the data structures, instead of checking each cell to determine what pass the information is in and then having to skip them, the context model need only access the memory once. Furthermore, the data structures allow access to multiple locations at the same time, such as when cleanup bits are coded 4 at a time.</p>
<p id="p-0069" num="0068">Tables 1 and 2 show data structures that describe the locations of coefficients in the refinement and cleanup sub-bit-plane passes (respectively). For each index, there is a run count of the number of coefficients in the sub-bit-plane pass and a skip count of the number of following coefficients that are in a different pass. These data structures allow these sub-bit-plane passes to be coded efficiently by allowing coefficients in other passes to be skipped.</p>
<p id="p-0070" num="0069">
<tables id="TABLE-US-00001" num="00001">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" rowsep="1">TABLE 1</entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>Data structure for refinement bits</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="1" colwidth="98pt" align="center"/>
<colspec colname="2" colwidth="14pt" align="center"/>
<colspec colname="3" colwidth="105pt" align="center"/>
<tbody valign="top">
<row>
<entry>index</entry>
<entry>run</entry>
<entry>skip</entry>
</row>
<row>
<entry namest="1" nameend="3" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="1" colwidth="98pt" align="center"/>
<colspec colname="2" colwidth="14pt" align="center"/>
<colspec colname="3" colwidth="105pt" align="char" char="."/>
<tbody valign="top">
<row>
<entry>0</entry>
<entry>0</entry>
<entry>1</entry>
</row>
<row>
<entry>1</entry>
<entry>2</entry>
<entry>8</entry>
</row>
<row>
<entry>2</entry>
<entry>1</entry>
<entry>3</entry>
</row>
<row>
<entry>3</entry>
<entry>1</entry>
<entry>48</entry>
</row>
<row>
<entry namest="1" nameend="3" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0071" num="0070">
<tables id="TABLE-US-00002" num="00002">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" rowsep="1">TABLE 2</entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>Data structure for cleanup bits</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="1" colwidth="98pt" align="center"/>
<colspec colname="2" colwidth="14pt" align="center"/>
<colspec colname="3" colwidth="105pt" align="center"/>
<tbody valign="top">
<row>
<entry>index</entry>
<entry>run</entry>
<entry>skip</entry>
</row>
<row>
<entry namest="1" nameend="3" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="1" colwidth="98pt" align="char" char="."/>
<colspec colname="2" colwidth="14pt" align="char" char="."/>
<colspec colname="3" colwidth="105pt" align="char" char="."/>
<tbody valign="top">
<row>
<entry>0</entry>
<entry>0</entry>
<entry>8</entry>
</row>
<row>
<entry>1</entry>
<entry>2</entry>
<entry>2</entry>
</row>
<row>
<entry>2</entry>
<entry>2</entry>
<entry>2</entry>
</row>
<row>
<entry>3</entry>
<entry>2</entry>
<entry>2</entry>
</row>
<row>
<entry>4</entry>
<entry>16</entry>
<entry>1</entry>
</row>
<row>
<entry>5</entry>
<entry>3</entry>
<entry>1</entry>
</row>
<row>
<entry>6</entry>
<entry>3</entry>
<entry>1</entry>
</row>
<row>
<entry>7</entry>
<entry>3</entry>
<entry>1</entry>
</row>
<row>
<entry>8</entry>
<entry>15</entry>
<entry>0</entry>
</row>
<row>
<entry namest="1" nameend="3" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0072" num="0071">The process is performed by processing logic that may comprise hardware, software, or a combination of both. In one embodiment, the processing logic that creates the data structures and uses them is located in bit modeling MQ-coders <b>2908</b><sub>1-N </sub>of <figref idref="DRAWINGS">FIG. 29</figref>. During the process, to create these data structures, the datastructures are first initialized.</p>
<p id="p-0073" num="0072">
<tables id="TABLE-US-00003" num="00003">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="56pt" align="left"/>
<colspec colname="2" colwidth="147pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="2" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>ri = 0</entry>
<entry>// index for refinement</entry>
</row>
<row>
<entry/>
<entry>ci = 0</entry>
<entry>// index for cleanup</entry>
</row>
<row>
<entry/>
<entry>r_run[ri] = 0</entry>
<entry>// run count for refinement</entry>
</row>
<row>
<entry/>
<entry>r_skip[ri] = 0</entry>
<entry>// skip count for refinement</entry>
</row>
<row>
<entry/>
<entry>c_run[ci] = 0</entry>
<entry>// run count for cleanup</entry>
</row>
<row>
<entry/>
<entry>c_skip[ci] = 0</entry>
<entry>// skip count for cleanup</entry>
</row>
<row>
<entry/>
<entry>state = INITIAL</entry>
<entry>// state can be INITIAL, SIG_PROP, REFINE or</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="left"/>
<tbody valign="top">
<row>
<entry>CLEANUP</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0074" num="0073">The “state” variable is used to distinguish between the start and the middle of a run. The “state” variable indicates the coding pass for the previous coefficient. If the current coefficient is the same, the size of a run or skip will be increased; if it is different, a new run will be started.</p>
<p id="h-0008" num="0000">Then each coefficient in the code-block is considered in the code block scan order in order to generate the seperate counts.</p>
<p id="p-0075" num="0074">
<tables id="TABLE-US-00004" num="00004">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="35pt" align="left"/>
<colspec colname="1" colwidth="182pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>For-y1 = 0 to maximum-for-y1 step 4</entry>
</row>
<row>
<entry/>
<entry>  for x = 0 to maximum-for-x step 1</entry>
</row>
<row>
<entry/>
<entry>    for y2 = 0 to maximum-for-y2 step 1</entry>
</row>
<row>
<entry/>
<entry>      process coefficient [x,y1+y2]</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
<br/>
In the above, the maximum for y1 is the greatest integer multiple of 4 that is less than the height of the code-block (“(height−1) &amp; ˜3”). The maximum for x is “width−1” for the code-block. The maximum for y2 is the smaller of 3 or coefficient is:
</p>
<p id="p-0076" num="0075">
<tables id="TABLE-US-00005" num="00005">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>if coefficient was significant in previous bitplane then</entry>
</row>
<row>
<entry/>
<entry>  if state is not REFINE then</entry>
</row>
<row>
<entry/>
<entry>    ri = ri + 1</entry>
</row>
<row>
<entry/>
<entry>    r_run[ri] = 1</entry>
</row>
<row>
<entry/>
<entry>    r_skip[ri] = 0</entry>
</row>
<row>
<entry/>
<entry>    state = REFINE</entry>
</row>
<row>
<entry/>
<entry>  else</entry>
</row>
<row>
<entry/>
<entry>    r_run[ri] = r_run[ri] + 1</entry>
</row>
<row>
<entry/>
<entry>  c_skip[ci] = c_skip[ci] + 1</entry>
</row>
<row>
<entry/>
<entry>else if a neighbor of the coefficient is significant then</entry>
</row>
<row>
<entry/>
<entry>  (coefficient is predicted sigificant, code it)</entry>
</row>
<row>
<entry/>
<entry>  r_skip[ri] = r_skip[ri] + 1</entry>
</row>
<row>
<entry/>
<entry>  c_skip[ci] = c_skip[ci] + 1</entry>
</row>
<row>
<entry/>
<entry>  state = SIG_PROP</entry>
</row>
<row>
<entry/>
<entry>else</entry>
</row>
<row>
<entry/>
<entry>  if state is not CLEANUP then</entry>
</row>
<row>
<entry/>
<entry>    ci = ci + 1</entry>
</row>
<row>
<entry/>
<entry>    c_run[ci] = 1</entry>
</row>
<row>
<entry/>
<entry>    c_skip[ci] = 0</entry>
</row>
<row>
<entry/>
<entry>    state = CLEANUP</entry>
</row>
<row>
<entry/>
<entry>  else</entry>
</row>
<row>
<entry/>
<entry>    c_run[ci] = c_run[ci] + 1</entry>
</row>
<row>
<entry/>
<entry>    r_skip[ri] = r_skip[ri] + 1</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0077" num="0076">The result of applying the procedure is that all the coefficients in the significance propagation pass will be coded while the data structures for the refinement bits and clean up bits are created.</p>
<p id="p-0078" num="0077">If desired, the run counts can be prevented from wrapping around lines. One embodiment of a process to prevent wrapping around lines is described below in the following psuedo-code. This may allow for handling boundaries more easily.</p>
<p id="p-0079" num="0078">
<tables id="TABLE-US-00006" num="00006">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="35pt" align="left"/>
<colspec colname="1" colwidth="182pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>for y1 = 0 to maximum for y1 step 4</entry>
</row>
<row>
<entry/>
<entry>  for x = 0 to maximum for x step 1</entry>
</row>
<row>
<entry/>
<entry>    for y2 = 0 to maximum for y2 step 1</entry>
</row>
<row>
<entry/>
<entry>      process coefficient [x,y1+y2]</entry>
</row>
<row>
<entry/>
<entry>  if state is REFINE then</entry>
</row>
<row>
<entry/>
<entry>    ri = ri + 1</entry>
</row>
<row>
<entry/>
<entry>    r_run[ri] = 0</entry>
</row>
<row>
<entry/>
<entry>    r_skip[ri] = 0</entry>
</row>
<row>
<entry/>
<entry>    state = INITIAL</entry>
</row>
<row>
<entry/>
<entry>  else if state is CLEANUP then</entry>
</row>
<row>
<entry/>
<entry>    ci = ci + 1</entry>
</row>
<row>
<entry/>
<entry>    c_run[ci] = 0</entry>
</row>
<row>
<entry/>
<entry>    c_skip[ci] = 0</entry>
</row>
<row>
<entry/>
<entry>    state = INITIAL</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0080" num="0079">For software, storing run and skip values as integers (in 32-bits for 32-bit computers, etc.) is most convenient. The worst case is runs of length one, with a zero length run at the start. In JPEG 2000, code-blocks are limited to a maximum of 4096 coefficents. Also the width and height of code-blocks are limited to a maximum of 1024 coefficients. For any size code-block with 4096 total coefficients with run counts continuing across groups of lines, 4097 memory locations is the maximum number of memory locations for the memory size. For 64×64 code-blocks with run counts starting every group of four lines, (4×64+1)×(64/4)=4112 memory locations is the maximum. For 1024×4 code-blocks with run counts starting every group of four lines (4×4+1)×(1024/4)=4352 memory locations is the maximum.</p>
<p id="p-0081" num="0080">In hardware to save memory, a minimal but fixed number of bits can be used for run and skip counts. If an indication of whether the first count is a run or skip is signaled (e.g., one bit signal indication), then run counts will be greater than 1 (and the ability to code 0 is not needed). For any size code-block with 4096 total coefficients with run counts continuing across groups of lines, one bit may be used to signal whether the first count is a run or skip and 4096×12 bits for counts for a total of 49,153 bits. For 64×64 code-blocks with run counts starting every group of four lines, one bit may be used to signal whether the first count is a run or skip for each group of four lines. Thus, a number of bits would be 1×64/4+4096×12=49,168 bits. For 1024×4 code-blocks with run counts starting every group of four lines, the number of bits would be 1×1024/4+4096×12=49,408 bits.</p>
<p id="p-0082" num="0081">One embodiment of a variable length code can be used to represent counts. Table 3 shows an example where small counts are represented with a small number of bits (e.g., 3 bits) and large counts are represented with a larger number of bits (e.g., 13 bits). The goal of such an approach is to have most counts be either 1, 2, 3, or 4 so that the smaller codewords are used more frequently. Only two sizes are used to make the implementation simple. However, more than two sizes could be used with added complexity.</p>
<p id="p-0083" num="0082">
<tables id="TABLE-US-00007" num="00007">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" rowsep="1">TABLE 3</entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>An Example of Simple Variable Length Code for Counts</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="offset" colwidth="42pt" align="left"/>
<colspec colname="1" colwidth="21pt" align="center"/>
<colspec colname="2" colwidth="154pt" align="center"/>
<tbody valign="top">
<row>
<entry/>
<entry>count</entry>
<entry>codeword</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="offset" colwidth="42pt" align="left"/>
<colspec colname="1" colwidth="21pt" align="char" char="."/>
<colspec colname="2" colwidth="154pt" align="center"/>
<tbody valign="top">
<row>
<entry/>
<entry>1</entry>
<entry>000</entry>
</row>
<row>
<entry/>
<entry>2</entry>
<entry>001</entry>
</row>
<row>
<entry/>
<entry>3</entry>
<entry>010</entry>
</row>
<row>
<entry/>
<entry>4</entry>
<entry>011</entry>
</row>
<row>
<entry/>
<entry>5</entry>
<entry>1000000000000</entry>
</row>
<row>
<entry/>
<entry>6</entry>
<entry>1000000000001</entry>
</row>
<row>
<entry/>
<entry>. . .</entry>
<entry>. . .</entry>
</row>
<row>
<entry/>
<entry>4096</entry>
<entry>1111111111011</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0084" num="0083">For this code, the worst case is when all run lengths are 1 (every codeword is 3 bits). For three cases (counts go across lines, 64×64 code blocks with groups of four lines, 1024×4 code-blocks with groups of four lines), the total number of bits are 12,289 bits; 12,304 bits; and 12,544 bits, respectively.</p>
<p id="p-0085" num="0084">Reduced memory usage can be achieved with a more complicated variable length code. A good structured code is a gamma code, γ<sup>1 </sup>or γ (from Appendix A of Bell, Cleary, Whitten “Text Compression”, Prenice Hall, N.J., 1990.) as shown in Table 4.</p>
<p id="p-0086" num="0085">
<tables id="TABLE-US-00008" num="00008">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" rowsep="1">TABLE 4</entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>Structured Variable Length Code for Counts</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="1" colwidth="21pt" align="center"/>
<colspec colname="2" colwidth="98pt" align="center"/>
<colspec colname="3" colwidth="98pt" align="center"/>
<tbody valign="top">
<row>
<entry>count</entry>
<entry>codeword (γ<sup>1 </sup>format)</entry>
<entry>codeword (γ format)</entry>
</row>
<row>
<entry namest="1" nameend="3" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="1" colwidth="21pt" align="char" char="."/>
<colspec colname="2" colwidth="98pt" align="center"/>
<colspec colname="3" colwidth="98pt" align="center"/>
<tbody valign="top">
<row>
<entry>1</entry>
<entry>0</entry>
<entry>0</entry>
</row>
<row>
<entry>2</entry>
<entry>10_0</entry>
<entry>100</entry>
</row>
<row>
<entry>3</entry>
<entry>10_1</entry>
<entry>110</entry>
</row>
<row>
<entry>4</entry>
<entry>110_00</entry>
<entry>10100</entry>
</row>
<row>
<entry>5</entry>
<entry>110_01</entry>
<entry>10110</entry>
</row>
<row>
<entry>6</entry>
<entry>110_10</entry>
<entry>11100</entry>
</row>
<row>
<entry>7</entry>
<entry>110_11</entry>
<entry>11110</entry>
</row>
<row>
<entry>8</entry>
<entry>1110_000</entry>
<entry>1010100</entry>
</row>
<row>
<entry>9</entry>
<entry>1110_001</entry>
<entry>1010110</entry>
</row>
<row>
<entry>. . .</entry>
<entry>. . .</entry>
<entry>. . .</entry>
</row>
<row>
<entry>15</entry>
<entry>1110_111</entry>
<entry>1111110</entry>
</row>
<row>
<entry>16</entry>
<entry>11110_0000</entry>
<entry>101010100</entry>
</row>
<row>
<entry>32</entry>
<entry>111110_00000</entry>
<entry>10101010100</entry>
</row>
<row>
<entry>64</entry>
<entry>111110_000000</entry>
<entry>1010101010100</entry>
</row>
<row>
<entry>128</entry>
<entry>11111110_0000000</entry>
<entry>101010101010100</entry>
</row>
<row>
<entry>256</entry>
<entry>111111110_00000000</entry>
<entry>10101010101010100</entry>
</row>
<row>
<entry>512</entry>
<entry>1111111110_000000000</entry>
<entry>1010101010101010100</entry>
</row>
<row>
<entry>1024</entry>
<entry>11111111110_000000000</entry>
<entry>101010101010101010100</entry>
</row>
<row>
<entry>2048</entry>
<entry>111111111110_0000000000</entry>
<entry>10101010101010101010100</entry>
</row>
<row>
<entry>4096</entry>
<entry>1111111111110_00000000000</entry>
<entry>1010101010101010101010100</entry>
</row>
<row>
<entry namest="1" nameend="3" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0087" num="0086">Note that γ<sup>1 </sup>and γ only differ in how the bits in the codeword are arranged. The “_” in γ<sup>1 </sup>codewords is not part of the codeword, it is just to make them easier to read by separating the prefix from the counter. The worst case is for counts of 2 which requires 3 bits. For the three cases (counts go across lines, 64×64 code-blocks with groups of 4 lines, and 1024×4 code-blocks with groups of four lines), the total number of bits are 6,145 bits; 6,160 bits; and 6,400 bits, are required, respectively.</p>
<p id="p-0088" num="0087">Table 5 is one embodiment of a code for counts 1 . . . 4096 where the longest codeword is 16-bits. Counts of 1, 2, 3, 4 or 5 are represented with 1, 2, 4, 5 and 5 bits respectively. Counts of 6 . . . 21 are represented with 8 bits. Counts of 22 . . . 4096 are represented with 16-bits. Counts of 3 and 6 are the worst case. For the three cases (counts go across lines, 64×64 code-blocks with groups of 4 lines, and 1024×4 code-blocks with groups of 4 lines), the total number of bits are 5,463 bits; 5,478 bits; and 5,718 bits.</p>
<p id="p-0089" num="0088">
<tables id="TABLE-US-00009" num="00009">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" rowsep="1">TABLE 5</entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>Optimal Variable Length Code for Counts</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="offset" colwidth="35pt" align="left"/>
<colspec colname="1" colwidth="21pt" align="center"/>
<colspec colname="2" colwidth="161pt" align="center"/>
<tbody valign="top">
<row>
<entry/>
<entry>count</entry>
<entry>codeword</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="offset" colwidth="35pt" align="left"/>
<colspec colname="1" colwidth="21pt" align="char" char="."/>
<colspec colname="2" colwidth="161pt" align="center"/>
<tbody valign="top">
<row>
<entry/>
<entry>1</entry>
<entry>0</entry>
</row>
<row>
<entry/>
<entry>2</entry>
<entry>01</entry>
</row>
<row>
<entry/>
<entry>3</entry>
<entry>1100</entry>
</row>
<row>
<entry/>
<entry>4</entry>
<entry>1101_0</entry>
</row>
<row>
<entry/>
<entry>5</entry>
<entry>1101_1</entry>
</row>
<row>
<entry/>
<entry>6</entry>
<entry>1110_0000</entry>
</row>
<row>
<entry/>
<entry>7</entry>
<entry>1110_0001</entry>
</row>
<row>
<entry/>
<entry>. . .</entry>
<entry>. . .</entry>
</row>
<row>
<entry/>
<entry>21</entry>
<entry>1110_1111</entry>
</row>
<row>
<entry/>
<entry>22</entry>
<entry>1111_0000_0000_0000</entry>
</row>
<row>
<entry/>
<entry>23</entry>
<entry>1111_0000_0000_0001</entry>
</row>
<row>
<entry/>
<entry>. . .</entry>
<entry>. . .</entry>
</row>
<row>
<entry/>
<entry>4096</entry>
<entry>1111_1111_1110_1010</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0090" num="0089">If using variable length codes with hardware, accessing both a run count and a skip count during the same clock cycle may be desirable. In one embodiment, the memory is larger than the minimum size by one word (e.g., 16 bits) so that flushing is simple. For example, with 16 bit words, run counts use 163 bits. Therefore, the last word uses only 3 bits. This requires padding with 13 bits to complete a word. Skip counts use 85 bits. Therfore, the last word uses only 5 bits. This requires padding with 11 bits to complete a word. If</p>
<p id="p-0091" num="0090">
<maths id="MATH-US-00001" num="00001">
<math overflow="scroll">
<mrow>
  <mrow>
    <mi>memory</mi>
    <mo>⁢</mo>
    <mstyle>
      <mspace width="0.8em" height="0.8ex"/>
    </mstyle>
    <mo>⁢</mo>
    <mi>size</mi>
  </mrow>
  <mo>≥</mo>
  <mrow>
    <mo>(</mo>
    <mrow>
      <mfrac>
        <mrow>
          <mn>163</mn>
          <mo>+</mo>
          <mn>13</mn>
        </mrow>
        <mn>16</mn>
      </mfrac>
      <mo>+</mo>
      <mfrac>
        <mrow>
          <mn>85</mn>
          <mo>+</mo>
          <mn>11</mn>
        </mrow>
        <mn>16</mn>
      </mfrac>
    </mrow>
    <mo>)</mo>
  </mrow>
</mrow>
</math>
</maths>
<br/>
or 17, padding of run and skip counts can be independent. If the size is 16, there is one word with both run counts and skip counts, with padding in between. <figref idref="DRAWINGS">FIG. 30</figref> illustrates an example of a 16 bit word having both run counts and skip counts.
</p>
<p id="p-0092" num="0091"><figref idref="DRAWINGS">FIG. 2B</figref> illustrates a memory for a variable length run and skip counts. This memory structure allows starting a run count from one side (<b>201</b>) of memory and skip counts from the other side (<b>202</b>) of memory. One side <b>201</b> of memory may be the beginning or the end, with the other side (<b>202</b>) being the end or beginning, respectively. This allows for simultaneously decoding a run count and a skip count in parallel because the start of both 1 run and 1 skip variable word is known at the same time, instead of decoding a run count first, determining its length, and then decoding a skip count. If they were serial (run-skip-run, etc.), one at a time would be known (as one would have to be decoded to find the other).</p>
<p id="p-0093" num="0092">Note that separate skip count and run count decoders may be used to decode the information in the memory shown in <figref idref="DRAWINGS">FIG. 2B</figref>. Alternatively, a single decoder could be shared by both.</p>
<p id="h-0009" num="0000">Hardware for Context Model</p>
<p id="p-0094" num="0093">The context model may be implemented in hardware. In hardware, one goal is to generate the next context as soon as possible so the MQ coder is not idle.</p>
<p id="h-0010" num="0000">Memory Organization</p>
<p id="p-0095" num="0094"><figref idref="DRAWINGS">FIGS. 3A-D</figref> illustrate the neighborhood coefficients and memory organization for embodiments of a context model. The context model for individual coefficients is at most based on a 3×3 neighborhood as shown in <figref idref="DRAWINGS">FIG. 3A</figref>. In one embodiment, four bits are handled at the same time. In such a case, the context model for groups of four coefficients <b>311</b>-<b>314</b> is at most based on a 3×6 neighborhood as shown in <figref idref="DRAWINGS">FIG. 3B</figref>. It is often preferable for memory accesses to hardware to be dealing with data grouped in powers of two. Therefore, the region that is based on a power of two that would contain the 3×6 region is a 4×8 region. <figref idref="DRAWINGS">FIG. 3C</figref> illustrates a 3×6 neighborhood being a subset of a 4×8 region of coefficients. Access to the entire 4×8 region of <figref idref="DRAWINGS">FIG. 3C</figref> may be performed as separate accesses that may or may not be to the same memory. <figref idref="DRAWINGS">FIG. 3D</figref> illustrates a 4×8 region that is divided into four 2×4 regions <b>301</b>-<b>304</b> which are each stored in a different memories for parallel, random access. This memory structure allows everything needed to determine contents from a group of coefficients to be read from memory at once, instead of sequentially. That is, the entire 4×8 block of coefficient information may be accessed at once.</p>
<p id="p-0096" num="0095"><figref idref="DRAWINGS">FIG. 4</figref> shows one embodiment of the significance memory organization for random access for a 16×16 code-block. One implementation may handle other sizes, including, but not limited to, 32×32 and 64×64. Referring to <figref idref="DRAWINGS">FIG. 4</figref>, each coefficient has been assigned to one of four memories (A, B, C or D). Certain groups (two rows along the top and two rows along the bottom) are half the size of the other groups. This is because in <figref idref="DRAWINGS">FIG. 3D</figref>, the top two rows are outside of the code-block (off the edge) for the first row of code-blocks. There is a similar boundary condition of the bottom of the code-blocks.</p>
<p id="p-0097" num="0096">In one embodiment, these memories store one bit per coefficient for significance state (8 bits total per address). In an alternative embodiment, these memories store two bits per coefficient for significance state and sign (16 bits total per address). In still another embodiment, these memories store the entire coefficient (8N bits if N is the size of one coefficient). In an alternative embodiment, if the entire coefficient is not stored in these memories, an additional single memory with one address per coefficient may be used.</p>
<p id="p-0098" num="0097">The following Verilog code is one embodiment of a procedure to convert two 6-bit address inputs (“x” and “y”) from control logic in the context model (for the 64×64 code-blocks) into a 7-bit address output to memory (“addr”) and a 2-bit “bank” select to indicate memory “A”, “B”, “C” or “D”.</p>
<p id="p-0099" num="0098">
<tables id="TABLE-US-00010" num="00010">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="21pt" align="left"/>
<colspec colname="1" colwidth="196pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>module makeAddress(x, y, addr, bank);</entry>
</row>
<row>
<entry/>
<entry>  input [5:0] x;   /*x has bits 5. . .0, where 5 is MSB</entry>
</row>
<row>
<entry/>
<entry>  input [5:0] y;</entry>
</row>
<row>
<entry/>
<entry>  output [6:0] addr;</entry>
</row>
<row>
<entry/>
<entry>  output [1:0] bank;</entry>
</row>
<row>
<entry/>
<entry>  wire [5:0] yp2;</entry>
</row>
<row>
<entry/>
<entry>  assign yp2 = y + 2;</entry>
</row>
<row>
<entry/>
<entry>  assign addr = {yp2[5:3], x[5:2]};</entry>
</row>
<row>
<entry/>
<entry>  assign bank = {yp2[2], x[1]};</entry>
</row>
<row>
<entry/>
<entry>endmodle</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0100" num="0099">The first assign statement above sets the offset for the boundary. In other words, the offset “assign yp2=y+2” is used for proper alignment of groups of four as shown in <figref idref="DRAWINGS">FIG. 4</figref>. The second assign statement above sets the address to bits <b>5</b> . . . <b>3</b> of the input y plus the offset concatenated with bits <b>5</b> . . . <b>2</b> of input x as the lower poriton of the number. The third assign statement above sets the bank equal to the bit <b>2</b> of the input y plus the offset concatenated with bit <b>1</b> of input x.</p>
<p id="h-0011" num="0000">Significance Propagation Pass</p>
<p id="p-0101" num="0100"><figref idref="DRAWINGS">FIG. 5</figref> shows one embodiment of the memories and registers used in the significance propagation pass for random access. Referring to <figref idref="DRAWINGS">FIG. 5</figref>, address A is input to memory A to produce data output, which is also stored in register <b>501</b>. In response to address B, memory B outputs data which is also stored in register <b>502</b>. Similarly, memory C outputs data in response to address C, where the output is also stored in register <b>503</b>. Lastly, memory D outputs data in response to address D and also stores the data in register <b>504</b>. In one embodiment, the outputs of each of the memories A-D is a 2×4 region which together create a 4×8 region (e.g., region <b>601</b> of <figref idref="DRAWINGS">FIG. 6</figref>).</p>
<p id="p-0102" num="0101">All of the outputs of the memories and registers in <figref idref="DRAWINGS">FIG. 5</figref> together provide a 6×6 region of significance bits. Note this could be significance state and sign or the actual coefficients in alternative embodiments. In other words, the data being used out of the memories A-D in parallel is combined with the data read outs from the memories A-D in the previous cycle that had been stored in registers <b>501</b>-<b>504</b>. This region of significance bits plus feedback from the context model is enough to determine in which pass a 4×4 region of coefficients is.</p>
<p id="p-0103" num="0102"><figref idref="DRAWINGS">FIG. 6</figref> illustrates the significance state from memory and stored in registers for random access. Referring to <figref idref="DRAWINGS">FIG. 6</figref>, region <b>601</b> illustrates a 4×8 region that is read from memory. Region <b>602</b> illustrates a 3×6 region that is read from memories A-D and is used for context modeling. Region <b>603</b> illustrates a 3×6 region that is stored in registers <b>501</b>-<b>504</b> and is used in context modeling. Region <b>604</b> illustrates a 4×4 region of coefficients that are being processed. <figref idref="DRAWINGS">FIG. 6</figref> also shows exemplary 2×4 portions of the 8×8 block that may come from memory locations of memories A-D and registers <b>501</b>-<b>504</b>.</p>
<p id="p-0104" num="0103">One embodiment of address generation logic for the significance propagation pass is set forth in the following pseudo code. Note that the addressing is not dependent on the data, and zero data is provided at boundaries.</p>
<p id="p-0105" num="0104">
<tables id="TABLE-US-00011" num="00011">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>address_A_y = 0</entry>
</row>
<row>
<entry/>
<entry>address_B_y = 0</entry>
</row>
<row>
<entry/>
<entry>address_C_y = 0</entry>
</row>
<row>
<entry/>
<entry>address_D_y = 0</entry>
</row>
<row>
<entry/>
<entry>for y = 0 to 60 step 4</entry>
</row>
<row>
<entry/>
<entry>  address_A_x = 0</entry>
</row>
<row>
<entry/>
<entry>  address_C_x = 0</entry>
</row>
<row>
<entry/>
<entry>  read memory A (will be registered next)</entry>
</row>
<row>
<entry/>
<entry>  read memory C (will be registered next)</entry>
</row>
<row>
<entry/>
<entry>  assert clear for memory B register (will be cleared next)</entry>
</row>
<row>
<entry/>
<entry>  assert clear for memory D register (will be cleared next)</entry>
</row>
<row>
<entry/>
<entry>for x = 0 to 60 step 4</entry>
</row>
<row>
<entry/>
<entry>  address_A_x = x+4</entry>
</row>
<row>
<entry/>
<entry>  address_B_x = x</entry>
</row>
<row>
<entry/>
<entry>  address_C_x = x+4</entry>
</row>
<row>
<entry/>
<entry>  address_D_x = x</entry>
</row>
<row>
<entry/>
<entry>  if x &lt; 60 then</entry>
</row>
<row>
<entry/>
<entry>    read memory A (will be registered next)</entry>
</row>
<row>
<entry/>
<entry>    read memory C (will be registered next)</entry>
</row>
<row>
<entry/>
<entry>  else</entry>
</row>
<row>
<entry/>
<entry>    use ”all bits zero” for memory A output</entry>
</row>
<row>
<entry/>
<entry>    use ”all bits zero” for memory B output</entry>
</row>
<row>
<entry/>
<entry>  read memory B(will be registered next)</entry>
</row>
<row>
<entry/>
<entry>  read memory D(will be registered next)</entry>
</row>
<row>
<entry/>
<entry>  process 4×4 block of coeffcients x...x+3, y...y+3</entry>
</row>
<row>
<entry/>
<entry>if y AND 4 == 0</entry>
</row>
<row>
<entry/>
<entry>  address_A_y = address_A_y + 8</entry>
</row>
<row>
<entry/>
<entry>  address_B_y = address_B_y + 8</entry>
</row>
<row>
<entry/>
<entry>else</entry>
</row>
<row>
<entry/>
<entry>  address_C_y = address_C_y + 8</entry>
</row>
<row>
<entry/>
<entry>  address_D_y = address_D_y + 8</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0106" num="0105">For processing 4×4 blocks, runs of bits in the same pass may be handled together. If there are N coefficients in a row in the refinement pass, the following pseudo code can be used to process them:</p>
<p id="p-0107" num="0106">
<tables id="TABLE-US-00012" num="00012">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="56pt" align="left"/>
<colspec colname="1" colwidth="161pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>if state is not REFINE then</entry>
</row>
<row>
<entry/>
<entry>  ri = ri + 1</entry>
</row>
<row>
<entry/>
<entry>  r_run[ri] = N</entry>
</row>
<row>
<entry/>
<entry>  r_skip[ri] = 0</entry>
</row>
<row>
<entry/>
<entry>  state = REFINE</entry>
</row>
<row>
<entry/>
<entry>else</entry>
</row>
<row>
<entry/>
<entry>  r_run[ri] = r_run[ri] + N</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
<br/>
Note that this code is similar to the code described above except “N” has replaced 1 to signify that N coefficients are being processed instead of 1.
</p>
<p id="p-0108" num="0107">If there are N coefficients in a row in the cleanup pass, the following pseudo code depicts one embodiment of a process for processing coefficients:</p>
<p id="p-0109" num="0108">
<tables id="TABLE-US-00013" num="00013">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="56pt" align="left"/>
<colspec colname="1" colwidth="161pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>if state is not CLEANUP then</entry>
</row>
<row>
<entry/>
<entry>  ci = ci + 1</entry>
</row>
<row>
<entry/>
<entry>  c_run[ci] = N</entry>
</row>
<row>
<entry/>
<entry>  c_skip[ci] = 0</entry>
</row>
<row>
<entry/>
<entry>  state = CLEANUP</entry>
</row>
<row>
<entry/>
<entry>else</entry>
</row>
<row>
<entry/>
<entry>  c_run[ci] = c_run[ci] + N</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0110" num="0109"><figref idref="DRAWINGS">FIG. 7</figref> is a block diagram of one embodiment of significance propagation pass logic. In one embodiment, this logic is in bit modeling MQ-coders <b>2908</b><sub>1-N </sub>of <figref idref="DRAWINGS">FIG. 29</figref>. The pass for each coefficient is for a 4×4 region represented as three bits per coefficient: significance propagation or other, refinement or other, and cleanup or other. By controlling the access operation of the memory A-D in <figref idref="DRAWINGS">FIG. 5</figref>, a 4×4 block is retrieved from memory and the significance propagation pass is performed. Looking at each 4×4 block, the runs in the various passes are identified and any coefficient in the significance pass is to be coded, while runs and skip counts for the refinement and clean up passes are identified for processing one run at a time. When the previous bit in the block (via the scan order) (or a previous codeblock if starting a new codeblock) is a significance propagation bit and the current state is not significance propagation, a new run is started. In such a case, the index is incremented in the table storing run and skip counts (e.g., set skip to zero, set run to the first value). Both tables of run and skip counts are incremented in this manner while processing the 4×4 block. If the previous bit in the 4×4 block was in the refinement or cleanup passes and more such data follows, then the count of the current run is incremented. Other sized regions may be used, including, for example, a 4×N region, where N is a power of two.</p>
<p id="p-0111" num="0110">Referring to <figref idref="DRAWINGS">FIG. 7</figref>, a significant state <b>701</b> for an 8×8 region is input to logic <b>702</b> which determines the pass. <figref idref="DRAWINGS">FIG. 31</figref> illustrates an exemplary 8×8 region. The significance state <b>701</b> may comprise information that indicates, for example, there are N coefficients in a row in a refinement pass. Such information may be accessed from a table, as described above. Determine pass logic <b>702</b> looks at the 16 3×3 regions in the center 6×6 region of the 8×8 region. Coefficients A . . . I represent the first 3×3 region. <figref idref="DRAWINGS">FIG. 32</figref> is a diagram of one embodiment of determine pass logic <b>702</b>. The logic in <figref idref="DRAWINGS">FIG. 32</figref> is replicated 16 times, one for each coefficient in the 4×4 block. Note that the regions may be other than 3×3 regions and the number of regions processed may be greater than or less than 16 at a time.</p>
<p id="p-0112" num="0111">Referring to <figref idref="DRAWINGS">FIG. 32</figref>, all bits of coefficients A-C are input to OR gate <b>3201</b>. All bits of coefficients D and F are coupled to inputs of OR gate <b>3202</b>. All bits of coefficients G-I are coupled to inputs of OR gate <b>3203</b>. The outputs of OR gates <b>3201</b>-<b>3203</b> are coupled to inputs of OR gate <b>3204</b>. The output of OR gate <b>3204</b> is coupled to an input of inverter <b>3206</b> and an input of AND gate <b>3208</b>. Coefficient E represents the 16 bit output of refinement signals <b>704</b> and is coupled to an input of inverter <b>3205</b>, the output of which is coupled to the other input of AND gate <b>3208</b> and an input of AND gate <b>3207</b>. The output of AND gate <b>3208</b> is the significance propagation signals <b>703</b>. The output of inverter <b>3206</b> is coupled to the other input of AND gate <b>3207</b>. The output of AND gate <b>3207</b> is the cleanup signals <b>705</b>.</p>
<p id="p-0113" num="0112">In operation, if any of the significance state bits E are 0, then the output of AND gates <b>3208</b> corresponding to those bit positions, and thus, the significance propagation signals <b>704</b>, are going to be 1's if the significance state is 1 for any of coefficients A-D or F-I. Similarly, if any of the significance state bits E are 0, then the output of AND gate <b>3207</b> corresponding those bit positions, and thus the cleanup signals <b>705</b>, are going to be 1's if the significance state bits are all zero for coefficients A-D or F-I.</p>
<p id="p-0114" num="0113">As a result of the determination, logic <b>702</b> asserts either significant propagation signals <b>703</b>, refinement pass signals <b>704</b>, or clean up pass signals <b>705</b>. In one embodiment, each of signals <b>703</b>-<b>705</b> is 16 bits wide. For each corresponding bit in signals <b>703</b>, <b>704</b>, and <b>705</b>, only one bit may be 1 and 2 must be 0. Thus, there are three possibilities at 16 locations. Each of the outputs of logic <b>702</b> is coupled to one input of selection logic (e.g., multiplexer (MUX)) <b>707</b>.</p>
<p id="p-0115" num="0114">Selection logic <b>707</b> generates three pass bits for the current coefficient indicating the pass for the current coefficient and sends the pass bits to control logic <b>709</b>. Only one of these pass bits is asserted in response to count signal <b>708</b> output from control <b>709</b>. Count signal <b>708</b> indicates which of the 16 coefficients in the 4×4 block is currently by processed. When handling refinement bit runs and cleanup bit runs, count signal <b>708</b> may be incremented by a number greater than one. Thus, of the 16 bits in each of the outputs of determine pass logic <b>702</b>, the bit in each of the three outputs corresponding to that coefficient is output.</p>
<p id="p-0116" num="0115">The refinement pass signals <b>704</b> and clean up pass signals <b>705</b> are input to mask <b>705</b> with feedback count signal <b>708</b>. Count signal <b>708</b> is the current coefficient position in the 4×4 region, e.g., 0 . . . 15. In response to these inputs, mask <b>705</b> masks what has already been done, as indicated by count <b>708</b>, including only coefficients that are not being coded yet. For example, if three coefficients have already been processed, mask <b>705</b> masks the three signal lines of each of the refinement and cleanup outputs (<b>704</b> and <b>705</b>).</p>
<p id="p-0117" num="0116">Mask <b>705</b> also generates 2 outputs to priority encoder <b>706</b> representing signal <b>704</b> and <b>705</b> with certain signals masked to one (in one embodiment). These outputs of mask <b>705</b> are masked refinement and masked cleanup indications (e.g., signals).</p>
<p id="p-0118" num="0117">In response to the two inputs, priority encoder <b>706</b> finds the next non-refinement bit (or coefficient) and the next non-cleanup bit for the significance propagation pass and inputs these to control logic <b>709</b>. In one embodiment, priority encoder <b>706</b> is a zero-finding priority encoder. In so doing, priority encoder <b>706</b> converts the current position of the bit (or coefficient) in the codeblock into a count of leading zeros. In one embodiment, this is performed using a truth table such as</p>
<p id="p-0119" num="0118">
<tables id="TABLE-US-00014" num="00014">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="offset" colwidth="56pt" align="left"/>
<colspec colname="1" colwidth="35pt" align="left"/>
<colspec colname="2" colwidth="126pt" align="center"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="2" align="center" rowsep="1"/>
</row>
<row>
<entry/>
<entry>Input</entry>
<entry>Output</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="2" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>1 x x x x x</entry>
<entry>0</entry>
</row>
<row>
<entry/>
<entry>0 1 x x x x</entry>
<entry>1</entry>
</row>
<row>
<entry/>
<entry>0 0 1 x x x</entry>
<entry>2</entry>
</row>
<row>
<entry/>
<entry>.</entry>
<entry>.</entry>
</row>
<row>
<entry/>
<entry>.</entry>
<entry>.</entry>
</row>
<row>
<entry/>
<entry>.</entry>
<entry>.</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0120" num="0119">Mask <b>705</b>, priority encoder <b>706</b>, and selection logic <b>707</b> may comprise a processing unit that receives outputs from determine pass unit <b>702</b> and generates outputs indicating the next non-refinement coefficient and next non-cleanup coefficient and the pass for the current coefficient.</p>
<p id="p-0121" num="0120">In response to its inputs, control logic <b>709</b> generates a refinement next index, a refinement run indication, a refinement skip indication, a cleanup next index, a cleanup run indication, a cleanup skip indication, and a significant propagation indication. The inputs to control logic are:</p>
<p id="p-0122" num="0121">
<tables id="TABLE-US-00015" num="00015">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="42pt" align="left"/>
<colspec colname="1" colwidth="175pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>  next non-refinement bit position ”R”</entry>
</row>
<row>
<entry/>
<entry>  next non-cleanup bit position ”C”</entry>
</row>
<row>
<entry/>
<entry>If R &gt; count then</entry>
</row>
<row>
<entry/>
<entry>  refinement run = R-count</entry>
</row>
<row>
<entry/>
<entry>  refinement skip = 0</entry>
</row>
<row>
<entry/>
<entry>  clean-up run = 0</entry>
</row>
<row>
<entry/>
<entry>  clean-up skip = R-count</entry>
</row>
<row>
<entry/>
<entry>  refinement next index =1</entry>
</row>
<row>
<entry/>
<entry>  cleanup next index =0</entry>
</row>
<row>
<entry/>
<entry>  signif prop =0</entry>
</row>
<row>
<entry/>
<entry>Else if C &gt; count</entry>
</row>
<row>
<entry/>
<entry>  refinement run = 0</entry>
</row>
<row>
<entry/>
<entry>  refinement skip = C-count</entry>
</row>
<row>
<entry/>
<entry>  clean-up run = C-count</entry>
</row>
<row>
<entry/>
<entry>  clean-up skip = 0</entry>
</row>
<row>
<entry/>
<entry>  refinement next index = 0</entry>
</row>
<row>
<entry/>
<entry>  clean-up next index =1</entry>
</row>
<row>
<entry/>
<entry>  signif prop = 0</entry>
</row>
<row>
<entry/>
<entry>else</entry>
</row>
<row>
<entry/>
<entry>  refinement run = 0</entry>
</row>
<row>
<entry/>
<entry>  refinement skip = 1</entry>
</row>
<row>
<entry/>
<entry>  clean-up run = 0</entry>
</row>
<row>
<entry/>
<entry>  clean-up skip = 1</entry>
</row>
<row>
<entry/>
<entry>  refinement next index = 0</entry>
</row>
<row>
<entry/>
<entry>  clean-up next index =0</entry>
</row>
<row>
<entry/>
<entry>  signif prop = 1</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0123" num="0122">The following pseudo code describes the operation of the significance propagation pass logic described in <figref idref="DRAWINGS">FIG. 7</figref>.</p>
<p id="p-0124" num="0123">
<tables id="TABLE-US-00016" num="00016">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="21pt" align="left"/>
<colspec colname="1" colwidth="196pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>count = 0</entry>
</row>
<row>
<entry/>
<entry>while (count &lt; 16)</entry>
</row>
<row>
<entry/>
<entry>  mask = (1 &lt;&lt; count)−1</entry>
</row>
<row>
<entry/>
<entry>  refinement_masked = refinement | mask</entry>
</row>
<row>
<entry/>
<entry>  use priority encoder to find next non-refinement bit</entry>
</row>
<row>
<entry/>
<entry>  cleanup_mask = clean_up | mask</entry>
</row>
<row>
<entry/>
<entry>  use priority encoder to find next non-cleanup bit</entry>
</row>
<row>
<entry/>
<entry>  if current bit is in significance propagation pass</entry>
</row>
<row>
<entry/>
<entry>    process coefficient as significance propagation</entry>
</row>
<row>
<entry/>
<entry>    count = count + 1</entry>
</row>
<row>
<entry/>
<entry>  else if current bit in refinement pass</entry>
</row>
<row>
<entry/>
<entry>    N = ”next non-refinement bit” − count</entry>
</row>
<row>
<entry/>
<entry>    process N bits as refinement pass</entry>
</row>
<row>
<entry/>
<entry>    count = count + N</entry>
</row>
<row>
<entry/>
<entry>  else</entry>
</row>
<row>
<entry/>
<entry>    N = ”next non-cleanup bit” − count</entry>
</row>
<row>
<entry/>
<entry>    process N bits as cleanup pass</entry>
</row>
<row>
<entry/>
<entry>    count = count + N</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0125" num="0124">Note that the significance states are updated from the MQ decoder (and MQ encoder or coefficient values when encoding) anytime a “1” coefficient is coded in the significance propagation pass.</p>
<p id="p-0126" num="0125">Assuming the context model operates in one clock cycle and the MQ coder operates in one clock cycle, two clock cycles are required when there is feedback. <figref idref="DRAWINGS">FIG. 8</figref> illustrates an example of performance on a 4×4 block, illustrating the potentially worst case scenario. Eight context models and MQ coders operating in parallel at twice the component clock rate should be able to decode 7 bitplanes per coefficient (8×2/2.25 ≈7). Without skipping in the significance propagation pass, the worst case performance reduces to at most 5.5 bitplanes per coefficient. Without skipping in any pass, the worst case performance reduces to at most 4 bitplanes per coefficient.</p>
<p id="h-0012" num="0000">Significance Propagation Pass Skipping in Software</p>
<p id="p-0127" num="0126">In software, parallel access from many memories is impractical. Instead, in one embodiment, the code-block is divided into 4×4 groups of coefficients. For each group, a count is maintained of the number of bits that are significant. In such a case, the maximum memory required is 256×5 bits. Blocks of coefficients that are all in the refinement pass have a count of 16. Blocks that have count 0 may be all cleanup and just need to have their neighbors checked to see if they are all cleanup.</p>
<p id="h-0013" num="0000">Cleanup and Refinement Passes</p>
<p id="p-0128" num="0127">For the cleanup pass, addressing is data dependent and may be generated using the following psuedo code. The address x,y of the next coefficient in the cleanup pass is input.</p>
<p id="p-0129" num="0128">
<tables id="TABLE-US-00017" num="00017">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="21pt" align="left"/>
<colspec colname="1" colwidth="196pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>module cleanupAddress(x, y, addrA, addrB, addrC, addrD)</entry>
</row>
<row>
<entry/>
<entry>  input [5:0] x;</entry>
</row>
<row>
<entry/>
<entry>  input [5:0] y;</entry>
</row>
<row>
<entry/>
<entry>  output [6:0] addrA;</entry>
</row>
<row>
<entry/>
<entry>  output [6:0] addrB;</entry>
</row>
<row>
<entry/>
<entry>  output [6:0] addrC;</entry>
</row>
<row>
<entry/>
<entry>  output [6:0] addrD;</entry>
</row>
<row>
<entry/>
<entry>  wire [5:0] yp2;</entry>
</row>
<row>
<entry/>
<entry>  wire [4:0] ax;</entry>
</row>
<row>
<entry/>
<entry>  wire [4:0] bx;</entry>
</row>
<row>
<entry/>
<entry>  wire [4:0] cx;</entry>
</row>
<row>
<entry/>
<entry>  wire [4:0] dx;</entry>
</row>
<row>
<entry/>
<entry>  assign yp2 = y+2;</entry>
</row>
<row>
<entry/>
<entry>  assign ax = (x[1:0] == 3) ? x[5:2] + 1 : x[5:2];</entry>
</row>
<row>
<entry/>
<entry>  assign cx = (x[1:0] == 3) ? x[5:2] + 1 : x[5:2];</entry>
</row>
<row>
<entry/>
<entry>  assign bx = (x[1:0] == 0) ? x[5:2] − 1 : x[5:2];</entry>
</row>
<row>
<entry/>
<entry>  assign dx = (x[1:0] == 0) ? x[5:2] − 1 : x[5:2];</entry>
</row>
<row>
<entry/>
<entry>  assign ay = y[2] ? yp2[5:3] + 1 : yp2[5:3];</entry>
</row>
<row>
<entry/>
<entry>  assign by = y[2] ? yp2[5:3] + 1 : yp2[5:3];</entry>
</row>
<row>
<entry/>
<entry>  assign cy = yp2[5:3];</entry>
</row>
<row>
<entry/>
<entry>  assign dy = yp2[5:3];</entry>
</row>
<row>
<entry/>
<entry>  assign addrA = {ay, ax};</entry>
</row>
<row>
<entry/>
<entry>  assign addrB = {by, bx};</entry>
</row>
<row>
<entry/>
<entry>  assign addrC = {cy, cx};</entry>
</row>
<row>
<entry/>
<entry>  assign addrD = {dy, dx};</entry>
</row>
<row>
<entry/>
<entry>endmodule</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0130" num="0129">The addressing used for the cleanup pass may also be used for the refinement pass. However, a smaller neighborhood is sufficient for the refinement pass.</p>
<p id="p-0131" num="0130">
<tables id="TABLE-US-00018" num="00018">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="42pt" align="left"/>
<colspec colname="1" colwidth="175pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>If (yp2[1:0] == 1) or (yp2[1:0] == 2) then</entry>
</row>
<row>
<entry/>
<entry>  if yp2[2] == 1 then</entry>
</row>
<row>
<entry/>
<entry>    just read memories C and D</entry>
</row>
<row>
<entry/>
<entry>  else</entry>
</row>
<row>
<entry/>
<entry>    just read memories A and B</entry>
</row>
<row>
<entry/>
<entry>else</entry>
</row>
<row>
<entry/>
<entry>  read memories A, B, C and D</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
<br/>
Sequential Addressing for All Passes
</p>
<p id="p-0132" num="0131">With sequential addressing for all passes, a simpler memory organization using two memories can be used. <figref idref="DRAWINGS">FIG. 9</figref> illustrates one embodiment of an organization of a significance memory for sequential accesses of 4×4 regions of a code-block. Referring to <figref idref="DRAWINGS">FIG. 9</figref>, each 4×4 region is assigned to one of two memories A or B. This allows parallel access for everything needed for a 16×16 block. Note that the first code-blocks are only half because the offset is similar to that described above and only two rows of coefficients are relevant when processing 8×8 blocks such as in <figref idref="DRAWINGS">FIG. 6</figref> where the top two rows do not include actual data being processed.</p>
<p id="p-0133" num="0132"><figref idref="DRAWINGS">FIG. 10</figref> illustrates one embodiment of the memories and registers of a memory path used for the significance propagation pass. Referring to <figref idref="DRAWINGS">FIG. 10</figref>, memory A in response to address A generates data output. Similarly, memory B generates data output in response to address B. A 2×2 crossbar <b>1003</b> has inputs coupled to the outputs of memories A and B. One output of crossbar is coupled to register <b>1001</b> and one output of the memory path. The other output of crossbar <b>1003</b> is coupled to register <b>1002</b> and the other output of the memory path. Thus, the outputs of memories A and B may be stored in either registers <b>1001</b> and <b>1002</b> and on either output. Data read out from memories A and B is for a 4×4 region. Registers <b>1001</b> and <b>1002</b> store a 5×4 region. When registers are loaded, the rightmost 1×4 column is moved to the leftmost 1×4 column and the other columns are loaded from the memory data output. Crossbar <b>1003</b> controls the output of the data from memories A and B to the proper outputs of the memory path via “ping-ponging” data into the outputs as data is processed row after row.</p>
<p id="p-0134" num="0133"><figref idref="DRAWINGS">FIG. 11</figref> shows how memory and registers of <figref idref="DRAWINGS">FIG. 10</figref> are used to provide the proper region for context model operation. Referring to <figref idref="DRAWINGS">FIG. 11</figref>, region <b>1102</b> is a 4×4 region of coefficients to be processed. Region <b>1101</b> represents a 5×6 region stored in registers <b>1001</b> and <b>1002</b> used for context modeling (with the 5×1 regions above and below the 5×6 region being ignored). Region <b>1103</b> is a 4×8 region from memory. Region <b>1104</b> is a 1×6 region from memory used for context modeling.</p>
<p id="p-0135" num="0134">One embodiment of the pseudo code for addressing memory for all three coding passes is as follows.</p>
<p id="p-0136" num="0135">
<tables id="TABLE-US-00019" num="00019">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>address_A_y = 0</entry>
</row>
<row>
<entry/>
<entry>address_B_y = 0</entry>
</row>
<row>
<entry/>
<entry>for y = 0 to 60 step 4</entry>
</row>
<row>
<entry/>
<entry>  address_A_x = 0</entry>
</row>
<row>
<entry/>
<entry>  address_B_x = 0</entry>
</row>
<row>
<entry/>
<entry>  clear registers</entry>
</row>
<row>
<entry/>
<entry>  read memory A (will be registered next)</entry>
</row>
<row>
<entry/>
<entry>  read memory B (will be registered next)</entry>
</row>
<row>
<entry/>
<entry>  for x = 0 to 60 step 4</entry>
</row>
<row>
<entry/>
<entry>    address_A_x = x+4</entry>
</row>
<row>
<entry/>
<entry>    address_B_x = x+4</entry>
</row>
<row>
<entry/>
<entry>    if x &lt; 60 then</entry>
</row>
<row>
<entry/>
<entry>      read memory A (will be registered next)</entry>
</row>
<row>
<entry/>
<entry>      read memory B (will be registered next)</entry>
</row>
<row>
<entry/>
<entry>    else</entry>
</row>
<row>
<entry/>
<entry>      use ”all bits zero” for memory A output</entry>
</row>
<row>
<entry/>
<entry>      use ”all bits zero” for memory B output</entry>
</row>
<row>
<entry/>
<entry>      process 4×4 block of coeffcients x...x+3, y...y+3</entry>
</row>
<row>
<entry/>
<entry>    if y AND 4 == 0</entry>
</row>
<row>
<entry/>
<entry>      address_A_y = address_A_y + 8</entry>
</row>
<row>
<entry/>
<entry>    else</entry>
</row>
<row>
<entry/>
<entry>      address_B_y = address_B_y + 8</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0137" num="0136">The memory contains state to indicate the correct pass for the refinement and cleanup passes. The state may be 2 bits per coefficient to distinguish between the three states (significance propagation, clean-up and refinement).</p>
<p id="p-0138" num="0137">During the significance propagation pass, in parallel for all 16-coefficients, the state is set to refinement for all significant coefficients and to cleanup for all non-significant coefficients. As the processing on the 16-coefficients continues, the state of any coefficients that are in the significance propagation pass is changed from cleanup to significance propagation. The state may be 1 bit per coefficient, referred to herein as the “pass” bit. In one embodiment, the significance state and the pass bit are used to determine the correct pass. Table 6 below illustrates use of the pass bit. Since 1 bit per coefficient is used, this uses less memory than the run and skip count methods described herein.</p>
<p id="p-0139" num="0138">
<tables id="TABLE-US-00020" num="00020">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" rowsep="1">TABLE 6</entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>Using “Pass” Bit</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="offset" colwidth="49pt" align="left"/>
<colspec colname="1" colwidth="56pt" align="center"/>
<colspec colname="2" colwidth="112pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>significance state,</entry>
<entry/>
</row>
<row>
<entry/>
<entry>pass bit</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="4">
<colspec colname="1" colwidth="49pt" align="left"/>
<colspec colname="2" colwidth="35pt" align="center"/>
<colspec colname="3" colwidth="21pt" align="center"/>
<colspec colname="4" colwidth="112pt" align="left"/>
<tbody valign="top">
<row>
<entry>pass</entry>
<entry>current</entry>
<entry>next</entry>
<entry>comment</entry>
</row>
<row>
<entry namest="1" nameend="4" align="center" rowsep="1"/>
</row>
<row>
<entry>significance</entry>
<entry>1,x</entry>
<entry>1,1</entry>
<entry>in refinement pass*</entry>
</row>
<row>
<entry>propagation</entry>
<entry/>
<entry/>
<entry>in parallel for all 16 coefficients at</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>start</entry>
</row>
<row>
<entry/>
<entry>0,0</entry>
<entry>0,0</entry>
<entry>in cleanup pass</entry>
</row>
<row>
<entry/>
<entry/>
<entry>0,1</entry>
<entry>code “0” in significance propagation</entry>
</row>
<row>
<entry/>
<entry/>
<entry>1,0</entry>
<entry>code “1” in significance propagation</entry>
</row>
<row>
<entry/>
<entry>0,1</entry>
<entry>0,1</entry>
<entry>code “0” in significance propagation</entry>
</row>
<row>
<entry/>
<entry/>
<entry>1,0</entry>
<entry>code “1” in significance propagation</entry>
</row>
<row>
<entry>refinement pass</entry>
<entry>1,1</entry>
<entry>1,1</entry>
</row>
<row>
<entry>cleanup pass</entry>
<entry>0,0</entry>
<entry>0,0</entry>
<entry>still not significant</entry>
</row>
<row>
<entry/>
<entry/>
<entry>1,x</entry>
<entry>became significant</entry>
</row>
<row>
<entry namest="1" nameend="4" align="center" rowsep="1"/>
</row>
<row>
<entry namest="1" nameend="4" align="left" id="FOO-00001">*In one embodiment, this is done in a parallel for all 16 coefficients at the start of processing for the 4 × 4 block.</entry>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0140" num="0139">The memories providing access to 2×4 regions can be 48 bits wide with significance state, pass and sign bits for each coefficient.</p>
<p id="p-0141" num="0140"><figref idref="DRAWINGS">FIG. 12</figref> is a block diagram of one embodiment of pass determination logic that implements Table 6 above and uses a priority encoder to find each coefficient that is in the current pass. Referring to <figref idref="DRAWINGS">FIG. 12</figref>, determine pass logic <b>1203</b> receives a significant state <b>1201</b> for a 6×6 region, a pass bit <b>1202</b> for a 4×4 region, and a current pass signal (or other indication) <b>1220</b> that indicates the current pass. Pass bit <b>1202</b> comprises a signal for each coefficient in the 4×4 region (i.e., 16 signals). In response to these inputs, determine pass logic <b>1203</b> generates an output to indicate the pass for the 4×4 region. In so doing, for each coefficient in the 4×4 region, determine pass logic <b>1203</b> asserts signals <b>1204</b> to indicate a significance propagation pass bit for coefficients in the significance propagation pass, signals <b>1205</b> to indicate a refinement pass bit for coefficients in the refinement pass, or signals <b>1206</b> to indicate a cleanup pass bit for coefficients in the cleanup pass.</p>
<p id="p-0142" num="0141">Selective logic <b>1207</b> is responsive to current pass signal <b>1220</b> to output one of the indications <b>1204</b>-<b>1206</b> to mask logic <b>1208</b>. In one embodiment, selective logic <b>1207</b> comprises a 16×3:1 multiplexer (Mux). Mask logic <b>1208</b> generates a signal in response to count signal <b>1210</b>, which indicates the coefficient currently being processed. The output of the mask <b>1208</b> is input to priority encoder <b>1209</b> which outputs the signal to control logic <b>1212</b>. Mask logic <b>1208</b> and priority encoder <b>1209</b> operates in a manner similar to their named counterparts in <figref idref="DRAWINGS">FIG. 7</figref>. In response to the inputs, control logic <b>1212</b> generates a code or idle indication on signal line <b>1213</b> and a count signal <b>1210</b>.</p>
<p id="p-0143" num="0142">Next pass bit logic <b>1211</b> receives an output from priority encoder <b>1209</b> (indicating the position of the coefficient currently being processed), the current pass signals <b>1220</b>, a new significant state <b>1221</b> from an MQ coder, and the refinement pass signals <b>1205</b>. The refinement pass signals <b>1205</b> represent significance state information by indicating whether coefficients are previously significant. Together, current pass signal <b>1220</b> and new significance state <b>1221</b> indicate whether processing is in the cleanup pass. In response to the inputs, next pass logic <b>1211</b> generates a next pass bit, which is used as an output to distinguish between ‘code “0” and ‘code “1” cases in Table 6. The next pass bit may be stored in memory and used subsequently as the pass bit <b>1202</b>.</p>
<p id="p-0144" num="0143">The operation of the logic in <figref idref="DRAWINGS">FIG. 12</figref> is described in the pseudo code below. Such functionality may be included in MQ-coders 2908<sub>1-N</sub>. The significance state and pass bit are cleared before processing the first cleanup pass.
<ul id="ul0001" list-style="none">
    <li id="ul0001-0001" num="0000">
    <ul id="ul0002" list-style="none">
        <li id="ul0002-0001" num="0144">count=0</li>
        <li id="ul0002-0002" num="0145">if significance propagation pass then
        <ul id="ul0003" list-style="none">
            <li id="ul0003-0001" num="0146">set next pass bit to “1” for all coefficients in refinement pass</li>
        </ul>
        </li>
        <li id="ul0002-0003" num="0147">while (count &lt;16)
        <ul id="ul0004" list-style="none">
            <li id="ul0004-0001" num="0148">if significance propagation pass the
            <ul id="ul0005" list-style="none">
                <li id="ul0005-0001" num="0149">in_pass=coefficients in significance propagation pass</li>
            </ul>
            </li>
            <li id="ul0004-0002" num="0150">else if refinement pass then
            <ul id="ul0006" list-style="none">
                <li id="ul0006-0001" num="0151">in_pass=coefficients in refinement pass</li>
            </ul>
            </li>
        </ul>
        </li>
        <li id="ul0002-0004" num="0152">else
        <ul id="ul0007" list-style="none">
            <li id="ul0007-0001" num="0153">in pass=coefficients in cleanup pass</li>
        </ul>
        </li>
        <li id="ul0002-0005" num="0154">mask=(1 &lt;&lt;colund)−1</li>
        <li id="ul0002-0006" num="0155">in_pass_masked=in_pass AND (NOT mask)</li>
        <li id="ul0002-0007" num="0156">use priority encoder to find next coefficient in pass, N
        <ul id="ul0008" list-style="none">
            <li id="ul0008-0001" num="0157">if next coefficient found
            <ul id="ul0009" list-style="none">
                <li id="ul0009-0001" num="0158">code coeff N</li>
                <li id="ul0009-0002" num="0159">if significance propgation pass then
                <ul id="ul0010" list-style="none">
                    <li id="ul0010-0001" num="0160">next pass bit=NOT next significance state</li>
                </ul>
                </li>
                <li id="ul0009-0003" num="0161">else next pass bit=pass bit</li>
                <li id="ul0009-0004" num="0162">count=N+1</li>
            </ul>
            </li>
            <li id="ul0008-0002" num="0163">else
            <ul id="ul0011" list-style="none">
                <li id="ul0011-0001" num="0164">count=16</li>
                <li id="ul0011-0002" num="0165">idle for coeff N</li>
            </ul>
            </li>
            <li id="ul0008-0003" num="0166">next pass bit=pass bit</li>
        </ul>
        </li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0145" num="0167">In the above code, “in-pass” variable is the output of a 3:1 multiplexing function. The “mask” variable represents the mask, and the “in-pass-masked” variable represents the result of applying the mask. The variable N represents the next coefficient in the pass and is the output of the priority encoder. Once this has been found, the control function in the code follows.</p>
<p id="p-0146" num="0168">In the above code “code coeff N” refers to coding coefficient when the coefficient is in the current pass. The “idle for coeff N” is executed when processing a run.</p>
<p id="h-0014" num="0000">Double Context Generation</p>
<p id="p-0147" num="0169">Contexts often depend on the last bit coded, causing a time critical feedback loo<b>0</b>p between the MQ-coder and context model when decoding. To reduce this context model delay to the time for a simple multiplex, the context model can generate two contexts, one for when the current bit being decoded is “0” and another when it is “1”. When the bit is known, selection of the context may occur.</p>
<p id="p-0148" num="0170"><figref idref="DRAWINGS">FIG. 13</figref> is a block diagram of one embodiment of double context generation logic. Referring to <figref idref="DRAWINGS">FIG. 13</figref>, context model generates a context 0, enable 0, context 1, and enable 1. The context model generates 2 contexts, 0 and 1, which are both sent to multiplexer (mux) <b>1302</b>. Mux <b>1302</b> is coupled to receive these signals and generates a context indication and an enable indication to indicate if the context is valid and if a bit should be coded. These outputs are coupled to inputs of MQ coder <b>1303</b> which generates a bit. The output bit from MQ coder <b>1303</b> is used by mux <b>1302</b> to select the context that is to be output to MQ coder <b>1303</b>. Thus, the context model generates 2 contexts, one for when the current bit is decoded at “0” and another for when it is decoded at “1”, and the output bit for the MQ coder <b>1303</b> selects the correct one.</p>
<p id="p-0149" num="0171">For run-length coding for the cleanup passes, Table 7 shows the two possible next contexts for each case and follows the cleanup pass flow described in the JPEG 2000 Standard. The value of the bit coded in the run-length context is used to decide if the next context is for the next group of four coefficients or is in the uniform context for the current group of four coefficients. If this bit is “0”, then the run-length coding succeeded in representing four coefficients with one decision and having the MQ-coder idle for the following cycle does not significantly hurt speed performance. After the bit coded in the second uniform context (“uniform B”) is a sign bit that is always coded directly in context 9 (with XOR bit 0) in the JPEG 2000 Standard, where the XOR bit being 0 indicates that the sign is not being flipped.</p>
<p id="p-0150" num="0172">Table 7—Double Context Generation for Run-Length Coding in Cleanup Passes</p>
<p id="p-0151" num="0173">
<tables id="TABLE-US-00021" num="00021">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" rowsep="1">TABLE 7</entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>Double Context Generation for Run-length Coding in Cleanup</entry>
</row>
<row>
<entry>Passes</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="1" colwidth="77pt" align="left"/>
<colspec colname="2" colwidth="63pt" align="center"/>
<colspec colname="3" colwidth="77pt" align="center"/>
<tbody valign="top">
<row>
<entry>current context</entry>
<entry/>
<entry/>
</row>
<row>
<entry>(being used by MQ</entry>
</row>
<row>
<entry>coder)</entry>
<entry>next context for “0”</entry>
<entry>next context for “1”</entry>
</row>
<row>
<entry namest="1" nameend="3" align="center" rowsep="1"/>
</row>
<row>
<entry>run-length</entry>
<entry>run-length or</entry>
<entry>uniform A</entry>
</row>
<row>
<entry/>
<entry>magnitude</entry>
</row>
<row>
<entry/>
<entry>(or idle)</entry>
</row>
<row>
<entry>uniform A</entry>
<entry>uniform B</entry>
<entry>uniform B</entry>
</row>
<row>
<entry>uniform B</entry>
<entry>sign</entry>
<entry>sign</entry>
</row>
<row>
<entry namest="1" nameend="3" align="center" rowsep="1"/>
</row>
<row>
<entry namest="1" nameend="3" align="left" id="FOO-00002">A and B above refer to the two bits that are described in Section D.3.4 as “[t]he next two bits, returned with the UNIFORM context” in the JPEG 2000 standard.</entry>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0152" num="0174">For the significance propagation and cleanup coding passes, the cases without run-length coding are show in Table 8. While a magnitude bit is being coded, the contexts are generated for the magnitude of the next coefficient assuming the current coefficient is “0” or the sign bit context for the current coefficient.</p>
<p id="p-0153" num="0175">
<tables id="TABLE-US-00022" num="00022">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" rowsep="1">TABLE 8</entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>Double context generation for significance propagation and</entry>
</row>
<row>
<entry>cleanup coding passes.</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="4">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="63pt" align="left"/>
<colspec colname="2" colwidth="70pt" align="left"/>
<colspec colname="3" colwidth="70pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>current context</entry>
<entry/>
<entry/>
</row>
<row>
<entry/>
<entry>(being used by MQ</entry>
</row>
<row>
<entry/>
<entry>coder)</entry>
<entry>next context for “0”</entry>
<entry>next context for “1”</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="3" align="center" rowsep="1"/>
</row>
<row>
<entry/>
<entry>magnitude bit</entry>
<entry>magnitude next</entry>
<entry>sign for current</entry>
</row>
<row>
<entry/>
<entry/>
<entry>coefficient</entry>
<entry>coefficient</entry>
</row>
<row>
<entry/>
<entry>sign bit</entry>
<entry>magnitude next</entry>
<entry>magnitude next</entry>
</row>
<row>
<entry/>
<entry/>
<entry>coefficient</entry>
<entry>coefficient</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="3" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0154" num="0176">For the refinement pass, the value of any previous refinement coefficient coded does not effect the context.</p>
<p id="h-0015" num="0000">MO-Coder</p>
<p id="h-0016" num="0000">MQ-Decoder Dataflow with Late Context</p>
<p id="p-0155" num="0177"><figref idref="DRAWINGS">FIG. 14B</figref> is a block diagram of a typcial decoding implementation. Referring to <figref idref="DRAWINGS">FIG. 14B</figref>, context model <b>1430</b> provides a context to a memory <b>1431</b> where a probability state is determined. The probability state is converted with logic <b>1432</b> to a “Qe_value” for the arithmetic coder <b>1433</b>, which updates an internal A &amp; C register and determines a decision (MPS or LPS). All of this must typically happen before the next context can be determined. In many hardware implementations, the decode speed is limited by a large feedback loop (feeding back to context model <b>1431</b>).</p>
<p id="p-0156" num="0178">In contrast, <figref idref="DRAWINGS">FIG. 14A</figref> is a block diagram of one embodiment of an “early context” MQ-decoder. In this case, the feedback loop has much simpler logic <b>1407</b>, instead of an entire decode operation. Therefore, much of the decode and update can be done in parallel with the lower feedback loop <b>1401</b>.</p>
<p id="p-0157" num="0179">Referring to <figref idref="DRAWINGS">FIG. 14A</figref>, codestream <b>1400</b> is input and updates the internal state <b>1401</b>. In one embodiment, the A and C register of the internal state specify a current interval as set forth in the JPEG 2000 Standard in Appendix C. The register A indicates the current interval and the code register C is the concatination of the Chigh and Clow registers.</p>
<p id="p-0158" num="0180">Context <b>1402</b> is provided by context model <b>1410</b>. Context <b>1402</b> is used to look up probability state <b>1404</b> in memory <b>1403</b>, which is then converted by logic <b>1405</b> to a probability class (Qe_value) <b>1406</b>. Qe_value <b>1406</b> represents the current estimate of a less probable symbol (LPS). Qe_value <b>1406</b> is compared with A and C register values as set forth in FIG. C-<b>15</b> of the JPEG 2000 Standard of the MQ-coder's internal state by logic <b>1407</b> to generate the output decision <b>1408</b>, which may be a more probable symbol (MPS) or LPS. The output decision <b>1408</b> is input to context model <b>1410</b>. In one embodiment, the operations on the Qe_value and the internal state require 16-bit arithmetic. Operations of these blocks implement the decoding of a decision as set forth in section C.3.2 of the JPEG 2000 Standard.</p>
<p id="p-0159" num="0181"><figref idref="DRAWINGS">FIG. 15</figref> is a block diagram of one embodiment of a “late context” MQ-decoder. Referring to <figref idref="DRAWINGS">FIG. 15</figref>, 16-bit processing has been eliminated from the context model feedback loop. Codestream <b>1501</b> is received as an input to update logic <b>1503</b>, which updates the internal state <b>1503</b>, including the A and C registers that specify the current interval. The new A and C register values and the codestream are input to logic <b>1504</b> which generates two pclasses as described below, pclass <b>1509</b> and pclass <b>1510</b>, which are input to comparison logic <b>1511</b> and <b>1512</b>.</p>
<p id="p-0160" num="0182">Context model <b>1520</b> generates context <b>1502</b>. Context <b>1502</b> is used to look up a probability state <b>1506</b> of memory <b>1505</b>. In one embodiment, memory <b>1505</b> comprises a look up table. Identification of probability state <b>1506</b> allows determining the Qe_Value. Probability state <b>1506</b> output from memory <b>1505</b> is converted by logic <b>1507</b> into probability class (index) <b>1508</b>.</p>
<p id="p-0161" num="0183">Comparion logic <b>1511</b> determines if pclass <b>1509</b> is greater than the probability class index <b>1508</b> and comparison logic <b>1512</b> compares to determine whether probability class index <b>1508</b> is greater than pclass <b>1510</b>. The results of both comparison logics <b>1511</b> and <b>1512</b> are input to AND gate <b>1513</b> such that if both comparisons are true, a decision is output. This decision may be an MPS or LPS. Thus, context <b>1502</b> is converted into a 5 bit probability class index <b>1508</b> (since there are 32 possible values for Qe_Value in JPEG 2000). The internal state is used to generate two 5-bit probability class indices. If the index corresponding to the context is outside the two indices generated from the state, the decision is a MPS; otherwise, it is a LPS (i.e., inside the two indices).</p>
<p id="p-0162" num="0184">An important advantage of the embodiment of <figref idref="DRAWINGS">FIG. 15</figref> is that the internal state update is parallel with generating the next probability class (indices) <b>1508</b>, instead of serially as shown in <figref idref="DRAWINGS">FIG. 14B</figref>. Also, because two probability classes are only 5 bits when compared to a pclass index, the arithmatic is much simpler.</p>
<p id="p-0163" num="0185">Logic <b>1504</b> of <figref idref="DRAWINGS">FIG. 15</figref> creates the information that is depicted in <figref idref="DRAWINGS">FIG. 16A</figref>. Given the values in the A and C registers, logic <b>1504</b> determines what the two split points are for the pclass and then determines if the code is in between or outside the split points. These may be done in parallel.</p>
<p id="p-0164" num="0186"><figref idref="DRAWINGS">FIG. 16A</figref> illustrates how the comparison of probability class indices works. Referring to <figref idref="DRAWINGS">FIG. 16A</figref>, “pclass <b>0</b>” is a high skew case with most of the interval devoted to MPS. For “pclass <b>1</b>” though “pclass <b>4</b>”, the skew is less and the MPS interval shrinks. “pclass <b>5</b>” shows the MPS a conditional exchange which occurs for probabilities close to 50%. The “known state” has a codestream value (“code”) which would be a MPS for some probability classes and a LPS for others. Because the probability classes are ordered, two comparisons are sufficient to determine if “code” is a MPS or LPS. In other words, in <figref idref="DRAWINGS">FIG. 16A</figref>, given the location of the code in the known state, the decision will be an MPS for pclass <b>0</b>-<b>3</b>, but will be an LPS always for pclass <b>4</b>, and then again an MPS for pclass <b>5</b>. Instead of figuring out whether it will be an MPS or LPS for each probability class, only the two breakpoints (between pclass <b>3</b> and <b>4</b> and between pclass <b>4</b> and <b>5</b>) need to be determined. Therefore, when the QE value is given (when the probability class/index is known), a determination may be made as to what probability class is actually in the space where the break points are.</p>
<p id="p-0165" num="0187">A similar method in hardware could be used to determine the MPS or LPS for each possible Qe_Value and then multiplex the result. For example, <figref idref="DRAWINGS">FIG. 16B</figref> shows a mux <b>1610</b> having a number of inputs, each of which are associated with a pclass and provides as an output either an MPS or LPS depending on the code.</p>
<p id="h-0017" num="0000">Multiple Bit Decoding with MQ-coder</p>
<p id="p-0166" num="0188">Multiple MPSs can be decoded (for consecutive uses of the same PClass) at one time as long as none of the MPSs or only the last MPS requires normalization. <figref idref="DRAWINGS">FIG. 17</figref> illustrates the intervals for multiple MPS decoding. In the standard, if the difference between where the codestream is in relation to the interval specified by the A and C registers and the Qe_value is 2 or greater, then multiple MPSs can be decoded. If the interval size is divided by Qe_value and then if the decoder remains in the same context and, thus, the same probability class, then multiple MPSs can be decoded at one time. For example, when looking at the codestream and knowing the 16 bits that are being processed, if the location of the codesteam in the interval specified by the A and C registers is multiple Qe_values away, indicating that the same context is going to be used to process the data for multiple cycles, and thus the same probability class, then multiple MPSs may be decoded at one time. In other words, if</p>
<p id="p-0167" num="0189">
<maths id="MATH-US-00002" num="00002">
<math overflow="scroll">
<mfrac>
  <mtable>
    <mtr>
      <mtd>
        <mrow>
          <mrow>
            <mi>interval</mi>
            <mo>⁢</mo>
            <mstyle>
              <mspace width="0.8em" height="0.8ex"/>
            </mstyle>
            <mo>⁢</mo>
            <mi>specified</mi>
            <mo>⁢</mo>
            <mstyle>
              <mspace width="0.8em" height="0.8ex"/>
            </mstyle>
            <mo>⁢</mo>
            <mi>by</mi>
            <mo>⁢</mo>
            <mstyle>
              <mspace width="0.8em" height="0.8ex"/>
            </mstyle>
            <mo>⁢</mo>
            <mi>A</mi>
            <mo>⁢</mo>
            <mstyle>
              <mspace width="0.8em" height="0.8ex"/>
            </mstyle>
            <mo>⁢</mo>
            <mi>and</mi>
            <mo>⁢</mo>
            <mstyle>
              <mspace width="0.8em" height="0.8ex"/>
            </mstyle>
            <mo>⁢</mo>
            <mi>C</mi>
            <mo>⁢</mo>
            <mstyle>
              <mspace width="0.8em" height="0.8ex"/>
            </mstyle>
            <mo>⁢</mo>
            <mi>registers</mi>
          </mrow>
          <mo>-</mo>
        </mrow>
      </mtd>
    </mtr>
    <mtr>
      <mtd>
        <mrow>
          <mi>location</mi>
          <mo>⁢</mo>
          <mstyle>
            <mspace width="0.8em" height="0.8ex"/>
          </mstyle>
          <mo>⁢</mo>
          <mi>of</mi>
          <mo>⁢</mo>
          <mstyle>
            <mspace width="0.8em" height="0.8ex"/>
          </mstyle>
          <mo>⁢</mo>
          <mi>the</mi>
          <mo>⁢</mo>
          <mstyle>
            <mspace width="0.8em" height="0.8ex"/>
          </mstyle>
          <mo>⁢</mo>
          <mi>codestream</mi>
        </mrow>
      </mtd>
    </mtr>
  </mtable>
  <mrow>
    <mi>Q</mi>
    <mo>⁢</mo>
    <mstyle>
      <mspace width="0.3em" height="0.3ex"/>
    </mstyle>
    <mo>⁢</mo>
    <mi>e</mi>
  </mrow>
</mfrac>
</math>
</maths>
<br/>
is determined and rounded to the next lowest interger, the result indicates the number of MPSs that may be decoded at one time. This calculation may be performed by well-known hardware.
<br/>
An Exemplary Implementation of a 5,3 Filter
</p>
<p id="p-0168" num="0190">In one embodiment, a reversible and irreversible 5,3 wavelet filters are used. The term 5,3 refers to the number of taps in the wavelet fitlers, i.e., the number of non-zero (consecutive) values in the basis function support for the kernal. Reversible implies that performing the forward and the inverse tranformation (using the explicity rounding rules and without performing quantization in any form) will result in the exact same number at the output as the input. Only a modest and predictable increase in precision over the input precision is required for the intermediate mathematical terms. That is, there is no systemic distortion introduced by mathematical precision. Irreversible implies that very high precision is required to ensure no mathematical distortion (exact reconstruction). In practice, however, irreversible filters are almost always combined with quatization creating distortion that overwhelms the systemic mathematical precision distortion.</p>
<p id="p-0169" num="0191"><figref idref="DRAWINGS">FIG. 24</figref> illustrates one embodiment of a forward transform filter. Referring to <figref idref="DRAWINGS">FIG. 24</figref>, a highpass filter <b>2402</b> is coupled to receive lines x<sub>0</sub>x<sub>1 </sub>and the last x<sub>0 </sub>from line buffer <b>2401</b> and generates an output that is coupled to one input of the lowpass filter <b>2404</b> and is stored in line buffer <b>2403</b>. Line buffers <b>2401</b> and <b>2403</b> store one line having a tile width. Lowpass filter <b>2404</b> also receives an output of the highpass filter <b>2402</b> from the previous cycle that is from line buffer <b>2403</b> along with the current x<sub>0 </sub>line and generates an output. The outputs of lowpass filter <b>2404</b> for two previous clock cycles are delayed through delays <b>2405</b> and <b>2406</b>, providing the filter output one cycle in the past and two cycles it the past.</p>
<p id="p-0170" num="0192">Previous outputs of highpass filter <b>2402</b> are delayed by delay <b>2407</b> and <b>2408</b> such that the current output of highpass filter <b>2402</b> and the last two outputs of highpass filter <b>2402</b> are input to highpass filter <b>2413</b>. The output of highpass filter <b>2413</b> is a coefficient in the HH subband and is also input to lowpass filter <b>2415</b> along previous output of the highpass <b>2402</b> two cycles earlier, (two in the past), the output from delay <b>2408</b> and the previous output of highpass filter <b>2413</b>. The output of lowpass filter <b>2415</b> is coefficient from the HL subband.</p>
<p id="p-0171" num="0193">The output of lowpass filter <b>2404</b> along with the outputs of delays <b>2405</b> and <b>2406</b> are input to highpass filter <b>2409</b>. The output of highpass filter <b>2409</b> is the LH subband.</p>
<p id="p-0172" num="0194">The output of highpass filter <b>2409</b> is also input to one of the inputs of lowpass filter <b>2411</b> along with the output of delay <b>2406</b> and the previous output of highpass filter <b>2409</b> as delayed through delay <b>2410</b>. The output of lowpass filter <b>2411</b> is the LL subband. As the LL subband, the output of lowpass filter <b>2411</b> is input to a line buffer <b>2412</b> the output of which, along with the output of lowpass filter <b>2411</b>, represent the inputs to the next level of wavelet transform. The next level of wavelet transform may comprise a cascaded version of the wavelet transform in <figref idref="DRAWINGS">FIG. 24</figref>.</p>
<p id="p-0173" num="0195"><figref idref="DRAWINGS">FIG. 25A</figref> illustrates one embodiment of the lowpass filter, such as may be used in transforms (e.g., the 5,3 transform described above) described herein. The lowpass filter is designed to create an output based on the functions according to the following:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>−x<sub>0</sub>+2x<sub>1</sub>−x<sub>2</sub><?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
For the reversible case, the lowpass filter operates according to the following equation:
</p>
<p id="p-0174" num="0196">
<maths id="MATH-US-00003" num="00003">
<math overflow="scroll">
<mrow>
  <msub>
    <mi>x</mi>
    <mn>1</mn>
  </msub>
  <mo>-</mo>
  <mrow>
    <mo>⌊</mo>
    <mfrac>
      <mrow>
        <msub>
          <mi>x</mi>
          <mn>0</mn>
        </msub>
        <mo>+</mo>
        <msub>
          <mi>x</mi>
          <mn>2</mn>
        </msub>
      </mrow>
      <mn>2</mn>
    </mfrac>
    <mo>⌋</mo>
  </mrow>
</mrow>
</math>
</maths>
</p>
<p id="p-0175" num="0197">Referring to <figref idref="DRAWINGS">FIG. 25A</figref>, an adder <b>2501</b> is coupled to add the last x<sub>0 </sub>line with the current x<sub>0 </sub>line. The least significant bit output represents an output of the high pass filter of <figref idref="DRAWINGS">FIG. 25B</figref> and is for the irreversible transform. The remaining bits are input to subtractor <b>2502</b> and are subtracted from the x<sub>1 </sub>input to create an output representing the most significant bits. These most significant bits are all that is required for the reversible case. It should be noted that for an inverse wavelet transform to convert filter in <figref idref="DRAWINGS">FIG. 25A</figref> into an inverse wavelet filter for use as an odd (high pass) filter in an inverse transform, the subtractor <b>2502</b> is replaced with an adder. Such an example is shown in the high pass filter of <figref idref="DRAWINGS">FIG. 25B</figref>.</p>
<p id="p-0176" num="0198"><figref idref="DRAWINGS">FIG. 26A</figref> illustrates one embodiment of a highpass filter such as may be used in the transforms described herein. For the irreversible case, the highpass filter operates according to the following equation:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>4x<sub>1</sub>−x<sub>0</sub>−x<sub>2</sub><?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0177" num="0199">For the reversible case, the highpass filter operates according to the following:</p>
<p id="p-0178" num="0200">
<maths id="MATH-US-00004" num="00004">
<math overflow="scroll">
<mrow>
  <msub>
    <mi>x</mi>
    <mn>1</mn>
  </msub>
  <mo>-</mo>
  <mrow>
    <mo>⌊</mo>
    <mfrac>
      <mrow>
        <msub>
          <mi>x</mi>
          <mn>0</mn>
        </msub>
        <mo>+</mo>
        <msub>
          <mi>x</mi>
          <mn>2</mn>
        </msub>
        <mo>+</mo>
        <mn>2</mn>
      </mrow>
      <mn>4</mn>
    </mfrac>
    <mo>⌋</mo>
  </mrow>
</mrow>
</math>
</maths>
</p>
<p id="p-0179" num="0201">Referring to <figref idref="DRAWINGS">FIG. 26A</figref>, adder <b>2601</b> adds either the reversible or irreversible version of the last x<sub>0 </sub>line to the current x<sub>0 </sub>line. The output of adder <b>2601</b> is added to a rounding term using adder <b>2603</b>. The rounding term may be 2 in the case of reversible or 0 in the case of irreversible and is supplied by mux <b>2602</b>. All except the lower two bits of the output of adder <b>2603</b> is added to the x<b>1</b> line using adder <b>2604</b> to produce the reversible output. The lower two bits of the output of adder <b>2603</b> and the output of adder <b>2604</b> represent the irreversible output.</p>
<p id="p-0180" num="0202">The use of mux <b>2602</b> allows a simple switch to be invoked to switch between reversible and irreversible, instead of requiring completely separate hardware for both functions or requiring that reversible rounding effect the irreversible output.</p>
<p id="p-0181" num="0203">It should be noted that for an inverse wavelet transform to convert filter in <figref idref="DRAWINGS">FIG. 26A</figref> into an inverse wavelet filter for use as an every (low pass) filter in an inverse transform, the adder <b>2604</b> is replaced with a subtractor. Such an example is shown in the low pass filter of <figref idref="DRAWINGS">FIG. 26B</figref>.</p>
<p id="p-0182" num="0204"><figref idref="DRAWINGS">FIG. 27</figref> represents an alternative embodiment of this transform in <figref idref="DRAWINGS">FIG. 24</figref> that includes multiplexers (muxes) to perform mirroring at the image boundaries. These muxes include mux <b>2701</b>-<b>2712</b>. For example, mux <b>2701</b> allows the x<sub>0 </sub>line to be used instead of the last x<sub>0 </sub>line at a boundary when there is no line in the line buffer <b>2401</b> (for example, at the top of a tile). Mux <b>2702</b> allows the line buffer to provide the other input to lowpass filter <b>2404</b> at times when the bottom of a tile has been reached and there is no additional x<sub>0 </sub>line to be input. Similarly, mux <b>2703</b> allows the output of highpass filter <b>2402</b> to be used as an input to lowpass filter <b>2404</b> in cases where there is no line in line buffer <b>2403</b>. Mux <b>2704</b> allows the input to lowpass filter <b>2404</b> to be from line buffer <b>2403</b> when there is no output from highpass filter <b>2402</b>. Muxes <b>2705</b> and <b>2706</b> allow the inputs to highpass filter <b>2409</b> to be the output of delay <b>2406</b> and the output of lowpass filter <b>2404</b>, respectively, when an output to lowpass filter <b>2404</b> and an output from delay <b>2406</b>, respectively, are not available. The same thing can be said for muxes <b>2709</b> and <b>2710</b>, muxes <b>2707</b> and <b>2708</b>, and muxes <b>2711</b> and <b>2712</b>.</p>
<p id="p-0183" num="0205"><figref idref="DRAWINGS">FIG. 28</figref> is a block diagram of one embodiment of an inverse 5,3 transform. Referring to <figref idref="DRAWINGS">FIG. 28</figref>, even filter <b>2815</b> is coupled to receive an LL coefficient, an HL coefficient, and an HL coefficient from the previous cycle from delay <b>2801</b>. The output of even filter <b>2815</b> is coupled to one input of even filter <b>2811</b>, one input of delay <b>2802</b>, and one input of odd filter <b>2803</b>. The other inputs of odd filter <b>2803</b> are coupled to the HL coefficient from the previous cycle via delay <b>2801</b> and the output fo even filter <b>2815</b> from the previous cycle via delay <b>2802</b>. The output of odd filter <b>2803</b> is coupled to one input of even filter <b>2810</b>.</p>
<p id="p-0184" num="0206">A similar arrangement exists with respect to the LH and HH coefficients in that filter <b>2805</b> is coupled to receive the current HH coefficient and LH coefficient along with the HH coefficient from the previous cycle output from delay <b>2804</b>. The output of even filter <b>2805</b> is coupled to one input of even filter <b>2811</b>, the input of delay <b>2806</b>, and one input of odd filter <b>2807</b>. The other inputs of odd filter <b>2807</b> comprise the HH coeffcient from the previous cycle (the output of delay <b>2804</b>) and the output of even filter <b>2805</b> from the previous cycle (the output of delay <b>2806</b>). The output of odd filter <b>2807</b> is input to one input of even filter <b>2810</b>.</p>
<p id="p-0185" num="0207">Note that the outputs of even filter <b>2805</b> and odd filter <b>2807</b> are also coupled and are stored in inputs of line buffer <b>2808</b> and <b>2809</b>. The size of line buffers <b>2808</b> and <b>2809</b> are equal to ½ the tile width. The outputs of line buffer <b>2808</b> are input to the other input of even filter <b>2811</b> and one input of odd filter <b>2815</b>. The output of line buffer <b>2809</b> is coupled to one input of even filter <b>2810</b> and one input of odd filter <b>2814</b>.</p>
<p id="p-0186" num="0208">The output of even filter <b>2810</b> is the “C” portion fo the image data that is output, is stored in line buffer <b>2812</b>, and is coupled to one input of odd filter <b>2814</b>. In one embodiment, the size of line buffer <b>2812</b> is equal to ¼ the tile width. In response to its input, odd filter <b>2814</b> generates data corresponding to the “A” portion of the image data.</p>
<p id="p-0187" num="0209">The output of even filter <b>2811</b> corresponds to the “D” portion of image data is input to one input of odd filter <b>2815</b> and is stored in line buffer <b>2813</b>. In one embodiment, the size of line buffer <b>2813</b> is ¼ the tile width. The output of line buffer <b>2813</b> is coupled to one input of odd filter <b>2815</b>. The output of odd filter <b>2815</b> corresponds to the “B” portion of the image data.</p>
<p id="h-0018" num="0000">Other Parallelism Implementation Techniques</p>
<p id="h-0019" num="0000">Assignment of Code-blocks to Coders for Parallelism</p>
<p id="p-0188" num="0210">It is useful in hardware implementations to code multiple code-blocks in the same tile in parallel. <figref idref="DRAWINGS">FIG. 21</figref> is a memory usage diagram of one embodiment of a coder that includes multiple MQ coders, each having an associated context model, that may be used to process multiple code-blocks.</p>
<p id="p-0189" num="0211">Referring to <figref idref="DRAWINGS">FIG. 21</figref>, each MQ coder is allocated memory (e.g., separate memory or some portion of one or multiple memories). In one embodiment, a portion of the allocated memory stores the coded data, with the length, zero bitplanes, and coding passes stored in another portion of memory.</p>
<p id="p-0190" num="0212"><figref idref="DRAWINGS">FIGS. 18-20</figref> show assignment of code-blocks to parallel units for 128×128 tiles, 64×64 code-blocks and three transform levels, respectively. The assignments are made to balance the amount of coding to be performed by each of the parallel coders. In one embodiment, code-blocks are assigned so that each MQ coder codes, to the extent possible, approximately the same number of coefficients, with a balance between higher level and lower level coefficients. Other configurations are possible.</p>
<p id="p-0191" num="0213"><figref idref="DRAWINGS">FIG. 18A-C</figref> illustrate embodiments of code-block assignments for 4:4:4 data when 4,6, and 8 MQ coders are being used in parallel, respectively. In <figref idref="DRAWINGS">FIG. 18C</figref>, for 8 units in parallel, the code-blocks assigned to parallel unit “H” (1HH chrominance subbands) will often be heavily quantized (have few non-zero bitplanes to code) so it is likely that this unit can process more coefficients than the other units per unit time.</p>
<p id="p-0192" num="0214"><figref idref="DRAWINGS">FIGS. 19A-C</figref> illustrate embodiments of code-block assignments for 4:2:2 data when 4, 6, and 8 MQ coders are being used in parallel, respectively.</p>
<p id="p-0193" num="0215"><figref idref="DRAWINGS">FIGS. 20A-C</figref> illustrate embodiments of code-block assignments for 4:1:1 data when 4, 6, and 8 MQ coders are being used in parallel, respectively. In <figref idref="DRAWINGS">FIG. 20C</figref> for 8 units in parallel, it is expected that units C, D and E process more coefficients per unit time than the other units.</p>
<p id="p-0194" num="0216">The coder of <figref idref="DRAWINGS">FIG. 29</figref> may be used to perform the coding described above. For example, each one of N MQ-coders of bit modeling MQ-coders <b>2908</b><sub>1-N </sub>may be assigned to any of A-H shown in <figref idref="DRAWINGS">FIGS. 18-20</figref>.</p>
<p id="p-0195" num="0217">Note that although even numbers of MQ coders in parallel are discussed with respect to <figref idref="DRAWINGS">FIGS. 18-20</figref>, an odd number of MQ coders in parallel may be used.</p>
<p id="h-0020" num="0000">Reduced Memory for Storing Coefficients in Hardware</p>
<p id="p-0196" num="0218">Reducing memory usage for storing coefficients when not decoding losslessly can make use of zero bitplane information. If the hardware can store N bitplanes for each coefficient, decoding can terminate after N bitplanes are decoded. Any following bitplanes can be quantized (truncated).</p>
<p id="p-0197" num="0219"><figref idref="DRAWINGS">FIG. 22A</figref> illustrates use of a limited number of bitplanes of memory for each coefficient during encoding. For example, 8 bitplanes of memory (N=8) can be used to encode coefficients with 16 bits in a normal representation. Those coefficients are part of a subband other than the LL subband (where the LL subband coefficients are not quantized) that are generated as a result of applying a wavelet transform to image data. In one embodiment, the wavelet transform comprises a 5,3 wavelet transform as described herein. The wavelet transform may comprise multiple 5,3 wavelet transforms operating in parallel to generate LL, HH, LH and HL subbands in parallel. A memory storing coefficients from the wavelet transform may be accessed by a context model to perform encoding based on the coefficient bits.</p>
<p id="p-0198" num="0220">During encoding, coefficients are stored before the number of zero bitplanes is known. Counters count the number of initial zeros for more significant bitplanes <b>8</b> . . . <b>15</b>. As long as a bitplane <b>8</b> . . . <b>15</b> is all zero, the memory stores information (magnitude) for the corresponding bitplane <b>0</b> . . . <b>7</b>. Once a one occurs in a bitplane <b>8</b> . . . <b>15</b>, the corresponding counter stops and memory stores information for the corresponding bitplane <b>8</b> . . . <b>15</b>. At the end of encoding a code-block, the counters either indicate all zeros for a bitplane <b>8</b> . . . <b>15</b> and that the corresponding bitplane <b>0</b> . . . <b>7</b> is in memory in the case that the counter stores a value at the end of the memory, or they indicate the starting address for bitplane <b>8</b> . . . <b>15</b> data in memory and that the corresponding <b>0</b> . . . <b>7</b> bitplane should be truncated (quantized). Thus, the counts act as sideband information to indicate that information stored in the memory array from the beginning of a row up to the location in the row at the position indicated by the count is no longer needed data. The results of truncation is that the least significant bitplanes are dropped.</p>
<p id="p-0199" num="0221">A separate bitplane of memory can be used to store sign information or the sign information can be stored with the significance state.</p>
<p id="p-0200" num="0222">In alternative embodiment, a small amount of memory may be used for variable length (VL) code information (e.g., run length code) instead of counters. This allows a bitplane with a small number of one bits to be stored in a small portion of memory for each bitplane. Once the bits have been stored in the memory, a context model accesses the memory to obtain the bits. However, since each row may potentially contain data that is to be quantized, and therefore, need not be accessed and used by the context model. <figref idref="DRAWINGS">FIG. 22B</figref> illustrates a block diagram of one embodiment of control logic to control access to the memory. This logic may operate in conjunction with or be part of a context model accessing the memory.</p>
<p id="p-0201" num="0223">Referring to <figref idref="DRAWINGS">FIG. 22B</figref>, an address, addr, accesses memory array <b>2201</b> generating a bit. The address and the counter value associated with the row of memory containing the address are input to comparison logic <b>2210</b>. If comparison logic <b>2210</b> determines that the address is greater than or equal to the counter value for the row, then the 1-bit output from memory array <b>2201</b> is output; otherwise, a zero is output.</p>
<p id="p-0202" num="0224"><figref idref="DRAWINGS">FIG. 23</figref> illustrates a portion of memory from a VL code and a memory array storing coefficients. The VL code may be used to indicate the presence of a 1 bit by indicating an amount of bits to skip until the next one is encountered in the row. Thus, this VL code is made to indicate two counts so that the access logic knows where the next bit-plane is. Other VL codes could be used to provide more than two counts. Use of VL codes typically allows one less full bitplane of memory to be used. If the small memory is 1/32 of the size of the code-block (per bitplane), then a R2[8] code might be used. If the small memory is 1/16 of the size of the code-block, then a R2[6] or R2[7] code might be used. For more information on R2[8], R2[6], and R2[7] codes, see U.S. Pat. No. 5,381,145 entitled “Method and Apparatus for Parallel Decoding and Encoding of Data,” issued Jan. 10, 1995, assigned to the corporate assignee of the present invention.</p>
<p id="p-0203" num="0225">For video where simultaneous operation of the transform and context model/MQ coder is desired, two banks of memory are needed. For still image applications, one band of memory is sufficient for sequential operation of the transform and context model/MQ-coder.</p>
<p id="p-0204" num="0226">Although the reduced memory technique discussed above is described in terms of rows, any arbitrary memory area may be used, such as, for example, columns, blocks, pages, regions, etc. Also, separate memories may be used.</p>
<p id="h-0021" num="0000">Packet Header Processing</p>
<p id="p-0205" num="0227">To create a codestream, such as, for example, a JPEG 2000 codestream (or bitstream), packet headers are created. In one embodiment, this information may be with a tag tree structure to handle an arbitrary number of code-blocks. In certain situations, tile heades for tiles with a limited number of code-blocks are created. For example, in the case where a tile includes four 128×128 subbands that are each divided into 64×64 code-blocks, then there are four code-blocks that are coded together. The packet header indicates whether there is any data for a particular code-block, the number of zero bit planes if there is data, the length of the coded data and how many coding passes the data includes.</p>
<p id="p-0206" num="0228">Table 9 illustrates one embodiment of a packet structure for packets with 2×2 code-blocks and 1 layer. Referring to Table 9, tag trees are only two levels high. The references to “z” show where the higher level zero bitplanes tag tree information goes, and the locations designated “_” show where the remaining zero bitplanes, coding passes and length information goes.</p>
<p id="p-0207" num="0229">
<tables id="TABLE-US-00023" num="00023">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" rowsep="1">TABLE 9</entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>Inclusion Information for 2x2 Code-blocks and 1 Layer.</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="offset" colwidth="42pt" align="left"/>
<colspec colname="1" colwidth="77pt" align="left"/>
<colspec colname="2" colwidth="98pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>inclusion</entry>
<entry>code</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="2" align="center" rowsep="1"/>
</row>
<row>
<entry/>
<entry>0000</entry>
<entry>0*</entry>
</row>
<row>
<entry/>
<entry>0001</entry>
<entry>110001z<sub>—</sub></entry>
</row>
<row>
<entry/>
<entry>0010</entry>
<entry>11001z_0</entry>
</row>
<row>
<entry/>
<entry>0011</entry>
<entry>11001z_1<sub>—</sub></entry>
</row>
<row>
<entry/>
<entry>0100</entry>
<entry>1101z_00</entry>
</row>
<row>
<entry/>
<entry>0101</entry>
<entry>1101z_01<sub>—</sub></entry>
</row>
<row>
<entry/>
<entry>0110</entry>
<entry>1101z_1_0</entry>
</row>
<row>
<entry/>
<entry>0111</entry>
<entry>1101z_1_1<sub>—</sub></entry>
</row>
<row>
<entry/>
<entry>1000</entry>
<entry>111z_000</entry>
</row>
<row>
<entry/>
<entry>1001</entry>
<entry>111z_001<sub>—</sub></entry>
</row>
<row>
<entry/>
<entry>1010</entry>
<entry>111z_01_0</entry>
</row>
<row>
<entry/>
<entry>1011</entry>
<entry>111z_01_1<sub>—</sub></entry>
</row>
<row>
<entry/>
<entry>1100</entry>
<entry>111z_1_00</entry>
</row>
<row>
<entry/>
<entry>1101</entry>
<entry>111z_1_01<sub>—</sub></entry>
</row>
<row>
<entry/>
<entry>1110</entry>
<entry>111z_1_1_0</entry>
</row>
<row>
<entry/>
<entry>1111</entry>
<entry>111z_1_1_1<sub>—</sub></entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="2" align="center" rowsep="1"/>
</row>
<row>
<entry/>
<entry namest="offset" nameend="2" align="left" id="FOO-00003">*or 10 or 110000.</entry>
</row>
</tbody>
</tgroup>
</table>
</tables>
<br/>
In one embodiment, a 110000 code is used when no code blocks are included for ease of implementation.
</p>
<p id="p-0208" num="0230">One embodiment of a procedue to write the packet headers for tile with a limited number of code-blocks and only a single layer begins with initialization that includes the following:</p>
<p id="p-0209" num="0231">set minimum zero bit planes, MZP, to maximum value for each subband</p>
<p id="h-0022" num="0000">In one embodiment, the maximum value for MZP is 0xF for up to 15 bitplanes or 0x1F for up to 31 bitplanes. Larger values may be used for implementations that can handle more bitplanes.</p>
<p id="p-0210" num="0232">Next while coding coefficients in each code-block in the packet:</p>
<p id="p-0211" num="0233">
<tables id="TABLE-US-00024" num="00024">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="21pt" align="left"/>
<colspec colname="1" colwidth="196pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>Save included or not bit</entry>
</row>
<row>
<entry/>
<entry>Save number of zero bitplanes</entry>
</row>
<row>
<entry/>
<entry>If zero bitplanes less than MZP then MZP = zero bitplanes</entry>
</row>
<row>
<entry/>
<entry>Save number of coding passes</entry>
</row>
<row>
<entry/>
<entry>Save length</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
<br/>
The Save included or not bit is set if every coefficient (after quantization) is zero, thereby indicating that the code-block is not included. Finally, after the information in the tile or subband is processed, the packet header is written as follows:
</p>
<p id="p-0212" num="0234">
<tables id="TABLE-US-00025" num="00025">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="21pt" align="left"/>
<colspec colname="1" colwidth="196pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>write ”1”</entry>
</row>
<row>
<entry/>
<entry>for each subband</entry>
</row>
<row>
<entry/>
<entry>  write ”1”</entry>
</row>
<row>
<entry/>
<entry>  first_flag = 1</entry>
</row>
<row>
<entry/>
<entry>  for each code-block</entry>
</row>
<row>
<entry/>
<entry>    if not included then</entry>
</row>
<row>
<entry/>
<entry>      write ”0”</entry>
</row>
<row>
<entry/>
<entry>    else</entry>
</row>
<row>
<entry/>
<entry>      write ”1”</entry>
</row>
<row>
<entry/>
<entry>      if first_flag then</entry>
</row>
<row>
<entry/>
<entry>        write MZP in tag tree format</entry>
</row>
<row>
<entry/>
<entry>        first_flag = 0</entry>
</row>
<row>
<entry/>
<entry>      write zero bitplanes - MZP in tag tree format</entry>
</row>
<row>
<entry/>
<entry>      write coding passes</entry>
</row>
<row>
<entry/>
<entry>      determine minimum Lblock value</entry>
</row>
<row>
<entry/>
<entry>      write LBlock</entry>
</row>
<row>
<entry/>
<entry>      write length</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
<br/>
Note that the LBlock is defined in the JPEG 2000 Standard in section B.10.7.1.
</p>
<p id="p-0213" num="0235">Note that the packet header is at least one byte and a JPEG 2000 compliant decoder can understand the information that is written.</p>
<p id="p-0214" num="0236">When there are multiple layers, initialization of the MZP variable can be the same as for one layer. While coding each code-block, the included or not indication, the number of coding passes and the length are saved for each layer. Additionally, the following initialization is preferred.</p>
<p id="p-0215" num="0237">
<tables id="TABLE-US-00026" num="00026">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>first_flag = 1</entry>
</row>
<row>
<entry/>
<entry>initialize Lblock for each code-block</entry>
</row>
<row>
<entry/>
<entry>initialize already included for each code-block to false</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
<br/>
In one embodiment, the LBlock is intialized to 3. The “already included” being true means some previous layer had coded data (i.e., the code-block has appeared before).
</p>
<p id="p-0216" num="0238">To write the packet header for each layer, the following procedure may be used:</p>
<p id="p-0217" num="0239">
<tables id="TABLE-US-00027" num="00027">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="21pt" align="left"/>
<colspec colname="1" colwidth="196pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry> write ”1”</entry>
</row>
<row>
<entry/>
<entry> for each subband</entry>
</row>
<row>
<entry/>
<entry>  if layer 0 then write ”1”</entry>
</row>
<row>
<entry/>
<entry>  for each code-block</entry>
</row>
<row>
<entry/>
<entry>    if not included then</entry>
</row>
<row>
<entry/>
<entry>      write ”0”</entry>
</row>
<row>
<entry/>
<entry>    else</entry>
</row>
<row>
<entry/>
<entry>      write ”1”</entry>
</row>
<row>
<entry/>
<entry>      if code-block not already included then</entry>
</row>
<row>
<entry/>
<entry>        if first_flag then</entry>
</row>
<row>
<entry/>
<entry>          write MZP in tag tree format</entry>
</row>
<row>
<entry/>
<entry>          first_flag = 0</entry>
</row>
<row>
<entry/>
<entry>        write zero bitplanes - MZP in tag tree</entry>
</row>
<row>
<entry/>
<entry>format</entry>
</row>
<row>
<entry/>
<entry>        set already included</entry>
</row>
<row>
<entry/>
<entry>      write coding passes</entry>
</row>
<row>
<entry/>
<entry>      determine minimum Lblock value</entry>
</row>
<row>
<entry/>
<entry>      write LBlock</entry>
</row>
<row>
<entry/>
<entry>      write length</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
<br/>
The “already included” infomation can be a seperate bit for each code-block. Otherwise, an otherwise unused value of zero bitplanes can be used to indicate “already included”. For example, if there are 14 bitplanes, seting zero bitplanes to 15 (0xF) can indicate “already included.”
<br/>
Reduced Coded Data Not Using “0” Packets
</p>
<p id="p-0218" num="0240">In JPEG 2000, packet headers are rounded up to bytes. In some cases, however, a packet header may contain only a single zero bit or a number of bits which are less than the number of bits needed to have the packet header fall on a byte boundary. Packet headers are usually rounded to bytes by padding. Also, packet header representations are not unique and although one typically desires the use of the shortest representation as possible, in one embodiment, a representation that is not the shortest possible may be used if the extra bits that are used take the place of bit locations that will have been filled by padding. This may be particularly useful in cases where the information that is encoded in the extra bits indicates something about the next packet in a tile component level partition.</p>
<p id="p-0219" num="0241">For example, if there was a single subband and none of the 2×2 blocks was included, one could output a zero packet. However, in the same amount of space, one could output a zero to indicate that there is something in the packet but there is nothing included in the top level of the tag trees. Alternatively, one could indicate that there is something in the tag trees but it is 0000 (or that there is nothing individually in the four). Thus, these extra bits may be used to give more tag tree information, which is information that would have to occur in the packet header later on and has essentially been moved up. By shifting bits up into earlier packet headers, it may be possible to reduce the size of the overall codestream by a byte (or more).</p>
<p id="p-0220" num="0242">Whereas many alterations and modifications of the present invention will no doubt become apparent to a person of ordinary skill in the art after having read the foregoing description, it is to be understood that any particular embodiment shown and described by way of illustration is in no way intended to be considered limiting. Therefore, references to details of various embodiments are not intended to limit the scope of the claims which in themselves recite only those features regarded as essential to the invention.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-math idrefs="MATH-US-00001" nb-file="US07298912-20071120-M00001.NB">
<img id="EMI-M00001" he="6.35mm" wi="76.20mm" file="US07298912-20071120-M00001.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00002" nb-file="US07298912-20071120-M00002.NB">
<img id="EMI-M00002" he="10.92mm" wi="76.20mm" file="US07298912-20071120-M00002.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00003" nb-file="US07298912-20071120-M00003.NB">
<img id="EMI-M00003" he="5.67mm" wi="76.20mm" file="US07298912-20071120-M00003.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00004" nb-file="US07298912-20071120-M00004.NB">
<img id="EMI-M00004" he="6.35mm" wi="76.20mm" file="US07298912-20071120-M00004.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-claim-statement>We claim:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method comprising:
<claim-text>decomposing input data into a plurality of code-blocks;</claim-text>
<claim-text>assigning the plurality of code-blocks, on a code-block basis, to a plurality of MQ coders to code the plurality of code-blocks in parallel to balance, an amount of coding to be performed by each of the plurality of MQ coders.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method defined in <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising:
<claim-text>performing DC level shifting during encoding and decoding on the input data.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method defined in <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising:
<claim-text>performing a wavelet transform on the input data.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method defined in <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising:
<claim-text>performing scaler quantization on the input data.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method defined in <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising:
<claim-text>exchanging data between a plurality of work memory modules and the plurality of MQ coders.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method defined in <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising:
<claim-text>exchanging data between a plurality of work memory modules and a packet header processing module.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method defined in <claim-ref idref="CLM-00006">claim 6</claim-ref> further comprising:
<claim-text>outputting coded data by combining data generated from the packet header processing module and a plurality of code memory modules.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method defined in <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising:
<claim-text>assigning the plurality of code-blocks to balance an amount of coding to be performed by each of the plurality of MQ coders.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method defined in <claim-ref idref="CLM-00008">claim 8</claim-ref> wherein the assigning balances a number of coefficients and distribution of high and low coefficients between each of the plurality of MQ coders.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method defined in <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising:
<claim-text>allocating a plurality of code memory modules to each of the plurality of MQ coders, each of the plurality of code memory modules to store coded data, length, zero bitplanes and coding passes.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method defined in <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising:
<claim-text>processing input data by performing a wavelet transform;</claim-text>
<claim-text>generating a number of coefficients from the wavelet transform;</claim-text>
<claim-text>storing the number of coefficients in a plurality of code memory modules; and</claim-text>
<claim-text>using a context model to perform encoding based on the number of coefficients.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. An apparatus comprising:
<claim-text>a first logic to decompose input data into a plurality of code-blocks; and</claim-text>
<claim-text>a second logic to assign the plurality of code-blocks, on a code-block basis, to a plurality of MQ coders to code the plurality of code-blocks in parallel to balance an amount of coding to be performed by each of the plurality of MQ coders.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The apparatus defined in <claim-ref idref="CLM-00012">claim 12</claim-ref> further comprising:
<claim-text>a DC level shifter coupled to an image data interface, the DC level shifter to perform DC level shifting during encoding and decoding on the input data.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The apparatus defined in <claim-ref idref="CLM-00012">claim 12</claim-ref> further comprising:
<claim-text>a wavelet transform module coupled to the DC level shifter, the wavelet transform module to perform wavelet transform on the input data.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The apparatus defined in <claim-ref idref="CLM-00012">claim 12</claim-ref> further comprising:
<claim-text>a scaler quantizer module coupled to the wavelet transform module, the scaler quantizer to perform scaler quantization on the input data.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The apparatus defined in <claim-ref idref="CLM-00012">claim 12</claim-ref> further comprising:
<claim-text>a packet header processing module coupled to a plurality of work memory modules via an interface, the packet header processing module to generate packet header information.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The apparatus defined in <claim-ref idref="CLM-00012">claim 12</claim-ref> further comprising:
<claim-text>a plurality of code memory modules coupled to each of the plurality of MQ coders, the plurality of code memory modules to store a first coded data.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The apparatus defined in <claim-ref idref="CLM-00017">claim 17</claim-ref> wherein a combined data of the first coded data and a packet header data generated from a packet header processing module is output as a second coded data.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The apparatus defined in <claim-ref idref="CLM-00012">claim 12</claim-ref> further comprising:
<claim-text>a plurality of code memory modules to store length, zero bitplanes and coding passes.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The apparatus defined in <claim-ref idref="CLM-00012">claim 12</claim-ref> further comprising:
<claim-text>the plurality of code blocks to balance an amount of coding to be performed by each of the plurality of MQ coders.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. The apparatus defined in <claim-ref idref="CLM-00020">claim 20</claim-ref>, wherein the plurality of code-blocks balance a number of coefficients and distribution of high and low coefficients between each of the plurality of MQ coders.</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. The apparatus defined in <claim-ref idref="CLM-00012">claim 12</claim-ref> further comprising:
<claim-text>a context model to perform encoding based on a number of coefficients.</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>
