<us-patent-grant lang="EN" dtd-version="v4.2 2006-08-23" file="US07299237-20071120.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20071106" date-publ="20071120">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>07299237</doc-number>
<kind>B1</kind>
<date>20071120</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>10922618</doc-number>
<date>20040819</date>
</document-id>
</application-reference>
<us-application-series-code>10</us-application-series-code>
<us-term-of-grant>
<us-term-extension>428</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>7</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>17</main-group>
<subgroup>30</subgroup>
<symbol-position>L</symbol-position>
<classification-value>N</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>707101</main-classification>
<further-classification>707  1</further-classification>
<further-classification>707  2</further-classification>
<further-classification>707100</further-classification>
<further-classification>707204</further-classification>
<further-classification>707205</further-classification>
<further-classification>715500</further-classification>
<further-classification>715513</further-classification>
<further-classification>705 14</further-classification>
</classification-national>
<invention-title id="d0e53">Dynamically pipelined data migration</invention-title>
<references-cited>
<citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>6321208</doc-number>
<kind>B1</kind>
<name>Barnett et al.</name>
<date>20011100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>705 14</main-classification></classification-national>
</citation>
<citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>6704747</doc-number>
<kind>B1</kind>
<name>Fong</name>
<date>20040300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707100</main-classification></classification-national>
</citation>
<citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6963880</doc-number>
<kind>B1</kind>
<name>Pingte et al.</name>
<date>20051100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707100</main-classification></classification-national>
</citation>
<citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>7103619</doc-number>
<kind>B1</kind>
<name>Rajpurkar et al.</name>
<date>20060900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707204</main-classification></classification-national>
</citation>
<citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2003/0110155</doc-number>
<kind>A1</kind>
<name>Minagawa</name>
<date>20030600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707  1</main-classification></classification-national>
</citation>
<citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2004/0034618</doc-number>
<kind>A1</kind>
<name>Lu et al.</name>
<date>20040200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707  1</main-classification></classification-national>
</citation>
<citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2004/0034619</doc-number>
<kind>A1</kind>
<name>Lu et al.</name>
<date>20040200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707  1</main-classification></classification-national>
</citation>
<citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2004/0093344</doc-number>
<kind>A1</kind>
<name>Berger et al.</name>
<date>20040500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707102</main-classification></classification-national>
</citation>
<citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2004/0216030</doc-number>
<kind>A1</kind>
<name>Hellman et al.</name>
<date>20041000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>715500</main-classification></classification-national>
</citation>
<citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>2005/0050068</doc-number>
<kind>A1</kind>
<name>Vaschillo et al.</name>
<date>20050300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707100</main-classification></classification-national>
</citation>
<citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>2005/0080755</doc-number>
<kind>A1</kind>
<name>Aoyama</name>
<date>20050400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707  1</main-classification></classification-national>
</citation>
<citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>2005/0131970</doc-number>
<kind>A1</kind>
<name>Salazar et al.</name>
<date>20050600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707205</main-classification></classification-national>
</citation>
<citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>2005/0149484</doc-number>
<kind>A1</kind>
<name>Fox et al.</name>
<date>20050700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707  1</main-classification></classification-national>
</citation>
<citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>2005/0149537</doc-number>
<kind>A1</kind>
<name>Balin et al.</name>
<date>20050700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707100</main-classification></classification-national>
</citation>
<citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>2006/0167909</doc-number>
<kind>A1</kind>
<name>Mendis et al.</name>
<date>20060700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707101</main-classification></classification-national>
</citation>
<citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>2006/0288032</doc-number>
<kind>A1</kind>
<name>Harris et al.</name>
<date>20061200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707101</main-classification></classification-national>
</citation>
</references-cited>
<number-of-claims>30</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>707100</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>707204</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>707205</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>707  1</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>707  2</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>705 14</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715500</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715513</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>4</number-of-drawing-sheets>
<number-of-figures>4</number-of-figures>
</figures>
<parties>
<applicants>
<applicant sequence="001" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Clark</last-name>
<first-name>James Andrew</first-name>
<address>
<city>Sunnyvale</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="002" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Tong</last-name>
<first-name>Ka-Leung</first-name>
<address>
<city>Hong Kong</city>
<country>CN</country>
</address>
</addressbook>
<nationality>
<country>CN</country>
</nationality>
<residence>
<country>CN</country>
</residence>
</applicant>
<applicant sequence="003" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Wu</last-name>
<first-name>Xue D.</first-name>
<address>
<city>Cupertino</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="004" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Vong</last-name>
<first-name>Frederick</first-name>
<address>
<city>Fremont</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
</applicants>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Hickman Palermo Truong &amp; Becker LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="02" rep-type="attorney">
<addressbook>
<last-name>Nicholes</last-name>
<first-name>Christian A.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</parties>
<assignees>
<assignee>
<addressbook>
<orgname>Sun Microsystems, Inc.</orgname>
<role>02</role>
<address>
<city>Santa Clara</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Alam</last-name>
<first-name>Shahid</first-name>
<department>2162</department>
</primary-examiner>
<assistant-examiner>
<last-name>Ly</last-name>
<first-name>Anh</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">In accordance with one embodiment of the present invention, there is provided a technique for dynamically pipelined data migration. According to one aspect, it is determined that a source schema-conformant source data set is to be converted to a target schema-conformant target data set. A plurality of conversion mechanisms, which can be invoked in succession to convert the source data set into the target data set, is automatically determined. The plurality of conversion mechanisms comprises (a) an initial set of one or more conversion mechanisms that can be invoked in succession to convert the source data set to a final intermediate data set, and (b) a final conversion mechanism that converts the final intermediate data set to the target data set. Each conversion mechanism in the plurality of conversion mechanisms is successively invoked, in order, to convert the set of source data set to the target data set.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="149.01mm" wi="135.47mm" file="US07299237-20071120-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="199.90mm" wi="145.88mm" file="US07299237-20071120-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="242.57mm" wi="184.49mm" orientation="landscape" file="US07299237-20071120-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="263.99mm" wi="152.65mm" file="US07299237-20071120-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="259.08mm" wi="167.30mm" orientation="landscape" file="US07299237-20071120-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND</heading>
<p id="p-0002" num="0001">In order to make the storage and retrieval of data faster and more efficient, data may be stored in an organized form in a data repository such as a database. Data stored in an organized form often conforms to a “schema” that indicates the structure of the data. For example, given a plurality of entities represented by data stored in a database, a database schema may indicate a separate table for each entity type, a separate table column for each attribute of a particular entity type, and a data type (e.g., number, string, etc.) for each table column.</p>
<p id="p-0003" num="0002">Sometimes, it is desirable to take data that conforms in structure to one schema and modify that data so that the data conforms in structure to another, different schema instead. For example, a database administrator may wish to export data that is stored in a source database and import that data into another, different, target database. The target database server might be a newer version of the source database server, produced by the same database software vendor. Alternatively, the source database server and the target database server might be produced by entirely different database software vendors. For another example, when a new version of an application is installed, the application installation program might need to modify existing data produced by an old version of the application so that the data conforms to a new schema used by the new version of the application.</p>
<p id="p-0004" num="0003">In such cases, the schema used by the source database or application may differ from the schema used by the target database or application. For example, data types supported by the source database might differ from data types supported by the target database. To facilitate data conversion, data types of table columns might need to be altered. Table columns might need to be split or merged. The format of data within a particular table column might need to be altered. Such data conversion is referred to as “data migration.”</p>
<p id="p-0005" num="0004">According to a “manual migration” approach, a database administrator obtains data contained in a source database by manually constructing and executing Structured Query Language (SQL) “select” statements. Once the database administrator has obtained the data from the source database, the database administrator inputs the data into a custom-made conversion program. The custom-made conversion program is specifically designed to take data that conforms to the source schema and alter the data so that the data conforms to the target schema. After the custom-made conversion program has produced the altered data, the database administrator loads the altered data into the target database by manually constructing and executing SQL “insert” statements.</p>
<p id="p-0006" num="0005">Although a database software vendor might sometimes provide a conversion program that converts data from the form used in a second-to-most-recent version of that vendor's database to the form used in the most recent version of that vendor's database, database software vendors typically do not provide conversion programs that convert data from forms used in less recent versions of those vendors' databases to the forms used in the most recent versions of those vendors' databases. As a result, using the “manual migration” approach, a database administrator might be forced to create a new custom-made program that converts data from a form used in an old version of a database to a form used in the newest version of the database.</p>
<heading id="h-0002" level="1">SUMMARY</heading>
<p id="p-0007" num="0006">In accordance with one embodiment of the present invention, there is provided a technique for dynamically pipelined data migration. Using this technique, a sequence or “pipeline” of conversion mechanisms that will transform data that conforms to a source schema into data that conforms to a target schema are dynamically and automatically determined and applied.</p>
<p id="p-0008" num="0007">In one embodiment, it is determined that a set of source data, which conforms to a source schema, is to be converted to a set of target data, which conforms to a target schema. The target schema differs from the source schema. A plurality of conversion mechanisms, which can be invoked in succession to convert the set of source data to the set of target data, is automatically determined. The plurality of conversion mechanisms comprises (a) an initial set of one or more conversion mechanisms that can be invoked in succession to convert the set of source data to a final set of intermediate data, and (b) a final conversion mechanism that converts the final set of intermediate data to the set of target data. The final set of intermediate data conforms to a final intermediate schema, which differs from both the source schema and the target schema. Each conversion mechanism in the plurality of conversion mechanisms is invoked in succession to convert the set of source data to the set of target data.</p>
<p id="p-0009" num="0008">Thus, according to one embodiment, a “pipeline” of conversion mechanisms is dynamically determined, and data is processed through each conversion mechanism in the pipeline until the set of target data is produced, thereby accomplishing the desired data migration.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. 1</figref> is an operational flow diagram that illustrates a high-level overview of the operation of an embodiment of the present invention.</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 2</figref> is a functional block diagram that illustrates a computing environment, according to an embodiment of the present invention, in which multiple conversion mechanisms are applied in succession to a set of data to derive a set of target data that conforms to a target schema.</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 3</figref> is an operational flow diagram that illustrates the operation of an embodiment of the present invention.</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 4</figref> is a hardware block diagram of an example computer entity, which may be used to embody one or more components of an embodiment of the present invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION OF EMBODIMENT(S)</heading>
<heading id="h-0005" level="1">Conceptual Overview</heading>
<p id="p-0014" num="0013">In accordance with one embodiment of the present invention, techniques are provided for dynamically pipelined data migration. An operational flow diagram, which illustrates a high level overview of the operation of one embodiment of the present invention, is shown in <figref idref="DRAWINGS">FIG. 1</figref>. The operational flow diagram of <figref idref="DRAWINGS">FIG. 1</figref> illustrates a technique in which data is automatically migrated through a dynamically determined pipeline of conversion mechanisms. Either a single computing device or multiple separate computing devices may perform operations of the technique.</p>
<p id="p-0015" num="0014">Referring to <figref idref="DRAWINGS">FIG. 1</figref>, in block <b>102</b>, it is determined that a set of source data is to be converted to a set of target data. The set of source data conforms to a source schema, and the set of target data conforms to a target schema.</p>
<p id="p-0016" num="0015">In block <b>104</b>, a plurality of conversion mechanisms is automatically determined. The plurality of conversion mechanisms comprises (a) an initial set of one or more conversion mechanisms and (b) a final conversion mechanism. Each conversion mechanism, when applied to a set of data, converts a set of data that conforms to one schema into a set of data that conforms to another schema. The first conversion mechanism in the initial set converts the set of source data, which conforms to the source schema, into a set of data that conforms to some intermediate schema that differs from the source and target schemas. The final conversion mechanism converts a set of data that conforms to some intermediate schema into the set of target data, which conforms to the target schema.</p>
<p id="p-0017" num="0016">In block <b>106</b>, each conversion mechanism in the plurality of conversion mechanisms is invoked in succession to convert the source data to the target data.</p>
<p id="p-0018" num="0017">In other aspects, the invention encompasses in some embodiments, computer apparatus, computing systems and computer-readable media configured to carry the foregoing technique.</p>
<heading id="h-0006" level="1">System Overview</heading>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 2</figref> is a functional block diagram that illustrates a computing environment <b>200</b>, according to an embodiment of the present invention, in which multiple conversion mechanisms are applied in succession to a set of data to derive a set of target data that conforms to a target schema.</p>
<p id="p-0020" num="0019">The computing environment of <figref idref="DRAWINGS">FIG. 2</figref> depicts a pipeline-constructing mechanism <b>202</b>, a mapping data structure <b>204</b>, conversion mechanisms <b>206</b>A-N, a source database <b>208</b>, a target database <b>210</b>, a specific-to-general (“STG”) format conversion mechanism <b>212</b>, and a general-to-specific (“GTS”) format conversion mechanism <b>214</b>. The components depicted in the computing environment of <figref idref="DRAWINGS">FIG. 2</figref> may be embodied within a single computing device or distributed among multiple separate computing devices.</p>
<p id="p-0021" num="0020">Source database <b>208</b> contains a source-specific-formatted (“SSF”) data set <b>216</b>. SSF data set <b>216</b> conforms to a source schema. SSF data set <b>216</b> is formatted according to a source-specific format used by source database <b>208</b>. As used herein, a “format” is any arranging, encoding, delimiting, or markup mechanism or plan that can be used to indicate the structure and/or organization of data, independently of the actual content of that data. A “source-specific” format is a format that is used specifically by a repository, container, object, or other entity from which data originates to represent the format of that data within that repository, container, object, or other entity. For example, the source-specific format may be a relational table format. Other examples of source-specific formats include comma-delimited file formats, spreadsheet formats, page description language formats, and markup language formats.</p>
<p id="p-0022" num="0021">When invoked, STG format conversion mechanism <b>212</b> reads SSF data set <b>216</b> from source database <b>208</b>. STG format conversion mechanism <b>212</b> writes the information contained in SSF data set <b>216</b> into a self-describing-formatted (“SDF”) data set <b>218</b>A. Like SSF data set <b>216</b>, SDF data set <b>218</b>A conforms to the source schema. However, unlike SSF data set <b>216</b>, SDF data set <b>218</b>A is formatted according to a self-describing format rather than the source-specific format. As used herein, a “self-describing” format is a format that expressly describes the organization or structure of data, such that no additional information beyond that expressed by the descriptive mechanisms used by the format is necessary to understand or interpret the organization or structure of the data that is formatted according to the format; the manner in which the organization or structure of self-describing-formatted data should be interpreted is apparent from the formatting mechanisms (such as tags or other metadata) themselves. One example of a self-describing format is Extensible Markup Language (XML). Another example of a self-describing format is Standard Generalized Markup Language (SGML).</p>
<p id="p-0023" num="0022">In one embodiment, SDF data set <b>218</b>A contains nested XML elements that indicate the structure imposed by the source schema. For example, SDF data set <b>218</b>A may contain nested XML elements with tags such as “&lt;table&gt;,” “&lt;row&gt;,” and “&lt;column&gt;.” The nesting of the XML elements reflects the structure of SSF data set <b>216</b>.</p>
<p id="p-0024" num="0023">When pipeline-constructing mechanism <b>202</b> receives a command to convert SDF data set <b>218</b>A into an SDF data set <b>218</b>N that conforms to a target schema, pipeline-constructing mechanism <b>202</b> determines how the conversion process is to be done. Pipeline-constructing mechanism <b>202</b> consults mapping data structure <b>204</b> to determine a sequence of conversion mechanisms <b>206</b>A-N that can collectively convert SDF data set <b>218</b>A into SDF data set <b>218</b>N.</p>
<p id="p-0025" num="0024">There might not be any single one of conversion mechanisms <b>206</b>A-N that can convert SDF data set <b>218</b>A directly into SDF data set <b>218</b>N. Pipeline-constructing mechanism <b>202</b> either is provided with or automatically determines (a) the identity of the source schema to which SDF data set <b>218</b>A conforms, and (b) the identity of the target schema to which SDF data set <b>218</b>N needs to conform when generated. Using this information, pipeline-constructing mechanism <b>202</b> determines, from mapping data structure <b>204</b>, a conversion mechanism <b>206</b>N that can convert an SDF data set <b>218</b>M, which conforms to some intermediate schema that differs from both the source schema and the target schema, into SDF data set <b>218</b>N, which conforms to the target schema.</p>
<p id="p-0026" num="0025">In a similar manner, pipeline-constructing mechanism <b>202</b> determines, from mapping data structure <b>204</b>, one or more other conversion mechanisms <b>206</b>A-M that, when applied in succession, collectively convert SDF data set <b>218</b>A into SDF data set <b>218</b>M. Each of conversion mechanisms <b>206</b>B-M converts a set of SDF data produced by an earlier conversion mechanism into a set of SDF data that conforms to an intermediate schema that differs from the source and target schemas. Thus, pipeline-constructing mechanism <b>202</b> determines and constructs a sequence, or “pipeline” of conversion mechanisms that, when invoked in succession, can collectively convert SDF data set <b>218</b>A into SDF data set <b>218</b>N.</p>
<p id="p-0027" num="0026">In one embodiment, each of SDF data sets <b>218</b>A-N conforms to a different schema, but each of SDF data sets <b>218</b>A-N is in the same self-describing format. For example, each of SDF data sets <b>218</b>A-N may be described in XML format. Because each of SDF data sets <b>218</b>A-N is, in one embodiment, in the same self-describing format, conversion mechanisms <b>206</b>A-N do not need to be custom-designed to account for differences in specialized and proprietary formats such as might be used by different database software vendors.</p>
<p id="p-0028" num="0027">In one embodiment, mapping data structure <b>204</b> contains multiple entries. Each entry specifies a schema identity pair and a corresponding conversion mechanism that can convert data sets that conform to one of the pair's schemas into data sets that conform to the other of the pair's schemas. An example of mapping data structure <b>204</b> is shown below in TABLE 1.</p>
<p id="p-0029" num="0028">
<tables id="TABLE-US-00001" num="00001">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" rowsep="1">TABLE 1</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>EXAMPLE MAPPING DATA STRUCTURE</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="70pt" align="left"/>
<colspec colname="2" colwidth="133pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>SCHEMA “A” TO</entry>
<entry>CONVERSION MECHANISM 206A</entry>
</row>
<row>
<entry/>
<entry>SCHEMA “B”</entry>
</row>
<row>
<entry/>
<entry>SCHEMA “B” TO</entry>
<entry>CONVERSION MECHANISM 206M</entry>
</row>
<row>
<entry/>
<entry>SCHEMA “C”</entry>
</row>
<row>
<entry/>
<entry>SCHEMA “C” TO</entry>
<entry>CONVERSION MECHANISM 206N</entry>
</row>
<row>
<entry/>
<entry>SCHEMA “D”</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0030" num="0029">For example, mapping data structure <b>204</b> may indicate that conversion mechanism <b>206</b>A can convert data sets that conform to schema “A” into data sets that conform to schema “B.” Mapping data structure <b>204</b> may also indicate that conversion mechanism <b>206</b>M can convert data sets that conform to schema “B” into data sets that conform to schema “C.” Thus, even if no single one of conversion mechanisms <b>206</b>A-N can independently and directly convert data sets that conform to schema “A” into data sets that conform to schema “C,” by consulting mapping data structure <b>204</b>, pipeline-construction mechanism <b>202</b> can determine a pipeline of multiple conversion mechanisms that can collectively perform this conversion, if such a pipeline can be constructed. In the above example, the conversion mechanisms in the pipeline are conversion mechanisms <b>206</b>A and <b>206</b>M, in that order. Therefore, a single conversion mechanism that independently and directly converts a schema “A”—conformant data set into a schema “C”-conformant data does not need to be custom-made.</p>
<p id="p-0031" num="0030">After pipeline-constructing mechanism <b>202</b> has determined the pipeline of conversion mechanisms <b>206</b>A-N, pipeline-constructing mechanism <b>202</b> inputs SDF data set <b>218</b>A into conversion mechanism <b>206</b>A. Conversion mechanism <b>206</b>A receives SDF data set <b>218</b>A, performs a specified modification to SDF data set <b>218</b>A, and outputs SDF data set <b>218</b>B. For each particular conversion mechanism <b>206</b>B-N in the pipeline, pipeline-constructing mechanism <b>202</b> takes the output of the conversion mechanism immediately previous to the particular conversion mechanism and provides that output as input to the particular conversion mechanism. Conversion mechanisms <b>206</b>A-N may modify the contents and/or the structures of SDF data sets <b>218</b>A-N. The output of the last conversion mechanism in the pipeline, denoted in <figref idref="DRAWINGS">FIG. 2</figref> as conversion mechanism <b>206</b>N (although two or more conversion mechanisms may be in the pipeline), is SDF data set <b>218</b>N, which conforms to the target schema.</p>
<p id="p-0032" num="0031">For example, such a pipeline might be useful when migrating data from an old version of a database to a new version of the database. Data in the old version of the database (e.g., “version 1”) might conform to schema “A,” while data in the new version of the database (e.g., “version 3”) might need to conform to schema “C.” There might not exist any single conversion mechanism that directly converts schema “A”-conformant data into schema “C”-conformant data. However, there might be an intermediate version of the database (e.g., “version 2”), and data in the intermediate version might conform to schema “B.” Additionally, there might exist a conversion mechanism that converts schema “A”-conformant data into schema “B”-conformant data, and another conversion mechanism that converts schema “B”-conformant data into schema “C”-conformant data. By pipelining these conversion mechanisms as described above, schema “A”-conformant data may be converted automatically into schema “C”-conformant data.</p>
<p id="p-0033" num="0032">In modifying the contents and/or the structures of SDF data sets <b>218</b>A-N, conversion mechanisms <b>206</b>A-N may insert text, delete text, move text, rename text, etc., according to specified instructions and/or mappings implemented in or provided to conversion mechanisms <b>206</b>A-N.</p>
<p id="p-0034" num="0033">After SDF data set <b>218</b>N has been generated, GTS format conversion mechanism <b>214</b> reads SDF data set <b>218</b>N. GTS format conversion mechanism <b>214</b> writes the information contained in SDF data set <b>218</b>N into a target-specific-formatted (“TSF”) data set <b>220</b> in target database <b>210</b>. In doing so, GTS format conversion mechanism <b>214</b> may create, in target database <b>210</b>, “container” data structures (e.g., database tables) equivalent to those indicated by SDF data set <b>218</b>N. Like SDF data set <b>218</b>N, TSF data set <b>220</b> conforms to the target schema. However, unlike SDF data set <b>218</b>N, TSF data set <b>220</b> is formatted according to a target-specific format rather than the self-describing format. For example, the target-specific format may be a relational table format.</p>
<p id="p-0035" num="0034">Thus, in computing environment <b>200</b>, multiple conversion mechanisms <b>206</b>A-N are applied in succession to a set of data, which originally conforms to the source schema, to derive TSF data set <b>220</b>, which conforms to the target schema. Although computing environment <b>200</b> comprises databases <b>208</b> and <b>210</b>, alternative embodiments of the invention do not comprise databases. In one alternative embodiment, for example, SSF data set <b>216</b> and TSF data set <b>220</b> are contained in flat files. In another alternative embodiment, for example, SSF data set <b>216</b> and TSF data set <b>220</b> are contained in binary files. SSF data set <b>216</b> may be in a different format than TSF data set <b>220</b>.</p>
<p id="p-0036" num="0035">According to one embodiment, pipeline-constructing mechanism <b>202</b>, conversion mechanisms <b>206</b>A-N, STG format conversion mechanism <b>212</b>, and GTS format conversion mechanism <b>214</b> are programs that execute on a computer system such as is described with reference to in <figref idref="DRAWINGS">FIG. 4</figref> below.</p>
<p id="p-0037" num="0036">According to one embodiment, conversion mechanisms <b>206</b>A-N are Extensible Stylesheet Language Transformations (XSLT) processors that accept XSLT style sheets as input and apply changes specified in those XSLT style sheets to SDF data sets <b>218</b>A-N, thereby converting the schema-conformance of SDF data sets <b>218</b>A-N from one schema to another. According to an alternative embodiment, conversion mechanisms <b>206</b>A-N are generic context translation programs that accept XML-formatted mappings as input and apply the changes specified by those mappings to SDF data sets <b>218</b>A-N.</p>
<p id="p-0038" num="0037">As described above, according to one embodiment, SDF data sets <b>218</b>A-N are formatted in XML. According to an alternative embodiment, SDF data sets <b>218</b>A-N are formatted in Standard Generalized Markup Language (SGML). According to yet another alternative embodiment, SDF data sets <b>218</b>A-N are formatted in a self-describing markup language other than XML or SGML.</p>
<heading id="h-0007" level="1">Sample Operation</heading>
<p id="p-0039" num="0038">A sample operation of computing environment <b>200</b> in accordance with one embodiment of the present invention will now be described. In the following discussion, reference will be made to the functional block diagram of <figref idref="DRAWINGS">FIG. 2</figref> and the flow diagram of <figref idref="DRAWINGS">FIG. 3</figref>. Either a single computing device or multiple separate computing devices may perform operations of the technique depicted in <figref idref="DRAWINGS">FIG. 3</figref>.</p>
<p id="p-0040" num="0039">Referring to <figref idref="DRAWINGS">FIG. 3</figref>, in block <b>302</b>, a source data set is converted from a source-specific format to a self-describing format. For example, STG format conversion mechanism <b>212</b> may read SSF data set <b>216</b> from source database <b>208</b> and convert the format of SSF data set <b>216</b> to a self-describing format such as XML. STG format conversion mechanism <b>212</b> may write the converted-format data set to SDF data set <b>218</b>A.</p>
<p id="p-0041" num="0040">In block <b>304</b>, a source schema to which the source data set conforms is determined. For example, pipeline-constructing mechanism <b>202</b> may determine, based on user input or information contained in SDF data set <b>218</b>A, an identity of a source schema to which SDF data set <b>218</b>A conforms.</p>
<p id="p-0042" num="0041">In block <b>306</b>, a target schema to which the source data set should be made to conform is determined. For example, pipeline-constructing mechanism <b>202</b> may determine, based on user input, an identity of a target schema to which SDF data set <b>218</b>A should be made to conform.</p>
<p id="p-0043" num="0042">In block <b>308</b>, two or more conversion mechanisms that will collectively convert the source data set into a target data set that conforms to the target schema are selected from among a plurality of conversion mechanisms. For example, pipeline-constructing mechanism <b>202</b> may consult mapping data structure <b>204</b> to determine a sequence of two or more conversion mechanisms <b>206</b>A-N that will collectively convert SDF data set <b>218</b>A to SDF data set <b>218</b>N when the outputs of one or more of conversion mechanisms <b>206</b>A-N are provided as inputs to one or more of conversion mechanisms <b>206</b>A-N. For example, mapping data structure <b>204</b> may indicate that conversion mechanism <b>206</b>A converts SDF data set <b>218</b>A to SDF data set <b>218</b>B, and that conversion mechanism <b>206</b>N converts SDF data set <b>218</b>B to SDF data set <b>218</b>N. As a result, pipeline-constructing mechanism <b>202</b> may determine that the sequence will comprise conversion mechanisms <b>206</b>A and <b>206</b>N, in that order.</p>
<p id="p-0044" num="0043">In block <b>310</b>, the source data set is provided as input to the first conversion mechanism in the sequence of selected conversion mechanisms. For example, pipeline-constructing mechanism <b>202</b> may provide SDF data set <b>218</b>A as input to conversion mechanism <b>206</b>A.</p>
<p id="p-0045" num="0044">In block <b>312</b>, the output of each conversion mechanism in the sequence of selected conversion mechanisms is provided as input to the next conversion mechanism in the sequence, until the last conversion mechanism in the sequence has generated output. For example, assuming that conversion mechanism <b>206</b>A outputs SDF data set <b>218</b>B, pipeline-constructing mechanism <b>202</b> may provide SDF data set <b>218</b>B as input to conversion mechanism <b>206</b>B. Assuming that conversion mechanism <b>206</b>N outputs SDF data set <b>218</b>N, pipeline-constructing mechanism <b>202</b> may provide SDF data set <b>218</b>B as input to conversion mechanism <b>206</b>N. This process continues until SDF data set <b>218</b>N is generated. In one embodiment, each of SDF data sets <b>218</b>A-N conforms to a different schema.</p>
<p id="p-0046" num="0045">In block <b>314</b>, the target data set is converted from the self-describing format to a target-specific format. For example, GTS format conversion mechanism <b>214</b> may read SDF data set <b>218</b>N and convert the format of SDF data set <b>218</b>N to a target-specific format that is used in target database <b>210</b>. GTS format conversion mechanism <b>214</b> may store the converted-format data set as TSF data set <b>220</b> in target database <b>210</b>.</p>
<p id="p-0047" num="0046">In the embodiment described above, data is converted to and from a self-describing format. However, in an alternative embodiment, data does not need to be converted to and/or from a self-describing format. In an alternative embodiment, each conversion mechanism in the sequence of selected conversion mechanisms converts the format of input SDF data sets as well as the schema to which those SDF data sets conform.</p>
<heading id="h-0008" level="1">SAX Processing</heading>
<p id="p-0048" num="0047">According to one embodiment, one or more of conversion mechanisms <b>206</b>A-N uses Simple API for XML (SAX) processing to read, convert, and write SDF data sets <b>218</b>A-N, which may be XML-formatted documents. Using SAX processing, conversion mechanisms <b>206</b>A-N do not need to read an SDF data set entirely into memory before beginning to process and convert that SDF data set. Instead, using SAX processing, conversion mechanisms <b>206</b>A-N may read a portion of a particular SDF data set, process and convert that portion, write the results of the processing, and then read another portion of the particular SDF data set. This permits operations to be performed on large data sets without using excessively large amounts of memory. This also allows conversion mechanisms <b>206</b>A-N to generate output as conversion mechanisms <b>206</b>A-N receive input. Alternatively, a Document Object Model (DOM) may be used to process SDF data sets <b>218</b>A-N.</p>
<heading id="h-0009" level="1">Embedded Complex Data Types</heading>
<p id="p-0049" num="0048">In more advanced databases and data repository systems, data structures may contain complex embedded data structures whose structures at least partially influence the meaning or interpretation of the content of those embedded data structures. For example, a column of a database table may be of an “XML type” data type; each entry in such a column may be a separate embedded XML document that has a hierarchical structure that at least partially influences the meaning or interpretation of that embedded XML document. Each entry in such a column may conform to some schema that differs from the schema to which the column's database table conforms. Indeed, an embedded XML document may contain yet another embedded XML document that conforms to a different schema than that of the containing XML document.</p>
<p id="p-0050" num="0049">Sometimes, the conversion of a source data set to a target data set may require the conversion of embedded data structures so that those embedded data structures conform to a different schema. Sometimes, an embedded data structure might need to be converted to conform to a different schema even when the rest of the “containing” data structure does not need to be converted. For example, the structure of embedded XML documents within a particular database table might need to be modified even if the structure of the particular database table does not need to be modified.</p>
<p id="p-0051" num="0050">In one embodiment, one or more of conversion mechanisms <b>206</b>A-N includes, or is followed in the pipeline by, a location mechanism that locates embedded data structures within a “containing” data structure. The location mechanism receives an SDF data set as input. The location mechanism identifies, in the SDF data set (the “containing data structure”), the start of an embedded data structure and the end of the embedded data structure. In response to identifying the start and end of an embedded data structure, the location mechanism buffers all of the data between the start of the embedded data structure and the end of the embedded data structure. Instead of passing the embedded data structure unmodified to the next of conversion mechanisms <b>206</b>A-N in the “main” pipeline, the location mechanism “routes” the embedded data structure to the first of potentially many conversion mechanisms in a “sub-pipeline” that is dynamically constructed by pipeline-construction mechanism <b>202</b> in the same manner as the “main” pipeline. The location mechanism passes through, to the next of conversion mechanisms <b>206</b>A-N in the “main” pipeline, any data that is contained within the containing data structure but not within the embedded data structure.</p>
<p id="p-0052" num="0051">In the same manner as conversion mechanisms <b>206</b>A-N in the “main” pipeline, conversion mechanisms in the “sub-pipeline” collectively convert the embedded data structure so that the embedded data structure conforms to a specified target schema that differs from the source schema to which the embedded data structure originally conformed. Once the embedded data structure has been converted to conform to the specified target schema (which may differ from the target schema to which the container data structure conforms after conversion), the converted embedded data structure is “re-embedded” into the containing data structure and passed, with the rest of the containing data structure, to the next of conversion mechanisms <b>206</b>A-N in the “main” pipeline.</p>
<p id="p-0053" num="0052">A location mechanism may use any of several techniques to locate the start and end of an embedded data structure. In one embodiment, a location mechanism identifies the start and end of an embedded data structure by finding XML elements that are located within a specified “path” in the containing data structure. A “path” may be specified according to XML Path Language (XPath), for example.</p>
<p id="p-0054" num="0053">In an alternative embodiment, a location mechanism identifies the start and end of an embedded data structure by finding starting and ending markup language tags that have specified names that distinguish the starting and ending markup language tags from other tags in the containing data structure. For example, an embedded data structure may begin with an “&lt;embed&gt;” tag and end with an “&lt;/embed&gt;” tag. STG format conversion mechanism <b>212</b> may insert such special tags before and after an embedded data structure when STG format conversion mechanism <b>212</b> detects such an embedded data structure, for example.</p>
<heading id="h-0010" level="1">“Escaping” Embedded Data Structures</heading>
<p id="p-0055" num="0054">As is described above with reference to block <b>302</b> of <figref idref="DRAWINGS">FIG. 3</figref>, in one embodiment, a source data set is converted from a source-specific format to a self-describing format. In one embodiment, the self-describing format is XML. The XML specification requires a certain “XML declaration” element to appear at the beginning of an XML document. The XML specification prohibits such an “XML declaration” element from appearing anywhere in an XML document other than at the beginning.</p>
<p id="p-0056" num="0055">As is described above, an embedded data structure also may be represented as an XML document. If both the containing data structure and the embedded data structure contained therein have the XML-specification-required “XML declaration” element, then the containing data structure will have an “XML declaration” element somewhere other than at the beginning of the containing data structure, in violation of the XML specification. XML specification-compliant parsers, which may be implemented in one or more of conversion mechanisms <b>206</b>A-N, may return an error in response to detecting such a violation.</p>
<p id="p-0057" num="0056">To remedy this problem, in one embodiment, when a source data set is converted from the source-specific format to the self-describing format, any embedded data structures contained within the source data set are “escaped.” In one embodiment, an embedded data structure is “escaped” by converting “less-than” (“&lt;”) symbols in the embedded data structure into other specified symbols, such as “&amp;lt;”. After such a conversion, XML specification-compliant parsers will not recognize an embedded “XML declaration” element as such.</p>
<p id="p-0058" num="0057">“Escaped” embedded data structures may be “routed” to a conversion mechanism in a “sub-pipeline” as described above. In the course of parsing the embedded data structure, the conversion mechanisms in the “sub-pipeline” automatically “un-escape” the embedded data structure, so that any “&amp;lt;” symbols are converted back into “&lt;” symbols. Before the converted embedded data structure is “re-embedded” into the containing data structure at the end of the “sub-pipeline,” the converted embedded data structure is “re-escaped.” For example, the location mechanism that initially “routed” the embedded structure to the “sub-pipeline” may receive and re-escape the converted embedded data structure prior to “re-embedding” the converted embedded structure into the containing data structure.</p>
<heading id="h-0011" level="1">Hardware Overview</heading>
<p id="p-0059" num="0058"><figref idref="DRAWINGS">FIG. 4</figref> is a block diagram that illustrates a computer system <b>400</b> upon which an embodiment of the invention may be implemented. Computer system <b>400</b> includes a bus <b>402</b> for facilitating information exchange, and one or more processors <b>404</b> coupled with bus <b>402</b> for processing information. Computer system <b>400</b> also includes a main memory <b>406</b>, such as a random access memory (RAM) or other dynamic storage device, coupled to bus <b>402</b> for storing information and instructions to be executed by processor <b>404</b> as apparatus. Main memory <b>406</b> also may be used for storing temporary variables or other intermediate information during execution of instructions by processor <b>404</b>. Computer system <b>400</b> may further include a read only memory (ROM) <b>408</b> or other static storage device coupled to bus <b>402</b> for storing static information and instructions for processor <b>404</b>. A storage device <b>410</b>, such as a magnetic disk or optical disk, is provided and coupled to bus <b>402</b> for storing information and instructions.</p>
<p id="p-0060" num="0059">Computer system <b>400</b> may be coupled via bus <b>402</b> to a display <b>412</b>, such as a cathode ray tube (CRT), for displaying information to a computer user. An input device <b>414</b>, including alphanumeric and other keys, is coupled to bus <b>402</b> for communicating information and command selections to processor <b>404</b>. Another type of user input device is cursor control <b>416</b>, such as a mouse, a trackball, or cursor direction keys for communicating direction information and command selections to processor <b>404</b> and for controlling cursor movement on display <b>412</b>. This input device typically has two degrees of freedom in two axes, a first axis (e.g., x) and a second axis (e.g., y), that allows the device to specify positions in a plane.</p>
<p id="p-0061" num="0060">In computer system <b>400</b>, bus <b>402</b> may be any mechanism and/or medium that enables information, signals, data, etc., to be exchanged between the various components. For example, bus <b>402</b> may be a set of conductors that carries electrical signals. Bus <b>402</b> may also be a wireless medium (e.g. air) that carries wireless signals between one or more of the components. Bus <b>402</b> may also be a medium (e.g. air) that enables signals to be capacitively exchanged between one or more of the components. Bus <b>402</b> may further be a network connection that connects one or more of the components. Overall, any mechanism and/or medium that enables information, signals, data, etc., to be exchanged between the various components may be used as bus <b>402</b>.</p>
<p id="p-0062" num="0061">Bus <b>402</b> may also be a combination of these mechanisms/media. For example, processor <b>404</b> may communicate with storage device <b>410</b> wirelessly. In such a case, the bus <b>402</b>, from the standpoint of processor <b>404</b> and storage device <b>410</b>, would be a wireless medium, such as air. Further, processor <b>404</b> may communicate with main memory <b>406</b> via a network connection. In this case, the bus <b>402</b> would be the network connection. Further, processor <b>404</b> may communicate with display <b>412</b> via a set of conductors. In this instance, the bus <b>402</b> would be the set of conductors. Thus, depending upon how the various components communicate with each other, bus <b>402</b> may take on different forms. Bus <b>402</b>, as shown in <figref idref="DRAWINGS">FIG. 4</figref>, functionally represents all of the mechanisms and/or media that enable information, signals, data, etc., to be exchanged between the various components.</p>
<p id="p-0063" num="0062">The invention is related to the use of computer system <b>400</b> for implementing the techniques described herein. According to one embodiment of the invention, those techniques are performed by computer system <b>400</b> in response to processor <b>404</b> executing one or more sequences of one or more instructions contained in main memory <b>406</b>. Such instructions may be read into main memory <b>406</b> from another machine-readable medium, such as storage device <b>410</b>. Execution of the sequences of instructions contained in main memory <b>406</b> causes processor <b>404</b> to perform the process steps described herein. In alternative embodiments, hard-wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus, embodiments of the invention are not limited to any specific combination of hardware circuitry and software.</p>
<p id="p-0064" num="0063">The term “machine-readable medium” as used herein refers to any medium that participates in providing data that causes a machine to operation in a specific fashion. In an embodiment implemented using computer system <b>400</b>, various machine-readable media are involved, for example, in providing instructions to processor <b>404</b> for execution. Such a medium may take many forms, including but not limited to, computer-readable storage medium, non-volatile media, and volatile media. Non-volatile media includes, for example, optical or magnetic disks, such as storage device <b>410</b>. Volatile media includes dynamic memory, such as main memory <b>406</b>. Transmission media includes coaxial cables, copper wire and fiber optics, including the wires that comprise bus <b>402</b>. Computer-readable storage medium includes, for example, a floppy disk, a flexible disk, a hard disk, magnetic tape, a CD-ROM, and/or a DVD-ROM.</p>
<p id="p-0065" num="0064">Common forms of machine-readable media include, for example, a floppy disk, a flexible disk, hard disk, magnetic tape, or any other magnetic medium, a CD-ROM, any other optical medium, any other physical medium with patterns of holes, a RAM, a PROM, and EPROM, a FLASH-EPROM, any other memory chip or cartridge.</p>
<p id="p-0066" num="0065">Various forms of machine-readable media may be involved in carrying one or more sequences of one or more instructions to processor <b>404</b> for execution. For example, the instructions may initially be carried on a magnetic disk of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a network using a network interface. A network interface local to computer system <b>400</b> can receive the data from a network. In some cases, network communications involve the use of a modem and telephone line. Bus <b>402</b> carries the data to main memory <b>406</b>, from which processor <b>404</b> retrieves and executes the instructions. The instructions received by main memory <b>406</b> may optionally be stored on storage device <b>410</b> either before or after execution by processor <b>404</b>.</p>
<p id="p-0067" num="0066">Computer system <b>400</b> also includes a communication interface <b>418</b> coupled to bus <b>402</b>. Communication interface <b>418</b> provides a two-way data communication coupling to a network link <b>420</b> that is connected to a local network <b>422</b>. For example, communication interface <b>418</b> may be an integrated services digital network (ISDN) card or a modem to provide a data communication connection to a corresponding type of telephone line. As another example, communication interface <b>418</b> may be a local area network (LAN) card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation, communication interface <b>418</b> sends and receives electrical, electromagnetic or optical signals that carry digital data streams representing various types of information.</p>
<p id="p-0068" num="0067">Network link <b>420</b> typically provides data communication through one or more networks to other data devices. For example, network link <b>420</b> may provide a connection through local network <b>422</b> to a host computer <b>424</b> or to data equipment operated by an Internet Service Provider (ISP) <b>426</b>. ISP <b>426</b> in turn provides data communication services through the world wide packet data communication network now commonly referred to as the “Internet” <b>428</b>. Local network <b>422</b> and Internet <b>428</b> both use electrical, electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link <b>420</b> and through communication interface <b>418</b>, which carry the digital data to and from computer system <b>400</b>, are exemplary forms of carrier waves transporting the information.</p>
<p id="p-0069" num="0068">Computer system <b>400</b> can send messages and receive data, including program code, through the network(s), network link <b>420</b> and communication interface <b>418</b>. In the Internet example, a server <b>430</b> might transmit a requested code for an application program through Internet <b>428</b>, ISP <b>426</b>, local network <b>422</b> and communication interface <b>418</b>.</p>
<p id="p-0070" num="0069">The received code may be executed by processor <b>404</b> as it is received, and/or stored in storage device <b>410</b>, or other non-volatile storage for later execution. In this manner, computer system <b>400</b> may obtain application code in the form of a carrier wave.</p>
<p id="p-0071" num="0070">In the foregoing specification, embodiments of the invention have been described with reference to numerous specific details that may vary from implementation to implementation. Thus, the sole and exclusive indicator of what is the invention, and is intended by the applicants to be the invention, is the set of claims that issue from this application, in the specific form in which such claims issue, including any subsequent correction. Any definitions expressly set forth herein for terms contained in such claims shall govern the meaning of such terms as used in the claims. Hence, no limitation, element, property, feature, advantage or attribute that is not expressly recited in a claim should limit the scope of such claim in any way. The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A machine-implemented method, comprising:
<claim-text>determining that a set of source data, which conforms to a source schema, is to be converted to a set of target data, which conforms to a target schema, wherein the source schema is different from the target schema;</claim-text>
<claim-text>automatically determining, based on a mapping data structure, a plurality of conversion mechanisms that can be invoked in succession to convert the set of source data to the set of target data, the plurality of conversion mechanisms comprising:
<claim-text>(a) an initial set of one or more conversion mechanisms that can be invoked in succession to convert the set of source data to a final set of intermediate data, the final set of intermediate data conforming to a final intermediate schema, which is different from the source and target schemas; and</claim-text>
<claim-text>(b) a final conversion mechanism that converts the final set of intermediate data to the set of target data;</claim-text>
</claim-text>
<claim-text>invoking the plurality of conversion mechanisms in succession to convert the set of source data to the set of target data; and</claim-text>
<claim-text>storing the set of target data;</claim-text>
<claim-text>wherein the mapping data structure indicates, for each particular conversion mechanism of the plurality of conversion mechanisms, at least one schema pair that indicates that said particular conversion mechanism converts (1) data that conforms to a first schema indicated in said pair into (2) data that conforms to a second schema indicated in said pair.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The machine-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein there is no single conversion mechanism that will directly convert the set of source data to the set of target data.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The machine-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the initial set of conversion mechanisms consists of a single conversion mechanism, which converts the set of source data to the final set of intermediate data.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The machine-implemented method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the plurality of conversion mechanisms is determined based, at least partially, upon the mapping data structure, wherein the mapping data structure comprises information indicating that the single conversion mechanism converts a set of data conforming to the source schema to a set of data conforming to the final intermediate schema, and wherein the mapping data structure further comprises information indicating that the final conversion mechanism converts a set of data conforming to the final intermediate schema to a set of data conforming to the target schema.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The machine-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the initial set of conversion mechanisms comprises a plurality of initial conversion mechanisms that can be invoked in succession to convert the set of source data to the final set of intermediate data.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The machine-implemented method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the plurality of initial conversion mechanisms comprises:
<claim-text>(i) a first conversion mechanism which converts the set of source data into a first set of intermediate data, the first set of intermediate data conforming to a first intermediate schema; and</claim-text>
<claim-text>(ii) a second conversion mechanism which converts the first set of intermediate data to the final set of intermediate data.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The machine-implemented method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the plurality of conversion mechanisms is determined based, at least partially, upon the mapping data structure, wherein the mapping data structure comprises information indicating that the first conversion mechanism converts a set of data conforming to the source schema to a set of data conforming to the first intermediate schema, wherein the mapping data structure further comprises information indicating that the second conversion mechanism converts a set of data conforming to the first intermediate schema to a set of data conforming to the final intermediate schema, and wherein the mapping data structure further comprises information indicating that the final conversion mechanism converts a set of data conforming to the final intermediate schema to a set of data conforming to the target schema.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The machine-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>detecting an embedded set of data within the set of source data;</claim-text>
<claim-text>automatically determining an additional plurality of conversion mechanisms that can be invoked in succession to convert the embedded set of data to an embedded set of target data; and</claim-text>
<claim-text>invoking the additional plurality of conversion mechanisms in succession to convert the embedded set of data to the embedded set of target data.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The machine-implemented method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the embedded set of target data conforms to a schema that differs from the target schema.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The machine-implemented method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the additional plurality of conversion mechanisms differs from the plurality of conversion mechanisms.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. A computer-readable storage medium carrying one or more sequences of instructions, which instructions, when executed by one or more processors, cause the one or more processors to carry out the steps of:
<claim-text>determining that a set of source data, which conforms to a source schema, is to be converted to a set of target data, which conforms to a target schema, wherein the source schema is different from the target schema;</claim-text>
<claim-text>automatically determining, based on a mapping data structure, a plurality of conversion mechanisms that can be invoked in succession to convert the set of source data to the set of target data, the plurality of conversion mechanisms comprising:
<claim-text>(a) an initial set of one or more conversion mechanisms that can be invoked in succession to convert the set of source data to a final set of intermediate data, the final set of intermediate data conforming to a final intermediate schema, which is different from the source and target schemas; and</claim-text>
<claim-text>(b) a final conversion mechanism that converts the final set of intermediate data to the set of target data;</claim-text>
</claim-text>
<claim-text>invoking the plurality of conversion mechanisms in succession to convert the set of source data to the set of target data; and</claim-text>
<claim-text>storing the set of target data;</claim-text>
<claim-text>wherein the mapping data structure indicates, for each particular conversion mechanism of the plurality of conversion mechanisms, at least one schema pair that indicates that said particular conversion mechanism converts (1) data that conforms to a first schema indicated in said pair into (2) data that conforms to a second schema indicated in said pair.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The computer-readable storage medium of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein there is no single conversion mechanism that will directly convert the set of source data to the set of target data.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The computer-readable storage medium method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the initial set of conversion mechanisms consists of a single conversion mechanism, which converts the set of source data to the final set of intermediate data.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The computer-readable storage medium of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the plurality of conversion mechanisms is determined based, at least partially, upon the mapping data structure, wherein the mapping data structure comprises information indicating that the single conversion mechanism converts a set of data conforming to the source schema to a set of data conforming to the final intermediate schema, and wherein the mapping data structure further comprises information indicating that the final conversion mechanism converts a set of data conforming to the final intermediate schema to a set of data conforming to the target schema.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The computer-readable storage medium of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the initial set of conversion mechanisms comprises a plurality of initial conversion mechanisms that can be invoked in succession to convert the set of source data to the final set of intermediate data.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The computer-readable storage medium of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the plurality of initial conversion mechanisms comprises:
<claim-text>(i) a first conversion mechanism which converts the set of source data into a first set of intermediate data, the first set of intermediate data conforming to a first intermediate schema; and</claim-text>
<claim-text>(ii) a second conversion mechanism which converts the first set of intermediate data to the final set of intermediate data.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The computer-readable storage medium of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the plurality of conversion mechanisms is determined based, at least partially, upon the mapping data structure, wherein the mapping data structure comprises information indicating that the first conversion mechanism converts a set of data conforming to the source schema to a set of data conforming to the first intermediate schema, wherein the mapping data structure further comprises information indicating that the second conversion mechanism converts a set of data conforming to the first intermediate schema to a set of data conforming to the final intermediate schema, and wherein the mapping data structure further comprises information indicating that the final conversion mechanism converts a set of data conforming to the final intermediate schema to a set of data conforming to the target schema.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The computer-readable storage medium of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the one or more sequences of instructions comprise one or more sequences of instructions that, when executed by the one or more processors, cause the one or more processors to carry out the steps of:
<claim-text>detecting an embedded set of data within the set of source data;</claim-text>
<claim-text>automatically determining an additional plurality of conversion mechanisms that can be invoked in succession to convert the embedded set of data to an embedded set of target data; and</claim-text>
<claim-text>invoking the additional plurality of conversion mechanisms in succession to convert the embedded set of data to the embedded set of target data.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The computer-readable storage medium of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein the embedded set of target data conforms to a schema that differs from the target schema.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The computer-readable storage medium of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein the additional plurality of conversion mechanisms differs from the plurality of conversion mechanisms.</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. A computer system comprising:
<claim-text>a mechanism for determining that a set of source data, which conforms to a source schema, is to be converted to a set of target data, which conforms to a target schema, wherein the source schema is different from the target schema;</claim-text>
<claim-text>a mechanism for automatically determining, based on a mapping data structure a plurality of conversion mechanisms that can be invoked in succession to convert the set of source data to the set of target data, the plurality of conversion mechanisms comprising:
<claim-text>(a) an initial set of one or more conversion mechanisms that can be invoked in succession to convert the set of source data to a final set of intermediate data, the final set of intermediate data conforming to a final intermediate schema, which is different from the source and target schemas; and</claim-text>
<claim-text>(b) a final conversion mechanism that converts the final set of intermediate data to the set of target data;</claim-text>
</claim-text>
<claim-text>a mechanism for invoking the plurality of conversion mechanisms in succession to convert the set of source data to the set of target data; and</claim-text>
<claim-text>a mechanism for storing the set of target data;</claim-text>
<claim-text>wherein the mapping data structure indicates, for each particular conversion mechanism of the plurality of conversion mechanisms, at least one schema pair that indicates that said particular conversion mechanism converts (1) data that conforms to a first schema indicated in said pair into (2) data that conforms to a second schema indicated in said pair.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. The computer system of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein there is no single conversion mechanism that will directly convert the set of source data to the set of target data.</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. The computer system of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the initial set of conversion mechanisms consists of a single conversion mechanism, which converts the set of source data to the final set of intermediate data.</claim-text>
</claim>
<claim id="CLM-00024" num="00024">
<claim-text>24. The computer system of <claim-ref idref="CLM-00023">claim 23</claim-ref>, wherein the plurality of conversion mechanisms is determined based, at least partially, upon the mapping data structure, wherein the mapping data structure comprises information indicating that the single conversion mechanism converts a set of data conforming to the source schema to a set of data conforming to the final intermediate schema, and wherein the mapping data structure further comprises information indicating that the final conversion mechanism converts a set of data conforming to the final intermediate schema to a set of data conforming to the target schema.</claim-text>
</claim>
<claim id="CLM-00025" num="00025">
<claim-text>25. The computer system of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the initial set of conversion mechanisms comprises a plurality of initial conversion mechanisms that can be invoked in succession to convert the set of source data to the final set of intermediate data.</claim-text>
</claim>
<claim id="CLM-00026" num="00026">
<claim-text>26. The computer system of <claim-ref idref="CLM-00025">claim 25</claim-ref>, wherein the plurality of initial conversion mechanisms comprises:
<claim-text>(i) a first conversion mechanism which converts the set of source data into a first set of intermediate data, the first set of intermediate data conforming to a first intermediate schema; and</claim-text>
<claim-text>(ii) a second conversion mechanism which converts the first set of intermediate data to the final set of intermediate data.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00027" num="00027">
<claim-text>27. The computer system of <claim-ref idref="CLM-00026">claim 26</claim-ref>, wherein the plurality of conversion mechanisms is determined based, at least partially, upon the mapping data structure, wherein the mapping data structure comprises information indicating that the first conversion mechanism converts a set of data conforming to the source schema to a set of data conforming to the first intermediate schema, wherein the mapping data structure further comprises information indicating that the second conversion mechanism converts a set of data conforming to the first intermediate schema to a set of data conforming to the final intermediate schema, and wherein the mapping data structure further comprises information indicating that the final conversion mechanism converts a set of data conforming to the final intermediate schema to a set of data conforming to the target schema.</claim-text>
</claim>
<claim id="CLM-00028" num="00028">
<claim-text>28. The computer system of <claim-ref idref="CLM-00021">claim 21</claim-ref>, further comprising:
<claim-text>a mechanism for detecting an embedded set of data within the set of source data;</claim-text>
<claim-text>a mechanism for automatically determining an additional plurality of conversion mechanisms that can be invoked in succession to convert the embedded set of data to an embedded set of target data; and</claim-text>
<claim-text>a mechanism for invoking the additional plurality of conversion mechanisms in succession to convert the embedded set of data to the embedded set of target data.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00029" num="00029">
<claim-text>29. The computer system of <claim-ref idref="CLM-00028">claim 28</claim-ref>, wherein the embedded set of target data conforms to a schema that differs from the target schema.</claim-text>
</claim>
<claim id="CLM-00030" num="00030">
<claim-text>30. The computer system of <claim-ref idref="CLM-00028">claim 28</claim-ref>, wherein the additional plurality of conversion mechanisms differs from the plurality of conversion mechanisms.</claim-text>
</claim>
</claims>
</us-patent-grant>
