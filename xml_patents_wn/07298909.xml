<us-patent-grant lang="EN" dtd-version="v4.2 2006-08-23" file="US07298909-20071120.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20071106" date-publ="20071120">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>07298909</doc-number>
<kind>B2</kind>
<date>20071120</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>10946078</doc-number>
<date>20040922</date>
</document-id>
</application-reference>
<us-application-series-code>10</us-application-series-code>
<priority-claims>
<priority-claim sequence="01" kind="national">
<country>JP</country>
<doc-number>2003-343570</doc-number>
<date>20031001</date>
</priority-claim>
<priority-claim sequence="02" kind="national">
<country>JP</country>
<doc-number>2004-269129</doc-number>
<date>20040916</date>
</priority-claim>
</priority-claims>
<us-term-of-grant>
<us-term-extension>666</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>K</subclass>
<main-group>9</main-group>
<subgroup>36</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>382232</main-classification>
<further-classification>382235</further-classification>
</classification-national>
<invention-title id="d0e89">Image processing method and image processing apparatus</invention-title>
<references-cited>
<citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>6784891</doc-number>
<kind>B2</kind>
<name>Inuzuka et al.</name>
<date>20040800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>345555</main-classification></classification-national>
</citation>
<citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>6992676</doc-number>
<kind>B2</kind>
<name>Inuzuka et al.</name>
<date>20060100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>345555</main-classification></classification-national>
</citation>
<citation>
<patcit num="00003">
<document-id>
<country>JP</country>
<doc-number>2000-50261</doc-number>
<date>20000200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00004">
<document-id>
<country>JP</country>
<doc-number>2002-49514</doc-number>
<date>20020200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
</references-cited>
<number-of-claims>13</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>382232</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>382235</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>345555</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>345556</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>368 10</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>347  9</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>21</number-of-drawing-sheets>
<number-of-figures>28</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20050074174</doc-number>
<kind>A1</kind>
<date>20050407</date>
</document-id>
</related-publication>
</us-related-documents>
<parties>
<applicants>
<applicant sequence="001" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Ishikawa</last-name>
<first-name>Tomoe</first-name>
<address>
<city>Tokyo</city>
<country>JP</country>
</address>
</addressbook>
<nationality>
<country>JP</country>
</nationality>
<residence>
<country>JP</country>
</residence>
</applicant>
</applicants>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Fitzpatrick, Cella, Harper &amp; Scinto</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</parties>
<assignees>
<assignee>
<addressbook>
<orgname>Canon Kabushiki Kaisha</orgname>
<role>03</role>
<address>
<city>Tokyo</city>
<country>JP</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Do</last-name>
<first-name>Anh Hong</first-name>
<department>2624</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A transmission request for encoded data necessary to obtain a desired image is received (S<b>801</b>). It is determined whether the upper limit value of the data quantity of encoded data of a tile to be sent back in response to the transmission request is designated (S<b>802</b>). When the upper limit value is designated, encoded data of tiles to be sent back are referred to in a desired tile order. Of data of logical units which form the encoded data of a tile to be referred to, data of a logical unit corresponding to the transmission request and header data of the logical unit are output to a memory. The data size is counted in an output order, and a data group which is output until the counting result exceeds the upper limit value is sent back (S<b>806</b> and S<b>807</b>).</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="181.61mm" wi="136.48mm" file="US07298909-20071120-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="102.79mm" wi="133.35mm" file="US07298909-20071120-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="121.75mm" wi="147.40mm" file="US07298909-20071120-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="152.15mm" wi="118.79mm" file="US07298909-20071120-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="161.63mm" wi="122.68mm" orientation="landscape" file="US07298909-20071120-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="229.02mm" wi="153.92mm" file="US07298909-20071120-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="234.36mm" wi="168.32mm" orientation="landscape" file="US07298909-20071120-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="234.36mm" wi="154.60mm" file="US07298909-20071120-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="199.90mm" wi="137.33mm" file="US07298909-20071120-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="203.37mm" wi="158.41mm" file="US07298909-20071120-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="251.46mm" wi="159.94mm" file="US07298909-20071120-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="218.44mm" wi="140.29mm" file="US07298909-20071120-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="172.64mm" wi="155.36mm" file="US07298909-20071120-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00013" num="00013">
<img id="EMI-D00013" he="230.63mm" wi="145.71mm" file="US07298909-20071120-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00014" num="00014">
<img id="EMI-D00014" he="209.04mm" wi="151.72mm" file="US07298909-20071120-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00015" num="00015">
<img id="EMI-D00015" he="249.34mm" wi="155.19mm" file="US07298909-20071120-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00016" num="00016">
<img id="EMI-D00016" he="127.59mm" wi="123.61mm" file="US07298909-20071120-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00017" num="00017">
<img id="EMI-D00017" he="175.94mm" wi="146.73mm" file="US07298909-20071120-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00018" num="00018">
<img id="EMI-D00018" he="123.70mm" wi="118.87mm" file="US07298909-20071120-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00019" num="00019">
<img id="EMI-D00019" he="228.09mm" wi="141.22mm" file="US07298909-20071120-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00020" num="00020">
<img id="EMI-D00020" he="108.71mm" wi="114.13mm" file="US07298909-20071120-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00021" num="00021">
<img id="EMI-D00021" he="86.78mm" wi="115.65mm" file="US07298909-20071120-D00021.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">FIELD OF THE INVENTION</heading>
<p id="p-0002" num="0001">The present invention relates to a technique for transmitting/receiving, via a network, encoded image data, which is segmented into tiles each including a plurality of logic units and has a format that allows a plurality of types of different orders of logical units to be arranged.</p>
<heading id="h-0002" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0003" num="0002">On the Internet, users actively access WWW servers from Web browsers, which are running on client terminals, to browse document data, image data, and the like on the client terminal side via the Web browsers. Each WWW server saves a document called a home page, which is prepared by describing information to be disclosed in HTML. The Web browser on the client terminal side accesses such home page and displays it on the display screen of a display device of the client terminal. Also, when the user designates a link in the home page displayed on the display device, the Web browser on the client terminal side can acquire required information by tracing a link destination indicated by the link.</p>
<p id="p-0004" num="0003">Furthermore, as a method of downloading files managed by the WWW server, a method called “File Transfer Protocol” (to be abbreviated as “FTP” hereinafter) is known. The FTP is a scheme for transferring the contents of a file on the WWW server to the client computer at a time via a network.</p>
<p id="p-0005" num="0004">One of techniques for transferring the whole image file at a time is to control the order of transmission data on the server side (for example, see Japanese Patent Laid-Open No. 2000-50261). In this case, some regions are set as important regions on the server side, and pieces of information in these regions are encoded in order before the remaining pieces of region information. The client can determine on an early stage of transmission whether the current image is necessary or unnecessary, and can interrupt reception of the data in the middle of the operation.</p>
<p id="p-0006" num="0005">As a protocol for fragmentarily accessing and displaying an image data file, Flashpix/IIP is known. This Internet imaging protocol (IIP) is optimal to the image data file format “Flashpix”, and makes partial access to image data for respective tiles of Flashpix. Some conventional techniques that use this IIP protocol have been disclosed (for example, see Japanese Patent Laid-Open No. 2002-49514).</p>
<p id="p-0007" num="0006">With any protocol, the client terminal cannot transmit to the server side a request to limit the size of response data.</p>
<p id="p-0008" num="0007">As of June, 2003, JPEG2000 image coding system—Part 9: Interactivity tools, APIs and Protocols (to be abbreviated as JPIP hereinafter) has been examined as a protocol for fragmentarily accessing and displaying a JPEG2000 file. JPEG2000 and JPIP enable access to a partial region of an image and selection of the resolution, similar to Flashpix and IIP. Also, a change of the image quality, color/monochrome switching, and setting of the size limitation of response data can be easily achieved in accordance with client requests. When JPEG2000 image data is fragmentarily transmitted using JPIP, the client must cache received fragmentary encoded data so as to decode the image. This is because encoded data of each JPEG2000 layer/level is difference data from data one layer/level lower than that layer/level.</p>
<p id="p-0009" num="0008">According to the technique of setting a predetermined region as an important region on the server side, like Japanese Patent Laid-Open No. 2000-50261, the server must set and encode again an important region every time the server receives a request. Thus, the server cannot cope with various requests (e.g., a request of a partial region of an image and requests to switch the resolution, image quality, and color/monochrome) from the client using interactive image communication protocols such as IIP and JPIP.</p>
<p id="p-0010" num="0009">When the response data size receivable or cacheable on the client side is limited, the client may stop reception of data by the limited size. If the server transmits data in a preset transmission order without considering the size limitation of reception data on the client side, the client may display only some of requested regions at a high definition upon decoding the received data, and may not display the remaining data. Alternatively, the client may display only some of display regions at a very high definition, and display adjacent regions unnaturally at a very low resolution.</p>
<heading id="h-0003" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0011" num="0010">The present invention has been made in consideration of the aforementioned problems, and has as its object to provide a technique for designating the upper limit value of the data size of encoded data necessary to obtain a desired image, and obtaining the encoded data.</p>
<p id="p-0012" num="0011">In order to achieve an object of the present invention, for example, an image processing method of the present invention comprises the following arrangement.</p>
<p id="p-0013" num="0012">That is, an image processing method executed by an image processing apparatus which holds encoded data of an image that is segmented into tiles each formed from a plurality of logical units and can take a plurality of logical unit arrangement orders as a format of the encoded data, and transmits, to an external apparatus, data of a logical unit corresponding to a request from the external apparatus in a tile corresponding to the request, comprises:
<ul id="ul0001" list-style="none">
    <li id="ul0001-0001" num="0000">
    <ul id="ul0002" list-style="none">
        <li id="ul0002-0001" num="0013">a reception step of receiving a transmission request for encoded data necessary to obtain a desired image;</li>
        <li id="ul0002-0002" num="0014">a determination step of determining whether an upper limit value of a data quantity of encoded data of a tile to be transmitted to the external apparatus in response to the transmission request is designated by the external apparatus; and</li>
        <li id="ul0002-0003" num="0015">a transmission control step of deciding, in accordance with a determination result in the determination step, a portion to be transmitted to the external apparatus out of data of logical units which form encoded data of tiles to be transmitted to the external apparatus and header data of the logical units, and transmitting the decided portion to the external apparatus,</li>
        <li id="ul0002-0004" num="0016">the transmission control step comprising
        <ul id="ul0003" list-style="none">
            <li id="ul0003-0001" num="0017">a first transmission step of, when no upper limit value is designated, transmitting, to the external apparatus, data of logical units which form the encoded data of the tiles to be transmitted to the external apparatus and header data of the logical units,</li>
            <li id="ul0003-0002" num="0018">an output step of, when the upper limit value is designated, referring in a desired tile order to the encoded data of the tiles to be transmitted to the external apparatus, and outputting data of a logical unit corresponding to the transmission request and header data of the logical unit, of data of logical units which form encoded data of a tile to be referred to, to a memory and</li>
            <li id="ul0003-0003" num="0019">a second transmission step of counting a size of data of logical units and a size of header data of the logical units in an output order in the output step, and transmitting, to the external apparatus, a data group of the logical units and a header data group of the logical units which are output to the memory until a counting result exceeds the upper limit value.</li>
        </ul>
        </li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0014" num="0020">In order to achieve an object of the present invention, for example, an image processing apparatus of the present invention comprises the following arrangement.</p>
<p id="p-0015" num="0021">That is, an image processing apparatus which holds encoded data of an image that is segmented into tiles each formed from a plurality of logical units and can take a plurality of logical unit arrangement orders as a format of the encoded data, and transmits, to an external apparatus, data of a logical unit corresponding to a request from the external apparatus in a tile corresponding to the request, comprises:
<ul id="ul0004" list-style="none">
    <li id="ul0004-0001" num="0000">
    <ul id="ul0005" list-style="none">
        <li id="ul0005-0001" num="0022">reception means for receiving a transmission request for encoded data necessary to obtain a desired image;</li>
        <li id="ul0005-0002" num="0023">determination means for determining whether an upper limit value of a data quantity of encoded data of a tile to be transmitted to the external apparatus in response to the transmission request is designated by the external apparatus; and</li>
        <li id="ul0005-0003" num="0024">transmission control means for deciding, in accordance with a determination result of the determination means, a portion to be transmitted to the external apparatus out of data of logical units which form encoded data of tiles to be transmitted to the external apparatus and header data of the logical units, and transmitting the decided portion to the external apparatus,</li>
        <li id="ul0005-0004" num="0025">the transmission control means comprising</li>
        <li id="ul0005-0005" num="0026">first transmission means for, when no upper limit value is designated, transmitting, to the external apparatus, data of logical units which form the encoded data of the tiles to be transmitted to the external apparatus and header data of the logical units,
        <ul id="ul0006" list-style="none">
            <li id="ul0006-0001" num="0027">output means for, when the upper limit value is designated, referring in a desired tile order to the encoded data of the tiles to be transmitted to the external apparatus, and outputting data of a logical unit corresponding to the transmission request and header data of the logical unit, of data of logical units which form encoded data of a tile to be referred to, to a memory and</li>
            <li id="ul0006-0002" num="0028">second transmission means for counting a size of data of logical units and a size of header data of the logical units in an output order of the output means, and transmitting, to the external apparatus, a data group of logical units and a header data group of the logical units which are output to the memory until a counting result exceeds the upper limit value.</li>
        </ul>
        </li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0016" num="0029">Other features and advantages of the present invention will be apparent from the following description taken in conjunction with the accompanying drawings, in which like reference characters designate the same or similar parts throughout the figures thereof.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0017" num="0030">The accompanying drawings, which are incorporated in and constitute a part of the specification, illustrate embodiments of the invention and, together with the description, serve to explain the principles of the invention.</p>
<p id="p-0018" num="0031"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram showing the basic arrangement of an image processing apparatus according to an embodiment of the present invention, which comprises a PC (personal computer), workstation, or the like;</p>
<p id="p-0019" num="0032"><figref idref="DRAWINGS">FIG. 2</figref> is a schematic diagram showing a system including the image processing apparatus;</p>
<p id="p-0020" num="0033"><figref idref="DRAWINGS">FIG. 3</figref> is a view showing the configuration of a JPEG2000 bitstream according to Layer-resolution level-component-position progression;</p>
<p id="p-0021" num="0034"><figref idref="DRAWINGS">FIG. 4</figref> is a view showing the relationship between the resolutions and Resolution numbers;</p>
<p id="p-0022" num="0035"><figref idref="DRAWINGS">FIG. 5</figref> is a conceptual view showing a request and response for respective packets;</p>
<p id="p-0023" num="0036"><figref idref="DRAWINGS">FIG. 6A</figref> is a view showing the configuration of a set of JPEG2000 packet data called a precinct data-bin;</p>
<p id="p-0024" num="0037"><figref idref="DRAWINGS">FIG. 6B</figref> is a view showing the configuration of JPIP response data formed using the precinct data-bin shown in <figref idref="DRAWINGS">FIG. 6A</figref>;</p>
<p id="p-0025" num="0038"><figref idref="DRAWINGS">FIG. 7</figref> is a view showing the relationship between the tile and resolution of an image represented by encoded data held by a server <b>204</b>;</p>
<p id="p-0026" num="0039"><figref idref="DRAWINGS">FIG. 8</figref> is a flowchart showing a main process executed when the server <b>204</b> receives request data from a client terminal;</p>
<p id="p-0027" num="0040"><figref idref="DRAWINGS">FIG. 9</figref> is a flowchart showing details of a process in step S<b>804</b> executed by the server <b>204</b> when no size limitation is designated for response data;</p>
<p id="p-0028" num="0041"><figref idref="DRAWINGS">FIG. 10</figref> is a flowchart showing details of a process in step S<b>806</b> executed by the server <b>204</b> when a size limitation is designated for response data;</p>
<p id="p-0029" num="0042"><figref idref="DRAWINGS">FIG. 11</figref> is a flowchart showing details of a process in step S<b>1001</b>, i.e., a process of rearranging “the indices of tiles to which encoded data to be transmitted to the client terminal belong” held in an array Pt in descending order of priority, and holding the indices in an array Pt′;</p>
<p id="p-0030" num="0043"><figref idref="DRAWINGS">FIG. 12</figref> is a flowchart showing details of a process of setting a center region C in a request region in step S<b>1103</b>;</p>
<p id="p-0031" num="0044"><figref idref="DRAWINGS">FIG. 13</figref> is a flowchart showing a process in step S<b>1105</b>;</p>
<p id="p-0032" num="0045"><figref idref="DRAWINGS">FIG. 14A</figref> is a view for explaining setting of the center region C;</p>
<p id="p-0033" num="0046"><figref idref="DRAWINGS">FIG. 14B</figref> is a view for explaining setting of the center region C;</p>
<p id="p-0034" num="0047"><figref idref="DRAWINGS">FIG. 15A</figref> is a view showing an example of the data size of encoded data;</p>
<p id="p-0035" num="0048"><figref idref="DRAWINGS">FIG. 15B</figref> is a table showing the example of the data size of encoded data;</p>
<p id="p-0036" num="0049"><figref idref="DRAWINGS">FIG. 16A</figref> is a view showing return tiles of resolution level <b>2</b> and layer <b>4</b> in transmitting tile data sequentially from an upper left tile in the request region;</p>
<p id="p-0037" num="0050"><figref idref="DRAWINGS">FIG. 16B</figref> is a view showing return tiles of resolution level <b>2</b> and layer <b>4</b> in transmitting tile data by a method according to the first embodiment of the present invention;</p>
<p id="p-0038" num="0051"><figref idref="DRAWINGS">FIG. 16C</figref> is a view showing return tiles of resolution level <b>2</b> and layer <b>4</b> in the second embodiment of the present invention;</p>
<p id="p-0039" num="0052"><figref idref="DRAWINGS">FIG. 16D</figref> is a view showing return tiles of resolution level <b>2</b> and layer <b>4</b> in the fourth embodiment of the present invention;</p>
<p id="p-0040" num="0053"><figref idref="DRAWINGS">FIG. 17</figref> is a view for explaining data of a metadata-assigned tile;</p>
<p id="p-0041" num="0054"><figref idref="DRAWINGS">FIG. 18</figref> is a flowchart showing a tile index rearrangement process executed in step S<b>1001</b> in the second embodiment of the present invention;</p>
<p id="p-0042" num="0055"><figref idref="DRAWINGS">FIG. 19A</figref> is a table for managing the access count of each tile;</p>
<p id="p-0043" num="0056"><figref idref="DRAWINGS">FIG. 19B</figref> is a view showing acquired access count data when the request region is a region <b>701</b> shown in <figref idref="DRAWINGS">FIG. 7</figref>;</p>
<p id="p-0044" num="0057"><figref idref="DRAWINGS">FIG. 20</figref> is a flowchart showing a tile index rearrangement process executed in step S<b>1001</b> in the fourth embodiment of the present invention; and</p>
<p id="p-0045" num="0058"><figref idref="DRAWINGS">FIG. 21</figref> is a table showing the configuration of response data in the first embodiment of the present invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS</heading>
<p id="p-0046" num="0059">Preferred embodiments of the present invention will now be described in detail in accordance with the accompanying drawings.</p>
<p id="h-0006" num="0000">[First Embodiment]</p>
<p id="p-0047" num="0060"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram showing the basic arrangement of an image processing apparatus according to the first embodiment, which comprises a PC (personal computer), workstation, or the like.</p>
<p id="p-0048" num="0061">A CPU <b>101</b> controls the operation of the overall apparatus and the operations of respective units to be described later using programs and data loaded onto a primary memory <b>102</b>.</p>
<p id="p-0049" num="0062">The primary memory <b>102</b> is a main storage device represented by a RAM, and has an area for temporarily storing programs and data loaded from a secondary memory <b>103</b>, and also an area used by the CPU <b>101</b> to execute various processes.</p>
<p id="p-0050" num="0063">The secondary memory <b>103</b> is an information storage device which is represented by a hard disk drive and has a large storage capacity, and can save an OS (Operating System), and programs and data required for the CPU <b>101</b> to execute respective processes to be described later. The secondary memory <b>103</b> outputs (loads) a requested program and data to the primary memory <b>102</b> under the control of the CPU <b>101</b>.</p>
<p id="p-0051" num="0064">An input device <b>104</b> is an instruction input device represented by, e.g., a mouse, keyboard, and the like, and allows the user of this apparatus to input various instructions to the CPU <b>101</b>.</p>
<p id="p-0052" num="0065">An output device <b>105</b> is a device represented by, e.g., a display and printer, and can output an image processed by this apparatus in various formats such as display, printout, and the like.</p>
<p id="p-0053" num="0066">A network interface (I/F) <b>106</b> serves as an I/F that makes data communications with an external apparatus. Reference numeral <b>107</b> denotes a bus that interconnects the aforementioned units. The image processing apparatus according to this embodiment adopts the basic arrangement shown in <figref idref="DRAWINGS">FIG. 1</figref> for the sake of simplicity in the following description. However, other arrangements may be adopted, and the present invention is not limited to that shown in <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0054" num="0067"><figref idref="DRAWINGS">FIG. 2</figref> is a schematic diagram of a system including the aforementioned image processing apparatus. Reference numerals <b>201</b> and <b>202</b> denote client terminals, which can make various data communications via a server <b>204</b> as the image processing apparatus and a network <b>203</b>.</p>
<p id="p-0055" num="0068">The network <b>203</b> includes wired and wireless networks such as the Internet, LAN, and the like.</p>
<p id="p-0056" num="0069">The server <b>204</b> can make data communications with the client terminals <b>201</b> and <b>202</b> via the network <b>203</b>, as described above. For example, upon reception of a request of a desired image from the client terminal <b>201</b> or <b>202</b>, the server <b>204</b> reads out data corresponding to the request from a storage device <b>205</b> (corresponding to the secondary memory <b>103</b>) that saves encoded image data in large quantities, and returns the data via the network <b>203</b>. The storage device <b>205</b> corresponds to, e.g., a hard disk drive device or a device for reading programs and data from storage media such as a CD-ROM, DVD-ROM, and the like.</p>
<p id="p-0057" num="0070">In the first embodiment, the storage device <b>205</b> saves a plurality of image data encoded by an encoding method according to JPEG2000. Therefore, the client terminal <b>201</b> or <b>202</b> requests the server <b>204</b> to send only data required to obtain a desired image of desired encoded image data from those saved in the storage device <b>205</b>.</p>
<p id="p-0058" num="0071">A process executed when the server <b>204</b> transmits encoded image data requested by the client terminal to that client terminal will be described below. In order to download an image saved in the storage device <b>205</b>, the client terminal must access the server <b>204</b> using a Web browser. In response to this access, the server <b>204</b> presents some or all images saved in the storage device <b>205</b> to the client terminal in the form of thumbnails. In this way, the Web browser displays these images.</p>
<p id="p-0059" num="0072">When the user of the client terminal designates a desired image from the image group displayed on the Web browser using an input device such as a mouse, keyboard, or the like, the client terminal transmits a transmission request of fragmentary data of the desired image data to the server <b>204</b> using a JPIP scheme in accordance with the image size and resolution that meet conditions (screen size, display format, and the like).</p>
<p id="p-0060" num="0073">At this time, according to the first embodiment, the client terminal can request the server <b>204</b> to limit the size of requested data to a predetermined value (upper limit value) or less in accordance with the current free area of the memory of the client terminal, the circuit capacity of the network <b>203</b>, and the like. More specifically, the client terminal can request the server <b>204</b> to send data necessary to obtain a desired image, and to limit the size of data transmitted by the server <b>204</b> to a predetermined quantity or less.</p>
<p id="p-0061" num="0074">The upper limit value designation method is not particularly limited. For example, the client terminal may designate the upper limit value using a keyboard or mouse. The client terminal may specify and use an upper limit value corresponding to the performance of a modem or the like currently used by the client terminal from a table which holds upper limit values corresponding to various data transfer rates.</p>
<p id="p-0062" num="0075">Since the server <b>204</b> transmits fragmentary data according to this request to the client terminal, the client terminal receives this data, and caches it in a buffer.</p>
<p id="p-0063" num="0076">Upon displaying the received image, the client terminal generates a bitstream complying with the JPEG2000 syntax from the cached data, and decodes and displays that bitstream. In addition to this, the decoded image can be output to a printer, copying machine, or the like (not shown), and printed out.</p>
<p id="p-0064" num="0077">A general JPEG2000 bitstream will be explained below. <figref idref="DRAWINGS">FIG. 3</figref> shows the configuration of a JPEG2000 bitstream according to Layer-resolution level-component-position progression (to be abbreviated as LRCP hereinafter). The JPEG2000 bitstream includes a main header, tile header, and data, and this data field records encoded image data. The tile header is generated for compression-encoded data of each tile when a compression-encoding source image is segmented into rectangles (tiles) each having a predetermined size, and compression-encoded data of respective tiles are generated. Since the main header and tile header are based on the state-of-the-art technique, a description thereof will be omitted.</p>
<p id="p-0065" num="0078">According to the LRCP, encoded image data (a field indicated by “Data” in <figref idref="DRAWINGS">FIG. 3</figref>) has a configuration in which data are allocated in the order of Layer/Resolution/Component/Position. Such configuration is called a progression order. “Position” means “precinct” in JPEG2000 encoded data.</p>
<p id="p-0066" num="0079">The JPEG2000 encoded data can be divided into data for respective Layers. Data of respective Layers are bitplane encoded data generated by known bitplane encoding, and are allocated in turn from a bitplane (Layer<b>0</b>) on the MSB side to that (LayerL) on the LSB side. Each Layer number corresponds to an S/N ratio of an image to be reclaimed to an original image, and the S/N ratio impairs (lowers) with decreasing Layer number. That is, in the JPEG2000 data shown in <figref idref="DRAWINGS">FIG. 3</figref>, data of respective Layers are allocated in ascending order of S/N ratio.</p>
<p id="p-0067" num="0080">Furthermore, data of each Layer is made up of data of respective Resolutions. Data of respective resolutions are allocated in an order based on Resolution numbers according to the resolutions (image sizes). <figref idref="DRAWINGS">FIG. 4</figref> shows the relationship between the resolutions and Resolution numbers. The Resolution number of an image with the lowest resolution is set to be “0”, and the width and height of the image size are doubled as the Resolution number increases by one. Each Layer stores data in ascending order of Resolution number.</p>
<p id="p-0068" num="0081">Referring back to <figref idref="DRAWINGS">FIG. 3</figref>, data of each Resolution includes data of respective Components. Data of respective Components correspond to color data of an image. For example, when an image is formed of R, G, and B component data, data of Component0 is data of the R component, data of Component1 is data of the G component, and data of Component2 is data of the B component. That is, the number of Components matches the number of dimensions of the color space of an image.</p>
<p id="p-0069" num="0082">Each Component data records data of spatial positions (Position data) in the compression encoding source image in turn, and respective Position data are assigned numbers (position numbers) according to their spatial order (for example, the upper left corner of an image has a number “0”, and the number is incremented one by one to the right of the image; when the right end is reached, the number is incremented from the left end of the next row to the right of the image).</p>
<p id="p-0070" num="0083">In one JPEG2000 file, the maximum values of the Resolution number, Layer number, Component number, and position number are set in advance by an encoder, the compression encoding source image is encoded according to these parameters, and that information is recorded in the main header. Each packet includes a packet header field that manages information of code-blocks stored in that packet, and encoded data of the code-blocks. In <figref idref="DRAWINGS">FIG. 3</figref>, one Position data corresponds to a packet. This “packet” is a kind of logical unit.</p>
<p id="p-0071" num="0084">When a JPEG2000 file with such structure is held by the server, the server can supply only encoded data according to the resolution or the like requested by the client terminal to that client terminal. In the first embodiment, since data are transmitted/received according to JPIP, tiles or packets of JPEG2000 may be used as units of data to be supplied. This embodiment assumes packets as data units which are to be received by the client terminal from the server.</p>
<p id="p-0072" num="0085"><figref idref="DRAWINGS">FIG. 5</figref> is a view for explaining the concept of a request and response for each packet. <figref idref="DRAWINGS">FIG. 5</figref> shows requests and responses between a server <b>503</b> and a client terminal <b>501</b>.</p>
<p id="p-0073" num="0086"><figref idref="DRAWINGS">FIG. 5</figref> shows communications between the server <b>503</b> and the client terminal <b>501</b> when the client terminal <b>501</b> requests to send encoded data of a desired tile, resolution, layer, component, and spatial position, in a state wherein an image is segmented into tiles, and encoded data (data of Tile<b>0</b> to TileN in <figref idref="DRAWINGS">FIG. 5</figref>) of respective tiles are stored as JPEG2000 bitstreams <b>504</b> in a storage device <b>502</b> connected to the server <b>503</b>.</p>
<p id="p-0074" num="0087">For example, when the client terminal <b>501</b> requests the server <b>503</b> to send encoded data with a tile number “1”, resolution number “0”, layer number “0”, component number non “0”, and position number “0”, the server <b>503</b> analyzes the JPEG2000 bitstreams <b>504</b> saved in the storage device <b>502</b>, extracts a portion corresponding to the request (i.e., a portion corresponding to the requested tile number, resolution number, layer number, component number, and position number), i.e., packet <b>0</b> of tile number <b>1</b> as response data, and sends it back to the client terminal <b>501</b>.</p>
<p id="p-0075" num="0088">As described above, in the first embodiment, JPIP is used upon exchanging image data between the server and the client terminal, and encoded image data is transmitted from the server to the client terminal for respective packets.</p>
<p id="p-0076" num="0089">The configuration of response data upon exchanging data using JPIP will be described below. <figref idref="DRAWINGS">FIG. 6A</figref> shows the configuration of a set of JPEG2000 packet data called a precinct data-bin. In JPIP, response data is generated on the basis of a set of JPEG2000 packet data called a precinct data-bin, as indicated by <b>601</b>. The precinct data-bin is a set of data formed by arranging and joining packets of all layers which form resolution level rn and component number cn of precinct pn in Tile Tn in ascending order of layer number.</p>
<p id="p-0077" num="0090">JPIP response data is generated using this precinct data-bin. <figref idref="DRAWINGS">FIG. 6B</figref> shows the configuration of the JPIP response data generated using the precinct data-bin shown in <figref idref="DRAWINGS">FIG. 6A</figref>. The JPIP response data includes a message header <b>608</b> and message body <b>609</b>. The message body <b>609</b> stores, as response data, data of one or a plurality of packets (Packet(tn, rn, cn, pn, q) shown in <figref idref="DRAWINGS">FIG. 6A</figref>) extracted from the precinct data-bin <b>601</b> according to the requested tile and resolution.</p>
<p id="p-0078" num="0091">The message header <b>608</b> includes fields for storing six parameters. A parameter stored in a first field <b>605</b> is a precinct data-bin ID (PrID) corresponding to the precinct data-bin (that shown in <figref idref="DRAWINGS">FIG. 6A</figref>) to which packet data in the message body <b>609</b> belongs. This PrID is uniquely determined by tile number tn, resolution level number rn, component number cn, and precinct number pn, and can be calculated by:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>PrID</i>(<i>tn, rn, cn, pn</i>)=<i>tn</i>+(<i>cn+s</i>×(number of components)×number of tiles<?in-line-formulae description="In-line Formulae" end="tail"?>
<ul id="ul0007" list-style="none">
    <li id="ul0007-0001" num="0000">
    <ul id="ul0008" list-style="none">
        <li id="ul0008-0001" num="0092">for</li>
        <li id="ul0008-0002" num="0093">s=pn+tn×(number of precincts per tile in resolution level rn)+(sum total of numbers of precincts of tile tn from resolution level <b>0</b> to (rn−1))</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0079" num="0094">A parameter stored in a second field <b>604</b> is an identifier which indicates that data stored in the message body <b>609</b> is the precinct data-bin.</p>
<p id="p-0080" num="0095">A parameter stored in a third field <b>610</b> is a codestream number which indicates a codestream from which data in the message body <b>609</b> is extracted.</p>
<p id="p-0081" num="0096">A parameter stored in a fourth field <b>606</b> is an offset value PrOffset (see <figref idref="DRAWINGS">FIG. 6A</figref>) which indicates an offset of the position of each packet data (data for one packet if only one packet is stored) in the message body <b>609</b> from the head of the precinct data-bin.</p>
<p id="p-0082" num="0097">A parameter stored in a fifth field <b>607</b> is a byte length ResLen [byte] (see <figref idref="DRAWINGS">FIG. 6B</figref>) of the response data, i.e., the message body <b>609</b>.</p>
<p id="p-0083" num="0098">A parameter stored in a sixth field <b>611</b> is auxiliary information for data in the message body <b>609</b>. The fields <b>604</b>, <b>610</b>, and <b>611</b> hold omissible parameters.</p>
<p id="p-0084" num="0099">The process executed when the image processing apparatus according to the first embodiment as the server generates and transmits such JPIP response data (to be also simply referred to as response data hereinafter) to a transmission request source device (to be referred to as a client terminal hereinafter) will be described below. Note that the image processing apparatus according to this embodiment will be referred to as a server in terms of its functions.</p>
<p id="p-0085" num="0100">In the first embodiment, encoding conditions for an image managed by the server <b>204</b> (saved in the storage device <b>205</b>) are as follows.
<ul id="ul0009" list-style="none">
    <li id="ul0009-0001" num="0000">
    <ul id="ul0010" list-style="none">
        <li id="ul0010-0001" num="0101">Number of resolution levels: 3 (resolution levels <b>0</b> to <b>2</b>)</li>
        <li id="ul0010-0002" num="0102">Number of layers: 5 (layers <b>0</b> to <b>4</b>)</li>
        <li id="ul0010-0003" num="0103">Number of components: 3 (components <b>0</b> to <b>2</b>)</li>
        <li id="ul0010-0004" num="0104">Number of tiles: 6×6=36 (tiles <b>0</b> to <b>35</b>)</li>
        <li id="ul0010-0005" num="0105">Number of positions: 1 position/1 tile</li>
        <li id="ul0010-0006" num="0106">Image size at resolution level <b>2</b>: 768×768 [pixels]</li>
        <li id="ul0010-0007" num="0107">Tile size at resolution level <b>2</b>: 128×128 [pixels].</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0086" num="0108">The server <b>204</b> holds image data encoded under the above encoding conditions in the secondary memory <b>103</b>, and reads out the data to the primary memory <b>102</b>, as needed. As is known well, information representing these encoding conditions is added as header information to encoded data. The encoding conditions of encoded data can be obtained by referring to the header information.</p>
<p id="p-0087" num="0109"><figref idref="DRAWINGS">FIG. 7</figref> is a view showing the relationship between the tile and resolution of an image represented by encoded data held by the server <b>204</b>. In the first embodiment, since one tile corresponds to one position, the position is not illustrated in <figref idref="DRAWINGS">FIG. 7</figref>.</p>
<p id="p-0088" num="0110">As described above, the server <b>204</b> holds encoded data of resolution levels <b>0</b> to <b>2</b> for one image. An image at each resolution level is segmented into a plurality of tiles (36 tiles in <figref idref="DRAWINGS">FIG. 7</figref>). In <figref idref="DRAWINGS">FIG. 7</figref>, tiles are assigned numbers, which are indices unique to the respective tiles.</p>
<p id="p-0089" num="0111">For descriptive convenience, the client terminal downloads, of encoded data as a set of encoded data of images at respective resolution levels shown in <figref idref="DRAWINGS">FIG. 7</figref>, data necessary to display an entire image in all color components at resolution level <b>0</b> and layer <b>4</b> from the server <b>204</b>, and caches the downloaded data.</p>
<p id="p-0090" num="0112">Assume that the client terminal transmits to the server <b>204</b> an encoded data transmission request to display the upper left region of an image at resolution level <b>2</b> and layer <b>4</b> in all color components. In the first embodiment, together with the transmission request, the client terminal can transmit to the server <b>204</b> data for instructing the server <b>204</b> to transmit response data so as to limit the upper limit value of the total data size of JPIP response data serving as response data (data to be sent back from the server <b>204</b> in accordance with the transmission request), i.e., the upper limit value of the total data size of the message header <b>608</b> and message body <b>609</b> to 360 k [bytes].</p>
<p id="p-0091" num="0113">That is, assume that the client terminal requests response data prepared by limiting data of regions <b>701</b> and <b>702</b> in <figref idref="DRAWINGS">FIG. 7</figref> to 360 k [bytes]. In the first embodiment, the client terminal transmits the following character string which indicates the transmission request and designation of the upper limit value of the data size of response data:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>GET </i>target=image.jp2 &amp; <i>fsiz=</i>768,768 &amp; <i>roff=</i>0,0 &amp; <i>rsiz=</i>512,384 &amp; type=<i>jpp−stream &amp; align=yes &amp; len=</i>360000 &amp; need=<i>r</i>1, <i>r</i>2<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0092" num="0114">In this character string, “image.jp2” indicates the name (file name) of encoded image data which is requested by the client terminal to be transmitted from the server <b>204</b>, and “fsiz=768,768” indicates that the encoded data which is requested to be transmitted from the server <b>204</b> has an upper limit value “2” of the resolution level (see <figref idref="DRAWINGS">FIG. 7</figref>). That is, the resolution level <b>0</b>, <b>1</b> and <b>2</b> are requested.</p>
<p id="p-0093" num="0115">“roff=0,0 &amp; rsiz=512,384” indicates that the encoded data which is requested to be transmitted from the server <b>204</b> is encoded data of a region (region <b>701</b> in <figref idref="DRAWINGS">FIG. 7</figref>) having a coordinate value (0,0) at the upper left corner and a size of 512×384 in the image at the resolution level <b>2</b>. Since the resolution level <b>0</b>, <b>1</b> and <b>2</b> are requested, as described above, data of regions in the image at resolution level <b>0</b> and <b>1</b> corresponding to the region <b>701</b> (e.g., region <b>702</b> for resolution level <b>1</b>) are also subjected to the transmission request.</p>
<p id="p-0094" num="0116">“type=jpp−stream &amp; align=yes” indicates a request for response data of respective packets, and “len=360000” indicates that the upper limit value of the data size of response data is 360 k [bytes].</p>
<p id="p-0095" num="0117">“need=r1, r2” indicates that data other than acquired data of resolution level <b>0</b> are requested.</p>
<p id="p-0096" num="0118">The client terminal transmits the above character string as request data to the server <b>204</b>. The server <b>204</b> interprets the request data, and sends back requested encoded data of the designated number of bytes or less to the client terminal.</p>
<p id="p-0097" num="0119">A process executed by the server <b>204</b> upon reception of the request data will be explained in more detail.</p>
<p id="p-0098" num="0120"><figref idref="DRAWINGS">FIG. 8</figref> is a flowchart showing a main process executed when the server <b>204</b> receives the above-mentioned request data from the client terminal. A program shown in the flowchart of <figref idref="DRAWINGS">FIG. 8</figref> is saved in the secondary memory <b>103</b>, and loaded to the primary memory <b>102</b>. When the program is executed by the CPU <b>101</b>, the server <b>204</b> realizes processes to be described later.</p>
<p id="p-0099" num="0121">In step S<b>801</b>, the server <b>204</b> receives request data transmitted from the client terminal. The received request data is temporarily stored in the primary memory <b>102</b>.</p>
<p id="p-0100" num="0122">In step S<b>802</b>, the server <b>204</b> interprets the request data received in step S<b>801</b>, and specifies requested layer, resolution level, component, position, and tile ranges. Let Ly_low, Ly_up, Rs_low, Rs_up, Cp_low, Cp_up, Ps_low, and Ps_up be the minimum and maximum values of the requested layer, resolution level, component, and position ranges, and N be the number of tiles falling within the requested range. In the first embodiment, values represented by the respective variables are
<ul id="ul0011" list-style="none">
    <li id="ul0011-0001" num="0000">
    <ul id="ul0012" list-style="none">
        <li id="ul0012-0001" num="0123">Ly_low=0, Ly_up=4</li>
        <li id="ul0012-0002" num="0124">Rs_low=0, Rs_up=2</li>
        <li id="ul0012-0003" num="0125">Cp_low=0, Cp_up=2</li>
        <li id="ul0012-0004" num="0126">Ps_low=0, Ps_up=0</li>
        <li id="ul0012-0005" num="0127">N=12</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0101" num="0128">As described above, the client terminal requests the server <b>204</b> to send encoded data to be displayed in all color components at resolution level <b>2</b> and layer <b>4</b>. The layer range of the transmission request includes layers <b>0</b> to <b>4</b>, the resolution level range of the transmission request includes resolution levels <b>0</b> to <b>2</b>, the component range of the transmission request includes components <b>0</b> to <b>2</b>, and the position range of the transmission request includes only position <b>0</b>.</p>
<p id="p-0102" num="0129">In order to specify the number N of tiles, the server <b>204</b> can refer to the description “roff=x1,y1 &amp; rsiz=x2,y2” of the request data, specify a minimum “region of tiles” which contains a region having a coordinate value (x1,y1) at the upper left corner and a coordinate value (x1+x2,y1+y2) at the lower right corner, and count the number of tiles in the specified region. In the first embodiment, the minimum region of tiles containing the target region is the region <b>701</b>. In the first embodiment, since encoded data corresponding to the region <b>701</b> is requested from encoded image data of resolution level <b>2</b> in the image shown in <figref idref="DRAWINGS">FIG. 7</figref>, encoded data of 12 tiles with indices of <b>0</b>, <b>1</b>, <b>2</b>, <b>3</b>, <b>6</b>, <b>7</b>, <b>8</b>, <b>9</b>, <b>12</b>, <b>13</b>, <b>14</b>, and <b>15</b> is requested. Hence, the variable N=12.</p>
<p id="p-0103" num="0130">In the process of step S<b>802</b> and processes to be described later, data representing the obtained result can be temporarily stored in the primary memory <b>102</b> and used for subsequent processes.</p>
<p id="p-0104" num="0131">The indices of requested tiles are held in a one-dimensional array Pt in ascending order. The array Pt is
<ul id="ul0013" list-style="none">
    <li id="ul0013-0001" num="0000">
    <ul id="ul0014" list-style="none">
        <li id="ul0014-0001" num="0132">Pt[0]=0, Pt[1]=1, Pt[2]=2, Pt[3]=3</li>
        <li id="ul0014-0002" num="0133">Pt[4]=6, Pt[5]=7, Pt[6]=8, Pt[7]=9</li>
        <li id="ul0014-0003" num="0134">Pt[8]=12, Pt[9]=13, Pt[10]=14, Pt[11]=15.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0105" num="0135">In step S<b>803</b>, the server <b>204</b> determines whether response data has a size limitation. In the first embodiment, the server <b>204</b> analyzes a text in the request data to check whether the text includes the description “len=”. If the description “len=” exists, the server <b>204</b> determines that the response data has a size limitation. If the description “len=” does not exist as a result of analysis, the process advances to step S<b>804</b>. In step S<b>804</b>, of all data which are requested by the client terminal of the server <b>204</b>, i.e., encoded data which are specified by “image.jp2” and contain tiles with indices of <b>0</b>, <b>1</b>, <b>2</b>, <b>3</b>, <b>6</b>, <b>7</b>, <b>8</b>, <b>9</b>, <b>12</b>, <b>13</b>, <b>14</b>, and <b>15</b>, encoded data of regions corresponding to layers <b>1</b> to <b>4</b>, resolution level <b>0</b>, components <b>0</b> to <b>2</b>, and position <b>0</b>, and encoded data of regions corresponding to layers <b>0</b> to <b>4</b>, resolution levels <b>1</b> and <b>2</b>, components <b>0</b> to <b>2</b>, and position <b>0</b> are written as response data in a transmission buffer defined in the primary memory <b>102</b>. Details of the process in step S<b>804</b> will be described later with reference to <figref idref="DRAWINGS">FIG. 9</figref>.</p>
<p id="p-0106" num="0136">If the description “len=” exists, the process advances to step S<b>805</b>. In the first embodiment, since “len=360000” exists, the server <b>204</b> determines that the response data has a size limitation.</p>
<p id="p-0107" num="0137">In step S<b>805</b>, the server <b>204</b> acquires the upper limit value (byte_limit) of the response data size from the request data. In the first embodiment, byte_limit=360 k [bytes] from the description “len=360000”.</p>
<p id="p-0108" num="0138">In step S<b>806</b>, the server <b>204</b> writes data as response data in the transmission buffer up to an upper limit value equal to or smaller than byte_limit [bytes] acquired in step S<b>805</b>, out of all data which are requested by the client terminal of the server <b>204</b>. Details of the process in step S<b>806</b> will be described later with reference to <figref idref="DRAWINGS">FIG. 10</figref>.</p>
<p id="p-0109" num="0139">In step S<b>807</b>, the server <b>204</b> transmits the response data written in the transmission buffer to the client terminal.</p>
<p id="p-0110" num="0140">Details of the process in step S<b>804</b> executed by the server <b>204</b> when response data is free from any size limitation will be explained with reference to <figref idref="DRAWINGS">FIG. 9</figref> showing the flowchart of this process.</p>
<p id="p-0111" num="0141">In step S<b>901</b>, the minimum layer number Ly_low of return data that is acquired in step S<b>802</b> is substituted into a layer counter variable Ly utilized to generate response data.</p>
<p id="p-0112" num="0142">In step S<b>902</b>, the minimum resolution level number Rs_low of the return data that is acquired in step S<b>802</b> is substituted into a resolution level counter variable Rs utilized to generate response data.</p>
<p id="p-0113" num="0143">In step S<b>903</b>, the minimum component number Cp_low of the return data that is acquired in step S<b>802</b> is substituted into a component number counter variable Cp utilized to generate response data.</p>
<p id="p-0114" num="0144">In step S<b>904</b>, the minimum position number Ps_low of the return data that is acquired in step S<b>802</b> is substituted into a position counter variable Ps utilized to generate response data.</p>
<p id="p-0115" num="0145">In step S<b>905</b>, “0” is substituted into a counter variable n which is utilized to generate response data and set for the number of an array for holding the indices of the return tiles, and initializes the counter variable n.</p>
<p id="p-0116" num="0146">It is determined in step S<b>906</b> whether packet data Packet (Pt[n], Ly, Rs, Cp, Ps) specified by the layer number Ly, resolution level number Rs, component number Cp, and position number Ps of the tile Pt[n] is data to be sent back.</p>
<p id="p-0117" num="0147">If YES in step S<b>906</b>, the process advances to step S<b>908</b>; if NO, to step S<b>909</b>. In the first embodiment, when the process in step S<b>906</b> is executed for the first time, Packet (Pt[0]=0, Ly=0, Rs=0, Cp=0, Ps=0) is a determination target. However, the request data contains the description “need=r1, r2”, and this description requests data other than acquired data of resolution level <b>0</b>, as described above. Thus, Packet (Pt[0]=0, Ly=0, Rs=0, Cp=0, Ps=0) is determined not to be return data, and the process advances to step S<b>909</b>.</p>
<p id="p-0118" num="0148">When the counter is incremented to Packet (Pt[0]=0, Ly=0, Rs=1, Cp=0, Ps=0), it is interpreted from the description “need=r1, r2” that this packet has not been acquired by the client terminal and is requested data. In step S<b>906</b>, the packet is determined to be return data, and the process advances to step S<b>908</b>.</p>
<p id="p-0119" num="0149">In step S<b>908</b>, data of Packet (Pt[n], Ly, Rs, Cp, Ps) is read out to the transmission buffer, and JPIP response data as shown in <figref idref="DRAWINGS">FIG. 6B</figref> is generated.</p>
<p id="p-0120" num="0150">In step S<b>909</b>, the value n as the counter variable of the array Pt is incremented by one. The incremented variable n is compared with a value (N−1) obtained by subtracting one from the number N of return tiles. If the variable n is larger than (N−1), the process advances to step S<b>910</b>; if the variable n is equal to or smaller than (N−1), to step S<b>906</b>.</p>
<p id="p-0121" num="0151">In step S<b>910</b>, the value of the position counter variable Ps is incremented by one, and compared with the maximum position number Ps_up acquired in step S<b>802</b>. If the value Ps becomes larger than Ps_up as a result of increment, the process advances to step S<b>911</b>; if the value Ps is equal to or smaller than Ps_up, the process returns to step S<b>905</b>.</p>
<p id="p-0122" num="0152">In the first embodiment, since Ps_up=0, the value Ps always exceeds Ps_up upon increment in step S<b>910</b>, and the process always advances to step S<b>911</b>.</p>
<p id="p-0123" num="0153">In step S<b>911</b>, the component counter variable Cp is incremented by one, and compared with the maximum value Cp_up of the return component number that is acquired in step S<b>802</b>. If Cp is equal to or smaller than Cp_up as a result of comparison, the process returns to step S<b>904</b>; if Cp is larger than Cp_up, the process advances to step S<b>912</b>.</p>
<p id="p-0124" num="0154">In step S<b>912</b>, the resolution level counter Rs is incremented by one, and compared with the maximum number Rs_up of the return resolution level number that is acquired in step S<b>802</b>. If Rs is equal to or smaller than Rs_up as a result of comparison, the process returns to step S<b>903</b>; if Rs is larger than Rs_up, the process advances to step S<b>913</b>.</p>
<p id="p-0125" num="0155">In step S<b>913</b>, the layer counter variable Ly is incremented by one, and compared with the maximum number Ly_up of the return layer number that is acquired in step S<b>802</b>. If Ly is equal to or smaller than Ly_up as a result of comparison, the process returns to step S<b>902</b>; if Ly is larger than Ly_up, the server <b>204</b> determines that all encoded data requested by the client terminal have been read out to the transmission buffer. The process of <figref idref="DRAWINGS">FIG. 9</figref> ends, and the process advances to step S<b>807</b>.</p>
<p id="p-0126" num="0156">Details of the process in step S<b>806</b> executed by the server <b>204</b> when response data has a size limitation will be explained with reference to <figref idref="DRAWINGS">FIG. 10</figref> showing the flowchart of this process. In <figref idref="DRAWINGS">FIG. 10</figref>, the same step numbers as those of steps shown in <figref idref="DRAWINGS">FIG. 9</figref> denote the same steps, and a description thereof will be omitted.</p>
<p id="p-0127" num="0157">In step S<b>1001</b>, “the indices of tiles to which encoded data to be transmitted to the client terminal belong” held in the array Pt is rearranged in descending order of priority, and held in an array Pt′. Details of the process in step S<b>1001</b> will be described later.</p>
<p id="p-0128" num="0158">In step S<b>1002</b>, a variable “length” for counting the size of data stored as response data in the transmission buffer is initialized by substituting “0” in the variable “length”. The above-described processes from step S<b>901</b> to step S<b>905</b> are executed.</p>
<p id="p-0129" num="0159">Upon the completion of the processes from step S<b>901</b> to step S<b>905</b>, the process advances to step S<b>1003</b>. It is determined in step S<b>1003</b> whether packet data Packet (Pt′[n], Ly, Rs, Cp, Ps) with the layer number Ly, resolution level number Rs, component number Cp, and position number Ps for the tile index Pt′[n] is data to be sent back.</p>
<p id="p-0130" num="0160">If YES in step S<b>1003</b>, the process advances to step S<b>1004</b>; if NO, to step S<b>909</b>. In the first embodiment, when the process in step S<b>1003</b> is executed for the first time, Packet (Pt′[0]=0, Ly=0, Rs=0, Cp=0, Ps=0) is a determination target. However, the request data contains the description “need=r1, r2”, and this description requests data other than acquired data of resolution level <b>0</b>, as described above. Packet (Pt′[0]=0, Ly=0, Rs=0, Cp=0, Ps=0) is determined not to be return data, and the process advances to step S<b>909</b>.</p>
<p id="p-0131" num="0161">When the counter is incremented to Packet (Pt′[0]=0, Ly=0, Rs=1, Cp=0, Ps=0), it is interpreted from the description “need=r1, r2” that this packet has not been acquired by the client terminal and is requested data. In step S<b>1003</b>, the packet is determined to be return data, and the process advances to step S<b>1004</b>.</p>
<p id="p-0132" num="0162">In step S<b>1004</b>, a data length Plen of Packet (Pt′[n], Ly, Rs, Cp, Ps) is acquired. As a method of acquiring Plen, the data length Plen may be read from a file which describes the data length Plen of each packet, or read from a field which describes the data length Plen of each packet as metadata. Alternatively, the data length Plen of each packet may be obtained by actually analyzing the packet header.</p>
<p id="p-0133" num="0163">In step S<b>1005</b>, a length MsgHlen of the message header <b>608</b> of Packet (Pt′[n], Ly, Rs, Cp, Ps) is acquired. The length MsgHlen can be easily acquired by deciding whether to contain, in response data, each of three elements of the message header <b>608</b>:</p>
<p id="p-0134" num="0164">Identifier which indicates that data is a precinct data-bin
<ul id="ul0015" list-style="none">
    <li id="ul0015-0001" num="0000">
    <ul id="ul0016" list-style="none">
        <li id="ul0016-0001" num="0165">Codestream number</li>
        <li id="ul0016-0002" num="0166">Auxiliary information
<br/>
and calculating and adding elements to be actually contained and three elements of the message header <b>608</b>:
</li>
        <li id="ul0016-0003" num="0167">PrID (Pt′[n], Rs, Cp, Ps)</li>
        <li id="ul0016-0004" num="0168">PrOffset</li>
        <li id="ul0016-0005" num="0169">Data length of ResLen.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0135" num="0170">In step S<b>1006</b>, the sum of the data length Plen acquired in step S<b>1004</b> and the message header length MsgHlen acquired in step S<b>1005</b> is compared with a value obtained by subtracting the size “length” of data which has already been written in the transmission buffer from the upper limit value byte_limit of the response data size that is acquired in step S<b>805</b>. That is, it is determined whether the data length held by the transmission buffer does not exceed the upper limit value byte_limit as a result of writing Packet (Pt′[n], Ly, Rs, Cp, Ps) as JPIP response data in the transmission buffer.</p>
<p id="p-0136" num="0171">If (Plen+MsgHlen) is equal to or smaller than (byte_limit−length), the data length is determined not to exceed the upper limit value byte_limit even upon writing JPIP response data generated from Packet (Pt′[n], Ly, Rs, Cp, Ps) in the transmission buffer, and the process advances to step S<b>1007</b>. If (Plen+MsgHlen) is larger than (byte_limit−length), the data length is determined to exceed the upper limit value byte_limit upon writing JPIP response data generated from Packet (Pt′[n], Ly, Rs, Cp, Ps) in the transmission buffer. The process of <figref idref="DRAWINGS">FIG. 10</figref> ends, and the process advances to step S<b>807</b>.</p>
<p id="p-0137" num="0172">In step S<b>1007</b>, data of Packet (Pt′[n], Ly, Rs, Cp, Ps) is read out to the transmission buffer, and generates JPIP response data as shown in <figref idref="DRAWINGS">FIG. 6B</figref>.</p>
<p id="p-0138" num="0173">In step S<b>1008</b>, the number (Plen+MsgHlen) of bytes of the JPIP response data written in the transmission buffer in step S<b>1007</b> is added to the variable “length” for counting the data size of response data stored in the transmission buffer. The process advances to step S<b>909</b>, and the processes from step S<b>909</b> to step S<b>913</b> are executed.</p>
<p id="p-0139" num="0174">By the above-described processes, the server <b>204</b> sends back data at scalability in the layer direction (image quality direction) in steps S<b>804</b> and S<b>806</b>.</p>
<p id="p-0140" num="0175">Details of the process in step S<b>1001</b>, i.e., details of the process of rearranging “the indices of tiles to which encoded data to be transmitted to the client terminal belong” held in the array Pt in descending order of priority, and holding the indices in the array Pt′ will be described with reference to <figref idref="DRAWINGS">FIG. 11</figref> showing the process of this process.</p>
<p id="p-0141" num="0176">In step S<b>1101</b>, a header contained in encoded image data is referred to, and “the number Twidth of tiles of the image in the horizontal direction” is acquired by referring to pieces of information written in the header. In the first embodiment, encoding conditions for encoded image data managed by the server <b>204</b> (saved in the storage device <b>205</b>) are
<ul id="ul0017" list-style="none">
    <li id="ul0017-0001" num="0000">
    <ul id="ul0018" list-style="none">
        <li id="ul0018-0001" num="0177">Image size at resolution level <b>2</b>: 768 pixels×768 pixels</li>
        <li id="ul0018-0002" num="0178">Tile size at resolution level <b>2</b>: 128 pixels×128 pixels.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0142" num="0179">These pieces of encoding condition information are obtained by referring to the header information. “The number Twidth of tiles of the image in the horizontal direction” can be acquired by calculating
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>Twidth=768/128=6.<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0143" num="0180">In step S<b>1102</b>, the number Tx of tiles in the horizontal direction and the number Ty of tiles in the vertical direction within a region requested by the client terminal are obtained. These values can be easily obtained from the tile size attained from the JPEG2000 main header and the size of the request region attained as a result of analyzing request data.</p>
<p id="p-0144" num="0181">In the first embodiment, the description “fsiz=768,768 &amp; roff=0,0 &amp; rsiz=512,384” in the character string indicated by the request data reveals that the region <b>701</b> is requested as a request region. Tx and Ty can be obtained by calculating Tx=512/128=4 and Ty=384/128=3.</p>
<p id="p-0145" num="0182">In step S<b>1103</b>, a center region C (the number Tcx of tiles in the horizontal direction and the number Tcy of tiles in the vertical direction) within the request region is determined, and an index (tile number) Ttl of a tile at the upper left corner of the determined center region C is acquired. Details of the method of determining the center region C will be described later with reference to <figref idref="DRAWINGS">FIG. 12</figref>.</p>
<p id="p-0146" num="0183">In step S<b>1104</b>, the counter variable n representing the element number of the array Pt′ is initialized by substituting “0” in the counter variable n.</p>
<p id="p-0147" num="0184">In step S<b>1105</b>, the indices of outermost tiles in the center region C (i.e., tiles positioned at the upper, lower, right, and left ends of the center region C) are rearranged in ascending order, and held in the array Pt′[n]. Details of the process in step S<b>1105</b> will be described with reference to <figref idref="DRAWINGS">FIG. 13</figref>.</p>
<p id="p-0148" num="0185">In step S<b>1106</b>, the number Tcy of tiles in the vertical direction within the center region C and the number Ty of tiles in the vertical direction within the request region are compared with each other. If Tcy=Ty, the process of <figref idref="DRAWINGS">FIG. 11</figref> ends, and the process advances to step S<b>1002</b>. That is, if Tcy=Ty, the size of the center region C having undergone processes to be described later can be determined to coincide with the size of the request region. Thus, the process of <figref idref="DRAWINGS">FIG. 11</figref> ends, and the process advances to step S<b>1002</b>.</p>
<p id="p-0149" num="0186">If Tcy and Ty exhibit different values, the process advances to step S<b>1107</b>. Since it can be determined that the size of the center region C having undergone processes to be described later is smaller than the size of the request region and a region to be processed remains, the process advances to step S<b>1107</b>.</p>
<p id="p-0150" num="0187">In step S<b>1107</b>, the size of the center region C is enlarged by one tile at each of the upper, lower, right, and left ends by adding “2” to the number Tcx of tiles in the horizontal direction and the number Tcy of tiles in the vertical direction within the center region C. As the size of the center region C is updated, the index of the tile at the upper left corner of the center region C also changes. The index of the tile at the upper left corner of the center region C whose size has changed can be obtained by subtracting (Twidth+1) from the current index Ttl.</p>
<p id="p-0151" num="0188">Details of the process of setting the center region C within the request region in step S<b>1103</b> will be explained with reference to <figref idref="DRAWINGS">FIG. 12</figref> showing the detailed flowchart of this process.</p>
<p id="p-0152" num="0189">It is determined in step S<b>1201</b> whether the number Tx of tiles in the horizontal direction within the request region is even or odd. If the number Tx of tiles is even, the process advances to step S<b>1202</b>; if the number Tx of tiles is odd, to step S<b>1203</b>. If the number Tx of tiles in the horizontal direction is even, “2” is set as the number Tcx of tiles in the horizontal direction within a center region C to be set in step S<b>1202</b>, and Pt[(Tx−2)/2] is set as the index Ttl of the tile at the upper left corner of the center region C.</p>
<p id="p-0153" num="0190">If Tx is odd, “1” is set as the number Tcx of tiles in the horizontal direction in a center region C to be set in step S<b>1203</b>, and Pt[quotient of Tx/2] is set as the index Ttl of the tile at the upper left corner of the center region C.</p>
<p id="p-0154" num="0191"><figref idref="DRAWINGS">FIGS. 14A and 14B</figref> are views for explaining setting of the center region C. More specifically, <figref idref="DRAWINGS">FIG. 14A</figref> is a view for explaining setting of the center region C when the numbers of tiles in the vertical and horizontal directions within the request region are even. <figref idref="DRAWINGS">FIG. 14B</figref> is a view for explaining setting of the center region C when the numbers of tiles in the vertical and horizontal directions within the request region are odd.</p>
<p id="p-0155" num="0192">For example, when a region <b>1401</b> shown in <figref idref="DRAWINGS">FIG. 14A</figref> is a request region, the number Tx of tiles in the horizontal direction is an even number of 6. In the process according to the flowchart shown in <figref idref="DRAWINGS">FIG. 12</figref>, the process advances from step S<b>1201</b> to step S<b>1202</b>. In step S<b>1202</b>, Tcx and Ttl are set to Tcx=2 and Ttl=Pt[(6−2)/2]=Pt[2], as described above. In <figref idref="DRAWINGS">FIG. 14A</figref>, Pt[2] indicates the index of a tile <b>1406</b>.</p>
<p id="p-0156" num="0193">For example, when a region <b>1411</b> shown in <figref idref="DRAWINGS">FIG. 14B</figref> is a request region, the number Tx of tiles in the horizontal direction is an odd number of 5. In the process according to the flowchart shown in <figref idref="DRAWINGS">FIG. 12</figref>, the process advances from step S<b>1201</b> to step S<b>1203</b>. In step S<b>1203</b>, Tcx and Ttl are set to Tcx=1 and Ttl=Pt[quotient of 5/2]=Pt[2], as described above. In <figref idref="DRAWINGS">FIG. 14B</figref>, Pt[2] indicates the index of a tile <b>1416</b>.</p>
<p id="p-0157" num="0194">In this manner, in steps S<b>1202</b> and S<b>1203</b>, the number of tiles in the horizontal direction within the center region C is set as Tcx regardless of whether the number Tx of tiles in the horizontal direction is even or odd. The index of a tile on the uppermost column and the same row as that of the tile at the upper left corner of the center region C is set as Ttl.</p>
<p id="p-0158" num="0195">In the next process, the number of tiles in the vertical direction within the center region C is set as Tcy, and the index of a tile on the same row and column as those of the tile at the upper left corner of the center region C, i.e., the index of the tile at the upper left corner of the center region C is set as Ttl.</p>
<p id="p-0159" num="0196">It is determined in step S<b>1204</b> whether the number Ty of tiles in the vertical direction within the request region is even or odd. If the number Ty of tiles is even, the process advances to step S<b>1205</b>; if the number Ty of tiles is odd, to step S<b>1206</b>. If the number Ty of tiles in the vertical direction is even, “2” is set as the number Tcy of tiles in the vertical direction within the center region C in step S<b>1205</b>. The sum of adding Twidth×(Ty−2)/2 to the index Ttl set by the above process is newly set as the index Ttl of the tile at the upper left corner of the center region C. By the process in step S<b>1205</b>, the index of the tile at the upper left corner of the center region C is set as the index Ttl. Since the numbers of tiles in the horizontal and vertical directions within the center region C can be obtained by the above process, the process of <figref idref="DRAWINGS">FIG. 12</figref> ends, and the process advances to step S<b>1104</b>.</p>
<p id="p-0160" num="0197">If Ty is odd, “1” is set as the number Tcy of tiles in the vertical direction within a center region C to be set in step S<b>1206</b>. The sum of adding Twidth×(quotient of Ty/2) to the index Ttl set by the above process is newly set as the index Ttl of the tile at the upper left corner of the center region C. By the process in step S<b>1206</b>, the index of the tile at the upper left corner of the center region C is set as the index Ttl. Since the numbers of tiles in the horizontal and vertical directions within the center region C can be obtained by the above process, the process of <figref idref="DRAWINGS">FIG. 12</figref> ends, and the process advances to step S<b>1104</b>.</p>
<p id="p-0161" num="0198">The processes in steps S<b>1204</b>, S<b>1205</b>, and S<b>1206</b> will be explained in more detail with reference to <figref idref="DRAWINGS">FIGS. 14A and 14B</figref>. For example, when the region <b>1401</b> shown in <figref idref="DRAWINGS">FIG. 14A</figref> is a request region, the number Ty of tiles in the vertical direction is an even number of 6. In the process according to the flowchart shown in <figref idref="DRAWINGS">FIG. 12</figref>, the process advances from step S<b>1204</b> to step S<b>1205</b>. In step S<b>1205</b>, Tcy=2, and Ttl is the sum of 10×(6−2)/2=20 to the value Ttl obtained in step S<b>1202</b>, as described above. The index of a tile at a position <b>1404</b> lower by two columns from the Pt[2] position <b>1406</b> is set as Ttl.</p>
<p id="p-0162" num="0199">For example, when the region <b>1411</b> shown in <figref idref="DRAWINGS">FIG. 14B</figref> is a request region, the number Ty of tiles in the vertical direction is an odd number of 5. In the process according to the flowchart shown in <figref idref="DRAWINGS">FIG. 12</figref>, the process advances from step S<b>1204</b> to step S<b>1206</b>. In step S<b>1206</b>, Tcy=1, and Ttl is the sum of 10×(quotient of 5/2)=10×2=20 to the value Ttl obtained in step S<b>1203</b>, as described above. The index of a tile at a position <b>1414</b> lower by two columns from the Pt[2] position <b>1416</b> is set as Ttl.</p>
<p id="p-0163" num="0200">In steps S<b>1205</b> and S<b>1206</b>, the number of tiles in the vertical direction within the center region C is set as Tcy regardless of whether the number Ty of tiles in the vertical direction is even or odd. The index of the tile at the upper left corner of the center region C is set as Ttl.</p>
<p id="p-0164" num="0201">In the first embodiment, since the request region is the region <b>701</b> shown in <figref idref="DRAWINGS">FIG. 7</figref>, Tcx, Tcy, and Ttl are respectively set to Tcx=2, Tcy=1, and Ttl=7 by the process according to the flowchart shown in <figref idref="DRAWINGS">FIG. 12</figref>.</p>
<p id="p-0165" num="0202">The process according to the flowchart shown in <figref idref="DRAWINGS">FIG. 11</figref> will be described in more detail with reference to <figref idref="DRAWINGS">FIGS. 14A and 14B</figref>. In <figref idref="DRAWINGS">FIG. 14A</figref>, a region <b>1402</b> is set as the center region C in the process of step S<b>1103</b> (i.e., process according to the flowchart shown in <figref idref="DRAWINGS">FIG. 12</figref>). When the process in step S<b>1107</b> is performed for the first time, the size of the region <b>1402</b> is enlarged by one tile at each of the upper, lower, right, and left ends in this step, as described above. A region <b>1403</b> in <figref idref="DRAWINGS">FIG. 14A</figref> can be newly obtained as the center region C by the process of step S<b>1107</b>.</p>
<p id="p-0166" num="0203">As shown in <figref idref="DRAWINGS">FIG. 14A</figref>, “33” is set as the index. Ttl of the tile at the upper left corner of the center region C (<b>1402</b>). When the process in step S<b>1107</b> is performed for the first time, the center region C is updated to the region <b>1403</b>. The index Ttl of the tile at the upper left corner of the center region C after updating is changed to Ttl=33−10−1=22 from the above-mentioned calculation “Ttl=Ttl−(Twidth+1)”. As a result, “22” is newly set as Ttl.</p>
<p id="p-0167" num="0204">After the end of the process in step S<b>1107</b>, the process returns to step S<b>1105</b>. After the region <b>1403</b> is set as the center region C, the process returns to step S<b>1105</b>. When the process up to step S<b>1106</b> is completed, Tcy=4≠Ty=6, and the process advances to step S<b>1107</b> through the process in step S<b>1106</b>. The size of the center region C (<b>1403</b>) is enlarged by one tile at each of the upper, lower, right, and left ends, newly obtaining the request region <b>1401</b> in <figref idref="DRAWINGS">FIG. 14A</figref> as the center region C. The process then returns to step S<b>1105</b>. When the process advances to step S<b>1106</b>, Tcy=Ty=6, the process of <figref idref="DRAWINGS">FIG. 11</figref> is determined to end, and the process advances to step S<b>1002</b>.</p>
<p id="p-0168" num="0205">In the first embodiment, a region <b>703</b> is specified as the center region C which is set in the first process, and Tcx=2, Tcy=1, and Ttl=7 are calculated. The region <b>701</b> is then specified as the center region C which is set in the second process, and Tcx=4, Tcy=3, and Ttl=0 are calculated. That is, the center region C which is set in the second process overlaps the request region.</p>
<p id="p-0169" num="0206">Details of the process in step S<b>1105</b> will be explained with reference to <figref idref="DRAWINGS">FIG. 13</figref> showing the flowchart of this process.</p>
<p id="p-0170" num="0207">In step S<b>1301</b>, a variable (counter) y for counting the number of tiles in the vertical direction within the center region C is initialized by substituting “1” in the variable y. The possible value of the variable y ranges from 1 (uppermost row) to Tcy (lowermost row).</p>
<p id="p-0171" num="0208">In step S<b>1302</b>, a variable “left” for storing the index of a tile at the left end on the yth row from the top of the center region C is initialized by substituting the value of the variable Ttl in the variable “left”. Since y=1 in step S<b>1302</b>, the index Ttl of the tile at the left end on the first row, i.e., at the upper left corner of the center region C is substituted as an initial value into the variable “left”.</p>
<p id="p-0172" num="0209">In step S<b>1303</b>, the value of the variable y within the center region C is checked, and if y is 1 or Tcy, the process advances to step S<b>1304</b>; if y takes another value, to step S<b>1308</b>. That is, if the current tile of interest is positioned on the uppermost or lowermost row of the center region C in this process, the process advances to step S<b>1304</b>; otherwise, to step S<b>1308</b>.</p>
<p id="p-0173" num="0210">If the process advances from step S<b>1302</b> to step S<b>1303</b>, y=1 and the process advances to step S<b>1304</b>.</p>
<p id="p-0174" num="0211">In step S<b>1304</b>, a variable x representing the index of a tile of interest within the center region C is initialized by substituting the value of the variable “left” in the variable x. In step S<b>1305</b>, the value of the variable x is held in the array Pt′[n]. In step S<b>1306</b>, “1” is added to the index x of the tile of interest to shift the tile of interest by one to the right. Furthermore, the variable n for counting the elements of the array Pt′ is incremented by one.</p>
<p id="p-0175" num="0212">In step S<b>1307</b>, the value of the variable x and the value (Ttl+Tcx−1) are compared, and if x&gt;(Ttl+Tcx−1), the process advances to step S<b>1309</b>; if x=(Ttl+Tcx−1), the process returns to step S<b>1305</b>. That is, the processes in steps S<b>1305</b> and S<b>1306</b> are repeated until the indices of tiles on one row are substituted in the array Pt′.</p>
<p id="p-0176" num="0213">In step S<b>1309</b>, the value of the variable y is incremented by one to shift the row of interest in the center region C to a row lower by one. Since the variable y representing the row of interest has changed, the value held by the variable “left” is updated by adding the number Twidth of tiles corresponding to the width of the entire image to the value of the variable “left” representing the number of the tile at the left end on the yth row.</p>
<p id="p-0177" num="0214">In step S<b>1310</b>, the variable y and the number Tcy of tiles in the vertical direction within the center region C are compared, and if y&gt;Tcy, i.e., the indices of tiles on all the rows have been substituted in the array Pt′, the process of <figref idref="DRAWINGS">FIG. 13</figref> ends, and the process advances to step S<b>1106</b>.</p>
<p id="p-0178" num="0215">If y≦Tcy, i.e., the indices of tiles on all the rows have not been substituted in the array Pt′ yet, the process returns to step S<b>1303</b> to repeat the subsequent processes.</p>
<p id="p-0179" num="0216">If “y=1 or y=Tcy” does not hold in step S<b>1303</b>, the above-mentioned process advances to step S<b>1308</b>. In step S<b>1308</b>, the variable “left” is substituted in the array Pt'[n], the value (left+Tcx−1) is substituted in Pt′[n+1], “2” is added to n, and the process advances to step S<b>1309</b>. In other words, the index of a tile at the left end of a row of interest in the center region C is substituted in the array Pt′[n], and the index of a tile at the right end of the row of interest in the center region C is substituted in Pt′[n+1].</p>
<p id="p-0180" num="0217">By the process according to the flowchart of <figref idref="DRAWINGS">FIG. 13</figref>, the indices of tiles in the center region C are sequentially held in the array Pt′[n] from left to right and top to bottom. At this time, only the indices of outermost tiles in the center region C are held in Pt′[n]. Since the first center region C <b>1402</b> falls within the second center region C <b>1403</b>, as shown in <figref idref="DRAWINGS">FIG. 14A</figref>, inner tiles have already been held in the array Pt′[n]. For this reason, only the indices of outer tiles in each subsequent center region C are held in Pt′[n].</p>
<p id="p-0181" num="0218">In the first embodiment, indices “<b>7</b> and <b>8</b>” of tiles in the first region C (<b>703</b>) of interest are substituted in the arrays Pt′[0] and Pt′[1]. Indices “<b>0</b>, <b>1</b>, <b>2</b>, <b>3</b>, <b>6</b>, <b>9</b>, <b>12</b>, <b>13</b>, <b>14</b>, and <b>15</b>” of tiles in the second region C (<b>701</b>) of interest are substituted in the array Pt′[n]. The array Pt′[n] finally holds
<ul id="ul0019" list-style="none">
    <li id="ul0019-0001" num="0000">
    <ul id="ul0020" list-style="none">
        <li id="ul0020-0001" num="0219">Pt′[0]=7, Pt′[1]=8,</li>
        <li id="ul0020-0002" num="0220">Pt′[2]=0, Pt′[3]=1, Pt′[4]=2, Pt′[5]=3</li>
        <li id="ul0020-0003" num="0221">Pt′[6]=6, Pt′[7]=9,</li>
        <li id="ul0020-0004" num="0222">Pt′[8]=12, Pt′[9]=13, Pt′[10]=14, Pt′[11]=15</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0182" num="0223">When encoded image data of a data size as shown in <figref idref="DRAWINGS">FIGS. 15A and 15B</figref> is managed by the server <b>204</b> (saved in the storage device <b>205</b>), response data obtained when the server <b>204</b> sends back data in the tile index order within the request region at scalability in the layer direction upon reception of the above-described request data, and response data obtained when the server <b>204</b> rearranges the indices of tiles sequentially from the center within the request region and sends back data in the rearranged index order at scalability in the layer direction are compared. In order to simplify calculation, data sizes upon adding message headers to packets of respective layers and resolution levels for all tiles and components comply with those shown in the table of <figref idref="DRAWINGS">FIG. 15B</figref>.</p>
<p id="p-0183" num="0224">In sending back data at scalability in the layer direction, the data size of 12 tiles of each layer at resolution level <b>1</b> and resolution level <b>2</b> is
<ul id="ul0021" list-style="none">
    <li id="ul0021-0001" num="0000">
    <ul id="ul0022" list-style="none">
        <li id="ul0022-0001" num="0225">layer <b>0</b>: (0.4+0.8)×3 components×12 tiles=43.2 [kbytes]</li>
        <li id="ul0022-0002" num="0226">layer <b>1</b>: (0.6+1.2)×3 components×12 tiles=64.8 [kbytes]</li>
        <li id="ul0022-0003" num="0227">layer <b>2</b>: (0.8+1.6)×3 components×12 tiles=86.4 [kbytes]</li>
        <li id="ul0022-0004" num="0228">layer <b>3</b>: (1.0+2.0)×3 components×12 tiles=108.0 [kbytes]</li>
        <li id="ul0022-0005" num="0229">layer <b>4</b>: (1.2+2.4)×3 components×12 tiles=129.6 [kbytes].</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0184" num="0230">The data sizes of layers <b>0</b> to <b>3</b> are added to obtain
<ul id="ul0023" list-style="none">
    <li id="ul0023-0001" num="0000">
    <ul id="ul0024" list-style="none">
        <li id="ul0024-0001" num="0231">43.2+64.8+86.4+108.0=302.4 [kbytes]
<br/>
The sum is smaller than 360 [kbytes] which is the upper limit value of response data, and thus data of layers <b>0</b> to <b>3</b> can be contained in the response data.
</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0185" num="0232">Also, data of layer <b>4</b> is contained in the response data. However, the upper limit value of the response data size is 360 [kbytes], and data of layer <b>4</b> can be contained in the response data by only 360.0−302.4=57.6 [kbytes].</p>
<p id="p-0186" num="0233">Since the data size of layer <b>4</b> and resolution level <b>1</b> is 1.2×3 components×12 tiles=43.2 [kbytes], data of layer <b>4</b> and resolution level <b>1</b> can be contained in the response data. As a result of containing data of layers <b>0</b> to <b>3</b> and data of layer <b>4</b> and resolution level <b>1</b> in the response data, the data size still containable in the response data is 360.0−302.4−43.2=14.4 [kbytes]. A field of 14.4 [kbytes] can contain data of two tiles of layer <b>4</b> and resolution level <b>2</b> (2.4×3 components×2 tiles=14.4 [kbytes]). The two tiles are selected from the head (head when viewed from a tile closer to the center within the request region) when tiles are referred to in order in which the indices of tiles are rearranged from the center within the request region.</p>
<p id="p-0187" num="0234"><figref idref="DRAWINGS">FIG. 21</figref> is a table showing the configuration of this response data. As shown in <figref idref="DRAWINGS">FIG. 21</figref>, the response data can finally contain data of layers <b>0</b> to <b>3</b>, data of layer <b>4</b> and resolution level <b>1</b>, and data of two tiles of layer <b>4</b> and resolution level <b>2</b>.</p>
<p id="p-0188" num="0235">When the server <b>204</b> sends back data at scalability in the layer direction in the tile index order within the request region, return tiles of resolution level <b>2</b> and layer <b>4</b> are upper left tiles <b>0</b> and <b>1</b> within the request region. To the contrary, the first embodiment rearranges the indices of tiles sequentially from the center within the request region, and sends back data at scalability in the layer direction in the rearranged index order. Return tiles of resolution level <b>2</b> and layer <b>4</b> are central tiles <b>7</b> and <b>8</b> in the request region. Return tiles of resolution level <b>2</b> and layer <b>4</b> in these cases are shown in <figref idref="DRAWINGS">FIGS. 16A and 16B</figref>.</p>
<p id="p-0189" num="0236"><figref idref="DRAWINGS">FIG. 16A</figref> is a view showing return tiles of resolution level <b>2</b> and layer <b>4</b> in transmitting tile data sequentially from an upper left tile in the request region. As described above, these return tiles are tiles <b>0</b> and <b>1</b>. <figref idref="DRAWINGS">FIG. 16B</figref> is a view showing return tiles of resolution level <b>2</b> and layer <b>4</b> in transmitting tile data by the method according to the first embodiment. These return tiles are two tiles <b>7</b> and <b>8</b> in the center region C.</p>
<p id="p-0190" num="0237">In many cases, the portion of interest in an image for the user is the central portion of the image. When the number of transmittable tiles is limited due to the upper limit value of the data size, tiles closer to the central portion have higher priority of transmission. This also applies to a case in which the request region is designated, and the interest level of the user is higher for the central portion of the request region.</p>
<p id="p-0191" num="0238">The first embodiment takes this background into consideration, and data of tiles at the central portion of the entire image or request region are contained in response data in larger quantities for high image quality.</p>
<p id="p-0192" num="0239">A larger part of a limited response data size can be assigned to data at the central portion of the request region than to data at the peripheral portion. This allows reproducing the central portion at higher image quality.</p>
<p id="p-0193" num="0240">This assignment is adjusted at only a portion of the highest image quality. While a designated response data size is exploited at maximum, the possibility at which the image quality or resolution may excessively change within the request region can be suppressed, providing a more natural image.</p>
<p id="p-0194" num="0241">The process according to the first embodiment can be executed even if no request region is designated (or the entire image is designated). In this case, the entire image is regarded as the request region, and response data which is higher in image quality at the central portion of the image and has a size equal to or smaller than a designated data size can be generated.</p>
<p id="h-0007" num="0000">[Second Embodiment]</p>
<p id="p-0195" num="0242">In the first embodiment, the tile transmission order is determined using only request data received from the client terminal. However, when some tiles contained in the request region are assigned metadata, the tile transmission order may be determined on the basis of the metadata. In this case, the second embodiment is different from the first embodiment in step S<b>1001</b> of arranging the indices of tiles in <figref idref="DRAWINGS">FIG. 10</figref>.</p>
<p id="p-0196" num="0243">The second embodiment assumes that metadata are assigned to eight tiles with indices of <b>6</b>, <b>7</b>, <b>15</b>, <b>16</b>, <b>21</b>, <b>22</b>, <b>30</b>, and <b>31</b>, as shown in <figref idref="DRAWINGS">FIG. 17</figref>. A process of determining the tile transmission order in this case will be explained.</p>
<p id="p-0197" num="0244">These tiles fall within three metadata-assigned regions <b>1701</b>, <b>1702</b>, and <b>1703</b>. The metadata-assigned region <b>1701</b> contains tiles <b>6</b> and <b>7</b>, and completely falls within a request region <b>701</b>. The metadata-assigned region <b>1702</b> contains tiles <b>15</b>, <b>16</b>, <b>21</b>, and <b>22</b>, and partially overlaps the request region <b>701</b>. The metadata-assigned region <b>1703</b> contains tiles <b>30</b> and <b>31</b>, and does not overlap the request region <b>701</b> at all.</p>
<p id="p-0198" num="0245">A tile index rearrangement process executed in step S<b>1001</b> in this case will be described with reference to <figref idref="DRAWINGS">FIG. 18</figref> showing the flowchart of this process.</p>
<p id="p-0199" num="0246">In step S<b>1801</b>, the indices of tiles which form a metadata-assigned region completely falling within the request region out of regions (metadata-assigned regions) of an image that are assigned metadata, i.e., regions that are formed from metadata-assigned tiles are held in Pt′.</p>
<p id="p-0200" num="0247">More specifically, adjacent “metadata-assigned tiles” are assembled and managed as one metadata-assigned region. Whether the indices of all tiles which form the metadata-assigned region are held in the array Pt is determined for each managed metadata-assigned region by referring to the array Pt which holds the indices of tiles of the region <b>701</b>. If all the indices are held, the metadata-assigned region can be determined to completely fall within the region <b>701</b>.</p>
<p id="p-0201" num="0248">In this way, the indices of tiles which form the metadata-assigned region completely falling within the region <b>701</b> are held in the array Pt′ in step S<b>1801</b>. In the example shown in <figref idref="DRAWINGS">FIG. 17</figref>, only the indices of tiles which form the region <b>1701</b> are held in the array Pt′ in step S<b>1801</b>. In this case, Pt′[0]=6 and Pt′[1]=7 in step S<b>1801</b>.</p>
<p id="p-0202" num="0249">In step S<b>1802</b>, the indices of tiles contained in the request region out of tiles in a metadata-assigned region which partially overlaps the request region are held in the array Pt′ subsequently to the data held in step S<b>1801</b>.</p>
<p id="p-0203" num="0250">More specifically, whether one or more indices of tiles which form a metadata-assigned region are held in the array Pt is determined for each managed metadata-assigned region by referring to the array Pt which holds the indices of tiles of the region <b>701</b>. If one or more indices are held, the metadata-assigned region can be determined to partially overlap the region <b>701</b>.</p>
<p id="p-0204" num="0251">Accordingly, in step S<b>1802</b>, the indices of tiles which form the metadata-assigned region partially overlapping the region <b>701</b> are held in the array Pt′. In the example shown in <figref idref="DRAWINGS">FIG. 17</figref>, only an index “15” of a tile out of tiles which form the region <b>1702</b> is held in the array Pt′ in step S<b>1802</b>. In this case, Pt′[2]=in step S<b>1802</b>.</p>
<p id="p-0205" num="0252">In step S<b>1803</b>, the indices held in the array Pt and the indices held in the array Pt′ in steps S<b>1801</b> and S<b>1802</b> are compared. Indices which have not been held in the array Pt′ are held in it in the index order, and the process ends. Upon the completion of the process according to the flowchart shown in <figref idref="DRAWINGS">FIG. 18</figref>, the array Pt′ sequentially holds the following data:
<ul id="ul0025" list-style="none">
    <li id="ul0025-0001" num="0000">
    <ul id="ul0026" list-style="none">
        <li id="ul0026-0001" num="0253">Pt′[0]=6, Pt′[1]=7, Pt′[2]=15,</li>
        <li id="ul0026-0002" num="0254">Pt′[3]=0, Pt′[4]=1, Pt′[5]=2, Pt′[6]=3,</li>
        <li id="ul0026-0003" num="0255">Pt′[7]=8, Pt′[8]=9,</li>
        <li id="ul0026-0004" num="0256">Pt′[9]=12, Pt′[10]=13, Pt′[11]=14.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0206" num="0257">Note that the second embodiment can adopt any metadata-assigned region specifying method. For example, when metadata is assigned to a partial region of an image in XML as described in ISO/IEC15444-2 Annex N, the metadata-assigned region can be specified by analyzing the position element of each metadata from a portion of the image file that is described in XML.</p>
<p id="p-0207" num="0258">In addition, various methods of specifying a metadata-assigned partial region are conceivable in accordance with the metadata assignment method. An optimal specifying method changes depending on each metadata assignment method, and a description thereof will be omitted.</p>
<p id="p-0208" num="0259">When encoded image data of a data size as shown in <figref idref="DRAWINGS">FIGS. 15A and 15B</figref> is managed by a server <b>204</b> (saved in a storage device <b>205</b>), tile numbers are rearranged in order from tiles contained in a metadata-assigned region within the request region, like the second embodiment. When the resultant data are sent back at scalability in the layer direction, return tiles of resolution level <b>2</b> and layer <b>4</b> are tiles <b>6</b> and <b>7</b> of the metadata-assigned region <b>701</b>. <figref idref="DRAWINGS">FIG. 16C</figref> shows return tiles of resolution level <b>2</b> and layer <b>4</b> in the second embodiment.</p>
<p id="p-0209" num="0260"><figref idref="DRAWINGS">FIG. 16C</figref> is a view showing return tiles of resolution level <b>2</b> and layer <b>4</b> in transmitting tile data by the method according to the second embodiment. These return tiles are tiles <b>6</b> and <b>7</b>.</p>
<p id="p-0210" num="0261">In general, a metadata-assigned region is a significant or important region in an image. Since the tile order for transmitting data is defined by the above method, data of a region regarded as a relatively important one can be sent back in larger quantities than the remaining region even if the data size of response data is limited.</p>
<p id="p-0211" num="0262">Even a metadata-assigned region of one layer can achieve a higher image quality than the remaining region, and effects such as the ROI can be easily expected without using encoding of specially setting ROI. The ROI effect eliminates the need for re-encoding. To present the ROI to the client terminal at an intentionally higher image quality than the remaining region, the region to be presented to the client terminal can be very easily controlled only by changing the metadata-assigned region.</p>
<p id="h-0008" num="0000">[Third Embodiment]</p>
<p id="p-0212" num="0263">In the second embodiment, the data transmission order is determined on the basis of information on whether metadata exists. Alternatively, the data transmission order may be determined on the basis of information on whether an encrypted portion exists.</p>
<p id="p-0213" num="0264">An important region is generally considered to have been encrypted, and data of the encrypted region is sent back as much as possible. In this case, the same flow as that of <figref idref="DRAWINGS">FIG. 18</figref> can be applied by replacing a metadata-assigned region in steps of <figref idref="DRAWINGS">FIG. 18</figref> with an encrypted region.</p>
<p id="p-0214" num="0265">To the contrary, when data of an encrypted region is not left on the client side as much as possible, data of an unencrypted region is sent back as much as possible. In this case, the same flow as that of <figref idref="DRAWINGS">FIG. 18</figref> can be applied by replacing a metadata-assigned region in steps of <figref idref="DRAWINGS">FIG. 18</figref> with an unencrypted region.</p>
<p id="p-0215" num="0266">These two flows may be switched on the basis of whether the client terminal can utilize a decryption key. That is, a transmission order which gives priority to an encrypted region is set for a client terminal which can utilize the decryption key, whereas a transmission order which gives priority to an unencrypted region is set for a client terminal which cannot utilize any decryption key.</p>
<p id="p-0216" num="0267">An encrypted region can be specified by various methods: a method of specifying an encrypted region on the basis of information assigned to an image file, a method of specifying an encrypted region by actually analyzing a bitstream, a method of specifying an encrypted region on the basis of information saved in another file, or a method of obtaining information from a third party such as an authentication server. However, specification of an encrypted region is not a main point of the present invention, and a detailed description thereof will be omitted.</p>
<p id="p-0217" num="0268">By the method according to the third embodiment described above, the server can determine the transmission order of tiles within the request region on the basis of encrypted information. The intension of the user who performs an encryption process can also be easily reflected in data transmission. A combination with information on the right to utilize the decryption key by the client terminal can provide a data distribution method corresponding to each client terminal.</p>
<p id="h-0009" num="0000">[Fourth Embodiment]</p>
<p id="p-0218" num="0269">The data transmission order is determined from only the request region of the client terminal in the first embodiment and the bitstream or file information of an image in the second and third embodiments. It is also possible to save the access count of each partial region in the server, and determine the data transmission order on the basis of the statistic. In this case, the fourth embodiment is different from the first embodiment in the step S<b>1001</b> of arranging the indices of tiles in <figref idref="DRAWINGS">FIG. 10</figref>.</p>
<p id="p-0219" num="0270">In the fourth embodiment, as shown in <figref idref="DRAWINGS">FIG. 19A</figref>, the access count of each tile is managed in a table. Data of the table is saved in a secondary memory <b>103</b>, and loaded to a primary memory <b>102</b>, as needed. A process of determining the tile transmission order in this case will be explained.</p>
<p id="p-0220" num="0271">In the fourth embodiment, tile indices are rearranged in order from tiles having higher access counts. In order to explain this process in more detail, a tile index rearrangement process executed in step S<b>1001</b> according to the fourth embodiment will be described with reference to <figref idref="DRAWINGS">FIG. 20</figref> showing the flowchart of this process.</p>
<p id="p-0221" num="0272">In step S<b>2001</b>, the access counts of all tiles contained in the request region, i.e., specified by indices held in the array Pt are acquired by looking up a table <b>1901</b> shown in <figref idref="DRAWINGS">FIG. 19A</figref>. <figref idref="DRAWINGS">FIG. 19B</figref> shows the acquired access count data when the request region is a region <b>701</b> shown in <figref idref="DRAWINGS">FIG. 7</figref>.</p>
<p id="p-0222" num="0273">As shown in <figref idref="DRAWINGS">FIG. 19B</figref>, access count data for 12 tiles with indices of <b>0</b>, <b>1</b>, <b>2</b>, <b>3</b>, <b>6</b>, <b>7</b>, <b>8</b>, <b>9</b>, <b>12</b>, <b>13</b>, <b>14</b>, and <b>15</b> are acquired when the request region is a region <b>701</b> shown in <figref idref="DRAWINGS">FIG. 7</figref>. The acquired access count data are temporarily stored in the primary memory <b>102</b>.</p>
<p id="p-0223" num="0274">In step S<b>2002</b>, the indices are rearranged in order from tiles having higher access counts by referring to the access counts acquired in step S<b>2001</b>. The rearranged indices are held in the array Pt′, and the process ends. As a method of rearranging data in descending order of access count, various methods such as bubble sort, quick sort, and heap sort can be employed. However, this method is not a main point of the present invention, and a description thereof will be omitted. In the fourth embodiment, the access count of each tile in the region <b>701</b> is expressed by a numerical value shown in <figref idref="DRAWINGS">FIG. 19B</figref>. Upon the completion of the process according to the flowchart shown in <figref idref="DRAWINGS">FIG. 20</figref>, the array Pt′ holds the following values:
<ul id="ul0027" list-style="none">
    <li id="ul0027-0001" num="0000">
    <ul id="ul0028" list-style="none">
        <li id="ul0028-0001" num="0275">Pt′[0]=8, Pt′[1]=9, Pt′[2]=14, Pt′[3]=15</li>
        <li id="ul0028-0002" num="0276">Pt′[4]=7, Pt′[5]=13, Pt′[6]=2, Pt′[7]=3</li>
        <li id="ul0028-0003" num="0277">Pt′[8]=1, Pt′[9]=6, Pt′[10]=12, Pt′[11]=0.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0224" num="0278">In the fourth embodiment, as for tiles having the same access count, a tile having a smaller index is held first in the array Pt′.</p>
<p id="p-0225" num="0279">When tile numbers are rearranged in descending order of access count in the request region, like the fourth embodiment, and the resultant data are sent back at scalability in the layer direction, return tiles of resolution level <b>4</b> and layer <b>2</b> are upper two tiles <b>8</b> and <b>9</b> having the highest access count in the region <b>701</b>.</p>
<p id="p-0226" num="0280"><figref idref="DRAWINGS">FIG. 16D</figref> shows return tiles of resolution level <b>2</b> and layer <b>4</b> in the fourth embodiment.</p>
<p id="p-0227" num="0281">As the access counting method, the access count managed by the server may be counted up for each tile which is requested by the client terminal as a result of the analysis process in step S<b>802</b>. When the requested tile is determined in step S<b>802</b>, the server executes an arithmetic process (count-up process):
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>tileCount[Pt[n]]=tileCount[Pt[n]]+1 where tileCount[Pt[n]] is the access count of a tile Pt[n].<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0228" num="0282">In general, a region having a high access count is a significant or important region in an image. Since the tile order for transmitting data is defined by the above method, data of a region regarded as a region important to the user can be sent back in larger quantities than the remaining region even if the data size of response data is limited.</p>
<p id="p-0229" num="0283">The data transmission order may be determined using the statistic of the previous day or past few days, instead of merely accumulating the access count. In this case, even if the user's taste gradually changes and the access count changes, the transmission order can be easily automatically changed in accordance with the change in taste.</p>
<p id="p-0230" num="0284">Although the above access counting method does not perform weighting corresponding to a requested layer, the access count can be counted up only in response to a request to the highest layer. The count-up process is executed if the client requests the highest layer, and is not executed if the client does not request the highest layer. According to this access counting method, only an access to the highest image quality is determined as an important access, and data of the region accessed at the highest image quality can be sent back in large quantities than the remaining region.</p>
<p id="p-0231" num="0285">In the above embodiments, one tile corresponds to one position, and the data return order is determined on the basis of the tile. When the entire image is defined as one tile, i.e., the image is not segmented into tiles and is segmented by only the JPEG2000 position, the data return order may be determined on the basis of the position. When the entire image is segmented into tiles and each tile is segmented into positions, the data transmission order may be determined for respective positions.</p>
<p id="p-0232" num="0286">According to the above embodiments, even when the data size of response data is limited, data of an important region that is determined on the server side to be sent back as much as possible can be sent back much more by one layer than data of the remaining region.</p>
<p id="p-0233" num="0287">Since the image quality is not greatly different between the important region and the peripheral region, a sense of incongruence can be reduced.</p>
<p id="p-0234" num="0288">If JPEG200 data which is encoded independently for each tile, each resolution level, and each layer is employed, the data need not be encoded again after determining the transmission order on the server side. This can reduce the burden on the server side along with control of the transmission order. Moreover, data can dynamically cope with various requests for the resolution, image quality, partial region, and component without encoding the data again.</p>
<p id="p-0235" num="0289">The server intentionally limits the transmission data size within a data size limitation requested by the client terminal, and sends the data at layer-resolution scalability. It is therefore unlikely that only part of an image will be unnaturally displayed at a high definition on the client terminal side.</p>
<p id="h-0010" num="0000">[Other Embodiment]</p>
<p id="p-0236" num="0290">The object of the present invention is also achieved when a recording medium (or storage medium) which records software program codes for realizing the functions of the above-described embodiments is supplied to a system or apparatus, and the computer (or the CPU or MPU) of the system or apparatus reads out and executes the program codes recorded on the recording medium. In this case, the program codes read out from the recording medium realize the functions of the above-described embodiments, and the recording medium which records the program codes constitutes the present invention.</p>
<p id="p-0237" num="0291">The functions of the above-described embodiments are realized when the computer executes the readout program codes. Also, the functions of the above-described embodiments are realized when an OS (Operating System) or the like running on the computer performs some or all of actual processes on the basis of the instructions of the program codes.</p>
<p id="p-0238" num="0292">Furthermore, the present invention includes a case in which, after the program codes read out from the recording medium are written in the memory of a function expansion card inserted into the computer or the memory of a function expansion unit connected to the computer, the CPU of the function expansion card or function expansion unit performs some or all of actual processes on the basis of the instructions of the program codes and thereby realizes the functions of the above-described embodiments.</p>
<p id="p-0239" num="0293">When the present invention is applied to the recording medium, the recording medium records program codes corresponding to the above-described flowcharts.</p>
<p id="p-0240" num="0294">As many apparently widely different embodiments of the present invention can be made without departing from the spirit and scope thereof, it is to be understood that the invention is not limited to the specific embodiments thereof except as defined in the claims.</p>
<heading id="h-0011" level="1">CLAIM OF PRIORITY</heading>
<p id="p-0241" num="0295">This application claims priority from Japanese Patent Application No. 2003-343570 filed on Oct. 1, 2003 and Japanese Patent Application No. 2004-269129, filed on Sep. 16, 2004, which are hereby incorporated by reference herein.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. An image processing method executed by an image processing apparatus which holds encoded data of an image that is segmented into tiles each formed from a plurality of logical units and can take a plurality of logical unit arrangement orders as a format of the encoded data, and transmits, to an external apparatus, data of a logical unit corresponding to a request from the external apparatus in a tile corresponding to the request, comprising:
<claim-text>a reception step of receiving a transmission request for encoded data necessary to obtain a desired image;</claim-text>
<claim-text>a determination step of determining whether an upper limit value of a data quantity of encoded data of a tile to be transmitted to the external apparatus in response to the transmission request is designated by the external apparatus; and</claim-text>
<claim-text>a transmission control step of deciding, in accordance with a determination result in the determination step, a portion to be transmitted to the external apparatus out of data of logical units which form encoded data of tiles to be transmitted to the external apparatus and header data of the logical units, and transmitting the decided portion to the external apparatus,</claim-text>
<claim-text>the transmission control step comprising
<claim-text>a first transmission step of, when no upper limit value is designated, transmitting, to the external apparatus, data of logical units which form the encoded data of the tiles to be transmitted to the external apparatus and header data of the logical units,</claim-text>
<claim-text>an output step of, when the upper limit value is designated, referring in a desired tile order to the encoded data of the tiles to be transmitted to the external apparatus, and outputting data of a logical unit corresponding to the transmission request and header data of the logical unit, of data of logical units which form encoded data of a tile to be referred to, to a memory and</claim-text>
<claim-text>a second transmission step of counting a size of data of logical units and a size of header data of the logical units in an output order in the output step, and transmitting, to the external apparatus, a data group of the logical units and a header data group of the logical units which are output to the memory until a counting result exceeds the upper limit value.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein in the determination step, whether data which designates an upper limit value of a data quantity of encoded data requested by the external apparatus is contained in a data group representing the transmission request from the external apparatus is determined, and when the data is contained, a numerical value represented by the data is interpreted as the upper limit value.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein in the output step, encoded data of tiles to be transmitted to the external apparatus are referred to sequentially from a tile closer to a central position of the desired image, and of data of logical units which form encoded data of a tile to be referred to, data of a logical unit corresponding to the transmission request and header data of the logical unit are output to the memory.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein in the output step, encoded data of tiles to be transmitted to the external apparatus are referred to in order from encoded data of a metadata-assigned tile to encoded data of a tile assigned no metadata, and of data of logical units which form encoded data of a tile to be referred to, data of a logical unit corresponding to the transmission request and header data of the logical unit are output to the memory.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method according to <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein in the output step, encoded data of tiles to be transmitted to the external apparatus are referred to in order from encoded data of a tile which forms a region completely falling within the desired image out of regions formed from metadata-assigned tiles, encoded data of a tile at a portion overlapping the region, and encoded data of a tile assigned no metadata, and of data of logical units which form encoded data of a tile to be referred to, data of a logical unit corresponding to the transmission request and header data of the logical unit are output to the memory.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein in the output step, encoded data of tiles to be transmitted to the external apparatus are referred to in order from encoded data of an encrypted tile to encoded data of an unencrypted tile, and of data of logical units which form encoded data of a tile to be referred to, data of a logical unit corresponding to the transmission request and header data of the logical unit are output to the memory.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein in the output step, encoded data of tiles to be transmitted to the external apparatus are referred to in order from encoded data of an unencrypted tile to encoded data of an encrypted tile, and of data of logical units which form encoded data of a tile to be referred to, data of a logical unit corresponding to the transmission request and header data of the logical unit are output to the memory.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising a management step of managing an access count from the external apparatus for each tile,
<claim-text>wherein in the output step, encoded data of tiles to be transmitted to the external apparatus are referred to in descending order of access count, and of data of logical units which form encoded data of a tile to be referred to, data of a logical unit corresponding to the transmission request and header data of the logical unit are output to the memory.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the desired image includes part or all of an image.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the logical unit includes a packet, and the packet is formed from encoded data of a code block and a packet header which manages information on the code block.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. An image processing apparatus which holds encoded data of an image that is segmented into tiles each formed from a plurality of logical units and can take a plurality of logical unit arrangement orders as a format of the encoded data, and transmits, to an external apparatus, data of a logical unit corresponding to a request from the external apparatus in a tile corresponding to the request, comprising:
<claim-text>reception means for receiving a transmission request for encoded data necessary to obtain a desired image;</claim-text>
<claim-text>determination means for determining whether an upper limit value of a data quantity of encoded data of a tile to be transmitted to the external apparatus in response to the transmission request is designated by the external apparatus; and</claim-text>
<claim-text>transmission control means for deciding, in accordance with a determination result of said determination means, a portion to be transmitted to the external apparatus out of data of logical units which form encoded data of tiles to be transmitted to the external apparatus and header data of the logical units, and transmitting the decided portion to the external apparatus,</claim-text>
<claim-text>said transmission control means comprising</claim-text>
<claim-text>first transmission means for, when no upper limit value is designated, transmitting, to the external apparatus, data of logical units which form the encoded data of the tiles to be transmitted to the external apparatus and header data of the logical units,
<claim-text>output means for, when the upper limit value is designated, referring in a desired tile order to the encoded data of the tiles to be transmitted to the external apparatus, and outputting data of a logical unit corresponding to the transmission request and header data of the logical unit, of data of logical units which form encoded data of a tile to be referred to, to a memory and</claim-text>
<claim-text>second transmission means for counting a size of data of logical units and a size of header data of the logical units in an output order of said output means, and transmitting, to the external apparatus, a data group of logical units and a header data group of the logical units which are output to the memory until a counting result exceeds the upper limit value.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. A program causing a computer to execute an image processing method defined in <claim-ref idref="CLM-00001">claim 1</claim-ref>.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. A computer-readable storage medium storing a program defined in <claim-ref idref="CLM-00012">claim 12</claim-ref>.</claim-text>
</claim>
</claims>
</us-patent-grant>
