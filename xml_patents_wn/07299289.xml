<us-patent-grant lang="EN" dtd-version="v4.2 2006-08-23" file="US07299289-20071120.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20071106" date-publ="20071120">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>07299289</doc-number>
<kind>B1</kind>
<date>20071120</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>09560821</doc-number>
<date>20000428</date>
</document-id>
</application-reference>
<us-application-series-code>09</us-application-series-code>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>15</main-group>
<subgroup>16</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>709231</main-classification>
<further-classification>709245</further-classification>
</classification-national>
<invention-title id="d0e43">Method, system, and article of manufacture for integrating streaming content and a real time interactive dynamic user interface over a network</invention-title>
<references-cited>
<citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>6006265</doc-number>
<kind>A</kind>
<name>Rangan et al.</name>
<date>19991200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709226</main-classification></classification-national>
</citation>
<citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>6061738</doc-number>
<kind>A</kind>
<name>Osaku et al.</name>
<date>20000500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709245</main-classification></classification-national>
</citation>
<citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6125402</doc-number>
<kind>A</kind>
<name>Nagarajayya et al.</name>
<date>20000900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709330</main-classification></classification-national>
</citation>
<citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>6205485</doc-number>
<kind>B1</kind>
<name>Kikinis</name>
<date>20010300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709231</main-classification></classification-national>
</citation>
<citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>6389463</doc-number>
<kind>B2</kind>
<name>Bolas et al.</name>
<date>20020500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709219</main-classification></classification-national>
</citation>
<citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>6434535</doc-number>
<kind>B1</kind>
<name>Kupka et al.</name>
<date>20020800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>705 24</main-classification></classification-national>
</citation>
<citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>6477550</doc-number>
<kind>B1</kind>
<name>Balasubramaniam et al.</name>
<date>20021100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>715513</main-classification></classification-national>
</citation>
<citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>6487663</doc-number>
<kind>B1</kind>
<name>Jaisimha et al.</name>
<date>20021100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713193</main-classification></classification-national>
</citation>
<citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>6489954</doc-number>
<kind>B1</kind>
<name>Powlette</name>
<date>20021200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>345733</main-classification></classification-national>
</citation>
<citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>6553410</doc-number>
<kind>B2</kind>
<name>Kikinis</name>
<date>20030400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709218</main-classification></classification-national>
</citation>
<citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>6557042</doc-number>
<kind>B1</kind>
<name>He et al.</name>
<date>20030400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709231</main-classification></classification-national>
</citation>
<citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>6560651</doc-number>
<kind>B2</kind>
<name>Katz et al.</name>
<date>20030500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709229</main-classification></classification-national>
</citation>
<citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>6622171</doc-number>
<kind>B2</kind>
<name>Gupta et al.</name>
<date>20030900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709231</main-classification></classification-national>
</citation>
<citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>6708217</doc-number>
<kind>B1</kind>
<name>Colson et al.</name>
<date>20040300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709231</main-classification></classification-national>
</citation>
<citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>6711622</doc-number>
<kind>B1</kind>
<name>Fuller et al.</name>
<date>20040300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709231</main-classification></classification-national>
</citation>
<citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>6751776</doc-number>
<kind>B1</kind>
<name>Gong</name>
<date>20040600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>7155001</main-classification></classification-national>
</citation>
<citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>6789123</doc-number>
<kind>B2</kind>
<name>Li et al.</name>
<date>20040900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709231</main-classification></classification-national>
</citation>
<citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>6931600</doc-number>
<kind>B1</kind>
<name>Pittman</name>
<date>20050800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>715767</main-classification></classification-national>
</citation>
<citation>
<nplcit num="00019">
<othercit>Gralla, Preston, “How the Internet Works”, Ziff-Davis Press, 1997, pp. 196-197.</othercit>
</nplcit>
<category>cited by examiner</category>
</citation>
</references-cited>
<number-of-claims>20</number-of-claims>
<us-exemplary-claim>19</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>709231</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709222</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709218-219</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709245</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>719311</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>719330</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715749</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>7</number-of-drawing-sheets>
<number-of-figures>7</number-of-figures>
</figures>
<parties>
<applicants>
<applicant sequence="001" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Lorenz</last-name>
<first-name>Michael</first-name>
<address>
<city>Manhattan Beach</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="002" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Newman</last-name>
<first-name>Michael</first-name>
<address>
<city>Manhattan Beach</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="003" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Pitts</last-name>
<first-name>Jereme</first-name>
<address>
<city>Manhattan Beach</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="004" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Gilman</last-name>
<first-name>Seth</first-name>
<address>
<city>Los Angeles</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
</applicants>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Venable LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</parties>
<assignees>
<assignee>
<addressbook>
<orgname>Accordent Technologies, Inc.</orgname>
<role>02</role>
<address>
<city>El Segundo</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Caldwell</last-name>
<first-name>Andrew</first-name>
<department>2142</department>
</primary-examiner>
<assistant-examiner>
<last-name>Blair</last-name>
<first-name>Douglas</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A method and system is provided which allows for integrating streaming content and a real time interactive dynamic user interface on a network, such as the Internet. The system includes a web browser for receiving a user interface from a content server. The user interface, among other functions, detects an embedded code in a media file from a streaming content server. Based on the embedded code, the user interface spawns a Common Gateway Interface (CGI) process which retrieves information from a data store. The information in the data store may include rules for altering the displayed user interface. The system and method results in an interactive user interface which may be easily modified by altering the contents of the data store rather than altering and reindexing the media file.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="212.01mm" wi="271.02mm" file="US07299289-20071120-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="250.87mm" wi="178.90mm" orientation="landscape" file="US07299289-20071120-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="272.20mm" wi="212.26mm" orientation="landscape" file="US07299289-20071120-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="221.57mm" wi="178.31mm" orientation="landscape" file="US07299289-20071120-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="260.18mm" wi="131.40mm" file="US07299289-20071120-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="238.17mm" wi="139.87mm" file="US07299289-20071120-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="260.01mm" wi="190.33mm" file="US07299289-20071120-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="262.47mm" wi="152.23mm" file="US07299289-20071120-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">FIELD OF THE INVENTION</heading>
<p id="p-0002" num="0001">The present invention relates, in general, to information systems and, in particular, to facilitating a real time dynamic user interface within interactive streaming content over a network.</p>
<heading id="h-0002" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0003" num="0002">As the developments of networked processing systems, such as the Internet, continue to advance more computing power and features are available to users. For example, information that historically has been limited to TV and Radio broadcasts on home appliances is now being made available through on-line computing services. The combination of networked computers and multimedia interactive graphic user interfaces permits the access and display of textual and graphic information in a manner, and at a speed, not previously known in the industry.</p>
<p id="p-0004" num="0003">As a result of these advancements in technology, various streaming content application solutions now exist to facilitate the transfer of streaming content over the Internet, such as Microsoft's Windows Media Technologies available from Microsoft Corporation located at Redmond, Wash. and Real Network's Streaming Media Solutions available from Real Networks located at Seattle, Wash.</p>
<p id="p-0005" num="0004">While these solutions have made streaming media content possible, they are neither designed to, nor sufficient to, support a real time interactive dynamic user interface. For example in the prior art, universal resource locator (URL) commands are used in combination with streaming media to change the user interface in a browser. For example, a media file containing a song may be downloaded or streamed to a user and at the end of media file, a URL command may be included to direct the browser to a site to purchase the song. These systems use static commands or URLs in the encoded content stream that need to be indexed prior to delivery to the displayed user interface. It is necessary to index streaming media every time a modification is made to a non-streaming element of video or audio. As a result, the displayed user interface is neither dynamic nor real time and cannot be modified “on the fly” to incorporate new high resolution images or DHTML. This requirement of indexing a static command with streaming video limits flexibility. For example, if information, such as a price or image, is changed often, the media file must be constantly reindexed. Thus, an e-commerce site may have to constantly index a media file.</p>
<p id="p-0006" num="0005">Therefore, there is a desire for a method, system and article of manufacture for integrating streaming content and a real time interactive dynamic user interface on a processing device network.</p>
<heading id="h-0003" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0007" num="0006">In an embodiment of the present invention, a method, system and article of manufacture synchronizes streaming video, high-resolution images, text and DHTML in a user interface. The user interface can detect an embedded code in a media file being downloaded which will allow for dynamically changing information, such as images and DHTML, without requiring timely re-encoding and reindexing of the media file. The displayed user interface may be updated with new information, such as new high resolution images and/or DHTML, by accessing the new information in a database responsive to the embedded code.</p>
<p id="p-0008" num="0007">According to an embodiment of the present invention, the system includes: a) a media server utilizing media streaming technology for providing video stored in a media file; b) a user interface which may utilize DHTML, JavaScript, and VBScript and is displayed by a browser; and c) a Common Gateway Interface (“CGI”) accessible from a content server used to call objects stored in a database. The objects may contain rules for transferring information, such as a new high resolution image or price to the displayed user interface.</p>
<p id="p-0009" num="0008">The media file and embedded time code is indexed once, yet the displayed user interface can be modified “on the fly” to accommodate new DHTML and high resolution images, among other information, without requiring reindexing. The images and rules in an object stored in a database can be changed in real time allowing for a modified displayed user interface without requiring reindexing of the media file.</p>
<p id="p-0010" num="0009">According to an aspect of the present invention, a method for obtaining streaming content from a processing device network is provided. The method comprises a step of requesting an interface program from a first processing device in the processing device network. The interface program is downloaded to a second processing device in the processing device network. A user interface is displayed on the second processing device. The interface program requests a media file from a third processing device in the processing device network. The media file, including an embedded code, is then downloaded to the second processing device. The interface program spawns a process responsive to the embedded code. The embedded code is parsed into a plurality of code segments by the process. A memory location in a data store is queried responsive to the embedded code segment. The second processing device responds to the rules in the memory location.</p>
<p id="p-0011" num="0010">According to an aspect of the present invention, the rules include updating the displayed user interface with a high resolution image stored in the data store.</p>
<p id="p-0012" num="0011">According to another embodiment of the present invention, the first processing device and the second processing device are different processing devices.</p>
<p id="p-0013" num="0012">According to another aspect of the present invention, the second processing device is a personal computer having a web browser.</p>
<p id="p-0014" num="0013">According to another aspect of the present invention, the second processing device is a set-top box coupled to a television.</p>
<p id="p-0015" num="0014">According to another aspect of the present invention, the media file is an advanced streaming format (“.ASF”) file or a real network media (“.RN”) file.</p>
<p id="p-0016" num="0015">According to another embodiment of the present invention, the displayed user interface includes a first window, a second window and a third window. Video is provided in the first window; a high resolution image is provided in the second window; and text is provided in the third window.</p>
<p id="p-0017" num="0016">According to another embodiment of the present invention, the third processing device is a media server.</p>
<p id="p-0018" num="0017">According to another embodiment of the present invention, the process is a common gateway interface (“CGI”) process.</p>
<p id="p-0019" num="0018">According to another embodiment of the present invention, the embedded code is a metadata time code.</p>
<p id="p-0020" num="0019">According to another embodiment of the present invention, the responding step includes updating the user interface display with a high resolution image stored in the data store.</p>
<p id="p-0021" num="0020">According to another embodiment of the present invention, a system for providing streaming content and a real time interactive dynamic user interface is provided. The system includes a first processing device having a web browser and a data store for storing information. A second processing device is coupled to the first processing device and the data store. The second processing device provides the first processing device with (1) a user interface and (2) a media file having an embedded code. The user interface detects the embedded code during a media file download to the first processing device. The second processing device creates a process for retrieving the information from the data store which is used to alter a displayed user interface.</p>
<p id="p-0022" num="0021">According to another aspect of the present invention, the first and second processing devices are computers.</p>
<p id="p-0023" num="0022">According to another aspect of the present invention, the data store is a disk drive.</p>
<p id="p-0024" num="0023">According to another aspect of the present invention, the embedded code is a metadata time code.</p>
<p id="p-0025" num="0024">According to another aspect of the present invention, the first processing device and the second processing device is coupled to the Internet.</p>
<p id="p-0026" num="0025">According to another aspect of the present invention, the first processing device and the second processing device are coupled to an intranet.</p>
<p id="p-0027" num="0026">According to still another aspect of the present invention, an article of manufacture including a computer readable memory is provided. The article of manufacture includes a first software program for providing content to a client. A second software program provides streaming media to a client. A third software program detects an embedded code in the streaming media. And a fourth software program accesses a data store responsive to the embedded code.</p>
<p id="p-0028" num="0027">According to still another aspect of the present invention, the data store includes a software object having rules and the rules are used to update a user interface.</p>
<p id="p-0029" num="0028">Other aspects and advantages of the present invention can be seen upon review of the figures, the detailed description, and the claims which follow. In the figures, like reference numerals indicate like components.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. 1</figref> is a high-level hardware block diagram of an embodiment of the present invention and illustrates the interaction between the end user processing device, content provider processing device, media processing device, and data store.</p>
<p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. 2</figref> is a high level software block diagram of an embodiment of the present invention showing the interaction between the end user processing device, content provider processing device, media processing device, and data store.</p>
<p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. 3</figref> illustrates a displayed user interface according to an embodiment of the present invention.</p>
<p id="p-0033" num="0032"><figref idref="DRAWINGS">FIGS. 4-7</figref> are control flow diagrams of a method executable by the software and hardware illustrated in <figref idref="DRAWINGS">FIGS. 1 and 2</figref> according to an embodiment of the present invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. 1</figref> illustrates a high level block diagram of system <b>90</b> according to an embodiment of the present invention. System <b>90</b> includes end user processing device <b>101</b>, content provider processing device <b>102</b>, data store <b>103</b>, and media processing device <b>104</b>, which are coupled to processing device network <b>100</b>.</p>
<p id="p-0035" num="0034">Processing device network <b>100</b> may include both wired and wireless connections, either singly or in a combination thereof. In an embodiment of the present invention, the processing device network <b>100</b> is the Internet (a.k.a. the world wide web). In alternate embodiments of the present invention, processing device network <b>100</b> is a cellular network, a television network, or an intranet, singly or in a combination thereof.</p>
<p id="p-0036" num="0035">Processing devices illustrated in <figref idref="DRAWINGS">FIG. 1</figref> may include, but are not limited to, computers, information appliances, cellular telephones, digital cameras, printers, copiers, facsimile machines, television set-top boxes, personal digital assistants, or equivalents thereof.</p>
<p id="p-0037" num="0036">In an exemplary embodiment, processing device <b>102</b> is a Dell® Dimensions® XPS B series desktop computer (Dell Computer Company, Round Rock, Tex.) having typical software and hardware components as known by one of ordinary skill in the art. For example, processing device <b>102</b> includes a central processing unit, persistent storage, I/O devices including a display and keyboard, a network interface and an operating system.</p>
<p id="p-0038" num="0037">Software in processing devices of <figref idref="DRAWINGS">FIG. 1</figref> may be stored in a computer readable medium such as read-only memory (“ROM”), random access memory (“RAM”), virtual memory or other memory technologies, singly or in combination thereof.</p>
<p id="p-0039" num="0038">In an embodiment, data store <b>103</b> is computer readable memory, such as a magnetic hard disk drive, floppy disk, optical disk, or other read-write data storage technologies, singly or in combination thereof.</p>
<p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. 2</figref> illustrates a high level software block diagram of system <b>90</b> illustrated in <figref idref="DRAWINGS">FIG. 1</figref>. In an embodiment of the present invention, end user processing device <b>101</b> stores browser <b>204</b> and user interface client <b>205</b><i>a </i>in memory. In an embodiment of the present invention, browser <b>204</b> is Internet Explorer 5.00 available from Microsoft Corporation located at Redmond, Wash.</p>
<p id="p-0041" num="0040">In an embodiment of the present invention, software components such as CGI interface <b>208</b> and user interface <b>205</b> are stored on a computer readable medium.</p>
<p id="p-0042" num="0041">Content provider processing device <b>102</b> includes multiple software programs. In an embodiment of the present invention, Common Gateway Interface (“CGI”) software <b>208</b> is stored in memory of processing device <b>102</b>. In an embodiment, CGI software <b>208</b> includes at least one CGI process. CGI software allows scripts or programs to run on processing device <b>102</b>. Typically, CGI scripts are implemented to control users interactions with a web site. Similarly, processing device <b>102</b> includes content server <b>209</b> and user interface <b>205</b>. A server is a software program that provides service or content to users accessing processing device <b>102</b> through network <b>100</b>. In addition, user interface <b>205</b> provides user interface client <b>205</b><i>a </i>to processing device <b>101</b>.</p>
<p id="p-0043" num="0042">Data store <b>103</b> as described above is coupled to processing device network <b>100</b>. In an embodiment of the present invention, data store <b>103</b> includes a relational database which is accessed by a structured query language (“SQL”). Data store <b>103</b> includes a memory location <b>103</b><i>a</i>. In an embodiment of the present invention, object <b>210</b> is stored at memory location <b>103</b><i>a </i>and may include rules which will be discussed below. Further, data store <b>103</b> may also include high resolution images digitally represented by Graphical Interface Format (“GIF”) files and/or Joint Photographic Experts Group (“JPEG”) files. In an alternate embodiment, other multimedia file formats may be stored.</p>
<p id="p-0044" num="0043">Media processing device <b>104</b> stores streaming video server <b>200</b> and media file <b>201</b> in memory. Media file <b>201</b> includes an embedded metadata time code <b>203</b>.</p>
<p id="p-0045" num="0044">In an alternate embodiment of the present invention, streaming video server <b>200</b> and media file <b>201</b> are stored in memory on content provider processing device <b>102</b>.</p>
<p id="p-0046" num="0045">In an alternate embodiment, data store <b>103</b> is coupled to content processing device <b>102</b>.</p>
<p id="p-0047" num="0046">When an end user desires to access information available on processing device network <b>100</b>, such as the Internet, the user initiates a connection through web browser <b>204</b>. Web browser <b>204</b> then may request user interface client <b>205</b><i>a </i>from content provider processing device <b>102</b>. In an embodiment of the present invention, this may be accomplished by entering into browser <b>204</b> a universal resource locator (“URL”) address of the web site provided by content server <b>209</b>. A user then may download the user interface client <b>205</b><i>a </i>from the web site. The connection from processing device <b>101</b> to processing device network <b>100</b> may be established through an Internet service provider (“ISP”). The ISP is a service that allows an end user to connect to processing device network <b>100</b> usually through a modem.</p>
<p id="p-0048" num="0047">After user interface client <b>205</b><i>a </i>is downloaded to processing device <b>101</b> from processing device <b>102</b>, a user interface display <b>300</b> is provided on processing device <b>101</b> as illustrated in <figref idref="DRAWINGS">FIG. 3</figref>. User interface display <b>300</b> is provided by processing device <b>102</b> downloading content, and in particular, a dynamic hypertext mark up language (“DHTML”) page to processing device <b>101</b>. Browser <b>204</b> reads the DHTML page and requests the rest of user interface client <b>205</b><i>a </i>from content server <b>209</b>. Content server <b>209</b> is a software program which provides information, such as a DHTML page, to processing devices requesting such information. User interface client <b>205</b><i>a </i>in an embodiment of the present invention includes: a) HTML tags and text; b) images in a GIF and/or JPEG file format; c) JAVA script; and d) references to objects, such as an address to object <b>210</b> in data store <b>103</b>.</p>
<p id="p-0049" num="0048"><figref idref="DRAWINGS">FIG. 3</figref> illustrates a user interface display <b>300</b> at processing device <b>101</b>. User interface display <b>300</b> includes windows <b>301</b>, <b>302</b> and <b>303</b>. In addition, user interface display <b>300</b> includes controls <b>307</b>, such as play, pause, stop, rewind, forward, volume, mute and display size control buttons. In an embodiment of the present invention, window <b>301</b> provides video <b>304</b>, such as video of a room. Window <b>302</b> includes a high resolution image <b>305</b>, such as an image of a chair for sale, and window <b>303</b> includes text <b>306</b>, such as dimensions and price of the chair.</p>
<p id="p-0050" num="0049">After user interface display <b>300</b> is provided to processing device <b>101</b>, user interface client <b>205</b><i>a </i>requests media from media processing device <b>104</b>. Media may include audio, video or combination thereof. In an embodiment of the present invention, video is provided to window <b>301</b> from media file <b>201</b> stored in processing device <b>104</b>. As described in detail below, media file <b>201</b> is provided by streaming video server <b>200</b>. As video <b>304</b> is provided to processing device <b>101</b>, user interface client <b>205</b><i>a </i>detects an embedded code, and in particular, a metadata time code <b>203</b>. Generally, the user interface client <b>205</b><i>a </i>spawns a CGI process which is used to access object <b>210</b> in data store <b>103</b>. Information in object <b>210</b> is then used to update user interface display <b>300</b> in an embodiment of the present invention. For example, object <b>210</b> may include rules to display high resolution image <b>305</b> in window <b>302</b> or provide text, such as a price in window <b>303</b>.</p>
<p id="p-0051" num="0050">In an embodiment of the present invention, electronic representations of high resolution image <b>305</b> and text <b>306</b> (price) are stored as files <b>305</b><i>a </i>and <b>306</b><i>a </i>in data store <b>103</b>. In alternate embodiments, object <b>210</b> may implement other actions. For example, object <b>210</b> may include code to display a web page or code to be executed.</p>
<p id="p-0052" num="0051">The end user also has the ability to interactively change the contents of user interface display <b>300</b>. The user may click the DHTML driven buttons in controls <b>307</b>.</p>
<p id="p-0053" num="0052">Multimedia file <b>201</b> in an embodiment of the present invention is a digitized format of video. In an embodiment, video footage is captured using a video work station such as a Media <b>100</b>, Inc., located in Marlbor, Mass., Matrox's Digisuite, located in Borval, Canada, or Pinnacle System's DV500, located in Mountain View, Calif. Media file <b>201</b> is a compressed file in an embodiment of the present invention.</p>
<p id="p-0054" num="0053">The embedded code of media file <b>201</b> may be indexed using a variety of technologies. For example, if media file <b>201</b> is an .ASF file, Stream Anywhere, available from Sonic Foundry, located in Madison, Wis., inserts code <b>203</b> at predetermined set intervals in order to alter user interface display <b>300</b>. In an embodiment of the present invention, media file <b>201</b> may include a plurality of codes <b>203</b> at predetermined time intervals. The format of metadata time code <b>203</b> may include, for example, “Frame4.cgi?WebID=1234567&amp;&amp;frame3”.</p>
<p id="p-0055" num="0054">The time code includes a number of fields to be parsed and processed. For example, “Frame4.cgi” represents an address of a CGI process which will process the time code information. The CGI process may be located in CGI <b>208</b>. “?” identifies that the following field is a variable to be passed to the CGI process. “1234567” is a unique time index number used by the CGI process. “&amp;&amp;” identifies that the following information is the target address or destination of the information obtained by the CGI process. For example, “frame3” identifies that the CGI process should display information such as chair image <b>305</b> in window <b>302</b> illustrated in <figref idref="DRAWINGS">FIG. 3</figref>.</p>
<p id="p-0056" num="0055">User interface client <b>205</b>, in an embodiment of the present invention, uses Active X Com objects to encrypt and access data store <b>103</b>. The user interface client <b>205</b><i>a </i>and Active X Com objects are programmed using Microsoft's Visual Basic according to an embodiment of the present invention. Some functions used in interface client <b>205</b><i>a </i>exist in the data store as stored procedures. This was done to gain optimum performance of the data for access as known in the art. The complete functionality of the video index GUI is to keep the metadata time code commands in a manageable real-time environment.</p>
<p id="p-0057" num="0056"><figref idref="DRAWINGS">FIGS. 4-7</figref> are control flow diagrams of a method <b>350</b> executed by software, hardware, or a user, singly or in combination thereof, illustrated in <figref idref="DRAWINGS">FIGS. 1 and 2</figref> according to an embodiment of the present invention. <figref idref="DRAWINGS">FIGS. 4-7</figref> illustrate a sequence of logic steps represented by logic blocks. In alternative embodiments of the present invention, additional logic blocks may be included and illustrated logic blocks may be omitted.</p>
<p id="p-0058" num="0057">The method <b>350</b> initiates as illustrated by logic block <b>400</b>. An end user requests a user interface client <b>205</b> from content server <b>209</b> stored on processing device <b>102</b> as illustrated by logic block <b>401</b>. Content server <b>209</b> then transfers the user interface client <b>205</b><i>a </i>to processing device <b>201</b> as illustrated by logic block <b>402</b>. User interface client <b>205</b> then requests interface components such as images and code to display initial user interface as illustrated by logic block <b>403</b><i>a</i>. User interface display is then displayed as illustrated by logic block <b>404</b>. For example, user interface display <b>300</b> as illustrated in <figref idref="DRAWINGS">FIG. 3</figref> is provided to end user processing device <b>101</b>. User interface client <b>205</b><i>a </i>then requests media from streaming media server <b>200</b> on media processing device <b>104</b> as illustrated by logic block <b>405</b>. Streaming video server <b>200</b> then begins to provide video to end user interface client <b>205</b><i>a </i>stored in end user processing device <b>101</b> as illustrated by logic block <b>406</b>. In an embodiment of the present invention, end user interface client <b>205</b><i>a </i>buffers streaming media for a few seconds as illustrated by logic block <b>407</b>. Video such as video <b>304</b> in <figref idref="DRAWINGS">FIG. 3</figref> is then provided in window <b>301</b> as illustrated in <figref idref="DRAWINGS">FIG. 3</figref> and described in logic block <b>408</b>.</p>
<p id="p-0059" num="0058">A unique embedded code in media file <b>201</b> or metadata time code <b>203</b> is then provided by streaming video server <b>200</b> and media processing device <b>104</b> and as illustrated in logic block <b>501</b> of <figref idref="DRAWINGS">FIG. 5</figref>. User interface client <b>205</b><i>a </i>then receives the code <b>203</b> as illustrated by logic block <b>502</b>. Interface client <b>205</b><i>a </i>then determines whether code <b>203</b> is a valid command as illustrated by logic block <b>503</b>. If the code <b>203</b> is not a valid command, logic transitions back to logic block <b>501</b>. If the command is valid, interface client <b>205</b><i>a </i>spawns a process to handle the command in code <b>203</b> as illustrated by logic block <b>504</b>. In an embodiment of the present invention, interface client <b>205</b><i>a </i>spawns a CGI process. The CGI process parses the metadata time code command <b>203</b> as illustrated by logic block <b>505</b>. A segment of the code <b>203</b> is then used to perform a query on data store <b>103</b>. In an embodiment of the present invention, a segment of code <b>203</b> is used in an SQL query to a relational database in data store <b>103</b>. In an embodiment of the present invention, the query determines the contents of object <b>210</b> in data store <b>103</b>. Object <b>210</b> may include rules for updating user interface display <b>300</b>. For example, object <b>210</b> may include rules for displaying image <b>305</b> and text <b>306</b>.</p>
<p id="p-0060" num="0059">Data store <b>103</b> receives a command from CGI process as illustrated in logic block <b>604</b>. The commands could include an SQL query or update command. A determination is then made by the data store whether or not the command is recognized as illustrated in logic block <b>606</b>. If the data store recognizes the command, control transitions to logic block <b>607</b> where the data store searches for the results based on the command. Otherwise, logic transitions to logic block <b>610</b> where the data store returns a negative result and control then passes to logic block <b>611</b>. If control transitions from logic block <b>607</b>, a determination is made whether data search is positive as illustrated by logic block <b>608</b>. If the data store search is not positive, control transitions to logic block <b>610</b>. Otherwise, control transitions to logic block <b>609</b>. The data store returns a positive search result as illustrated by logic block <b>609</b>. These results could include software code or images. The result of the command is then returned to the CGI process as illustrated by logic block <b>611</b>. A determination is made whether the CGI process updates the interface in logic block <b>507</b>. Logic block <b>509</b> represents the CGI process action which is used to update user display interface <b>300</b>. If the CGI process does not change user interface display, logic transitions to logic block <b>508</b>.</p>
<p id="p-0061" num="0060">User interface client <b>205</b><i>a </i>then receives the command from CGI process to update user interface display <b>300</b> as illustrated by logic block <b>600</b> in <figref idref="DRAWINGS">FIG. 6</figref>. User interface client <b>205</b><i>a </i>then requests needed components, such as an image, to update user interface display <b>300</b> from content server <b>209</b> as illustrated by logic block <b>601</b>. Content server <b>209</b> then sends user interface client <b>205</b> the needed components, such as images or code, as illustrated by logic block <b>602</b>. The end user interface display <b>300</b> is then updated as illustrated by logic block <b>603</b>.</p>
<p id="p-0062" num="0061"><figref idref="DRAWINGS">FIG. 7</figref> illustrates a control flow diagram for the operation of control functions <b>307</b> illustrated in <figref idref="DRAWINGS">FIG. 3</figref>. An end user activates an interface function such as a play button in control buttons <b>307</b> as illustrated by logic block <b>700</b>. Interface client <b>205</b><i>a </i>then checks if the function is valid as illustrated by logic block <b>701</b>. If the function is not valid, the logic transitions to the end <b>705</b>. Otherwise, the user interface client <b>205</b><i>a </i>calls the function as illustrated in logic block <b>702</b>. These functions include: playing the video, pausing the video, stopping the video, rewinding the video, fast forwarding the video, increasing volume, decreasing volume, muting volume and increasing display size. The function then executes as illustrated by logic block <b>703</b>. Interface then reflects the function execution as illustrated in logic block <b>704</b> and control ends as illustrated by logic block <b>705</b>.</p>
<p id="p-0063" num="0062">While certain preferred embodiments of the invention have been described, these embodiments have been presented by way of example only, and are not intended to limit the scope of the present invention.</p>
<p id="p-0064" num="0063">Although the present invention solves the problem of providing a real time interactive dynamic user interface with streaming content, its possible implementations are not limited to this. Using similar systems and methods described herein, the streaming content unique time code can be easily integrated into various other solutions. e.g. e-commerce systems, enterprise resource planning systems, and any other real time database driven systems.</p>
<p id="p-0065" num="0064">The foregoing description of the preferred embodiments of the present invention has been provided for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise forms disclosed. Obviously, many modifications and variations will be apparent to practitioners skilled in the art. The embodiments were chosen and described in order to best explain the principles of the invention and its practical applications, thereby enabling others skilled in the art to understand the invention for various embodiments and with the various modifications as are suited to the particular use contemplated. It is intended that the scope of the invention be defined by the following claims and their equivalents.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method for obtaining streaming content from a processing device network, comprising:
<claim-text>requesting an interface program from a first processing device in the processing device network;</claim-text>
<claim-text>downloading the interface program to a second processing device in the processing device network;</claim-text>
<claim-text>displaying a user interface on a display of the second processing device;</claim-text>
<claim-text>requesting by the interface program a streaming media file from a third processing device on the processing device network;</claim-text>
<claim-text>downloading the streaming media file to the second processing device, wherein the streaming media file includes an embedded code;</claim-text>
<claim-text>detecting the embedded code that includes information that represents an address to a remote common gateway interface process;</claim-text>
<claim-text>spawning the remote common gateway interface process that retrieves an object from a data store in response to the information that represents the address to the remote common gateway interface process;</claim-text>
<claim-text>parsing the embedded code into a plurality of code segments by the remote common gateway interface process;</claim-text>
<claim-text>querying a memory location in the data store responsive to a code segment in the plurality of code segments; and,</claim-text>
<claim-text>responding to the object including rules in the memory location,</claim-text>
<claim-text>wherein the displayed user interface includes at least a first window and a second window,</claim-text>
<claim-text>wherein the embedded code is a metadata time code having a format of the address to the remote common gateway interface process, a variable and a target destination, and</claim-text>
<claim-text>wherein the common gateway interface process uses the variable to provide content to the first window identified by the target destination.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the rules include updating the displayed user interface with a high resolution image stored in the data store and providing video responsive to the streaming media file.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first processing device and the second processing device are different process devices.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the second processing device is a personal computer having a web browser.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the second processing device is a box coupled to a television.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the streaming media file is a advanced streaming format (.ASF) file.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the streaming media file is a real network media (.RM) file.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. A method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the third processing device is a media server.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the downloading step includes buffering a portion of the streaming media file.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the responding step includes updating the user interface display.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising changing an object, image, text and/or multimedia file in the data store while leaving the embedded code unchanged.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. A system, comprising:
<claim-text>a first processing device having a web browser;</claim-text>
<claim-text>a data store to store an object; and,</claim-text>
<claim-text>a second processing device coupled to the first processing device to provide the first processing device with (1) a displayed user interface and (2) a streaming media file having an embedded code including a metadata time code having a format of a process identification, a variable and a target destination; wherein the displayed user interface detects the metadata time code during a streaming media file download to the first processing device and, wherein the displayed user interface spawns a remote common gateway interface process that parses the metadata time code the remote common gateway interface process accesses the object and uses the variable to provide content to a first window identified by the target destination in the displayed user interface while the streaming media file is used to display a video in a second window of the displayed user interface.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The system of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the first and second processing devices are computers.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The system of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the first processing device and the second processing device are coupled to the Internet.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The system of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the first processing device and the second processing device are coupled to an intranet.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The system of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein an object, image, text and/or multimedia file in the data store is changed while leaving the embedded code unchanged.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. An article of manufacture, including a computer readable memory, comprising:
<claim-text>a first software component to provide a streaming media file to a client;</claim-text>
<claim-text>a second software component to detect an embedded code including a metadata time code having a format of a process identification, a variable and a target destination; and</claim-text>
<claim-text>a remote common gateway interface process identified by the process identification that parses the metadata time code the remote common gateway accesses an object in a data store and uses the variable to provide content to a first window identified by the target destination in a user interface while providing video responsive to the streaming media file in a second window of the user interface.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The article of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein an object, image, text and/or multimedia file in the data store is changed while leaving the embedded code unchanged.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. A method for providing content, comprising:
<claim-text>storing an object in a data store;</claim-text>
<claim-text>downloading a streaming media file having an metadata time code including a process identification to a remote common gateway interface process, a variable and a target destination;</claim-text>
<claim-text>detecting the metadata time code;</claim-text>
<claim-text>parsing the metadata time code;</claim-text>
<claim-text>passing the variable of the embedded code to the remote common gateway interface process;</claim-text>
<claim-text>retrieving the object from the data store;</claim-text>
<claim-text>downloading information, by the remote common gateway interface process using the variable and the object, to provide content to a first window identified by the target destination in a user interface while displaying video in a second window of the user interface in response to the streaming media file.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The method of <claim-ref idref="CLM-00019">claim 19</claim-ref>, further comprising changing an object, image, text and/or multimedia file in the data store while leaving the metadata time code unchanged.</claim-text>
</claim>
</claims>
</us-patent-grant>
