<us-patent-grant lang="EN" dtd-version="v4.2 2006-08-23" file="US07299229-20071120.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20071106" date-publ="20071120">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>07299229</doc-number>
<kind>B2</kind>
<date>20071120</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>10424034</doc-number>
<date>20030425</date>
</document-id>
</application-reference>
<us-application-series-code>10</us-application-series-code>
<us-term-of-grant>
<us-term-extension>570</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>17</main-group>
<subgroup>30</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>707  8</main-classification>
<further-classification>707  1</further-classification>
<further-classification>707  2</further-classification>
</classification-national>
<invention-title id="d0e53">Grid quorum</invention-title>
<references-cited>
<citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5251318</doc-number>
<kind>A</kind>
<name>Nitta et al.</name>
<date>19931000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711152</main-classification></classification-national>
</citation>
<citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5991739</doc-number>
<kind>A</kind>
<name>Cupps et al.</name>
<date>19991100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>705 26</main-classification></classification-national>
</citation>
<citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6144983</doc-number>
<kind>A</kind>
<name>Klots et al.</name>
<date>20001100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>718104</main-classification></classification-national>
</citation>
<citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>6438705</doc-number>
<kind>B1</kind>
<name>Chao et al.</name>
<date>20020800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714  4</main-classification></classification-national>
</citation>
<citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>6560592</doc-number>
<kind>B1</kind>
<name>Reid et al.</name>
<date>20030500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707  2</main-classification></classification-national>
</citation>
<citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>6597956</doc-number>
<kind>B1</kind>
<name>Aziz et al.</name>
<date>20030700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>700  3</main-classification></classification-national>
</citation>
<citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>6662219</doc-number>
<kind>B1</kind>
<name>Nishanov et al.</name>
<date>20031200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709220</main-classification></classification-national>
</citation>
<citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>6785901</doc-number>
<kind>B1</kind>
<name>Horiwitz et al.</name>
<date>20040800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>725 25</main-classification></classification-national>
</citation>
<citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>6865549</doc-number>
<kind>B1</kind>
<name>Connor</name>
<date>20050300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>705 51</main-classification></classification-national>
</citation>
<citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>2002/0052914</doc-number>
<kind>A1</kind>
<name>Zalewski et al.</name>
<date>20020500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709203</main-classification></classification-national>
</citation>
<citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>2002/0080539</doc-number>
<kind>A1</kind>
<name>McClure et al.</name>
<date>20020600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>361 59</main-classification></classification-national>
</citation>
<citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>2003/0126265</doc-number>
<kind>A1</kind>
<name>Aziz et al.</name>
<date>20030700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709227</main-classification></classification-national>
</citation>
<citation>
<nplcit num="00013">
<othercit>Tang et al., “MOM-G: Message-ORiented Middleware on Grid Environment Based on OGSA”, ICCNMC' 03, IEEE, 4 pages.</othercit>
</nplcit>
<category>cited by examiner</category>
</citation>
<citation>
<nplcit num="00014">
<othercit>Ramin Yahyapour, “Design and evaluation of job scheduling stragegies for grid computing”, computer engineering institue, Nov. 2002, pp. 1-154.</othercit>
</nplcit>
<category>cited by examiner</category>
</citation>
<citation>
<nplcit num="00015">
<othercit>Joseph et al. , “GASS: A data movement and access service for wide area computing systems”, ACM 1999, pp. 78-88.</othercit>
</nplcit>
<category>cited by examiner</category>
</citation>
<citation>
<nplcit num="00016">
<othercit>Vincenzo Di Martino, “Sub optimal scheduling in a grid using genetic algorithms”, 2003, IEEE, pp. 1-7.</othercit>
</nplcit>
<category>cited by examiner</category>
</citation>
<citation>
<nplcit num="00017">
<othercit>Norman et al., “Database acces and integration services on the Grid”, Feb. 1, 2002., pp. 1-18.</othercit>
</nplcit>
<category>cited by examiner</category>
</citation>
<citation>
<nplcit num="00018">
<othercit>Burke, et al., <i>Resource Locking Over Networks, Sys Admin the journal for UNIX systems administrators</i>, pp. 1-8, (Apr. 4, 2003), &lt;http://www.samag.com/print/html&gt;.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00019">
<othercit><i>Resource Locking versus Resource Management, CycleFree Software</i>, pp. 1-3, (2003), &lt;http://www.acisinc.com/locking.html&gt;.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00020">
<othercit><i>Open VMS Cluster Systems, Compaq Open VMS Documentation</i>, pp. 1-8, (2003), &lt;http://tigger.stcloudstate.edu/-tigger/openvms/72final/4477/4477pro<sub>—</sub>002.html&gt;.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00021">
<othercit><i>Connection Manager</i>, pp. 1-8, (2003), &lt;http://h30097.www3.hp.com/docs/base<sub>—</sub>doc/DOCUMENTATION/V51B<sub>—</sub>HTML/ARHGV...html&gt;.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00022">
<othercit><i>Distributed Lock Manager</i>, pp. 1 of 1, (2003), &lt;http://h30097.www3.hp.com/docs/base<sub>—</sub>doc/DOCUMENTATION/V51B<sub>—</sub>HTML/ARHGV...&gt;.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00023">
<othercit>Lang, et al., <i>A Torus Quorum Protocol for Distributed Murtual Exclusion</i>, &lt;http://www.cs.ucf.edu/csdept/faculty/lang/pubs/pdcs98.html&gt;.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
</references-cited>
<number-of-claims>16</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>707  1-1041</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>3</number-of-drawing-sheets>
<number-of-figures>3</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20040215614</doc-number>
<kind>A1</kind>
<date>20041028</date>
</document-id>
</related-publication>
</us-related-documents>
<parties>
<applicants>
<applicant sequence="001" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Doyle</last-name>
<first-name>Ronald P.</first-name>
<address>
<city>Raleigh</city>
<state>NC</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="002" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Kaminsky</last-name>
<first-name>David Louis</first-name>
<address>
<city>Chapel Hill</city>
<state>NC</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
</applicants>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<last-name>Ray-Yarletts, Esq.</last-name>
<first-name>Jeanine</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="02" rep-type="attorney">
<addressbook>
<last-name>Greenberg, Esq.</last-name>
<first-name>Steven M.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="03" rep-type="attorney">
<addressbook>
<orgname>Carey Rodriguez Greenberg &amp; Paul LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</parties>
<assignees>
<assignee>
<addressbook>
<orgname>International Business Machines Corporation</orgname>
<role>02</role>
<address>
<city>Armonk</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Wong</last-name>
<first-name>Don</first-name>
<department>2163</department>
</primary-examiner>
<assistant-examiner>
<last-name>Black</last-name>
<first-name>Linh</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">The present invention is a grid quorum system, method and apparatus. In a cluster of resources in a computing grid, a resource locking method can include acquiring a temporally limited lock on a grid service in the computing grid. Upon expiration of the temporally limited lock, a renewal of the temporally limited lock can be requested. Subsequently, the temporally limited lock can be renewed if a renewal has been granted by the grid service in response to the request. Notably, the renewing step can include determining whether the cluster has been partitioned into a plurality of sub-clusters. If the cluster has been partitioned, a parent sub-cluster can be identified and the temporally limited lock can be renewed only if a quorum exists in the parent sub-cluster.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="105.33mm" wi="156.46mm" file="US07299229-20071120-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="170.10mm" wi="156.46mm" file="US07299229-20071120-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="229.02mm" wi="153.33mm" file="US07299229-20071120-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="193.38mm" wi="109.73mm" file="US07299229-20071120-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0002" num="0001">1. Statement of the Technical Field</p>
<p id="p-0003" num="0002">The present invention relates to the field of resource locking and more particularly to quorum algorithms for managing resource locking in a clustered environment.</p>
<p id="p-0004" num="0003">2. Description of the Related Art</p>
<p id="p-0005" num="0004">The concurrent operation of multiple processes or services can introduce the problem of resource contention. Concurrent processes and services typically enjoy access to shared resources. Occasionally, individual processes and services require the exclusive use of selected resources for a period of time. Various mechanisms when applied are known to allow resources to become “locked” and “unlocked” by “cooperating concurrent processes.” In this regard, where a cycle exists in the acquisition of locks, a deadlock can occur.</p>
<p id="p-0006" num="0005">A common method used to avoid “resource deadlock” includes the hierarchical ordering of shared resources. In consequence of this hierarchy, locks can be acquired in order of the hierarchy, while locks which have been acquired can be released in an opposite order. In any case, it will be recognized that resource locking is a method to grant access to shared resources. Moreover, locking a shared resource for the duration of a transaction will result in the suspension of access to the locked resource as applied to other processes or services.</p>
<p id="p-0007" num="0006">Resource locking can be problematic in that the burden of managing access to shared resources can be placed squarely upon each concurrent process or service. To that end, where a service or process has not been pre-configured to lock a resource prior to its use, or if a lock is acquired in a non-hierarchical manner, then a potential deadlock condition may exist. Accordingly, it has been suggested that resource management can provide a conceptually better solution for solving the resource contention problem.</p>
<p id="p-0008" num="0007">In the resource management model, rather than having a pool of resources visible to many concurrent processes, the resources can be gathered and managed by a single “resource manager.” Concurrent processes can request the resources from the manager, and the manager can arbitrate all resource requests to ensure fair allocation of the resources. Consequently, the arbitration of resource requests can be centralized within a single object instance. Moreover, program correctness can be guaranteed more easily. Nevertheless, although resource management can appear to be elegant from a conceptual level, programming language constraints can make resource management appear more difficult and error prone than mere resource locking.</p>
<p id="p-0009" num="0008">To improve performance in a distributed system, often it can be preferred to share a locked resource among multiple processes or services. Additionally, locked resource sharing can be helpful in the circumstance where one might want to access a locked resource in multiple instances. Sharing a locked resource can be particularly important given the alternative possibility of creating and releasing a lock for each transaction with the resource. Moreover, to repeatedly create and release locks for each transaction with a resource can give rise to undesirable locking delays.</p>
<p id="p-0010" num="0009">Though the problem of resource locking can be challenging to overcome in the conventional setting, the problem of resource locking can become compounded in the clustered environment. In a clustered environment, clustered systems share various data and system resources such as access to disks and files. To achieve the coordination that is necessary to maintain resource integrity, the cluster must have clear criteria for membership and must disallow participation in the cluster by systems that fail to meet the established criteria. To that end, an instance of a connection manager often can be included with a cluster to create the cluster, add and remove members to and from the cluster, track which members in the cluster are active, maintain a consistent cluster membership list, provide timely notification of changes to the membership, and detect and handle possible cluster partitions.</p>
<p id="p-0011" num="0010">Typically, the connection manager can ensure data integrity in the face of communication failures by using a voting mechanism. The voting mechanism, referred to as a quorum algorithm, can permit processing and I/O within a cluster only when a majority of “votes” are present in the cluster. When the majority of votes are present, the cluster is said to have a quorum. The quorum algorithm, itself, can calculate a quorum based upon any number of factors, including for example, expected votes, current votes, node votes and quorum disk votes.</p>
<p id="p-0012" num="0011">When resource locking is employed within the clustered environment, typically one cluster obtains a lock on a desired resource. Subsequently, transactions within the cluster requiring use of the locked resource can be routed to the locked resource as managed in the cluster. Still, when employing resource locking in the clustered environment, one must plan for network faults. For instance, when a cluster becomes partitioned, nodes formerly within the cluster which are no longer able to “see” other nodes across multiple partitions. Where one node acted as the locking resource prior to the partitioning, nodes in other partitions will not be able to resolve whether the lock has expired, or whether the cluster has been partitioned. Typically, a quorum algorithm can be applied in this circumstance.</p>
<p id="p-0013" num="0012">While quorum algorithms have been successfully applied in respect to storage devices, such quorum algorithms usually depend upon low-level primitives associated with the storage devices. Thus, quorum algorithms heretofore have not been successfully applied to higher levels of the computing hierarchy such as a computing grid. As defined in exemplary fashion by the Open Grid Services Architecture (OGSA), a computing grid can provide protocols both in discovery and also in binding of Web services across distributed systems in a manner which would otherwise not be possible through the exclusive use of registries, directories and discovery protocols.</p>
<p id="p-0014" num="0013">More specifically, as described both in Ian Foster, Carl Kesselman, and Steven Tuecke, <i>The Anatomy of the Grid</i>, Intl J. Supercomputer Applications (2001), and also in Ian Foster, Carl Kesselman, Jeffrey M. Nick and Steven Tuecke, <i>The Physiology of the Grid</i>, Globus.org (Jun. 22, 2002), a computing grid can provide distributed computing infrastructure through which grid services instances can be created, named and discovered by requesting clients. Grid services extend mere Web services by providing enhanced resource sharing and scheduling support, support for long-lived state commonly required by sophisticated distributed applications, as well as support for inter-enterprise collaborations. Moreover, while Web services alone address discovery and invocation of persistent services, grid services support transient service instances which can be created and destroyed dynamically.</p>
<p id="p-0015" num="0014">Notable benefits of using grid services can include a reduced cost of ownership of information technology due to the more efficient utilization of computing resources, and an improvement in the ease of integrating various computing components. Thus, the grid mechanism, and in particular, a grid mechanism which conforms to the OGSA, can implement a service-oriented architecture through which a basis for distributed system integration can be provided—even across organizational domains. Nevertheless, the low-level primitives ordinarily associated with storage devices are not similarly associated with the computing grid. Thus, to date quorum algorithms useful for managing resource locking have been unavailable for use in the grid context.</p>
<heading id="h-0002" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0016" num="0015">The present invention is a grid quorum system, method and apparatus. In a cluster of resources in a computing grid, a resource locking method can include acquiring a temporally limited lock on a grid service in the computing grid. Upon expiration of the temporally limited lock, a renewal of the temporally limited lock can be requested. Subsequently, the temporally limited lock can be renewed if a renewal has been granted by the grid service in response to the request. Notably, the renewing step can include determining whether the cluster has been partitioned into a plurality of sub-clusters. If the cluster has been partitioned, a parent sub-cluster can be identified and the temporally limited lock can be renewed only if a quorum exists in the parent sub-cluster.</p>
<p id="p-0017" num="0016">The step of computing the quorum can include a determination whether a number of resources in the parent sub-cluster exceeds half of all resources in the cluster. Alternatively, the quorum can be computed by determining whether a number of resources in the parent sub-cluster comprises at least half of all resources in the cluster. Based upon this computation, the temporally limited lock can be released if a quorum does not exist in the parent sub-cluster. In this regard, the temporally limited lock can be explicitly released, or the temporally limited lock can be allowed to expire if a quorum does not exist in the parent sub-cluster.</p>
<p id="p-0018" num="0017">In a preferred aspect of the invention, the acquiring step can include determining whether a resource within the cluster already holds a temporally limited lock to the grid service. If no resource can be determined to hold a temporally limited lock to the grid service, the acquiring step can include competing with other resources in the cluster to acquire the temporally limited lock to the grid service. In this regard, the step of competing can include voting to obtain the temporally limited lock. Alternatively, the step of competing can include racing to obtain the temporally limited lock.</p>
<p id="p-0019" num="0018">It will be recognized by the skilled artisan that the present invention can overcome the deficiencies of the prior art in providing a quorum process for use in managing resource locking in a computing grid. To that end, a computing grid which has been configured in accordance with the inventive arrangements can include a cluster manager programmed to manage the creation and operation of a cluster of resources in the computing grid. The cluster manager further can determine whether resources satisfy the cluster criteria for membership in order to add new resources to the cluster. Finally, the cluster manager can manage the process of partitioning the cluster into sub-clusters, and resolving sub-clusters into the cluster.</p>
<p id="p-0020" num="0019">The system further can include at least one cluster of resources managed by the cluster manager. Furthermore, a quorum processor can be coupled to the cluster of resources. Finally, a multiplicity of lockable grid services can be configured in the computing grid to grant temporally limited locks to requesting ones of the resources in the cluster. Each grid service further can be configured both to renew granted ones of the temporally limited locks. Conversely, each grid service can be further configured to revoke granted ones of the temporally limited locks.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0021" num="0020">There are shown in the drawings embodiments which are presently preferred, it being understood, however, that the invention is not limited to the precise arrangements and instrumentalities shown, wherein:</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 1</figref> is a schematic illustration of partial computing grid system configured to manage the locking of grid service resources according to the grid quorum process of the present invention;</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 2</figref> is a flow chart illustrating a process for acquiring and renewing a lock in the computing grid of <figref idref="DRAWINGS">FIG. 1</figref>; and,</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 3</figref> is a flow chart illustrating a process for acquiring a lock in a sub-cluster within a clustered environment in the computing grid of <figref idref="DRAWINGS">FIG. 1</figref>.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS</heading>
<p id="p-0025" num="0024">The present invention is a quorum system and process for use in a computing grid in which grid services can be locked for use by one or more resources in a resource cluster. In accordance with the present invention, a lock holder initially can be determined from among a set of resources in a resource cluster. The lock holder can acquire a lock to a specific grid service in the computing grid, yet the lock can be temporally limited by an expiration parameter. Upon expiration of the lock, the lock holder can attempt to renew the lock. Where the cluster has not been partitioned, the lock can be renewed. Where the cluster has been partitioned, however, the lock can be renewed only where a quorum exists within a sub-cluster which includes the lock holder.</p>
<p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. 1</figref> is a schematic illustration of partial computing grid with clustered resources which has been configured to manage the locking of grid service resources according to the grid quorum process of the present invention. The computing grid can include a multiplicity of grid services <b>100</b> coupled to one another of a computer communications network <b>130</b>, for instance a private intranet, or the global Internet. Notably, it will be recognized by the skilled artisan that each grid service <b>110</b> can include a Web service wrapped with grid functionality. In this regard, in accordance with the present invention, the grid functionality can include logic for granting service locks and service lock renewals. More particularly, lock and renew port types to can be incorporated as part of or associated with the grid wrapper.</p>
<p id="p-0027" num="0026">In any case, a cluster of resources <b>120</b> can be established, including, for instance other grid services in the computing grid. The cluster of resources <b>120</b> can include a set of resources <b>150</b> which have been added to the cluster based upon each individual resource <b>150</b> satisfying a set of criteria for membership in the cluster of resources <b>120</b>. Notably, the cluster of resources <b>120</b> can be coupled to a quorum processor <b>170</b> configured to establish which of the resources <b>150</b> can establish a lock on the grid service <b>110</b>. The quorum processor <b>170</b> further can manage lock renewal in the circumstance where the cluster of resources <b>120</b> becomes partitioned into two or more sub-clusters <b>180</b>, <b>190</b>.</p>
<p id="p-0028" num="0027">Upon initialization, each of the resources <b>150</b> in the cluster of resources <b>120</b> can determine an initial lock holder or locking resource <b>140</b>. For example, a voting process can be employed by the quorum process <b>170</b>. In the voting process, a resource <b>150</b> can become the locking resource <b>140</b> for the cluster of resources <b>120</b> only when the number of votes attributed to the resource <b>150</b> exceeds the number of votes attributed to any one other resource <b>150</b> in the cluster of resources <b>120</b>. In this regard, the term “votes” can refer to the fixed number of votes attributed to a resource in achieving quorum as is known in the art of clustered systems. Still, the skilled artisan will recognize that the manner in which an initial lock holder is determined is not limited to a voting process and other effective techniques can be applied, including for instance, a racing algorithm.</p>
<p id="p-0029" num="0028">In any case, initially, a resource <b>150</b> aspiring to attain a lock on a grid service <b>110</b> can forward a lock request <b>160</b>A to the grid service <b>110</b>. The grid service <b>110</b> can grant a lock <b>160</b>B to the requesting resource <b>150</b> if a lock is available and is not presently held by another resource <b>150</b>. Notably, the lock <b>160</b>B can include both a handle and an expiration parameter. The expiration parameter can indicate a duration of time during which the lock remains valid. Alternatively, the expiration parameter can indicate when a lock will expire. Of course, it will be understood that the expiration parameter can take many forms from which an expiration time can be computed and that the expiration parameter is not so limited to merely a fixed time or duration.</p>
<p id="p-0030" num="0029">The lock <b>106</b>B held by the locking resource <b>140</b> ultimately can expire according to the expiration parameter. Upon expiration or shortly therebefore, the locking resource <b>140</b> can issue a renew request <b>160</b>C to the grid service <b>110</b> exclusively held by the locking resource <b>140</b>. The grid service <b>110</b> upon receiving the renew request <b>160</b>C can either issue a new lock <b>160</b>B with a new expiration time, or the grid service <b>110</b> can reject the request resulting in the immediate revocation of the existing lock <b>160</b>B. Importantly, however, even where a new lock <b>160</b>B has been issued responsive to a renew request <b>160</b>C, the new lock <b>160</b>B only can be maintained without further analysis by the locking resource <b>140</b> where no partitioning of the cluster of resources <b>120</b> has occurred.</p>
<p id="p-0031" num="0030">In the case where a partitioning of resources has occurred in the cluster of resources <b>120</b>, two or more sub-clusters <b>180</b>, <b>190</b> can result (only two sub-clusters shown for the purpose of simplicity of illustration). Notably, it will apparent to the skilled artisan that upon producing sub-clusters <b>180</b>, <b>190</b> within the cluster of resources <b>120</b>, individual ones of the sub-clusters <b>180</b>, <b>190</b> can enjoy a quorum of votes, or lack a quorum of votes as the case may be. In the quorum process <b>170</b> of the present invention, a resource <b>150</b> within a sub-clusters <b>180</b>, <b>190</b> which lacks quorum cannot hold a lock <b>160</b>B on a grid service <b>110</b>.</p>
<p id="p-0032" num="0031">More particularly, when a locking resource <b>140</b> successfully receives a new lock <b>160</b>B responsive to a renew request <b>160</b>C, the locking resource <b>140</b> can determine whether a partitioning of the cluster of resources <b>120</b> has occurred. If a partitioning has transpired, the quorum process <b>170</b> can be executed within each resource <b>150</b> in the cluster of resources <b>120</b>. Specifically, each resource <b>150</b> can determine whether their respective sub-cluster <b>180</b>, <b>190</b> contains a quorum. As an example, the quorum can include a minimum number of votes. Alternatively, and in the preferred case, however, the quorum can include a total number of resources <b>150</b> in the sub-cluster <b>180</b>, <b>190</b>, such as the case where the total number of resources <b>150</b> in the sub-cluster <b>180</b>, <b>190</b> exceeds one-half of all resources <b>150</b> in the cluster of resources <b>120</b>.</p>
<p id="p-0033" num="0032">Where a quorum can be identified in the sub-cluster <b>190</b> holding the locking resource <b>140</b>, the locking resource <b>140</b> can maintain the lock <b>160</b>B and can so notify the other resources <b>150</b> in the cluster of resources <b>120</b>. By comparison, where the locking resource <b>140</b> is included as part of a sub-cluster <b>190</b> lacking a quorum, the locking resource <b>140</b> can relinquish the lock <b>160</b>B through the issuance of a relinquish request <b>160</b>D to the grid service <b>110</b>. Alternatively, the locking resource <b>140</b> simply can permit the lock <b>160</b>B to expire. Importantly, where a resource <b>150</b> undertaking the quorum process <b>170</b> determines that the resource <b>150</b> is included as part of a sub-cluster with quorum which lacks a lock holder, the initial process for determining a lock holder for the grid service <b>110</b> can be undertaken.</p>
<p id="p-0034" num="0033">One of ordinary skill in the art will recognize inherent advantages to the quorum process <b>170</b> of the present invention. First, even where the cluster of resources <b>120</b> has been partitioned, once the partitions have been resolved so that all resources <b>150</b> can rejoin the single cluster of resources <b>120</b>, no further logic will be required to resolve the identity of the locking resource <b>140</b>. Thus, partition resolution does not disrupt lock ownership. Additionally, as the lock <b>160</b>B issued by the grid service <b>110</b> is not perpetual, but time limited, the partitioning of the cluster of resources <b>120</b> into two sub-clusters <b>180</b>, <b>190</b> of equal size will not result in an unrecoverable failure as would have been the case conventionally. Rather, the sub-cluster lacking the locking resource simply can re-attempt lock requests until the locking resource relinquishes the lock.</p>
<p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. 2</figref> is a flow chart illustrating a process for acquiring and renewing a lock in the computing grid of <figref idref="DRAWINGS">FIG. 1</figref>. In particular, the process of <figref idref="DRAWINGS">FIG. 2</figref> can be undertaken in each resource in a resource cluster. Beginning in block <b>210</b>, the cluster can initialize in which an initial lock holder can be determined. As an example, a voting process or a racing process can be undertaken to resolve the initial lock holder. That is, each resource in the cluster can set forth a best effort to obtain the lock, either passively by way of a vote, actively by racing, or otherwise. Where the resource determines that it is not the lock holder in decision block <b>220</b>, the process can end in block <b>270</b> for the resource. Otherwise, the process can continue through blocks <b>230</b> through <b>280</b>.</p>
<p id="p-0036" num="0035">In block <b>230</b>, the resource, now referred to as the locking resource, can acquire a lock to the desired grid service. The lock issued by the grid service, however, can include an expiration parameter limiting the duration in which the locking resource can hold the lock. In decision block <b>240</b>, the locking resource can determine whether the lock has expired. Upon the determination that the lock has expired, in block <b>250</b> the locking resource can request that the grid service renew the lock. In decision block <b>260</b>, where the grid service has denied the renewal request, the lock can be thereafter revoked and the process can end in block <b>270</b>. Otherwise, it can be further determined whether the cluster has been partitioned during the term of the lock. If not, the process can repeat through block <b>240</b>. Otherwise, a quorum process can be undertaken through jump circle A leading to <figref idref="DRAWINGS">FIG. 3</figref>.</p>
<p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. 3</figref> is a flow chart illustrating a process for acquiring a lock in a sub-cluster within a clustered environment in the computing grid of <figref idref="DRAWINGS">FIG. 1</figref>. The process illustrated in <figref idref="DRAWINGS">FIG. 3</figref> can be performed for all resources in the sub-cluster. Proceeding from jump circle A to decision block <b>310</b>, it can be determined whether the sub-cluster in which the resource resides enjoys quorum. In a preferred aspect of the invention, a quorum can be defined as a number of resources in the sub-cluster which exceeds the number of half of the resources in the cluster by at least one cluster (N/2+1).</p>
<p id="p-0038" num="0037">If so, it can further be determined in block <b>330</b> whether the resource is the locking resource. If so, the process can return to decision block <b>240</b> of <figref idref="DRAWINGS">FIG. 2</figref> through jump circle B. Otherwise, where the resource resides in a sub-cluster having quorum, leading through the jump circle C to block <b>210</b> of <figref idref="DRAWINGS">FIG. 2</figref>, the resource can attempt to gain a lock on the grid service through the cluster initialization process. Notably, in decision block <b>310</b>, where a quorum does not exist for the sub-cluster, in decision block <b>320</b> it can be determined whether the resource is the locking resource. If so, the locking resource can release the lock in block <b>340</b> and the process can end in block <b>350</b>.</p>
<p id="p-0039" num="0038">The present invention can be realized in hardware, software, or a combination of hardware and software. An implementation of the method and system of the present invention can be realized in a centralized fashion in one computer system, or in a distributed fashion where different elements are spread across several interconnected computer systems. Any kind of computer system, or other apparatus adapted for carrying out the methods described herein, is suited to perform the functions described herein.</p>
<p id="p-0040" num="0039">A typical combination of hardware and software could be a general purpose computer system with a computer program that, when being loaded and executed, controls the computer system such that it carries out the methods described herein. The present invention can also be embedded in a computer program product, which comprises all the features enabling the implementation of the methods described herein, and which, when loaded in a computer system is able to carry out these methods.</p>
<p id="p-0041" num="0040">Computer program or application in the present context means any expression, in any language, code or notation, of a set of instructions intended to cause a system having an information processing capability to perform a particular function either directly or after either or both of the following a) conversion to another language, code or notation; b) reproduction in a different material form. Significantly, this invention can be embodied in other specific forms without departing from the spirit or essential attributes thereof, and accordingly, reference should be had to the following claims, rather than to the foregoing specification, as indicating the scope of the invention.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>We claim:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. In a cluster of resources in a computing grid, a resource locking method comprising:
<claim-text>acquiring a temporally limited lock on a grid service in the computing grid;</claim-text>
<claim-text>upon expiration of said temporally limited lock, requesting a renewal of said temporally limited lock; and,</claim-text>
<claim-text>renewing said temporally limited lock if a renewal has been granted by said grid service in response to said request, wherein said acquiring step comprises the steps of:</claim-text>
<claim-text>determining whether a resource within the cluster already holds a temporally limited lock to said grid service; and,</claim-text>
<claim-text>if no resource can be determined to hold a temporally limited lock to said grid service, competing with other resources in the cluster to acquire said temporally limited lock to said grid service.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein said renewing step comprises the steps of:
<claim-text>determining whether the cluster has been partitioned into a plurality of sub-clusters; and,</claim-text>
<claim-text>if the cluster has been partitioned, identifying a parent sub-cluster and renewing said temporally limited lock only if a quorum exists in said parent sub-cluster.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, further comprising the step of computing said quorum by determining whether a number of resources in said parent sub-cluster exceeds more than half of all resources in the cluster.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, further comprising the step of computing said quorum by determining whether a number of resources in said parent sub-cluster comprises at least half of all resources in the cluster.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, further comprising the step of releasing said temporally limited lock if a quorum does not exist in said parent sub-cluster.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, further comprising the step of allowing said temporally limited lock to expire if a quorum does not exist in said parent sub-cluster.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein said step of competing comprises voting to obtain said temporally limited lock.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein said step of competing comprises racing to obtain said temporally limited lock.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. A machine readable storage having stored thereon a computer program for resource locking in a cluster of resources in a computing grid, said computer program comprising a routine set of instructions for causing the machine to perform the steps of:
<claim-text>acquiring a temporally limited lock on a grid service in the computing grid;</claim-text>
<claim-text>upon expiration of said temporally limited lock, requesting a renewal of said temporally limited lock; and,</claim-text>
<claim-text>renewing said temporally limited lock if a renewal has been granted by said grid service in response to said request, wherein said acquiring step comprises the steps of:</claim-text>
<claim-text>determining whether a resource within the cluster already holds a temporally limited lock to said grid service; and,</claim-text>
<claim-text>if no resource can be determined to hold a temporally limited lock to said grid service, competing with other resources in the cluster to acquire said temporally limited lock to said grid service.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The machine readable storage of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein said renewing step comprises the steps of:
<claim-text>determining whether the cluster has been partitioned into a plurality of sub-clusters; and,</claim-text>
<claim-text>if the cluster has been partitioned, identifying a parent sub-cluster and renewing said temporally limited lock only if a quorum exists in said parent sub-cluster.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The machine readable storage of <claim-ref idref="CLM-00010">claim 10</claim-ref>, further comprising the step of computing said quorum by determining whether a number of resources in said parent sub-cluster exceeds more than half of all resources in the cluster.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The machine readable storage of <claim-ref idref="CLM-00010">claim 10</claim-ref>, further comprising the step of computing said quorum by determining whether a number of resources in said parent sub-cluster comprises at least half of all resources in the cluster.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The machine readable storage of <claim-ref idref="CLM-00010">claim 10</claim-ref>, further comprising the step of releasing said temporally limited lock if a quorum does not exist in said parent sub-cluster.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The machine readable storage of <claim-ref idref="CLM-00010">claim 10</claim-ref>, further comprising the step of allowing said temporally limited lock to expire if a quorum does not exist in said parent sub-cluster.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The machine readable storage of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein said step of competing comprises voting to obtain said temporally limited lock.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The machine readable storage of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein said step of competing comprises racing to obtain said temporally limited lock.</claim-text>
</claim>
</claims>
</us-patent-grant>
