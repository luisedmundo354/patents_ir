<us-patent-grant lang="EN" dtd-version="v4.2 2006-08-23" file="US07299299-20071120.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20071106" date-publ="20071120">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>07299299</doc-number>
<kind>B2</kind>
<date>20071120</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>11014709</doc-number>
<date>20041220</date>
</document-id>
</application-reference>
<us-application-series-code>11</us-application-series-code>
<us-term-of-grant>
<us-term-extension>35</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>15</main-group>
<subgroup>16</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>709245</main-classification>
</classification-national>
<invention-title id="d0e53">Shared registration system for registering domain names</invention-title>
<references-cited>
<citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>6119234</doc-number>
<kind>A</kind>
<name>Aziz et al.</name>
<date>20000900</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>713201</main-classification></classification-national>
</citation>
<citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>6182142</doc-number>
<kind>B1</kind>
<name>Win et al.</name>
<date>20010100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709229</main-classification></classification-national>
</citation>
<citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6230194</doc-number>
<kind>B1</kind>
<name>Frailong et al.</name>
<date>20010500</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>709220</main-classification></classification-national>
</citation>
<citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>6324538</doc-number>
<kind>B1</kind>
<name>Wesinger et al.</name>
<date>20011100</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>707 10</main-classification></classification-national>
</citation>
<citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>6338082</doc-number>
<kind>B1</kind>
<name>Schneider</name>
<date>20020100</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>709203</main-classification></classification-national>
</citation>
<citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>6374295</doc-number>
<kind>B2</kind>
<name>Farrow et al.</name>
<date>20020400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709223</main-classification></classification-national>
</citation>
<citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>6418466</doc-number>
<kind>B1</kind>
<name>Bertram et al.</name>
<date>20020700</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>709221</main-classification></classification-national>
</citation>
<citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>6560634</doc-number>
<kind>B1</kind>
<name>Broadhurst</name>
<date>20030500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709203</main-classification></classification-national>
</citation>
<citation>
<nplcit num="00009">
<othercit>Hollenbeck et al., NSI Registry Registrar Protocol (RRP Version 1.1.0, May 2000, RFC 2832, Network Solutions, Inc. Registry, pp. 1-31.</othercit>
</nplcit>
<category>cited by examiner</category>
</citation>
<citation>
<nplcit num="00010">
<othercit>K. Crispin et al.: <i>Shared Registry System Protocol </i>(<i>SRSP</i>), Nov. 1998, pp. 1-31, http://www.globecom.net/ietf/draft/draft-crispin-srs-00.html, retrieved Feb. 7, 2003.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
</references-cited>
<number-of-claims>15</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>709203</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709217-219</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709223</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709245</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>15</number-of-drawing-sheets>
<number-of-figures>16</number-of-figures>
</figures>
<us-related-documents>
<continuation>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>09556830</doc-number>
<kind>00</kind>
<date>20000421</date>
</document-id>
<parent-status>ABANDONED</parent-status>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>11014709</doc-number>
</document-id>
</child-doc>
</relation>
</continuation>
<us-provisional-application>
<document-id>
<country>US</country>
<doc-number>60130568</doc-number>
<kind>00</kind>
<date>19990422</date>
</document-id>
</us-provisional-application>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20050102354</doc-number>
<kind>A1</kind>
<date>20050512</date>
</document-id>
</related-publication>
</us-related-documents>
<parties>
<applicants>
<applicant sequence="001" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Hollenbeck</last-name>
<first-name>Scott</first-name>
<address>
<city>Burke</city>
<state>VA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="002" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Srivastava</last-name>
<first-name>Manoj</first-name>
<address>
<city>Reston</city>
<state>VA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="003" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Holtzman</last-name>
<first-name>David</first-name>
<address>
<city>Herndon</city>
<state>VA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="004" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Saraf</last-name>
<first-name>Neeran</first-name>
<address>
<city>Falls Church</city>
<state>VA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
</applicants>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Townsend and Townsend and Crew, LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</parties>
<assignees>
<assignee>
<addressbook>
<orgname>Network Solutions, Inc.</orgname>
<role>02</role>
<address>
<city>Herndon</city>
<state>VA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Cardone</last-name>
<first-name>Jason</first-name>
<department>2145</department>
</primary-examiner>
<assistant-examiner>
<last-name>Nguyen</last-name>
<first-name>Minh Chau</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">An apparatus and method for processing a domain name registration operation in a shared registration system is provided. A registry receives a request for performing a domain name registration operation from a registrar. The registry performs an authentication of the registrar that sent the request. If the registrar is determined to be authenticated, the registry then determines whether the registrar is authorized to perform an action necessitated by the operation. Subsequently, the registry executes the operation based on a determination that the registrar is authorized and stores changes necessitated by the operation in a database. A response indicating success or failure of the operation is sent to the registrar.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="132.00mm" wi="240.71mm" file="US07299299-20071120-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="242.65mm" wi="143.26mm" orientation="landscape" file="US07299299-20071120-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="214.38mm" wi="174.41mm" file="US07299299-20071120-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="252.90mm" wi="202.52mm" file="US07299299-20071120-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="181.69mm" wi="103.63mm" file="US07299299-20071120-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="250.44mm" wi="142.75mm" file="US07299299-20071120-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="108.12mm" wi="133.60mm" file="US07299299-20071120-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="188.89mm" wi="107.78mm" file="US07299299-20071120-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="160.02mm" wi="148.76mm" file="US07299299-20071120-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="208.36mm" wi="203.62mm" file="US07299299-20071120-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="195.50mm" wi="34.80mm" file="US07299299-20071120-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="249.00mm" wi="86.44mm" file="US07299299-20071120-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="240.54mm" wi="91.86mm" file="US07299299-20071120-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00013" num="00013">
<img id="EMI-D00013" he="246.13mm" wi="176.02mm" file="US07299299-20071120-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00014" num="00014">
<img id="EMI-D00014" he="120.73mm" wi="159.60mm" file="US07299299-20071120-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00015" num="00015">
<img id="EMI-D00015" he="191.77mm" wi="170.94mm" file="US07299299-20071120-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<p id="p-0002" num="0001">This is a continuation of application Ser. No. 09/556,830 filed 21 Apr. 2000 now abandonded, the content of which is incorporated herein by reference in its entirety.</p>
<heading id="h-0001" level="1">RELATED APPLICATION</heading>
<p id="p-0003" num="0002">This application claims the benefit of U.S. Provisional Application No. 60/130,568, filed Apr. 22, 1999, the disclosure of which is expressly incorporated herein by reference in its entirety.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0002" level="1">FIELD OF THE INVENTION</heading>
<p id="p-0004" num="0003">The present invention relates to the field of domain name registration. More particularly, the invention relates to an apparatus and method for providing a shared registration system for registering domain names.</p>
<heading id="h-0003" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0005" num="0004">The World Wide Web allows for the access of information on the Internet by permitting a user to navigate Internet resources without the user having knowledge of specific Internet Protocol (IP) addresses or other technical knowledge. The Web does away with command-line utilities, which typically require a user to transmit sets of commands to communicate with an Internet server. Instead, the Web is made up of thousands of interconnected web sites.</p>
<p id="p-0006" num="0005">In order to access a web site, a user utilizes a uniform resource locator (URL) or domain name associated with the site. Because there are so many web sites in existence today and the number of web sites is always increasing, a domain name must first be registered with a domain name registration service. In that manner, it can be ensured that two web sites owned by two different people will not have the same domain name.</p>
<p id="p-0007" num="0006">A domain name registration service is responsible for accepting a request for a domain name from an individual or a corporation (e.g., registrant) and determining whether or not the domain name is already in use by somebody else. If the domain name is already taken, then the requester must choose a different domain name. If the domain name is available, then the requester is allowed to exclusively use the name and have it registered and stored in a database that maintains all of the domain names currently registered with that domain name registration service.</p>
<p id="p-0008" num="0007">Previously, one domain name registration service, owned by Network Solutions, Inc., provided for the registration of all second-level domain (SLD) names in the .com, .org, .net, .edu, .gov, and mil top level domain (TLD) names. The database maintained by the service was a global database that stored information that could be propagated in Internet zone files on the Internet so that domain names could be found and accessed by users around the world. Network Solutions, Inc. was allowed to be the sole provider of registration services pursuant to a bid won for a five-year National Science Foundation (NSF) Cooperative Agreement.</p>
<p id="p-0009" num="0008">As more businesses and individuals adopted the Internet, the registration of domain names grew significantly. The rapid adoption of the world wide web and the explosion in domain name registration led the government to believe that competition should be introduced at the retail level in the registration of domain names. Accordingly, there is presently a need for a system and method capable of accommodating an unlimited number of registration retailers, e.g., registrars, which are each responsible for registrant acquisition and user support, while keeping a global database for certain TLD names under the control of a single experienced entity for stability and security.</p>
<heading id="h-0004" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0010" num="0009">A method consistent with the present invention processes a domain name registration operation in a shared registration system. The method includes the steps of: generating a request for performing a domain name registration operation; sending the request to a registry, wherein the registry is operable to receive the request, authenticate a registrar that sent the request, determine whether the registrar is authorized to perform an action necessitated by the operation, execute the operation based on a determination that the registrar is authorized, and store changes necessitated by the operation in a database; and receiving a response to the request, the response indicating success or failure of the operation.</p>
<p id="p-0011" num="0010">Another method consistent with the present invention processes a domain name registration operation in a shared registration system. The method includes the steps of: receiving a request for performing a domain name registration operation; authenticating a registrar that sent the request; sending the request to an application server based on a determination that the registrar is authenticated, wherein the application server is operable to execute the operation; receiving a response to the request, the response indicating success or failure of the operation; and forwarding the response to the registrar.</p>
<p id="p-0012" num="0011">Another method consistent with the present invention processes a domain name registration operation in a shared registration system. The method includes the steps of: receiving a request for performing a domain name registration operation; parsing the request; instantiating one or more objects, the objects corresponding to attributes included in the request; determining whether a registrar that sent the request is authorized to perform an action necessitated by the operation; executing the operation based on a determination that the registrar is authorized; storing changes necessitated by the operation in a database; and sending a response to the registrar, the response indicating success or failure of the operation.</p>
<p id="p-0013" num="0012">Another method consistent with the present invention processes a domain name registration operation in a shared registration system. The method includes the steps of: receiving a request for performing a domain name registration operation; authenticating a registrar that sent the request; instantiating one or more objects, the objects corresponding to parameters included in the request; determining whether the registrar is authorized to perform an action necessitated by the operation; executing the operation based on a determination that the registrar is authorized; storing changes necessitated by the operation in a database; and sending a response to the registrar, the response indicating success or failure of the operation.</p>
<p id="p-0014" num="0013">Another method consistent with the present invention processes a domain name registration operation in a shared registration system. The method includes the steps of: receiving a request for performing a domain name registration operation; authenticating a registrar that sent the request; determining whether the registrar is authorized to perform an action necessitated by the operation; executing the operation based on a determination that the registrar is authorized; storing changes necessitated by the operation in a database; and sending a response to the registrar, the response indicating success or failure of the operation.</p>
<p id="p-0015" num="0014">Another method consistent with the present invention processes a domain name registration operation in a shared registration system. The method includes the steps of: receiving a request for performing a domain name registration operation; determining whether a registrar that sent the request is authorized to perform an action necessitated by the operation; executing the operation based on a determination that the registrar is authorized; storing changes necessitated by the operation in a database; and sending a response to the registrar, the response indicating success or failure of the operation.</p>
<p id="p-0016" num="0015">An apparatus consistent with the present invention processes a domain name registration operation. The apparatus comprises the following: a memory having a program that: generates a request for performing a domain name registration operation; sends the request to a registry, wherein the registry is operable to receive the request, authenticate a registrar that sent the request, determine whether the registrar is authorized to perform an action necessitated by the operation, execute the operation based on a determination that the registrar is authorized, and store changes necessitated by the operation in a database; and receives a response to the request, the response indicating success or failure of the operation; and a processor that runs the program.</p>
<p id="p-0017" num="0016">Another apparatus consistent with the present invention processes a domain name registration operation. The apparatus comprises the following: a memory having a program that: receives a request for performing a domain name registration operation; authenticates a registrar that sent the request; sends the request to an application server based on a determination that the registrar is authenticated, wherein the application server is operable to execute the operation; receive a response to the request, the response indicating success or failure of the operation; and forward the response to the registrar; and a processor that runs the program.</p>
<p id="p-0018" num="0017">Another apparatus consistent with the present invention processes a domain name registration operation. The apparatus comprises the following: a memory having a program that receives a request for performing a domain name registration operation; parses the request; instantiates one or more objects, the objects corresponding to attributes included in the request; determines whether a registrar that sent the request is authorized to perform an action necessitated by the operation; executes the operation based on a determination that the registrar is authorized; stores changes necessitated by the operation in a database; and sends a response to the registrar, the response indicating success or failure of the operation; and a processor that runs the program.</p>
<p id="p-0019" num="0018">Another apparatus consistent with the present invention processes a domain name registration operation. The apparatus comprises the following: a database for storing domain name registration information; an application gateway operable to receive a request for performing a domain name registration operation, authenticate a registrar that sent the request, receive a response to the request, and forward the response to a registrar that sent the request; and an application server operable to receive the request from the application gateway, parse the request, instantiate one or more objects, the objects corresponding to attributes included in the request, determine whether the registrar is authorized to perform an action necessitated by the operation, execute the operation based on a determination that the registrar is authorized, store changes necessitated by the operation in the database, and send a response to the registrar via the application gateway, the response indicating success or failure of the operation.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0020" num="0019">The accompanying drawings are incorporated in and constitute a part of this specification and, together with the description, explain the advantages and principles of the invention. In the drawings,</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 1</figref> is a diagram of an exemplary network environment in which a method and system consistent with the present invention may be implemented;</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 2</figref> is a diagram showing a partially expanded view of a registry consistent with the present invention;</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 3</figref> is a diagram showing a partially expanded view of another registry consistent with the present invention;</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 4</figref> is a diagram showing a partially expanded view of a registrar consistent with the present invention;</p>
<p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. 5</figref> is a diagram showing a partially expanded view of a RRP application gateway consistent with the present invention;</p>
<p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. 6</figref> is a diagram showing a partially expanded view of a RRP application server consistent with the present invention;</p>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. 7</figref> is a diagram showing a partially expanded view of a registrar server consistent with the present invention;</p>
<p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. 8</figref> is a diagram showing a partially expanded view of a whois system consistent with the present invention;</p>
<p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. 9</figref> is a diagram of the schema for a whois database consistent with the present invention;</p>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. 10</figref> is a diagram of the schema for a registry database consistent with the present invention;</p>
<p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. 11</figref> shows an exemplary flowchart of a process for generating and transmitting RRP commands in a manner consistent with the present invention;</p>
<p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. 12</figref> shows an exemplary flowchart of a process for providing transport layer security for a shared registration system in a manner consistent with the present invention;</p>
<p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. 13</figref> shows an exemplary flowchart of a process for receiving and executing an RRP command in a manner consistent with the present invention;</p>
<p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. 14</figref> shows a diagram of a simple interaction between a registrar and a registry consistent with the present invention;</p>
<p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. 15</figref> shows an example of the domain and name server entities consistent with the present invention; and</p>
<p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. 16</figref> is a diagram showing the possible states of an RRP session consistent with the present invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0006" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0037" num="0036">The following detailed description of the invention refers to the accompanying drawings. While the description includes exemplary embodiments, other embodiments are possible, and changes may be made to the embodiments described without departing from the spirit and scope of the invention. The following detailed description does not limit the invention. Instead, the scope of the invention is defined by the appended claims and their equivalents.</p>
<heading id="h-0007" level="1">Overview</heading>
<p id="p-0038" num="0037">The apparatus and method of the present invention processes domain name registration operations in a shared registration system comprising a plurality of registrars providing internet domain name registration services within the TLDs administered by a registry. Registrars access the registry through a registry-registrar protocol (RRP) to register domain names and perform domain name-related functions such as the registration of name servers, renewal of registrations, deletions, transfers, and updates to domain names registered by that registrar. Registrars have a web-based interface to access the registry to perform administrative functions, generate reports, perform global domain name updates, and perform other self-service maintenance functions not available via RRP. The RRP is implemented by the registry to provide adequate security and authentication functions to protect the registry database while supporting all necessary registrar operations.</p>
<p id="p-0039" num="0038">The registry accepts registrations and registration service requests from all registrars licensed with the registry, while protecting the integrity of registrations from unauthorized access and interference by third parties. Every new domain name application is checked to ensure that the domain name is not already registered. The registry generates zone files for the TLDs it administers and provides a whois search capability that allows users to query the availability of a domain name. Zone files generally contain the information needed to resolve domain names to Internet Protocol (IP) numbers. The registry also provides support to the registrars through customer service representatives (CSRs). The CSRs have a separate web-based interface to the registry, through which, after authenticating the registrar, they can query and perform updates per the registrar's requests.</p>
<heading id="h-0008" level="1">Shared Registration System Architecture</heading>
<p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. 1</figref> is a diagram of an exemplary network environment <b>100</b> in which a method consistent with the present invention may be implemented. Network environment <b>100</b> includes registrants <b>102</b> and <b>104</b>, Internet <b>106</b>, registrars <b>108</b>, <b>110</b>, and <b>112</b>, and registry <b>116</b>.</p>
<p id="p-0041" num="0040">Registrant <b>102</b> or <b>104</b> may include, for example, a personal computer of an individual or corporation that may want to register a domain name with a domain name registration system such as registrar <b>108</b>, <b>110</b>, or <b>112</b>. This individual or corporation holds the right to use that specific domain name for a specified period of time, provided certain conditions are met and the registration fees are paid.</p>
<p id="p-0042" num="0041">Registrar <b>108</b>, <b>110</b>, or <b>112</b> may be a domain name registration service such as that maintained by Network Solutions, Inc. that provides direct services to registrants <b>102</b> or <b>104</b>. Registrant <b>102</b> or <b>104</b> may access registrar <b>108</b>, <b>110</b>, or <b>112</b> via Internet <b>106</b> through a web server resident on registrar <b>108</b>, <b>110</b>, or <b>112</b>. The web server may host the registrar's web page and is utilized by registrant <b>102</b> or <b>104</b> to purchase or manage the various options that are associated with a domain name registration system account. For example, using the various web pages available at registrar <b>108</b>, registrant <b>102</b> may sign up for an account, reserve or register a domain name, buy the web forwarding option, configure the web forwarding option (e.g., determine where a given web address will forward), buy electronic mail (e-mail) service, buy a single page business card, contact a customer service representation, etc.</p>
<p id="p-0043" num="0042">The web forwarding option, for example, forwards a web address hosted by a registrar to a pre-existing URL. The e-mail service, for example, matches a registrants's e-mail address with a given domain name so that e-mail can be sent and received using a desired name (e.g., a company name) instead of the name of, for example, an e-mail vendor. The single page business card, for example, forwards a web address to a single page web site designed by registrant <b>102</b> or <b>104</b>.</p>
<p id="p-0044" num="0043">Registrars <b>108</b>, <b>110</b>, and <b>112</b> function to process domain name registrations for registrants and then send the necessary DNS information to registry <b>114</b> for entry into a centralized registry database and ultimate propagation over the Internet. DNS information may include, for example, domain name, name server names, and name server Internet Protocol (IP) numbers. Communication between registrars <b>108</b>, <b>110</b>, and <b>112</b>, and registry <b>114</b> occurs via a protocol called registry-registrar protocol (RRP). RRP is a protocol that permits multiple registrars to provide second level Internet domain name registration services in the top level domains (TLDs) administered by a TLD registry, such as registry <b>114</b>, on behalf of registrants, such as registrant <b>102</b> or <b>104</b>. Registrar <b>108</b>, <b>110</b>, or <b>112</b> may access registry <b>114</b> through RRP to register domain names and perform other domain name-related functions such as the registration of name servers, re-registrations, deletions, transfers, and updates to domain names registered by that registrar. In one embodiment, RRP may be a secure, TCP (transmission control protocol)-based, ASCII text protocol.</p>
<p id="p-0045" num="0044">Registry <b>114</b> may be an entity that receives DNS information from registrars <b>108</b>, <b>110</b>, or <b>112</b>, inserts that information into a centralized database resident at registry <b>114</b>, and propagates the information in Internet zone files on the Internet so that domain names can be found by users around the world via applications such as the world wide web and e-mail. Generally, a registry is responsible for delegating Internet addresses, such as Internet Protocol (IP) numbers and domain names, and keeping a record of those addresses and the information associated with their delegation. Examples of domain name registries include NSI's registry operation (e.g., .com, .net, and .org) and the ISO 3166 country code registries (e.g., fr, de, uk, us). Registry <b>114</b> maintains at least the DNS information and an identifier for the registrar responsible for each domain name registered through registry <b>114</b>. Registrant-specific data such as registrant name and contact information is not maintained by registry <b>114</b> but rather by the registrar or the particular domain name or name server.</p>
<p id="p-0046" num="0045"><figref idref="DRAWINGS">FIG. 2</figref> is a diagram showing a partially expanded view of registry <b>114</b> consistent with the present invention. Registry <b>114</b> may include BIG/IP <b>202</b>, BIG/IP <b>204</b>, RRP application gateways <b>206</b>, <b>208</b>, and <b>210</b>, firewall <b>212</b>, RRP application servers <b>214</b>, <b>216</b>, and <b>218</b>, database server <b>220</b>, and registry database <b>222</b>.</p>
<p id="p-0047" num="0046">BIG/IPs <b>202</b> and <b>204</b> are fully fault-tolerant servers that load balance the communications to RRP application gateways <b>206</b>, <b>208</b>, and <b>210</b>. For example, registrar <b>108</b> may send registry <b>114</b> a RRP command to register a domain name with registry <b>114</b>. The RRP command travels from registrar <b>108</b> through Internet <b>106</b> to BIG/IP <b>202</b> or <b>204</b>, so that the RRP command can be passed to one of RRP application gateway <b>206</b>, <b>208</b>, or <b>210</b>. Essentially, BIG/IPs <b>202</b> and <b>204</b> balance the load between RRP application gateways <b>206</b>, <b>208</b>, and <b>210</b> by, for example, alternating between the RRP application gateways to which BIG/IPs <b>202</b> and <b>204</b> send data. If one RRP application gateway is too busy, then data can be sent to another RRP application gateway. In this manner, bottlenecking of data can be avoided. It should be understood that the number of RRP application gateways connected to BIG/IPs <b>202</b> and <b>204</b> can be expanded as needed (e.g., if web traffic goes over the limit, more RRP application gateways can be added to stop congestion). BIG/IPs <b>202</b> and <b>204</b> can be implemented, for example, using a SunServer machine available from Sun Microsystems. In one embodiment, communications between the registrars and BIG/IPs <b>202</b> and <b>204</b>, and the communications between BIG/IPs <b>202</b> and <b>204</b> and RRP application gateways <b>206</b>, <b>208</b>, and <b>210</b> may be implemented, for example, according to RRP over SSL (secure socket layer) over TCP/IP protocol.</p>
<p id="p-0048" num="0047">RRP application gateways <b>206</b>, <b>208</b>, and <b>210</b> are gateways to RRP application servers <b>214</b>, <b>216</b>, and <b>218</b> from the outside world. The primary purpose of RRP application gateways <b>206</b>, <b>208</b>, and <b>210</b> is to provide transport layer security. RRP application gateways <b>206</b>, <b>208</b>, and <b>210</b> authenticate registrars that are attempting to communicate with registry <b>114</b> using a mutual authentication technique known as SSL handshake. After successfully authenticating a registrar, an RRP application gateways <b>206</b>, <b>208</b>, or <b>210</b> decrypts the data received from the registrar and opens a dedicated connection with the RRP application server <b>214</b>, <b>216</b>, or <b>218</b> that is connected to the particular RRP application gateway. The RRP application gateway <b>206</b>, <b>208</b>, or <b>210</b> may then pass the data from the registrar on to the corresponding RRP application server through firewall <b>212</b> and subsequently acts as a proxy between the registrar and the RRP application server <b>214</b>, <b>216</b>, or <b>218</b>. Communications between RRP application gateways <b>206</b>, <b>208</b>, and <b>210</b> and RRP application servers <b>214</b>, <b>216</b>, and <b>218</b> may be implemented, for example, according to RRP over TCP/IP protocol. In one embodiment, RRP application gateways <b>206</b>, <b>208</b>, and <b>210</b> may each be implemented using an Enterprise 450 server available from Sun Microsystems, running Solaris 2.6 and JDK 1.1.6.</p>
<p id="p-0049" num="0048">RRP application servers <b>214</b>, <b>216</b>, and <b>218</b> provide the “heart” of the RRP environment. Each RRP application server <b>214</b>, <b>216</b>, and <b>218</b> is connected to a single RRP application gateway for communication. Alternatively, RRP application servers <b>214</b>, <b>216</b>, and <b>218</b> may be load balanced in a manner similar to the load balancing of RRP application gateways <b>206</b>, <b>208</b>, and <b>210</b>. Upon receiving a RRP command from a RRP application gateway, a RRP application server <b>214</b>, <b>216</b>, or <b>218</b> processes and executes the RRP command in the context of an authenticated RRP session. The execution of the RRP command may include sending database changes to database server <b>220</b> so that the changes may be stored in registry database <b>222</b>. After execution has been completed, the RRP application server may return a response code to a RRP application gateway, so that the RRP application gateway may return the response code to the registrar that initiated the RRP session. Communications between RRP application servers <b>214</b>, <b>216</b>, and <b>218</b> and database server <b>220</b> may be implemented, for example, according to JDBC (Java Database Connection) over TCP/IP protocol. In one embodiment, RRP application servers <b>214</b>, <b>216</b>, and <b>218</b> may each be implemented using an Enterprise 450 server available from Sun Microsystems, running Solaris 2.6 and JDK 1.1.6.</p>
<p id="p-0050" num="0049">Database server <b>220</b> receives database changes from an RRP application server and stores the changes in registry database <b>222</b>. The changes may be in the form of insertions, updates, or deletions. Database server <b>220</b> also runs a number of batch processes that may be run on a pre-scheduled basis using a cron-like scheduler. These batch processes may include, for example, a domain renewal process, a domain transfer notification process, an automatic domain transfer acknowledgment process, and an explicit delete process. In one embodiment, each of the batch processes is implemented in the Java® programming language.</p>
<p id="p-0051" num="0050">The domain renewal process renews all of the domain names that have expired and are eligible for renewal. The domain transfer notification process sends notification to a registrar who has requested to transfer a domain name from another registrar informing them that their request is pending approval of the original registrar. Additionally, the notification process sends a notification to the original registrar informing them of the transfer request and asking them to either approve or disapprove the transfer request. The automatic domain transfer acknowledgment process searches for all domain names that are pending transfer and transfers them after a configurable amount of time (e.g., five days). The explicit delete process deletes all domains and child name servers that have been put on a hold status due to a RRP command to delete a domain name.</p>
<p id="p-0052" num="0051">Note that these batch processes may affect several of the tables stored in registry database <b>222</b>. These tables may include, for example, the domain table, the registrar table, the e-mail queue table, the domain pending transfer table, the transaction table, the transaction attribute table, and the various audit tables that are associated with the aforementioned tables. Other tables may also be affected. The tables stored in registry database <b>222</b> are more fully explained below.</p>
<p id="p-0053" num="0052">Registry database <b>222</b> stores various information on domain name registrations, name server registrations, and registrars. Registry database <b>22</b> servers as a global or centralized database for all registrations for TLDs controlled by registry <b>114</b>. Information stored on domain name registrations may include the following: domain name, name server, registrar name transfer date, registration period, expiration date, status, created date, created by, updated date, and updated by. Information stored on name server registrations may include the following: server name, IP address, registrar name, transfer date, created date, created by, updated date, and updated by. Information stored on registrars may include the following: registrar name, logon ID, registrar password, security phrase, status, credit limit, license expiration date, address, phone number, fax number, created date, created by, updated date, updated by, and registrar contact information. Registry database <b>222</b> may store the various information in the form of one or more relational tables. When execution of a RRP command or batch process results in a change in registry database <b>222</b>, these tables may be altered. <figref idref="DRAWINGS">FIG. 10</figref> shows the database schema for registry database <b>222</b>. Using the RRP or a secured web site, each registrar may view the information stored in registry database <b>222</b> that pertains to its own registrations. Information on registrations made by other registrars is not viewable in that manner, although limited information is available for public viewing using a whois function. The whois function is described in greater detail below. In one embodiment, registry database <b>222</b> may be an Oracle 7.3.4 database.</p>
<p id="p-0054" num="0053"><figref idref="DRAWINGS">FIG. 3</figref> is a diagram showing a partially expanded view of another registry <b>314</b> consistent with the present invention. Registry <b>314</b> may include BIG/IP <b>302</b>. BIG/IP <b>304</b>, RRP application gateways <b>306</b>, <b>308</b>, and <b>310</b>, firewall <b>312</b>, RRP application servers <b>314</b>, <b>316</b>, and <b>318</b>, database server <b>320</b>, registry database <b>322</b>, web server <b>324</b>, whois system <b>326</b>, root server <b>328</b>, registrar administrative server <b>330</b>, registrar reporting unit <b>332</b>, customer service server <b>334</b>, customer service representatives <b>336</b>, mail server <b>338</b>, zone generation/whois dumber <b>340</b>, and validation unit <b>342</b>. BIG/IP <b>302</b>, BIG/IP <b>304</b>, RRP application gateways <b>306</b>, <b>308</b>, and <b>310</b>, firewall <b>312</b>, RRP application servers <b>314</b>, <b>316</b>, and <b>318</b>, database server <b>320</b>, and registry database <b>322</b> operate in a manner similar to BIG/IP <b>202</b>, BIG/IP <b>204</b>, RRP application gateways <b>206</b>, <b>208</b>, and <b>210</b>, firewall <b>212</b>, RP application servers <b>214</b>, <b>216</b>, and <b>218</b>, database server <b>220</b>, and registry database <b>222</b>, respectively.</p>
<p id="p-0055" num="0054">Zone generation/whois dumper <b>340</b> extracts certain data from registry database <b>322</b> needed to create zone files and whois data. Zone files generally contain the information needed to resolve domain names in Internet Protocol (IP) numbers. For example, a zone file may include domain name information, name server information, and IP address information. Accordingly, in one embodiment, zone generation/whois dumper <b>340</b> may periodically (e.g., once a day) extract domain name, name server, and IP address information from the relational tables stored in registry database <b>322</b>. In an alternative embodiment, data for zone files may be extracted from registry database <b>322</b> as soon as data becomes available on a real-time basis. Zone generation/whois dumper <b>340</b> then generates zone file(s) from the extracted information and sends the file(s) to validation unit <b>342</b> in order to check the validity of the data. Alternatively, zone validation may occur at zone generation/whois dumper <b>340</b>. Upon receiving an indication that the zone file data is valid, zone generation/whois dumper <b>340</b> stores the file(s) on a database resident at root server <b>328</b> or another DNS server (not shown), where the file(s) are available for propagation across Internet <b>301</b>. If desired, the zone file(s) may be encrypted before being sent to the root server <b>328</b> and/or the DNS servers.</p>
<p id="p-0056" num="0055">Zone generation/whois dumper <b>340</b> also extracts data necessary for the whois feature offered by registry <b>314</b>. Whois is a service that enables registrants and potential registrants to check the availability for registration of a selected domain name. Whois also enables Internet users to identify the registrar controlling a domain name. Whois enables these checks by providing information about registered domain names, including its registrar, DNS servers, creation time, and last update time. The user may then go to the identified registrar for additional data concerning the domain name registrant. A whois query can be performed, for example, on a fully qualified domain name or an IP address.</p>
<p id="p-0057" num="0056">Zone generation/whois dumper <b>340</b> periodically (e.g., once a day) extracts data from registry database <b>322</b> so that the data may be sent to whois system <b>326</b> for use by the whois feature. In an alternative embodiment, whois data may be extracted from registry database <b>322</b> as soon as data becomes available on a real-time basis. The extracted data may include, for example, information stored in relational tables in registry database <b>322</b> pertaining to registrars, domain names, name servers, and IP addresses. After extracting data from registry database <b>322</b> and before sending this data to whois system <b>326</b>, zone generation/whois dumper <b>340</b> may validate the extracted data either locally or at validation unit <b>342</b>. Subsequently, zone generation/whois dumper <b>340</b> sends the various whois data to whois system <b>326</b> where the data is made available to registrars, registrants, and other Internet users.</p>
<p id="p-0058" num="0057">Registrar reporting unit <b>332</b> functions to periodically provide a set of reports to the registrars that have information stored at registry <b>314</b>. These reports may provide any information that may be useful to the registrars. For example, registrar reporting unit <b>332</b> may generate a report listing all domain names and name server that were transferred to other registrars since the last transfer report, a report listing all of the domain names and name servers currently registered by the registrar, or a report listing all of the domain names registered by the registrar that will expire in a predetermined time period. To produce the reports, registrar reporting unit <b>332</b> periodically extracts data relevant to various types of reports from registry database <b>322</b> and stores the data in a database resident in registrar reporting unit <b>332</b>. A report generator resident in registrar reporting unit <b>332</b> periodically generates a set of reports using data extracted from the database in registrar reporting unit <b>332</b>. The report generator subsequently sends the reports to the relevant registrars via web server <b>324</b>, which communicates directly with the registrars. Alternatively, reports may be generated on an ad-hoc basis. For example, if a registrar desires a particular type of report from registrar reporting unit <b>332</b>, the registrar may send a request for such a report to registrar reporting unit <b>332</b> where the report may be generated and returned to the registrar within a pre-specified period from the request date.</p>
<p id="p-0059" num="0058">Registry <b>314</b> provides registrars support by making customer service representatives <b>336</b> available using customer service server <b>334</b>. For example, customer service server <b>334</b> allows customer service representatives <b>336</b> to receive a registrar's status, modify domain names on behalf of the registrars, add name servers on behalf of the registrars, review a registrar's billing status, perform online payments on behalf of the registrars using credit card payments, generate reports requested by the registrars, etc. In one embodiment, customer service server <b>334</b> may comprise a web server which hosts the tools needed to implement the various aforementioned function and a server, such as a CORBA server, for sending data to and receiving data from registry database <b>322</b>. Communications between customer service center <b>334</b> and database server <b>320</b> may be implemented, for example, according to JDBC over TCP/IP protocol. Communications between customer service center <b>334</b> and customer service representatives <b>336</b> may be implemented, for example, according to HTTP (hypertext transfer protocol).</p>
<p id="p-0060" num="0059">Many of the functions provided by customer service server <b>334</b> may also implemented by the registrars themselves by accessing registrar administrative server <b>330</b> via web server <b>324</b>. Registrar administrative server <b>330</b> enables registrars to perform administrative tasks such as updating its contact information and registrar address, viewing its billing status, performing online payment, and other administrative tasks. Registrars may also be able to perform global updates utilizing registrar administrative server <b>330</b>. Communications between registrar administrative server <b>330</b> and database server <b>320</b> may be implemented, for example, according to JDBC over TCP/IP protocol. Communications between registrar administrative server <b>330</b> and web server <b>324</b> may be implemented, for example, according to DRP (Dynamo Request Protocol).</p>
<p id="p-0061" num="0060">Mail server <b>338</b> may be an electronic mail (e-mail) server that sends e-mails to registrars to notify them of important information. For example, in response to the domain transfer notification batch process executing after a registrar requests a domain transfer, database server <b>320</b> may cause an e-mail notification to be sent to the registrar via mail server <b>338</b> informing the registrar that their request is pending approval of the original registrar. Other e-mail notifications may be sent to registrars as needed.</p>
<p id="p-0062" num="0061"><figref idref="DRAWINGS">FIG. 4</figref> is a diagram showing a partially expanded view of a registrar <b>108</b> consistent with the present invention. Registrar <b>108</b> includes registrar server <b>402</b> and registrar database <b>404</b>. Registrars <b>110</b> and <b>112</b> may have an architecture that is similar or different than that described for registrar <b>108</b>. A registrant (e.g., registrant <b>102</b>) may access registrar server <b>402</b> over Internet <b>106</b>. Registrar server <b>402</b> may host the registrar's web page and is utilized by registrant <b>102</b> to purchase or manage the various options that are associated with a domain name registration system account. For example, using the various web pages resident at registrar server <b>402</b>, registrant <b>102</b> may sign up for an account, reserve or register a domain name, buy the web forwarding option, configure the web forwarding option (e.g., determine where a given web address will forward), buy electronic mail (e-mail) service, buy a single page business card, contact a customer service representation, etc.</p>
<p id="p-0063" num="0062">In one embodiment, registrar <b>108</b> may be an e-mail template-based registrar system for registering a domain name. For example, after a customer has decided to register a domain name, registrar server <b>402</b> may present the customer with a series of screens asking for certain information from the customer. This information may include the registrants's e-mail address, registrant information, contact information, and name server information. After the registrant has entered the relevant information and submitted it, registrar server <b>402</b> e-mails a template containing the information to the registrant at the aforementioned e-mail address. The registrant must verify the information included in the template before e-mailing the template back to registrar server <b>402</b>. Only after the template is e-mailed back to registrar server <b>402</b> will the request for registration be processed. Registrar server <b>402</b> sends the template to registrar database <b>404</b> for storage, after it has been determined that registration may proceed. In another embodiment, registrar <b>108</b> may be a web-based registrar system, where registrant-provided information may be processed by registrar <b>108</b> without first e-mailing a template back to the registrant.</p>
<p id="p-0064" num="0063">Registrar database <b>404</b> functions as the main database for registrar <b>108</b> and stores information related to the registration of a domain name. For example, the information provided by the registrant may be stored in registrar database <b>404</b> after it has been determined that the desired domain name does not already exist in the database. Registrar database <b>404</b> periodically attempts to move its data to registry <b>114</b> so that new domain names may be officially registered. If a domain name that originates from registration database <b>204</b> is already stored in the registry then the domain name is not valid. This may happen if a customer from a different registrar had previously registered the domain name.</p>
<p id="p-0065" num="0064">Data movement from the registrar database <b>404</b> to registry <b>114</b> occurs by utilizing RRP (registry registrar protocol). In order to utilize RRP, a registrar <b>108</b> needs to be capable of generating and sending requests in RRP. In one embodiment, registrar <b>108</b> may become capable of generating and sending RRP requests by receiving documentation, software, and/or technical support from registry <b>114</b> that is required to successfully implement RRP. Registry <b>114</b> may provide this information to registrar <b>108</b> after registrar <b>108</b> has successfully entered into an agreement with registry <b>114</b>. Subsequently, employees at registrar <b>108</b> may setup RRP by creating a program capable of generating and sending RRP requests. Such a program may be resident at registrar server <b>402</b>. Once an agreement has been made and registrar <b>108</b> has successfully setup RRP, registrar <b>108</b> may use RRP to perform various transactions with registry <b>114</b>. For example, using the RRP, a registrar <b>108</b> may register a domain name or name server, check the availability of a domain name, delete the registration of a domain name or name server, get general information about RRP, update a registered domain name or name server, close an RRP connection, re-register a domain name, authenticate an RRP connection, query a domain name or name server, or transfer a domain name from another registrar to itself.</p>
<p id="p-0066" num="0065"><figref idref="DRAWINGS">FIG. 5</figref> is a diagram showing a partially expanded view of RRP application gateway <b>206</b> consistent with the present invention. RRP application gateways <b>208</b> and <b>210</b> may have an architecture that is similar to that described for RRP application gateway <b>206</b>. RRP application gateway <b>206</b> includes memory <b>502</b>, secondary storage device <b>504</b>, I/O device <b>506</b>, and CPU <b>508</b>. RRP gateway software <b>510</b> is part of memory <b>502</b>.</p>
<p id="p-0067" num="0066">RRP gateway software <b>510</b> provides the main functionality for RRP application gateway <b>206</b>. Accordingly, RRP gateway software <b>510</b> performs the authentication and decrypting/encrypting functions associated with RRP application gateway <b>206</b>. RRP application gateway <b>206</b> receives RRP requests at I/O device <b>506</b> and passes them to CPU <b>508</b>. CPU <b>508</b> executes RRP gateway software <b>510</b> to perform the aforementioned authentication and decrypting functions before sending the RRP request to an RRP application server <b>214</b>. I/O device <b>506</b> receives responses to the RRP requests from RRP application server <b>214</b>, so that the responses may be properly processed by the RRP gateway software and forwarded to the registrar. In one embodiment, RRP gateway software may be implemented in the Java® programming language.</p>
<p id="p-0068" num="0067"><figref idref="DRAWINGS">FIG. 6</figref> is a diagram showing a partially expanded view of RRP application server <b>214</b> consistent with the present invention. RRP application servers <b>216</b> and <b>218</b> may have an architecture that is similar to that described for RRP application server <b>214</b>. RRP application server <b>214</b> includes memory <b>602</b>, secondary storage device <b>604</b>, I/O device <b>606</b>, and CPU <b>608</b>. RRP server software <b>610</b> is part of memory <b>602</b>.</p>
<p id="p-0069" num="0068">RRP server software <b>610</b> provides the main functionality for RRP application server <b>214</b>. Accordingly, RRP server software <b>610</b> executes an RRP command and causes the registry database to be changed. RRP application server <b>214</b> receives RRP requests at I/O device <b>606</b> and passes them to CPU <b>508</b>. CPU <b>508</b> executes RRP server software <b>610</b> to perform the processing associated with executing an RRP command and cause any changes to the registry database to be made. RRP server software <b>610</b> may subsequently cause an appropriate response to be forwarded to RRP application gateway <b>206</b>. In one embodiment, RRP server software <b>610</b> may be implemented in the Java® programming language.</p>
<p id="p-0070" num="0069"><figref idref="DRAWINGS">FIG. 7</figref> is a diagram showing a partially expanded view of registrar server <b>402</b> consistent with the present invention. Registrar server <b>402</b> includes memory <b>702</b>, secondary storage device <b>704</b>, I/O device <b>706</b>, and CPU <b>708</b>. RRP registrar software <b>710</b> is part of memory <b>702</b>. RRP registrar software <b>710</b> generates RRP requests (e.g., commands) and causes them to be sent to a registry <b>114</b> in the proper format. In one embodiment, RRP registrar software <b>710</b> may be implemented in the Java® programming language.</p>
<p id="p-0071" num="0070"><figref idref="DRAWINGS">FIG. 8</figref> is a diagram showing a partially expanded view of whois system <b>326</b> consistent with the present invention. Whois system <b>326</b> includes whois server <b>802</b> and whois database <b>804</b>. Whois database <b>804</b> stores data received from zone generation/whois dumper <b>340</b> in several relational tables. In one embodiment, the tables may include a registrar table, a domain table, a domain name server link table, a name server table, and an IP name server link table.</p>
<p id="p-0072" num="0071"><figref idref="DRAWINGS">FIG. 9</figref> is a diagram of the schema for whois database <b>804</b> consistent with the present invention. Each of the tables may require certain information from registry database <b>322</b>. For example, the registrar table <b>902</b> may require information from the following tables found in registry database <b>322</b>: registrar, address, registrar whois reference, registrar contact link, and registrar contact. Registrar table <b>902</b> may include the following information: registrar name, address, phone number, whois server, whois URL, admin contact, technical contact, billing contact, updated date, created date. The domain table <b>906</b> may require information from the following tables found in registry database <b>322</b>: domain and registrar. Domain table <b>906</b> may include the following information: domain name, updated date, and various data from registrar table <b>902</b>. The name server table <b>904</b> may require information from the following tables found in registry database <b>322</b>: name server and registrar. Name server table <b>904</b> may include the following information: server name, updated date, updated by, and various data from registrar table <b>902</b>. The IP name server link table <b>910</b> may require information from the IP address table found in registry database <b>322</b>. IP name server link table <b>910</b> may include the following information: IP address and various data from name server table <b>904</b>. The domain name server link table <b>908</b> may receive its information from the other tables stored in whois database <b>804</b>. Domain name server link may include the following information: various data from domain table <b>906</b> and various data from name server table <b>904</b>.</p>
<p id="p-0073" num="0072">Returning to <figref idref="DRAWINGS">FIG. 8</figref>, whois server <b>802</b> accepts queries from a whois client and retrieves the requested data from whois database <b>804</b>. A whois client may be either a registrar or an individual Internet user. In one embodiment, a whois query may be performed on a fully qualified domain name, a fully qualified host name, an IP address of a name server, or a registrar's name. For example, if a whois client sends a domain name query to whois server <b>802</b>, then whois server <b>802</b> retrieves information on the domain name from whois database <b>804</b> and returns it to the whois client. Corresponding information retrievals occur for the different types of queries.</p>
<p id="p-0074" num="0073">A whois daemon program <b>806</b> resident on whois server <b>802</b> performs the processing of queries. For example, when whois daemon <b>806</b> receives a connection from a whois client, whois daemon <b>806</b> clones itself to a whoisd program and picks up a ready to use database connection from a database connection pool. Upon receiving a database connection, the whoisd approves or disapproves the connection. If the whoisd approves the connection, then it loads and performs the query, sends the results to the whois client, and returns the connection back to the connection pool. If the whoisd does not approve of the connection for some reason, the query is rejected.</p>
<p id="p-0075" num="0074"><figref idref="DRAWINGS">FIG. 10</figref> is a diagram of the schema for registry database <b>222</b> or <b>322</b> consistent with the present invention. Country table <b>1002</b> may contain all of the two and three character country codes and their associated names. Address table <b>1004</b> may contain all of the address information for registrars and their associated contacts. Registrar contact table <b>1006</b> may contain all of the contacts for all of the registrars. Registrar contact type table <b>1008</b> may identify the different types of contacts that can be associated with a registrar. Registrar whois reference table <b>1010</b> may contain whois reference information for registrars. There are two types of references. The registrar can have a URL that points to its whois service or a host name that is running the whois service. Registrar contact link table <b>1012</b> may contain an audit history for any modifications made to the registrar contact table <b>1006</b>. Registrar table <b>1014</b> may contain information that is unique to each registrar.</p>
<p id="p-0076" num="0075">Registry session table <b>1016</b> may contain the session information for all registrars and registry users. User type table <b>1018</b> may contain descriptions of the types of users in the registry to include registrars. Registry user table <b>1020</b> may contain internal registry user information. Registry user status description table <b>1022</b> may describe the statuses that a registry user can be in. Address audit table <b>1024</b> may contain an audit history for any modifications made to the address table <b>1004</b>. Registrar contact audit <b>1026</b> may contain an audit history for any modifications made to the registrar contact table <b>1006</b>. Registrar whois reference audit table <b>1028</b> may contain an audit history for any modifications made to the registrar whois reference table. Registrar contact link audit table <b>1030</b> may contain an audit history for any modifications made to the registrar contact link table <b>1012</b>. Registrar audit table <b>1032</b> may contain an audit history for any modifications made to the registrar table <b>1014</b>. Registrar daily operations summary table <b>1034</b> may contain a daily summary of all the operations a registrar has performed. Registrar YTD operation summary table <b>1036</b> may contain a year to date summary of the operations performed by registrars.</p>
<p id="p-0077" num="0076">Product price table <b>1038</b> may contain a list of prices for products. Registrar status description table <b>1040</b> may describe the statuses that the registrar can be in. Invoice table <b>1042</b> may contain summary information of a registrar's chargeable activities for a specific period of time. Product table <b>1044</b> may contain a list of operations that have a cost associated with them. Domain audit table <b>1046</b> may contain an audit history for any modifications made to the domain table <b>1070</b>. Domain name server link audit table <b>1048</b> may contain an audit history for any modifications made to the domain name server link table <b>1074</b>. Name server audit table <b>1050</b> may contain an audit history for any modifications made to the name server table <b>1076</b>. Name server IP address link audit table <b>1052</b> may contain an audit history for any modifications made to name server IP address link table <b>1078</b>. IP address audit table <b>1054</b> may contain an audit history for any modifications made to the IP address table <b>1080</b>.</p>
<p id="p-0078" num="0077">Transaction table <b>1056</b> may link all of the audit history tables to an operation, session, and the registrar that was affected by the transaction. Invoice line item table <b>1058</b> may contain information of a registrar's chargeable activities that occurred during a specific period of time. Invoice status description table <b>1060</b> may be used as a lookup table to describe what the status of an invoice is. Operation table <b>1062</b> may contain operations that can be performed within the registry. Privilege table <b>1064</b> may be used to determine whether a specific user with a specific status entering through a specific channel can perform an operation. Channel table <b>1066</b> may be used as a lookup table to identify the channel a particular user enters into the registry system from. Authoritative TLD table <b>1068</b> may list all of the TLDs the registry is authoritative for. Domain table <b>1070</b> may contain all of the domain names that belong to the TLDs the registry is authoritative for. Domain status description table <b>1072</b> may contain the description of all allowable domain statuses. It may also determine whether the domains in a particular status are inserted into the DNS zone files. Domain name server link table <b>1074</b> may be the link between a domain and the name servers that provide name service for the domain.</p>
<p id="p-0079" num="0078">Name server table <b>1076</b> may be used to hold all of the name servers that provide name service for the domains in the domain table <b>1070</b>. Name server IP address link table <b>1078</b> may link name servers to IP addresses. IP address table <b>1080</b> may be used to hold the IP addresses for name servers. Domain status user type link table <b>1082</b> may determine whether a specific user type can modify the domains in a given status. In addition it may determine what user types can set domains to what statuses. Business target table <b>1084</b> may contain all of the business targets for the registry. A business target is an action that can be performed by a registry user. Target rule link table <b>1086</b> may link business rules to the business targets that describe them. This table also sets the sequence in which a rule will be performed on a target. Business rule table <b>1088</b> may contain all of the business rules for the registry. Business rules are used to define a business target. Multiple rules can be assigned to a target and a rule can be assigned to multiple targets. A rule can be a database, Boolean, or modifier rule. Period table <b>1090</b> may contain the default period associated with a specific parameter. Invalid IP range <b>1092</b> may be used as a lookup table to identify whether a specific IP address is within the range of invalid IP addresses. Configuration table <b>1094</b> may be used by a configuration package to store configuration parameters for the registry system.</p>
<p id="p-0080" num="0079">Other tables not explicitly shown in the database schema of <figref idref="DRAWINGS">FIG. 10</figref> may also be included in registry database <b>222</b> or <b>322</b>. For example, registry database <b>222</b> or <b>322</b> may include an e-mail template table, an e-mail queue table, an e-mail queue audit table, a domain status reason table, a domain status reason description table, a domain status reason audit table, a domain status reason link table, a domain pending transfer table, a domain pending transfer audit table, and a transaction attribute table. An e-mail template table may store various formats for different types of e-mails. An e-mail queue table may store e-mail messages to be sent to registrars. An e-mail queue audit table may store an audit history for any modifications made to the e-mail queue table. A domain status reason table may contain indications of reasons for placing domains in a particular status. A domain status reason description table may contain descriptions of the reasons indicated in the domain status reason table. A domain status reason audit table may contain an audit history for any modifications made to the domain status reason table. A domain status reason link table may link reasons to statuses. A domain pending transfer table may contain information indicative of domains that are pending transfer from one registrar to another (e.g., domain ID, request transaction ID, request registrar ID, request date, response date, notify sent, acknowledgment). A domain pending transfer audit table may contain an audit history for any modifications made to the domain pending transfer table. A transaction attribute table may contain attributes that pertain to transactions described in the transaction table.</p>
<p id="p-0081" num="0080">A more complete description of each of the tables in registry database <b>222</b> or <b>322</b> is included in Appendix A.</p>
<heading id="h-0009" level="1">Shared Registration System Operation</heading>
<p id="p-0082" num="0081"><figref idref="DRAWINGS">FIG. 11</figref> shows an exemplary flowchart of a process for generating and transmitting RRP commands (e.g., requests) in a manner consistent with the present invention. This process may be implemented, for example using RRP registrar software <b>710</b> resident on a registrar <b>108</b>, <b>110</b>, or <b>112</b>. For the purposes of discussing <figref idref="DRAWINGS">FIG. 11</figref>, it is assumed that processing occurs at registrar <b>108</b>.</p>
<p id="p-0083" num="0082">Initially, RRP registrar software <b>710</b> generates a suitable RRP command (step <b>1105</b>). In the case that an RRP connection has not yet been established with registry <b>114</b>, this command should be a command that establishes an RRP connection, such as a SESSION command. The specific RRP commands are more fully discussed in the section entitled “Registry Registrar Protocol.” In the case that an RRP connection has already been established with registry <b>114</b>, the generated command may be any RRP command. After an RRP command has been generated, RRP registrar software <b>710</b> causes the command to be encrypted using, for example, SSL protocol (step <b>1110</b>). Registrar <b>108</b> then sends the encrypted RRP command to registry <b>114</b> via Internet <b>106</b>, where the command may be processed (step <b>1115</b>).</p>
<p id="p-0084" num="0083">When registry <b>114</b> has received the RRP command and taken appropriate actions with respect to that command, it generates an encrypted response for registrar <b>108</b> that may include a response code indicating the results of the RRP command. Registrar <b>108</b> performs other tasks until it receives the encrypted response from registry <b>114</b> (step <b>1120</b>). Next, RRP registrar software <b>710</b> causes the encrypted response to be decrypted (step <b>1125</b>). Registrar <b>108</b> may perform any actions that may be necessary after receiving the response. For example, registrar <b>108</b> may re-send the RRP command if execution failed, send a different RRP command, disconnect a registrant after a predetermined number of failures, etc.</p>
<p id="p-0085" num="0084"><figref idref="DRAWINGS">FIG. 12</figref> shows an exemplary flowchart of a process for providing transport layer security for the shared registration system in a manner consistent with the present invention. This process may be implemented, for example using RRP gateway software <b>510</b> resident on RRP application gateway <b>206</b>, <b>208</b>, or <b>210</b>. For the purposes of discussing <figref idref="DRAWINGS">FIG. 12</figref>, it is assumed that processing occurs at RRP application gateway <b>206</b>.</p>
<p id="p-0086" num="0085">RRP application gateway <b>206</b> receives an encrypted data stream from a registrar attempting to perform an RRP command (step <b>1205</b>). The incoming encrypted data stream includes the RRP command that is to be executed. Upon receipt of the encrypted data, RRP application gateway <b>206</b> decrypts the data stream according to, for example, the SSL protocol (step <b>1210</b>).</p>
<p id="p-0087" num="0086">RRP application gateway <b>206</b> then attempts to authenticate the registrar that sent the encrypted data by performing SSL authentication (step <b>1215</b>). In one embodiment, the authentication may be a mutual authentication process also referred to as “SSL handshake.” For example, the registrar may be authenticated by RRP application gateway <b>206</b> based on a X.509 certificate that it presents to RRP application gateway <b>206</b> at the time of connection. RRP application gateway <b>206</b> provides the registrar with an opportunity to authenticate RRP application gateway <b>206</b> based on a certificate that RRP application gateway <b>206</b> provides to the registrar. Assuming that the mutual authentication succeeds, RRP application gateway <b>206</b> may exchange a session key with the registrar. The session key may be used to encrypt further communication between RRP application gateway <b>206</b> and the registrar.</p>
<p id="p-0088" num="0087">After RRP application gateway <b>206</b> attempts to authenticate the registrar, it determines whether or not the authentication process resulted in the registrar being declared authenticated (step <b>1220</b>). If RRP application gateway <b>206</b> determines that the registrar is not authenticated, then RRP application gateway <b>206</b> generates an encrypted response that is to be sent back to the registrar (step <b>1225</b>). This response informs the registrar that authentication has failed.</p>
<p id="p-0089" num="0088">If RRP application gateway <b>206</b> determines that the registrar is authenticated, then RRP application gateway <b>206</b> opens a dedicated connection with RRP application server <b>214</b> for the registrar. In one embodiment, connections to RRP application servers may be made according to a technique known as connection pooling. For example, because each RRP application gateway is capable of having many connection threads simultaneously, it is possible that the RRP application servers may become overwhelmed by the number of connection threads that are being maintained, causing bottlenecking. To remedy this problem, the RRP application servers process less than all of the connection threads at once. The connection threads that are not presently being processed are placed into a queue resident on the RRP application servers and are handled in turn. In that manner, the number of connections can be kept to a reasonable number. Furthermore, due to the speed with which the connections are processed, the queues are not allowed to fill up, thus improving processing times over a system that does not utilize connection pooling. Note that connection pooling may also be utilized for the connections made between the registrars and the RRP application gateways.</p>
<p id="p-0090" num="0089">After a connection has been established, RRP application gateway <b>206</b> may then send an RRP command from the data stream received from the registrar to RRP application server <b>214</b> (step <b>1230</b>). When RRP application server <b>214</b> has received the RRP command and taken appropriate actions with respect to that command, it generates a response that may include a response code indicating the results of the RRP command. RRP application gateway <b>206</b> performs other tasks until it receives the response from RRP application server <b>214</b> (step <b>1235</b>). Subsequently, the response is encrypted (step <b>1240</b>) and sent to the registrar that initiated communication (step <b>1245</b>).</p>
<p id="p-0091" num="0090"><figref idref="DRAWINGS">FIG. 13</figref> shows an exemplary flowchart of a process for receiving and executing an RRP command in a manner consistent with the present invention. This process may be implemented, for example using RRP server software <b>610</b> resident on RRP application server <b>214</b>, <b>216</b>, or <b>218</b>. For the purposes of discussing <figref idref="DRAWINGS">FIG. 13</figref>, it is assumed that processing occurs at RRP application server <b>214</b>.</p>
<p id="p-0092" num="0091">After a connection has been established, RRP application server <b>214</b> waits until it receives an RRP command from RRP application gateway <b>206</b> (step <b>1305</b>). Subsequently, RRP application server <b>214</b> parses the RRP command so that analysis of the command may be performed (step <b>1310</b>). As part of this analysis, RRP application server <b>214</b> makes a determination as to whether or not the command is valid (step <b>1315</b>). For example, a command may not be valid if the syntax of certain data fields is incorrect, the length of certain data fields is incorrect, the domain or name server is the wrong type etc. If RRP application server <b>214</b> determines that the command is not valid, then a response is sent to the registrar via RRP application gateway <b>206</b> detailing the deficiency in the command (step <b>1340</b>).</p>
<p id="p-0093" num="0092">If RRP application server <b>214</b> determines that the command is valid, then a number of business objects that may be required to execute the RRP command are instantiated (step <b>1320</b>). These objects may be instantiated in memory, such as memory <b>602</b>. There are several types of business objects that may be instantiated. For example, for a given operation, RRP application server <b>214</b> may need to instantiate domain objects, name server objects, registrar objects, business riles objects, etc. In one embodiment, the types of objects that are instantiated differ according to the RRP command that is being executed and the attributes included in the RRP command. For example, it may not be necessary to instantiate a name server object when RRP application server <b>214</b> attempts to execute an RRP command that adds a domain name. Data received from the RRP command may be included in certain objects. For example, an RRP command that adds a domain name may include attributes indicating the domain name to be added to the registry database and the name server(s) of the domain name. These attributes may be inserted into an instantiated domain object along with attributes that may need to be generated each time a domain name is added (e.g., created date, updated date, registrar, etc.). Business rules objects correspond to business policy-related information that may be applied to the RRP command to ensure that operations go according to present business policy.</p>
<p id="p-0094" num="0093">It may be necessary for RRP application server <b>214</b> to retrieve information from registry database <b>222</b> in order to perform certain RRP commands. For example, RRP application server <b>214</b> may retrieve information that corresponds to a domain name in the case that a registrar sends a RRP command for updating an existing domain. This information may then be inserted into an appropriate object for processing.</p>
<p id="p-0095" num="0094">RRP application server <b>214</b> next makes a determination whether or not the registrar that sent the RRP command is authorized to perform the action that results from the RRP command (step <b>1325</b>). For example, a registrar may not be authorized to perform a particular action if the registrar does not own the domain referred to in the RRP command. If the registrar is determined not to be authorized, then a response may be sent back to the registrar providing an indication to that effect (step <b>1340</b>).</p>
<p id="p-0096" num="0095">If the registrar is determined to be authorized, then RRP application server <b>214</b> applies business rules to the RRP command (step <b>1330</b>). Application of the business rules may be accomplished by using the business rule objects that were previously instantiated. Business rules may exist to check and set a variety of attributes to ensure that all RRP commands are executed according to registry policy. For example, there may be a rule for checking the credit of the registrar, a rule for setting the registration period, a rule for checking the domain status, a rule for checking the existence of a parent domain, a rule for checking the authorization of the registrar, etc. These rules may change according to the policy of the business that owns registry <b>114</b>. Note that one of the aforementioned rules checks the authorization of the registrar, indicating that the previous check to determine whether a registrar is authorized to perform an action (step <b>1325</b>) may alternatively be implemented as an application of a business rule. In one embodiment, each RRP command may have a different set of business rules that are applied when the RRP command is executed (e.g., a RRP command adding a domain name has a different set of rules than an RRP command transferring a domain name).</p>
<p id="p-0097" num="0096">Once the business rules have been applied, RRP application server <b>214</b> proceeds to execute the RRP command and store any changes necessitated by the RRP command in registry database <b>222</b> (step <b>1335</b>). Changes include any insertions, updates, or deletions to the tables stored in registry database <b>222</b>. In one embodiment, RRP application server <b>214</b> may attempt to implement these changes by sending the relevant business objects or information from these objects to registry database <b>222</b> through database server <b>220</b> along with an indication as to how the database should be changed or accessed. The information from the objects may be inserted into various tables in registry database <b>222</b>, or the objects themselves may be inserted into the registry database <b>222</b>. Implicit in the changes made to registry database <b>222</b> may be certain checks that are necessary to complete some operations. For example, when a RRP command for adding a domain name is executed, there is an implicit check to determine whether or not the domain name has already been registered by another registrar.</p>
<p id="p-0098" num="0097">Database server <b>220</b> includes functionality that handles any possible schema contentions. A schema contention may occur, for example, when multiple connection threads attempt to access the same table at substantially the same time. One manner in which these contentions are handled is by giving certain transactions priority over others. For example, real-time transactions could be given priority over non-real time transactions. Another technique is to designate tables as locked or held when they are currently being accessed or have a transaction pending.</p>
<p id="p-0099" num="0098">Database server <b>220</b> may send RRP application server <b>214</b> an indication of the result of the attempted changes to registry database <b>222</b>. Upon learning this result, RRP application server <b>214</b> sends a response indicative of the result to the registrar that initiated communication via RRP application gateway <b>206</b> (step <b>1340</b>). Examples of responses include an indication that the command was completed successfully and an indication that the domain that was attempted to be accessed does not exist. In the case that the RRP command was primarily intended to retrieve or check information from the registry database (e.g., STATUS command, CHECK command), the response may include the requested information. A more complete sampling of possible responses to a registrar is included below in the section entitled “Registry Registrar Protocol.”</p>
<p id="p-0100" num="0099"><figref idref="DRAWINGS">FIG. 14</figref> shows a diagram of a simple interaction between a registrar and a registry consistent with the present invention. Registrar server <b>1405</b> initiates the operation by sending RRP application gateway <b>1410</b> an encrypted RRP command. After decrypting the command, performing SSL authentication, and ensuring that the registrar that controls registrar server <b>1405</b> is authenticated, RRP application gateway <b>1410</b> sends a decrypted RRP command to RRP application server <b>1415</b>. RRP application server <b>1415</b> parses the command, checks the validity of the command, instantiates any business objects that are needed for the command, ensures that the registrar is authorized to perform the required actions, and applies any relevant business rules to the command. Subsequently, RRP application server <b>1415</b> accesses the registry database <b>1420</b> in order to make any necessary changes in light of the RRP command. When the changes are made at registry database <b>1420</b>, the database and its database server send a result set to RRP application server <b>1415</b> indicating the result of the attempted changes. RRP application server <b>1415</b> uses the result set information to generate a response to the registrar and sends a plain text response to RRP application gateway <b>1410</b>. Thereafter, RRP application gateway <b>1410</b> encrypts the response and sends it to registrar server <b>1405</b>.</p>
<heading id="h-0010" level="1">Registry Registrar Protocol</heading>
<p id="h-0011" num="0000">1. Data Model</p>
<p id="p-0101" num="0100">The registry registrar protocol (RRP) defines two entities to represent the system data, domain and name server. In one embodiment, the domain and name server entities may correspond to domain objects and name server objects. <figref idref="DRAWINGS">FIG. 15</figref> shows an example of the domain and name server entities consistent with the present invention.</p>
<p id="h-0012" num="0000">1.1 Domain Entity</p>
<p id="p-0102" num="0101">The domain entity holds information about a registered domain name including the attributes described below.</p>
<p id="p-0103" num="0102">
<tables id="TABLE-US-00001" num="00001">
<table frame="none" colsep="0" rowsep="0" pgwide="1">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="84pt" align="left"/>
<colspec colname="2" colwidth="196pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>Domain Name</entry>
<entry>The fully qualified domain name of the registered domain name. It</entry>
</row>
<row>
<entry/>
<entry>is the unique key for this entity.</entry>
</row>
<row>
<entry>Name Server</entry>
<entry>The fully qualified host name of the domain's name server.</entry>
</row>
<row>
<entry>Registrar</entry>
<entry>The name of the current registrar of the domain name. It is an</entry>
</row>
<row>
<entry/>
<entry>implicit attribute.</entry>
</row>
<row>
<entry>Registrar Transfer Date</entry>
<entry>The date the domain name was transferred to the current registrar.</entry>
</row>
<row>
<entry/>
<entry>It is an implicit attribute.</entry>
</row>
<row>
<entry>Registration Period</entry>
<entry>The time period that registration lasts.</entry>
</row>
<row>
<entry>RegistrationExpirationDate</entry>
<entry>The date on which the registration of the domain name expires and</entry>
</row>
<row>
<entry/>
<entry>the domain name becomes available for registration by any</entry>
</row>
<row>
<entry/>
<entry>registrar after a specified hold period. This is a derived attribute.</entry>
</row>
<row>
<entry>Status</entry>
<entry>The status of the domain name.</entry>
</row>
<row>
<entry>Created Date</entry>
<entry>The date the domain name was registered. It is an implicit</entry>
</row>
<row>
<entry/>
<entry>attribute.</entry>
</row>
<row>
<entry>Created By</entry>
<entry>The ID of the authorized entity that registered the domain name. It</entry>
</row>
<row>
<entry/>
<entry>is an implicit attribute.</entry>
</row>
<row>
<entry>Updated Date</entry>
<entry>The date the domain name was last updated. It is an implicit</entry>
</row>
<row>
<entry/>
<entry>attribute.</entry>
</row>
<row>
<entry>Updated By</entry>
<entry>The ID of the authorized entity that last updated the domain name.</entry>
</row>
<row>
<entry/>
<entry>It is an implicit attribute.</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
<br/>
1.2 Name Server Entity
</p>
<p id="p-0104" num="0103">The name server entity holds information about a name server including the attributes described below.</p>
<p id="p-0105" num="0104">
<tables id="TABLE-US-00002" num="00002">
<table frame="none" colsep="0" rowsep="0" pgwide="1">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="77pt" align="left"/>
<colspec colname="2" colwidth="189pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>Name Server</entry>
<entry>The fully qualified host name of the domain's name server. It is</entry>
</row>
<row>
<entry/>
<entry>the unique key for this entity.</entry>
</row>
<row>
<entry>IP Address</entry>
<entry>An IP address for the name server.</entry>
</row>
<row>
<entry>Registrar</entry>
<entry>The name of the current registrar of the name server. It is an</entry>
</row>
<row>
<entry/>
<entry>implicit attribute.</entry>
</row>
<row>
<entry>Registrar Transfer Date</entry>
<entry>The date the name server was transferred to the current registrar.</entry>
</row>
<row>
<entry/>
<entry>It is an implicit attribute.</entry>
</row>
<row>
<entry>Created Date</entry>
<entry>The date the name server was registered. It is an implicit</entry>
</row>
<row>
<entry/>
<entry>attribute.</entry>
</row>
<row>
<entry>Created By</entry>
<entry>The ID of the authorized entity that registered the name server. It</entry>
</row>
<row>
<entry/>
<entry>is an implicit attribute.</entry>
</row>
<row>
<entry>Updated Date</entry>
<entry>The date the name server was last updated. It is an implicit</entry>
</row>
<row>
<entry/>
<entry>attribute.</entry>
</row>
<row>
<entry>Updated By</entry>
<entry>The ID of the authorized entity that last updated the name server.</entry>
</row>
<row>
<entry/>
<entry>It is an implicit attribute.</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
<br/>
2. Protocol
</p>
<p id="p-0106" num="0105">Generally, all RRP commands may include features to ensure that the effect of each command is the same if the command is executed once or if the command is executed multiple times. This property is extremely useful in situations when a command is retried due to an error condition that results in a missed command response and a command retry is attempted. Command retries will be caught by the system and rejected with an appropriate error response code.</p>
<p id="p-0107" num="0106">A typical RRP session will go through a number of states. <figref idref="DRAWINGS">FIG. 16</figref> is a diagram showing the possible states of an RRP session consistent with the present invention. Initially, the system (e.g., registry) waits for a client connection (<b>1605</b>). When a client connects, the system attempts to authenticate the client (e.g., registrar). If the authentication fails, the system gives the client another chance to identify itself (<b>1615</b>). If the authentication fails again, the system disconnects (<b>1625</b>). Otherwise, the system waits for a request (e.g., RRP command) from the client (<b>1610</b>). Upon receiving a request, the system executes it and responds to the client with the result (<b>1620</b>). The system then waits again for another request from the client (<b>1610</b>). If the client sends a “quit” command, the system ends the session and disconnects (<b>1625</b>). To keep its state in sync with that of the server, the client should wait for a response from the server before sending another request on the same connections. Note that states <b>1605</b>, <b>1610</b>, and <b>1615</b> may timeout after a pre-defined period of inactivity. The system disconnects in response to a timeout.</p>
<p id="h-0013" num="0000">2.1 Request Format</p>
<p id="p-0108" num="0107">An RRP request includes a command name, some command options, an entity block, and an end-of-command delimiter. Command options and entity blocks collectively define command parameters and are order independent. The command options and the entity block are optional. Below is an example of the format of an RRP request.</p>
<p id="p-0109" num="0108">
<tables id="TABLE-US-00003" num="00003">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="4">
<colspec colname="1" colwidth="42pt" align="left"/>
<colspec colname="2" colwidth="63pt" align="left"/>
<colspec colname="3" colwidth="49pt" align="left"/>
<colspec colname="4" colwidth="63pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="4" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>Command</entry>
<entry>[Command Options]</entry>
<entry>[Entity Block]</entry>
<entry>End-Of-Command</entry>
</row>
<row>
<entry>Name</entry>
<entry/>
<entry/>
<entry>Delimiter</entry>
</row>
<row>
<entry namest="1" nameend="4" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
<br/>
2.1.1 Command Name
</p>
<p id="p-0110" num="0109">A command name specifies the type of an RRP request. A command name may be a word or abbreviation terminated by a carriage-return linefeed (crlf) sequence. Below is an example of the format of a command name.</p>
<p id="p-0111" num="0110">
<tables id="TABLE-US-00004" num="00004">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="offset" colwidth="49pt" align="left"/>
<colspec colname="1" colwidth="105pt" align="left"/>
<colspec colname="2" colwidth="63pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="2" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>Command Name</entry>
<entry>crlf</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
<br/>
2.1.2 Command Option
</p>
<p id="p-0112" num="0111">A command option specifies a control parameter for an RRP request. A command option starts with a hyphen, followed by the option name, a colon, the option value, and terminated by a crlf sequence. Below is an example of the format of a command option.</p>
<p id="p-0113" num="0112">
<tables id="TABLE-US-00005" num="00005">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="6">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="14pt" align="left"/>
<colspec colname="2" colwidth="77pt" align="left"/>
<colspec colname="3" colwidth="14pt" align="left"/>
<colspec colname="4" colwidth="77pt" align="left"/>
<colspec colname="5" colwidth="21pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="5" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>-</entry>
<entry>command option name</entry>
<entry>:</entry>
<entry>command option value</entry>
<entry>crlf</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="5" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
<br/>
2.1.3 Entity Block
</p>
<p id="p-0114" num="0113">An entity block specifies the data in an RRP request. It includes attribute-value pairs specifying the entity (e.g., domain or name server) and all of the attributes of the entity. Each attribute-value pair starts with the attribute name, followed by a colon, the attribute value, and finally terminated by a crlf sequence. Below is an example of the format of an entity block.</p>
<p id="p-0115" num="0114">
<tables id="TABLE-US-00006" num="00006">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="9">
<colspec colname="1" colwidth="42pt" align="left"/>
<colspec colname="2" colwidth="7pt" align="left"/>
<colspec colname="3" colwidth="42pt" align="left"/>
<colspec colname="4" colwidth="14pt" align="left"/>
<colspec colname="5" colwidth="28pt" align="left"/>
<colspec colname="6" colwidth="7pt" align="left"/>
<colspec colname="7" colwidth="49pt" align="left"/>
<colspec colname="8" colwidth="14pt" align="left"/>
<colspec colname="9" colwidth="14pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="9" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>entity name</entry>
<entry>:</entry>
<entry>entity value</entry>
<entry>crlf</entry>
<entry>attribute</entry>
<entry>:</entry>
<entry>attribute value</entry>
<entry>crlf</entry>
<entry>. . .</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry/>
<entry>name</entry>
<entry/>
<entry/>
<entry/>
<entry/>
</row>
<row>
<entry namest="1" nameend="9" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
<br/>
2.1.4 End-Of-Command Delimiter
</p>
<p id="p-0116" num="0115">An end-of-command delimiter specifics the end of an RRP request. It is a period followed by a crlf sequence.</p>
<p id="h-0014" num="0000">2.2 Response Format</p>
<p id="p-0117" num="0116">An RRP response starts with a response code, followed by a space, an ASCII text description of the response, a crlf sequence, and zero or more attribute-value pair lines. An RRP response is terminated by a dot in column one followed by a crlf sequence. Below is an example of the response format.</p>
<p id="p-0118" num="0117">
<tables id="TABLE-US-00007" num="00007">
<table frame="none" colsep="0" rowsep="0" pgwide="1">
<tgroup align="left" colsep="0" rowsep="0" cols="10">
<colspec colname="1" colwidth="49pt" align="left"/>
<colspec colname="2" colwidth="21pt" align="left"/>
<colspec colname="3" colwidth="63pt" align="left"/>
<colspec colname="4" colwidth="14pt" align="left"/>
<colspec colname="5" colwidth="49pt" align="left"/>
<colspec colname="6" colwidth="7pt" align="left"/>
<colspec colname="7" colwidth="49pt" align="left"/>
<colspec colname="8" colwidth="14pt" align="left"/>
<colspec colname="9" colwidth="14pt" align="left"/>
<colspec colname="10" colwidth="14pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="10" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>response code</entry>
<entry>space</entry>
<entry>response description</entry>
<entry>crlf</entry>
<entry>attribute name</entry>
<entry>:</entry>
<entry>attribute value</entry>
<entry>crlf</entry>
<entry>. . .</entry>
<entry>crlf</entry>
</row>
<row>
<entry namest="1" nameend="10" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
<br/>
2.3 Commands
</p>
<p id="p-0119" num="0118">The commands provided by the RRP follow.</p>
<p id="h-0015" num="0000">2.3.1 Add</p>
<p id="p-0120" num="0119">This command enables a registrar to register a domain name or a name server on behalf of a registrant.</p>
<p id="p-0121" num="0120">A request to register a domain name must contain the following data: the entity name attribute set to the value “domain,” a fully qualified domain name in the domain name attribute, and fully qualified host names of two or more (up to 13) name servers hosting the domain name in multiple instances of the name server attribute. If the domain name is successfully registered, the registry may successfully return the domain's registration expiration date in the registration expiration data attribute in the response.</p>
<p id="p-0122" num="0121">A request to register a name server must contain the following data: the entity name attribute set to the value “name server,” a fully qualified host name of the name server in the name server attribute, and one or more IP address of the name server in multiple instances of the IP address attribute.</p>
<p id="p-0123" num="0122">In one embodiment, an ADD command for registering a domain name may affect, for example, the following registry database tables: the domain table, the domain status table, the domain status reason table, the transaction table, the transaction attribute table, the registrar table, the domain name server link table, and the various audit tables that are associated with the aforementioned tables. An ADD command for registering a name server may affect, for example, the following registry database table: the name server table, the IP address table, the name server IP address link table, the transaction table, the transaction attribute table, and the various audit tables that are associated with the aforementioned tables.</p>
<p id="p-0124" num="0123">Authorized User: all registrars may use the ADD command to register a domain name or name server.</p>
<p id="h-0016" num="0000">2.3.2 Check</p>
<p id="p-0125" num="0124">This command enables a registrar to determine if a domain name or name server has been registered.</p>
<p id="p-0126" num="0125">A request to check the availability of a domain name must contain the following data: the entity name attribute set to the value “domain,” and a fully qualified domain name in the domain name attribute. The registry responds positively or negatively about the availability of the name server.</p>
<p id="p-0127" num="0126">A request to determine if a name server has been registered must contain the following data: the entity name attribute set to the value “name server” and a fully qualified host name of the name server in the name server attribute. The registry responds positively or negatively about the availability of the name server. If the name server has been registered the registry returns the IP address(es) of the name server.</p>
<p id="p-0128" num="0127">In one embodiment, a CHECK command may access the domain table or the name server table in the registry database dependent on whether the registrar desires to determine the availability of a domain name or name server.</p>
<p id="p-0129" num="0128">Authorized User: all registrars may use the CHECK command to determine if a domain name or name server has been registered.</p>
<p id="h-0017" num="0000">2.3.3 Del</p>
<p id="p-0130" num="0129">This command enables a registrar to delete the registration of a domain name or delete a name server.</p>
<p id="p-0131" num="0130">A request to delete the registration of a domain name must contain the following data: the entity name attribute set to the value “domain,” and a fully qualified domain name in the domain name attribute. A request to delete a domain name may cause the deletion of all name servers that are children of the domain being deleted.</p>
<p id="p-0132" num="0131">A request to delete a name server must contain the following data: the entity name attribute set to the value “name server” and a fully qualified host name of the name server in the name server attribute. Deletions of name servers are not allowed if domain names are currently host on it because such deletions will result in orphaning the host domains.</p>
<p id="p-0133" num="0132">In one embodiment, a DEL command for deleting a domain name may affect, for example, the following registry database tables: the domain table, the domain status table, the domain status reason table, the transaction table, the transaction attribute table, the registrar table, the domain name server link table, and the various audit tables that are associated with the aforementioned tables. A DEL command for deleting a name server may affect, for example, the following registry database table: the name server table, the IP address table, the name server IP address link table, the transaction table, the transaction attribute table, and the various audit tables that are associated with the aforementioned tables.</p>
<p id="p-0134" num="0133">Authorized User: the current registrar of a domain name or name server and the registry may use the DEL command to delete a domain name or name server.</p>
<p id="h-0018" num="0000">2.3.4 Describe</p>
<p id="p-0135" num="0134">This command enables a registrar to get general information about RRP.</p>
<p id="p-0136" num="0135">A request to get general information about RRP may contain the following command options: the target option set to value “protocol” to get the protocol version number. The registry, by default, must return the protocol version number, regardless of whether the request contains the target option. In one embodiment, this command does not affect any of the registry database tables.</p>
<p id="p-0137" num="0136">Authorized User: all registrars may use the DESCRIBE command.</p>
<p id="h-0019" num="0000">2.3.5 Mod</p>
<p id="p-0138" num="0137">This command enables a registrar to update a registered domain name or name server. The command allows the following operations on an attribute value for both single-valued and multiple-valued attributes:
<ul id="ul0001" list-style="none">
    <li id="ul0001-0001" num="0000">
    <ul id="ul0002" list-style="none">
        <li id="ul0002-0001" num="0138">Add an attribute value. The value to be added must be unique among the values of the attribute. For a single-valued attribute, it replaces the current value.</li>
        <li id="ul0002-0002" num="0139">Remove an attribute value. The value to be removed must exist. Further, an attribute value cannot be removed if it is the only value of a required attribute.</li>
        <li id="ul0002-0003" num="0140">Replace an attribute value. The value to be replace must exist and the replacing value must be unique among the values of the attribute.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0139" num="0141">A request to update a registered domain name must contain the following data: the entity name attribute set to the value “domain,” and a fully qualified domain name in the domain name attribute. The registrar may perform the following update operations on the domain name: update the name servers of the domain name by setting one or more instances of the name server attribute, and update the status of the domain name by setting one or more instance of the status attribute.</p>
<p id="p-0140" num="0142">A request to update a name server must contain the following data: the entity name attribute set to the value “name server” and a fully qualified host name of the name server in the name server attribute. The registrar may perform the following update operations on the name server: update the name server attribute of the name server, and update the IP address of the name server by setting one or more instances of the IP address parameter.</p>
<p id="p-0141" num="0143">In one embodiment, a MOD command for updating a domain name may affect, for example, the following registry database tables: the domain table, the domain status table, the domain status reason table, the transaction table, the transaction attribute table, the domain name server link table, and the various audit tables that are associated with the aforementioned tables. A MOD command for updating a name server may affect, for example, the following registry database table: the name server table, the IP address table, the name server IP address link table, the transaction table, the transaction attribute table, and the various audit tables that are associated with the aforementioned tables.</p>
<p id="p-0142" num="0144">Authorized User: the current registrar of a domain name or name server and the registry may use the MOD command to modify the attributes of the domain name or name server.</p>
<p id="h-0020" num="0000">2.3.6 Quit</p>
<p id="p-0143" num="0145">This command enables a registrar to close an RRP connection. The registry must respond before closing the connection.</p>
<p id="p-0144" num="0146">In one embodiment, a QUIT command may affect the registry session table in the registry database.</p>
<p id="p-0145" num="0147">Authorized User: all registrars are allowed to use the QUIT command.</p>
<p id="h-0021" num="0000">2.3.7 Renew</p>
<p id="p-0146" num="0148">This command enables a registrar to re-register a domain name.</p>
<p id="p-0147" num="0149">A request to re-register a domain name must contain the following data: the entity name attribute set to the value “domain,” and a fully qualified domain name in the domain name attribute.</p>
<p id="p-0148" num="0150">The request to renew a domain name may contain a renewal period for the domain being renewed in a single instance of a period attribute and a single instance of a current expiration year attribute. These parameters must appear together if either is specified. The period attribute identifies the number of years to be added to the registration. The current expiration year attribute identifies the current expiration year and is required to ensure that repeated attempts to retry this command do not result in multiple successful renewals. If these attributes are not provided, the registry provides a default value for the period attribute and current expiration year attribute. If the domain name renewal is successfully completed, the registry returns the new registration expiration data in the appropriate attribute.</p>
<p id="p-0149" num="0151">In one embodiment, a RENEW command may affect, for example, the following registry database tables: the domain table, the transaction table, the transaction attribute table, the registrar table, and the various audit tables that are associated with the aforementioned tables.</p>
<p id="p-0150" num="0152">Authorized User: the current registrar of a domain name may use the RENEW command.</p>
<p id="h-0022" num="0000">2.3.8 Session</p>
<p id="p-0151" num="0153">This command enables a registrar to authenticate a RRP connection. A registrar can also use this command to change its password. The registrar must send this request before any other request to the registry.</p>
<p id="p-0152" num="0154">A request to authenticate an RRP connection must contain the following command options: the ID of the registrar in the ID option, and the password of the registrar in the password option. If the authentication fails, the registrar may re-send the request with corrected information. If the authentication fails a predetermined number of time, the registry closes the connection.</p>
<p id="p-0153" num="0155">In one embodiment, a SESSION command may affect the registry session table in the registry database.</p>
<p id="p-0154" num="0156">Authorized User: all registrars are allowed to use the SESSION command.</p>
<p id="h-0023" num="0000">2.3.9 Status</p>
<p id="p-0155" num="0157">This command allows a registrar to determine the current status of a domain name or name server.</p>
<p id="p-0156" num="0158">A request to query a domain name must contain the following data: the entity name attribute set to the value “domain,” and a fully qualified domain name in the domain name attribute. The response from the registry may contain a variety of information, including the following: fully qualified server names of name servers hosting the domain name, registration expiration date, ID of the current registrar of the domain name, date the domain name was transferred by the current registrar, current statuses of the domain name, date the domain name was originally registered, ID of the registrar that originally registered the domain name, date the domain name was last updated, and ID of the entity (e.g., registrar or registry) that last updated the domain name.</p>
<p id="p-0157" num="0159">A request to query a name server must contain the following data: the entity name attribute set to the value “name server” and a fully qualified host name of the name server in the name server attribute. The response from the registry may contain a variety of information, including the following: fully qualified name of the name server, IP addresses of the name server, ID of the current registrar of the name server, date the name server was transferred by the current registrar, date the name server registered, ID of the entity that registered the name server, date the name server was last updated, and ID of the entity (e.g., registrar or registry) that last updated the name server.</p>
<p id="p-0158" num="0160">In one embodiment, a STATUS command may access the domain table or the name server table in the registry database dependent on whether the registrar desires to determine the current status of a domain name or a name server.</p>
<p id="p-0159" num="0161">Authorized User: the current registrar of a domain name or name server and the registry may use the STATUS command to view current domain name or name server attributes.</p>
<p id="h-0024" num="0000">2.3.10 Transfer</p>
<p id="p-0160" num="0162">This command allows a registrar to request transfer of domain name sponsorship from a second registrar and to approve or reject transfer requests initiated by other registrars.</p>
<p id="p-0161" num="0163">A request to transfer a domain name must include the following data: the entity name attribute set to the value “domain,” and a fully qualified domain name in the domain name attribute.</p>
<p id="p-0162" num="0164">The identity of the requesting registrar is derived from the current active session. The identity if the current sponsoring registrar (the registrar that must approve or reject the transfer request) is known by the registry and does not need to be known by the requesting registrar in advance of issuing the transfer request.</p>
<p id="p-0163" num="0165">The system notifies the potential losing registrar when a domain transfer request has been received using an out-of-band transport such as e-mail and/or transaction reporting. The losing registrar should then approve or reject the transfer. A request to approve or reject a transfer must include an indication of the approval or the rejection. A default approval may be provided if the losing registrar does not approve or reject within a predetermined amount of time.</p>
<p id="p-0164" num="0166">Approval of a transfer by the current sponsoring registrar results in a change of sponsorship to the original requesting registrar. Approval attempts by any other registrar results in failure of the attempted approval. Rejection of the transfer results in an end to the transfer request with no change in sponsorship. Rejection attempts by any other registrar results in a failure of the attempted rejection. Name servers are implicitly transferred when their parent domain name is transferred.</p>
<p id="p-0165" num="0167">In one embodiment, a TRANSFER command may affect, for example, the following registry database tables: the domain table, the domain pending transfer table, the transaction table, the transaction attribute table, the registrar table, the e-mail queue table, and the various audit tables that are associated with the aforementioned tables.</p>
<p id="p-0166" num="0168">Authorized User: All registrars may use the TRANSFER command to request transfer of registration service authority to the requesting registrar. The current sponsoring registrar of a domain name may approve or reject a requested transfer. The registry may implicitly approve or reject requested transfers after a fixed amount of time.</p>
<p id="h-0025" num="0000">2.4 Response Codes</p>
<p id="p-0167" num="0169">RRP commands may return a variety of response codes to signify normal completion or error condition. A list of possible error codes follows.</p>
<p id="p-0168" num="0170">
<tables id="TABLE-US-00008" num="00008">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="21pt" align="left"/>
<colspec colname="2" colwidth="196pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>200</entry>
<entry>command completed successfully</entry>
</row>
<row>
<entry>210</entry>
<entry>domain name available</entry>
</row>
<row>
<entry>211</entry>
<entry>domain name not available</entry>
</row>
<row>
<entry>212</entry>
<entry>name server name available</entry>
</row>
<row>
<entry>213</entry>
<entry>name server name not available</entry>
</row>
<row>
<entry>220</entry>
<entry>command completed successfully. server closing connection</entry>
</row>
<row>
<entry>420</entry>
<entry>command failed due to server error. server closing connection</entry>
</row>
<row>
<entry>421</entry>
<entry>command failed due to server error. client should try again</entry>
</row>
<row>
<entry>500</entry>
<entry>invalid command name</entry>
</row>
<row>
<entry>501</entry>
<entry>invalid command option</entry>
</row>
<row>
<entry>502</entry>
<entry>invalid entity value</entry>
</row>
<row>
<entry>503</entry>
<entry>invalid attribute name</entry>
</row>
<row>
<entry>504</entry>
<entry>missing required attribute</entry>
</row>
<row>
<entry>505</entry>
<entry>invalid attribute value syntax</entry>
</row>
<row>
<entry>506</entry>
<entry>invalid option value</entry>
</row>
<row>
<entry>507</entry>
<entry>invalid command format</entry>
</row>
<row>
<entry>508</entry>
<entry>missing required entity</entry>
</row>
<row>
<entry>509</entry>
<entry>missing command option</entry>
</row>
<row>
<entry>520</entry>
<entry>server closing connection</entry>
</row>
<row>
<entry>521</entry>
<entry>too many session open. server closing connection</entry>
</row>
<row>
<entry>530</entry>
<entry>authentication failed</entry>
</row>
<row>
<entry>531</entry>
<entry>authorization failed</entry>
</row>
<row>
<entry>532</entry>
<entry>domain names linked with name server</entry>
</row>
<row>
<entry>533</entry>
<entry>domain name has active name servers</entry>
</row>
<row>
<entry>534</entry>
<entry>domain name has not been flagged for transfer</entry>
</row>
<row>
<entry>535</entry>
<entry>restricted IP address</entry>
</row>
<row>
<entry>536</entry>
<entry>domain already flagged for transfer</entry>
</row>
<row>
<entry>540</entry>
<entry>attribute value is not unique</entry>
</row>
<row>
<entry>541</entry>
<entry>invalid attribute value</entry>
</row>
<row>
<entry>542</entry>
<entry>invalid old value for an attribute</entry>
</row>
<row>
<entry>543</entry>
<entry>final or implicit attribute cannot be updated</entry>
</row>
<row>
<entry>544</entry>
<entry>entity on hold</entry>
</row>
<row>
<entry>545</entry>
<entry>entity reference not found</entry>
</row>
<row>
<entry>546</entry>
<entry>credit limit exceeeded</entry>
</row>
<row>
<entry>547</entry>
<entry>invalid command sequence</entry>
</row>
<row>
<entry>548</entry>
<entry>domain is not up for renewal</entry>
</row>
<row>
<entry>549</entry>
<entry>command failed</entry>
</row>
<row>
<entry>550</entry>
<entry>parent domain not registered</entry>
</row>
<row>
<entry>551</entry>
<entry>parent domain status does not allow for operation</entry>
</row>
<row>
<entry>552</entry>
<entry>domain status does not allow for operation</entry>
</row>
<row>
<entry>553</entry>
<entry>operation not allow. domain pending transfer</entry>
</row>
<row>
<entry>554</entry>
<entry>domain already registered</entry>
</row>
<row>
<entry>555</entry>
<entry>domain already renewed</entry>
</row>
<row>
<entry>556</entry>
<entry>maximum registration period exceeded</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
<br/>
2.5 Status Codes
</p>
<p id="p-0169" num="0171">The status of a domain can be viewed using the RRP STATUS command and modified using the RRP MOD command. Both the registry and the sponsoring registrar may view and change the status of a domain. A domain's status should have a direct bearing on whether or not the domain appears in the appropriate TLD zone file and whether or not the domain can be modified. A domain can have more than one assigned status, e.g., REGISTRAR HOLD and REGISTRAR-LOCK. If a domain is in ACTIVE status, then the domain name can only be in this status. When a registrar sets a domain name to REGISTRAR-LOCK, the registry automatically removes the ACTIVE status. When the registrar removes the REGISTRAR-LOCK and other domain statuses, the registry automatically sets the domain name status to ACTIVE.</p>
<p id="p-0170" num="0172">A description of the different status codes follows.</p>
<p id="p-0171" num="0173">ACTIVE: This is the default status of a domain at registration time. The registry sets the domain to this status. The domain is modifiable by the registrar and can be renewed. The domain is included in the zone file when in this status if the domain has an associated name server.</p>
<p id="p-0172" num="0174">REGISTRY-LOCK: The registry sets the domain to this status. The domain cannot be modified or deleted by the registrar. The registry must remove this status for the registrar to modify the domain. The domain can be renewed. The domain is included in the zone file when in this status if the domain has an associated name server.</p>
<p id="p-0173" num="0175">REGISTRY-HOLD: The registry sets the domain to this status. The domain cannot be modified or deleted by the registrar. The registry must remove this status for the registrar to modify the domain. The domain can be renewed. The domain is not included in the zone file when in this status.</p>
<p id="p-0174" num="0176">REGISTRAR-HOLD: The registrar of the domain sets the domain to this status. The domain cannot be modified or deleted when in this status. The registrar must remove this status to modify the domain. The domain can be renewed. The domain is not included in the zone file when in this status.</p>
<p id="p-0175" num="0177">REGISTRAR-LOCK: The registrar of the domain sets the domain to this status. The domain cannot be modified or deleted when in this status. The registrar must remove this status to modify the domain. The domain can be renewed. The domain is included in the zone file when in this status.</p>
<p id="p-0176" num="0178">REGISTRY-DELETE-NOTIFY: A domain is set on this status if it has expired and has child name servers that are hosting other domains. Only the registry may set this status. The domain is included in the zone file when in this status if the domain has at least one associated name server.</p>
<p id="h-0026" num="0000">3. Example Session</p>
<p id="p-0177" num="0179">A typical session between an RRP client (e.g., registrar) and an RRP server (e.g., registry) follows (registry responses are presented in italics).</p>
<p id="h-0027" num="0000">A registrar initially authenticates an RRP connection.</p>
<p id="p-0178" num="0180">
<tables id="TABLE-US-00009" num="00009">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="56pt" align="left"/>
<colspec colname="1" colwidth="161pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>session</entry>
</row>
<row>
<entry/>
<entry>-Id:registrarA</entry>
</row>
<row>
<entry/>
<entry>-Password:--am-registrarA</entry>
</row>
<row>
<entry/>
<entry>.</entry>
</row>
<row>
<entry/>
<entry>200 command completed successfully</entry>
</row>
<row>
<entry/>
<entry>.</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
<br/>
The registrar checks the availability of a domain name in the registry.
</p>
<p id="p-0179" num="0181">
<tables id="TABLE-US-00010" num="00010">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="63pt" align="left"/>
<colspec colname="1" colwidth="154pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>check</entry>
</row>
<row>
<entry/>
<entry>Entity Name:Domain</entry>
</row>
<row>
<entry/>
<entry>Domain Name:example.com</entry>
</row>
<row>
<entry/>
<entry>.</entry>
</row>
<row>
<entry/>
<entry>210 domain name available</entry>
</row>
<row>
<entry/>
<entry>.</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
<br/>
The registrar registers the domain name in the registry.
</p>
<p id="p-0180" num="0182">
<tables id="TABLE-US-00011" num="00011">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>add</entry>
</row>
<row>
<entry/>
<entry>Entity Name:Domain</entry>
</row>
<row>
<entry/>
<entry>Domain Name:example.com</entry>
</row>
<row>
<entry/>
<entry>Name Server:ns1.registrarA.com</entry>
</row>
<row>
<entry/>
<entry>NameServer:ns2.registrarA.com</entry>
</row>
<row>
<entry/>
<entry>.</entry>
</row>
<row>
<entry/>
<entry>200 command completed successfully</entry>
</row>
<row>
<entry/>
<entry>Registration Expiration Date: 2000-12-23 10:03:00.000</entry>
</row>
<row>
<entry/>
<entry>.</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
<br/>
The registrar transfers the registrar of a domain name to itself from another registrar.
</p>
<p id="p-0181" num="0183">
<tables id="TABLE-US-00012" num="00012">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>transfer</entry>
</row>
<row>
<entry/>
<entry>Entity Name:Domain</entry>
</row>
<row>
<entry/>
<entry>Domain Name:example2.com</entry>
</row>
<row>
<entry/>
<entry>.</entry>
</row>
<row>
<entry/>
<entry>200 command completed successfully</entry>
</row>
<row>
<entry/>
<entry>Registration Expiration Date: 2000-12-23 10:03:00.000</entry>
</row>
<row>
<entry/>
<entry>.</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
<br/>
The registrar closes the RRP connection.
</p>
<p id="p-0182" num="0184">
<tables id="TABLE-US-00013" num="00013">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>quit</entry>
</row>
<row>
<entry/>
<entry>.</entry>
</row>
<row>
<entry/>
<entry>220 command completed successfully. server closing connection</entry>
</row>
<row>
<entry/>
<entry>.</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0183" num="0185">While the present invention has been described in connection with a preferred embodiment, many modifications will be readily apparent to those skilled in the art, and this application is intended to cover any adaptations or variations thereof. For example, the present invention may be utilized for business cards that have multiple web pages as opposed to a single web page. One skilled in the art will appreciate that all or part of the systems and methods consistent with the present invention may be stored on or read from computer-readable media, such as secondary storage devices, like hard disks, floppy disks, and CD-ROM; a carrier wave received from a network such as the Internet; or other forms of ROM or RAM. This invention should be limited only by the claims and equivalents thereof.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method for processing a domain name registration operation in a shared registration system comprising the steps of:
<claim-text>receiving a registry-registrar protocol (RRP) request for performing a domain name registration operation from a registrar;</claim-text>
<claim-text>parsing the request;</claim-text>
<claim-text>determining whether the registrar that sent the request is authorized to perform an action necessitated by the operation;</claim-text>
<claim-text>if the registrar is authorized, performing the operation;</claim-text>
<claim-text>storing changes necessitated by the operation in a domain name registry; and</claim-text>
<claim-text>sending a RRP response to the registrar, the response indicating success or failure of the operation.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the request includes a command name and an entity block.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the entity block includes an indication as to whether the operation pertains to a domain name or a name server.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>determining whether the request is valid before the determining step.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the operation enables a registrar to register a domain name or a name server.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the operation enables a registrar to determine whether a domain name or name server has previously been registered.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the operation enables a registrar to delete the registration of a domain name or delete a name server.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the operation enables a registrar to update a registered domain name or name server.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the operation enables a registrar to close a connection with the registry.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the operation enables a registrar to re-register a domain name.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the operation enables a registrar to authenticate a connection with the registry.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the operation allows a registrar to determine the current status of a domain name or name server.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the operation allows a registrar to request transfer of domain name sponsorship from a second registrar and to approve or reject transfer requests initiated by other registrars.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the operation allows a registrar to request transfer of domain name sponsorship from a second registrar and to approve or reject transfer requests initiated by other registrars.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. A computer-readable storage medium storing instructions which, when executed by a processor, cause the processor to perform a method comprising:
<claim-text>receiving a registry-registrar protocol (RRP) request for performing a domain name registration operation from a registrar;</claim-text>
<claim-text>parsing the request;</claim-text>
<claim-text>determining whether the registrar that sent the request is authorized to perform an action necessitated by the operation;</claim-text>
<claim-text>if the registrar is authorized, performing the operation;</claim-text>
<claim-text>storing changes necessitated by the operation in a domain name registry; and</claim-text>
<claim-text>sending a RRP response to the registrar, the response indicating success or failure of the operation.</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>
