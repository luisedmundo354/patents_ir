<us-patent-grant lang="EN" dtd-version="v4.2 2006-08-23" file="US07299235-20071120.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20071106" date-publ="20071120">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>07299235</doc-number>
<kind>B2</kind>
<date>20071120</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>10899657</doc-number>
<date>20040726</date>
</document-id>
</application-reference>
<us-application-series-code>10</us-application-series-code>
<us-term-of-grant>
<us-term-extension>465</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>17</main-group>
<subgroup>30</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>707100</main-classification>
<further-classification>707  3</further-classification>
<further-classification>707 10</further-classification>
<further-classification>707205</further-classification>
<further-classification>707206</further-classification>
</classification-national>
<invention-title id="d0e53">Method and apparatus for ternary PATRICIA trie blocks</invention-title>
<references-cited>
<citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5841376</doc-number>
<kind>A</kind>
<name>Hayashi</name>
<date>19981100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>341 51</main-classification></classification-national>
</citation>
<citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5864867</doc-number>
<kind>A</kind>
<name>Krusche et al.</name>
<date>19990100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>7071041</main-classification></classification-national>
</citation>
<citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>5946679</doc-number>
<kind>A</kind>
<name>Ahuja et al.</name>
<date>19990800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707  3</main-classification></classification-national>
</citation>
<citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>6076089</doc-number>
<kind>A</kind>
<name>Fischer et al.</name>
<date>20000600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707102</main-classification></classification-national>
</citation>
<citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>6347318</doc-number>
<kind>B1</kind>
<name>Rokicki</name>
<date>20020200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707100</main-classification></classification-national>
</citation>
<citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>6694323</doc-number>
<kind>B2</kind>
<name>Bumbulis</name>
<date>20040200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707101</main-classification></classification-national>
</citation>
<citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2001/0010048</doc-number>
<kind>A1</kind>
<name>Kobayashi</name>
<date>20010700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707  2</main-classification></classification-national>
</citation>
<citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2002/0143747</doc-number>
<kind>A1</kind>
<name>Tal et al.</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707  3</main-classification></classification-national>
</citation>
<citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2003/0195890</doc-number>
<kind>A1</kind>
<name>Oommen</name>
<date>20031000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707100</main-classification></classification-national>
</citation>
<citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>2005/0102255</doc-number>
<kind>A1</kind>
<name>Bultman</name>
<date>20050500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707  1</main-classification></classification-national>
</citation>
</references-cited>
<number-of-claims>8</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>707  3</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>707100</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>5</number-of-drawing-sheets>
<number-of-figures>6</number-of-figures>
</figures>
<us-related-documents>
<us-provisional-application>
<document-id>
<country>US</country>
<doc-number>60490249</doc-number>
<kind>00</kind>
<date>20030728</date>
</document-id>
</us-provisional-application>
<us-provisional-application>
<document-id>
<country>US</country>
<doc-number>60490284</doc-number>
<kind>00</kind>
<date>20030728</date>
</document-id>
</us-provisional-application>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20050027679</doc-number>
<kind>A1</kind>
<date>20050203</date>
</document-id>
</related-publication>
</us-related-documents>
<parties>
<applicants>
<applicant sequence="001" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Sample</last-name>
<first-name>Neal</first-name>
<address>
<city>Santa Cruz</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
</applicants>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<last-name>Glenn</last-name>
<first-name>Michael A.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="02" rep-type="attorney">
<addressbook>
<orgname>Glenn Patent Group</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</parties>
<assignees>
<assignee>
<addressbook>
<orgname>Rightorder, Incorporated</orgname>
<role>02</role>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Truong</last-name>
<first-name>Cam Y T</first-name>
<department>2162</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">An architecture and method for efficient termination of variable length keys in a PATRICIA trie is disclosed. By adding a null-labeled link, it is possible to terminate such variable length PATRICIA trie nodes, allowing to overcome the need for complex termination solutions. Specifically, a ternary PATRICIA block is introduced.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="219.29mm" wi="81.36mm" file="US07299235-20071120-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="226.31mm" wi="113.20mm" file="US07299235-20071120-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="94.49mm" wi="117.26mm" file="US07299235-20071120-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="70.27mm" wi="160.78mm" file="US07299235-20071120-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="238.76mm" wi="83.23mm" file="US07299235-20071120-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="67.14mm" wi="156.04mm" file="US07299235-20071120-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">CROSS REFERENCE TO RELATED APPLICATIONS</heading>
<p id="p-0002" num="0001">This application claims priority to U.S. provisional patent application Ser. No. 60/490,249 submitted Jul. 28, 2003 and U.S. provisional patent application Ser. No. 60/490,284 submitted Jul. 28, 2003, which are incorporated herein in their entirety by this reference thereto.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0002" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0003" num="0002">1. Technical Field</p>
<p id="p-0004" num="0003">The invention relates generally to PATRICIA tries. More specifically, this invention relates to an improved termination of variable length keys using ternary PATRICIA tries.</p>
<p id="p-0005" num="0004">2. Background of the Invention</p>
<p id="p-0006" num="0005">The trie is a data structure that allows for a fast search and data retrieval over a large text. Tries are used to implement the dictionary abstract data type (ADT), where basic operations, such as search, insert, and delete can be performed. Further, a trie can be used for encoding and compression of text.</p>
<p id="p-0007" num="0006">One type of trie known in the art is the practical algorithm to retrieve information coded in alphanumeric or PATRICIA (<i>PATRICIA—Practical algorithm to retrieve information coded in alphanumeric</i>, D. R. Morrison, J. ACM, 15 (1968) pp. 514-534). The PATRICIA is a trie shown by D. R. Morrison in 1968. It is well known in the industry as a compact way for indexing, and is commonly used in databases, as well as in networking technologies.</p>
<p id="p-0008" num="0007">In a PATRICIA implementation, trie nodes that have only one child are eliminated, i.e. unary nodes are collapsed. The remaining nodes are labeled with a character position number that indicates the nodes' depth in the uncompressed trie. <figref idref="DRAWINGS">FIG. 1</figref> shows an example of such an implementation of a PATRICIA trie for an alphabetical case. The words to be stored are “greenbeans,” “greentea,” “grass,” “corn,” and “cow.” The first three words differ from the last two words in the first letter, i.e. three words begin with the letter “g,” while the other two words begin with the letter “c.” Hence, there is a difference at the first position. Therefore, there is a node <b>110</b>-<b>1</b> at depth “<b>0</b>” separating the “g” words from the “c” words. The edge connecting nodes <b>110</b>-<b>1</b> and <b>110</b>-<b>2</b> holds the characters “gr” and the edge connecting nodes <b>110</b>-<b>1</b> and <b>110</b>-<b>3</b> holds the characters “co.” Moving on the “gr” side, the next time a difference is found is in the third position where two words have an “e” while one word has an “a.” Therefore, a node <b>110</b>-<b>2</b> at that level indicates a depth level of “2,” i.e. the depth level equivalent to the length of the string “gr.” Continuing down the left path reveals that the next time a different letter is found is at a sixth position of the “green<u style="single">b</u>eans” and “green<u style="single">t</u>ea” words where one word has a “b” while the other has a “t.” Therefore, there is a node <b>110</b>-<b>4</b> at depth “5.” The words, i.e. keys are stored in the leaves <b>120</b>. For example, leaf <b>120</b>-<b>1</b> contains the key “greenbeans,” the leaf <b>120</b>-<b>2</b> contains the key “greentea,” and so on.</p>
<p id="p-0009" num="0008">The problem with this implementation is that keys are not uniquely specified by the search path. Hence, the key itself has to be stored in the appropriate leaf. An advantage of this PATRICIA implementation is that only about t*n bits of storage are required, where t is the size of the alphabet and n is the number of leaves.</p>
<p id="p-0010" num="0009">An alphabet is group of symbols, where the size of an alphabet is determined by the number of symbols in the group. That is, an alphabet in which t=2 is a binary alphabet having only two symbols, possibly 0 and 1. <figref idref="DRAWINGS">FIG. 2</figref> shows an exemplary implementation for such an alphabet with two nodes <b>210</b>-<b>1</b> and <b>210</b>-<b>2</b>, and three leaves <b>220</b>-<b>1</b>, <b>220</b>-<b>2</b>, and <b>220</b>-<b>3</b>, including the keys <b>1000</b>, <b>1110</b>, and <b>1111</b> respectively. For binary PATRICIA tries, the number of internal nodes <b>210</b> is equal to the number of leaves <b>220</b> minus 1. The height of the PATRICIA trie is bounded by the number of leaves n.</p>
<p id="p-0011" num="0010">A PATRICIA trie is either a leaf L (k) containing a key k or a node N (d, l, r) containing a bit offset d=0 along with a left sub-tree l, and a right sub-tree r. This is a recursive description of the nodes of a PATRICIA tree, and leaves descending from a node N (d, l, r) must agree on the first d-1 bits. A description of PATRICIA tries may be found in Bumbulis and Bowman, <i>A Compact B</i>-<i>Tree</i>, Proceedings of the 2002 ACM SIGMOD International Conference on Management of Data, pages 533-541, which is herein incorporated in its entirety by this reference thereto.</p>
<p id="p-0012" num="0011">A block of pointers may be now prepared using the PATRICIA trie architecture, the block having pointers that allow for efficient retrieval of the data. The number of pointers, or fanout, of the block may be calculated, based on several parameters.</p>
<p id="p-0013" num="0012">The assumption is that the keys k<sub>i </sub>are unique. In cases where such keys are not unique, unique keys must be created. Several strategies are suggested by prior art, such as the appending of a record identifier (RID) of the record to the respective key. Assuming that normalization of all keys to binary strings in an order preserving fashion is possible, one could implement the normalization such that no key is a prefix of another. This is trivially possible for fixed length keys. For variable length keys, an end marker would have to be added, while maintaining order. For bounded length keys, a strategy could be to pad all keys with binary 1s to a length that is greater than the length in bits of any key one could possibly encounter. Using such a strategy simplifies the algorithms and serves for alignment purposes too. The deficiencies of the prior art are clear: there is a difficulty in handling indexes that are over data sets containing duplicate values, the complexity of the handling of prefix keys, and the need to pad with bits in order to terminate indexed keys.</p>
<p id="p-0014" num="0013">It would be therefore advantageous to provide a practical solution for handling the termination of variable length keys of a PATRICIA trie. It would be furthermore advantageous if such solution would eliminate the need for the use of tricks or padding keys to longer than the longest possible key. It would be further advantageous if such solution is applicable for the indexing of infinite strings.</p>
<heading id="h-0003" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0015" num="0014">An architecture and method for efficient termination of variable length keys in a PATRICIA trie is disclosed. By adding a null-labeled link, it is possible to terminate such variable length PATRICIA trie nodes, allowing to overcome the need for complex termination solutions. Specifically, a ternary PATRICIA block is introduced.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 1</figref> is an example of a PATRICIA trie for an alphabetical case (prior art);</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 2</figref> is an exemplary PATRICIA trie for a numerical case (prior art);</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 3</figref> is an exemplary PATRICIA trie with keys that are a prefix of another;</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 4</figref> is an exemplary node array for a PATRICIA trie representation;</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 5</figref> is an exemplary flowchart describing the steps for calculating the increased fanout in a PATRICIA trie according to the invention; and</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 6</figref> is an exemplary modified node array for a PATRICIA trie representation in accordance with the disclosed invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DETAILED DESCRIPTION OF THE INVENTION</heading>
<p id="p-0022" num="0021">The invention comprises a method and apparatus for adding a leaf to a PATRICIA trie implementation that may optionally belong to a node. A computer memory, the computer memory contains computer program instructions for operating a computer to create a labeled PATRICIA trie block. Reference is now made to <figref idref="DRAWINGS">FIG. 3</figref>, where a non-limiting exemplary embodiment of a modified PATRICIA trie <b>300</b> with keys that are a prefix of another, is shown. On the left branch, a key <b>320</b>-<b>1</b> with a value of 100 is a prefix of key <b>320</b>-<b>2</b> with a value of 1000, resulting in a PATRICIA trie node having two sub-trees originated from node <b>310</b>-<b>2</b>. One sub-tree is labeled as null and the other as 0. These labels are also referred to the node's label. On the right branch, a key <b>320</b>-<b>3</b> with a value of <b>111</b> is a prefix to keys <b>320</b>-<b>4</b> and <b>320</b>-<b>5</b> having the values of <b>1110</b>, and <b>1111</b> respectively, resulting in a PATRICIA trie node having three sub-trees originated from node <b>310</b>-<b>3</b>. One sub-tree is labeled as null, the second as 0, and the third as 1. It is also possible to have other combinations. Thus, this embodiment of the invention comprises a ternary implementation of a PATRICIA trie block. The null elements are added as a means of handling variable-length binary keys that do not have a unique end-of-key token.</p>
<p id="p-0023" num="0022">It should be noted that if the input key set is at least partially constrained and it uses a unique end-of-key sequence in a well-known position, this addition would not be required. An example of such a well-behaved key set is the set of null terminated ASCII strings.</p>
<p id="p-0024" num="0023">A node in the modified PATRICIA trie disclosed herein can be described as N(d, l, r, n) containing a bit offset d=0 along with a left sub-tree l, a right sub-tree r, and the optional leaf n. Using the Ferguson strategy, the PATRICIA trie <b>300</b> encodes as 1:3:null:leaf:3:null:leaf:leaf, yielding a linear time search. However, it would be advantageous to use logarithmic search strategies.</p>
<p id="p-0025" num="0024">In accordance with an exemplary embodiment of the invention, each PATRICIA trie can be stored as an ordered array of leaves together with an array that encodes structure of the internal nodes of the PATRICIA trie. Reference is now made to <figref idref="DRAWINGS">FIG. 4</figref> where a non-limiting and exemplary representation of an order array <b>400</b> of leaves is shown. The array <b>400</b> is the size of a block and comprises a header portion <b>410</b>, a number-of-nodes portion <b>420</b>, a plurality of pointers [P<sub>1</sub>] through [P<sub>N</sub>] portion <b>430</b>, a key or empty spaces <b>440</b>, and pairs of offset and left node information [D<sub>1</sub>, L<sub>1</sub>] through [D<sub>N</sub>, L<sub>N</sub>] portion <b>450</b>. The invention uses a bit aligned representation for such array, allowing a significant increase in the number of pointers to be used through bit shaving techniques. This is opposed to prior art implementations that use a byte-aligned representation and perform a byte-aligned calculation of the fanout. The fanout determines the number of pointers that can be stored in a PATRICIA trie block. For example, using prior art implementations the maximum fanout for blocks may be calculated by the following formula:</p>
<p id="p-0026" num="0025">
<maths id="MATH-US-00001" num="00001">
<math overflow="scroll">
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <mrow>
          <mi>Int</mi>
          <mo>⁡</mo>
          <mrow>
            <mo>(</mo>
            <mfrac>
              <mrow>
                <mi>BlockSize</mi>
                <mo>-</mo>
                <mi>HeaderSize</mi>
                <mo>-</mo>
                <mi>N</mi>
              </mrow>
              <mrow>
                <mi>D</mi>
                <mo>+</mo>
                <mi>L</mi>
                <mo>+</mo>
                <mi>P</mi>
              </mrow>
            </mfrac>
            <mo>)</mo>
          </mrow>
        </mrow>
        <mo>;</mo>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>(</mo>
        <mn>1</mn>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
</maths>
<br/>
where, N is the total number of leaves, D is the bit offset, L are the number of leaves in the left sub-tree as encountered in a pre-order traversal, and P is the size of a pointer to a block. In a typical implementation where a block size is 8K bytes, the header size is 30 bytes, the N field is four bytes, the offset D<sub>i </sub>and the left node information L<sub>i </sub>holds two bytes each, and a pointer P<sub>i </sub>is four bytes for internal blocks and four bytes for pointers to data. Inserting the data in the formula results in:
</p>
<p id="p-0027" num="0026">
<maths id="MATH-US-00002" num="00002">
<math overflow="scroll">
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <mrow>
          <mi>Int</mi>
          <mo>⁡</mo>
          <mrow>
            <mo>(</mo>
            <mfrac>
              <mrow>
                <mn>8192</mn>
                <mo>-</mo>
                <mn>30</mn>
                <mo>-</mo>
                <mn>4</mn>
              </mrow>
              <mrow>
                <mn>2</mn>
                <mo>+</mo>
                <mn>2</mn>
                <mo>+</mo>
                <mn>4</mn>
              </mrow>
            </mfrac>
            <mo>)</mo>
          </mrow>
        </mrow>
        <mo>=</mo>
        <mn>1019</mn>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>(</mo>
        <mn>2</mn>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
</maths>
</p>
<p id="p-0028" num="0027">Hence, the internal blocks can have a maximum fanout of 1019.</p>
<p id="p-0029" num="0028">There is an over-commitment of bits to both the D and L portions of the array, e.g. two bytes, or sixteen bits each, and as shown above, significantly limiting the maximum fanout of an eight bytes block to 1019. Yet, a fanout of 1019 means that only 10 bits are actually required for each D and L portion in the block, however, a 10-bit value is not byte aligned. Storing the value of D<sub>1 </sub>in the header portion <b>410</b> allows storing all D<sub>i </sub>for all i&gt;1 as offsets instead of absolute addresses, potentially saving additional bits. Furthermore, in practical applications, it is more realistic to devote two bytes for N, reducing the number of leaves from over 4 billion to over 65 thousand, which is still applicable for block sizes greater than half a megabyte. Furthermore, the value of N can also be bit-aligned rather than byte-aligned, allowing for the shaving-off of additional bits. However, a practical value for N should be equal to or greater than the number of bits of D. For the implementation discussed above where a block size may be eight kilo bytes, i.e. 65,536 bits, and the header is thirty bytes, i.e. 240 bits, the bit-aligned technique used by the invention allows one to define the other parameters as follows: N equals two bytes, i.e. sixteen bits, D<sub>i </sub>and L<sub>i </sub>equals twelve bits each such that D+L are byte aligned, and that the P<sub>i </sub>are twenty bits for internal blocks so that they align on at least half-byte values, and thus require only a single extra bit to reference. The calculation of the fanout now shows:</p>
<p id="p-0030" num="0029">
<maths id="MATH-US-00003" num="00003">
<math overflow="scroll">
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <mrow>
          <mrow>
            <mi>Int</mi>
            <mo>⁡</mo>
            <mrow>
              <mo>(</mo>
              <mfrac>
                <mrow>
                  <mn>65536</mn>
                  <mo>-</mo>
                  <mn>240</mn>
                  <mo>-</mo>
                  <mn>16</mn>
                </mrow>
                <mrow>
                  <mn>12</mn>
                  <mo>+</mo>
                  <mn>12</mn>
                  <mo>+</mo>
                  <mn>20</mn>
                </mrow>
              </mfrac>
              <mo>)</mo>
            </mrow>
          </mrow>
          <mo>=</mo>
          <mn>1483</mn>
        </mrow>
        <mo>;</mo>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>(</mo>
        <mn>3</mn>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
</maths>
</p>
<p id="p-0031" num="0030">It is clearly shown that with a modicum of bit-shaving, the maximum fanout increased from 1019 to 1483, an increase of 45%, for the same 8K block without significantly degrading the practicality of the PATRICIA trie usage in databases, networking, and other applications.</p>
<p id="p-0032" num="0031">Reference is now made to <figref idref="DRAWINGS">FIG. 5</figref> where an exemplary flowchart <b>500</b> describing the steps for calculating the increased fanout in a PATRICIA trie is shown. In step S<b>510</b>, the value of the block size in bits is determined, preferably being byte aligned. In step S<b>520</b>, the value of the header size in bits is determined, preferably being byte aligned. In step S<b>530</b>, the value representing the number of nodes in the bock is determined, preferably being byte aligned. In step S<b>540</b>, bit-aligned values of the length D of the bit offset and the number L of leaves in the left sub-tree are determined. Preferably, D and L have similar values and meet a minimum size criterion that can be extracted from the formula discussed above. Assuming that D is roughly equal to L then it is necessary to maintain the following:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>D</i>+log<sub>2</sub>(2<i>D+P</i>)≧log<sub>2</sub>(BlockSize−HeaderSize−<i>N</i>);  (4)<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0033" num="0032">Therefore, for a 65,536 bit block, a header of 240 bits and an N value of sixteen bits, and a P of twenty bits, the equation is as follows:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>D</i>+log<sub>2</sub>(2<i>D</i>+20)≧log<sub>2</sub>(65536−240−16)=15.993;  (5)<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0034" num="0033">For D=10 bits, the left side of the inequality yields 15.322, clearly an incorrect solution. However, selecting D at a value of eleven bits results in the left side of the inequality being 16.393, providing for a correct solution. Such calculation can be easily repeated for various block sizes and other parameters. In step S<b>550</b>, a bit-aligned value for P of the size of a pointer is determined. In steps S<b>560</b>, the maximum number of pointers for the block, the size of which was determined in steps S<b>510</b>, are calculated based on the formula:</p>
<p id="p-0035" num="0034">
<maths id="MATH-US-00004" num="00004">
<math overflow="scroll">
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <mrow>
          <mi>Int</mi>
          <mo>⁡</mo>
          <mrow>
            <mo>(</mo>
            <mfrac>
              <mrow>
                <mi>BlockSize</mi>
                <mo>-</mo>
                <mi>HeaderSize</mi>
                <mo>-</mo>
                <mi>N</mi>
              </mrow>
              <mrow>
                <mi>D</mi>
                <mo>+</mo>
                <mi>L</mi>
                <mo>+</mo>
                <mi>P</mi>
              </mrow>
            </mfrac>
            <mo>)</mo>
          </mrow>
        </mrow>
        <mo>.</mo>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>(</mo>
        <mn>6</mn>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
</maths>
</p>
<p id="p-0036" num="0035">In step S<b>570</b> the results of the calculation made in step S<b>560</b> are output, for example, by means of display, printout, saving into a file, and the like.</p>
<p id="p-0037" num="0036">Reference is now made to <figref idref="DRAWINGS">FIG. 6</figref> where a non-limiting exemplary modified node array <b>600</b> for a modified PATRICIA trie representation in accordance with the invention, is shown. The array <b>600</b> is of a size of a block and comprises a header portion <b>610</b>, a number-of-nodes portion <b>620</b>, a plurality of pointers [P<sub>1</sub>] through [P<sub>N</sub>] portion <b>630</b>, a key or empty spaces <b>640</b>, pairs of offset and left node information [D<sub>1</sub>, L<sub>1</sub>] through [D<sub>N</sub>, L<sub>N</sub>] portion <b>650</b>, and a status array portion <b>660</b>. The pairs of offset and left node information [D<sub>1</sub>, L<sub>1</sub>] are described in greater detail above. The status array <b>660</b> includes a status indication [S<sub>1</sub>] through [S<sub>N</sub>] for each of pointers [P<sub>1</sub>] through [P<sub>N</sub>]. The status array <b>660</b> further indicates the state of labels of each node in the modified PATRICIA trie. There are four possibilities for the node's labels: all labels present, no null-label, no left (0) label, or no right (1) label. It is therefore possible to represent these four states by merely two bits. Using the technique shown above, there is no penalty on the number of pointers, as shown in the example for the case of an 8 bytes PATRICIA trie block. Moreover, through the use of the invention it is possible to eliminate limitations imposed by prior art solutions.</p>
<p id="p-0038" num="0037">Firstly, quite often, indexes are over data sets that contain duplicate values, hence presenting a problem of key uniqueness. By adding null-labeled links, it is not necessary to implement explicit tricks to make each key unique. Key recovery and indexing processes are significantly reduced in complexity, at the expense of having a somewhat larger index data structure.</p>
<p id="p-0039" num="0038">Secondly, in standard PATRICIA tries, a set of tricks must be developed for the handling of a key that is a proper prefix of another key. This is generally handled by making all keys unique. However, this is not always possible for arbitrary strings and, unless restrictions are placed on the values of the keys in the index, there must be some mechanism in place to handle the situation of prefix keys. Using the null-labeled links as part of the index structure obviates the need for an exception mechanism to deal with prefix keys.</p>
<p id="p-0040" num="0039">Thirdly, by allowing null-labeled links, there is no need to pad and terminate indexed keys. This means that keys can be truly general. While ASCII strings have specific values in the set of keys to be indexed that only appear at the very end of the key, this is not necessarily the case for other key types. There are multiple examples of infinite strings, such as the decimal representations of pi or e, or pure digital strings, such as, an MP3, that can assume any byte value at any position. These keys cannot be terminated (in the case of decimal pi) or padded (in the case of an MP3) and retain their original value. Having null-labeled links handles these more difficult cases, and allows for their indexing.</p>
<p id="p-0041" num="0040">Based on the invention disclosed herein it is further possible to provide a cascading index of PATRICIA tries having support for the null-label capability. This is particularly useful when a PATRICIA trie block is to be split due to size or other considerations. By adding a PATRICIA trie block to index the split blocks, and using the capability of having up to three sub-trees from a node, rather than the traditional two sub-trees, the invention overcomes limitations in prior art solutions.</p>
<p id="p-0042" num="0041">Although the invention is described herein with reference to the preferred embodiment, one skilled in the art will readily appreciate that other applications may be substituted for those set forth herein without departing from the spirit and scope of the present invention. Accordingly, the invention should only be limited by the claims included below.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-math idrefs="MATH-US-00001" nb-file="US07299235-20071120-M00001.NB">
<img id="EMI-M00001" he="6.69mm" wi="76.20mm" file="US07299235-20071120-M00001.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00002" nb-file="US07299235-20071120-M00002.NB">
<img id="EMI-M00002" he="6.69mm" wi="76.20mm" file="US07299235-20071120-M00002.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00003" nb-file="US07299235-20071120-M00003.NB">
<img id="EMI-M00003" he="6.69mm" wi="76.20mm" file="US07299235-20071120-M00003.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00004" nb-file="US07299235-20071120-M00004.NB">
<img id="EMI-M00004" he="6.69mm" wi="76.20mm" file="US07299235-20071120-M00004.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-claim-statement>The invention claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A computer implemented method for creating a labeled PATRICIA trie block, the computer implemented method comprising the steps of:
<claim-text>selecting a size of said labeled PATRICIA trie block;</claim-text>
<claim-text>defining a size of a header of said labeled PATRICIA trie block;</claim-text>
<claim-text>determining a number of nodes of a PATRICIA trie;</claim-text>
<claim-text>determining a number of pointers of said nodes;</claim-text>
<claim-text>determining a number of bits for an offset value of said labeled PATRICIA block;</claim-text>
<claim-text>determining a number of bits of a left sub-tree of the PATRICIA trie;</claim-text>
<claim-text>using a bit aligned representation to allow an increase in the number of pointers;</claim-text>
<claim-text>determining a number of bits for a status indicator of said labeled PATRICIA trie block, wherein the labeled PATRICIA trie block is maximum the number of pointers, the number of pointers determines a fanout in said PATRICIA trie block;</claim-text>
<claim-text>creating the labeled PATRICIA trie block based on said determining a number of bits for a status indicator and the determining of said fanout;</claim-text>
<claim-text>the determining of said fanout comprises the steps of:</claim-text>
<claim-text>selecting a number of bits devoted to storing a number of nodes for a first practice value;</claim-text>
<claim-text>selecting a number of bits devoted to a number of left leaves for a second practical value;</claim-text>
<claim-text>selecting a number of bits devoted to said offset value for a third practice value;</claim-text>
<claim-text>selecting a number of bits devoted to said number of pointers for a fourth practical value;</claim-text>
<claim-text>said second practical value and said third practical value are substantially equal; and</claim-text>
<claim-text>selected values for said second practical value and said third practical value adhere to an inequality, where said third practice value plus logarithm sub two of sum of said second practical value, said third practical value and said fourth practical value is equal to or larger than logarithm sub two of block size, header size and said first practical value.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The computer implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein a total number of bits for said second practical value and said third practical value are aligned on at least half a byte.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. A computer implemented method for creating a labeled PATRICIA trie block, the computer implemented method comprising the steps of:
<claim-text>selecting a size of said labeled PATRICIA trie block;</claim-text>
<claim-text>defining a size of a header of said labeled PATRICIA trie block;</claim-text>
<claim-text>determining a number of nodes of a PATRICIA trie;</claim-text>
<claim-text>determining a number of pointers of said nodes;</claim-text>
<claim-text>determining a number of bits for an offset value of said labeled PATRICIA trie block;</claim-text>
<claim-text>using a bit aligned representation to allow an increase in the number of pointers;</claim-text>
<claim-text>determining a number of bits of a left sub-tree of the PATRICIA trie;</claim-text>
<claim-text>determining a number of bits for a status indicator of said labeled PATRICIA trie block;</claim-text>
<claim-text>wherein the labeled PATRICIA trie block is maximum the number of pointers, the number of pointers determines a fanout in said PATRICIA trie block;</claim-text>
<claim-text>wherein the status indicator comprises an indication of labels respective of each node of said PATRICIA trie block;</claim-text>
<claim-text>wherein said indication of null-labels comprise any of all labels present, no null-label, no left label, and no right label;</claim-text>
<claim-text>creating the labeled PATRICIA trie block based on said determining a number of bits for a status indicator and the determining of said fanout;</claim-text>
<claim-text>the determining of said fanout comprises the steps of:</claim-text>
<claim-text>selecting a number of bits devoted to storing a number of nodes for a first practice value;</claim-text>
<claim-text>selecting a number of bits devoted to a number of left leaves for a second practical value;</claim-text>
<claim-text>selecting a number of bits devoted to said offset value for a third practice value;</claim-text>
<claim-text>selecting a number of bits devoted to said number of pointers for a fourth practical value;</claim-text>
<claim-text>said second practical value and said third practical value are substantially equal; and</claim-text>
<claim-text>selected values for said second practical value and said third practical value adhere to an inequality, wherein said third practice value plus logarithm sub two of sum of said second practical value, said third practical value and said fourth practical value is equal to or larger than logarithm sub two of block size, header size and said first practical value.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The computer implemented method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein a total number of bits for said second practical value and said third practical value are aligned on at least half a byte.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. A computer memory, said computer memory containing computer program instructions for operating a computer to create a labeled PATRICIA trie block, said computer program instructions executing a computer implemented method comprising the steps of:
<claim-text>selecting a size of said labeled PATRICIA trie block;</claim-text>
<claim-text>defining a size of a header of said labeled PATRICIA trie block;</claim-text>
<claim-text>determining a number of nodes of a PATRICIA trie;</claim-text>
<claim-text>determining a number of pointers of said nodes;</claim-text>
<claim-text>determining a number of bits for an offset value of said labeled PATRICIA trie block;</claim-text>
<claim-text>using a bit aligned representation to allow an increase in the number of pointers;</claim-text>
<claim-text>determining a number of bits of a left sub-tree of the PATRICIA trie;</claim-text>
<claim-text>determining a number of bits for a status indicator of said labeled PATRICIA trie block;</claim-text>
<claim-text>wherein the labeled PATRICIA trie block is maximum the number of pointers, the number of pointers determines a fanout in said PATRICIA trie block;</claim-text>
<claim-text>wherein the status indicator comprises an indication of labels respective of each node of said PATRICIA trie block;</claim-text>
<claim-text>wherein said indication of null-labels comprise any of all labels present, no null-label, no left label, and no right label;</claim-text>
<claim-text>creating the labeled PATRICIA trie block based on said determining a number of bits for a status indicator and the determining of said fanout;</claim-text>
<claim-text>the determining of said fanout comprises the steps of:</claim-text>
<claim-text>selecting a number of bits devoted to storing a number of nodes for a first practice value;</claim-text>
<claim-text>selecting a number of bits devoted to a number of left leaves for a second practical value;</claim-text>
<claim-text>selecting a number of bits devoted to said offset value for a third practice value;</claim-text>
<claim-text>selecting a number of bits devoted to said number of pointers for a fourth practical value;</claim-text>
<claim-text>said second practical value and said third practical value are substantially equal; and</claim-text>
<claim-text>selected values for said second practical value and said third practical value adhere to an inequality, wherein said third practice value plus logarithm sub two of sum of said second practical value, said third practical value and said fourth practical value is equal to or larger than logarithm sub two of block size, header size and said first practical value.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The computer memory of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein a total number of bits corresponding to said third practical value, said fourth practical value, and said fifth practical value are aligned on at least half a byte.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. A computer memory, said computer memory containing computer program instructions for operating a computer to create a labeled PATRICIA trie block, said computer program instructions executing a computer implemented method comprising the steps of:
<claim-text>selecting a size of said labeled PATRICIA trie block;</claim-text>
<claim-text>defining a size of a header of said labeled PATRICIA trie block;</claim-text>
<claim-text>determining a number of nodes of a PATRICIA trie;</claim-text>
<claim-text>determining a number of pointers of said nodes;</claim-text>
<claim-text>determining a number of bits for an offset value of said labeled PATRICIA trie block;</claim-text>
<claim-text>using a bit aligned representation to allow an increase in the number of pointers;</claim-text>
<claim-text>determining a number of bits of a left sub-tree of the PATRICIA trie;</claim-text>
<claim-text>determining a number of bits for a status indicator of said labeled PATRICIA trie block;</claim-text>
<claim-text>wherein the labeled PATRICIA trie block is maximum the number of pointers, the number of pointers determines a fanout in said PATRICIA trie block;</claim-text>
<claim-text>creating the labeled PATRICIA trie block based on said determining a number of bits for a status indicator and the determining of said fanout;</claim-text>
<claim-text>the determining of said fanout comprises the steps of:</claim-text>
<claim-text>selecting a number of bits devoted to storing a number of nodes for a first practice value;</claim-text>
<claim-text>selecting a number of bits devoted to a number of left leaves for a second practical value;</claim-text>
<claim-text>selecting a number of bits devoted to said offset value for a third practice value;</claim-text>
<claim-text>selecting a number of bits devoted to said number of pointers for a fourth practical value;</claim-text>
<claim-text>said second practical value and said third practical value are substantially equal; and</claim-text>
<claim-text>selected values for said second practical value and said third practical value adhere to an inequality, wherein said third practice value plus logarithm sub two of sum of said second practical value, said third practical value and said fourth practical value is equal to or larger than logarithm sub two of block size, header size and said first practical value.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The computer memory of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein a total number of bits for said second practical value and said third practical value are aligned on at least half a byte.</claim-text>
</claim>
</claims>
</us-patent-grant>
