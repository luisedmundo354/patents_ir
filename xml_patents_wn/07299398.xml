<us-patent-grant lang="EN" dtd-version="v4.2 2006-08-23" file="US07299398-20071120.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20071106" date-publ="20071120">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>07299398</doc-number>
<kind>B2</kind>
<date>20071120</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>10765191</doc-number>
<date>20040128</date>
</document-id>
</application-reference>
<us-application-series-code>10</us-application-series-code>
<priority-claims>
<priority-claim sequence="01" kind="national">
<country>JP</country>
<doc-number>2003-019413</doc-number>
<date>20030128</date>
</priority-claim>
</priority-claims>
<us-term-of-grant>
<us-term-extension>589</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>H</section>
<class>03</class>
<subclass>M</subclass>
<main-group>13</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>714752</main-classification>
<further-classification>714708</further-classification>
<further-classification>714757</further-classification>
<further-classification>714807</further-classification>
</classification-national>
<invention-title id="d0e71">Data generating method for forming desired CRC code</invention-title>
<references-cited>
<citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>4941144</doc-number>
<kind>A</kind>
<name>Mizukami</name>
<date>19900700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714708</main-classification></classification-national>
</citation>
<citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5379289</doc-number>
<kind>A</kind>
<name>DeSouza et al.</name>
<date>19950100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370230</main-classification></classification-national>
</citation>
<citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6609225</doc-number>
<kind>B1</kind>
<name>Ng</name>
<date>20030800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714781</main-classification></classification-national>
</citation>
<citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>6766493</doc-number>
<kind>B1</kind>
<name>Hoffman et al.</name>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714785</main-classification></classification-national>
</citation>
<citation>
<patcit num="00005">
<document-id>
<country>JP</country>
<doc-number>2001-244820</doc-number>
<date>20010900</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
</references-cited>
<number-of-claims>21</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>714781</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>714786</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>714708</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>714785</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>714758</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>714774</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>714807</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>714757</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>15</number-of-drawing-sheets>
<number-of-figures>20</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20040187064</doc-number>
<kind>A1</kind>
<date>20040923</date>
</document-id>
</related-publication>
</us-related-documents>
<parties>
<applicants>
<applicant sequence="001" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Takahashi</last-name>
<first-name>Fumio</first-name>
<address>
<city>Kawasaki</city>
<country>JP</country>
</address>
</addressbook>
<nationality>
<country>JP</country>
</nationality>
<residence>
<country>JP</country>
</residence>
</applicant>
<applicant sequence="002" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Shiratori</last-name>
<first-name>Akihiro</first-name>
<address>
<city>Kawasaki</city>
<country>JP</country>
</address>
</addressbook>
<nationality>
<country>JP</country>
</nationality>
<residence>
<country>JP</country>
</residence>
</applicant>
</applicants>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Young &amp; Thompson</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</parties>
<assignees>
<assignee>
<addressbook>
<orgname>NEC Electronics Corporation</orgname>
<role>03</role>
<address>
<city>Kanagawa</city>
<country>JP</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Britt</last-name>
<first-name>Cynthia</first-name>
<department>2112</department>
</primary-examiner>
<assistant-examiner>
<last-name>Alphonse</last-name>
<first-name>Fritz</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A method of generating a CRC code to determine a variable field value for equalizing a CRC value, which is calculated based on data including the variable field value of a variable field included in a data field according to a generator polynomial, to a desired CRC value, comprises the steps of establishing a temporary variable field value, reading all corrective values which correspond to a bit number where a bit value of said temporary variable field value is “1”, from a conversion table which stores therein corrective values for indicating a bit to be inverted in the variable field value as “1” corresponding to a predetermined bit number, and exclusive-ORing the read corrective values to calculate a first calculated value, and, determining whether the first calculated value corresponds to the desired CRC value or not.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="163.49mm" wi="102.11mm" file="US07299398-20071120-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="216.58mm" wi="149.01mm" file="US07299398-20071120-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="189.91mm" wi="141.05mm" file="US07299398-20071120-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="165.78mm" wi="101.94mm" file="US07299398-20071120-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="88.56mm" wi="105.24mm" file="US07299398-20071120-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="207.60mm" wi="128.95mm" file="US07299398-20071120-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="158.41mm" wi="95.93mm" file="US07299398-20071120-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="200.83mm" wi="136.14mm" orientation="landscape" file="US07299398-20071120-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="197.53mm" wi="118.96mm" file="US07299398-20071120-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="216.15mm" wi="101.43mm" file="US07299398-20071120-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="174.75mm" wi="119.97mm" file="US07299398-20071120-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="146.13mm" wi="106.93mm" file="US07299398-20071120-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="213.44mm" wi="108.46mm" file="US07299398-20071120-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00013" num="00013">
<img id="EMI-D00013" he="176.95mm" wi="120.31mm" file="US07299398-20071120-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00014" num="00014">
<img id="EMI-D00014" he="211.92mm" wi="134.79mm" file="US07299398-20071120-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00015" num="00015">
<img id="EMI-D00015" he="159.60mm" wi="109.47mm" file="US07299398-20071120-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0002" num="0001">1. Field of the Invention</p>
<p id="p-0003" num="0002">The present invention relates to a method of generating a CRC (Cyclic Redundancy Check) code, and more particularly to a CRC code generating method which is capable of generating a desired CRC code by changing a portion of data.</p>
<p id="p-0004" num="0003">2. Description of the Related Art</p>
<p id="p-0005" num="0004">In serial communications performed over cables, a voltage level may possibly suffer a drift due to a low-frequency component when a succession of data having the same voltage level occurs. To prevent such a drift, there is employed a technique called bit stuffing which, when a succession of “1s” or “0s” occurs in data to be transmitted, inserts a bit having a logic value that is opposite to the logic values in succession. For example, according to a USB data packet format that is used for a USB (Universal Serial Bus) which is known as a typical serial transmission application, it is stipulated that if a succession of seven “1s” occurs in data to be transmitted, then “0” is to be inserted after the sixth “1” in the data to be transmitted to the bus. It is also stipulated as an exception for the above provision that if a succession of seven “1s” occurs in data transmitted over a bus, then it represents an EOF (End Of Frame).</p>
<p id="p-0006" num="0005">In serial communications, a CRC (Cyclic Redundancy Check) code is used to detect an error that may be caused in the transmission of data. For serial communications, there is generally used a frame format comprising a CRC field and an EOF in succession at the end of a frame which is made up of a bunch of data flowing through a network.</p>
<p id="p-0007" num="0006">For conducting a transmission and reception test using a CRC code, as described in paragraph [0003] to [0006]of Japanese Patent Laid-open Application No. 2001-244820 (JP P2001-244820A), a predetermined generator polynomial is used on data in each frame unit on the transmission side to calculate a CRC code, and the calculated CRC code is added to the data to be transmitted and then transmitted. On the reception side, the received data is divided using the same generator polynomial as the one used on the transmission side, and if a residue is produced, then it is determined that an error has occurred in the transmitted data.</p>
<p id="p-0008" num="0007">For conducting a test to determine whether a packet is properly transmitted and received between a transmitting apparatus and a receiving apparatus or not, it is preferable if an arbitrary code can be set in a CRC field. For performing face-to-face communications (bidirectional communications) with a product developed by a different maker (manufacturer), it is necessary to generate an arbitrary CRC code for the purpose of confirming whether proper functions of the both parties are achieved or not.</p>
<p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. 1</figref> shows an exemplary arrangement of a serial communication system. As shown in <figref idref="DRAWINGS">FIG. 1</figref>, transmitting apparatus <b>1</b> and receiving apparatus <b>8</b> are connected to each other by transmission path <b>9</b>. Transmitting apparatus <b>1</b> transmits serial transmission data TD to transmission path <b>9</b>, from which serial transmission data TD is received by receiving apparatus <b>8</b>.</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. 2</figref> shows an example of an arrangement of transmitting apparatus <b>1</b>. As shown in <figref idref="DRAWINGS">FIG. 2</figref>, transmitting apparatus <b>1</b> comprises CPU (central processing unit) <b>92</b>, memory <b>93</b> for storing data therein, and serial transmitting unit <b>94</b> for transmitting data from CPU <b>92</b> as serial transmission data TD to the transmission path.</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 3A</figref> shows, by way of example, an arrangement of a transmission frame which is transmitted as serial transmission data TD. The transmission frame comprises data field <b>141</b>, CRC field <b>142</b> for storing a CRC code which is generated based on the data of data field <b>141</b>, and EOF field <b>143</b> following CRC field <b>142</b>. In <figref idref="DRAWINGS">FIG. 3A</figref>, the CRC code appended in CRC field <b>142</b> represents “0001”. The CRC code will also be hereinafter referred to as “CRC value.”</p>
<p id="p-0012" num="0011">It is assumed that, as shown in <figref idref="DRAWINGS">FIG. 3B</figref>, the value “0001” of CRC field <b>142</b> is replaced with a desired value, e.g., “1011”, and then transmitted. In this case, transmitting apparatus <b>1</b> shown in <figref idref="DRAWINGS">FIG. 2</figref> operates according to an operation sequence represented by a flowchart shown in <figref idref="DRAWINGS">FIG. 4</figref>. In step <b>201</b>, data is stored in memory <b>93</b>. In step <b>202</b>, the data is read from memory <b>93</b>. In step <b>203</b>, a CRC value corresponding to the read data is calculated according to a predetermined generator polynomial. Thereafter, in step <b>204</b>, the calculated CRC value is replaced with a desired CRC value. In step <b>205</b>, the fields are combined in the order described above, making a frame which is transmitted. When the CRC value is thus replaced, the receiving apparatus detects an unmatched CRC error, which prevents a normal test from being conducted. In a face-to-face test for transmitting and receiving a frame between apparatus which are connected to each other, when a CRC error occurs, an error process immediately follows. Therefore, if the value of the CRC field is simply replaced with a desired value, then it is not possible to confirm a process to be performed after normal transmission and reception of data has been confirmed.</p>
<p id="p-0013" num="0012">To solve the above problem, there has been employed a process of providing a variable field where data can be changed in a data field and CRC calculations are repeated one by one while changing the data of the variable field until the CRC value becomes a desired value, as shown in <figref idref="DRAWINGS">FIGS. 5A and 5B</figref>. <figref idref="DRAWINGS">FIG. 5A</figref> shows a transmission frame made up of data field <b>21</b>, CRC field <b>23</b>, and EOF field <b>24</b>, data field <b>21</b> containing variable field <b>22</b>. The value of variable field <b>22</b> is “0000”, and the value of CRC field <b>23</b> is “0001” accordingly. In order to equalize the value of CRC field <b>23</b> to “1011” as shown in <figref idref="DRAWINGS">FIG. 5B</figref>, CRC calculations are repeated to search for the value “0101” of variable field <b>22</b>, and the value that has been searched for is stored in variable field <b>22</b>.</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 6</figref> is a flowchart of a sequence of such a process of generating a CRC code.</p>
<p id="p-0015" num="0014">In step <b>211</b> shown in <figref idref="DRAWINGS">FIG. 6</figref>, transmitting apparatus <b>1</b> sets a variable field value X to “0” in variable field <b>22</b>. If the variable field length is represented by 4 bits, then the variable field value X is set to “0000” in variable field <b>22</b>. In step <b>212</b>, data is stored in memory <b>93</b>. In step <b>213</b>, the data is read from memory <b>93</b>. In step <b>214</b>, CPU <b>92</b> calculates a CRC value corresponding to the read data. In step <b>215</b>, CPU <b>92</b> determines whether the CRC value calculated in step <b>214</b> is equal to a desired CRC value or not. If not equal, then control goes to step <b>216</b>. In step S<b>16</b>, “1” is added to the variable field value X. Then, control returns to step <b>214</b>. If the calculated CRC value is judged as being equal to the desired CRC value in step <b>215</b>, then control goes to step <b>217</b>. In step <b>217</b>, fields are combined in a predetermined order, producing a frame, and the frame is transmitted.</p>
<p id="p-0016" num="0015">With the sequence shown in <figref idref="DRAWINGS">FIG. 6</figref>, however, a CRC value has to be recalculated each time the variable field value X is incremented. Consequently, it is highly time-consuming to obtain a frame having a desired CRC value.</p>
<heading id="h-0002" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0017" num="0016">It is an object of the present invention to provide a CRC code generating method which is capable of generating at a high speed a transmission frame having a desired CRC value.</p>
<p id="p-0018" num="0017">According to a first aspect of the present invention, there is provided a method of generating a CRC code to determine a variable field value for equalizing a CRC value, which is calculated based on data including the variable field value of a variable field included in a data field according to a generator polynomial, to a desired CRC value, comprising the steps of establishing a temporary variable field value, reading all corrective values which correspond to a bit number where the bit value of the temporary variable field value is 1, from a conversion table which stores therein corrective values for indicating a bit to be inverted in the variable field value as “1” corresponding to a predetermined bit number, and exclusive-ORing the read corrective values to calculate a first calculated value, and, when the first calculated value corresponds to the desired CRC value, determining the temporary variable field value to be a variable field value for obtaining the desired CRC value.</p>
<p id="p-0019" num="0018">According to a second aspect of the present invention, there is provided a method of generating a CRC code to determine a variable field value for equalizing a CRC value, which is calculated based on data including the variable field value of a variable field included in a data field according to a generator polynomial, to a desired CRC value, comprising the steps of establishing a temporary variable field value, reading a first calculated value corresponding to the temporary variable field value from a conversion table which stores therein first calculated values corresponding to a variable field value X and produced by exclusive-ORing a CRC value where the variable field value is 0 and a CRC value where the variable field value is X, where X represents an integer equal to or greater than 1 and equal to or less than 2<sup>K</sup>−1 where K represents the bit length of the variable field, and, when the read first calculated value corresponds to the desired CRC value, determining the temporary variable field value to be a variable field value for obtaining the desired CRC value.</p>
<p id="p-0020" num="0019">According to a third aspect of the present invention, there is provided a method of generating a CRC code to determine a variable field value for equalizing a CRC value, which is calculated based on data including the variable field value of a variable field included in a data field according to a generator polynomial, to a desired CRC value, comprising the steps of calculating a first calculated value by exclusive-ORing a CRC value where the variable field value is 0 and the desired CRC value, and reading a variable field value corresponding to a second calculated value equal to the first calculated value, as a variable field value for obtaining the desired CRC value, from a conversion table which stores therein variable field values X corresponding to second calculated values, wherein each of the second calculated value is produced by exclusive-ORing a CRC value where the variable field value is 0 and a CRC value where the variable field value is X, where X represents an integer equal to or greater than 1 and equal to or less than 2<sup>K</sup>−1 where K represents the bit length of the variable field.</p>
<p id="p-0021" num="0020">The above and other objects, features, and advantages of the present invention will become apparent from the following description with reference to the accompanying drawings which illustrate examples of the present invention.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram showing an exemplary arrangement of a serial communication system;</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 2</figref> is a block diagram showing a basic arrangement of a transmitting apparatus;</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 3A</figref> is a diagram showing a transmission frame;</p>
<p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. 3B</figref> is a diagram showing a transmission frame in which the value of a CRC field has been replaced with a desired CRC value;</p>
<p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. 4</figref> is a flowchart showing a process for simply replacing the value of a CRC field with a desired CRC value;</p>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. 5A</figref> is a diagram showing a transmission frame in which a variable field value X is an initial value “0”;</p>
<p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. 5B</figref> is a diagram showing a transmission frame in which a variable field value required to equalize the value of a CRC field to the desired CRC value has been generated;</p>
<p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. 6</figref> is a flowchart showing a process for providing a variable field in a data field to prevent data and the desired CRC value from being unmatched;</p>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. 7</figref> is a block diagram showing a transmitting apparatus to which a CRC code generating method according to the present invention is applied;</p>
<p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. 8</figref> is a flowchart showing a CRC code generating process according to a first embodiment of the present invention;</p>
<p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. 9</figref> is a diagram showing an example of a CRC conversion table used in the case of a variable field of a 16-bit length in the first embodiment;</p>
<p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. 10</figref> is a diagram illustrative of the CRC code generating process according to the first embodiment;</p>
<p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. 11</figref> is a flowchart showing a CRC code generating process according to a second embodiment of the present invention;</p>
<p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. 12</figref> is a diagram showing an example of a CRC conversion table used in the case of a variable field of a 16-bit length in the second embodiment;</p>
<p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. 13</figref> is a diagram illustrative of the CRC code generating process according to the second embodiment;</p>
<p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. 14</figref> is a flowchart showing a CRC code generating process according to a third embodiment of the present invention;</p>
<p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. 15</figref> is a diagram showing an example of a CRC conversion table used in the case of a variable field of a 16-bit length in the third embodiment;</p>
<p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. 16</figref> is a diagram illustrative of the CRC code generating process according to the third embodiment;</p>
<p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. 17</figref> is a flowchart showing a CRC code generating process according to a fourth embodiment of the present invention; and</p>
<p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. 18</figref> is a diagram showing an example of a CRC conversion table used in the case of a variable field of a 16-bit length in the fourth embodiment.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION OF THE INVENTION</heading>
<p id="p-0042" num="0041"><figref idref="DRAWINGS">FIG. 7</figref> shows in block form an example of a basic arrangement of transmitting apparatus <b>1</b> to which a CRC code generating method according to the present invention is applied.</p>
<p id="p-0043" num="0042">As shown in <figref idref="DRAWINGS">FIG. 7</figref>, transmitting apparatus <b>1</b> comprises memory <b>3</b> for storing a control program of transmitting apparatus <b>1</b> and transmission data, CPU <b>2</b> for calculating a CRC value and controlling the output of a transmission frame according to the control program, and serial transmitting unit <b>4</b> for outputting the transmission frame as transmission data TD to a serial communication network. Transmitting apparatus <b>1</b> shown in <figref idref="DRAWINGS">FIG. 7</figref> is the same as transmitting apparatus shown in <figref idref="DRAWINGS">FIG. 2</figref> in that it has CPU <b>2</b>, memory <b>3</b>, and serial transmitting unit <b>4</b>. However, transmitting apparatus <b>1</b> shown in <figref idref="DRAWINGS">FIG. 7</figref> is different from transmitting apparatus shown in <figref idref="DRAWINGS">FIG. 2</figref> in that memory <b>3</b> has CRC conversion table <b>31</b> therein. In transmitting apparatus <b>1</b> shown in <figref idref="DRAWINGS">FIG. 7</figref>, CPU <b>2</b> searches for a variable field value using CRC conversion table <b>31</b>, and generates transmission data TD having a desired CRC value.</p>
<p id="p-0044" num="0043">The transmission frame according to the present invention is of the same arrangement as the transmission frame shown in <figref idref="DRAWINGS">FIGS. 5A and 5B</figref>, and has data field <b>21</b>, CRC field <b>23</b>, and EOF field <b>24</b>, with variable field <b>22</b> whose data can be changed being contained in data field <b>21</b>. <figref idref="DRAWINGS">FIG. 5A</figref> shows a transmission frame in which the variable field value X is an initial value “0”. If the variable field length is represented by 4 bits, then “0000,” is stored in variable field <b>22</b>. If a desired CRC value, e.g., “1011”, is set in CRC field <b>23</b>, then <figref idref="DRAWINGS">FIG. 5B</figref> shows a transmission frame after a variable field value X (“0101” in this example) required to store a value corresponding to the desired CRC value in CRC field <b>23</b> has been generated.</p>
<p id="p-0045" num="0044">With the CRC code generating method according to the present invention, a CRC is mathematically determined by a residue produced when the value of an input sequence is divided by a generator polynomial. In the world of mod <b>2</b> (an algorithm to modulus <b>2</b>), the CRC code generating method is based on the fact that a division is expressed as an XOR per bit and the bits of a CRC that are affected if a particular bit value of an input sequence is changed depend on the bit length L of the data field of the input sequence and its bit number N, but not on the input sequence itself.</p>
<p id="p-0046" num="0045">This CRC value is obtained by a CRC calculation on the data field of the frame using a generator polynomial. First, a CRC value C<sub>0 </sub>corresponding to the case of the variable field value being the initial value “0”, and a calculated value A is obtained by XORing the CRC value C<sub>0 </sub>and the desired CRC value C<sub>T</sub>. If A=0, both values C<sub>0 </sub>and C<sub>T </sub>agree with each other and the variable field in the case of the initial value “0” is the value to be obtained. If the both CRC values are different from each other, it is necessary to determine a variable field value which equalizes both CRC values to each other. The bit positions in the calculated value A where the bit value thereof is “1” indicate the data of bit positions at which bits of the C<sub>0 </sub>should be changed to equalize the C<sub>0</sub>, which is a CRC value, with the desired CRC value C<sub>T</sub>.</p>
<p id="p-0047" num="0046">Consequently, each CRC value in the case that each bit position (2<sup>N</sup>) in the variable field is changed is calculated, and the XORed value between each calculated CRC value and the CRC value C<sub>0 </sub>which corresponds to the case where the variable filed is in the initial value “0”. This calculation result indicates the bit position in the calculated CRC value which is changed from the C<sub>0</sub>, and this data position is referred as “altering bit position.” The altering bit position data is obtained for each bit position (2<sup>N</sup>) of the variable field and is stored as a corrective value E in a table (CRC conversion table) with an address represented by each bit position.</p>
<p id="p-0048" num="0047">Next, what value of the variable field makes the “altering bit position data equal to the “data of bit position which is desired to be changed from C<sub>0</sub>” is determined. The variable field value which makes the former equals to the latter is the variable field value providing the desired CRC value.</p>
<p id="p-0049" num="0048">First, the variable field is incremented from the initial value “0,” and the corrective value E corresponds to the bit position at which a bit of “1” appears in the variable field is read from the table. Then the XORing operation on all the read corrective values are carried out. If only one bit is “1”, the XORing operation is not carried out and the single corrective value thus read from the table is treated as the calculation result.</p>
<p id="p-0050" num="0049">The bit of “1” in the corrective value E indicates the bit position where a CRC value changes. When the bit value of the same bit position changed at an even-number of times, the bit value is changed back to the original value. So, the XORing operation is carried out to maintain the bit of “1” only at the position where the bit in the CRC is changed at an odd-number of times.</p>
<p id="p-0051" num="0050">The calculated value B thus obtained corresponding to the variable field value indicates the data of a bit position at which the variable field is changed from the CRC value at the time of the initial value “0”. Then, the altering bit position data is obtained for each variable field value by sequentially incrementing the variable field from the initial value of “0.” Next, it is detected whether the “altering bit position data” is matched to the “data of bit position which is desired to be changed from C<sub>0</sub>” or not by, for example, XORing the both data. The variable field value at the time both value coincide with each other is a variable field value for obtaining the desired CRC value.</p>
<p id="p-0052" num="0051">Next, the generation of CRC conversion table <b>47</b> will be described below with reference to <figref idref="DRAWINGS">FIG. 10</figref> using a specific example. A corrective value E is calculated in advance by XORing a CRC value which is generated in association with data whose variable field value X is 2<sup>N </sup>and a CRC value which is generated in association with data whose variable field value X is X=0. For example, a corrective value E<sub>0 </sub>corresponding to L=16<sub>D </sub>and N=0<sub>D </sub>is calculated as E<sub>0</sub>=“1101” by XORing a CRC value C<sub>1 </sub>(=“1100”) calculated such that the variable field value X of transmission frame <b>41</b> is 2<sup>0 </sup>(=“0001”) and a CRC value C<sub>0 </sub>(=“0001”) calculated such that the variable field value X of transmission frame <b>41</b> is “0000”. A corrective value E<sub>1 </sub>corresponding to L=16<sub>D </sub>and N=1<sub>D</sub>, a corrective value E<sub>2 </sub>corresponding to L=16<sub>D </sub>and N=2<sub>D</sub>, and a corrective value E<sub>3 </sub>corresponding to L=16<sub>D </sub>and N=3<sub>D </sub>are similarly calculated, generating CRC conversion table <b>47</b>.</p>
<p id="p-0053" num="0052">A CRC code generating process according to a first embodiment of the present invention will be described below with reference to <figref idref="DRAWINGS">FIG. 8</figref>. Transmitting apparatus <b>1</b> carries out the steps described below to generate and output transmission data TD having a desired CRC value.</p>
<p id="p-0054" num="0053">In step <b>221</b>, a variable field value X of a transmission field is initialized to “0”. Thereafter, in step <b>222</b>, data is stored in memory <b>3</b>. In step <b>223</b>, the data is read from memory <b>3</b>. In step <b>224</b>, CPU <b>2</b> calculates a CRC value corresponding to the transmission data according to a generator polynomial. In step <b>225</b>, CPU <b>2</b> exclusive-ORs the CRC value corresponding to the transmission data with the variable field value X being “0” and the desired CRC value, and saves the calculated result as a calculated value A. In the description which follows, the term “exclusive-OR” is referred to as “XOR”.</p>
<p id="p-0055" num="0054">In step <b>226</b>, CPU <b>2</b> determines whether the calculated value A is 0 or not. If the calculated value A is 0, then since the desired CRC value has been obtained, control jumps to step <b>230</b>. If the calculated value A is not 0, then control goes to step <b>227</b>.</p>
<p id="p-0056" num="0055">In step <b>227</b>, CPU <b>2</b> increments the variable field value X to establish data for use temporarily as the variable field value X in following steps. In step <b>228</b>, CPU <b>2</b> accesses CRC conversion table <b>31</b> in memory <b>3</b> using an address represented by the data length L, i.e., the bit length (data length) L of the data field, and a bit number N corresponding to a bit representation “1” in the variable field value X. CPU <b>2</b> reads corrective values E stored in all the corresponding addresses in CRC conversion table <b>31</b>, and XORs the read corrective values E to produce a calculated value B. After having produced the calculated value B, CPU <b>2</b> compares the calculated value B with the calculated value A in step <b>229</b>. If the calculated value B is equal to the calculated value A, then control goes to step <b>230</b>. If the calculated value B is not equal to the calculated value A, then control goes back to step <b>227</b>.</p>
<p id="p-0057" num="0056">In step <b>230</b>, the data is output in the sequence of the transmission frame to serial transmitting unit <b>4</b> under the control of CPU <b>2</b>. As a result, the serial transmission data TD is transmitted from serial transmitting unit <b>4</b> to a serial transmission path.</p>
<p id="p-0058" num="0057">CRC conversion table <b>31</b> will be described in detail below. <figref idref="DRAWINGS">FIG. 9</figref> shows by way of example an arrangement of CRC conversion table <b>31</b> where the variable field is 16 bits long. In <figref idref="DRAWINGS">FIG. 9</figref>, CRC conversion table <b>31</b> contains indexes <b>32</b> of addresses corresponding to bit lengths L of the data fields and bit numbers N of the variable fields that are input. CRC conversion table <b>31</b> also contains fields <b>33</b> of corrective value data E at the respective addresses. Corrected value data E serve to indicate a bit to be inverted in a variable field value X as “1”, and are output from CRC conversion table <b>31</b>. For example, if 4-bit data “1010” according to the little-endian architecture is read as corrective value E, then the 4th and 2nd bits of the variable field value X are inverted to produce the calculated value B. Stated otherwise, the calculated value B is produced by XORing the variable field value X and the read corrective value B.</p>
<p id="p-0059" num="0058">In <figref idref="DRAWINGS">FIG. 9</figref>, CRC conversion table <b>31</b> contains a plurality of low-level tables where corrective values E are stored as corrective value data <b>33</b> in association with respective bit numbers N corresponding to low-order addresses. One of the low-level tables is selected depending on the bit length L of a data field which corresponds to a high-order address. With CRC conversion table <b>31</b> being thus arranged, a plurality of data having different bit lengths can be processed without the need for generating a new table. A bit number N is an integer that is equal to or greater than 0 and less than the bit length of the variable field, a corrective value E is then calculated in advance by XORing a CRC value which is generated in association with data whose variable field value X is 2<sup>N </sup>and a CRC value which is generated in association with data whose variable field value X is 0, and stored in CRC conversion table <b>31</b>. These CRC values have been calculated according to a predetermined generator polynomial. In <figref idref="DRAWINGS">FIG. 9</figref>, the suffix D of, for example, 16<sub>D </sub>representing a bit length L and 0<sub>D </sub>representing bit numbers represents the decimal notation.</p>
<p id="p-0060" num="0059"><figref idref="DRAWINGS">FIG. 10</figref> shows processing details and data flows in the steps of the CRC code generating process. It is assumed for the sake of brevity in <figref idref="DRAWINGS">FIG. 10</figref> that transmission frame <b>41</b> contains data field <b>42</b> having a bit length L of 16 bits and CRC field <b>43</b> having a bit length L of 4 bits. Data field <b>42</b> includes variable field <b>46</b> having a length of 4 bits which occupy 4th to 7th bits of transmission frame <b>41</b> if its leading bit is the 0th bit. The EOF field is omitted from illustration in <figref idref="DRAWINGS">FIG. 10</figref> as it has no bearing on the CRC code generating process.</p>
<p id="p-0061" num="0060">The CRC code generating process will be described in detail below with reference to a comparison between <figref idref="DRAWINGS">FIG. 8</figref> and <figref idref="DRAWINGS">FIG. 10</figref>.</p>
<p id="p-0062" num="0061">When steps <b>221</b> to <b>224</b> shown in <figref idref="DRAWINGS">FIG. 8</figref> have been executed, the variable field value X of variable field <b>46</b> of transmission frame <b>41</b> is an initial value X<sub>0 </sub>(=“0000”) and the CRC value of CRC field <b>43</b> thereof which is calculated based on the data of data field <b>42</b> according to the generator polynomial is C<sub>0 </sub>(=“0001”), as shown in <figref idref="DRAWINGS">FIG. 10</figref>.</p>
<p id="p-0063" num="0062">Since the calculated value A is not “0000” in step <b>226</b>, control goes to step <b>227</b>. In step <b>227</b>, the variable field value X is incremented to X=“0001”.</p>
<p id="p-0064" num="0063">If desired CRC value <b>44</b> is C<sub>T </sub>(=“1011”), then the calculated value A (45) determined by XORing C<sub>0 </sub>and C<sub>T </sub>is “1010” in step <b>225</b>. If the calculated value A is “0000”, C<sub>0 </sub>and C<sub>T </sub>agree with each other. Therefore, X<sub>T </sub>is the variable field value to be obtained. However, at this time, the calculated value A indicates that th second and fourth bits of C<sub>0 </sub>differ from those of C<sub>T</sub>. So an operation for obtaining the variable field value which changes each of the second and fourth bits of C<sub>0 </sub>to “0” is carried out on and after step <b>227</b>.</p>
<p id="p-0065" num="0064">In step <b>228</b>, the CRC conversion table in memory <b>3</b> is accessed using addresses represented by the data length L of the data field and the bit numbers N corresponding to the bit representation “1” in the variable field value X, and the corrective values E stored at all the addresses are read and XORed to produce a calculated value B. In the illustrated example, since X=“0001”, i.e., only the least significant bit of the variable field is “1”, “1101” is read as the corrective value E corresponding to the bit number N=0<sub>D </sub>from CRC conversion table <b>47</b>. Then, a calculated value B=“1101” corresponding to X=“0001” is calculated according to preprogrammed formula <b>48</b> for the calculated value B. More specifically, the bit values of the initial value X<sub>0 </sub>(=“0000”) of the variable field value which correspond to the first, third, and fourth bits, which are of “1”, of the read corrective value E (=“1101”) are inverted to produce the calculated value B=“1101”. Stated otherwise, the calculated value B is calculated by XORing the initial value X<sub>0 </sub>and the corrective value E, and the corrective value E itself becomes the calculated value B because the initial value X<sub>0 </sub>is “0000”.</p>
<p id="p-0066" num="0065">As the calculated value B (=“1101”) is not equal to the calculated value A (=“1010”) in step <b>229</b>, control returns from step <b>229</b> to step <b>227</b>.</p>
<p id="p-0067" num="0066">When steps <b>227</b> to <b>229</b> are executed in the second cycle, the variable field value X becomes “0010”, and since only the second bit thereof is “1”, “1110” is read as a corrective value E corresponding to a bit number N=1<sub>D </sub>from CRC conversion table <b>47</b>. A calculated value B (=“1110”) corresponding to X=“0010” is calculated according to formula <b>48</b> for the calculated value B. Inasmuch as the calculated value B is not equal to the calculated value A, control goes back to step <b>227</b> again.</p>
<p id="p-0068" num="0067">When steps <b>227</b> to <b>229</b> are executed in the third cycle, the variable field value X becomes “0011”, and since the first and second bits thereof are “1”, “1101′ is read as a corrective value E corresponding to a bit number N=0<sub>D </sub>from CRC conversion table <b>47</b>, and “0111” is read as a corrective value E corresponding to a bit number N=1<sub>D </sub>from CRC conversion table <b>47</b>. The two read corrective values E are XORed and a calculated value B (=“0011”) corresponding to X=“0011” is calculated according to formula <b>48</b> for the calculated value B. Inasmuch as the calculated value B is not equal to the calculated value A, control goes back to step <b>227</b> again.</p>
<p id="p-0069" num="0068">Similarly, the processing from steps <b>227</b> to <b>229</b> is repeated. When steps <b>227</b> to <b>229</b> are executed in the fifth cycle, the variable field value X becomes “0101”, and since the first and third bits thereof from the low-order position are “1”, “1101” is read as a corrective value E corresponding to a bit number N=0<sub>D </sub>from CRC conversion table <b>47</b>, and “0111” is read as a corrective value E corresponding to a bit number N=2<sub>D </sub>from CRC conversion table <b>47</b>. The two read corrective values E are XORed and a calculated value B (=“1010”) corresponding to X=“0101” is calculated according to formula <b>48</b> for the calculated value B. Since the calculated value B is judged as being equal to the calculated value A in step <b>229</b>, the variable field value X at this time is set to a variable field value X<sub>T </sub>corresponding to a desired CRC value C<sub>T</sub>(=“1011”), and control goes to step <b>230</b>. In step <b>230</b>, the data of variable field <b>46</b> in transmission frame <b>41</b> is replaced with X<sub>T </sub>(=“0101”), the CRC value of CRC field <b>43</b> is replaced with the desired CRC value C<sub>T</sub>(=“1011”), and the entire data are output as transmission frame <b>41</b><i>a. </i></p>
<p id="p-0070" num="0069">According to the first embodiment, as described above, a variable field value X<sub>T </sub>corresponding to a desired CRC value C<sub>T </sub>can be determined such that the desired CRC value C<sub>T </sub>and the data of data field <b>42</b> will not conflict with each other and an unmatched error will not be caused.</p>
<p id="p-0071" num="0070">By generating in advance CRC conversion table <b>47</b> for each bit length of a data field, it is possible to obtain a variable field value X<sub>T </sub>corresponding to an arbitrary desired CRC value C<sub>T </sub>with respect to arbitrary data (data other than variable field <b>46</b> of data field <b>42</b>) and the desired CRC value C<sub>T</sub>, in the manner described above with reference to <figref idref="DRAWINGS">FIG. 10</figref>.</p>
<p id="p-0072" num="0071">How much the calculation time for the CRC code generating process is shortened by the present embodiment will be reviewed below.</p>
<p id="p-0073" num="0072">A time T<sub>0 </sub>that is required to obtain a variable field value X<sub>T </sub>corresponding to a desired CRC value C<sub>T </sub>according to the conventional sequence shown in <figref idref="DRAWINGS">FIG. 6</figref> is estimated by:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>T</i><sub>0</sub><i>=T</i><sub>R</sub><i>+T</i><sub>C</sub><i>*M</i><?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
where T<sub>R </sub>represents a time to read data from memory <b>3</b>, T<sub>C </sub>a time required to calculate a CRC value once, and M the number of repetitions required to obtain a calculated value B which matches a calculated value A.
</p>
<p id="p-0074" num="0073">A time T<sub>1 </sub>that is required to obtain a variable field value X<sub>T </sub>corresponding to a desired CRC value C<sub>T </sub>according to the present embodiment is estimated by:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>T</i><sub>1</sub><i>=T</i><sub>R</sub><i>+T</i><sub>C</sub><i>+T</i><sub>L</sub><i>*M</i><?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
where T<sub>L </sub>represents a time required to calculate a variable field value X<sub>T </sub>corresponding to a desired CRC value C<sub>T </sub>using the CRC conversion table.
</p>
<p id="p-0075" num="0074">Transmission data comprising the data of 1 k words (i.e., 1024 words) and a 16-bit CRC added thereto will be reviewed below. It is assumed that a variable field length is represented by 16 bits. If T<sub>R </sub>is a one clock time, then T<sub>L </sub>represents a time that is equal to the sum of an average time required to read data from the CRC conversion table and one clock for XOR calculations, assuming that the reading of data from memory <b>3</b> and XOR calculations are performed by pipeline processing. The time T<sub>L </sub>is expressed by:</p>
<p id="p-0076" num="0075">
<maths id="MATH-US-00001" num="00001">
<math overflow="scroll">
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <msub>
          <mi>T</mi>
          <mi>L</mi>
        </msub>
        <mo>=</mo>
        <mi/>
        <mo>⁢</mo>
        <mrow>
          <mrow>
            <mrow>
              <msub>
                <mo>(</mo>
                <mn>16</mn>
              </msub>
              <mo>⁢</mo>
              <mrow>
                <msub>
                  <mi>C</mi>
                  <mn>1</mn>
                </msub>
                <mo>+</mo>
                <mrow>
                  <mn>2</mn>
                  <mo>⁢</mo>
                  <msub>
                    <mo>*</mo>
                    <mn>16</mn>
                  </msub>
                  <mo>⁢</mo>
                  <msub>
                    <mi>C</mi>
                    <mn>2</mn>
                  </msub>
                </mrow>
                <mo>+</mo>
                <mrow>
                  <mn>3</mn>
                  <mo>⁢</mo>
                  <msub>
                    <mo>*</mo>
                    <mn>16</mn>
                  </msub>
                  <mo>⁢</mo>
                  <msub>
                    <mi>C</mi>
                    <mn>3</mn>
                  </msub>
                </mrow>
                <mo>+</mo>
                <mstyle>
                  <mspace width="0.6em" height="0.6ex"/>
                </mstyle>
                <mo>⁢</mo>
                <mi>…</mi>
                <mo>⁢</mo>
                <mstyle>
                  <mspace width="0.8em" height="0.8ex"/>
                </mstyle>
                <mo>+</mo>
                <mrow>
                  <mn>16</mn>
                  <mo>⁢</mo>
                  <msub>
                    <mo>*</mo>
                    <mn>16</mn>
                  </msub>
                  <mo>⁢</mo>
                  <msub>
                    <mi>C</mi>
                    <mn>16</mn>
                  </msub>
                </mrow>
              </mrow>
              <mo>)</mo>
            </mrow>
            <mo>/</mo>
            <mrow>
              <mo>(</mo>
              <mrow>
                <msup>
                  <mn>2</mn>
                  <mn>16</mn>
                </msup>
                <mo>-</mo>
                <mn>1</mn>
              </mrow>
              <mo>)</mo>
            </mrow>
          </mrow>
          <mo>+</mo>
          <mn>1</mn>
        </mrow>
      </mrow>
    </mtd>
  </mtr>
  <mtr>
    <mtd>
      <mrow>
        <mo>=</mo>
        <mi/>
        <mo>⁢</mo>
        <mrow>
          <mn>9</mn>
          <mo>⁢</mo>
          <mstyle>
            <mspace width="0.6em" height="0.6ex"/>
          </mstyle>
          <mo>⁢</mo>
          <mrow>
            <mo>(</mo>
            <mrow>
              <mi>clock</mi>
              <mo>⁢</mo>
              <mstyle>
                <mspace width="0.8em" height="0.8ex"/>
              </mstyle>
              <mo>⁢</mo>
              <mi>times</mi>
            </mrow>
            <mo>)</mo>
          </mrow>
        </mrow>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
</maths>
<br/>
where <sub>p</sub>C<sub>q </sub>represents a combination for selecting q from p.
</p>
<p id="p-0077" num="0076">Since T<sub>C </sub>indicates that the calculation of a CRC by reading one word from the memory is repeated as many times as the length of the word, it represents clock times (1024 clock times) required to read 1024 words.</p>
<p id="p-0078" num="0077">When the bit length of the variable field is large, M is very large, and</p>
<p id="p-0079" num="0078">
<maths id="MATH-US-00002" num="00002">
<math overflow="scroll">
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <mrow>
          <msub>
            <mi>T</mi>
            <mn>1</mn>
          </msub>
          <mo>/</mo>
          <msub>
            <mi>T</mi>
            <mn>0</mn>
          </msub>
        </mrow>
        <mo>=</mo>
        <mi/>
        <mo>⁢</mo>
        <mrow>
          <mrow>
            <mo>(</mo>
            <mrow>
              <msub>
                <mi>T</mi>
                <mi>R</mi>
              </msub>
              <mo>+</mo>
              <msub>
                <mi>T</mi>
                <mi>C</mi>
              </msub>
              <mo>+</mo>
              <mrow>
                <msub>
                  <mi>T</mi>
                  <mi>L</mi>
                </msub>
                <mo>*</mo>
                <mi>M</mi>
              </mrow>
            </mrow>
            <mo>)</mo>
          </mrow>
          <mo>/</mo>
          <mrow>
            <mo>(</mo>
            <mrow>
              <msub>
                <mi>T</mi>
                <mi>R</mi>
              </msub>
              <mo>+</mo>
              <mrow>
                <msub>
                  <mi>T</mi>
                  <mi>C</mi>
                </msub>
                <mo>*</mo>
                <mi>M</mi>
              </mrow>
            </mrow>
            <mo>)</mo>
          </mrow>
        </mrow>
      </mrow>
    </mtd>
  </mtr>
  <mtr>
    <mtd>
      <mrow>
        <mo>≈</mo>
        <mi/>
        <mo>⁢</mo>
        <mrow>
          <msub>
            <mi>T</mi>
            <mi>L</mi>
          </msub>
          <mo>/</mo>
          <msub>
            <mi>T</mi>
            <mi>C</mi>
          </msub>
        </mrow>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
</maths>
<br/>
Therefore, for transmission data with a 16-bit CRC added to the data of 1 k words,
</p>
<p id="p-0080" num="0079">
<maths id="MATH-US-00003" num="00003">
<math overflow="scroll">
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <mrow>
          <msub>
            <mi>T</mi>
            <mn>1</mn>
          </msub>
          <mo>/</mo>
          <msub>
            <mi>T</mi>
            <mn>0</mn>
          </msub>
        </mrow>
        <mo>=</mo>
        <mi/>
        <mo>⁢</mo>
        <mrow>
          <mn>9</mn>
          <mo>/</mo>
          <mn>1024</mn>
        </mrow>
      </mrow>
    </mtd>
  </mtr>
  <mtr>
    <mtd>
      <mrow>
        <mo>≈</mo>
        <mi/>
        <mo>⁢</mo>
        <mrow>
          <mn>1</mn>
          <mo>/</mo>
          <mn>114</mn>
        </mrow>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
</maths>
<br/>
Consequently, the CRC code generating method according to the first embodiment which is illustrated in <figref idref="DRAWINGS">FIGS. 8 and 9</figref> is capable of reducing the processing time much more than the conventional method. The size V of CRC conversion table <b>31</b> which is used to realize the method according to the present embodiment is expressed by:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>V</i>=(the bit length of the variable field)*(the data length of the corrective value <i>E</i>)<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
for a different bit length L of data field.
</p>
<p id="p-0081" num="0080">A CRC code generating method according to a second embodiment of the present invention will be described below. <figref idref="DRAWINGS">FIG. 11</figref> shows a sequence of the code generating method according to the second embodiment. As shown in <figref idref="DRAWINGS">FIG. 11</figref>, the sequence of the second embodiment is similar to the sequence of the first embodiment, but differs therefrom in that step <b>228</b> for calculating a calculated value B is replaced with step <b>231</b> for reading a calculated value B. According to the second embodiment, memory <b>3</b> of transmitting apparatus <b>1</b> stores CRC conversion table <b>61</b>.</p>
<p id="p-0082" num="0081">According to the second embodiment, in step <b>221</b>, a variable field value X of transmission data is initialized to “0”. In step <b>222</b>, the transmission data is stored in memory <b>3</b>. In step <b>223</b>, the transmission data is read from memory <b>3</b>. In step <b>224</b>, CPU <b>2</b> calculates a CRC value with respect to the transmission data. Thereafter, in step <b>225</b>, CPU <b>2</b> XORs the CRC value with respect to the transmission data whose variable field value is “0, and a desired CRC value, and saves the calculated result as a calculated value A.</p>
<p id="p-0083" num="0082">In step <b>226</b>, CPU <b>2</b> determines whether the calculated value A is 0 or not. If the calculated value A is 0, then since the desired CRC value has been obtained, control jumps to step <b>230</b>. If the calculated value A is not 0, then, in step <b>227</b>, CPU <b>2</b> increments the variable field value X to establish data for use temporarily as the variable field value X in following steps. After step <b>227</b>, in step <b>231</b>, CPU <b>2</b> accesses CRC conversion table <b>61</b> in memory <b>3</b> using an address represented by the bit length (data length) L of a data field, and the variable field value X, and reads a calculated value B stored in the corresponding address in CRC conversion table <b>61</b>. After having read the calculated value B, CPU <b>2</b> compares the calculated value B with the calculated value A in step <b>229</b>. If the calculated value B is equal to the calculated value A, then control goes to step <b>230</b>. If the calculated value B is not equal to the calculated value A, then control goes back to step <b>227</b>. In step <b>230</b>, the data is output in the sequence of the transmission frame to serial transmitting unit <b>4</b> under the control of CPU <b>2</b>. As a result, the serial transmission data TD is transmitted from serial transmitting unit <b>4</b> to a serial transmission path.</p>
<p id="p-0084" num="0083">CRC conversion table <b>61</b> according to the second embodiment will be described in detail below. <figref idref="DRAWINGS">FIG. 12</figref> shows by way of example an arrangement of CRC conversion table <b>61</b> where the variable field is 16 bits long.</p>
<p id="p-0085" num="0084">CRC conversion table <b>61</b> stores calculated values B as calculated value data <b>63</b> corresponding to addresses <b>62</b> represented by the bit lengths L of data fields and the variable field values X. If K is an integer that is equal to or greater than 1 and equal to or less than 16 representing the bit length of the variable field, then a calculated value B can be calculated one by one as it is produced by XORing a CRC value at the time the variable field value X is 0 and a CRC value at the time the variable field value X is 2<sup>K</sup>−1. Practically, however, as with the first embodiment described above with reference to <figref idref="DRAWINGS">FIG. 10</figref>, it requires a smaller amount of calculations and is more efficient to determine a calculated value B corresponding to the variable field value X from a CRC conversion table storing corrective values according to a formula for the calculated value B, and thereafter to directly read the calculated value B from the table using the address <b>62</b> represented by the bit length L of the data field and the variable field value X.</p>
<p id="p-0086" num="0085">In <figref idref="DRAWINGS">FIG. 12</figref>, CRC conversion table <b>61</b> contains a plurality of low-level tables where calculated values B are stored as calculated value data in association with respective variable field values X corresponding to low-order addresses. One of the low-level tables is selected depending on the bit length L of a data field which corresponds to a high-order address. With CRC conversion table <b>61</b> being thus arranged, a plurality of data having different bit lengths can be processed without the need for generating a new table.</p>
<p id="p-0087" num="0086"><figref idref="DRAWINGS">FIG. 13</figref> shows processing details and data flows in the steps of the CRC code generating process according to the second embodiment. It is assumed in <figref idref="DRAWINGS">FIG. 13</figref>, as with <figref idref="DRAWINGS">FIG. 8</figref>, that transmission frame <b>41</b> contains data field <b>42</b> having a bit length L of 16 bits and CRC field <b>43</b> having a bit length L of 4 bits, and data field <b>42</b> includes variable field <b>46</b> having a length of 4 bits. The EOF field is omitted from illustration in <figref idref="DRAWINGS">FIG. 13</figref> as it has no bearing on the CRC code generating process. The CRC code generating process will be described in detail below with reference to a comparison between <figref idref="DRAWINGS">FIG. 11</figref> and <figref idref="DRAWINGS">FIG. 13</figref>.</p>
<p id="p-0088" num="0087">When steps <b>221</b> to <b>224</b> shown in <figref idref="DRAWINGS">FIG. 11</figref> have been executed, as indicated by transmission frame <b>41</b> shown in <figref idref="DRAWINGS">FIG. 13</figref>, the variable field value X of variable field <b>46</b> is an initial value X<sub>0 </sub>(=“0000”) and the CRC value of CRC field <b>43</b> thereof which is calculated based on the data of data field <b>42</b> according to the generator polynomial is C<sub>0 </sub>(=“0001”). If desired CRC value <b>44</b> is C<sub>T </sub>(=“1011”), then the calculated value A (45) determined by XORing C<sub>0 </sub>and C<sub>T </sub>is “1010” in step <b>225</b>. Since the calculated value A is not “0000” in step <b>226</b>, control goes to step <b>227</b>. In step <b>227</b>, the variable field value X is incremented to the variable field value X=“0001”. The processing up to this point is the same as the processing shown in <figref idref="DRAWINGS">FIG. 10</figref>.</p>
<p id="p-0089" num="0088">In step <b>231</b>, a calculated value B which is stored in CRC conversion table <b>71</b> in advance is read at an address represented by the bit length L of the data field and the variable field value X. Since X=“0001”, B=“1101” stored at the variable field value X=“0001” in CRC conversion table <b>71</b> is read. As the calculated value B (=“1101”) is not equal to the calculated value A (=”1010”) in step <b>229</b>, control returns from step <b>229</b> to step <b>227</b>.</p>
<p id="p-0090" num="0089">In the same manner as described with reference to <figref idref="DRAWINGS">FIG. 10</figref>, the processing from steps <b>227</b> to <b>229</b> is repeated. When steps <b>227</b> to <b>229</b> are executed in the second, third, and fourth cycles, the variable field value X becomes “0010”, “0011”, and “0100”, respectively, and corresponding calculated values B of “1110”, “0011”, and “0111” are read from CRC conversion table <b>71</b>. Since these calculated values B are not equal to the calculated value A in step <b>229</b>, control returns from step <b>229</b> to step <b>227</b>.</p>
<p id="p-0091" num="0090">When steps <b>227</b> to <b>229</b> are executed in the fifth cycle, the variable field value X becomes “0101” in step <b>227</b>, and “1010” is then read as a calculated value B from CRC conversion table <b>71</b> in step <b>231</b>. Since the calculated value B is judged as being equal to the calculated value A in step <b>229</b>, the variable field value X at this time is set to a variable field value X<sub>T </sub>corresponding to a desired CRC value C<sub>T</sub>, and control goes to step <b>230</b>. In step <b>230</b>, the data of variable field <b>46</b> in transmission frame <b>41</b> is replaced with X<sub>T </sub>(=“0101”), the CRC value of CRC field <b>43</b> is replaced with the desired CRC value C<sub>T </sub>(=“1011”), and the entire data are output as transmission frame <b>41</b><i>a. </i></p>
<p id="p-0092" num="0091">According to the second embodiment, as described above, a variable field value X<sub>T </sub>can be determined such that the desired CRC value C<sub>T </sub>and the data of data field <b>42</b> will not conflict with each other and an unmatched error will not be caused.</p>
<p id="p-0093" num="0092">A time T<sub>2 </sub>that is required to obtain a variable field value X<sub>T </sub>corresponding to a desired CRC value C<sub>T </sub>according to the second embodiment is estimated by:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>T</i><sub>2</sub><i>=T</i><sub>R</sub><i>+T</i><sub>C</sub><i>+T</i><sub>R</sub><i>*M</i><?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0094" num="0093">If it is assumed that the variable field length is 16 bits long, with respect to transmission data with a 16-bit CRC added to the data of 1 k words, the ratio of the time T<sub>2 </sub>to the calculating time T<sub>0 </sub>according to the conventional process is expressed, as the same manner in the first embodiment, provided M is sufficiently large, by:</p>
<p id="p-0095" num="0094">
<maths id="MATH-US-00004" num="00004">
<math overflow="scroll">
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <mrow>
          <msub>
            <mi>T</mi>
            <mn>2</mn>
          </msub>
          <mo>/</mo>
          <msub>
            <mi>T</mi>
            <mn>0</mn>
          </msub>
        </mrow>
        <mo>=</mo>
        <mi/>
        <mo>⁢</mo>
        <mrow>
          <mrow>
            <mo>(</mo>
            <mrow>
              <msub>
                <mi>T</mi>
                <mi>R</mi>
              </msub>
              <mo>+</mo>
              <msub>
                <mi>T</mi>
                <mi>C</mi>
              </msub>
              <mo>+</mo>
              <mrow>
                <msub>
                  <mi>T</mi>
                  <mi>R</mi>
                </msub>
                <mo>*</mo>
                <mi>M</mi>
              </mrow>
            </mrow>
            <mo>)</mo>
          </mrow>
          <mo>/</mo>
          <mrow>
            <mo>(</mo>
            <mrow>
              <msub>
                <mi>T</mi>
                <mi>R</mi>
              </msub>
              <mo>+</mo>
              <mrow>
                <msub>
                  <mi>T</mi>
                  <mi>C</mi>
                </msub>
                <mo>*</mo>
                <mi>M</mi>
              </mrow>
            </mrow>
            <mo>)</mo>
          </mrow>
        </mrow>
      </mrow>
    </mtd>
  </mtr>
  <mtr>
    <mtd>
      <mrow>
        <mo>≈</mo>
        <mi/>
        <mo>⁢</mo>
        <mrow>
          <msub>
            <mi>T</mi>
            <mi>R</mi>
          </msub>
          <mo>/</mo>
          <msub>
            <mi>T</mi>
            <mi>C</mi>
          </msub>
        </mrow>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
</maths>
<br/>
Therefore, for transmission data with a 16-bit CRC added to the data of 1 k words,
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>T</i><sub>2</sub><i>/T</i><sub>0</sub>≈1/1024<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
Consequently, the CRC code generating method according to the second embodiment is capable of reducing the processing time much more than the CRC code generating method according to the first embodiment.
</p>
<p id="p-0096" num="0095">A CRC code generating method according to a third embodiment of the present invention will be described below. <figref idref="DRAWINGS">FIG. 14</figref> shows a sequence of the code generating method according to the third embodiment. As shown in <figref idref="DRAWINGS">FIG. 14</figref>, the sequence of the third embodiment is different from the sequence of the second embodiment shown in <figref idref="DRAWINGS">FIG. 11</figref> in that steps <b>226</b>, <b>227</b>, <b>231</b>, and <b>229</b> of the sequence of the second embodiment are deleted, and step <b>232</b> is inserted. According to the third embodiment, memory <b>3</b> of transmitting apparatus <b>1</b> stores CRC conversion table <b>91</b>.</p>
<p id="p-0097" num="0096">With the sequence according to the third embodiment as shown in <figref idref="DRAWINGS">FIG. 14</figref>, in step <b>221</b>, a variable field value X of transmission data is initialized to “0”. In step <b>222</b>, the transmission data is stored in memory <b>3</b>. In step <b>223</b>, CPU <b>2</b> reads the transmission data from memory <b>3</b>. In step <b>224</b>, CPU <b>2</b> calculates a CRC value with respect to the transmission data. In step <b>225</b>, CPU <b>2</b> XORs the CRC value with respect to the transmission data whose variable field value is “0” and a desired CRC value, and saves the calculated result as a calculated value A.</p>
<p id="p-0098" num="0097">In step <b>232</b>, CPU <b>2</b> accesses CRC conversion table <b>91</b> in memory <b>3</b> using an address represented by the bit length (data length) L of a data field, and the variable field value X, and reads a variable field value X stored in the corresponding address in CRC conversion table <b>91</b>. Thereafter, in step <b>230</b>, a transmission frame including the read variable field value X and the desired CRC value is assembled and output from serial transmitting unit <b>4</b> to the serial transmission path under the control of CPU <b>2</b>.</p>
<p id="p-0099" num="0098">An arrangement of CRC conversion table <b>91</b> according to the third embodiment will be described below. <figref idref="DRAWINGS">FIG. 15</figref> shows by way of example an arrangement of CRC conversion table <b>91</b> where the variable field is 16 bits long. CRC conversion table <b>91</b> stores variable field values X as calculated value data <b>93</b> corresponding to addresses <b>92</b> represented by the bit lengths L of data fields and the calculated values A. This CRC conversion table <b>91</b> is generated by rearranging fields such that the variable field values X correspond to the order of the calculated values B, in CRC conversion table <b>61</b> according to the second embodiment shown in <figref idref="DRAWINGS">FIG. 12</figref>, and reading the calculated values B as calculated values A. It is possible to read a variable field value corresponding to a calculated value A directly from CRC conversion table <b>91</b> by accessing CRC conversion table <b>91</b> at an address represented by the bit length L of the data field and the calculated value A.</p>
<p id="p-0100" num="0099">In <figref idref="DRAWINGS">FIG. 15</figref>, CRC conversion table <b>91</b> contains a plurality of low-level tables where variable field values X are stored as variable field data <b>93</b> in association with respective calculated values B corresponding to low-order addresses. One of the low-level tables is selected depending on the bit length L of a data field which corresponds to a high-order address. With CRC conversion table <b>91</b> being thus arranged, a plurality of data having different bit lengths can be processed without the need for generating a new table.</p>
<p id="p-0101" num="0100"><figref idref="DRAWINGS">FIG. 16</figref> shows processing details and data flows in the steps of the CRC code generating process according to the third embodiment. It is assumed in <figref idref="DRAWINGS">FIG. 16</figref>, as with <figref idref="DRAWINGS">FIG. 13</figref>, that transmission frame <b>41</b> contains data field <b>42</b> having a bit length L of 16 bits and CRC field <b>43</b> having a bit length L of 4 bits, and data field <b>42</b> includes variable field <b>46</b> having a length of 4 bits. The EOF field is omitted from illustration in <figref idref="DRAWINGS">FIG. 16</figref> as it has no bearing on the CRC code generating process. The CRC code generating process will be described in detail below with reference to a comparison between <figref idref="DRAWINGS">FIG. 14</figref> and <figref idref="DRAWINGS">FIG. 16</figref>.</p>
<p id="p-0102" num="0101">When steps <b>221</b> to <b>224</b> shown in <figref idref="DRAWINGS">FIG. 14</figref> have been executed, as indicated by transmission frame <b>41</b> shown in <figref idref="DRAWINGS">FIG. 16</figref>, the variable field value X of variable field <b>46</b> is an initial value X<sub>0 </sub>(=“0000”) and the CRC value of CRC field <b>43</b> thereof which is calculated based on the data of data field <b>42</b> according to the generator polynomial is C<sub>0 </sub>(=“0001”). If desired CRC value <b>44</b> is C<sub>T </sub>(=“1011”), then the calculated value A (<b>45</b>) determined by XORing C<sub>0 </sub>and C<sub>T </sub>is “1010” in step <b>225</b>. In step <b>232</b>, CRC conversion table <b>101</b> is accessed at an address represented by the bit length L of the data field and the calculated value A (=“1010”), and a variable field value X which is stored in advance in the address in CRC conversion table <b>101</b> is read from CRC conversion table <b>101</b>. Since the read variable field value X is guaranteed to be the variable field value X<sub>T </sub>corresponding to the desired CRC value C<sub>T</sub>, control goes to step <b>230</b>. In step <b>230</b>, the CRC value of CRC field <b>43</b> is replaced with the desired CRC value C<sub>T</sub>(=“1011”), and the entire data are output as transmission frame <b>41</b><i>a. </i></p>
<p id="p-0103" num="0102">According to the third embodiment, as described above, a variable field value X<sub>T </sub>can be determined such that the desired CRC value C<sub>T </sub>and the data of data field <b>42</b> will not conflict with each other and an unmatched error will not be caused.</p>
<p id="p-0104" num="0103">A time T<sub>3 </sub>that is required to obtain a variable field value X<sub>T </sub>corresponding to a desired CRC value C<sub>T </sub>according to the third embodiment is estimated by:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>T</i><sub>3</sub><i>=T</i><sub>R</sub><i>+T</i><sub>C</sub><i>+T</i><sub>R</sub><?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0105" num="0104">If it is assumed that the variable field length is 16 bits long, then with respect to transmission data with a 16-bit CRC added to the data of 1 k words, the ratio of the time T<sub>3 </sub>to the calculating time T<sub>0 </sub>according to the conventional process is expressed, as with the first embodiment, by:</p>
<p id="p-0106" num="0105">
<maths id="MATH-US-00005" num="00005">
<math overflow="scroll">
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <mrow>
          <msub>
            <mi>T</mi>
            <mn>3</mn>
          </msub>
          <mo>/</mo>
          <msub>
            <mi>T</mi>
            <mn>0</mn>
          </msub>
        </mrow>
        <mo>=</mo>
        <mi/>
        <mo>⁢</mo>
        <mrow>
          <mrow>
            <mo>(</mo>
            <mrow>
              <msub>
                <mi>T</mi>
                <mi>R</mi>
              </msub>
              <mo>+</mo>
              <msub>
                <mi>T</mi>
                <mi>C</mi>
              </msub>
              <mo>+</mo>
              <msub>
                <mi>T</mi>
                <mi>R</mi>
              </msub>
            </mrow>
            <mo>)</mo>
          </mrow>
          <mo>/</mo>
          <mrow>
            <mo>(</mo>
            <mrow>
              <msub>
                <mi>T</mi>
                <mi>R</mi>
              </msub>
              <mo>+</mo>
              <mrow>
                <msub>
                  <mi>T</mi>
                  <mi>C</mi>
                </msub>
                <mo>*</mo>
                <mi>M</mi>
              </mrow>
            </mrow>
            <mo>)</mo>
          </mrow>
        </mrow>
      </mrow>
    </mtd>
  </mtr>
  <mtr>
    <mtd>
      <mrow>
        <mo>≈</mo>
        <mi/>
        <mo>⁢</mo>
        <mrow>
          <msub>
            <mi>T</mi>
            <mi>R</mi>
          </msub>
          <mo>/</mo>
          <msub>
            <mi>T</mi>
            <mi>C</mi>
          </msub>
        </mrow>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
</maths>
<br/>
If the variable field length is of 16 bits, then the average number M of repetitions required to obtain a calculated value B that is in agreement with the calculated value A is about half 2<sup>16</sup>, i.e., about 2<sup>15</sup>. Therefore, for transmission data with a 16-bit CRC added to the data of 1 k words,
</p>
<p id="p-0107" num="0106">
<maths id="MATH-US-00006" num="00006">
<math overflow="scroll">
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <mrow>
          <msub>
            <mi>T</mi>
            <mn>3</mn>
          </msub>
          <mo>/</mo>
          <msub>
            <mi>T</mi>
            <mn>0</mn>
          </msub>
        </mrow>
        <mo>=</mo>
        <mi/>
        <mo>⁢</mo>
        <mrow>
          <mrow>
            <mo>(</mo>
            <mrow>
              <mn>1</mn>
              <mo>+</mo>
              <mn>1</mn>
              <mo>+</mo>
              <mn>1024</mn>
            </mrow>
            <mo>)</mo>
          </mrow>
          <mo>/</mo>
          <mrow>
            <mo>(</mo>
            <mrow>
              <mn>1</mn>
              <mo>+</mo>
              <mrow>
                <mn>1024</mn>
                <mo>*</mo>
                <msup>
                  <mn>2</mn>
                  <mn>15</mn>
                </msup>
              </mrow>
            </mrow>
            <mo>)</mo>
          </mrow>
        </mrow>
      </mrow>
    </mtd>
  </mtr>
  <mtr>
    <mtd>
      <mrow>
        <mo>≈</mo>
        <mi/>
        <mo>⁢</mo>
        <mrow>
          <mn>1</mn>
          <mo>/</mo>
          <mn>32768</mn>
        </mrow>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
</maths>
<br/>
Consequently, the CRC code generating method according to the third embodiment is capable of reducing the processing time much more than the CRC code generating method according to the second embodiment.
</p>
<p id="p-0108" num="0107"><figref idref="DRAWINGS">FIG. 17</figref> shows a sequence of a CRC code generating process according to a fourth embodiment of the present invention. According to the fourth embodiment, the bit length L of a data field, a bit number N in a variable field, and a generator polynomial P for use in generating a CRC value are used as address indexes for a CRC conversion table that is accessed by CPU <b>2</b>. The CRC conversion table according to the fourth embodiment outputs corrective values E as with the first and second embodiments. Memory <b>3</b> stores such CRC conversion table <b>131</b>. The sequence shown in <figref idref="DRAWINGS">FIG. 17</figref> is different from the sequence according to the first embodiment shown in <figref idref="DRAWINGS">FIG. 8</figref> in that step <b>228</b> is deleted and step <b>233</b> is inserted.</p>
<p id="p-0109" num="0108">According to the fourth embodiment, in step <b>221</b>, a variable field value X of transmission data is initialized to “0”. In step <b>222</b>, the transmission data is stored in memory <b>3</b>. In step <b>223</b>, CPU <b>2</b> reads the transmission data from memory <b>3</b>. In step <b>224</b>, CPU <b>2</b> calculates a CRC value corresponding to the transmission data. Thereafter, in step <b>225</b>, CPU <b>2</b> XORs the CRC value corresponding to the transmission data with the variable field value being “0” and a desired CRC value, and saves the calculated result as a calculated value A.</p>
<p id="p-0110" num="0109">In step <b>226</b>, CPU <b>2</b> determines whether the calculated value A is 0 or not. If the calculated value A is 0, then since the desired CRC value has been obtained, control jumps to step <b>230</b>. If the calculated value A is not 0, then control goes to step <b>227</b>. In step <b>227</b>, the variable field value X is incremented to establish data for use temporarily as the variable field value X in following steps. After step <b>227</b>, in step <b>233</b>, CPU <b>2</b> accesses CRC conversion table <b>131</b> in memory <b>3</b> using addresses represented by a generator polynomial P, the bit length (data length) L of a data field, and bit numbers corresponding to a bit representation “1” in the variable field value X. CPU <b>2</b> reads corrective values E stored in all the corresponding addresses in CRC conversion table <b>131</b>, and XORs the read corrective values E to produce a calculated value B. After having produced the calculated value B, CPU <b>2</b> compares the calculated value B with the calculated value A in step <b>229</b>. If the calculated value B is equal to the calculated value A, then control goes to step <b>230</b>. If the calculated value B is not equal to the calculated value A, then control goes back to step <b>227</b>. In step <b>230</b>, the data is output in the sequence of the transmission frame to serial transmitting unit <b>4</b> under the control of CPU <b>2</b>. As a result, the serial transmission data TD is transmitted from serial transmitting unit <b>4</b> to the serial transmission path.</p>
<p id="p-0111" num="0110">CRC conversion table <b>131</b> used in the fourth embodiment will be described in detail below. <figref idref="DRAWINGS">FIG. 18</figref> shows by way of example an arrangement of CRC conversion table <b>131</b> where the bit length of the variable field is of 16 bits.</p>
<p id="p-0112" num="0111">In <figref idref="DRAWINGS">FIG. 18</figref>, CRC conversion table <b>131</b> contains indexes <b>132</b> of addresses corresponding to generator polynomials P, bit lengths L of data fields, and bit numbers N that are input. CRC conversion table <b>131</b> also contains fields <b>133</b> of corrective value data E, as with fields <b>33</b> shown in <figref idref="DRAWINGS">FIG. 9</figref>. Corrective value data E serve to indicate a bit to be inverted in a variable field value X as “1”.</p>
<p id="p-0113" num="0112">As with the method using the variable field, it is possible to specify a bit affected by the generator polynomial by changing the coefficients of the respective degrees of the generator polynomial. If the generator polynomial P(X) is expressed by P(X)=X<sup>2</sup>+1, then P=“101” may be input to CRC conversion table <b>131</b>. As with the previous embodiments described above, readout addresses are represented by generator polynomials P, bit lengths L of data fields, and bit numbers N, and corresponding corrective value data <b>133</b> are stored in advance in CRC conversion table <b>131</b>, so that calculated values B can be determined from CRC conversion table <b>131</b>.</p>
<p id="p-0114" num="0113">In <figref idref="DRAWINGS">FIG. 18</figref>, CRC conversion table <b>131</b> contains a plurality of low-level tables where corrective values E are stored as corrective value data <b>133</b> in association with respective bit numbers N which correspond to low-order addresses. One of the low-level tables is selected depending on the generator polynomial P and the bit length L of a data field which correspond to a high-order address. With CRC conversion table <b>131</b> being thus arranged, a combination of different generator polynomials and a plurality of data having different bit lengths can be processed without the need for generating a new table.</p>
<p id="p-0115" num="0114">In the above description, generator polynomials P are added to the addresses in the first embodiment. Similarly, the second embodiment may easily be modified to include generator polynomials P in the addresses. Specifically, in <figref idref="DRAWINGS">FIG. 12</figref>, the addresses <b>62</b> in CRC conversion table <b>62</b> may be changed so as to be determined by generator polynomials P, bit lengths L of data fields, and variable field values X, and calculated values B corresponding to generator polynomials P, bit lengths L of data fields, and variable field values X may be read from the CRC conversion table in step <b>231</b> shown in <figref idref="DRAWINGS">FIG. 11</figref>. With generator polynomials included in the addresses in the second embodiment, it is possible to determine variable field values such that the desired CRC value and the data of the data field will not conflict with each other and an unmatched error will not be caused, even when generator polynomials for CRC values are changed. The modified sequence can process data at a high speed which is the same as with the second embodiment.</p>
<p id="p-0116" num="0115">Similarly, the third embodiment may easily be modified to include generator polynomials P in the addresses. Specifically, the addresses <b>92</b> shown in <figref idref="DRAWINGS">FIG. 15</figref> may be changed so as to be determined by generator polynomials P, bit lengths L of data fields, and calculated values A, and variable field values X corresponding to generator polynomials P, bit lengths L of data fields, and calculated values A may be read from the CRC conversion table in step <b>232</b> shown in <figref idref="DRAWINGS">FIG. 14</figref>. With generator polynomials included in the addresses in the third embodiment, it is possible to determine variable field values such that the desired CRC value and the data of the data field will not conflict with each other and an unmatched error will not be caused, even when generator polynomials for CRC values are changed. The modified sequence can process data at a high speed which is the same as with the third embodiment.</p>
<p id="p-0117" num="0116">While preferred embodiments of the present invention have been described using specific terms, such description is for illustrative purposes only, and it is to be understood that changes and variations may be made without departing from the spirit or scope of the following claims.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-math idrefs="MATH-US-00001" nb-file="US07299398-20071120-M00001.NB">
<img id="EMI-M00001" he="8.13mm" wi="76.20mm" file="US07299398-20071120-M00001.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00002" nb-file="US07299398-20071120-M00002.NB">
<img id="EMI-M00002" he="7.79mm" wi="76.20mm" file="US07299398-20071120-M00002.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00003" nb-file="US07299398-20071120-M00003.NB">
<img id="EMI-M00003" he="7.79mm" wi="76.20mm" file="US07299398-20071120-M00003.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00004" nb-file="US07299398-20071120-M00004.NB">
<img id="EMI-M00004" he="7.79mm" wi="76.20mm" file="US07299398-20071120-M00004.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00005" nb-file="US07299398-20071120-M00005.NB">
<img id="EMI-M00005" he="7.79mm" wi="76.20mm" file="US07299398-20071120-M00005.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00006" nb-file="US07299398-20071120-M00006.NB">
<img id="EMI-M00006" he="8.13mm" wi="76.20mm" file="US07299398-20071120-M00006.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method to determine a value of a V-bit variable field so that a CRC value calculated based on a data field including the variable field according to a generator polynomial is equal to a desired CRC value, comprising the steps of:
<claim-text>establishing a temporary variable field value;</claim-text>
<claim-text>reading from a conversion table all corrective values which correspond to a bit number where a bit value of said temporary variable field value is 1, and exclusive-ORing the read corrective values to calculate a first calculated value, wherein each said corrective value in the conversion table corresponds to a given bit number in the variable field, each said corrective value identifying those bits in the CRC calculated based on the data field whose value is changed when a single bit in the given bit number in the variable field is changed; and</claim-text>
<claim-text>determining, when said first calculated value corresponds to the desired CRC value, said temporary variable field value to be a variable field value for obtaining the desired CRC value.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein each of the corrective values corresponds to a bit number N, each of the corrective values being produced by exclusive-ORing a CRC value of the data field for which the variable field value is 0 and a CRC value of the data field for which the variable field value is 2<sup>N</sup>, said table having a high-order address represented by a bit length of the data field and a low-order address represented by the bit number N, N representing an integer equal to or greater than 0 and less than the bit length of the variable field.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein each of the corrective values corresponds to a bit number N, each of the corrective values being produced by exclusive-ORing a CRC value of the data field for which the variable field value is 0 and a CRC value of the data field for which the variable field value is 2<sup>N</sup>, said table having a high-order address represented by the generator polynomial for the CRC code and a bit length of the data field and a low-order address represented by the bit number N, N representing an integer equal to or greater than 0 and less than the bit length of the variable field.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein said step of determining said temporary variable field value comprises the steps of:
<claim-text>comparing the first calculated value with a second calculated value, the second calculated value being calculated in advance by exclusive-ORing a CRC value of the data field for which the variable field value is 0 and the desired CRC value; and</claim-text>
<claim-text>determining a temporary variable field value corresponding to said first calculated value as a variable field value for obtaining said desired CRC value if said first calculated value and said second calculated value agree with each other.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method according to <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein each of the corrective values corresponds to a bit number N, each of the corrective values being produced by exclusive-ORing a CRC value of the data field for which the variable field value is 0 and a CRC value of the data field for which the variable field value is 2<sup>N</sup>, said table having a high-order address represented by a bit length of the data field and a low-order address represented by the bit number N, N representing an integer equal to or greater than 0 and less than the bit length of the variable field.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method according to <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein each of the corrective values corresponds to a bit number N, each of the corrective values being produced by exclusive-ORing a CRC value of the data field for which the variable field value is 0 and a CRC value of the data field for which the variable field value is 2<sup>N</sup>, said table having a high-order address represented by the generator polynomial for the CRC code and a bit length of the data field and a low-order address represented by the bit number N, N representing an integer equal to or greater than 0 and less than the bit length of the variable field.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. A method of generating a CRC code to determine a variable field value for equalizing a CRC value, which is calculated based on data including the variable field value of a variable field included in a data field according to a generator polynomial, to a desired CRC value, comprising the steps of:
<claim-text>establishing a temporary variable field value;</claim-text>
<claim-text>reading a first calculated value corresponding to said temporary variable field value from a conversion table which stores therein first calculated values corresponding to a variable field value X and produced by exclusive-ORing a CRC value where the variable field value is 0 and a CRC value where the variable field value is X, where X represents an integer equal to or greater than 1 and equal to or less than 2<sup>K</sup>−1 where K represents a bit length of the variable field; and</claim-text>
<claim-text>determining, when the read first calculated value corresponds to the desired CRC value, said temporary variable field value to be a variable field value for obtaining the desired CRC value.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method according to <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein said conversion table comprises a table which stores data of said first calculated values corresponding to said variable field value X and has a high-order address represented by a bit length of the data field and a low-order address represented by the variable field value X.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method according to <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein said conversion table comprises a table which stores data of said first calculated values corresponding to said variable field value X and has a high-order address represented by the generator polynomial and a bit length of the data field and a low-order address represented by the variable field value X.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method according to <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein said step of determining said temporary variable field value comprises the steps of:
<claim-text>comparing a second calculated value which is calculated in advance by exclusive-ORing a CRC value where the variable field value is 0 and the desired CRC value, with a first calculated value; and</claim-text>
<claim-text>determining a temporary variable field value corresponding to said first calculated value as a variable field value for obtaining said desired CRC value if said first calculated value and said second calculated value agree with each other.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method according to <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein said conversion table comprises a table which stores data of said first calculated values corresponding to said variable field value X and has a high-order address represented by a bit length of the data field and a low-order address represented by the variable field value X.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method according to <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein said conversion table comprises a table which stores data of said first calculated values corresponding to said variable field value X and has a high-order address represented by the generator polynomial and a bit length of the data field and a low-order address represented by the variable field value X.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. A method of generating a CRC code to determine a variable field value for equalizing a CRC value, which is calculated based on data including the variable field value of a variable field included in a data field according to a generator polynomial, to a desired CRC value, comprising the steps of:
<claim-text>calculating a first calculated value by exclusive-ORing a CRC value where the variable field value is 0 and the desired CRC value; and</claim-text>
<claim-text>reading a variable field value corresponding to a second calculated value equal to said first calculated value, as a variable field value for obtaining said desired CRC value, from a conversion table which stores therein variable field values X corresponding to second calculated values, wherein each of said second calculated values is produced by exclusive-ORing a CRC value where the variable field value is 0 and a CRC value where the variable field value is X, where X represents an integer equal to or greater than 1 and equal to or less than 2<sup>K</sup>−1 where K represents a bit length of the variable field.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The method according to <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein said conversion table comprises a table which stores data of said variable field values corresponding to said second calculated values and has a high-order address represented by a bit length of the data field and a low-order address represented by said second calculated values.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The method according to <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein said conversion table comprises a table which stores data of said variable field values corresponding to said second calculated values and has a high-order address represented by the generator polynomial and a bit length of the data field and a low-order address represented by said second calculated values.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. A method of generating data for forming a desired CRC code determining a variable field value of a variable field included in a data field so that a CRC value which is calculated based on data including the variable field value according to a generator polynomial, is equalized to said desired CRC value, the method comprising:
<claim-text>a first step of determining a first bit position data which is a position data indicating a bit at which a bit value is different between a fundamental CRC value and said desired CRC value, said fundamental CRC value is a CRC value which is obtained when the variable field value is set to “0”;</claim-text>
<claim-text>a second step of generating a conversion table which stores a second bit position data corresponding to at least a specific bit number, said second bit position data being a position data indicating a bit at which a bit value is different between said fundamental CRC value and a CRC value which is obtained when a bit value of a bit at said specific bit number in the variable field is set to “1”; and</claim-text>
<claim-text>a third step of determining, when a data obtained by combining the second bit position data using said conversion table agrees with said first bit position data, a variable field value having bit of “1” only at a bit number corresponding to said second bit position data which is used in the combining to be a variable field value for obtaining the desired CRC value.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The method according to <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein:
<claim-text>said second step comprises the steps of:</claim-text>
<claim-text>obtaining as a corrective value for each bit number a position data of a bit at which the CRC value which is obtained when a bit value of a bit at said specific bit number in the variable field is set to “1” differs from a CRC value in a case of the variable field value of “0,” and</claim-text>
<claim-text>generating the conversion table which stores each corrective value corresponding to at least the bit number, and</claim-text>
<claim-text>said third step comprises the steps of:</claim-text>
<claim-text>sequentially varying the variable field value to read the corrective value which corresponds to a bit number at which said varied variable field value is “1,”</claim-text>
<claim-text>when a number of bits of “1” at a same bit number where all the read corrective value are all “1” is an even number, obtaining a data in which only a bit corresponding to said same bit number is set to “1”, and</claim-text>
<claim-text>determining, when said data agrees with said first bit position data, a variable field value corresponding to said data to be the variable field value for obtaining the desired CRC value.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. A method of generating data for forming a desired CRC code determining a variable field value of a variable field included in a data field so that a CRC value which is calculated based on data including the variable field value according to a generator polynomial, is equalized to said desired CRC value, the method comprising:
<claim-text>a first step of determining a first bit position data which is a position data indicating a bit at which a bit value is different between a fundamental CRC value and said desired CRC value, said fundamental CRC value is a CRC value which is obtained when the variable field value is set to “0”;</claim-text>
<claim-text>a second step of obtaining for each variable field value a second bit position data, which is a position data of a bit at which a CRC value in a case of the variable field value being varied differs from a CRC value in a case of the variable field value of “0”, to generate a conversion table which stores each second bit position data corresponding to at least said varied variable field value; and</claim-text>
<claim-text>a third step of sequentially varying the variable field value to read the second bit position data corresponding to said varied variable field value, and determining, when the read second position data agrees with said first bit position data, a variable field value corresponding to the read second bit position data to be a variable field value for obtaining the desired CRC value.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. A method to determine a value of a V-bit variable field so that a CRC value calculated based on a data field including the variable field according to a generator polynomial is equal to a desired CRC value, comprising the steps of:
<claim-text>a) determining a first calculated value that identifies those bit positions in C<sub>0 </sub>that differ from bits in the same position in C<sub>T</sub>, where C<sub>0 </sub>is a CRC of the data field when the variable field is set to 0, and C<sub>T </sub>is the desired CRC;</claim-text>
<claim-text>b) providing a conversion table of a plurality of corrective values, each said corrective value corresponding to a given bit position in the variable field, each said corrective value indicating how a CRC generated from the data field with the variable field set to 0 except for the given bit position compares to C<sub>0</sub>;</claim-text>
<claim-text>c) determining a test variable field value;</claim-text>
<claim-text>d) determining a second calculated value by reading from the conversion table all of the corrective values for which the given bit position corresponds to a bit position of the test variable field value set to 1, and performing an exclusive-OR of all the read corrective values to calculate a first calculated value if there are a plurality of such read corrective values, and if only one corrective value is read, setting that corrective value as the second calculated value;</claim-text>
<claim-text>e) comparing the first calculated value to the second calculated value;</claim-text>
<claim-text>f) if a condition of the first and second calculated values being equal is met, setting the current test variable field value as the variable field value in the data field, and if the condition is not met, setting the test variable field value to a different value, and repeating steps d)-f) until the condition is met.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The method of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein step a) comprises performing an exclusive-OR of C<sub>0 </sub>and C<sub>T</sub>.</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. The method of <claim-ref idref="CLM-00020">claim 20</claim-ref>, wherein each said corrective value is calculated as an exclusive-OR of:
<claim-text>1) C<sub>0</sub>, and</claim-text>
<claim-text>2) CRC of the data field when the given bit position of the variable field is set to 1 and all other bit positions of the variable field are set to 0.</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>
