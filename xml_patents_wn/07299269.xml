<us-patent-grant lang="EN" dtd-version="v4.2 2006-08-23" file="US07299269-20071120.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20071106" date-publ="20071120">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>07299269</doc-number>
<kind>B2</kind>
<date>20071120</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>09885633</doc-number>
<date>20010619</date>
</document-id>
</application-reference>
<us-application-series-code>09</us-application-series-code>
<us-term-of-grant>
<us-term-extension>804</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>15</main-group>
<subgroup>16</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>709218</main-classification>
</classification-national>
<invention-title id="d0e53">Dynamically allocating data buffers to a data structure based on buffer fullness frequency</invention-title>
<references-cited>
<citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5884038</doc-number>
<kind>A</kind>
<name>Kapoor</name>
<date>19990300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709226</main-classification></classification-national>
</citation>
<citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>6047356</doc-number>
<kind>A</kind>
<name>Anderson et al.</name>
<date>20000400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711129</main-classification></classification-national>
</citation>
<citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6182086</doc-number>
<kind>B1</kind>
<name>Lomet et al.</name>
<date>20010100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>6205489</doc-number>
<kind>B1</kind>
<name>Kapoor</name>
<date>20010300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709245</main-classification></classification-national>
</citation>
<citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>6240463</doc-number>
<kind>B1</kind>
<name>Benmohamed et al.</name>
<date>20010500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709238</main-classification></classification-national>
</citation>
<citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>6308238</doc-number>
<kind>B1</kind>
<name>Smith et al.</name>
<date>20011000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>710310</main-classification></classification-national>
</citation>
<citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>6493837</doc-number>
<kind>B1</kind>
<name>Pang et al.</name>
<date>20021200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>6661431</doc-number>
<kind>B1</kind>
<name>Stuart et al.</name>
<date>20031200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>715733</main-classification></classification-national>
</citation>
<citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>6665704</doc-number>
<kind>B1</kind>
<name>Singh</name>
<date>20031200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709203</main-classification></classification-national>
</citation>
<citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>6792458</doc-number>
<kind>B1</kind>
<name>Muret et al.</name>
<date>20040900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709224</main-classification></classification-national>
</citation>
<citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>2002/0042821</doc-number>
<kind>A1</kind>
<name>Muret et al.</name>
<date>20020400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709223</main-classification></classification-national>
</citation>
<citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>2002/0056025</doc-number>
<kind>A1</kind>
<name>Qiu et al.</name>
<date>20020500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711133</main-classification></classification-national>
</citation>
<citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>2002/0073211</doc-number>
<kind>A1</kind>
<name>Lin et al.</name>
<date>20020600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709224</main-classification></classification-national>
</citation>
<citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>2002/0143575</doc-number>
<kind>A1</kind>
<name>Hansen et al.</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>705  2</main-classification></classification-national>
</citation>
<citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>2002/0143932</doc-number>
<kind>A1</kind>
<name>Quintero et al.</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709224</main-classification></classification-national>
</citation>
<citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>2002/0194338</doc-number>
<kind>A1</kind>
<name>Elving</name>
<date>20021200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709226</main-classification></classification-national>
</citation>
<citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>2004/0133637</doc-number>
<kind>A1</kind>
<name>Wesinger et al.</name>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709203</main-classification></classification-national>
</citation>
<citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>2006/0104268</doc-number>
<kind>A1</kind>
<name>Lee et al.</name>
<date>20060500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370389</main-classification></classification-national>
</citation>
<citation>
<nplcit num="00019">
<othercit>Java Network Programming, 2nd Edition, By Elliotte Rust Harold, Aug. 2000, ISBN 1-56592-870-9.</othercit>
</nplcit>
<category>cited by examiner</category>
</citation>
<citation>
<nplcit num="00020">
<othercit>Pointers, by Adam Drozdek, Data Structures and Algorithms in C++, 2001, pp. 9-20.</othercit>
</nplcit>
<category>cited by examiner</category>
</citation>
<citation>
<nplcit num="00021">
<othercit>An analysis of the TUX web server, Chuck Lever, Sun-Netscape Alliance, chuckl@netscape.com, Marius Aamodt Eriksen, Linux.com, marius@linux.com, Stephen P. Molloy, University of Michigan, smolloy@engin.umich.ed, CITI Technical Report 00-8, Nov. 16, 2000.</othercit>
</nplcit>
<category>cited by examiner</category>
</citation>
<citation>
<nplcit num="00022">
<othercit>Discovery of Web frequent patterns and user characteristics from Web access logs: a framework for dynamic Web personalization, Dua, S.; Cho, E.; lyengar, S.S.; Application-Specific Systems and Software Engineering Technology, 2000. Proceedings. 3rd IEEE Symposium on Mar. 24-25, 2000 pp. 3-8.</othercit>
</nplcit>
<category>cited by examiner</category>
</citation>
</references-cited>
<number-of-claims>23</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>709214</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709215</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709226</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709224</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709223</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709219</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>718704</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>707103</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>10</number-of-drawing-sheets>
<number-of-figures>10</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20020194338</doc-number>
<kind>A1</kind>
<date>20021219</date>
</document-id>
</related-publication>
</us-related-documents>
<parties>
<applicants>
<applicant sequence="001" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Elving</last-name>
<first-name>Christopher H.</first-name>
<address>
<city>Santa Clara</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
</applicants>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Hickman Palermo Truong &amp; Becker LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="02" rep-type="attorney">
<addressbook>
<last-name>Nicholas</last-name>
<first-name>Christian A.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</parties>
<assignees>
<assignee>
<addressbook>
<orgname>Sun Microsystems, Inc.</orgname>
<role>02</role>
<address>
<city>Palo Alto</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Cardone</last-name>
<first-name>Jason</first-name>
<department>2145</department>
</primary-examiner>
<assistant-examiner>
<last-name>Bhatia</last-name>
<first-name>Ajay M</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A method and apparatus for dynamically allocating data buffers to a data structure is provided. According to one aspect of the invention, the amount of log data that is being stored within data buffers associated with a data structure is monitored. Based on the amount of log data that is being stored within the data buffers, a determination is made as to whether additional data buffers need to be linked into the data structure. If it is determined that additional data buffers do need to be linked to the data structure, one or more free buffers are identified and linked into the data structure.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="244.43mm" wi="174.33mm" file="US07299269-20071120-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="232.33mm" wi="184.66mm" file="US07299269-20071120-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="250.95mm" wi="187.88mm" file="US07299269-20071120-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="245.96mm" wi="176.78mm" file="US07299269-20071120-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="251.04mm" wi="162.22mm" file="US07299269-20071120-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="213.36mm" wi="176.11mm" orientation="landscape" file="US07299269-20071120-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="266.11mm" wi="183.98mm" file="US07299269-20071120-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="247.82mm" wi="136.31mm" file="US07299269-20071120-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="250.87mm" wi="197.61mm" file="US07299269-20071120-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="255.27mm" wi="179.75mm" file="US07299269-20071120-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="255.95mm" wi="154.35mm" orientation="landscape" file="US07299269-20071120-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">FIELD OF THE INVENTION</heading>
<p id="p-0002" num="0001">The present invention relates generally to data management, and more specifically, to dynamically tuning the allocation data buffers.</p>
<heading id="h-0002" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0003" num="0002">The development of the Internet, and in particular the development of the World Wide Web (“WWW”), has created a mechanism whereby a tremendous amount of information has been made publicly available to anyone who has access to a client computer. For example, by interacting with a client computer, a user can connect to thousands, if not millions of different web sites to access and/or retrieve information that is contained within an electronic document or web page.</p>
<p id="p-0004" num="0003">To provide access to their web site, many businesses contract with an Internet Service Provider (“ISP”) to host the company's web site. For many companies, there is a strong desire to obtain statistical information regarding the traffic or “hits” on the company's web site. Thus, as part of hosting a company's web site, an ISP will typically collect a variety of statistical information about each of the hosted web sites. For example, an ISP may collect statistical information such as, the number of access requests (“hits”) that are received for a particular site, the volume of hits that are received by a web site during any particular time of day, the frequency that a certain page or image is accessed within the web site, along with other statistical information that may be deemed important for a particular web site.</p>
<p id="p-0005" num="0004">Traditionally, an ISP will typically assign a single web site domain to each web server. By assigning a single web site domain to each web server, the ISP can easily monitor and log statistical information about the activity that is associated with the web site domain. For example, <figref idref="DRAWINGS">FIG. 1A</figref> illustrates a system <b>100</b> in which a web server (SITE_A.COM WEB SERVER <b>102</b>) has been configured to host a single web site domain (“SITE_A.COM”). In this example, multiple server threads (SITE_A server threads <b>110</b>, <b>112</b>, <b>114</b>, <b>116</b>), executing in a memory address space <b>108</b>, service requests for access to the single web site domain SITE_A.COM. In addition, in order to monitor the activity that is associated with the SITE_A.COM domain, as part of servicing the requests from client devices (<b>130</b>, <b>132</b>, <b>134</b>, <b>136</b>), SITE_A server threads <b>110</b>, <b>112</b>, <b>114</b>, <b>116</b>, repeatedly write SITE_A access information into buffers <b>120</b>, <b>122</b>, <b>124</b>, <b>126</b>. Thereafter, because each of the buffers <b>120</b>, <b>122</b>,<b>124</b>, <b>126</b>, are guaranteed to only contain access information for the single web site domain (SITE_A.COM), if any of the buffers <b>120</b>, <b>122</b>, <b>124</b>, <b>126</b> become full, the contents of the buffer may be stored to a single file (for example, siteA.com log file <b>106</b> on physical disk <b>104</b>), without having to determine which web site domain was associated with the request. Thereafter, statistical information may be later generated for SITE_A.COM domain based on the access information that was stored to physical disk <b>104</b>.</p>
<p id="p-0006" num="0005">However, while the practice of assigning a single web site domain to a web server can significantly reduce the complexity of generating and logging statistical access information for a particular web site domain, the practice also introduces a significant scalability problem. For example, using the described configuration, for an ISP to be able to host a hundred different web site domains, the ISP would need to purchase and maintain a hundred different web servers. For most ISPs, maintaining a one-to-one relationship between the number of web servers and the number of web site domains that the ISP can support is both inefficient and financially impracticable.</p>
<p id="p-0007" num="0006">In an attempt to address the scalability problem, some web servers have been configured to include multiple server threads that execute within separate processes within their own individual memory space. By executing multiple server threads as separate processes within their own individual memory space, certain complexities that are typically associated with generating and logging statistical access information for multiple web site domains may potentially be reduced.</p>
<p id="p-0008" num="0007">For example, <figref idref="DRAWINGS">FIG. 1B</figref> illustrates a system <b>150</b> that includes a web server <b>152</b> that consists of multiple server threads (<b>160</b>, <b>162</b>, <b>164</b>, <b>166</b>) each of which execute in a separate memory space <b>158</b><i>a</i>-<i>d</i>, respectively. In addition, server threads <b>160</b>, <b>162</b>, <b>164</b>, <b>164</b>, are respectively associated with buffers <b>170</b>, <b>172</b>, <b>174</b> and <b>176</b>, which are each used to buffer access information for a distinct web site domain (SITE_A.COM, SITE_B.COM, SITE_C.COM, SITE_D.COM), and to store the information to disk <b>154</b> within a corresponding log file <b>156</b><i>a</i>-<i>d</i>. By servicing multiple web sites in a single web server, certain inefficiencies that are associated with the system <b>100</b> depicted in <figref idref="DRAWINGS">FIG. 1A</figref> can be reduced. In addition, because each server thread (<b>160</b>, <b>162</b>, <b>164</b>, <b>166</b>) executes in a separate memory address space and services access requests for only a single web site domain, the problem of ensuring that log data for one site is not incorrectly stored in the physical log file of another can generally be reduced.</p>
<p id="p-0009" num="0008">However, a significant drawback with the configuration of system <b>150</b> is that by requiring specific processes to be used to service specific web site domains, a scalability problem is again introduced in the system. For example, if SITE_A and SITE_B receive heavy traffic while SITE_C and SITE_D typically receive little or no traffic, up to fifty percent (50%) of system <b>150</b> resources (e.g., server threads, buffers, etc.) may sit idle and thus be wasted. In addition, system <b>150</b> requires that each web site domain be associated with its own process, which in the case of multiple web site domains can cause the system resources to quickly become depleted. Still further, the overhead that is associated with swapping between the different memory address spaces for each of the server threads can itself be a significant drain on the system resources.</p>
<p id="p-0010" num="0009">Based on the foregoing, there is a clear need for an improved mechanism that allows multiple web site domains to be efficiently serviced by a single web server.</p>
<heading id="h-0003" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0011" num="0010">A method and apparatus are provided for dynamically allocating data buffers to a buffer array. According to one aspect of the invention, the amount of log data that is being stored within data buffers associated with a buffer array is monitored. Based on the amount of log data that is being stored within the data buffers, a determination is made as to whether additional data buffers need to be linked into the buffer array. If it is determined that additional data buffers do need to be linked to the buffer array, one or more free buffers are identified and linked into the buffer array.</p>
<p id="p-0012" num="0011">According to another aspect, dynamic allocation of data buffers in a web server is provided. In this aspect, a web server in configured to service requests for multiple web site domains. A buffer file, that is assigned to a particular web site domain within the multiple web site domains, includes a buffer array that maintains links to data buffers that are used to buffer log data. The buffer log data is based on content requests that are directed to the particular web site domain. Allocation of data buffers to the buffer array is dynamically controlled based on the number of content requests that are received by the web server for content that is associated with the particular web site domain.</p>
<p id="p-0013" num="0012">The invention also encompasses a computer-readable medium, a computer data signal embodied in a carrier wave, and an apparatus configured to carry out the foregoing steps. Other features and aspects will become apparent from the following description and the appended claims.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0014" num="0013">The present invention is illustrated by way of example, and not by way of limitation, in the figures of the accompanying drawings and in which like reference numerals refer to similar elements and in which:</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 1A</figref> depicts a conventional system in which a web server is configured to host a single web site domain;</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 1B</figref> depicts another conventional system in which a web server is configured to service multiple web site domains by executing separate threads, each within its own memory space;</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 2A</figref> illustrates an example of a data buffering system in which certain embodiments of the invention may be utilized;</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 2B</figref> is a flow diagram that illustrates an example of a method for processing requests for content that is associated with different web site domains;</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 3A</figref> is a block diagram of a buffer file that depicts certain internal details thereof.</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 3B</figref> is a flow diagram that illustrates an example of a method of selecting a data buffer within a buffer file for writing log data;</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 3C</figref> is a flow diagram that further illustrates an example of a method of selecting a data buffer within a buffer file for writing log data;</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 4A</figref> is a block diagram that further illustrates certain internal details that may be included in the web server described in <figref idref="DRAWINGS">FIG. 2A</figref>;</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 4B</figref> is a flow diagram that illustrates an example of a method for identifying a log file in secondary memory and for writing the log data into the identified log file in secondary memory; and</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 5</figref> is a block diagram of a computer system with which an embodiment may be carried out.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DETAILED DESCRIPTION OF THE INVENTION</heading>
<p id="p-0025" num="0024">An efficient buffering mechanism is provided for buffering information that is associated with requests for electronic content. In the following description, for the purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent, however, to one skilled in the art that the present invention may be practiced without these specific details. In other instances, well-known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.</p>
<heading id="h-0006" level="1">Operational Context</heading>
<p id="p-0026" num="0025">A tuning mechanism that dynamically allocates data buffers is provided. In one embodiment, a web server is configured to service requests for content that is located in different web site domains. To service the requests, the web server employs a connection queue that receives requests, from multiple clients over a network, for access to content located in multiple web site domains. Upon receipt, the requests are queued within a connection queue for service by one of a plurality of server threads. The server threads are configured as virtual servers that allow them to service requests for different web site domains by removing the requests from the connection queue and loading the configuration data that is associated with the specific web site domain. As part of servicing a request, each server thread generates log data based on the content that is being requested by the particular client. The server thread then interfaces with a log manager to identify a buffer file that is configured for buffering log data that is associated with the specific web site domain. To buffer the log data, an efficient buffering scheme is used to select a buffer within the buffer file and to write the log data into the selected buffer. Thereafter, the log data is written into a log file in secondary memory that is associated with the specific web site domain.</p>
<heading id="h-0007" level="1">System Overview</heading>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. 2A</figref> illustrates an example of a data buffering system <b>200</b> in which certain embodiments of the invention may be used. In this example, system <b>200</b> includes a plurality of client devices (<b>232</b>, <b>234</b>, <b>236</b>, <b>238</b>), a network <b>248</b>, a web server <b>202</b> and a secondary memory, illustrated herein as disk <b>230</b>.</p>
<p id="p-0028" num="0027">Network <b>248</b> may represent a private and/or public network, such as the Internet, and comprised of a one or more LANs and/or WANs that are configured for communicating between multiple computing devices. In addition, network <b>248</b> may be formed using a variety of different communication mediums, including but not limited to electrical wire or cable, optical, or wireless connection mediums. In one embodiment, network <b>248</b> is configured as a packet-switched network that can support such protocols as the HyperText Transport Protocol (HTTP) or the Wireless Access Protocol (WAP).</p>
<p id="p-0029" num="0028">Client devices <b>232</b>-<b>238</b> represent computing devices that are capable of requesting information or content that is available on one or more web sites. For example, client devices <b>232</b>-<b>238</b> may represent a personal computer (PC), a workstation, a cellular phone, a PDA, or other device that is capable of communicating with web server <b>202</b> over network <b>248</b>. In certain embodiments, client devices <b>232</b>-<b>238</b> are configured to execute a browser type application, such as Netscape Navigator®, or other similar type of WAP or HTML browser application.</p>
<p id="p-0030" num="0029">Web Server <b>202</b> is a computer, or a group of hardware and/or software components or processes that cooperate or execute in one or more computer systems. In one embodiment, web server <b>202</b> is configured to service requests for multiple web site domains. For example, web server <b>202</b> may be configured to service requests for content that is associated with the web site domains SITE_A.COM, SITE_B.COM, SITE_C.COM, and SITE_D.COM.</p>
<p id="p-0031" num="0030">As depicted, web server <b>202</b> includes a connection queue <b>208</b>, a plurality of server threads (<b>210</b>,<b>212</b>,<b>214</b>,<b>216</b>) that execute as virtual servers <b>204</b>, and a plurality of buffer files (<b>218</b>,<b>220</b>,<b>224</b>,<b>226</b>) that form part of a log manager mechanism <b>206</b>. In one embodiment, connection queue <b>208</b>, server threads (<b>210</b>,<b>212</b>,<b>214</b>,<b>216</b>), and buffer files (<b>218</b>,<b>220</b>,<b>224</b>,<b>226</b>) execute within a single memory address space <b>228</b>.</p>
<p id="p-0032" num="0031">In this example, connection queue <b>208</b> is configured to receive client requests for access to content that is located on web site domains that are serviced by web server <b>202</b>. Upon receiving a request, connection queue <b>208</b> queues the request for service by one of the virtual servers <b>204</b>. Thereafter, an available server thread (“servicing thread”) “picks-up” the queued request and determines the location of the content that is being requested by the client device. Based on the location of the content that has been requested by the client device, the servicing thread loads configuration data for a particular web site domain and generates a set of log data that provides information about the requested content. The servicing thread then identifies, from among the plurality of buffer files (<b>218</b>,<b>220</b>,<b>224</b>,<b>226</b>), a buffer file that has been assigned to buffer log data for the particular web site domain. A buffer within the identified buffer file is then selected for writing the set of log data. As is explain in greater detail below, log manager <b>206</b> employs an efficient data buffering scheme for managing the number of available buffers within a buffer file and for selecting the particular buffer that is to be used for storing the set of log file.</p>
<p id="p-0033" num="0032">Subsequent to writing the log data into a particular buffer within a buffer file, the log data is stored within a log file that is maintained on disk <b>230</b>. Disk <b>230</b> represents a secondary storage and/or memory that is distinct from the memory that is used for buffering the log data. In one embodiment, disk <b>230</b> represents a nonvolatile storage device that is accessible by web server <b>202</b> for storing log data associated with different web site domains. For example, disk <b>230</b> may represent a variety of different secondary storage devices and/or units including, but is not limited to, internal or external disk drives, writeable CD or DVD storage units, or floppy disk or magnetic tape drive units. In addition, although disk <b>230</b> is depicted as being separate from web server <b>202</b>, disk <b>230</b> may also be configured as part of web server <b>202</b>.</p>
<p id="p-0034" num="0033">In one embodiment, disk <b>230</b> maintains a plurality of log files (<b>240</b>,<b>242</b>,<b>244</b>,<b>246</b>) that are used to store log data that is associated with a particular web site domain. For example, SITE_A.COM log file <b>240</b> is used to store log data that is associated with requests for content that is located on the web site domain SITE_A.COM.</p>
<heading id="h-0008" level="1">Processing Content Requests</heading>
<p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. 2B</figref> is a flow diagram that illustrates an example of a method for processing requests for content that is associated with different web site domains. For explanation purposes, <figref idref="DRAWINGS">FIG. 2B</figref> is described in reference to the components of <figref idref="DRAWINGS">FIG. 2A</figref>.</p>
<p id="p-0036" num="0035">At block <b>252</b>, a request is received for access to content that is associated with a particular web site domain. For explanation purposes, it is assumed that the received request is from client <b>232</b>, that the request is for access to content that is associated with the web site domain “SITE_A.COM,” and that the request has been queued within connection queue <b>208</b>.</p>
<p id="p-0037" num="0036">At block <b>254</b>, a server thread is assigned and/or scheduled to service the request. For example, although any available server thread (<b>210</b>,<b>212</b>,<b>214</b>,<b>216</b>) may be assigned to service the request, for this example it is assumed that server thread <b>214</b> has been assigned the task of servicing the particular request (i.e., designated as the servicing thread).</p>
<p id="p-0038" num="0037">At block <b>256</b>, the servicing thread loads the appropriate configuration data for the web site domain that is associated with the request. For example, upon detecting that the request is associated with the web site domain SITE_A.COM, server thread <b>214</b> loads the corresponding configuration data for the web site domain SITE_A.COM. In one embodiment, by loading the SITE_A.COM configuration data, server thread <b>214</b> is temporarily configured as a server thread dedicated to servicing requests for content that is available within the SITE_A.COM domain.</p>
<p id="p-0039" num="0038">At block <b>258</b>, log data is generated based on the content that was requested by client <b>232</b>. For example, the generated log data may include, among other things, information that identifies a particular web page that was requested within the SITE_A.COM domain.</p>
<p id="p-0040" num="0039">At block <b>260</b>, a buffer file that is associated with the SITE_A.COM domain is identified. In this example, SITE_A buffer file <b>218</b> is identified by server thread <b>214</b> as containing buffers that are to be used for buffering log data that is associated with the SITE_A.COM domain.</p>
<p id="p-0041" num="0040">At block <b>262</b>, which is described in further detail below with respect to <figref idref="DRAWINGS">FIGS. 3A-3C</figref>, an efficient buffering scheme is used to select a particular buffer within the identified buffer file (block <b>264</b>) and to write the log data into the selected data buffer (block <b>266</b>).</p>
<p id="p-0042" num="0041">At block <b>268</b>, which is described in further detail below with respect to <figref idref="DRAWINGS">FIG. 3A</figref> and <figref idref="DRAWINGS">FIGS. 4A-4B</figref>, a physical log file that is associated with the buffer file is subsequently identified (block <b>270</b>) and the information contained within the selected data buffer is stored into the identified physical file (block <b>272</b>). For this example, the SITE_A.com log file <b>240</b> on disk <b>230</b> is identified as the appropriate physical log file and thus used as the physical log file for storing the log data contain within the data buffer of SITE_A buffer file <b>218</b>.</p>
<heading id="h-0009" level="1">Selecting a Buffer for Buffering Log Data</heading>
<p id="p-0043" num="0042"><figref idref="DRAWINGS">FIG. 3A</figref> is a block diagram of SITE_A buffer file <b>218</b> showing certain internal details thereof. As depicted in the example of <figref idref="DRAWINGS">FIG. 3A</figref>, SITE_A buffer file <b>218</b> includes a name identifier <b>302</b>, a file descriptor (FD) <b>304</b>, a last buffer index <b>306</b>, a buffer array <b>308</b> and a ready-to-write buffer list <b>310</b>.</p>
<p id="p-0044" num="0043">Name identifier <b>302</b> identifies the domain site that has been assigned to the particular buffer file. In this example, name identifier <b>302</b> indicates that buffer file <b>218</b> has been assigned to buffer log data for the web site domain SITE_A.COM.</p>
<p id="p-0045" num="0044">File descriptor <b>304</b> identifies the physical log file that is to be used to store the buffered log data. In this example, file descriptor <b>304</b> identifies the SITE_.com log file <b>240</b> on disk <b>230</b> as the physical log file that has been designated to the buffered log data that is associated with SITE_A buffer file <b>218</b>.</p>
<p id="p-0046" num="0045">Buffer array <b>308</b> includes an array of buffers (<b>312</b>,<b>314</b>,<b>316</b>,<b>318</b>,<b>320</b>) that can be used for storing log data. For explanation purposes, a set of array index values <b>330</b> is used to help identify the different indices within buffer array <b>308</b>. In one embodiment, each index is associated with either zero or one buffer, which may or may not be available for buffering log data. For example, the entry in buffer array <b>308</b> that is associated with index “5” is currently linked to buffer <b>318</b>. Alternatively, the entry in buffer array <b>308</b> that is associated with index “4” is not currently linked to any buffer.</p>
<p id="p-0047" num="0046">A variety of techniques and/or algorithms may be used to determine the size of buffer array <b>308</b>. For example, the number of array entries in buffer array <b>308</b> may be dependent on, including possibly a combination thereof, the number of CPUs that exist within the system, the number of server threads that can potentially write into buffers that are associated with buffer array <b>308</b>, the number of server threads that can be simultaneously active at any point in time, etc. In certain embodiments, the length of buffer array <b>308</b> may be dynamically adjusted to increase or decrease the number of buffer array entries.</p>
<p id="p-0048" num="0047">As further depicted in this example, each entry in buffer array <b>308</b> is associated with a flag that indicates whether a particular index in buffer array <b>308</b> is likely to contain a buffer that is currently available for writing log data. For example, the flag value of “1” of index “2” of buffer array <b>308</b> indicates that buffer <b>314</b> is not likely to be currently available for storing log data (“busy”), while the flag value of “0” of index “3” of buffer array <b>308</b> indicates that buffer <b>316</b> is likely to be currently available for storing log data (“not busy”).</p>
<p id="p-0049" num="0048">In one embodiment, last buffer index <b>306</b> identifies the index associated with the last buffer that was selected to store log data. For example, the current value (“2”) of last buffer index <b>306</b> indicates that the buffer associated with index “2” in buffer array <b>308</b> (buffer <b>314</b>) was last selected to log data. Alternatively, last buffer index <b>306</b> may be used to identify the index that was first tried last time a thread attempted to write into a buffer with the buffer array. For example, if the last buffer index <b>306</b> currently has a value of “2”, when a thread first attempts to write a particular set of data into a buffer in buffer array <b>308</b>, the value of last buffer index <b>306</b> is incremented to equal “3”. The thread then determines whether there is a buffer associated with index “3” that is available for writing data. If the thread determines that index “3” is not associated with an available buffer, then the thread next determines whether there is a buffer associated with index “4” that is available for writing data. However, in this case, last buffer index <b>306</b> is not incremented to the value “4” but instead retains the value of the index that was first used in attempting to write the particular set of data to a buffer.</p>
<p id="p-0050" num="0049">Finally, ready-to-write buffer list <b>310</b> represents a list of buffers that have been removed from buffer array <b>308</b> and which contain log data that is ready to be written out to disk. An example is provided below that describes how the components of SITE_A buffer file <b>218</b> may be used to provide an efficient data buffering scheme.</p>
<p id="p-0051" num="0050">Although this example illustrates the use of a buffer array <b>308</b>, this is done merely for illustrative purposes as a variety of different data structures may be used for implementing the desired functions. For example, the buffers associated with a buffer file could be placed in a list instead of an array with the list position being used to index the most-recently accessed buffer within the list. Additionally, buffer file <b>218</b> is used as merely an example of a type of buffer management structure that may be used to implement the described functions. Thus, embodiments of the invention are not limited to any particular type of buffer management structure.</p>
<heading id="h-0010" level="1">Selecting a Data Buffer for Writing Log Data</heading>
<p id="p-0052" num="0051"><figref idref="DRAWINGS">FIG. 3B</figref> and <figref idref="DRAWINGS">FIG. 3C</figref> is a flow diagram that illustrates an example of a method for selecting a data buffer within a buffer file for writing log data (see block <b>262</b> of FIGS. <b>2</b>B). For explanation purposes, <figref idref="DRAWINGS">FIG. 3B</figref> and <figref idref="DRAWINGS">FIG. 3C</figref> are described in reference to the components of <figref idref="DRAWINGS">FIG. 3A</figref>. Further to this example, it is assumed that SITE_A buffer file <b>218</b> was identified as the buffer file for selecting the particular data buffer that is to be used to store the log data.</p>
<p id="p-0053" num="0052">At block <b>352</b>, the “initial” value of the last buffer index variable is read from the buffer file. As used herein, the “initial” value represents the value of the last buffer index at the time a server thread initiates the process of selecting a buffer for the particular set of log data. In addition, as used herein, the “incremented initial” value is equal to the initial value after it has been incremented once during the particular selection process. For this example, the “initial” value for the last buffer index <b>306</b> is equal to “2” and the “incremented initial” value for the last buffer index <b>306</b> is equal to</p>
<p id="p-0054" num="0053">At block <b>354</b> the last buffer index value is incremented to point to the next index within the buffer array. For example, the value of last buffer index <b>306</b> is incremented so as to equal the value “3”. By incrementing the last buffer index value to point to a next index within the buffer file, a mechanism is provided that can increase the chance that the buffer associated with the current index value is likely available for storing log data. In certain embodiments, the MOD function may be used to cause the incrementing of the last buffer index <b>306</b> to have a value that wraps around the length of the buffer array <b>308</b>. For example, if the last buffer index <b>306</b> has a value of “6,” incrementing the last buffer index <b>306</b> will cause the last buffer index <b>306</b> to have a value of “0”.</p>
<p id="p-0055" num="0054">At block <b>356</b>, a test is made to determine whether the flag for the buffer array entry that is associated with the current value of the last buffer index value is set to busy. For example, the flag for the buffer array entry that is associated with the current value of the last buffer index value (“3”) is tested to determine if it is set to busy. If it is determined that the flag is not set to busy (for example, the flag equals “0”), control proceeds to block <b>357</b>.</p>
<p id="p-0056" num="0055">Alternatively, if at block <b>356</b> it is determined that the flag is set to busy, at block <b>358</b> a test is made to determine whether all of the buffer entries in the buffer array have been checked for locating an available data buffer. If it is determined that the buffer array includes additional entries that have not yet been checked, control proceeds to block <b>354</b> to again increment the last buffer index value. Conversely, if it is determined that the buffer array does not include any additional entries that have not yet been checked, at block <b>360</b>, the buffer array entry that is associated with the incremented initial value of the last buffer index value is selected as the “selected” buffer array entry. Control then proceeds to block <b>362</b>. For example, if it is determined that no entry in buffer array <b>308</b> is associated with a flag that is not set to busy, the buffer array entry that is associated with the incremented initial value (“3”) is selected and control then proceeds to block <b>362</b>.</p>
<p id="p-0057" num="0056">At block <b>357</b>, the buffer array entry that is associated with the current value of the last buffer index variable is selected as the “selected” buffer array entry. For explanation purposes, it shall be assumed that in this example, last buffer index <b>306</b> has a current value equal to “3” and that the buffer array entry associated with the array index of “3” has been selected as the selected buffer array entry.</p>
<p id="p-0058" num="0057">At block <b>362</b>, a test is made to determine whether the selected buffer array entry is currently linked to a buffer. As is explained in further detail below, buffers that contain log data that is to be written to disk may be removed from the buffer array <b>308</b> and inserted into the ready-to-write buffer list <b>310</b>. In this example, the buffer array entry that is associated with the array index value “3” is currently linked to buffer <b>316</b>. On the other hand, the buffer array entry that is associated with the array index value “4” is not currently linked to any buffer.</p>
<p id="p-0059" num="0058">If at block <b>362</b> it is determined that the selected buffer array entry is currently linked to a buffer, then the buffer is selected as the “selected” buffer and control proceeds to block <b>366</b>. Conversely, if it is determined that the selected buffer array entry is not currently linked to a buffer, then at block <b>364</b> a buffer is retrieved from a free buffer pool (for example, free buffer pool <b>408</b> in <figref idref="DRAWINGS">FIG. 4A</figref>) and linked into the buffer array entry, thus becoming the “selected” buffer. In this example, because the selected buffer array entry (entry “3”) is currently linked to buffer <b>316</b>, buffer <b>316</b> is selected as the selected buffer within buffer array <b>308</b>.</p>
<p id="p-0060" num="0059">At block <b>366</b>, an attempt is made to obtain a mutually exclusive lock on the selected buffer.</p>
<p id="p-0061" num="0060">At block <b>368</b>, it is determined whether the selected buffer is currently locked by another server thread. For example, if the attempt to obtain the mutually exclusive lock on the selected buffer fails, the selected buffer is likely to be locked by another server thread that is attempting to write its log data into the same selected buffer. If at block <b>368</b> it is determined that the buffer is not currently locked by another server thread, control proceeds to block <b>372</b> in <figref idref="DRAWINGS">FIG. 3C</figref>.</p>
<p id="p-0062" num="0061">Alternatively, if at block <b>368</b> it is determined that the buffer is currently locked by another server thread, then at block <b>370</b> a wait process is initiated to wait for the current lock on the buffer to be released. Thereafter, controls proceeds to block <b>372</b>.</p>
<p id="p-0063" num="0062">At block <b>372</b>, the flag associated with the selected buffer array entry is set to busy. For example, the flag associated with the selected buffer array entry is set equal to “1” in order to inform other server threads that the buffer associated with the selected buffer array entry (buffer <b>316</b>) is currently not available for storing log data.</p>
<p id="p-0064" num="0063">At block <b>374</b>, the selected data buffer is locked for writing log data into the data buffer. For example, a mutually exclusive lock is executed on buffer <b>316</b>.</p>
<p id="p-0065" num="0064">At block <b>376</b>, the log data is written into the selected buffer. For example, the log data generated by server thread <b>214</b> is written into buffer <b>316</b> in SITE_A buffer file <b>218</b>.</p>
<p id="p-0066" num="0065">At block <b>378</b>, a check is made to determine whether the selected buffer should be removed from the buffer array. For example, in one embodiment, the determination of whether the selected buffer should be removed from the buffer array is made based on the amount of free space that is left within the selected buffer. In another embodiment, the determination of whether the selected buffer should be removed from the buffer array may be based on the amount of time that the selected buffer has remained linked within the buffer array <b>308</b>.</p>
<p id="p-0067" num="0066">If at block <b>378</b> it is determined that the selected buffer should be removed from the buffer array, the selected data buffer is moved to the ready-to-write buffer list (block <b>380</b>) and the lock on the selected data buffer is released (block <b>382</b>). Alternatively, if at block <b>378</b> it is determined that the selected buffer should not be removed from the buffer array, the lock on the selected data buffer is released (block <b>384</b>) and the flag associated with the selected buffer array entry is cleared (block <b>386</b>).</p>
<p id="p-0068" num="0067">For example, if it is determined that selected data buffer <b>316</b> should be removed from the buffer array <b>308</b>, selected data buffer <b>316</b> is moved to the ready-to-write buffer list <b>310</b> and the mutually exclusive lock on selected data buffer <b>316</b> is released. Alternatively, if at block <b>378</b> it is determined that selected buffer <b>316</b> should not be removed from the buffer array <b>308</b>, the mutually exclusive lock on selected data buffer <b>316</b> is released and the flag associated with the selected buffer array entry (buffer array entry for array index “3”) is set equal to “0”.</p>
<p id="p-0069" num="0068">Although this example, as with certain other examples within the specification, illustrate a specific sequence of steps for performing a particular process and/or function. However, unless specifically stated in the disclosure, embodiments of the invention are not limited to any particular order of carrying out such steps. For example, the step of setting the flag associated with the selected buffer array entry to busy (block <b>372</b>), may in certain embodiments, be performed just prior to determining whether the selected buffer array entry is currently linked to a buffer (block <b>362</b>). Thus, the examples described herein are used for illustrative and/or explanation purposes only and should not be viewed in anyway as limiting the scope of embodiments of the invention.</p>
<heading id="h-0011" level="1">Global and Local Logging Threads</heading>
<p id="p-0070" num="0069">In certain embodiments, a group of one or more logging threads are used to write log data to a secondary storage. As described in further detail below, the logging threads provide a tuning mechanism for dynamically adjusting the number of buffers that are associated with each buffer file (<b>218</b>,<b>220</b>,<b>224</b>,<b>226</b>). In certain embodiments, by dynamically tuning the number of buffers that are associated with each buffer file, an efficient buffering system is provided that can dynamically adjust the available resources based on the bandwidth needs of web site domains that are being serviced by the web server.</p>
<p id="p-0071" num="0070">For example, <figref idref="DRAWINGS">FIG. 4A</figref> is a block diagram that further illustrates certain internal details that may be included in web server <b>202</b> as previously described in <figref idref="DRAWINGS">FIG. 2A</figref>. As depicted in the example, web server <b>202</b> includes a group of one or more logging threads (local logging threads <b>402</b>, <b>404</b> and global logging thread <b>406</b>) that are used to write log data from data buffers in log manager <b>206</b> to logs files (<b>240</b>,<b>242</b>,<b>244</b>,<b>246</b>) in disk <b>230</b>. In addition, in certain embodiments, the logging threads (local logging threads <b>402</b>, <b>404</b> and global logging thread <b>406</b>) are responsible for either re-linking emptied data buffers into the buffer array of their assigned buffer file, or for inserting emptied data buffers into the free buffer pool <b>408</b>.</p>
<p id="p-0072" num="0071">In one embodiment, logging threads (<b>402</b>,<b>404</b>,<b>406</b>) are responsible for actively monitoring the number of requests that are directed to web site domains that are being serviced by the web server (“domain traffic”). Based on the domain traffic for a particular web site domain, the logging threads (<b>402</b>,<b>404</b>,<b>406</b>) can dynamically adjust the number of data buffers that are associated with the buffer file for that particular web site domain. For example, by monitoring the number of buffers that are moved into the buffer full list <b>310</b>, local logging thread <b>402</b> can determine the throughput demands that are currently required for the web site domain SITE_A.COM. Based on the throughput demands, local logging thread <b>402</b> can dynamically adjust the certain variables that can affect the number of resources that are available for servicing requests that are directed to the web site domain SITE_A.COM. For example, based on the throughput demands for web site domain SITE_A.COM, local logging thread <b>402</b> can dynamically adjust the resources (bandwidth) that is allocated to SITE_A.COM by tuning such factors as: (1) the number of entries in buffer array <b>308</b>; (2) the minimum or maximum number of data buffers that are to be consistently linked to buffer array <b>308</b>; (3) whether a buffer is to be re-linked into buffer array after its contents are written to secondary memory; along with other factors that may influence the resources that are allocated to SITE_A.COM.</p>
<p id="p-0073" num="0072">In certain embodiments, web site domains that are experiencing a large amount of traffic may be assigned a local logging thread to reduce the contention that can exist in a global logging thread that is configured to service multiple web site domains. For example, as depicted in <figref idref="DRAWINGS">FIG. 4A</figref>, local logging threads <b>402</b> and <b>404</b> have respectively been assigned to service SITE_A buffer file <b>218</b> (web site domain SITE_A.COM) and SITE_D buffer file <b>226</b> (web site domain SITE_D.COM). Alternatively, global logging thread <b>406</b> is assigned to service both SITE_B buffer file <b>220</b> (web site domain SITE_B.COM) and SITE_C buffer file <b>224</b> (web site domain SITE_C.COM). Thus, resources associated with the SITE_B.COM and SITE_C.COM domains will be required to compete with each other for certain data logging resources.</p>
<heading id="h-0012" level="1">Moving Buffer to a Ready-to-Write Buffer List</heading>
<p id="p-0074" num="0073">As previously described, buffers that contain log data that are ready to be written to secondary storage (“ripe buffers”) are removed from their associated buffer array and inserted into a ready-to-write buffer list within the buffer log file. In one embodiment, the logging thread that has been assigned to the particular buffer file is configured to identify and remove ripe buffers from the buffer array and to insert the buffers into the ready-to-write buffer list for subsequent storing to secondary memory.</p>
<p id="p-0075" num="0074">A variety of methods and/or techniques may be used for identifying ripe buffers. For example, a buffer that is completely full, or a buffer that has only a limited amount of free space, (for example a certain number of free blocks or bytes, or a certain percentage of total free space), may be identified as a ripe buffer and thus removed and inserted into a ready-to-write buffer list.</p>
<p id="p-0076" num="0075">Additionally, in certain embodiments, buffers that are considered “stale” (i.e., buffers that contain data but that have not been removed from the buffer array for a particular amount of time), may be marked as ripe buffers and thus removed and inserted into the ready-to-write buffer list. For example, logging thread <b>402</b> may be configured to periodically identify and remove buffers that contain log data and that have remained attached to the buffer array <b>308</b> for a particular period of time. Alternatively, or in addition to, logging thread <b>402</b> may be configured to reduce the amount of time that log data remains within a buffer by removing and inserting into the ready-to-write buffer list <b>310</b> all buffers that contain log data as of a particular time of day (for example, 2:00 am).</p>
<heading id="h-0013" level="1">Sequence for Storing Log Data to Secondary Memory</heading>
<p id="p-0077" num="0076"><figref idref="DRAWINGS">FIG. 4B</figref> is a flow diagram <b>450</b> that illustrates an example of a method for identifying a log file in secondary memory and for writing the log data into the identified log file in secondary memory (see block <b>268</b> of <figref idref="DRAWINGS">FIG. 2B</figref>). For explanation purposes, <figref idref="DRAWINGS">FIG. 4B</figref> is described in reference to the components of <figref idref="DRAWINGS">FIGS. 2A</figref>, <b>3</b>A and <b>4</b>A.</p>
<p id="p-0078" num="0077">At block <b>452</b>, a logging thread determines that the contents of a data buffer that is associated with a buffer file should be written to secondary memory. For example, for explanation purposes it shall be assumed that local logging thread <b>402</b> determines that buffer <b>322</b> in ready-to-write buffer list <b>310</b> of SITE_A buffer file <b>218</b> should be written out to disk <b>230</b>.</p>
<p id="p-0079" num="0078">At block <b>454</b>, the log file in secondary memory that is associated with the buffer file is identified. For example, based on the value of file descriptor <b>304</b> (SITE_A.COM LOG FILE) in SITE_A buffer file <b>218</b>, local logging thread <b>402</b> determines that SITE_A.com log file <b>240</b> on disk <b>230</b> is assigned to store log data that is associated with SITE_A buffer file <b>218</b>.</p>
<p id="p-0080" num="0079">At block <b>456</b>, the logging thread obtains a lock on the data buffer within the ready-to-write buffer list of the buffer file. For example, a local logging thread <b>402</b> obtains a mutually exclusive lock on buffer <b>322</b> in ready-to-write buffer list <b>310</b> of SITE_A buffer file <b>218</b>.</p>
<p id="p-0081" num="0080">At block <b>458</b>, the logging thread writes the contents of the locked data buffer into the previously identified log file in secondary memory. For example, local logging thread <b>402</b> writes the log data that is contained in buffer <b>322</b> into SITE_A.com log file <b>240</b> on disk <b>230</b>.</p>
<p id="p-0082" num="0081">At block <b>460</b>, a decision is made as to whether the data buffer should be inserted back into the buffer array within the buffer file. For example, after logging the data to secondary storage, local logging thread <b>402</b> determines whether or not buffer <b>322</b> should be re-inserted back into buffer array <b>308</b>. As previously indicated, a variety of factors, which may include the amount of traffic that is currently being received for the particular web site domain (SITE_A.COM), can be used in determining whether a buffer should be inserted back into the buffer array. If at block <b>460</b> it is determined that the buffer should be inserted back into the buffer array, control proceeds to block <b>464</b>.</p>
<p id="p-0083" num="0082">Alternatively, if at block <b>460</b> it is determined that the buffer should not be inserted back into the buffer array, at block <b>462</b> the buffer is added into the free buffer pool. Control then proceeds to block <b>470</b>. For example, if local logging thread <b>402</b> determines that buffer <b>322</b> should not be inserted back into buffer array <b>308</b>, local logging thread <b>402</b> causes buffer <b>322</b> to be placed into free buffer pool <b>408</b>.</p>
<p id="p-0084" num="0083">At block <b>464</b>, an entry in the buffer array is identified for inserting the data buffer. For explanation purposes, it is assumed that the entry within buffer array <b>308</b> that is associated with an array index of “1” is selected for re-inserting buffer <b>322</b>.</p>
<p id="p-0085" num="0084">At block <b>466</b>, the data buffer is inserted back into the buffer array. For example, buffer <b>332</b> is linked back into the entry associated with an array index of “1” in buffer array <b>308</b>.</p>
<p id="p-0086" num="0085">At block <b>468</b>, the flag associated with the entry in which the data buffer was reinserted in the buffer array is cleared to indicate that the entry is likely available for buffering log data. For example, the flag for the entry within buffer array <b>308</b> that is associated with an array index of “1” is set to “0” to indicate to the server threads (<b>210</b>,<b>212</b>,<b>214</b>,<b>216</b>) that the entry includes a buffer (buffer <b>322</b>) that is likely available for buffering log data.</p>
<p id="p-0087" num="0086">At block <b>470</b>, it is determined whether the contents of another buffer should be written out to secondary memory. If it is determined that the contents of another buffer should be written out to secondary memory, control proceeds to block <b>454</b>. In certain embodiments, if the next identified buffer is located within the same ready-to-write buffer list, control may instead proceed to block <b>456</b> to obtain a lock on the next identified buffer. For example, because local logging thread <b>402</b> is assigned to a single buffer file (SITE_A buffer file <b>218</b>), by default the log file will generally remain the same between multiple buffers unless multiple log files are used for a single web site domain.</p>
<p id="p-0088" num="0087">In addition, although the example illustrates separate locks for each buffer that is being written to disk, in certain embodiments, the ready-to-write buffer list is itself locked by the logging thread, thus potentially reducing the overhead that is associated with locking and unlocking multiple buffers within a ready-to-write buffer list.</p>
<heading id="h-0014" level="1">Hardware Example</heading>
<p id="p-0089" num="0088"><figref idref="DRAWINGS">FIG. 5</figref> is a block diagram that illustrates a computer system <b>500</b> upon which an embodiment of the invention may be implemented. Computer system <b>500</b> includes a bus <b>502</b> or other communication mechanism for communicating information, and a processor <b>504</b> coupled with bus <b>502</b> for processing information. Computer system <b>500</b> also includes a main memory <b>506</b>, such as a random access memory (RAM) or other dynamic storage device, coupled to bus <b>502</b> for storing information and instructions to be executed by processor <b>504</b>. Main memory <b>506</b> also may be used for storing temporary variables or other intermediate information during execution of instructions to be executed by processor <b>504</b>. Computer system <b>500</b> further includes a read only memory (ROM) <b>508</b> or other static storage device coupled to bus <b>502</b> for storing static information and instructions for processor <b>504</b>. A storage device <b>510</b>, such as a magnetic disk or optical disk, is provided and coupled to bus <b>502</b> for storing information and instructions.</p>
<p id="p-0090" num="0089">Computer system <b>500</b> may be coupled via bus <b>502</b> to a display <b>512</b>, such as a cathode ray tube (CRT), for displaying information to a computer user. An input device <b>514</b>, including alphanumeric and other keys, is coupled to bus <b>502</b> for communicating information and command selections to processor <b>504</b>. Another type of user input device is cursor control <b>516</b>, such as a mouse, a trackball, or cursor direction keys for communicating direction information and command selections to processor <b>504</b> and for controlling cursor movement on display <b>512</b>. This input device typically has two degrees of freedom in two axes, a first axis (e.g., x) and a second axis (e.g., y), that allows the device to specify positions in a plane.</p>
<p id="p-0091" num="0090">The invention is related to the use of computer system <b>500</b> for dynamically tuning the allocation data buffers. According to one embodiment of the invention, dynamically tuning of the allocation of data buffers is provided by computer system <b>500</b> in response to processor <b>504</b> executing one or more sequences of one or more instructions contained in main memory <b>506</b>. Such instructions may be read into main memory <b>506</b> from another computer-readable medium, such as storage device <b>510</b>. Execution of the sequences of instructions contained in main memory <b>506</b> causes processor <b>504</b> to perform the process steps described herein. One or more processors in a multi-processing arrangement may also be employed to execute the sequences of instructions contained in main memory <b>506</b>. In alternative embodiments, hard-wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus, embodiments of the invention are not limited to any specific combination of hardware circuitry and software.</p>
<p id="p-0092" num="0091">The term “computer-readable medium” as used herein refers to any medium that participates in providing instructions to processor <b>504</b> for execution. Such a medium may take many forms, including but not limited to, non-volatile media and volatile media. Non-volatile media includes, for example, optical or magnetic disks, such as storage device <b>510</b>. Volatile media includes dynamic memory, such as main memory <b>506</b>.</p>
<p id="p-0093" num="0092">Common forms of computer-readable media include, for example, a floppy disk, a flexible disk, hard disk, magnetic tape, or any other magnetic medium, a CD-ROM, any other optical medium, punch cards, paper tape, any other physical medium with patterns of holes, a RAM, a PROM, and EPROM, a FLASH-EPROM, any other memory chip or cartridge, or any other medium from which a computer can read.</p>
<p id="p-0094" num="0093">Various forms of computer readable media may be involved in carrying one or more sequences of one or more instructions to processor <b>504</b> for execution. For example, the instructions may initially be carried on a magnetic disk of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system <b>500</b> can receive the data on the telephone line. Bus <b>502</b> carries the data to main memory <b>506</b>, from which processor <b>504</b> retrieves and executes the instructions. The instructions received by main memory <b>506</b> may optionally be stored on storage device <b>510</b> either before or after execution by processor <b>504</b>.</p>
<p id="p-0095" num="0094">Computer system <b>500</b> also includes a communication interface <b>518</b> coupled to bus <b>502</b>. Communication interface <b>518</b> provides a two-way data communication coupling to a network link <b>520</b> that is connected to a local network <b>522</b>. For example, communication interface <b>518</b> may be an integrated services digital network (ISDN) card or a modem to provide a data communication connection to a corresponding type of telephone line. As another example, communication interface <b>518</b> may be a local area network (LAN) card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation, communication interface <b>518</b> sends and receives electrical, electromagnetic or optical signals that carry digital data streams representing various types of information.</p>
<p id="p-0096" num="0095">Network link <b>520</b> typically provides data communication through one or more networks to other data devices. For example, network link <b>520</b> may provide a connection through local network <b>522</b> to a host computer <b>524</b> or to data equipment operated by an Internet Service Provider (ISP) <b>526</b>. ISP <b>526</b> in turn provides data communication services through the worldwide packet data communication network now commonly referred to as the “Internet” <b>528</b>. Local network <b>522</b> and Internet <b>528</b> both use electrical, electromagnetic or optical signals that carry digital data streams.</p>
<p id="p-0097" num="0096">Computer system <b>500</b> can send messages and receive data, including program code, through the network(s), network link <b>520</b> and communication interface <b>518</b>. In the Internet example, a server <b>530</b> might transmit a requested code for an application program through Internet <b>528</b>, ISP <b>526</b>, local network <b>522</b> and communication interface <b>518</b>. In accordance with the invention, one such downloaded application provides for dynamically tuning the allocation data buffers as described herein.</p>
<p id="p-0098" num="0097">The received code may be executed by processor <b>504</b> as it is received, and/or stored in storage device <b>510</b>, or other non-volatile storage for later execution.</p>
<p id="p-0099" num="0098">Alternatives, Extensions</p>
<p id="p-0100" num="0099">In describing certain embodiments of the invention, several drawing figures have been used for explanation purposes. However, the invention is not limited to any particular context that is shown in the drawing figures, as the scope of the invention includes other contexts and applications in which the mechanisms and processes described herein are available to other mechanisms, methods, programs, and processes. Thus, the specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense.</p>
<p id="p-0101" num="0100">For example, although embodiments of the invention have been described in reference to logging log data in a web server system, embodiments of the invention may be applied to various other forms or types of shared data sink systems where different threads of execution may be utilized for buffering data. For example, embodiments of the invention may be used for managing the buffering data in a variety of different systems and/or configuration such as in network connection and/or router systems, printer system, copier systems, fax systems, etc. Thus, embodiments of the invention should not be construed as limited to either log data or web server applications as the specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense.</p>
<p id="p-0102" num="0101">As a further example, although <figref idref="DRAWINGS">FIG. 2A</figref> illustrates a system executing in a single memory address space <b>228</b>, embodiments of the invention may be practiced using a variety of different software and/or hardware configurations. For example, in certain embodiments, web server <b>202</b> may include multiple address spaces that each include the components depicted in memory address space <b>228</b>. In addition, certain embodiments of the invention may include the use of multiple processes, multiple processors or even multiple computers executing as part of web server <b>202</b>.</p>
<p id="p-0103" num="0102">In addition, in this disclosure, certain process steps are set forth in a particular order, and alphabetic and alphanumeric labels are used to identify certain steps. Unless specifically stated in the disclosure, embodiments of the invention are not limited to any particular order of carrying out such steps. In particular, the labels are used merely for convenient identification of steps, and are not intended to imply, specify or require a particular order of carrying out such steps.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method for dynamically allocating data buffers to a data structure, comprising the computer-implemented steps of:
<claim-text>assigning a logging thread to said data structure, wherein said logging thread is configured to insert free data buffers into said data structure;</claim-text>
<claim-text>monitoring a number of buffers that are moved into a full buffer list from the data structure;</claim-text>
<claim-text>determining, based on the number of buffers, throughput demands that are currently required for a web site domain that is associated with the data structure;</claim-text>
<claim-text>based on the throughput demands that are currently required for the web site domain, changing a minimum number of data buffers that are to be consistently linked to the data structure; and</claim-text>
<claim-text>if a number of data buffers that are currently linked to the data structure is less than the minimum number, then performing steps comprising:
<claim-text>identifying one or more free buffers that are within a free buffer pool; and</claim-text>
<claim-text>linking said one or more free data buffers into said data structure;</claim-text>
</claim-text>
<claim-text>wherein said one or more free data buffers are stored within a memory of a computer system.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising the steps of:
<claim-text>receiving requests for content that is associated with a web site domain;</claim-text>
<claim-text>generating log data based on the requests; and</claim-text>
<claim-text>writing said log data in one or more data buffers associated with said data structure.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the step of linking said one or more free data buffers into said data structure includes linking said one or more free data buffers into said data structure into which one or more other data buffers already are linked.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising the steps of:
<claim-text>determining that a particular data buffer should be removed from said data structure;</claim-text>
<claim-text>unlinking said particular data buffer from said data structure; and</claim-text>
<claim-text>inserting said particular data buffer into a ready-to-write buffer list.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the step of determining that a particular data buffer should be removed comprises the step of detecting that said particular data buffer is full.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the step of determining that a particular data buffer should be removed comprises the step of detecting that said particular data buffer has not been removed from said data structure for a particular period of time.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, further comprising the steps of:
<claim-text>removing said particular data buffer from said ready-to-write buffer list, wherein said ready-to-write buffer list is located within a first memory area;</claim-text>
<claim-text>storing log data information in said particular data buffer to a second memory area, wherein said second memory area is distinct from said first memory area; and</claim-text>
<claim-text>inserting said particular data buffer into said free buffer pool, wherein said free buffer pool maintains free data buffers that may be inserted into any one of a plurality of data structures that are each associated with a particular web site domain.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein:
<claim-text>the step of identifying one or more free buffers comprises the step of selecting one or more free buffers from said free buffer pool; and</claim-text>
<claim-text>the step of linking said one or more free data buffers into said data structure comprises the steps of,
<claim-text>identifying one or more entries in said data structure; and</claim-text>
<claim-text>linking said one or more free data buffers into said one or more entries in said data structure.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein:
<claim-text>said log data is generated based on request that are received for content associated with a particular web site domain; and</claim-text>
<claim-text>said step of inserting said particular data buffer comprises the step of linking said particular data buffer into a queue that maintains only data buffers that contain log data associated with requests for said particular web site domain.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. A computer-readable medium carrying one or more sequences of instructions for dynamically allocating data buffers to a data structure, wherein execution of the one or more sequences of instructions by one or more processors causes the one or more processors to perform the steps of:
<claim-text>assigning a logging thread to said data structure, wherein said logging thread is configured to insert free data buffers into said data structure;</claim-text>
<claim-text>monitoring a number of buffers that are moved into a full buffer list from the data structure;</claim-text>
<claim-text>determining, based on the number of buffers, throughput demands that are currently required for a web site domain that is associated with the data structure;</claim-text>
<claim-text>based on the throughput demands that are currently required for the web site domain, changing a minimum number of data buffers that are to be consistently linked to the data structure; and</claim-text>
<claim-text>if a number of data buffers that are currently linked to the data structure is less than the minimum number, then performing steps comprising:
<claim-text>identifying one or more free buffers that are within a free buffer pool; and</claim-text>
<claim-text>linking said one or more free data buffers into said data structure.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The computer-readable medium of <claim-ref idref="CLM-00010">claim 10</claim-ref>, further comprising instructions for performing the steps of:
<claim-text>receiving requests for content that is associated with a web site domain;</claim-text>
<claim-text>generating log data based on the requests; and</claim-text>
<claim-text>writing said log data in one or more data buffers associated with said data structure.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The computer-readable medium of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the step of linking said one or more free data buffers into said data structure includes linking said one or more free data buffers into said data structure into which one or more other data buffers already are linked.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The computer-readable medium of <claim-ref idref="CLM-00010">claim 10</claim-ref>, further comprising instructions for performing the steps of:
<claim-text>determining that a particular data buffer should be removed from said data structure;</claim-text>
<claim-text>unlinking said particular data buffer from said data structure; and</claim-text>
<claim-text>inserting said particular data buffer into a ready-to-write buffer list.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The computer-readable medium of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the step of determining that a particular data buffer should be removed comprises the step of detecting that said particular data buffer is full.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The computer-readable medium of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the step of determining that a particular data buffer should be removed comprises the step of detecting that said particular data buffer has not been removed from said data structure for a particular period of time.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The computer-readable medium of <claim-ref idref="CLM-00013">claim 13</claim-ref>, further comprising instructions for performing the steps of:
<claim-text>removing said particular data buffer from said ready-to-write buffer list, wherein said ready-to-write buffer list is located within a first memory area;</claim-text>
<claim-text>storing log data information in said particular data buffer to a second memory area, wherein said second memory area is distinct from said first memory area; and</claim-text>
<claim-text>inserting said particular data buffer into said free buffer pool, wherein said free buffer pool maintains free data buffers that may be inserted into any one of a plurality of data structures that are each associated with a particular web site domain.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The computer-readable medium of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein:
<claim-text>the step of identifying one or more free buffers comprises the step of selecting one or more free buffers from said free buffer pool; and</claim-text>
<claim-text>the step of linking said one or more free data buffers into said data structure comprises the steps of,
<claim-text>identifying one or more entries in said data structure; and</claim-text>
<claim-text>linking said one or more free data buffers into said one or more entries in said data structure.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The computer-readable medium of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein:
<claim-text>said log data is generated based on request that are received for content associated with a particular web site domain; and</claim-text>
<claim-text>said step of inserting said particular data buffer comprises the step of linking said particular data buffer into a queue that maintains only data buffers that contain log data associated with requests for said particular web site domain.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. A method for processing requests for content that is associated with different web site domains, the method comprising:
<claim-text>receiving, at a web server, a first request for access to first content that is associated with a first web site domain of a plurality of web site domains;</claim-text>
<claim-text>queueing the first request within a connection queue;</claim-text>
<claim-text>assigning a first server thread of a plurality of server threads to service the first request;</claim-text>
<claim-text>in response to being assigned a task of servicing the first request, the first server thread determining to which web site domain of the plurality of web site domains the first request is related;</claim-text>
<claim-text>the first server thread loading first configuration data for the first web site domain in response to determining that the first request is related to the first web site domain, wherein, by loading the first configuration data, the first server thread is temporarily configured as a server thread that is dedicated to servicing requests for content that is available within the first web site domain;</claim-text>
<claim-text>the first server thread generating first log data based on the first content, wherein the first log data includes information that identifies a first web page that was requested within the first web site domain;</claim-text>
<claim-text>the first server thread selecting, from among a plurality of buffer files, a first buffer file that is associated with the first web site domain, wherein the first buffer file contains buffers that are to be used for buffering log data that is associated with the first web site domain;</claim-text>
<claim-text>the first server thread selecting a first buffer from among a plurality of buffers within the first buffer file;</claim-text>
<claim-text>the first server thread writing the first log data into the first buffer;</claim-text>
<claim-text>a logging thread selecting, from among a plurality of physical log files, a first physical log file that is associated with the first buffer file, wherein each physical log file of the plurality of physical log files is associated with a separate buffer file of the plurality of buffer files;</claim-text>
<claim-text>a logging thread storing, into the first physical log file, information contained within the first buffer;</claim-text>
<claim-text>receiving, at the web server, a second request for access to second content that is associated with a second web site domain of a plurality of web site domains, wherein the second web site domain is separate from the first web site domain;</claim-text>
<claim-text>queueing the second request within the connection queue;</claim-text>
<claim-text>assigning a second server thread of the plurality of server threads to service the second request, wherein the second server thread is separate from and executes concurrently with the first server thread;</claim-text>
<claim-text>in response to being assigned a task of servicing the second request, the second server thread determining to which web site domain of the plurality of web site domains the second request is related;</claim-text>
<claim-text>the second server thread loading second configuration data for the second web site domain in response to determining that the second request is related to the second web site domain, wherein, by loading the second configuration data, the second server thread is temporarily configured as a server thread that is dedicated to servicing requests for content that is available within the second web site domain, wherein the second configuration data differs from the first configuration data;</claim-text>
<claim-text>the second server thread generating second log data based on the second content, wherein the second log data includes information that identifies a second web page that was requested within the second web site domain;</claim-text>
<claim-text>the second server thread selecting, from among the plurality of buffer files, a second buffer file that is associated with the second web site domain, wherein the second buffer file contains buffers that are to be used for buffering log data that is associated with the second web site domain, wherein the second buffer file differs from the first buffer file;</claim-text>
<claim-text>the second server thread selecting a second buffer from among a plurality of buffers within the second buffer file;</claim-text>
<claim-text>the second server thread writing the second log data into the second buffer;</claim-text>
<claim-text>a logging thread selecting, from among the plurality of physical log files, a second physical log file that is associated with the second buffer file, wherein the second physical log file is separate from the first physical log file; and</claim-text>
<claim-text>a logging thread storing, into the second physical log file, information contained within the second buffer;</claim-text>
<claim-text>wherein the first buffer is stored within a memory of a computer system.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The method of <claim-ref idref="CLM-00019">claim 19</claim-ref>, further comprising:
<claim-text>a logging thread determining whether to remove the first buffer from a buffer array that is contained in the first buffer file, wherein determining whether to remove the first buffer is based on at least one of (a) an amount of free space that is left within the first buffer and (b) an amount of time that the first buffer has been linked within the buffer array;</claim-text>
<claim-text>in response to a logging thread determining that the first buffer should be removed from the buffer array, a logging thread moving the first buffer from the buffer array to a ready-to-write buffer list that is contained in the first buffer file.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. The method of <claim-ref idref="CLM-00019">claim 19</claim-ref>, further comprising:
<claim-text>a logging thread determining whether a current time of day is a specified time of day;</claim-text>
<claim-text>in response to a logging thread determining that the current time of day is the specified time of day, a logging thread determining whether the first buffer contains log data; and</claim-text>
<claim-text>in response to a logging thread determining that the first buffer contains log data as of the specified time of day, a logging thread moving the first buffer from a buffer array, which is contained in the first buffer file, to a ready-to-write buffer list that is contained in the first buffer file.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein linking said one or more free data buffers into said data structure comprises linking multiple data buffers into said data structure.</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. The computer-readable medium of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein linking said one or more free data buffers into said data structure comprises linking multiple data buffers into said data structure.</claim-text>
</claim>
</claims>
</us-patent-grant>
