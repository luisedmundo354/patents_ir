<us-patent-grant lang="EN" dtd-version="v4.2 2006-08-23" file="US07299449-20071120.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20071106" date-publ="20071120">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>07299449</doc-number>
<kind>B2</kind>
<date>20071120</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>10186753</doc-number>
<date>20020702</date>
</document-id>
</application-reference>
<us-application-series-code>10</us-application-series-code>
<priority-claims>
<priority-claim sequence="01" kind="national">
<country>FR</country>
<doc-number>01 08771</doc-number>
<date>20010702</date>
</priority-claim>
<priority-claim sequence="02" kind="national">
<country>FR</country>
<doc-number>01 08772</doc-number>
<date>20010702</date>
</priority-claim>
</priority-claims>
<us-term-of-grant>
<us-term-extension>494</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>9</main-group>
<subgroup>44</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>717116</main-classification>
</classification-national>
<invention-title id="d0e89">Description of an interface applicable to a computer object</invention-title>
<references-cited>
<citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>6125391</doc-number>
<kind>A</kind>
<name>Meltzer et al.</name>
<date>20000900</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>709223</main-classification></classification-national>
</citation>
<citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>2002/0049790</doc-number>
<kind>A1</kind>
<name>Ricker et al.</name>
<date>20020400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707513</main-classification></classification-national>
</citation>
<citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>2002/0085020</doc-number>
<kind>A1</kind>
<name>Carroll, Jr.</name>
<date>20020700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>345700</main-classification></classification-national>
</citation>
<citation>
<patcit num="00004">
<document-id>
<country>EP</country>
<doc-number>1 065 592</doc-number>
<kind>A1</kind>
<date>20010100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00005">
<othercit>Mischkinsky, J., et al., “<i>Simple CORBA Object Access Protocol </i>(<i>SCOAP</i>): <i>A Discussion Paper—Presentation Slides</i>,” OMG Technical Committee Document—ORBOS/00-09-04 (Sep. 18, 2000), Burlingame, CA, USA, XP002203547.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00006">
<othercit>Kyllingstad, R., et al., “<i>XML-Schema Based Semantic Representation: Design, Implementation and Usage</i>,” Diploma Thesis—Computer Systems Institute, Department of Computer Science, ETH (May 30, 2001), Zurich, XP002203548.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00007">
<othercit>Jacobsen, H.-A., et al., “<i>Modeling Interface Definition Language Extensions</i>,” Proceedings 37th International Conference on Technology of Object-Oriented Languages and Systems, Tools-Pacific 2000, Sydney, NSW, Australia, pp. 242-251, Los Alamitos, CA, USA, IEEE Comput. Soc., USA, XP002203549.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00008">
<othercit>Christensen, E., et al., “<i>Web Services Description Language </i>(<i>WSDL</i>) <i>1.1</i>,” W3C Technical Recommendation (Mar. 15, 2001), XP002203550.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00009">
<othercit>Tadashi Iijima, “Programming Languages which are specified by XML,” The Journal of Information Processing Society of Japan, Jul. 24, 1998, vol. 98, No. 64, p. 53-60, abstract only.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00010">
<othercit>Noribide Shinagawa et al., “A Processing Model of Foreign Functions in An eXtensible XML Query Language X<sup>2</sup>QL,” The Journal of Information Processing Society of Japan, Jul. 28, 2000, vol. 2000, No. 69, p. 153-160, abstract only.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
</references-cited>
<number-of-claims>10</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>717114-117</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>717136-143</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>12</number-of-drawing-sheets>
<number-of-figures>13</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20030050942</doc-number>
<kind>A1</kind>
<date>20030313</date>
</document-id>
</related-publication>
</us-related-documents>
<parties>
<applicants>
<applicant sequence="001" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Ruellan</last-name>
<first-name>Hervé </first-name>
<address>
<city>Rennes</city>
<country>FR</country>
</address>
</addressbook>
<nationality>
<country>FR</country>
</nationality>
<residence>
<country>FR</country>
</residence>
</applicant>
<applicant sequence="002" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Moreau</last-name>
<first-name>Jean-Jacques</first-name>
<address>
<city>Rennes</city>
<country>FR</country>
</address>
</addressbook>
<nationality>
<country>FR</country>
</nationality>
<residence>
<country>FR</country>
</residence>
</applicant>
</applicants>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Fitzpatrick, Cella, Harper &amp; Scinto</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</parties>
<assignees>
<assignee>
<addressbook>
<orgname>Canon Kabushiki Kaisha</orgname>
<role>03</role>
<address>
<city>Tokyo</city>
<country>JP</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Dam</last-name>
<first-name>Tuan</first-name>
<department>2192</department>
</primary-examiner>
<assistant-examiner>
<last-name>Romano</last-name>
<first-name>John J</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">The invention concerns a method of describing a function applicable to a computer object, the function being invocable in a first markup language, the function being initially expressed in a predetermined programming language different from the first markup language,
<ul id="ul0001" list-style="none">
    <li id="ul0001-0001" num="0000">
    <ul id="ul0002" list-style="none">
        <li id="ul0002-0001" num="0000">characterised in that it includes the steps of:
        <ul id="ul0003" list-style="none">
            <li id="ul0003-0001" num="0000">defining (E<b>3</b>) a first tag describing the function, in the first markup language,</li>
            <li id="ul0003-0002" num="0000">defining (E<b>6</b>) second tags describing the arguments of the function, these tags being contained in the first tag describing the function and the types of the arguments being expressed in a second markup language,</li>
        </ul>
        </li>
        <li id="ul0002-0002" num="0000">and, if the function produces a result,
        <ul id="ul0004" list-style="none">
            <li id="ul0004-0001" num="0000">defining (E<b>10</b>) a third tag describing the result of the function, this tag being contained in the first tag describing the function and the type of the result being expressed in the second markup language.</li>
        </ul>
        </li>
    </ul>
    </li>
</ul>
</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="226.99mm" wi="80.35mm" file="US07299449-20071120-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="223.69mm" wi="179.15mm" file="US07299449-20071120-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="156.38mm" wi="129.37mm" file="US07299449-20071120-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="103.04mm" wi="148.00mm" file="US07299449-20071120-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="207.94mm" wi="186.77mm" file="US07299449-20071120-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="264.16mm" wi="172.04mm" file="US07299449-20071120-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="182.12mm" wi="99.91mm" file="US07299449-20071120-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="230.63mm" wi="116.50mm" file="US07299449-20071120-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="228.43mm" wi="115.32mm" file="US07299449-20071120-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="158.41mm" wi="181.36mm" file="US07299449-20071120-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="157.56mm" wi="180.85mm" file="US07299449-20071120-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="75.86mm" wi="91.86mm" file="US07299449-20071120-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="224.54mm" wi="126.75mm" file="US07299449-20071120-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">DESCRIPTION OF AN INTERFACE APPLICABLE TO A COMPUTER OBJECT</heading>
<p id="p-0002" num="0001">The present invention generally relates to the description of an interface applicable to a computer object. In a first aspect of the invention, the description of the interface is in a markup language. In a second aspect of the invention, the description of the interface is in a schema language associated with a markup language.</p>
<p id="p-0003" num="0002">In an object oriented system, the computer object is an element comprising data, also known as attributes, and functions or method which may possibly use parameters or input arguments. Typically, these functions may be called or invoked in order to manipulate the data of the object.</p>
<p id="p-0004" num="0003">An interface is a set of functions applicable to an object.</p>
<p id="p-0005" num="0004">A known markup language will be considered more particularly below. In this case it is the XML (Extended Markup Language) language.</p>
<p id="p-0006" num="0005">This language is defined by a well-known standard: the XML standard.</p>
<p id="p-0007" num="0006">The XML standard defines a syntax enabling documents to be structured with the use of tags bounded by the signs &lt;and&gt; (for example: &lt;tag&gt;). These tags are grouped together by pairs of opening and closing tags (&lt;tag&gt; and &lt;/tag&gt;). An XML tag is an element constituted by an opening tag, the corresponding closing tag, as well as the whole of the content bounded by these tags. This content is composed of other elements and/or pure text. A tag without content can be represented by an empty tag &lt;tag/&gt;. An XML document is constituted by a principle element.</p>
<p id="p-0008" num="0007">A schema language enables a markup language to be described. Thus, an XML schema language enables an XML language to be described. Several XML schema languages exist and are known in the art.</p>
<p id="p-0009" num="0008">A document written in an XML schema language is commonly called an XML schema. An XML schema describes the structure of a set of XML documents. An XML schema is the description of the tags authorized in a document conforming to this XML language and of their possible nesting. An XML document respecting the structure defined by an XML schema is said to be valid with respect to this XML schema.</p>
<p id="p-0010" num="0009">In this context, the French patent application No. 99 08155 filed by the present applicant describes a method of remote execution of a function on a computer object in a computer network. More particularly, this document proposes a method of describing the interfaces of an object based on an XML language. The XML language used is specific to this application and only provides a limited set of possible types for the input and output parameters of the functions.</p>
<p id="p-0011" num="0010">Moreover, a specification written by the IBM and Microsoft companies, called WSDL (Web Services Description Language) provides a method of describing services using XML syntax. A service is characterized by the description of the document which it receives as input and by the document which it produces as output. These documents are XML documents of which the structure can typically be described by XML schemas.</p>
<p id="p-0012" num="0011">It should be noted that this specification does not use the notion of object. The XML schema language is used according to its known function, that is to say to describe the structure of XML documents. Within this specification, the documents described are documents processed and produced by a service.</p>
<p id="p-0013" num="0012">Furthermore, the United States patent U.S. Pat. No. 6,125,391 describes the use of documents for carrying out transactions between commercial partners via a network. In a similar manner to the WSDL specification, a transaction is described by its input and output documents.</p>
<p id="p-0014" num="0013">Here too, the notion of object is not used and the XML schema language is used according to its known function, that is to say to describe the structure of XML documents.</p>
<p id="p-0015" num="0014">The present invention aims to remedy the drawbacks of the prior art, by providing a method and a device for describing a function applicable to a computer object.</p>
<p id="p-0016" num="0015">In the first aspect of the invention, the inventors have worked more particularly on the markup language. Thus, the invention proposes a method of describing a function applicable to a computer object, the function being invocable in a first markup language, the function being initially expressed in a predetermined programming language different from the first markup language,</p>
<p id="p-0017" num="0016">characterised in that it includes the steps of:
<ul id="ul0005" list-style="none">
    <li id="ul0005-0001" num="0000">
    <ul id="ul0006" list-style="none">
        <li id="ul0006-0001" num="0017">defining a first tag describing the function, in the first markup language,</li>
        <li id="ul0006-0002" num="0018">defining second tags describing the arguments of the function, these tags being contained in the first tag describing the function and the types of the arguments being expressed in a second markup language,</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0018" num="0019">and, if the function produces a result,
<ul id="ul0007" list-style="none">
    <li id="ul0007-0001" num="0000">
    <ul id="ul0008" list-style="none">
        <li id="ul0008-0001" num="0020">defining a third tag describing the result of the function, this tag being contained in the first tag describing the function and the type of the result being expressed in the second markup language.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0019" num="0021">Correlatively, the invention concerns a device for describing a function applicable to a computer object, the function being invocable in a first markup language, the function being initially expressed in a predetermined programming language different from the first markup language,</p>
<p id="p-0020" num="0022">characterised in that it has:
<ul id="ul0009" list-style="none">
    <li id="ul0009-0001" num="0000">
    <ul id="ul0010" list-style="none">
        <li id="ul0010-0001" num="0023">means of defining a first tag describing the function, in the first markup language,</li>
        <li id="ul0010-0002" num="0024">means of defining second tags describing the arguments of the function, these tags being contained in the first tag describing the function and the types of the arguments being expressed in a second markup language,</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0021" num="0025">and, if the function produces a result,
<ul id="ul0011" list-style="none">
    <li id="ul0011-0001" num="0000">
    <ul id="ul0012" list-style="none">
        <li id="ul0012-0001" num="0026">means of defining a third tag describing the result of the function, this tag being contained in the first tag describing the function and the type of the result being expressed in the second markup language.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0022" num="0027">By virtue of the invention, a single interpreter capable of processing the markup language is necessary for processing an interface.</p>
<p id="p-0023" num="0028">In addition, an interface can easily be read by a user whilst offering a great variety of possible types.</p>
<p id="p-0024" num="0029">In particular when the first markup language is an XML language and the second markup language is an XML schema language associated with the XML language, the typing part of the XML schemas is preserved.</p>
<p id="p-0025" num="0030">Finally, it is not necessary to have a complex processor for processing an interface according to the invention. For example, the invention can be used on a communicating diary, known as a PDA, or a portable telephone.</p>
<p id="p-0026" num="0031">According to alternative preferred characteristic
<ul id="ul0013" list-style="none">
    <li id="ul0013-0001" num="0000">
    <ul id="ul0014" list-style="none">
        <li id="ul0014-0001" num="0032">the second markup language is a schema language associated with the first markup language, or</li>
        <li id="ul0014-0002" num="0033">the second markup language is a markup language which makes it possible to construct complex types by aggregation of predefined simple types.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0027" num="0034">The second language thus procures either the advantages of a schema language, or an even more simple implementation in which only new complex types can be created.</p>
<p id="p-0028" num="0035">According to a preferred characteristic, the third tag is differentiated from the second tags by an attribute with a specific value.</p>
<p id="p-0029" num="0036">Thus a result is easily identifiable.</p>
<p id="p-0030" num="0037">According to another preferred characteristic, at least one function forming part of an interface, the interface is stored in the markup language and in the programming language.</p>
<p id="p-0031" num="0038">The description device has means of implementing the above characteristics.</p>
<p id="p-0032" num="0039">The invention also concerns a method of obtaining, by a client terminal, an interface of an object, said interface having at least one function described by the method presented above,</p>
<p id="p-0033" num="0040">characterised in that it includes the translation of said interface into a programming language different from the markup language.</p>
<p id="p-0034" num="0041">According to a preferred characteristic, the obtaining method includes the storage of the interface in the markup language and in the programming language.</p>
<p id="p-0035" num="0042">The invention also concerns an obtaining device having means of implementing the above characteristics.</p>
<p id="p-0036" num="0043">According to a preferred characteristic, the markup language is an XML language and the associated schema language is the XML schema language described by the standard “XML Schema”.</p>
<p id="p-0037" num="0044">The description device, the obtaining method and device have advantages similar to those previously presented.</p>
<p id="p-0038" num="0045">In the second aspect of the invention, the inventors have worked on a schema language associated with a markup language. Thus, the invention provides a method of describing a function applicable to a computer object, it being possible to invoke the function in a markup language, the function being initially expressed in a predetermined programming language different from the markup language,</p>
<p id="p-0039" num="0046">characterized in that it comprises the steps of:
<ul id="ul0015" list-style="none">
    <li id="ul0015-0001" num="0000">
    <ul id="ul0016" list-style="none">
        <li id="ul0016-0001" num="0047">defining an element describing the function, in a schema language associated with the markup language,</li>
        <li id="ul0016-0002" num="0048">defining the arguments of the function, in said schema language,</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0040" num="0049">and, if the function produces a result,
<ul id="ul0017" list-style="none">
    <li id="ul0017-0001" num="0000">
    <ul id="ul0018" list-style="none">
        <li id="ul0018-0001" num="0050">defining the element describing the result of the function, in said schema language.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0041" num="0051">Correlatively, the invention relates to a device for describing a function applicable to a computer object, it being possible to invoke the function in a markup language, the function being initially expressed in a predetermined programming language different from the markup language,</p>
<p id="p-0042" num="0052">characterized in that it comprises:
<ul id="ul0019" list-style="none">
    <li id="ul0019-0001" num="0000">
    <ul id="ul0020" list-style="none">
        <li id="ul0020-0001" num="0053">means for defining an element describing the function, in a schema language associated with the markup language,</li>
        <li id="ul0020-0002" num="0054">means for defining the arguments of the function, in said schema language,</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0043" num="0055">and, if the function produces a result,
<ul id="ul0021" list-style="none">
    <li id="ul0021-0001" num="0000">
    <ul id="ul0022" list-style="none">
        <li id="ul0022-0001" num="0056">means for defining the element describing the result of the function, in said schema language.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0044" num="0057">By virtue of the invention, the functions are described with the use of a schema language which is a standard language, and this enables the use of all the existing tools for dealing with this language.</p>
<p id="p-0045" num="0058">The design and programming of an interface are simplified.</p>
<p id="p-0046" num="0059">In particular, it is possible to define new types of elements, to validate the invocation of functions, these functions making it possible to perform processing operations, for example on images, which were previously complex, if not difficult, to carry out.</p>
<p id="p-0047" num="0060">According to preferred features and alternatives, when a function produces a result, the definition of an element describing an invocation of that function comprises a specific attribute for indicating which element describes the result of that invocation or a relationship is established between an element describing an invocation of that function and the element describing its result by means of documentary elements of the schema language. Thus, an invocation of a function and its result are linked.</p>
<p id="p-0048" num="0061">According to a preferred feature, the definition of an element of a function has a particular type which makes it possible to characterize this element as describing a function.</p>
<p id="p-0049" num="0062">According to another preferred feature, with at least one function forming part of an interface, the invention comprises the storage in memory of the interface in the schema language and in the programming language.</p>
<p id="p-0050" num="0063">The describing device comprises means for implementing the above features.</p>
<p id="p-0051" num="0064">The invention also concerns a method for obtaining an interface of an object by a client terminal, said interface comprising at least one function described by the description method already set out,</p>
<p id="p-0052" num="0065">characterized in that it comprises the translation of said interface into a programming language that is different to the schema language.</p>
<p id="p-0053" num="0066">According to a preferred feature, the obtaining method comprises the storage in memory of the interface in the schema language and in the programming language.</p>
<p id="p-0054" num="0067">According to a preferred feature, the markup language is an XML language and the associated schema language is an XML schema language. The XML schemas make it possible to validate the documents containing the function invocations and the documents containing the function results.</p>
<p id="p-0055" num="0068">The invention also relates to an obtaining device comprising means for implementing the above features.</p>
<p id="p-0056" num="0069">The describing device and the obtaining method and device have similar advantages to those already set out.</p>
<p id="p-0057" num="0070">The invention also relates to a computer including the device according to the invention, or means for implementing the method according to the invention. The advantages of the computer are identical to those already disclosed.</p>
<p id="p-0058" num="0071">The invention also relates to an information storage means, which can be read by a computer or microprocessor, integrated or not integrated into the device, and possibly removable, stores a program implementing the method according to the invention.</p>
<p id="p-0059" num="0072">The invention also relates to a computer program readable by a microprocessor and comprising one or more sequences of instructions is capable of implementing the methods according to the invention.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<p id="p-0060" num="0073">The characteristics and advantages of the present invention will appear more clearly from a reading of a preferred embodiment illustrated by the accompanying drawings, in which:</p>
<p id="p-0061" num="0074"><figref idref="DRAWINGS">FIG. 1</figref> is an embodiment of a device implementing the invention,</p>
<p id="p-0062" num="0075"><figref idref="DRAWINGS">FIG. 2</figref> shows a network of computers implementing the invention,</p>
<p id="p-0063" num="0076"><figref idref="DRAWINGS">FIG. 3</figref> is a diagram of the relationships between documents, according to the invention,</p>
<p id="p-0064" num="0077"><figref idref="DRAWINGS">FIG. 4</figref><i>a </i>shows examples of documents used according to the first aspect of the invention,</p>
<p id="p-0065" num="0078"><figref idref="DRAWINGS">FIG. 4</figref><i>b </i>shows examples of documents used according to the second aspect of the invention,</p>
<p id="p-0066" num="0079"><figref idref="DRAWINGS">FIGS. 5 and 6</figref> show tables stored in memory in a computer server, according to the invention,</p>
<p id="p-0067" num="0080"><figref idref="DRAWINGS">FIG. 7</figref><i>a </i>represents an embodiment of a method according to the first aspect of the invention,</p>
<p id="p-0068" num="0081"><figref idref="DRAWINGS">FIG. 7</figref><i>b </i>represents an embodiment of a method according to the second aspect of the invention,</p>
<p id="p-0069" num="0082"><figref idref="DRAWINGS">FIG. 8</figref><i>a </i>represents an embodiment of a method for generating a representation of a type of data in XML schema language, according to the first aspect of the invention,</p>
<p id="p-0070" num="0083"><figref idref="DRAWINGS">FIG. 8</figref><i>b </i>represents an embodiment of a method for generating a representation of a type of data in XML schema language, according to the second aspect of the invention,</p>
<p id="p-0071" num="0084"><figref idref="DRAWINGS">FIG. 9</figref> represents a table stored in memory in a client computer, according to the invention,</p>
<p id="p-0072" num="0085"><figref idref="DRAWINGS">FIG. 10</figref> represents an embodiment of a method for obtaining the interfaces of an object by a computer client.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<p id="p-0073" num="0086">According to the embodiment chosen and represented in <figref idref="DRAWINGS">FIG. 1</figref>, a device implementing the invention is for example a microcomputer <b>1</b> connected to different peripherals. This computer may be a client or a server, in the context of the invention.</p>
<p id="p-0074" num="0087">The device <b>1</b> comprises a network card <b>107</b> connected to a network <b>4</b> capable of transmitting digital data to be processed or conversely of transmitting data processed by the device. The device <b>1</b> also comprises a storage means <b>104</b> such as a hard disk. It also comprises a drive <b>105</b> for a disk <b>2</b>. This disk <b>2</b> may be a diskette, a CD-ROM, or a DVD-ROM, for example. The disk <b>2</b> like the hard disk <b>104</b> can contain data processed according to the invention as well as the program or programs implementing the invention which, once read by the device <b>1</b>, will be stored on the hard disk <b>104</b>. According to a variant, the program enabling the device to implement the invention can be stored in read-only memory <b>102</b> (referred to as ROM in the drawing). In a second variant, the program can be received in order to be stored in an identical fashion to that described previously via the communication network <b>4</b>.</p>
<p id="p-0075" num="0088">The device <b>1</b> comprises a card reader <b>106</b> able to read a card <b>3</b>.</p>
<p id="p-0076" num="0089">The same device has a graphics card <b>108</b> to which are connected a screen <b>5</b> and a video device <b>6</b>, such as a video recorder or a moving picture camera, for example.</p>
<p id="p-0077" num="0090">The device <b>1</b> has an input/output card <b>109</b> to which are connected for example a keyboard <b>7</b>, a mouse <b>8</b>, a camera <b>9</b> and a printer <b>10</b>.</p>
<p id="p-0078" num="0091">The device <b>1</b> has an audio card <b>110</b> to which an audio device <b>11</b> is connected, such as a microphone, for example.</p>
<p id="p-0079" num="0092">The central processing unit <b>100</b> (referred to as CPU in the drawing) executes the instructions relating to the implementation of the invention, which are stored in the read only memory <b>102</b> or in the other storage means. On powering up, the processing programs stored in a non-volatile memory, for example the ROM <b>102</b>, are transferred into the random access memory RAM <b>103</b>, which will then contain the executable code of the invention, as well as registers for storing the variables necessary for implementing the invention.</p>
<p id="p-0080" num="0093">In more general terms, an information storage means, which can be read by a computer or microprocessor, integrated or not into the device, and possibly removable, stores a program implementing the method according to the invention.</p>
<p id="p-0081" num="0094">The communication bus <b>101</b> affords communication between the different elements included in the microcomputer <b>10</b> or connected to it. The representation of the bus <b>101</b> is not limiting and, in particular, the central processing unit <b>100</b> is able to communicate instructions to any component of the microcomputer <b>1</b> directly or by means of another element of the microcomputer <b>1</b>.</p>
<p id="p-0082" num="0095">According to the first aspect of the invention, when the device is in a server terminal, it has, for describing a function applicable to a computer object, the function being invocable in a first markup language, the function initially being expressed in a predetermined programming language different from the first markup language,
<ul id="ul0023" list-style="none">
    <li id="ul0023-0001" num="0000">
    <ul id="ul0024" list-style="none">
        <li id="ul0024-0001" num="0096">means of defining a first tag describing the function, in the first markup language,</li>
        <li id="ul0024-0002" num="0097">means of defining second tags describing the arguments of the function, these tags being contained in the first tag describing the function and the types of the arguments being expressed in a second markup language,</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0083" num="0098">and, if the function produces a result,
<ul id="ul0025" list-style="none">
    <li id="ul0025-0001" num="0000">
    <ul id="ul0026" list-style="none">
        <li id="ul0026-0001" num="0099">means of defining a third tag describing the result of the function, this tag being contained in the first tag describing the function and the type of the result being expressed in the second markup language.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0084" num="0100">According to the first aspect of the invention, when the device is in a client terminal, it has, for the obtaining, by a client terminal, of an interface of an object, means of translating said interface into a programming language different from the markup language.</p>
<p id="p-0085" num="0101">According to the second aspect of the invention, when the device is in a server terminal, it comprises, for the description in a schema language associated with a markup language of a function applicable to a computer object, with the function being initially expressed in a predetermined programming language different from the schema language:
<ul id="ul0027" list-style="none">
    <li id="ul0027-0001" num="0000">
    <ul id="ul0028" list-style="none">
        <li id="ul0028-0001" num="0102">means for defining an element describing the function, in said schema language,</li>
        <li id="ul0028-0002" num="0103">means for defining the arguments of the function, in said schema language,</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0086" num="0104">and, if the function produces a result,
<ul id="ul0029" list-style="none">
    <li id="ul0029-0001" num="0000">
    <ul id="ul0030" list-style="none">
        <li id="ul0030-0001" num="0105">means for defining the element describing the result of the function, in said schema language.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0087" num="0106">According to the second aspect of the invention, when the device is in a client terminal, it comprises, for obtaining an interface of an object by a terminal client, with said interface comprising at least one function described by the device in the server terminal,</p>
<p id="p-0088" num="0107">means for translating said interface into a programming language that is different to the schema language.</p>
<p id="p-0089" num="0108">The operation of the computer in the context of the invention is set out below.</p>
<p id="p-0090" num="0109">The invention also relates to a computer program adapted to implement the invention. This program can use any programming language, and be in the form of source code, object code, or code that is intermediate between source code and object code such as in a partially compiled form, or in any other form desirable for implementing a method according to the invention. The computer program can be in or on a data carrier which can be any entity or device capable of storing the program.</p>
<p id="p-0091" num="0110">With reference to <figref idref="DRAWINGS">FIG. 2</figref>, three computers C<b>200</b>, C<b>201</b>, and C<b>202</b> corresponding to the computer described with reference to <figref idref="DRAWINGS">FIG. 1</figref> supply services through the intermediary of the objects O<b>200</b>, O<b>201</b>, O<b>202</b>, O<b>203</b> and O<b>204</b>.</p>
<p id="p-0092" num="0111">The list and the features of the functions applicable to the objects are described by the interfaces I<b>200</b>, I<b>201</b> and I<b>203</b>. An object refers to the interfaces which describe the functions which are applicable to it. An object can refer to a single interface, for example the object O<b>200</b> refers only to the interface I<b>200</b>. An object can also refer to a several interfaces, for example the object O<b>201</b> refers to the interfaces I<b>200</b> and I<b>201</b>. An object can refer to an interface present on the same computer or on a remote computer.</p>
<p id="p-0093" num="0112">With reference to <figref idref="DRAWINGS">FIG. 3</figref>, an object is described by a document <b>300</b> written in a markup language, for example an XML language. The document <b>300</b> here is an XML document.</p>
<p id="p-0094" num="0113">The document <b>300</b> refers to a document representing an interface <b>301</b>.</p>
<p id="p-0095" num="0114">According to the first aspect of the invention, the document <b>301</b> is written in the markup language, but a typing resulting from a schema language associated with the markup language used is introduced in order to define the type of the arguments and of the result of the functions.</p>
<p id="p-0096" num="0115">According to the second aspect of the invention, the document <b>301</b> is written in a schema language associated with the markup language used. The document <b>301</b> here is an XML schema.</p>
<p id="p-0097" num="0116">A function invocation applicable to the object represented by the XML document <b>300</b> is represented by an XML document <b>302</b>. When the function invocation produces a result, the latter is represented by an XML document <b>303</b>.</p>
<p id="p-0098" num="0117">In the first aspect of the invention, the interface description document <b>301</b> makes it possible to validate the documents <b>302</b> and <b>303</b>, that is to say to verify that their structure conforms to that defined by the XML schema representing the interface.</p>
<p id="p-0099" num="0118">In the case of a function invocation, the validation makes it possible in particular to verify that the number of arguments passed is correct, that the type of arguments (integer, string, real, etc.) is correct and that the constraints on the value of the arguments (value range, etc.) are respected.</p>
<p id="p-0100" num="0119"><figref idref="DRAWINGS">FIG. 4</figref><i>a </i>shows examples of XML documents used in the first aspect of the invention.</p>
<p id="p-0101" num="0120">The document <b>400</b><i>a </i>is the description of an object called an image. This object contains a reference to its interface, in the form of an attribute of the main element (image). The value of this attribute is the URI (Universal Resource Identifier) of the interface.</p>
<p id="p-0102" num="0121">By extracting this URI from the definition of the object, it is possible to obtain, by a connection via the Internet, the description of the interface of the object.</p>
<p id="p-0103" num="0122">If the functions applicable to the object are described by several interfaces, the attribute interface will have as its value the list of the URIs of these interfaces.</p>
<p id="p-0104" num="0123">The interface referenced by the object is described by the XML document <b>410</b><i>a. </i></p>
<p id="p-0105" num="0124">The parts <b>411</b><i>a</i>, <b>412</b><i>a </i>and <b>413</b><i>a </i>correspond respectively to the descriptions of three functions called “getDimension”, “setDimension” and “rotate”.</p>
<p id="p-0106" num="0125">As shown by the document <b>410</b><i>a</i>, an interface is defined by a tag known as the “interface” and having two attributes:
<ul id="ul0031" list-style="none">
    <li id="ul0031-0001" num="0000">
    <ul id="ul0032" list-style="none">
        <li id="ul0032-0001" num="0126">“name” for defining the name of the interface, and</li>
        <li id="ul0032-0002" num="0127">“href” for defining the URI of the interface.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0107" num="0128">As represented by the parts <b>411</b><i>a</i>, <b>412</b><i>a </i>and <b>413</b><i>a </i>of the document <b>410</b><i>a</i>, a function is defined by a tag. The name of this tag is the name of the function and is situated inside the tag describing the interface.</p>
<p id="p-0108" num="0129">An argument of a function is described by a tag whose name is the name of the argument and which is inside the tag describing the function. Thus the part <b>412</b><i>a </i>of the document <b>410</b><i>a </i>describes a function “setDimension” having an argument “dimension”, and the part <b>413</b><i>a </i>of the document <b>410</b><i>a </i>describes a function “rotate” having an argument “angle”.</p>
<p id="p-0109" num="0130">If an argument has a predefined type in the XML schema language, this type is specified by adding an attribute to the tag describing this argument. For example, in the part <b>413</b><i>a </i>of the document <b>410</b><i>a</i>, the type of the argument “angle” is the integer type and specified by the attribute “type=“xs:integer””.</p>
<p id="p-0110" num="0131">Otherwise a type definition is added inside the tag defining the argument. This definition forms part of the typing of an XML schema language. For example, in the part <b>412</b><i>a </i>of the document <b>410</b><i>a</i>, the type of the argument “dimension” is a complex type.</p>
<p id="p-0111" num="0132">If the function produces a result, this is defined in the same way as an argument. An attribute “out=“true”” is added to the tag defining the result in order to indicate that this tag corresponds to a result and not to an argument. This is the case with the function “getDimension” of the part <b>411</b><i>a </i>of the document <b>410</b><i>a </i>whose result is “dimension”.</p>
<p id="p-0112" num="0133">The documents <b>420</b><i>a </i>and <b>430</b><i>a </i>correspond to an invocation and a result of the function named “getDimension” described in the part <b>411</b><i>a </i>of the document <b>410</b><i>a</i>. The document <b>440</b><i>a </i>corresponds for its part to an invocation of the function “rotate” described in the part <b>413</b><i>a </i>of the document <b>410</b><i>a. </i></p>
<p id="p-0113" num="0134"><figref idref="DRAWINGS">FIG. 4</figref><i>b </i>shows examples of XML documents used in the second aspect of the invention.</p>
<p id="p-0114" num="0135">Document <b>400</b><i>b </i>is the description of an object named image. This object contains a reference to its interface in the form of an attribute of the principal element (image). The value of this attribute is the URI (Universal Resource Identifier) of the Interface.</p>
<p id="p-0115" num="0136">By extracting this URI from the definition of the object, it is possible to obtain the description of the object interface by a connection via the Internet network.</p>
<p id="p-0116" num="0137">If the functions applicable to the object are described by several interfaces, value of the attribute interface will be the list of the URI's of these interfaces.</p>
<p id="p-0117" num="0138">The interface referenced by the object is described by the document <b>410</b><i>b</i>. The document <b>410</b><i>b </i>corresponds to general definitions that have to be reproduced in all the interface descriptions. It is possible to group these definitions together into a document which will be imported (by an element import) into all the interface descriptions. The role of these definitions will be explained in what follows.</p>
<p id="p-0118" num="0139">The parts <b>412</b><i>b</i>, <b>413</b><i>b </i>and <b>414</b><i>b </i>correspond respectively to the descriptions of three functions called “getwidth”, “getDimension” and “rotate”. The parts <b>412</b><i>b </i>and <b>413</b><i>b </i>comprise both the description of a function invocation and the result of this invocation. The part <b>414</b><i>b </i>only contains the description of a function invocation, the function “rotate” not giving any result.</p>
<p id="p-0119" num="0140">A function invocation or a function result is described using an XML element definition. The use of an XML schema language makes it possible to describe the structure of a function invocation (list of the parameters and their type) or a function result (type of result). Two aspects cannot be specified using this standard: knowing if an XML element definition corresponds to a function invocation or to a result and knowing the result corresponding to a function invocation.</p>
<p id="p-0120" num="0141">An element describing a function invocation has a type deriving from the type “function” defined in the part <b>411</b><i>b </i>of the document <b>410</b><i>b</i>. This type “function” makes it possible to determine which XML element definitions correspond to function invocations in the document <b>410</b><i>b. </i></p>
<p id="p-0121" num="0142">Moreover, the definition of an element describing a function invocation can contain a supplementary attribute named “image:resultType” for indicating which element describes the result of this invocation. This attribute is defined in the part <b>411</b><i>b </i>of the document <b>410</b><i>b</i>. Its absence indicates that the function gives no result. Thus the result of the function named “getWidth” is described by the element named “width”, whereas the function named “rotate” gives no result.</p>
<p id="p-0122" num="0143">In variant form, a function invocation and a result are linked by virtue of the documentary elements of the XML schema language. A first variant consists of adding documentation to each function description to indicate which element describes its result:</p>
<p id="p-0123" num="0144">
<tables id="TABLE-US-00001" num="00001">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="21pt" align="left"/>
<colspec colname="1" colwidth="196pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>&lt;xsd:element name=“getWidth”&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="35pt" align="left"/>
<colspec colname="1" colwidth="182pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>&lt;xsd:annotation&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="49pt" align="left"/>
<colspec colname="1" colwidth="168pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>&lt;xsd:appInfo&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="63pt" align="left"/>
<colspec colname="1" colwidth="154pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>&lt;result&gt;width&lt;/result&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="49pt" align="left"/>
<colspec colname="1" colwidth="168pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>&lt;/xsd:appInfo&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="21pt" align="left"/>
<colspec colname="1" colwidth="196pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry> &lt;/xsd:annotation&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="35pt" align="left"/>
<colspec colname="1" colwidth="182pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>&lt;xsd:complexType&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="49pt" align="left"/>
<colspec colname="1" colwidth="168pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>&lt;xsd:complexContent&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="63pt" align="left"/>
<colspec colname="1" colwidth="154pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>&lt;xsd:extension base=“image:function”/&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="49pt" align="left"/>
<colspec colname="1" colwidth="168pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>&lt;/xsd:complexContent&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="35pt" align="left"/>
<colspec colname="1" colwidth="182pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>&lt;/xsd:complexType&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="21pt" align="left"/>
<colspec colname="1" colwidth="196pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>&lt;/xsd:element&gt;</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0124" num="0145">A second variant consists in adding documentation to the document <b>410</b><i>b </i>that links the set of function descriptions with their possible result.It should be noted that this second variant makes it possible to dispense with the use of the “function” type, the elements describing a function being identified in the list constituting the documentation. In the example of document <b>410</b><i>b</i>, the added documentation would be:</p>
<p id="p-0125" num="0146">
<tables id="TABLE-US-00002" num="00002">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>&lt;xsd:annotation&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>&lt;xsd:appInfo&gt;</entry>
</row>
<row>
<entry/>
<entry>&lt;function&gt;&lt;call&gt;getWidth&lt;/call&gt;&lt;result&gt;width&lt;/result&gt;&lt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>/function&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>&lt;function&gt;&lt;call&gt;getDimension&lt;/call&gt;&lt;result&gt;dimension&lt;/</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>result&gt;&lt;/function&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="42pt" align="left"/>
<colspec colname="1" colwidth="175pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>&lt;function&gt;&lt;call&gt;rotate&lt;/call&gt;&lt;/function&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>&lt;/xsd:appInfo&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>&lt;/xsd:annotation&gt;</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0126" num="0147">The documents <b>420</b><i>b </i>and <b>430</b><i>b </i>correspond to an invocation and a result of the function named “getDimension” described in the part <b>413</b><i>b </i>of the document <b>410</b><i>b</i>. These two XML documents can be validated by the document <b>410</b><i>b</i>. On the other hand, the document <b>440</b><i>b </i>corresponds to an invocation of the function named “rotate” described in part <b>414</b><i>b </i>of the document <b>410</b><i>b. </i></p>
<p id="p-0127" num="0148"><figref idref="DRAWINGS">FIG. 5</figref> represents a table T stored in the RAM memory <b>103</b> of a server computer, for example the computer C<b>200</b> (<figref idref="DRAWINGS">FIG. 2</figref>). Table T contains the associations between objects and interfaces.</p>
<p id="p-0128" num="0149">The first column T<b>500</b> of table T comprises the URI's under which are respectively published the objects. The second column T<b>501</b> comprises the respective references to the objects published. A reference directs to the internal representation of an object in the RAM <b>103</b> of the computer C<b>200</b>.</p>
<p id="p-0129" num="0150">The third column T<b>502</b> comprises the URI's of the interfaces describing respectively the functions applicable to the objects.</p>
<p id="p-0130" num="0151">Thus, a line of the table T comprises the URI under which an object is published, a reference to the published object and the URI of an interface describing the functions applicable to the object. If the functions applicable to an object are described by several interfaces, the table T comprises as many lines respectively linking this object and each of its interfaces.</p>
<p id="p-0131" num="0152"><figref idref="DRAWINGS">FIG. 6</figref> represents a table T′ stored in the RAM memory <b>103</b> of a server computer, for example the computer C<b>200</b> (<figref idref="DRAWINGS">FIG. 2</figref>). The table T contains the associations between the interfaces and their representation in XML language in the first aspect of the invention or in XML schema language in the second aspect of the invention.</p>
<p id="p-0132" num="0153">The first column T′<b>500</b> of table T′ comprises the URI's under which are respectively published the interfaces. It should be noted that these URI's reappear in column T<b>502</b> of the table T. The second column T′<b>501</b> comprises the respective representations in XML language (first aspect) or in XML Schema (second aspect) of each interface in text file form.</p>
<p id="p-0133" num="0154">The third column T′<b>502</b> comprises the internal representations of the interfaces, for example in C or C++ language.</p>
<p id="p-0134" num="0155">Thus, a line of the table T′ comprises the URI under which is published an interface, the representation in XML language (first aspect) in XML Schema (second aspect) of this interface and the internal representation of the interface.</p>
<p id="p-0135" num="0156"><figref idref="DRAWINGS">FIG. 7</figref><i>a </i>depicts one embodiment of a description of an interface in a markup language, according to the first aspect of the invention. This method is implemented in a server and includes steps E<b>1</b> to E<b>12</b>.</p>
<p id="p-0136" num="0157">The method is implemented in the form of an algorithm which can be stored in whole or in part in any information storage means capable of cooperating with the microprocessor. This storage means can be read by a computer or by a microprocessor. This storage means is integrated or not into the device, and may be removable. For example, it may include a magnetic tape, a diskette or a CD-ROM (fixed-memory compact disc).</p>
<p id="p-0137" num="0158">As stated above, the markup language is more particularly the XML language and a schema language associated with it is the XML schema language.</p>
<p id="p-0138" num="0159">Step E<b>1</b> is the obtaining of the interface to be described, for example by reading in memory. The interface is a set of functions which can be applied to a computer object. The interface is expressed in a predetermined known programming language, which is different from the XML language and may be any language, for example C or C++ language.</p>
<p id="p-0139" num="0160">The functions of the interface are now considered successively.</p>
<p id="p-0140" num="0161">The following step E<b>2</b> is the selection of a first function.</p>
<p id="p-0141" num="0162">The following step E<b>3</b> is the creation of a definition “empty” of the current function. This definition is expressed in XML language, in the form of a tag:</p>
<p id="p-0142" num="0163">&lt;getwidth&gt;</p>
<p id="p-0143" num="0164">&lt;/getWidth&gt;</p>
<p id="p-0144" num="0165">The name of the tag is the name of the current function, for example here the function “getWidth”.</p>
<p id="p-0145" num="0166">The following step E<b>4</b> is a test for determining whether the current function has at least one argument.</p>
<p id="p-0146" num="0167">When the response is positive, then this step is followed by step E<b>5</b>, which is the selection of a first argument of the current function.</p>
<p id="p-0147" num="0168">At the following step E<b>6</b>, a definition of the current argument is created in XML schema language by adding a tag whose name is that of the current argument inside the tag created at step E<b>3</b>.</p>
<p id="p-0148" num="0169">If the type of the argument is predefined in the XML schema language, an attribute:</p>
<p id="p-0149" num="0170">type=“. . . ”</p>
<p id="p-0150" num="0171">is added to the tag defining the current argument and the algorithm in <figref idref="DRAWINGS">FIG. 8</figref> is not used.</p>
<p id="p-0151" num="0172">In the contrary case, the definition of the type is constructed as disclosed hereinafter with reference to <figref idref="DRAWINGS">FIG. 8</figref> and is inserted in the tag defining the current argument.</p>
<p id="p-0152" num="0173">The following step E<b>7</b> is a test for determining whether there remains at least one argument of the current function to be processed. When the response is positive, step E<b>7</b> is followed by step E<b>8</b>, at which a following argument is considered. Step E<b>8</b> is followed by the previously described step E<b>6</b>.</p>
<p id="p-0153" num="0174">When the response is negative at step E<b>7</b>, that is to say there is no more argument to be considered, step E<b>7</b> is followed by step E<b>9</b>. Likewise, when the response is negative at step E<b>4</b>, this step is followed by step E<b>9</b>.</p>
<p id="p-0154" num="0175">Step E<b>9</b> is a test for checking whether the invoking of the current function produces a result.</p>
<p id="p-0155" num="0176">When the response is positive, then this step is followed by step E<b>10</b>, to which a definition of the result is created in XML schema language by adding a tag whose name is that of the result inside the tag defining the current function. To this tag there is added an attribute “out=“true”” to signify that it corresponds to a result and not to an argument.</p>
<p id="p-0156" num="0177">If the type of the result is predefined in the XML schema language, an attribute:</p>
<p id="p-0157" num="0178">type=“. . . ”</p>
<p id="p-0158" num="0179">is added to the tag defining the result and the algorithm in <figref idref="DRAWINGS">FIG. 8</figref> is not used.</p>
<p id="p-0159" num="0180">In the contrary case, the definition of the type is constructed as disclosed hereinafter with reference to <figref idref="DRAWINGS">FIG. 8</figref> and is added inside the tag defining the result.</p>
<p id="p-0160" num="0181">The following step E<b>11</b> is a test for determining whether there remains at least one function to be processed. When the response is positive, step E<b>11</b> is followed by step E<b>12</b>, at which a following function is considered. Step E<b>12</b> is followed by the previously described step E<b>3</b>.</p>
<p id="p-0161" num="0182">When the response is negative at step E<b>9</b>, that is to say an invocation of the current function does not produce any result, step E<b>9</b> is followed by step E<b>11</b>.</p>
<p id="p-0162" num="0183">When all the functions of the current interface have been processed, the response to step E<b>11</b> is negative and the processing is terminated. Naturally, the interface is stored in the previously described table T′.</p>
<p id="p-0163" num="0184"><figref idref="DRAWINGS">FIG. 7</figref><i>b </i>represents an embodiment of the description of an interface in a schema language associated with a markup language, according to the second aspect of the invention. This method is implemented in a server and comprises the steps S<b>1</b> to S<b>12</b>.</p>
<p id="p-0164" num="0185">The method is carried out in the form of an algorithm which can be stored in whole or in part in any means of information storage capable of cooperating with the microprocessor. This storage means is readable by a computer or by a microprocessor. The storage means is integrated or not into the device, and may be removable. For example, it may comprise a magnetic tape, a diskette or a CD-ROM (fixed memory compact disk).</p>
<p id="p-0165" num="0186">As stated earlier, the markup language is more particularly the XML language and the associated schema language is the XML schema language.</p>
<p id="p-0166" num="0187">Step S<b>1</b> is the obtaining of the interface to be described, for example by reading from memory. The interface is a set of functions which may be applied to a computing object. The interface is expressed in any known predetermined programming language, different to the XML schema language, for example in C or C++ language.</p>
<p id="p-0167" num="0188">The functions of the interface will now be considered in turn.</p>
<p id="p-0168" num="0189">The following step S<b>2</b> is the selection of a first function.</p>
<p id="p-0169" num="0190">The following step S<b>3</b> is the creation of an “empty” definition of the element describing the current function. This definition is expressed in XML schema language, in the form:</p>
<p id="p-0170" num="0191">
<tables id="TABLE-US-00003" num="00003">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>&lt;xs:element name=“. . .”&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="42pt" align="left"/>
<colspec colname="1" colwidth="175pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>&lt;xsd:complexType&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="56pt" align="left"/>
<colspec colname="1" colwidth="161pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>&lt;xsd:complexContent&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="70pt" align="left"/>
<colspec colname="1" colwidth="147pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>&lt;xsd:extension base=“image:function”&gt;</entry>
</row>
<row>
<entry/>
<entry>&lt;/xsd:extension&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="56pt" align="left"/>
<colspec colname="1" colwidth="161pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>&lt;/xsd:complexContent&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="42pt" align="left"/>
<colspec colname="1" colwidth="175pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>&lt;/xsd:complexType&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>&lt;/xsd:element&gt;</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0171" num="0192">The first line is completed with the name of the current function which is inserted as the value of the attribute “name”.</p>
<p id="p-0172" num="0193">The following step S<b>4</b> is a test to determine if the current function has at least one argument.</p>
<p id="p-0173" num="0194">When the response is positive, step S<b>4</b> is followed by step S<b>5</b> which is the selection of a first argument of the current function.</p>
<p id="p-0174" num="0195">At the following step S<b>6</b>, a definition of the current argument is created in XML schema language and added to the definition created at step S<b>3</b>.</p>
<p id="p-0175" num="0196">Step S<b>6</b> is described in detail below.</p>
<p id="p-0176" num="0197">The following step S<b>7</b> is a test to determine if there remains at least one argument to be processed.</p>
<p id="p-0177" num="0198">When the response is positive, this step is followed by the step S<b>8</b> at which a following argument is considered. This step is followed by the step S<b>6</b> already described.</p>
<p id="p-0178" num="0199">When the response is negative at step S<b>7</b>, that is to say there is no argument left to consider, step S<b>7</b> is followed by the step S<b>9</b>. Similarly, when the response is negative at step S<b>4</b>, this step is followed by the step S<b>9</b>.</p>
<p id="p-0179" num="0200">Step S<b>9</b> is a test to verify if the invocation of the current function gives a result.</p>
<p id="p-0180" num="0201">When the response is positive, this step is followed by the step S<b>10</b> at which a definition of the result is created in XML schema language.</p>
<p id="p-0181" num="0202">The first line of the definition of the current function is then completed by adding an attribute “image:resultType” of which the value is the name of the element describing the result:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>&lt;xsd:element name=“. . . ” image:resultType=“. . . ”&gt;<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0182" num="0203">The creation of the definition of the result is next similar to step S<b>6</b> and will be described in detail below.</p>
<p id="p-0183" num="0204">Step S<b>10</b> is followed by a step S<b>11</b> which is a test to verify if there remains at least one function to be processed. Similarly, when the response is negative at step S<b>9</b>, that is to say an invocation of the current function does not give any result, step S<b>9</b> is followed by the step S<b>11</b>.</p>
<p id="p-0184" num="0205">When the response is positive at step S<b>11</b>, this step is followed by the step S<b>12</b> in order to consider a following function. This step is followed by the step S<b>3</b> already described.</p>
<p id="p-0185" num="0206">When all the functions of the current interface have been processed, the response at step S<b>11</b> is negative and the processing is terminated. Naturally, the interface is stored in the table T′ already described.</p>
<p id="p-0186" num="0207">The definition of a new type (<figref idref="DRAWINGS">FIG. 7</figref><i>a</i>, first aspect of the invention) is now detailed with reference to <figref idref="DRAWINGS">FIG. 8</figref><i>a</i>, in the form of an algorithm including steps E<b>70</b> to E<b>81</b>.</p>
<p id="p-0187" num="0208">The figure is described hereinafter with reference to an argument, but the steps are identical in order to describe a function result.</p>
<p id="p-0188" num="0209">Step E<b>70</b> is a test for checking whether the type to be defined is complex. A complex type is composed of several fields. Each field has its own type.</p>
<p id="p-0189" num="0210">When the response is positive, this means that the current type has several fields and this step is followed by step E<b>71</b>, at which a complex type definition is created in XML schema language.</p>
<p id="p-0190" num="0211">The following step E<b>72</b> is the selection of a first field of the current type.</p>
<p id="p-0191" num="0212">At the following step E<b>73</b>, a tag for defining the field is created in XML schema language. If the type of the field is a predefined type, it is specified in the tag by an attribute “type=“. . . ””. Otherwise the description of the type is added inside the tag, once again invoking the algorithm in <figref idref="DRAWINGS">FIG. 8</figref>. In other words, in the latter case, step E<b>73</b> switches to step E<b>70</b>.</p>
<p id="p-0192" num="0213">The following step E<b>74</b> is a test for checking whether there remains at least one field of the current complex type to be processed.</p>
<p id="p-0193" num="0214">When the response is positive, then this step is followed by step E<b>75</b>, at which a following field is considered. Step E<b>75</b> is followed by the previously described step E<b>73</b>.</p>
<p id="p-0194" num="0215">When all the fields of the current complex type have been described in XML schema language, that is to say when the response is negative at step E<b>74</b>, then the processing of the current type is terminated.</p>
<p id="p-0195" num="0216">When the response is negative at step E<b>70</b>, the current type is not complex. In this case, this step is followed by step E<b>76</b>, which is a test for verifying whether the type is a collection. A collection is a set of values of the same type.</p>
<p id="p-0196" num="0217">When the response is positive, then this step is followed by step E<b>77</b>, at which a definition of the collection type is created in XML schema language.</p>
<p id="p-0197" num="0218">At the following step E<b>78</b>, a tag for defining the content of the collection is created in XML schema language. If the type of the content of the collection is a predefined type, it is specified in the tag by an attribute “type=“. . . ””. Otherwise the description of the type is added inside the tag, once again invoking the algorithm in <figref idref="DRAWINGS">FIG. 8</figref>. In other words, in the latter case, step E<b>78</b> switches to step E<b>70</b>.</p>
<p id="p-0198" num="0219">When the response is negative at step E<b>76</b>, this step is followed by step E<b>79</b>, which is a test for determining whether the current argument has a simple type, that is to say one having neither attribute nor sub-element. Simple types are for example an integer, an integer between 1 and 10, a character string of 7 characters.</p>
<p id="p-0199" num="0220">When the response is positive, this step is followed by step E<b>80</b>, which is the creation of a definition of an element having this simple type.</p>
<p id="p-0200" num="0221">When the response is negative at step E<b>79</b>, this step is followed by step E<b>81</b>, which is the creation of an element definition corresponding to a remote reference. This element contains a URI from which the referenced object can be downloaded.</p>
<p id="p-0201" num="0222">In a variant, the type description is produced in the following manner.</p>
<p id="p-0202" num="0223">Only the predefined types are taken from the XML schema language. A complex type is then described inside the tag of the element having this complex type. Inside this tag, each field of the complex type is defined by a tag whose name is that of the field. If the field has a predefined type, it is indicated by an attribute “type=“. . . ””. Otherwise, the type of field is complex and is described recursively inside the tag describing the field.</p>
<p id="p-0203" num="0224">For example, according to this variant, a function called “asThumbnail” is described thus:</p>
<p id="p-0204" num="0225">
<tables id="TABLE-US-00004" num="00004">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="49pt" align="left"/>
<colspec colname="1" colwidth="168pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>&lt;asThumbnail&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="63pt" align="left"/>
<colspec colname="1" colwidth="154pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>&lt;thumbnail out=“true”&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="77pt" align="left"/>
<colspec colname="1" colwidth="140pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>&lt;width type=“xs:integer”/&gt;</entry>
</row>
<row>
<entry/>
<entry>&lt;height type=“xs:integer”/&gt;</entry>
</row>
<row>
<entry/>
<entry>&lt;pixels type=“xs:base64”/&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="63pt" align="left"/>
<colspec colname="1" colwidth="154pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>&lt;/thumbnail&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="49pt" align="left"/>
<colspec colname="1" colwidth="168pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>&lt;/asThumbnail&gt;</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0205" num="0226">This is to be interpreted in the following manner: the function “asthumbnail” has a single argument, called “thumbnail”, whose type is complex and which is composed of three fields, “width”, “height” and “pixels” having respectively the predefined types “xs:integer”, “xs:integer” and “xs:base64”.</p>
<p id="p-0206" num="0227">Steps S<b>6</b> and S<b>10</b> (<figref idref="DRAWINGS">FIG. 7</figref><i>b</i>, second aspect of the invention) will now be detailed with reference to <figref idref="DRAWINGS">FIG. 8</figref><i>b</i>, in the form of an algorithm comprising the steps S<b>70</b> to S<b>81</b>.</p>
<p id="p-0207" num="0228">The description in XML schema language of an argument or a result is carried out according to its type. The Figure is described below with reference to an argument, but the steps are identical for describing a function result.</p>
<p id="p-0208" num="0229">Step S<b>70</b> is a test to verify if the type of the current argument is complex. A complex type is composed of several fields. Each field has its own type.</p>
<p id="p-0209" num="0230">When the response is positive, this means that the current argument comprises several fields and this step is followed by the step S<b>71</b> at which an element definition corresponding to this complex type is created in XML schema language.</p>
<p id="p-0210" num="0231">The following step S<b>72</b> is the selection of a first field of the current argument.</p>
<p id="p-0211" num="0232">At the following step S<b>73</b>, a definition of the field is created in XML schema language and added to the definition of the current type.</p>
<p id="p-0212" num="0233">Step S<b>73</b> is an invocation of the type description algorithm in XML schema language. In other words, step S<b>73</b> links onto step S<b>70</b> to deal with the current field according to its type.</p>
<p id="p-0213" num="0234">The following step S<b>74</b> is a test to verify if there remains at least one field of the argument of complex current type to be processed.</p>
<p id="p-0214" num="0235">When the response is positive, this step is followed by the step S<b>75</b> at which a following field is considered. Step S<b>75</b> is followed by the step S<b>73</b> already described.</p>
<p id="p-0215" num="0236">When all the fields of the argument of complex current type have been described in XML schema language, that is to say when the response is negative at step S<b>74</b>, then the processing of the current argument is terminated.</p>
<p id="p-0216" num="0237">When the response is negative at step S<b>70</b>, the type of the current argument is not complex. In this case, this step is followed by the step S<b>76</b> which is a test to verify if the type is a collection. A collection is a set of values of the same type.</p>
<p id="p-0217" num="0238">When the response is positive, this step is followed by the step S<b>77</b> at which a definition of element corresponding to this collection type is created in XML schema language.</p>
<p id="p-0218" num="0239">At the following step S<b>78</b>, a nested element definition is created in XML schema language and added to the definition of the current collection type.</p>
<p id="p-0219" num="0240">Step S<b>78</b> is an invocation of the type description algorithm in XML schema language. In other words, step S<b>78</b> links onto step S<b>70</b> to deal with the nested element according to its type.</p>
<p id="p-0220" num="0241">Thus, for example, an integer table is described by the definition:</p>
<p id="p-0221" num="0242">
<tables id="TABLE-US-00005" num="00005">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="21pt" align="left"/>
<colspec colname="1" colwidth="196pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>&lt;xs:element name=“ integerTable”&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="35pt" align="left"/>
<colspec colname="1" colwidth="182pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>&lt;xsd:complexType&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="49pt" align="left"/>
<colspec colname="1" colwidth="168pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>&lt;xsd:sequence</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="77pt" align="left"/>
<colspec colname="1" colwidth="140pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>minOccurs=“0” maxOccurs=“unbounded”&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="63pt" align="left"/>
<colspec colname="1" colwidth="154pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>&lt;xsd:element name=“element”</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="21pt" align="left"/>
<colspec colname="1" colwidth="196pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>type=“xsd:integer”/&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="49pt" align="left"/>
<colspec colname="1" colwidth="168pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>&lt;/xsd:sequence&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="35pt" align="left"/>
<colspec colname="1" colwidth="182pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>&lt;/xsd:complexType&gt;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="21pt" align="left"/>
<colspec colname="1" colwidth="196pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>&lt;/xsd:element&gt;</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0222" num="0243">When the response is negative at step S<b>76</b>, this step is followed by step S<b>79</b> which is a test to determine if the current argument as a known simple type, that is to say corresponding to a type defined by the XML schemas.</p>
<p id="p-0223" num="0244">An element of simple type does not comprise any attribute or sub-element. Known simple types are for example integers, real numbers, and strings.</p>
<p id="p-0224" num="0245">When the response is positive, this step is followed by the step S<b>80</b> which is the creation of an element definition having this simple type.</p>
<p id="p-0225" num="0246">When the response is negative at step S<b>79</b>, this step is followed by the step S<b>81</b> which is the creation of an element definition corresponding to a remote reference. This element contains a URI from which the referenced object can be downloaded.</p>
<p id="p-0226" num="0247"><figref idref="DRAWINGS">FIG. 9</figref> shows a table Tc′ analog to the table T′ of <figref idref="DRAWINGS">FIG. 6</figref>, but which is stored in the RAM memory <b>103</b> of a client computer.</p>
<p id="p-0227" num="0248">Table Tc′ enables the client computer to keep the descriptions of the interfaces which he encounters.</p>
<p id="p-0228" num="0249">At the same time the interfaces are stored in memory in description form in XML language in the first aspect of the invention or in XML schema in the second aspect of the invention which is the description as obtained by the client computer from the server computer and in internal form, this description being reconstructed from the description in XML language (first aspect) or in XML schema (second aspect).</p>
<p id="p-0229" num="0250"><figref idref="DRAWINGS">FIG. 10</figref> shows a method of obtaining interfaces of an object by a client computer, in the form of an algorithm comprising the steps S<b>20</b> to S<b>29</b>. The object of this method is to obtain the set of the interfaces describing the functions applicable to an object.</p>
<p id="p-0230" num="0251">This algorithm may be stored in whole or in part in any means of information storage capable of cooperating with the microprocessor. This storage means is readable by a computer or by a microprocessor. The storage means is integrated or not into the device, and may be removable. For example, it may comprise a magnetic tape, a diskette or a CD-ROM (fixed memory compact disk).</p>
<p id="p-0231" num="0252">Step S<b>20</b> is the reception of the description of an object in the form of an XML document for example in response to a request. The client computer receives the document <b>400</b><i>a </i>(<figref idref="DRAWINGS">FIG. 4</figref><i>a</i>, first aspect of the invention) or the document <b>400</b><i>b </i>(<figref idref="DRAWINGS">FIG. 4</figref><i>b</i>, second aspect of the invention) for example.</p>
<p id="p-0232" num="0253">The following step S<b>21</b> is the extraction of the URI of a first interface from the XML document. For example, from the document <b>400</b><i>a </i>or <b>400</b><i>b </i>is extracted from the document <b>400</b><i>a</i>and <b>400</b><i>b. </i></p>
<p id="p-0233" num="0254">The following step S<b>22</b> is a test for determining if the current interface is stored in the table Tc′ (<figref idref="DRAWINGS">FIG. 9</figref>) present in the RAM memory of type client computer.</p>
<p id="p-0234" num="0255">When the response is negative, step S<b>22</b> is followed by step S<b>23</b> at which a request is sent to the address defined by the URI previously obtained for obtaining the XML document describing the interface (first aspect of the invention) or the description in XML schema of the interface (second aspect of the invention).</p>
<p id="p-0235" num="0256">In the first aspect of the invention, the following step S<b>24</b> is the reception of the XML document describing the interface. For example, the document <b>410</b><i>a </i>is received by the client computer.</p>
<p id="p-0236" num="0257">In the second aspect of the invention, the following step S<b>24</b> is the reception of the description of the interface in XML schema. For example, the document <b>410</b><i>b </i>is received by the client computer.</p>
<p id="p-0237" num="0258">At the following step S<b>25</b>, the XML document (first aspect of the invention) or the XML schema (second aspect of the invention) of the current interface is stored in the table Tc′.</p>
<p id="p-0238" num="0259">The following step S<b>26</b> is the translation of the XML document (first aspect of the invention) or of the XML schema (second aspect of the invention) of the current interface into internal language such as for example C or C++, in order to obtain an internal description.</p>
<p id="p-0239" num="0260">At the following step S<b>27</b>, the internal description of the current interface is stored in the table Tc′.</p>
<p id="p-0240" num="0261">Step S<b>27</b> is followed by a step S<b>28</b> which is a test to determine if there remains at least one interface to be processed. If the response is positive, this step is followed by the step S<b>29</b> at which the URI of a following interface is extracted. Step S<b>29</b> is followed by the step S<b>22</b> already described.</p>
<p id="p-0241" num="0262">When the response is positive at step S<b>22</b>, this step is also followed by the step S<b>28</b>.</p>
<p id="p-0242" num="0263">When the response is negative at step S<b>28</b>, then the set of interfaces describing the functionalities of an object had been obtained by the client computer.</p>
<p id="p-0243" num="0264">Of course, the present invention is in no way limited to the embodiments described and represented, but encompasses, on the contrary, any variant form within the capability of the person skilled in the art.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>The invention claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method of describing a function used to manipulate data of a computer object, the function being invokable in a first markup language and being initially expressed in a predetermined programming language different from the first markup language, the method comprising the steps of:
<claim-text>defining (E<b>3</b>) a first tag describing the function,</claim-text>
<claim-text>defining (E<b>6</b>) second tags describing arguments of the function, the second tags being contained in the first tag describing the function; and,</claim-text>
<claim-text>if the function produces a result, defining (E<b>10</b>) a third tag describing the result of the function, the third tag being contained in the first tag describing the function,</claim-text>
<claim-text>wherein the first, second and third tags are in the first makeup language;</claim-text>
<claim-text>wherein at least one of the second and third tags contain at least a fourth tag in a second markup language, of schema type, said fourth tag defining the type of the corresponding argument or result, said second markup language being associated with the first markup language; and outputting the function to manipulate data.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. A method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the associated schema language is a markup language that enables construction of a complex type by an aggregation of predefined simple types and wherein said fourth tag is used to define said aggregation.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. A method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the third tag is differentiated from the second tags by an attribute with a specific value.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. A method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>,
<claim-text>wherein at least one function forms part of an interface, and wherein the method further comprises the step of storing the interface in the markup language or in the programming language.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. A method for obtaining, by a client terminal, an interface of an object, the interface having at least one function described by the method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, said method for obtaining comprising the step of translating (S<b>26</b>) the interface into a programming language different from the markup language.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. A method for obtaining according to <claim-ref idref="CLM-00005">claim 5</claim-ref>, further comprising the step of storing the interface in the markup language or in the programming language.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. A method of describing according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the markup language is an XML language and the associated schema language is an XML schema language.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. An information carrier device storing a computer program for implementing a method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, when the program is loaded and executed in a computer system.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. A device for determining a function used to manipulate data of a computer object, the function being invocable in a first markup language and being initially expressed in a predetermined programming language different from the first markup language, the device comprising:
<claim-text>means for defining a first tag describing the function,</claim-text>
<claim-text>means for defining second tags describing arguments of the function, the second tags being contained in the first tag describing the function; and</claim-text>
<claim-text>means for defining a third tag describing, if the function produces a result, the result of the function, the third tag being contained in the first tag describing the function,</claim-text>
<claim-text>wherein the first, second and third tags are in the first markup language; and</claim-text>
<claim-text>wherein at least one of the second and third tags contains at least a fourth tag in a second markup language, of schema type, said fourth tag defining the type of the corresponding argument or result, said second markup language being associated with the first markup language.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. An electronic file stored in a computer-readable medium, said file determining a function used to manipulate data of a computer object, wherein the function is capable of being invoked in a first markup language, the file comprising:
<claim-text>a first tag describing the function;</claim-text>
<claim-text>second tags describing arguments of the function, the second tags being contained in the first tag describing the function; and</claim-text>
<claim-text>if the function produces a result, a third tag describing the result of the function, the third tag being contained in the first tag describing the function,</claim-text>
<claim-text>wherein the first, second and third tags are in the first markup language; and</claim-text>
<claim-text>wherein at least one of the second and third tags contains at least a fourth tag defining the type of the corresponding argument or result in a schema language associated with the first markup language.</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>
