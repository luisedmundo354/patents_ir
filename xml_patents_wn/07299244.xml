<us-patent-grant lang="EN" dtd-version="v4.2 2006-08-23" file="US07299244-20071120.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20071106" date-publ="20071120">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>07299244</doc-number>
<kind>B2</kind>
<date>20071120</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>10315106</doc-number>
<date>20021210</date>
</document-id>
</application-reference>
<us-application-series-code>10</us-application-series-code>
<us-term-of-grant>
<us-term-extension>681</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>17</main-group>
<subgroup>30</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>7071041</main-classification>
<further-classification>707  8</further-classification>
<further-classification>707102</further-classification>
</classification-national>
<invention-title id="d0e53">System and method for dynamic sequencing of a requirements-based workflow</invention-title>
<references-cited>
<citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>6256773</doc-number>
<kind>B1</kind>
<name>Bowman-Amuah</name>
<date>20010700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717121</main-classification></classification-national>
</citation>
<citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>6502102</doc-number>
<kind>B1</kind>
<name>Haswell et al.</name>
<date>20021200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707102</main-classification></classification-national>
</citation>
<citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6546364</doc-number>
<kind>B1</kind>
<name>Smirnov et al.</name>
<date>20030400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>703 22</main-classification></classification-national>
</citation>
<citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>6574605</doc-number>
<kind>B1</kind>
<name>Sanders et al.</name>
<date>20030600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>705  8</main-classification></classification-national>
</citation>
<citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>6868441</doc-number>
<kind>B2</kind>
<name>Greene et al.</name>
<date>20050300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709220</main-classification></classification-national>
</citation>
<citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>6922685</doc-number>
<kind>B2</kind>
<name>Greene et al.</name>
<date>20050700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707  1</main-classification></classification-national>
</citation>
<citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2001/0008997</doc-number>
<kind>A1</kind>
<name>Masuda et al.</name>
<date>20010700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>705  8</main-classification></classification-national>
</citation>
<citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2002/0133503</doc-number>
<kind>A1</kind>
<name>Amar et al.</name>
<date>20020900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>7071041</main-classification></classification-national>
</citation>
<citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2002/0173984</doc-number>
<kind>A1</kind>
<name>Robertson et al.</name>
<date>20021100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>705  1</main-classification></classification-national>
</citation>
<citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>2002/0184137</doc-number>
<kind>A1</kind>
<name>Oakeson et al.</name>
<date>20021200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>705 37</main-classification></classification-national>
</citation>
<citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>2003/0120593</doc-number>
<kind>A1</kind>
<name>Bansal et al.</name>
<date>20030600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>705 39</main-classification></classification-national>
</citation>
<citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>2003/0149714</doc-number>
<kind>A1</kind>
<name>Casati et al.</name>
<date>20030800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709100</main-classification></classification-national>
</citation>
<citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>2004/0015823</doc-number>
<kind>A1</kind>
<name>Nolan</name>
<date>20040100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717104</main-classification></classification-national>
</citation>
<citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>2004/0059583</doc-number>
<kind>A1</kind>
<name>O'Neill</name>
<date>20040300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>705  1</main-classification></classification-national>
</citation>
<citation>
<nplcit num="00015">
<othercit>Kang, Myong H. et al., “Access Control Mechanisms for Inter-organizational Workflow”, SACMAT'o1, May 3-4, 2001, ACM, pp. 66-74.</othercit>
</nplcit>
<category>cited by examiner</category>
</citation>
</references-cited>
<number-of-claims>27</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>707102</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>707  8</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>707  1</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>70710411</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>705  7</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>705  1</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>705  8</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>703 22</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709220</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>719316</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>13</number-of-drawing-sheets>
<number-of-figures>13</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20040111430</doc-number>
<kind>A1</kind>
<date>20040610</date>
</document-id>
</related-publication>
</us-related-documents>
<parties>
<applicants>
<applicant sequence="001" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Hertling</last-name>
<first-name>William</first-name>
<address>
<city>Portland</city>
<state>OR</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="002" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Obradovic</last-name>
<first-name>Petar</first-name>
<address>
<city>Vancouver</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
</applicants>
</parties>
<assignees>
<assignee>
<addressbook>
<orgname>Hewlett-Packard Development Company, L.P.</orgname>
<role>02</role>
<address>
<city>Houston</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Alam</last-name>
<first-name>Shahid Al</first-name>
<department>2162</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A system, and a corresponding method, allow for dynamic sequencing of a requirements-based workflow. The system includes a registry that stores information related to services available to complete a received job request. The system also includes a workflow controller capable of dynamically generating a workflow based on the received job request. The workflow controller includes a rules database containing rules that specify requirements for constructing the workflow based on a nature of the job request. The workflow includes one or more nodes, and the workflow controller dynamically generates the workflow by comparing the requirements of the rules to outputs of prior nodes to generate subsequent nodes. Finally, selected services execute the nodes.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="220.05mm" wi="150.71mm" file="US07299244-20071120-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="191.18mm" wi="139.70mm" orientation="landscape" file="US07299244-20071120-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="235.80mm" wi="152.91mm" orientation="landscape" file="US07299244-20071120-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="200.49mm" wi="151.05mm" orientation="landscape" file="US07299244-20071120-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="227.58mm" wi="152.57mm" orientation="landscape" file="US07299244-20071120-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="193.55mm" wi="156.63mm" orientation="landscape" file="US07299244-20071120-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="185.76mm" wi="155.19mm" orientation="landscape" file="US07299244-20071120-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="215.73mm" wi="145.46mm" orientation="landscape" file="US07299244-20071120-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="215.05mm" wi="145.71mm" orientation="landscape" file="US07299244-20071120-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="229.36mm" wi="110.41mm" orientation="landscape" file="US07299244-20071120-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="231.82mm" wi="151.05mm" file="US07299244-20071120-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="137.41mm" wi="148.00mm" file="US07299244-20071120-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="223.94mm" wi="141.31mm" file="US07299244-20071120-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00013" num="00013">
<img id="EMI-D00013" he="228.09mm" wi="105.49mm" file="US07299244-20071120-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">TECHNICAL FIELD</heading>
<p id="p-0002" num="0001">The technical field relates to requirement-based workflow execution, and, in particular, to a system and method for dynamically sequencing the requirement-based workflow execution.</p>
<heading id="h-0002" level="1">BACKGROUND</heading>
<p id="p-0003" num="0002">Current systems that execute a job or workflow may use monolithic application software to control workflow execution. The systems rely on prior knowledge or definition of the workflow by having the workflow definition hard coded in the system. Based on that knowledge, the application software will build the workflow, or the sequence of steps, and then control execution of the workflow. Because of the hard coding, these systems are not adaptive to individual jobs, or to changes in services or processors that may be available at run time to execute the workflow.</p>
<p id="p-0004" num="0003">One or more operating units in a computer-based network may provide services. Users of the network may generate specific jobs and send the jobs into the network to be assigned to one of the operating units. For example, a user at a computer terminal may generate a printing order using a printer driver installed on the terminal. The printer driver is used to control the printing request. In another example, a user at a computer terminal may generate a printing order, and send the printing order into a computer network so that the printing order is completed by a printing service. The printing order may be related to a company brochure. The printing order may contain unique requirements such as paper type, font size, layout, graphics, color, and other requirements. The user may specify that a specific printing service, such as Kinkos®, prepare the company brochure. Alternatively, the computer network may include programs that suggest printing services to the user.</p>
<heading id="h-0003" level="1">SUMMARY</heading>
<p id="p-0005" num="0004">In one aspect, what is disclosed is a system for dynamic sequencing of a requirements-based workflow. The system includes a registry that stores information related to services available to complete a received job request. The system also includes a workflow controller capable of dynamically generating a workflow based on the received job request. The workflow controller includes a rules database containing rules that specify requirements for constructing the workflow based on a nature of the job request. The workflow includes one or more nodes, and the workflow controller dynamically generates the workflow by comparing the requirements of the rules to outputs of prior nodes to generate subsequent nodes. Finally, selected services execute the nodes.</p>
<p id="p-0006" num="0005">In another aspect, what is disclosed is a system to dynamically sequence workflows in a distributed network including means for receiving a job request at a service center in the network, the job request including information related to a job, means for dynamically generating a workflow based on the received job request, means for coupling services to the dynamic generating means, and means for storing information related to the services. The dynamic generating means uses the stored information related to the services and the information related to the job to generate the workflow.</p>
<p id="p-0007" num="0006">In yet another aspect, what is disclosed is a method for dynamic sequencing of a requirements-based workflow. The method includes the step of receiving a job request that specifies a job to be completed. The method further includes the step of generating a dynamic workflow sequence based on the job. The step of generating the dynamic workflow sequence includes the steps of defining a first node in the workflow sequence, and determining input resources and expected output resources for the first node. The method next includes the step of determining when the first node may execute, and then beginning execution of the first node. Finally, the method includes the step of determining if additional nodes are required to satisfy the job based on actual output resources of the first node.</p>
<p id="p-0008" num="0007">In still another aspect, a computer may be programmed to execute a method for dynamic sequencing of a requirements-based workflow, the method including the steps of receiving a job request, the job request specifying a job to be completed, generating a dynamic workflow sequence based on the job, determining when the first node may execute, wherein execution of the first node begins, and determining if additional nodes are required to satisfy the job based on actual output resources of the first node. The step of generating the dynamic workflow sequence may include defining a first node in the workflow sequence, and determining input resources and expected output resources for the first node.</p>
<p id="p-0009" num="0008">In still another aspect, a computer readable medium includes programmed instructions for dynamic sequencing of a requirements-based workflow, the method including the steps of receiving a job request, the job request specifying a job to be completed, generating a dynamic workflow sequence based on the job, determining when the first node may execute, wherein execution of the first node begins, and determining if additional nodes are required to satisfy the job based on actual output resources of the first node. The step of generating the dynamic workflow sequence may include defining a first node in the workflow sequence, and determining input resources and expected output resources for the first node.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0010" num="0009">The detailed description will refer to the following figures in which like numerals refer to like items, and in which:</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 1</figref> illustrates a prior art solution for workflow execution;</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 2</figref> illustrates a node tree that may be used to define individual requirements in a workflow according to an embodiment;</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 3</figref> illustrates a block diagram of a system for dynamically generating a requirements based workflow, such as the workflow illustrated in <figref idref="DRAWINGS">FIG. 2</figref> according to an embodiment;</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 4</figref> is a block diagram of components of the system shown in <figref idref="DRAWINGS">FIG. 3</figref>;</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 5</figref> is a logical diagram of a registry used with the system of <figref idref="DRAWINGS">FIG. 3</figref>;</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 6</figref> is a diagram illustrating selected functions of the system of <figref idref="DRAWINGS">FIG. 3</figref>;</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 7</figref> is a block diagram illustrating control features of the components of <figref idref="DRAWINGS">FIG. 4</figref>;</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 8</figref> is a block diagram of a workflow controller of <figref idref="DRAWINGS">FIG. 4</figref>;</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 9</figref> is a logical diagram of a rules-based database used with the workflow controller of <figref idref="DRAWINGS">FIG. 8</figref>; and</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIGS. 10-13</figref> are flowcharts illustrating a method for dynamically generating a requirements-based workflow using the system of <figref idref="DRAWINGS">FIG. 3</figref>.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 1</figref> illustrates an existing approach for workflow execution in which a required task, or job, is controlled using a specific application software. Such an application is often associated with a printing standard, an example of which is a job definition format (JDF). The JDF is described in detail in JDF Specification Draft Spiral 4.0, available at http://www.cip.org, which is hereby incorporated by reference. In <figref idref="DRAWINGS">FIG. 1</figref>, a user/client <b>1</b> generates a job request and sends the job request through a portal <b>4</b> to a processor <b>5</b>. The job request may include a job data file <b>2</b> and a content file <b>3</b>. The user <b>1</b> may be a computer terminal in a networked computer system and the processor <b>5</b> may be a networked printer. The job request may involve printing a document. The document may be represented by the content <b>3</b>, which is a digital representation of text and images to be printed. The intended format of the printed document may be described in the job data file <b>2</b>, which is simply a digital file that specifies how the printer is to print the document. For example, the job data file <b>2</b> may require that the document be printed on back-to-back pages.</p>
<p id="p-0022" num="0021">In a specific application, a printer driver may carry out the functions of the job data file <b>2</b>. The printer driver encodes control data related to printing the document, and sends the control data and the content <b>3</b> to the printer (i.e., the processor <b>5</b>). The printer accesses the control data and the content <b>3</b> to print the document.</p>
<p id="p-0023" num="0022">While the application shown in <figref idref="DRAWINGS">FIG. 1</figref> works well to print a document, the application has many drawbacks. In particular, if multiple processors are involved in producing the document, each such processor will require access to the job data file <b>2</b>. This access brings problems related to security, modification control, and workflow control. For example, a processor requiring access to the job data file <b>2</b> may have to wait on processing until a prior processor has completed use of the job data file <b>2</b>. Thus, the prior art application may result in unwanted delays in completing the job request.</p>
<p id="p-0024" num="0023">Prior art applications of workflow execution services, such as that shown in <figref idref="DRAWINGS">FIG. 1</figref>, also suffer because the user may not know anything about the processors, including capabilities and availabilities of the processors, or even if the processors exist. Thus, the user may not know which portal to use to connect to a specific processor.</p>
<p id="p-0025" num="0024">The system illustrated in <figref idref="DRAWINGS">FIG. 1</figref> also suffers because the application software used to control the workflow is monolithic. That is, the application software has previous knowledge of the workflow since the workflow definition is hard coded into the application software and is not adaptive to individual jobs. Based on that knowledge, the application software will build the workflow, or sequence of steps, and will then execute the workflow to completion. However, the application software cannot dynamically account for changes in a desired workflow, and cannot account for changes in services or processors that become available for use in execution of the workflow.</p>
<p id="p-0026" num="0025">These and other problems are solved by a method and a system that dynamically controls workflow execution. The system includes mechanisms that arbitrate access to the workflow among multiple services or processors, limit access to the workflow by incorporating security features, and ensure modifications made by one service, processor or user are reflected in the workflow. In an embodiment, the system includes a central database, or registry, that couples input data from clients as job requests with output capabilities of services that perform tasks or processes to complete the job requests. The registry may have the features of a generic XML database, in that the registry is extensible, and in that the clients need not have any knowledge of the individual processes to be performed or the internal programming requirements of the services. Thus, the clients may submit job requests to a service center that will ensure that an appropriate service or services are assigned to complete the job request.</p>
<p id="p-0027" num="0026">The apparatus and method may follow any number of workflows, an example of which is shown in <figref idref="DRAWINGS">FIG. 2</figref> as a node-tree diagram (or simply a node tree) <b>10</b> that illustrates processes defined in a workflow for printing a brochure. The nodes may specify recursive conditions. In addition, the nodes may be mandatory or optional, and whether a specific node is mandatory or optional may change during execution of a specific workflow. The brochure may be printed on a commercial press, and may use digital content to generate plates for printing the brochure. Within the node tree <b>10</b>, the nodes specify a product, process, or group of processes. Each node may modify, consume or create resources. Each node may contain further nested nodes, or sub-nodes. The arrangement of nodes and sub-nodes may be likened to a tree, and each node and sub-node may be referred to as a branch. A brochure node <b>11</b> defines the features and parameters of the brochure. A preflight node <b>17</b> may be used to obtain the brochure requirements, such as orientation, pay layout, font, color, and other document-specific features. A cover node <b>12</b> defines the parameters for producing the brochure cover. Inside pages node <b>13</b> includes the parameters to produce the inside pages. The inside pages node <b>13</b> is shown with several sub-nodes, including a digital plate making sub-node <b>14</b>. The digital plate making sub-node <b>14</b> itself includes two additional sub-nodes, a ripping sub-node <b>16</b> and a plate making sub-node <b>18</b>.</p>
<p id="p-0028" num="0027">Each of the nodes and sub-nodes shown in <figref idref="DRAWINGS">FIG. 2</figref> has associated with it input resources and at least one output resource. A resource may be described by parameters or logical entities. The resource may be a physical entity such as a component, a handling resource, or a consumable. A component resource may be the output of a node or sub-node, such as printed sheets. A handling resource is used during a process, but is not consumed by the process. A handling resource may include a mechanism for transporting a component resource from one stage of production to another. The process may partly or wholly consume a consumable resource. Examples of consumable resources include inks, plates, and glue. Other resources may be a digital file or representation of a physical object. For example, the ripping sub-node <b>16</b> may include as input resources a run list, media, RIP parameters, and layout. The run list resource describes the pages, including the files in which the pages occur, and which pages are to be used. The media resource describes the media that will be used to make plates, and is needed to describe the dimensions of the media. The RIP parameters resource describes all device-specific parameters of the ripping process. The layout resource describes placement of source pages onto the plates, and eventually onto press sheets. As an output resource, the ripping sub-node <b>16</b> may provide ripped flats. Other resources include parameter resources, which define the details of processes, as well as other non-physical computer files used by a process.</p>
<p id="p-0029" num="0028">The node tree <b>10</b> shown in <figref idref="DRAWINGS">FIG. 2</figref> is intended to apply to printing a document. However, node-tree diagrams may be used to represent workflows for other services besides printing. For example, a workflow may be used for data processing, image processing, creating and maintaining a database, electronic publishing, e-mail, and various e-commerce services. Moreover, a workflow may be used to define how different e-commerce services interact with each other.</p>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. 3</figref> is a block diagram of a dynamic workflow execution system <b>20</b> that incorporates a service center <b>40</b> to control job requests submitted by a client <b>31</b>. The service center <b>40</b> may operate as a single portal through which the client <b>31</b> connects to one or more e-services including e-mail, e-commerce and online shopping, e-printing, and data services, including database searching and database construction, population and maintenance. Using a single portal, such as the service center <b>40</b>, allows the client <b>31</b> to receive a wide variety of e-services, such as those noted above, without requiring the client <b>31</b> to have any prior knowledge of the e-services.</p>
<p id="p-0031" num="0030">The service center <b>40</b> may include components that receive information in the form of job requests, and using the information, dynamically generate a workflow definition that specifies tasks and resources. The workflow definition may be temporarily stored in at the service center <b>40</b>, and the workflow definition, or, alternatively, related notices, may be posted to indicate when a workflow definition is available. The service center <b>40</b> may select candidate services to complete the job request. Alternatively, services coupled to the service center <b>40</b> may bid on completion of the job defined by the workflow, and the service center <b>40</b> may include a bidding service that evaluates bids. The service center <b>40</b> may select one or more services to assign to execution of the workflow based on client-supplied criteria, or based on a set of standard criteria, including industry standard criteria. The service center <b>40</b> may provide mechanisms to control access to the job, or to portions (tasks, sub-tasks, or branches) of the job. The mechanisms include branch locking, and authorization and authentication servers that use public key encryption, or similar processes.</p>
<p id="p-0032" num="0031">The service center <b>40</b> may include hardware components such as servers, computers, central processing units, communications interfaces, and memory devices to provide the processing capability and data storage required to carry out the above-described functions.</p>
<p id="p-0033" num="0032">The system <b>20</b> includes a front-end service (FES) <b>30</b> that allows the client <b>31</b> to generate and submit a service or job request <b>32</b>. In an embodiment, the front end service may be an Internet web browser. Alternatively, the front end service <b>30</b> may be a web application or a port monitor. The job request <b>32</b> may contain detailed information about how the job is to be executed, and may be formatted according to the job definition format standard. Alternatively, the job request <b>32</b> may include only basic information, which will be used by another component to finalize the job definition, or work flow. In an embodiment, the job request <b>32</b> includes a content file <b>34</b>, which is the data that is to be processed. The content file <b>34</b> could be one or more digital files, text files, and other files. For example, the content file <b>34</b> could comprise the text and graphics to be printed in a brochure. The job request may also include a control data file <b>36</b> that specifies the requirements for processing the content file <b>34</b>, and that may provide other information including an identification of the client <b>31</b>, for example.</p>
<p id="p-0034" num="0033">The front end service <b>30</b> is coupled to a communications network <b>35</b>, which may be the Internet, a wide area network, or a local area network, for example. Coupled to the communications network <b>35</b> is a service center <b>40</b> that links one or more services <b>80</b><sub>1 </sub>to the communications network <b>35</b>. Each of the services <b>80</b><sub>1 </sub>may include a database <b>81</b><sub>1 </sub>that may be used to store information related to the job request <b>32</b>, including information related to standard workflow definitions or steps. In an embodiment, the service center <b>40</b> may be an Internet web site that includes data storage and control functions. In another embodiment, the service center <b>40</b> is a node in a local area network.</p>
<p id="p-0035" num="0034">The service center <b>40</b> allows a broad spectrum of communications between entities coupled to the service center <b>40</b>. In particular, the service center <b>40</b> allows different e-services to interact programmatically with one another using specific protocols and generic protocols (e.g., TCP/IP). This programmatic interaction allows different services and processes that are coupled to the network to exchange data and files, and to modify the data and files. The programmatic interaction may be completed by use of a remote procedure call (RPC) between entities coupled to the service center <b>40</b>. Other methods for providing the programmatic interaction include CORBA, UDDI, SOAP, xml over http, and e-speak.</p>
<p id="p-0036" num="0035">Referring to <figref idref="DRAWINGS">FIG. 4</figref>, the service center <b>40</b> may include a suitably programmed processor such as a workflow controller (WFC) <b>70</b>. Among its many possible operations, the workflow controller <b>70</b> may designate the various nodes, input and output resources, and other features of the node tree used to complete the job request. That is, the workflow controller <b>70</b> may be used to dynamically create a construct, or workflow definition, such as the node tree <b>10</b> shown in <figref idref="DRAWINGS">FIG. 2</figref>. To accomplish these tasks, the workflow controller <b>70</b> may include one or more agents <b>71</b><sub>1 </sub>that write a job definition file, based on control data contained in the job request <b>32</b>. Optionally, a separate management information system (MIS) <b>50</b> may be used to create the nodes, and to control flow of tasks to the services <b>80</b><sub>1 </sub>and other entities. In yet another embodiment, the client <b>31</b> which originated the job request <b>32</b> may write the job definitions.</p>
<p id="p-0037" num="0036">The service center <b>40</b> also includes a service bus <b>41</b> in communication with the communications network <b>35</b> (see <figref idref="DRAWINGS">FIG. 3</figref>) and the services <b>80</b><sub>1</sub>. Coupled to the service bus <b>41</b> are a central registry <b>60</b>, a database <b>90</b>, and optional bidding server <b>94</b>, authorization server <b>92</b> and authentication server <b>93</b>. The optional devices will be described later. The database <b>90</b> may store one or more specific workflow definition files <b>91</b><sub>1</sub>. The service center <b>40</b> may control one or more of the workflow definition files <b>91</b><sub>1</sub>. The workflow definition files <b>91</b><sub>1 </sub>may specify the various tasks and sub-tasks needed to implement a workflow, such as the node tree <b>10</b> shown in <figref idref="DRAWINGS">FIG. 2</figref>, in order to complete the job request. The workflow controller <b>70</b> may use one or more agents <b>71</b><sub>i </sub>to control processes on the service bus <b>41</b>.</p>
<p id="p-0038" num="0037">Referring again to the node tree <b>10</b> of <figref idref="DRAWINGS">FIG. 2</figref>, many output resources of the individual nodes serve as input resources for other nodes. These other nodes may not be able to begin executing until some or all input resources are complete and available, which means that the nodes may need to execute according to a set of rules such that some tasks and sub-tasks in the job request are executed in a well-defined, but not necessarily pre-defined sequence. For example, a process for making plates will produce press plates as an output resource that is required by a printing process. A process for printing a brochure may require use of the plates. However, the brochures may be printed by sending brochure data to a networked printer (i.e., a service <b>80</b>), which then produces the initial output resource of printed pages for the brochure. In the hierarchical organization of the node tree <b>10</b>, nodes that occur higher in the node tree <b>10</b> represent higher-level, more abstract operations, while lower order nodes represent more detailed, specific processes. Moreover, nodes near the top of the node tree <b>10</b> may represent only intent regarding the components or assemblies that comprise the product, and lower level nodes provided the detailed instructions to a service <b>80</b> to perform a specific process.</p>
<p id="p-0039" num="0038">Because two node trees may not be similar, the workflow controller <b>70</b> may determine processes to be completed, the order in which the processes are completed, and the services <b>80</b><sub>1 </sub>that are to complete the processes. The workflow controller <b>70</b> may use the agents <b>71</b><sub>1 </sub>to determine an actual workflow, considering factors such as control abilities of the services that complete the processes, transport distances between services, load capabilities of the services, and time constrains in the job request, for example. The agents <b>71</b><sub>1 </sub>may define the overall process using serial processing, which involves subsequent production and consumption of resources by the services <b>80</b><sub>1</sub>, overlapping processing, which involves simultaneous consumption and production of resources by more than one service <b>80</b>, parallel processing, which involves sharing resources among services <b>80</b><sub>1</sub>, and iterative processing, which involves a back and forth processing scheme to develop resources.</p>
<p id="p-0040" num="0039">In determining which of the services <b>80</b><sub>i </sub>to assign to complete a particular job request, the workflow controller <b>70</b> may poll services <b>80</b><sub>1 </sub>that are coupled to the service center <b>40</b>. As noted above, the services <b>80</b><sub>i </sub>may be coupled directly to the service bus <b>41</b>, or may be coupled indirectly through another communications bus, such as the Internet, for example. The polling may occur whenever a workflow definition files <b>91</b><sub>1 </sub>is created at the service center <b>40</b>. Alternatively, the polling and corresponding information collection may occur on a periodic basis, and the workflow controller <b>70</b> may store information related to the services <b>80</b><sub>i</sub>.</p>
<p id="p-0041" num="0040">As an alternative to polling, services <b>80</b><sub>1 </sub>coupled to the service center <b>40</b> may monitor execution of the workflow definition files <b>91</b><sub>1</sub>. The service center <b>40</b> may periodically post, in a bulletin board fashion, for example, notices for workflow definition files <b>91</b><sub>1 </sub>that are available for processing. The services <b>80</b><sub>1 </sub>may then submit a bid for the tasks and processes defined in the notice. The workflow controller <b>70</b>, or the separate, optional bidding server <b>94</b>, may review the bids, and determine which single service <b>80</b><sub>i </sub>or combination of services <b>80</b><sub>1 </sub>would be best suited to complete the tasks and processes defined in the job notice.</p>
<p id="p-0042" num="0041">In determining which of the services <b>80</b><sub>1 </sub>to assign to a specific task or sub-task, the workflow controller <b>70</b> may consult the central registry <b>60</b>. <figref idref="DRAWINGS">FIG. 5</figref> shows an embodiment of the registry <b>60</b>. The registry <b>60</b> may be a data storage device or medium accessible by the services <b>80</b><sub>1</sub>. The services <b>80</b><sub>i </sub>may register service information with the registry <b>60</b> according to a pre-defined format. The workflow controller <b>70</b> may then access the service information to assign services to the tasks and sub-tasks that define a particular workflow. When assigning a service <b>80</b><sub>1 </sub>to a task or sub-task, the workflow controller <b>70</b> may take into account conditions existing at the completion of a prior task or sub-task. For example, a sub-task of printing a brochure may complete twelve hours later then originally scheduled, such that certain services that ordinarily would complete the next sub-task (for example, binding) may not be available, while new binding services may have registered with the registry <b>60</b>. Thus, the workflow controller <b>70</b> is able to dynamically allocate services based on the actual execution of a workflow.</p>
<p id="p-0043" num="0042">As <figref idref="DRAWINGS">FIG. 5</figref> shows, the registry <b>60</b> may include a number of sections <b>61</b><sub>1 </sub>that store service information according to a pre-defined format as discrete files <b>62</b><sub>i</sub>. The sections <b>61</b><sub>1 </sub>may comprise files <b>62</b><sub>1 </sub>for the services <b>80</b><sub>1 </sub>of a common type. For example, a print service section <b>61</b><sub>i </sub>may include files <b>62</b><sub>i </sub>for Kinkos® and other commercial print services, networked printers, and other print services. The information included in the files <b>62</b><sub>1 </sub>may be provided by the individual services <b>80</b><sub>i</sub>. The information included in the files may identify the service <b>80</b><sub>1 </sub>and may provide the capability and availability of the service <b>80</b><sub>i</sub>, and other information, including price information, for example.</p>
<p id="p-0044" num="0043">The service center <b>40</b> (see <figref idref="DRAWINGS">FIG. 4</figref>) may include several features to provide security and to control access to the workflow definition files <b>91</b><sub>1</sub>. As discussed above, the service center <b>40</b> may include a provision for branch locking. In addition, servers may be used to authorize and authenticate a service <b>80</b> and maintain the authorization and authentication during completion of a job request <b>32</b>. The authentication server <b>93</b> receives authentication information from a service <b>80</b> and the authorization server <b>92</b> uses the information to check authorization functionality. The authorization or access rights of the service <b>80</b> may be carried as a part of the workflow definition files <b>91</b><sub>i</sub>. The servers <b>92</b> and <b>93</b> may be hardware devices, but need not exist in the same hardware platform, and the servers <b>92</b> and <b>93</b> need not be tightly coupled. Alternatively, the functions of the servers <b>92</b> and <b>93</b> may be performed in programming stored in one of the components of the service center <b>40</b>, such as the workflow controller <b>70</b>, for example. Using the above-described features, the service center <b>40</b> may provide trusted authentication information about the service <b>80</b> to the authorization server <b>92</b>, and the authorization server <b>92</b> then performs its authority check functions.</p>
<p id="p-0045" num="0044">The workflow definition files <b>91</b><sub>i </sub>generated by the workflow controller <b>70</b> may include specific tasks or sub-tasks (branches) that must be completed to complete the job request <b>32</b> (see <figref idref="DRAWINGS">FIG. 3</figref>). A simple job request <b>32</b> may have only one branch. More complex job requests <b>32</b>, such as the job request illustrated in <figref idref="DRAWINGS">FIG. 2</figref> (i.e., print a brochure) may have many branches. Furthermore, some branches may be so interrelated that they can only be completed in a specific sequence, while other branches can be completed in a parallel or an overlapping fashion. These interrelationships may often be the result of one branch producing an output resource that is an input resource for one or more other branches. Furthermore, as new services <b>80</b><sub>1 </sub>register with the registry <b>60</b>, the interrelationships between branches may change.</p>
<p id="p-0046" num="0045">The workflow definition file <b>91</b><sub>1 </sub>may include descriptions of specific branches and their interrelationships. This information may be shown in sufficient detail to allow the services <b>80</b><sub>1 </sub>to bid for completion of the branches. The workflow definition files <b>91</b><sub>i </sub>may persist in the service center <b>40</b> for a specified time to allow the services <b>80</b><sub>1 </sub>to send bids. The time may be a set value (e.g., one hour) or may be based on a completion deadline specified in the job request <b>32</b>.</p>
<p id="p-0047" num="0046">In an embodiment, the workflow controller <b>70</b> selects winning services <b>80</b><sub>1 </sub>based on a set of criteria. Alternatively, the optional bidding server <b>94</b> may select bids from the services <b>80</b><sub>1 </sub>based on set criteria. For example, the job request <b>32</b> may specify minimum performance requirements (e.g., a maximum cost and a completion deadline). The bidding server <b>94</b> may reject any bids that fail to satisfy the minimum performance requirements. Where the workflow controller <b>70</b> has established multiple branches, each such branch may include minimum performance requirements. The branch-specific performance requirements may be established by the workflow controller <b>70</b> based on overall performance requirements in the workflow definition file <b>91</b><sub>1</sub>. The bidding server <b>94</b> may reject a service <b>80</b> that bids on a particular branch if the service <b>80</b> fails to meet the minimum performance requirements.</p>
<p id="p-0048" num="0047">If the client <b>31</b> does not specify any minimum performance requirements, the workflow controller <b>70</b>, and alternatively the bidding server <b>94</b>, may apply a standard set of criteria (e.g., an industry standard). For bids, the bid must satisfy any requirements for producing output resources. In this way, bids that are made in error, or that would otherwise likely be rejected, can be screened out. For example, a bid for printing inside pages of the brochure may indicate a one-year completion date. Such a bid may be rejected, even in the absence of any specified performance requirements from the client <b>31</b>.</p>
<p id="p-0049" num="0048">In addition to submitting performance requirements, the client <b>31</b> may specify an evaluation algorithm for evaluating bids and services <b>80</b><sub>1</sub>. For example, the client <b>31</b> may specify that cost is to be weighted twice as much as any other performance requirement.</p>
<p id="p-0050" num="0049">In the absence of a client-specified evaluation algorithm, workflow controller <b>70</b>, or, optionally, the bidding service <b>91</b>, may apply a standard evaluation algorithm in order to rank services <b>80</b><sub>i </sub>for each branch in the workflow definition file <b>91</b><sub>1</sub>. The evaluation algorithm may apply weighting criteria, or may apply a default rule. For example, services <b>80</b><sub>1 </sub>may be ranked based on a maximum score, where points are awarded for cost estimates below a maximum and for completion times below a maximum. Once the evaluation algorithm has been applied, the workflow controller <b>70</b> ranks the services <b>80</b><sub>i </sub>(or, the bidding service <b>91</b> ranks the bids) for each branch. If only one service <b>80</b> survives the process, that service <b>80</b> may be automatically selected and assigned to the branch. If multiple services <b>80</b><sub>1 </sub>survive, the workflow controller <b>70</b> may apply additional selection criteria, such as a round-robin selection scheme, to assign services <b>80</b><sub>1 </sub>to branches. Alternatively, the list may be provided to the client <b>31</b>, and the client <b>31</b> may select the service(s) <b>80</b><sub>1 </sub>to complete the tasks defined in the workflow definition file <b>91</b><sub>1</sub>.</p>
<p id="p-0051" num="0050">The workflow controller <b>70</b> may associate winning services <b>80</b><sub>1 </sub>with corresponding branches of the workflow definition file <b>91</b><sub>1</sub>, and may store the service selection information with the workflow definition file <b>91</b><sub>1</sub>. The stored selection information may include identification information that allows the authorization server <b>92</b> and the authentication server <b>93</b> to permit access to workflow definition file <b>91</b><sub>1 </sub>branches or to the entire workflow definition file <b>91</b><sub>1</sub>. Because the selection information is stored with the workflow definition file <b>91</b><sub>i</sub>, a service <b>80</b> may access those branches for which the service <b>80</b> is authorized access without having to communicate directly with the service center <b>40</b>. This feature allows the workflow definition file <b>91</b><sub>1 </sub>to be passed from one service <b>80</b> to another service <b>80</b>, which improves processing time and efficiency.</p>
<p id="p-0052" num="0051">In an embodiment, the service center <b>40</b> may comprise a sequence of programming instructions that are recorded on a machine-readable medium, such as a CD-ROM, for example. A computer may read the programming instructions and execute processes to provide the functions of the service center <b>40</b>, including using a workflow definition file to store bid information.</p>
<p id="p-0053" num="0052"><figref idref="DRAWINGS">FIG. 6</figref> is a diagram showing operation of selected functions of the service center <b>40</b>. As shown in <figref idref="DRAWINGS">FIG. 6</figref>, the service center <b>40</b> includes workflow definition files <b>91</b><sub>1</sub>, which may be programming objects such as that represented by the node tree <b>10</b> shown in <figref idref="DRAWINGS">FIG. 2</figref>, and described above. The client <b>31</b><sub>1 </sub>may supply the job request <b>32</b> to the service center <b>40</b>. Using the job request <b>32</b>, the service center <b>40</b> creates the workflow definition files <b>91</b><sub>1</sub>, and makes the workflow definition files <b>91</b><sub>1 </sub>available to one or more of the services <b>80</b><sub>i</sub>. The service center <b>40</b> may also supply the workflow definition files <b>91</b><sub>i </sub>to the client <b>31</b><sub>1</sub>. The client <b>31</b><sub>1 </sub>may be a networked computer or similar device that is capable of transmitting the digital information representing the job request <b>32</b> to the service center <b>40</b>.</p>
<p id="p-0054" num="0053">Also shown in <figref idref="DRAWINGS">FIG. 6</figref> are client <b>31</b><sub>2 </sub>and services <b>80</b><sub>1</sub>-<b>80</b><sub>N</sub>. The services <b>80</b><sub>1</sub>-<b>80</b><sub>N </sub>may include networked resources such as networked printers, electronic-commerce entities, such as Internet web sites, and “brick and mortar” entities, such local print shops that are coupled to the service center <b>40</b> using the service bus <b>41</b>.</p>
<p id="p-0055" num="0054">The workflow definition file <b>91</b><sub>1 </sub>specifies tasks and sub-tasks that must be completed to finish the job request <b>32</b>. As noted above, <figref idref="DRAWINGS">FIG. 2</figref> illustrates processes required to print a brochure, including the inside pages and the cover. More that one service <b>80</b><sub>1 </sub>may be required to complete such a job request <b>32</b>, or to complete the job request <b>32</b> in the most cost-efficient and/or timely manner. The workflow controller <b>70</b> (see <figref idref="DRAWINGS">FIG. 4</figref>) can determine which of the services <b>80</b><sub>1</sub>-<b>80</b><sub>N </sub>should complete a specific process, and, if necessary, the order in which such processes should be completed. The workflow controller <b>70</b> may poll the various services <b>80</b><sub>1 </sub>to determine which may be used to complete the job request.</p>
<p id="p-0056" num="0055">For each job request <b>32</b> received, the workflow controller <b>70</b> may create a reference <b>72</b><sub>1 </sub>to the job request <b>32</b>. The service <b>80</b><sub>1 </sub>may request access to the associated workflow definition file <b>91</b><sub>1 </sub>in order to complete one or more tasks or sub-tasks. In response, the workflow controller <b>70</b> provides the service <b>80</b><sub>l </sub>with the job request reference <b>72</b><sub>1</sub>. The job request reference <b>72</b><sub>1 </sub>is then used as an index to the job request <b>32</b>. The job request reference <b>72</b><sub>1 </sub>may also be provided to other services, such as the service <b>80</b><sub>2</sub>, and to other clients, such as the client <b>31</b><sub>2</sub>. The service <b>80</b><sub>2 </sub>and the client <b>31</b><sub>2 </sub>may then access the workflow definition file <b>91</b><sub>i </sub>at the same time as the service <b>80</b><sub>1 </sub>accesses the workflow definition file <b>91</b><sub>i</sub>. This simultaneous access allows different tasks and sub-tasks to be completed in parallel. In the example illustrated in <figref idref="DRAWINGS">FIG. 2</figref>, the service <b>80</b><sub>1 </sub>may complete some or all the tasks for the inside pages, and the service <b>80</b><sub>2 </sub>may complete the tasks for the cover.</p>
<p id="p-0057" num="0056"><figref idref="DRAWINGS">FIG. 7</figref> is a block diagram illustrating an example application of the control features of the service center <b>40</b>. The workflow definition file (WFDF) <b>91</b><sub>1 </sub>is referenced to the content file <b>34</b> of the job request <b>32</b>, and information related to the workflow definition file <b>91</b><sub>i </sub>and the content file <b>34</b> is passed over the service bus <b>41</b>. The services <b>80</b><sub>1 </sub>can access the content file <b>34</b> and the workflow definition file <b>91</b><sub>l </sub>using the service bus <b>41</b>. In the illustrated example, the workflow definition file <b>91</b><sub>1 </sub>refers to a job request <b>32</b> to print a brochure using the processes outlined in <figref idref="DRAWINGS">FIG. 2</figref>. The service <b>80</b><sub>1 </sub>is designated by the workflow controller <b>70</b> to produce the inside pages of the brochure and the service <b>80</b><sub>2 </sub>is designated to produce the brochure cover. The service <b>80</b><sub>1 </sub>passes an access request to the service center <b>40</b>. The access request may include security information that allows the service <b>80</b><sub>1 </sub>to access the workflow definition file <b>91</b><sub>1 </sub>and the corresponding content <b>34</b><sub>1 </sub>or job. In response, the service center <b>40</b> provides a job request reference (REF) <b>72</b><sub>1 </sub>that is used by the service <b>80</b><sub>1 </sub>to access workflow definition file <b>91</b><sub>1</sub>. The service <b>80</b><sub>1 </sub>may use information in the workflow definition file <b>91</b><sub>1 </sub>to access the content file <b>34</b><sub>1</sub>. Since the service <b>80</b><sub>1 </sub>will produce only the inside pages, the service <b>80</b><sub>1 </sub>will not need access to all the information contained in the workflow definition file <b>91</b><sub>i</sub>. Furthermore, because the workflow definition file <b>91</b><sub>1 </sub>remains in the service center <b>40</b>, other entities, such as the service <b>80</b><sub>2</sub>, may continue to access the workflow definition file <b>91</b><sub>i</sub>.</p>
<p id="p-0058" num="0057">As the service <b>80</b><sub>1 </sub>completes various tasks, the service <b>80</b><sub>1 </sub>may update the content file <b>34</b> and the workflow definition file <b>91</b><sub>1</sub>. Thus, the workflow definition file <b>91</b><sub>1 </sub>may reflect the latest status of the job request <b>32</b>. The status reports may indicate when a node in the node tree <b>10</b> is completed, when an interim deadline is completed, when another service may be used to complete a task, and when all tasks are complete. The status report may be included in a digital file that is used by the workflow controller <b>70</b>, for example. The status report may also be included in a human-readable format, such as a pop-up window on a computer display screen. The service <b>80</b><sub>1 </sub>may receive the job request reference <b>72</b><sub>1</sub>, and may complete all scheduled tasks, returning the job request reference <b>72</b><sub>1 </sub>to the service center <b>40</b>. The service <b>80</b><sub>1 </sub>may also send a copy of the job request reference <b>72</b><sub>1 </sub>to the service <b>80</b><sub>2</sub>, so that the service <b>80</b><sub>2 </sub>may access the workflow definition file <b>91</b><sub>i</sub>, and the content file <b>34</b> and produce the brochure cover.</p>
<p id="p-0059" num="0058">The preceding discussion has stated that the workflow controller <b>70</b> may generate the workflow required to complete a specific job request <b>32</b>, including generating (or retrieving) the workflow definition file <b>91</b><sub>1</sub>. <figref idref="DRAWINGS">FIG. 8</figref> is a block diagram of the workflow controller <b>70</b> showing various components that allow for generation of the workflow, and management of workflow execution. The workflow controller <b>70</b> includes a memory <b>75</b>. The memory <b>75</b> may include a rules database <b>77</b> and a short-term storage area, or workflow definition file cache <b>79</b>. The rules database <b>77</b> includes rules for generating the workflow and the corresponding workflow definition file <b>91</b><sub>i</sub>. The cache <b>79</b> may be used for temporary storage of a workflow definition file <b>91</b><sub>1 </sub>during processing of a job request <b>32</b>.</p>
<p id="p-0060" num="0059">Also included in the workflow controller <b>70</b> are a workflow generator <b>63</b>, a workflow execution engine <b>65</b>, and an interface controller <b>67</b>. The workflow generator <b>63</b> uses the information contained in the job request <b>32</b>, and the rules in the rules database <b>77</b> to generate the workflow definition file <b>91</b><sub>1</sub>. The workflow execution engine <b>65</b> initiates and monitors execution of the tasks and sub-tasks defined in the workflow definition file <b>91</b><sub>i</sub>. The interface controller <b>67</b> provides a mechanism for communication between the client <b>31</b> and the service center <b>40</b> (See <figref idref="DRAWINGS">FIG. 3</figref>). The interface controller <b>67</b> may generate text messages, graphics, and other information that can be interpreted by a human user at the client <b>31</b>. Alternatively, the interface controller provides communications capabilities directly between the client <b>31</b> and the service center <b>40</b>.</p>
<p id="p-0061" num="0060">The rules in the rules database <b>77</b> state propositions that may apply to a specific job request <b>32</b>. Some rules may be recursive in nature. That is, a rule may continue to apply until a stated condition within the rule is met. Other rules in the rules database <b>77</b> may include mandatory, or prerequisite conditions to be completed before a task corresponding to the rule is executed. Furthermore, some rules may have prerequisites that prevent generation of a corresponding step until one or more prior tasks are completed. For example, and referring to the workflow shown in <figref idref="DRAWINGS">FIG. 2</figref>, a rule related to plate making may require specific resources, such as the content file <b>34</b>, and completion of prior tasks, such a preflight <b>17</b>.</p>
<p id="p-0062" num="0061">In the print brochure example, the basic requirement (command) stated in the job request (PRINT_DOCUMENT) may invoke specific commands (and associated rules) that may be mandatory or optional for printing the brochure. PRINT_DOCUMENT may require PSP_SELECTED, which may require USER_SELECTION_PSP, which may require PSP_DISPLAY LIST, which may require PSP_QUERY, which may require PREFLIGHT_DOCUMENT. The rules associated with each of these commands may continue to apply until the requirements of the rule are satisfied. Thus, a rule that generates the command PSP_SELECTED may cause the workflow generator <b>63</b> to invoke the rule that generates PSP_SELECTED until either a user selects (USER_SELECTION_PSP) a print service, or until the workflow controller <b>70</b>, in consulting the registry <b>60</b>, selects a print service. In other words, when the workflow generator <b>63</b> receives the job request <b>32</b> to print the brochure, the workflow generator <b>63</b> consults the rules database <b>77</b> and determines that the first rule to satisfy is to preflight the document (i.e., to obtain the document print requirements). Once the document print requirements are available (the requirements may be supplied with the job request <b>32</b>, or may be entered subsequent to submission of the job request <b>32</b>, typically in reaction to a prompt, or other direction from the workflow controller <b>70</b> to the client <b>31</b> originating the job request <b>32</b>), the process of consulting rules, and generating a workflow continues.</p>
<p id="p-0063" num="0062">At some point in generation of the workflow (and generation of the workflow definition file <b>91</b><sub>1</sub>), the workflow controller <b>70</b>, and its component parts, may have sufficiently defined the required tasks and selected the appropriate services <b>80</b><sub>i </sub>such that execution of the workflow can commence. That is, in an embodiment, the workflow generator <b>63</b> may only generate a first portion of the workflow, and may subsequently add to the workflow as specific tasks are completed, as services <b>80</b><sub>1 </sub>become available, or for other reasons. Thus, a complete workflow definition is not required in order to begin the job stated in the job request <b>32</b>. Following commencement of the workflow, the workflow generator <b>63</b> may continue to generate the workflow, and may define specific tasks and sub-tasks based on completion (output resources) of prior tasks and sub-tasks. Thus, for example, a task to bind a document may wait until the inside pages of the document are prepared, since the type of binding, and the binding service, may be optimized once the number of inside pages is known. This feedback function may be provided by the workflow execution engine <b>65</b> in communication with the workflow generator <b>63</b>. The workflow execution engine <b>65</b> may include programming and algorithms that allow the workflow execution engine <b>65</b> to determine when conditions (e.g., output resources) for a specific task are met. Using this information, the workflow execution engine <b>65</b> may provide actual output resources information to the workflow generator <b>63</b> so that the workflow generator may dynamically alter, or continue to generate the workflow, and the corresponding the workflow definition file <b>91</b><sub>i</sub>.</p>
<p id="p-0064" num="0063"><figref idref="DRAWINGS">FIG. 9</figref> illustrates an example of application of print document rules as applied by the workflow generator <b>63</b>. In the example shown, the client <b>31</b> sends a job request <b>32</b> to the service center <b>40</b> requesting that a document (brochure) be printed. The workflow generator <b>63</b> interprets the job request <b>32</b> as belong to a class of actions titled PRINT_DOCUMENT. The workflow generator <b>63</b> then retrieves one or more rules that may relate to document printing from the rules database <b>77</b>. The rules may be ordered according to an expected sequence of their application. Accordingly, the first rule retrieves is PREFLIGHT_DOCUMENT <b>84</b>. The rule PREFLIGHT_DOCUMENT <b>84</b> may have associated prerequisites, input resources, and output resources. In addition, the node to which the rule applies may be indicated. If there are no prerequisite rules to satisfy, the workflow generator <b>63</b> checks the actual input resources (provided, for example, with the content file <b>34</b>) against required input resources to determine if the workflow generator <b>63</b> can generate the PREFLIGHT node. The output resources lists the expected resources (i.e., content file <b>34</b>, control data <b>36</b>) that should be available after all processing at the PREFLIGHT node is complete. PSP_QUERY <b>85</b> has as a prerequisite the PRINT_DOCUMENT order. That is, the PSP_QUERY <b>85</b> will not be invoked if the job request <b>32</b> does not request printing a document. The PSP_QUERY may apply to two nodes, INSIDE PAGES and COVER, because both nodes may require use of a print service provider (service <b>80</b><sub>1</sub>). Ultimately, the workflow generator <b>63</b> may retrieve N rules from the rules database <b>77</b>. However, not all rules need be identified upon receipt of the job request <b>32</b>. Instead, because of the dynamic nature of the workflow generation, additional rules may be consulted based on completion of tasks and sub-tasks at various nodes in the workflow. Also, as noted above, one or more of the retrieved rules may be recursive, meaning the rule will continue to be applied until actual output resources match the expected output resources.</p>
<p id="p-0065" num="0064"><figref idref="DRAWINGS">FIGS. 10-13</figref> are flowcharts illustrating operations of the service center <b>40</b> to dynamically generate and execute a requirements-based workflow</p>
<p id="p-0066" num="0065"><figref idref="DRAWINGS">FIG. 10</figref> illustrates an overall operation <b>100</b> for dynamically sequencing a requirements-based workflow. The example operation <b>100</b> is based on the node tree <b>10</b> of <figref idref="DRAWINGS">FIG. 2</figref>, and specifically on completing the inside pages nodes shown in <figref idref="DRAWINGS">FIG. 2</figref>. The operation <b>100</b> begins in start block <b>101</b>. In block <b>105</b>, the service center <b>40</b> receives a job request <b>32</b> from the client <b>31</b>. In block <b>110</b>, the workflow controller <b>70</b> determines the nature of the job stated in the job request <b>32</b>, i.e., print a brochure, or more generally, print a document. In block <b>115</b>, the workflow controller <b>70</b> determines which services <b>80</b><sub>i </sub>are available for executing the various tasks and sub-tasks that may be required to print the brochure. In block <b>120</b>, the workflow generator <b>63</b> begins the process of dynamically generating the work flow for printing the brochure by defining one or more initial nodes (referred to here for clarity as nodes A, B, C, . . . N) in the work flow, along with the tasks and sub-tasks needed to satisfy the node requirements for node A. In block <b>125</b>, the workflow generator <b>63</b> compares the required node A input resources to the available resources. If the available resources match the required resources, the operation <b>100</b> moves to block <b>130</b>, and the workflow generator <b>63</b> compares the generated workflow to an expected workflow to determine if the thus-generated workflow is at least initially completely defined. If the workflow is at least initially completely defined, the operation <b>100</b> moves to block <b>140</b>.</p>
<p id="p-0067" num="0066">If the workflow is not at least initially defined, the operation <b>100</b> moves to block <b>135</b>, and the workflow execution engine <b>65</b> compares the available services <b>80</b><sub>1 </sub>and the requirements of the just-generated node, and determines if execution of the node may begin. If execution of the node may begin, the operation moves to block <b>140</b>. In block <b>140</b>, the workflow execution engine <b>65</b> directs the selected service(s) <b>80</b><sub>1 </sub>to execute node A. Following block <b>135</b>, if the node resources are not satisfied, the operation <b>100</b> returns to block <b>120</b>, and the process of dynamically generating the workflow continues.</p>
<p id="p-0068" num="0067">In parallel with generating the work flow, the workflow execution engine <b>65</b> monitors, block <b>145</b>, execution of the tasks and sub-tasks that define node A. In block <b>150</b>, the workflow execution engine <b>65</b> compares the actual output resources of node A with the expected, or required, output resources of node A to determine when node A has been satisfied. When node A has been satisfied, the workflow execution engine <b>65</b> signals the workflow generator <b>63</b>, block <b>155</b>. The workflow generator <b>63</b> may use the results of the satisfied node A in the process of generating subsequent nodes (e.g., nodes B, C, . . . N), block <b>120</b>. In block <b>160</b>, the workflow execution engine <b>65</b> determines if all workflow nodes have been satisfied. If all nodes have been satisfied, the operation <b>100</b> moves to block <b>165</b> and ends. If all nodes have not been satisfied, the operation <b>100</b> returns to block <b>145</b>, and the workflow execution engine <b>65</b> continues to monitor the execution.</p>
<p id="p-0069" num="0068"><figref idref="DRAWINGS">FIG. 11</figref> illustrates an embodiment of the operation <b>115</b> to select one or more services <b>80</b><sub>i </sub>to execute the tasks and sub-tasks expected to be required for printing the brochure. In review and assign services block <b>205</b>, the workflow controller <b>70</b> determines which services <b>80</b><sub>i </sub>are able and available to complete the job. In an embodiment, the workflow controller <b>70</b> makes this determination by consulting the registry <b>60</b>. Alternatively, the optional bidding server <b>90</b> may use polling or bidding features to make the determination. If more than one service <b>80</b><sub>1 </sub>is available, and can satisfy the requirements of the job request <b>32</b>, the workflow controller <b>70</b> may assign one specific service <b>80</b> to the job, block <b>210</b>. Alternatively, the workflow controller <b>70</b> may provide a list of services <b>80</b><sub>i </sub>to the client <b>31</b> (block <b>215</b>), and allow the client <b>31</b> to select one or more services <b>80</b><sub>i </sub>(block <b>220</b>). The operation <b>115</b> then ends, and processing returns to the operation <b>100</b>.</p>
<p id="p-0070" num="0069"><figref idref="DRAWINGS">FIG. 12</figref> illustrates an embodiment of the operation <b>120</b> for dynamically generating a workflow. As described above, the job request <b>32</b> may specify performance requirements, resources, and other parameters (i.e., the control data file <b>36</b>), and may include the content file <b>34</b>, or a link to the content file <b>36</b>. The control data file <b>36</b> may identify that the job stated in the job request <b>32</b> is to be completed according to a previously defined workflow, which may be stored in the database <b>90</b>. Alternatively, the job stated in the job request <b>32</b> may require generation of a new workflow. Even if the control data file <b>36</b> indicates use of an existing workflow, the workflow controller <b>70</b> may dynamically alter the workflow based on new services <b>80</b><sub>i</sub>, or for other reasons. In block <b>305</b>, following determination of the nature of the job stated in the job request <b>32</b>, the workflow controller <b>70</b> determines if the requested job includes use of an existing workflow. If an existing workflow is to be used, the workflow generator retrieves (block <b>310</b>) the requested workflow from the database <b>90</b>. If a new workflow is to be generated, the operation <b>120</b> moves to block <b>315</b>. In block <b>315</b>, the workflow generator <b>63</b> consults the rules database <b>77</b>, and determines that for a print document job request, the first rule to apply is PREFLIGHT (node <b>17</b> of <figref idref="DRAWINGS">FIG. 2</figref>, and also, in this example, node A). In block <b>320</b>, the workflow generator <b>63</b> retrieves the PREFLIGHT rule from the rules database <b>77</b>. In block <b>325</b>, the workflow generator <b>63</b> compares the content file <b>34</b> and the control data file <b>36</b> of the job request <b>32</b> to the input resource requirements specified in the PREFLIGHT rule. If the job request <b>32</b> meets the PREFLIGHT rule input resource requirements, the operation <b>100</b> proceeds to step <b>330</b> and the workflow generator constructs a PREFLIGHT node (node A) for a workflow definition file <b>91</b><sub>1</sub>. If the comparison of block <b>325</b> fails, the operation moves to step <b>335</b>, and the workflow controller <b>70</b>, using the interface <b>67</b>, notifies the client <b>31</b> that additional information or input resources are needed. Such notification may include a pop-up window display, a text message, or a procedure call to the client <b>31</b>, for example. The operation <b>120</b> then returns to block <b>310</b> and the service center <b>40</b> waits on receipt of a modified job request. The operation <b>120</b> may optionally include a time-out feature that ends the operation <b>120</b> (and the operation <b>100</b>) should the client <b>31</b> not respond to the notification of block <b>335</b> within a specified time.</p>
<p id="p-0071" num="0070"><figref idref="DRAWINGS">FIG. 13</figref> illustrates an alternative operation <b>120</b>′ for dynamically generating and sequencing defining a workflow. In block <b>355</b>, the workflow controller <b>70</b> determines if the workflow will contain multiple branches. If the workflow will contain multiple branches, the workflow controller <b>70</b> defines the branches, block <b>360</b>. In block <b>365</b>, the workflow controller <b>70</b> selects a branch for which resources and services <b>80</b><sub>1 </sub>are to be defined. In block <b>370</b>, the workflow controller <b>70</b> defines input resources for a first node. In block <b>375</b>, the workflow controller <b>70</b> defines the tasks to be completed for the first node. In block <b>380</b>, the workflow controller <b>70</b> determines the output resources of the first node. In block <b>385</b>, the workflow controller <b>70</b> determines if another node is required for the workflow or branch. In no additional nodes are required, the workflow controller <b>70</b> determines if another branch is to be defined, block <b>390</b>. If another branch is to be defined, the workflow controller <b>70</b> selects another branch, block <b>365</b>, and the operation <b>120</b>′ continues. If another branch is not to be defined, the operation <b>120</b>′ ends, and processing returns to the operation <b>100</b>.</p>
<p id="p-0072" num="0071">The methods illustrated in <figref idref="DRAWINGS">FIGS. 10-13</figref> may be executed by a suitably programmed general purpose computer, a special purpose computer, and an application specific integrated circuit, for example. The programming may be written on a computer readable medium, including a magnetic storage medium and an optical storage medium, for example.</p>
<p id="p-0073" num="0072">The terms and descriptions used herein are set forth by way of illustration only and are not meant as limitations. Those skilled in the art will recognize that many variations are possible within the spirit and scope of the invention as defined in the following claims, and their equivalents, in which all terms are to be understood in their broadest possible sense unless otherwise indicated.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>The invention claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A system for dynamic sequencing of a requirements-based workflow, comprising:
<claim-text>a registry that stores information related to services available to complete a received job request; and</claim-text>
<claim-text>a workflow controller capable of dynamically generating a workflow based on the received job request, the workflow controller comprising a rules database containing rules that specify requirements for constructing the workflow based on a nature of the job request, the workflow including one or more nodes, wherein the workflow controller dynamically generates the workflow by recursively applying one or more of the rules from the rules database and comparing the requirements of the rules to outputs of prior nodes to generate subsequent nodes, and wherein the services execute the nodes.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising a service center in a distributed network, the service center operable to couple one or more clients, the services, and the workflow controller, wherein the one or more clients originate job requests.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the workflow controller further comprises a workflow execution engine that monitors execution of nodes in the workflow, wherein the workflow execution engine indicates when a node is complete.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the registry includes the information related to the services by type of service.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the workflow controller comprises means for determining which service of the available services is assigned to execute a node in the workflow.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The system of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the determining means comprises a ranking algorithm that determines an optimum service to execute the node.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The system of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the ranking algorithm is based on client-supplied criteria.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. A method for dynamic sequencing of a requirements-based workflow, comprising:
<claim-text>receiving a job request, the job request specifying a job to be completed;</claim-text>
<claim-text>generating a dynamic workflow sequence based on the job, wherein generating the dynamic workflow sequence, comprises:
<claim-text>defining a first node in the workflow sequence by consulting a rules database to determine application of at least a first rule, wherein the at least first rule is determined based on the nature of the job and recursively applying the at least first rule to define the first node, and</claim-text>
<claim-text>determining input resources and expected output resources for the first node;</claim-text>
</claim-text>
<claim-text>determining when the first node may execute, wherein execution of the first node begins; and</claim-text>
<claim-text>determining if additional nodes are required to satisfy the job based on actual output resources of the first node.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, further comprising:
<claim-text>consulting the rules database to determine application of one or more subsequent rules; and</claim-text>
<claim-text>recursively applying each of the one or more subsequent rules to further define the first node.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, further comprising;
<claim-text>consulting a registry of available services to execute the first and the additional nodes; and</claim-text>
<claim-text>selecting one or more of the available services to execute each of the first and the additional nodes.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the selecting step for one node is completed based on outputs of a prior completed node.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein generating the dynamic workflow sequence comprises generating one or more workflow branches, wherein a workflow branch may include a plurality of nodes, and wherein two or more branches may execute in parallel.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein executing the first node may begin before generation of any of the additional nodes.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the determined input resources are not sufficient to define the first node, and further comprising notifying a client originating the job request to prompt submission of sufficient input resources.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, further comprising:
<claim-text>defining the workflow in a workflow definition file; and</claim-text>
<claim-text>sharing the workflow definition file among parallel executing services.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. A system to dynamically sequence workflows in a distributed network, comprising:
<claim-text>means for receiving a job request at a service center in the network, the job request including information related to a job;</claim-text>
<claim-text>means for dynamically generating a workflow based on the received job request by recursively applying one or more rules based on the received job request to define one or more nodes within the workflow;</claim-text>
<claim-text>means for coupling services to the dynamic generating means; and</claim-text>
<claim-text>means for storing information related to the services, wherein the dynamic generating means uses the stored information related to the services and the information related to the job to generate the workflow.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The system of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the dynamic generating means comprises:
<claim-text>a workflow generator that generates the one or more nodes in the workflow; and</claim-text>
<claim-text>a rules database that includes the one or more rules related to generating the nodes, wherein the workflow generator uses one or more rules to generate the nodes.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The system of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the dynamic generating means comprises means for selecting one or more of the services for execution of a node, and wherein the selecting means comprises means for ranking the services based on client-defined criteria.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. A computer readable medium comprising programming to execute a method for dynamic sequencing of a requirements-based workflow, the method comprising:
<claim-text>receiving a job request, the job request specifying a job to be completed;</claim-text>
<claim-text>generating a dynamic workflow sequence based on the job, wherein generating the dynamic workflow sequence, comprises:
<claim-text>defining a first node in the workflow sequence including consulting a rules database to determine application of at least a first rule, wherein the at least first rule is determined based on the nature of the job and recursively applying the at least first rule to define the first node, and</claim-text>
<claim-text>determining input resources and expected output resources for the first node;</claim-text>
</claim-text>
<claim-text>determining when the first node may execute, wherein execution of the first node begins; and</claim-text>
<claim-text>determining if additional nodes are required to satisfy the job based on actual output resources of the first node.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The computer readable medium of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the method further comprises:
<claim-text>consulting the rules database to determine application of one or more subsequent rules; and</claim-text>
<claim-text>recursively applying each of the one or more subsequent rules to further define the first node.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. The computer readable medium of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the method further comprises;
<claim-text>consulting a registry of available services to execute the first and the additional nodes; and</claim-text>
<claim-text>selecting one or more of the available services to execute each of the first and the additional nodes.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. The computer readable medium of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the selecting step for one node is completed based on outputs of a prior completed node.</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. The computer readable medium of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein generating the dynamic workflow sequence comprises generating one or more workflow branches, wherein a workflow branch may include a plurality of nodes, and wherein two or more branches may execute in parallel.</claim-text>
</claim>
<claim id="CLM-00024" num="00024">
<claim-text>24. The computer readable medium of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein executing the first node may begin before generation of any of the additional nodes.</claim-text>
</claim>
<claim id="CLM-00025" num="00025">
<claim-text>25. The computer readable medium of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the determined input resources are not sufficient to define the first node, and further comprising notifying a client originating the job request to prompt submission of sufficient input resources.</claim-text>
</claim>
<claim id="CLM-00026" num="00026">
<claim-text>26. The computer readable medium of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the method further comprises:
<claim-text>defining the workflow in a workflow definition file; and</claim-text>
<claim-text>sharing the workflow definition file among parallel executing services.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00027" num="00027">
<claim-text>27. A computer programmed to execute a method for dynamic sequencing of a requirements-based workflow, the method comprising:
<claim-text>receiving a job request, the job request specifying a job to be completed;</claim-text>
<claim-text>generating a dynamic workflow sequence based on the job, wherein generating the dynamic workflow sequence, comprises:
<claim-text>defining one or more nodes in the workflow sequence by consulting a set of rules to determine application of one or more rules, wherein the one or more rules are determined based on the nature of the job, and recursively applying the one or more rules to define the one or more nodes, and</claim-text>
<claim-text>determining input resources and expected output resources for the first node;</claim-text>
</claim-text>
<claim-text>determining when the first node may execute, wherein execution of the first node begins; and</claim-text>
<claim-text>determining if additional nodes are required to satisfy the job based on actual output resources of the first node.</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>
