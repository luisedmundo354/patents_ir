<us-patent-grant lang="EN" dtd-version="v4.2 2006-08-23" file="US07299371-20071120.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20071106" date-publ="20071120">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>07299371</doc-number>
<kind>B2</kind>
<date>20071120</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>10912479</doc-number>
<date>20040805</date>
</document-id>
</application-reference>
<us-application-series-code>10</us-application-series-code>
<us-term-of-grant>
<us-term-extension>376</us-term-extension>
<disclaimer>
<text>This patent is subject to a terminal disclaimer.</text>
</disclaimer>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>1</main-group>
<subgroup>28</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>713323</main-classification>
<further-classification>713310</further-classification>
</classification-national>
<invention-title id="d0e55">Hierarchical management for multiprocessor system</invention-title>
<references-cited>
<citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5396635</doc-number>
<kind>A</kind>
<name>Fung</name>
<date>19950300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713323</main-classification></classification-national>
</citation>
<citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5638541</doc-number>
<kind>A</kind>
<name>Sadashivaiah</name>
<date>19970600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713323</main-classification></classification-national>
</citation>
<citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>5996083</doc-number>
<kind>A</kind>
<name>Gupta et al.</name>
<date>19991100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713322</main-classification></classification-national>
</citation>
<citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>6230273</doc-number>
<kind>B1</kind>
<name>Rieker</name>
<date>20010500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713300</main-classification></classification-national>
</citation>
<citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>7055046</doc-number>
<kind>B2</kind>
<name>Malueg et al.</name>
<date>20060500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713320</main-classification></classification-national>
</citation>
<citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2006/0031836</doc-number>
<kind>A1</kind>
<name>Brown et al.</name>
<date>20060200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
</references-cited>
<number-of-claims>22</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>713323</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>713310</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>3</number-of-drawing-sheets>
<number-of-figures>4</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20060031835</doc-number>
<kind>A1</kind>
<date>20060209</date>
</document-id>
</related-publication>
</us-related-documents>
<parties>
<applicants>
<applicant sequence="001" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Day</last-name>
<first-name>Micahel Norman</first-name>
<address>
<city>Round Rock</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="002" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Hofstee</last-name>
<first-name>Harm Peter</first-name>
<address>
<city>Austin</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="003" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Johns</last-name>
<first-name>Charles Ray</first-name>
<address>
<city>Austin</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="004" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Kahle</last-name>
<first-name>James Allan</first-name>
<address>
<city>Austin</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
</applicants>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<last-name>Lammes</last-name>
<first-name>Francis</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="02" rep-type="attorney">
<addressbook>
<last-name>Walder, Jr.</last-name>
<first-name>Stephen J.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="03" rep-type="attorney">
<addressbook>
<last-name>Rifai</last-name>
<first-name>D'Ann N.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</parties>
<assignees>
<assignee>
<addressbook>
<orgname>International Business Machines Corporation</orgname>
<role>02</role>
<address>
<city>Armonk</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Du</last-name>
<first-name>Thuan</first-name>
<department>2116</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">The present invention provides for controlling the power consumption of an element. A first power control command is issued by software for the element. It is determined if the power control command corresponds to an allowable power control state for that element as defined by the hardware. If the power control command is not an allowable power control state for that element, the hardware sets the power control at a higher level than the power control state issued by the software. A hierarchy of power consumption is defined for different elements of a chip by software, which provides the minimum level of power consumption by any element or sub-element on a chip.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="201.59mm" wi="178.82mm" file="US07299371-20071120-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="211.07mm" wi="180.00mm" file="US07299371-20071120-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="217.76mm" wi="164.59mm" file="US07299371-20071120-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="152.48mm" wi="179.75mm" file="US07299371-20071120-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">CROSS-REFERENCED APPLICATION</heading>
<p id="p-0002" num="0001">This application relates to co-pending U.S. patent application Ser. No. 10/912,481 entitled “Hierarchical Management for Multiprocessor System With Real-Time Attributes”, filed concurrently herewith.</p>
<heading id="h-0002" level="1">TECHNICAL FIELD</heading>
<p id="p-0003" num="0002">The present invention relates generally to power consumption and, more particularly, to the individualized control of power consumption by processors and subsystems in a multiprocessor system.</p>
<heading id="h-0003" level="1">BACKGROUND</heading>
<p id="p-0004" num="0003">In conventional technologies, there are ways of controlling power dissipation by a processing chip. For instance, states are introduced, such as on full, on slower, clock off and chip off. Examples are the “nap, doze, sleep and suspend” states in implementations of the PowerPC architecture, and the “sleep” and “deeper sleep” states in enhanced Intel SpeedStep® power management for processors.</p>
<p id="p-0005" num="0004">However, there are a number of problems with the conventional technologies when applied to multiprocessor systems. First, in prior systems, power management modes are not software accessible. In typical implementations the system controller is responsible for using the power management capabilities of the chip to effect power management. This is disadvantageous because though the system controller can respond to such system aspects as chip or module temperature, a system controller has limited information about the tasks the processors perform. In some microprocessors that perform emulation this problem has been partially overcome by providing a power management interface to the hardware emulation layer. This has been done in processors by Transmeta® corporation. Because the emulation layer can observe a level of software activity, power management can be done in response to both external measures such as chip temperature and software activity as monitored by the emulation software. This enables such processors to save additional power when only light tasks, such as DVD playback, are performed.</p>
<p id="p-0006" num="0005">However, because the power management states are not available to the operating system or a hypervisor, additional opportunities for power management, such as managing power by scheduling tasks and levels of activity of multiple tasks is not performed. This capability is especially important in multiprocessor systems where an operating system or hypervisor has the freedom to rebalance tasks (threads) across multiple processors in order to improve overall power or power and heat distribution throughout the chip or system. In symmetric multiprocessor systems, even greater opportunities for task placement or migration and hence power balancing exist.</p>
<p id="p-0007" num="0006">Furthermore, conventional technologies, have not successfully implemented a control system that is individually directed to individual processors of a multiprocessor system. Although “system wide” implementations have been created that allow for external control of the entire system with the microprocessing chips in lock-step, there is no control shown for individual processors in a multi-processor system.</p>
<p id="p-0008" num="0007">Furthermore, system-on-chip designs that combine the processor with such units as memory controllers and bus controllers require extending power management techniques beyond the processors themselves. Also, modern microprocessors may allow for more detailed power management of units within a single processor core. Hence a more hierarchical approach, where power management states can apply to collections of units, including processors, and subunits of processors, is desirable.</p>
<p id="p-0009" num="0008">Therefore, there is a need for an architected power control interface that can be used by a hypervisor or operating system in a multiprocessing environment that addresses at least some of the concerns associated with conventional power management control in multiprocessor and system-on-chip environments.</p>
<heading id="h-0004" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0010" num="0009">The present invention provides for controlling the power consumption of an element in a multiprocessor or system-on chip environment. A first power control command is issued by software for the element. It is determined if the power control command corresponds to an allowable power control state for that element as defined by the hardware. If the power control command is not an allowable power control state for that element, the hardware sets the power control at a higher level than the power control state issued by the software.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0011" num="0010">For a more complete understanding of the present invention, and the advantages thereof, reference is now made to the following Detailed Description taken in conjunction with the accompanying drawings, in which:</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 1</figref> schematically depicts a multiprocessing environment in which power control occurs;</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 2A</figref> schematically depicts the transitions of the power states for individual element control;</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 2B</figref> schematically depicts the relationship between power consumption and the various states of the controlled elements; and</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 3</figref> schematically illustrates a power hierarchy for the multiprocessing environment associated with <figref idref="DRAWINGS">FIG. 1</figref>.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0006" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0016" num="0015">In the following discussion, numerous specific details are set forth to provide a thorough understanding of the present invention. However, those skilled in the art will appreciate that the present invention may be practiced without such specific details. In other instances, well-known elements have been illustrated in schematic or block diagram form in order not to obscure the present invention in unnecessary detail. Additionally, for the most part, details concerning network communications, electro-magnetic signaling techniques, and the like, have been omitted inasmuch as such details are not considered necessary to obtain a complete understanding of the present invention, and are considered to be within the understanding of persons of ordinary skill in the relevant art.</p>
<p id="p-0017" num="0016">In the remainder of this description, a processing unit (PU) may be a sole processor of computations in a device. In such a situation, the PU is typically referred to as an MPU (main processing unit). The processing unit may also be one of many processing units that share the computational load according to some methodology or algorithm developed for a given computational device. For the remainder of this description, all references to processors shall use the term MPU whether the MPU is the sole computational element in the device or whether the MPU is sharing the computational load with other MPUs, unless otherwise indicated.</p>
<p id="p-0018" num="0017">It is further noted that, unless indicated otherwise, all functions described herein may be performed in either hardware or software, or some combination thereof. In a preferred embodiment, however, the functions are performed by a processor, such as a computer or an electronic data processor, in accordance with code, such as computer program code, software, and/or integrated circuits that are coded to perform such functions, unless indicated otherwise.</p>
<p id="p-0019" num="0018">Turning to <figref idref="DRAWINGS">FIG. 1</figref>, disclosed is an environment <b>100</b> in which power control of individual elements in a multiprocessor can operate. There is a memory flow controller (MFC) <b>105</b> coupled to a processor unit (PU) <b>120</b>, an SPU <b>125</b> coupled to a local store <b>130</b>, and a SMF <b>140</b>. The MFC <b>105</b> and the PU <b>120</b> comprise a PPC <b>101</b>.</p>
<p id="p-0020" num="0019">Typically, each element has its own sub-elements, and every sub-element has its own indicia of an associated power state in a power state register <b>150</b>. If there is not a sub-element, the element, such as SPU <b>125</b>, has its own power state with-n the power state register <b>150</b>. Within the power state register <b>150</b>, software values exist for ensuring that the given element runs, at a minimum power level necessary to support the system function requested by software.</p>
<p id="p-0021" num="0020">For instance, the MFC <b>105</b> has a L<b>2</b> cache <b>106</b>, a memory management unit (MMU) <b>107</b>, a non-cacheable unit (NCU) <b>108</b> a bus interface unit (BIU) <b>109</b>, and a microprocessor interface unit (CIU) <b>110</b>. The PU <b>120</b> has a PPC core <b>121</b> and a L<b>1</b> cache <b>122</b>, also coupled to its own power state register <b>150</b>. The SPU <b>125</b> and the local store <b>130</b> are also coupled to the power state register <b>150</b>. Each of these elements or sub-elements is coupled to the power state register <b>150</b>.</p>
<p id="p-0022" num="0021">Likewise, the SMF <b>140</b> has a direct memory access controller (DMAC) <b>141</b>, a memory management unit (MMU) <b>142</b>, an atomic memory unit (ATO) <b>143</b> and a bus interface unit (BIU) <b>144</b>. Each of these elements <b>141</b>-<b>144</b> are also coupled to the power state registers <b>150</b>. The MFC <b>105</b>, and the SMF <b>140</b> are coupled to a broad-band engine bus <b>160</b>. The BEB <b>160</b> is also coupled to a I/O bus <b>180</b>, a broad-band interface (BEI) <b>170</b>, and a memory interface controller (MIC) <b>190</b>. The activity or power consumption levels of both of these are controlled by a power control register <b>185</b>, which is programmed by the power state register <b>150</b>.</p>
<p id="p-0023" num="0022">The sub-elements of <b>105</b>, <b>120</b>, <b>140</b>, and so on, read the values in the registers <b>150</b> and determine whether to be in a fully active state, a slowed state, a paused state, a state retained and isolated state, or a state lost and isolated state, or another power consumption state, as a function of a value written by software. Each of these individual software-specified states correspond to increasing or decreasing power consumption for individual units <b>106</b>-<b>110</b>, and so on.</p>
<p id="p-0024" num="0023">However, the power state that is specified and stored within each register <b>150</b> for use with each element, sub-element, or unit within the system <b>100</b>, in some implementations, could potentially be not specifically be implemented for the requested hardware state in other words, only a subset of power states are implemented. For instance, the “paused” state for the L<b>2</b> cache <b>106</b> could be undefined, although this is the power state that was requested by the software but not directly implemented. Therefore, each element, such as the L<b>2</b> cache <b>106</b>, L<b>1</b> cache <b>121</b>, the local store <b>130</b>, and so on, therefore will configure itself to operate at the next higher power state implemented for that element in order to support the functionality and responsiveness requested by software.</p>
<p id="p-0025" num="0024">Therefore, the element is operating at the power level requested by the software or at the next higher power level implemented, thereby ensuring the software required functionality is available. Each sub-element <b>106</b>-<b>110</b>, <b>121</b>-<b>122</b>, element <b>125</b>, <b>130</b> and so on, is therefore programmed by the software to perform at a minimum power level necessary to support the system function. However, if the element can or does not support that level of power state, the next higher level of activity (such as paused requested versus slowed—implemented), is then chosen. However, the software is dependent on the established power hierarchy that the element will operate at the capability level specified by the requested power level or if that level is not available, at the next greater functional capability that is available. That way, the functional characteristics of an individual element is at minimum what has been requested by the software.</p>
<p id="p-0026" num="0025">Turning now to <figref idref="DRAWINGS">FIG. 2A</figref>, disclosed is a state transition map of system <b>100</b> (<figref idref="DRAWINGS">FIG. 1</figref>) of activity states for the various units. Each sub-element <b>106</b>-<b>110</b> has within its own register <b>150</b> a value written by software that denotes the minimum activity level requested of that element, sub-element, or unit. The highest activity/highest power state is an active <b>240</b> state. In this state, the performance of the processor or other sub-element is not limited by power management. In the active state <b>240</b>, the element, sub-element, or unit consumes the maximum amount of power or is otherwise in the most active state. From the active state <b>240</b>, the element, sub-element, or unit can transition (by software request) to any other states in <figref idref="DRAWINGS">FIG. 2A</figref> that have been implemented.</p>
<p id="p-0027" num="0026">The next lower activity state in <figref idref="DRAWINGS">FIG. 2A</figref> is the slowed state <b>250</b>. In the slowed state <b>250</b>, performance is reduced to reduce power consumption. Other than the fact that the processing speed as a function of received cycles is reduced, the element, sub-element, or unit functions similar to the active state.</p>
<p id="p-0028" num="0027">The next lowest activity state is the paused state <b>210</b>. In the paused state, the element, sub-element, or unit is not guaranteed to make forward progress in providing its function. However, the currently processed information state is maintained. The unit also remains responsive to other unit requests to retrieve or update data in its current state. This state is typically transitioned back to slowed or active, by a request from another unit.</p>
<p id="p-0029" num="0028">The next lowest state is the state retained and isolated state <b>220</b>. In the state retained and isolated state <b>220</b>, access to the element, sub-element, or unit is prohibited from any other unit. However, information internally stored in the element, sub-element, or unit is retained. There is no forward functional progress made during the state retained and isolated state <b>220</b> and internal data can not be accessed or updated by other units.</p>
<p id="p-0030" num="0029">Finally, there is the state lost and isolated state <b>230</b>. In the state lost and isolated state <b>230</b>, the element, sub-element, or unit is logically removed from a multiprocessor system. In other words, the element, sub-element, or unit does not retain any internal information as to its state, and the element, sub-element, or unit is not accessible other units and therefore by the operating system, the hypervisor, or application. In the state lost and isolated <b>230</b>, the element, sub-element, or unit is at the lowest level of activity and therefore power consumption. Generally, there can be a correlation between a lower activity level and a lower level of power consumption by a given element, unit or subunit.</p>
<p id="p-0031" num="0030">In <figref idref="DRAWINGS">FIG. 2A</figref>, the states <b>210</b> through <b>250</b> are applied to each element <b>106</b>-<b>110</b>, and other elements or sub-elements of the system <b>100</b>, individually under software direction, and supported by hardware action. This gives a much greater flexibility to the control of individual processors or sub-elements. Furthermore, at least because of the hardware override of the individual component software settings when the software-selected power level is undefined, this helps to ensure that the processing of any data or executions of any instructions are performed at least to the level of function selected by the hypervisor, operating system, application, or so on.</p>
<p id="p-0032" num="0031">Turning now to <figref idref="DRAWINGS">FIG. 2B</figref>, illustrated is a power arrow illustrating relative power consumption, starting from the highest, “active” state, to the “isolated and state lost” state. These states may or may not be defined for any individual element. If the state is not defined for an element that is selected by the software, then the power state for that element is advanced to the next highest available power state by the hardware. In other words, in <figref idref="DRAWINGS">FIG. 2B</figref>, the power states, as registered in the power state registers <b>150</b> and the power control registers <b>180</b>, are implemented by each element, sub-element, or unit at least to the level of function commanded by the software, or the next higher implemented available power state depicted by moving left on the power hierarchy diagram of <figref idref="DRAWINGS">FIG. 2B</figref>.</p>
<p id="p-0033" num="0032">One aspect of accepting the specified software power management states, and then support setting the next higher implemented power state when the software requested state is not available is that it allows the software to be used with differing hardware power implementations. For instance, one version of hardware might not support a given level of activity of a unit, but another version of the hardware does support the level of activity for the unit. However, these different levels of enablement as proposed in the above hierarchy will allow for the same software to hierarchically use distinct usage enablements for elements of hardware.</p>
<p id="p-0034" num="0033">Turning now to <figref idref="DRAWINGS">FIG. 3</figref>, illustrated is an exemplary power hierarchy <b>300</b> for managing the system <b>100</b>. At the highest level is a Broadband Engine (“BE”) <b>310</b>, corresponding to the BE <b>160</b> of <figref idref="DRAWINGS">FIG. 1</figref>. The BE <b>310</b> sets the highest physical power requirements of a system. In other words, no unit below the BE in the hierarchy will have a higher hardware power state than the BE, unless required to do so due to the specified power state being undefined for a particular unit, element or sub-element. For instance, if the BE <b>310</b> is in a “sleep” state, the power PC (PPC) <b>315</b>, which corresponds to the PPC <b>101</b>, the synergistic processor (SPC) <b>350</b>, which corresponds to the SMF <b>140</b>, the BE bus (BEB) <b>360</b>, the bus interface logic (BEI) <b>370</b>, and the input output port (IO) <b>380</b> will all have, as their physical power states, a power state that is no higher than the element from which that element depends. This is the default condition. For instance, the BEI <b>370</b> will be no higher (no more active) than the EE <b>310</b>. These elements and sub-elements can correspond to I/O <b>180</b>, the BEI <b>170</b>, the SPU <b>125</b>, respectively.</p>
<p id="p-0035" num="0034">However, in <figref idref="DRAWINGS">FIG. 3</figref>, a physical element can be set by software for a lower power consumption state than the element above it. For instance, both a memory flow controller (MFC) <b>320</b> and a processor unit (PU) <b>335</b> would share the same physical power state as the PPC <b>315</b> in a default position. In one illustrative example, a bus interface unit (BIU) <b>322</b> and the L<b>2</b> cache <b>326</b> could be set at a lower state, such as isolated and state retained. However, a cache interface unit (CIU) <b>324</b>, and a non-cacheable unit (NCU) <b>330</b> could be set at the same power consumption state as the MFC <b>320</b>.</p>
<p id="p-0036" num="0035">Alternatively, if the BE <b>310</b> is set at the active state by the software, this power consumption state would ordinarily be inherited by a SPU <b>352</b>, a Local Store <b>354</b>, and a SMF <b>355</b>. However, an atomic cache <b>356</b>, a bus interface unit (BIU) <b>357</b>, direct memory access controller (DMAC) <b>358</b>, and the memory management unit (MMU) <b>359</b> could be set at a lower state, such as paused, isolated and state retained, or isolated and state lost.</p>
<p id="p-0037" num="0036">In other words, in the system <b>100</b>, software control (that is, the “architected state” of the system), is used to control the power system. The software control is used to set different power consumption levels to different states of the hierarchy. For instance, software could be used to set the BE at the highest “active” level of power consumption, the PPC at the second “paused” level of power consumption, and the L<b>2</b> cache at the third “paused” level of power consumption.</p>
<p id="p-0038" num="0037">However, a given unit in the hierarchy may not support a power level selected by the software. For instance, if a L<b>1</b> cache <b>337</b> or a PPC core <b>338</b> is set at an “isolated and state retained” power state, the hardware of a particular implementation of the system <b>100</b> may not support this particular power state for this particular element, as the power states supported can be implementation specific. Therefore, the hardware of the system <b>100</b> takes the selected element, such as the L<b>1</b> cache, and places it in the next highest defined energy consumption state. In an exemplary, this would be either the “paused” state, the “slowed” state, or the “active” state, in that order, depending upon whether or not these other states are defined.</p>
<p id="p-0039" num="0038">In other words, in the system <b>100</b>, the software is not to assume a level of activity for any unit that is higher than what the architectural state guarantees, and the hardware delivers at least the level of activity the architecture specifies. In other words, the software designates a certain power consumption state for a specific element, such as the BIU <b>322</b>, the SMF <b>355</b>, a DMAC <b>358</b>, and so on. In the absence of contrary software instructions, each element beneath another element in the hierarchy shares the same power status as the element immediately above it in the hierarchy.</p>
<p id="p-0040" num="0039">However, if a level of activity state is defined for an element, perhaps the MMU <b>328</b>, that is not supported by the physical layout of the system <b>100</b>, the hardware sets the MMU at the next highest power consumption level. However, the software itself runs on the assumption that the physical device, such as the MMU <b>328</b>, does not perform power consumption, in other words, is not faster, than the power consumption specified by the software. By so doing this, the software ensures that the various components of the hierarchy function at a minimum level, which can be relied upon by other components of the software and hardware.</p>
<p id="p-0041" num="0040">It is understood that the present invention can take many forms and embodiments. Accordingly, several variations may be made in the foregoing without departing from the spirit or the scope of the invention. The capabilities outlined-herein allow for the possibility of a variety of programming models. This disclosure should not be read as preferring any particular programming model, but is instead directed to the underlying mechanisms on which these programming models can be built.</p>
<p id="p-0042" num="0041">Having thus described the present invention by reference to certain of its preferred embodiments, it is noted that the embodiments disclosed are illustrative rather than limiting in nature and that a wide range of variations, modifications, changes, and substitutions are contemplated in the foregoing disclosure and, in some instances, some features of the present invention may be employed without a corresponding use of the other features. Many such variations and modifications may be considered desirable by those skilled in the art based upon a review of the foregoing description of preferred embodiments. Accordingly, it is appropriate that the appended claims be construed broadly and in a manner consistent with the scope of the invention.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>The invention claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method of controlling an activity level of an element in a multiple processing unit processor, composing:
<claim-text>issuing, by software, an activity control command for the element of the multiple processing unit processor, wherein the multiple processing unit processor includes a plurality of processing units that include at least one processing unit (PU) and at least one synergistic processing unit (SPU);</claim-text>
<claim-text>determining if the activity level in the activity control command corresponds to an allowable activity control state for the element as defined by hardware;</claim-text>
<claim-text>responsive to the activity control command corresponding to the allowable activity control state for the element, setting the activity level for the element to the activity level defined by the activity control command; and</claim-text>
<claim-text>responsive to the activity level in the activity control command failing to correspond to the allowable activity control state for the element, setting the activity level at a higher activity level than the activity level defined by the activity control command.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the step of setting the activity level at the higher activity level than the activity level defined by the activity control command is performed by hardware.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the act of issuing the activity control command further comprises setting the activity level.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein setting the activity level at the higher activity level than the activity level defined by the activity control command further comprises setting the activity level at a next allowable higher activity level.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising defining the element within an activity hierarchy.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, further comprising selecting the activity control state for the element within the activity hierarchy.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, further comprising inheriting the activity control state from a first element in the activity hierarchy to a second element of the activity hierarchy.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising issuing the activity control command of the element of a multiprocessor system to individually control each element of the multiprocessor system.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the activity control command comprises at least one of an active state activity control command, a slow state activity control command, a paused state activity control command, a state retained and isolated activity control command, or a state lost and isolated activity control command.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the at least one SPU comprises a plurality of SPUs and wherein the PU and the plurality of SPUs are on a same processor chip.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the plurality of SPUs comprises between two to eight SPUs, inclusively.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. A system, comprising:
<claim-text>a first element in a multiple processing unit processor;</claim-text>
<claim-text>a register, coupled to the first element, wherein the register is configured to receive, by software, an activity control command for the first element of the multiple processing unit processor, wherein the multiple processing unit processor includes a plurality of processing units that include at least one processing unit (PU) and at least one synergistic processing unit (SPU); and</claim-text>
<claim-text>a memory coupled to the plurality of processing units, wherein the memory includes a set of instructions and wherein the plurality of processing units execute the set of instructions to:
<claim-text>determine if the activity level in the activity control command corresponds to an allowable activity control state for the first element as defined by hardware;</claim-text>
<claim-text>set the activity level for the first element to the activity level defined by the activity control command in response to the activity control command corresponding to the allowable activity control state for the first element; and</claim-text>
<claim-text>set the activity level at a higher activity level than the activity level defined by the activity control command in response to the activity level in the activity control command failing to correspond to the allowable activity control state for the first element.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The system of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the first element comprises a memory flow controller.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The system of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the first element comprises a local store.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The system of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the first element is hierarchically associated with a second element.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the second element inherits the activity level of the first element.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the second element is set at a lower activity level than the activity level by the software.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The system of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the at least one SPU comprises a plurality of SPUs and wherein the PU and the plurality of SPUs are on a same processor chip.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. A computer program product for controlling an activity level of an element in a multiple processing unit processor, the computer program product having a computer readable storage medium with a computer program embodied thereon, the computer program comprising:
<claim-text>computer code for issuing, by software, an activity control command for the element of the multiple processing unit processor, wherein the multiple processing unit processor includes a plurality of processors units that include at least one processing unit (PU) and at least one synergistic processing unit (SPU);</claim-text>
<claim-text>computer code for determining if the activity level in the activity control command corresponds to an allowable activity control state for the element as defined by hardware;</claim-text>
<claim-text>responsive to the activity control command corresponding to the allowable activity control states for the element, computer code for setting the activity level for the element to the activity level defined by the activity control command; and</claim-text>
<claim-text>responsive to the activity level in the activity control command failing to correspond to the allowable activity control state for the element, computer code for setting the activity level at a higher activity level than the activity level defined by the activity control command.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The computer program product of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the at least one SPU comprises a plurality of SPUs and wherein the PU and the plurality of SPUs are on a same processor chip.</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. A multiple processing unit processor for controlling an activity level of an element, the multiple processing unit processor including a computer program on a computer readable storage medium, the computer program comprising:
<claim-text>computer code for issuing, by software, an activity control command for the element of the multiple processing unit processor, wherein the multiple processing unit processor includes a plurality of processing units that include at least one processing unit (PU) and at least one synergistic processing unit (SPU);</claim-text>
<claim-text>computer code for determining if the activity level in the activity control command corresponds to an allowable activity control state for the element as defined by hardware;</claim-text>
<claim-text>responsive to the activity control command corresponding to the allowable activity control states for the element, computer code for setting the activity level for the element to the activity level defined by the activity control command; and</claim-text>
<claim-text>responsive to the activity level in the activity control command failing to correspond to the allowable activity control state for the element, computer code for setting the activity level at a higher activity level than the activity level defined by the activity control command.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. The multiple processing unit processor of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the at least one SPU comprises a plurality of SPUs and wherein the PU and the plurality of SPUs are on a same processor chip.</claim-text>
</claim>
</claims>
</us-patent-grant>
