<us-patent-grant lang="EN" dtd-version="v4.2 2006-08-23" file="US07297864-20071120.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20071106" date-publ="20071120">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>07297864</doc-number>
<kind>B2</kind>
<date>20071120</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>11039080</doc-number>
<date>20050120</date>
</document-id>
</application-reference>
<us-application-series-code>11</us-application-series-code>
<priority-claims>
<priority-claim sequence="01" kind="national">
<country>JP</country>
<doc-number>P.2004-012168</doc-number>
<date>20040120</date>
</priority-claim>
</priority-claims>
<us-term-of-grant>
<us-term-extension>254</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>10</class>
<subclass>H</subclass>
<main-group>3</main-group>
<subgroup>06</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>A</section>
<class>63</class>
<subclass>F</subclass>
<main-group>9</main-group>
<subgroup>24</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>A</section>
<class>63</class>
<subclass>F</subclass>
<main-group>13</main-group>
<subgroup>00</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>17</main-group>
<subgroup>00</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>19</main-group>
<subgroup>00</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>3</main-group>
<subgroup>033</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification> 84724</main-classification>
<further-classification>463 31</further-classification>
<further-classification>345184</further-classification>
</classification-national>
<invention-title id="d0e71">Image signal generating apparatus, an image signal generating program and an image signal generating method</invention-title>
<references-cited>
<citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5012230</doc-number>
<kind>A</kind>
<name>Yasuda</name>
<date>19910400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>345160</main-classification></classification-national>
</citation>
<citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5488196</doc-number>
<kind>A</kind>
<name>Zimmerman et al.</name>
<date>19960100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification> 84612</main-classification></classification-national>
</citation>
<citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6070205</doc-number>
<kind>A</kind>
<name>Kato et al.</name>
<date>20000500</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>6353169</doc-number>
<kind>B1</kind>
<name>Juszkiewicz et al.</name>
<date>20020300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification> 84600</main-classification></classification-national>
</citation>
<citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2002/0155889</doc-number>
<kind>A1</kind>
<name>Miyamoto et al.</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>463 32</main-classification></classification-national>
</citation>
<citation>
<patcit num="00006">
<document-id>
<country>JP</country>
<doc-number>9-212162</doc-number>
<date>19970800</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00007">
<document-id>
<country>JP</country>
<doc-number>10078778</doc-number>
<kind>A</kind>
<date>19980300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
</citation>
<citation>
<patcit num="00008">
<document-id>
<country>JP</country>
<doc-number>10-307790</doc-number>
<date>19981100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
</references-cited>
<number-of-claims>20</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification> 84724</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>463 31</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>463 32</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>463 33</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>463 34</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>345156</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>345157</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>345158</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>345159</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>345160</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>345161</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>345162</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>345184</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>42</number-of-drawing-sheets>
<number-of-figures>57</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20050211080</doc-number>
<kind>A1</kind>
<date>20050929</date>
</document-id>
</related-publication>
</us-related-documents>
<parties>
<applicants>
<applicant sequence="001" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Ueshima</last-name>
<first-name>Hiromu</first-name>
<address>
<city>Shiga</city>
<country>JP</country>
</address>
</addressbook>
<nationality>
<country>JP</country>
</nationality>
<residence>
<country>JP</country>
</residence>
</applicant>
<applicant sequence="002" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Inaba</last-name>
<first-name>Akihiro</first-name>
<address>
<city>Shiga</city>
<country>JP</country>
</address>
</addressbook>
<nationality>
<country>JP</country>
</nationality>
<residence>
<country>JP</country>
</residence>
</applicant>
</applicants>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Osha Liang LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</parties>
<assignees>
<assignee>
<addressbook>
<orgname>SSD Company Limited</orgname>
<role>03</role>
<address>
<city>Shiga</city>
<country>JP</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Donovan</last-name>
<first-name>Lincoln</first-name>
<department>2837</department>
</primary-examiner>
<assistant-examiner>
<last-name>Millikin</last-name>
<first-name>Andrew</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">The automatic musical instrument contains a main body provided with a sliding saddle member and a sliding operation piece. The sliding operation piece is provided with a reflecting pattern consisting of light reflecting regions and light absorbing regions. The sliding saddle member is provided with a infrared emitting diode and two phototransistors inside. When the sliding operation piece is slidably moved in contact with the sliding saddle member, infrared light emitted from the infrared emitting diode is reflected by the reflecting pattern. Then, the phototransistors receive the reflected light and output pulse signals A and B. The high speed processor built in the main body calculates the sliding speed, the sliding direction and the sliding time on the basis of the pulse signals A and B. Also, the high speed processor controls the movement of the character image displayed on the screen on the basis of one of the sliding speed, the sliding direction and the sliding time.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="149.27mm" wi="205.06mm" file="US07297864-20071120-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="206.25mm" wi="149.61mm" orientation="landscape" file="US07297864-20071120-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="216.49mm" wi="138.09mm" orientation="landscape" file="US07297864-20071120-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="188.47mm" wi="122.94mm" orientation="landscape" file="US07297864-20071120-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="196.43mm" wi="57.57mm" orientation="landscape" file="US07297864-20071120-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="202.69mm" wi="133.77mm" file="US07297864-20071120-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="98.81mm" wi="105.92mm" file="US07297864-20071120-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="129.20mm" wi="104.06mm" file="US07297864-20071120-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="220.56mm" wi="138.01mm" orientation="landscape" file="US07297864-20071120-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="237.74mm" wi="148.76mm" file="US07297864-20071120-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="239.27mm" wi="150.88mm" file="US07297864-20071120-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="112.35mm" wi="134.11mm" file="US07297864-20071120-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="228.85mm" wi="152.57mm" orientation="landscape" file="US07297864-20071120-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00013" num="00013">
<img id="EMI-D00013" he="210.57mm" wi="149.52mm" file="US07297864-20071120-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00014" num="00014">
<img id="EMI-D00014" he="113.88mm" wi="94.83mm" file="US07297864-20071120-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00015" num="00015">
<img id="EMI-D00015" he="204.89mm" wi="147.57mm" orientation="landscape" file="US07297864-20071120-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00016" num="00016">
<img id="EMI-D00016" he="203.88mm" wi="90.00mm" file="US07297864-20071120-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00017" num="00017">
<img id="EMI-D00017" he="129.54mm" wi="130.81mm" file="US07297864-20071120-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00018" num="00018">
<img id="EMI-D00018" he="202.44mm" wi="119.80mm" file="US07297864-20071120-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00019" num="00019">
<img id="EMI-D00019" he="166.45mm" wi="104.39mm" file="US07297864-20071120-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00020" num="00020">
<img id="EMI-D00020" he="197.02mm" wi="141.14mm" orientation="landscape" file="US07297864-20071120-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00021" num="00021">
<img id="EMI-D00021" he="189.99mm" wi="145.37mm" file="US07297864-20071120-D00021.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00022" num="00022">
<img id="EMI-D00022" he="118.53mm" wi="67.14mm" file="US07297864-20071120-D00022.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00023" num="00023">
<img id="EMI-D00023" he="197.87mm" wi="143.09mm" file="US07297864-20071120-D00023.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00024" num="00024">
<img id="EMI-D00024" he="229.19mm" wi="153.33mm" file="US07297864-20071120-D00024.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00025" num="00025">
<img id="EMI-D00025" he="223.10mm" wi="153.50mm" file="US07297864-20071120-D00025.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00026" num="00026">
<img id="EMI-D00026" he="213.19mm" wi="148.17mm" file="US07297864-20071120-D00026.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00027" num="00027">
<img id="EMI-D00027" he="247.23mm" wi="134.03mm" orientation="landscape" file="US07297864-20071120-D00027.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00028" num="00028">
<img id="EMI-D00028" he="183.64mm" wi="153.08mm" file="US07297864-20071120-D00028.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00029" num="00029">
<img id="EMI-D00029" he="218.86mm" wi="118.53mm" file="US07297864-20071120-D00029.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00030" num="00030">
<img id="EMI-D00030" he="245.28mm" wi="148.84mm" file="US07297864-20071120-D00030.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00031" num="00031">
<img id="EMI-D00031" he="199.73mm" wi="149.86mm" file="US07297864-20071120-D00031.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00032" num="00032">
<img id="EMI-D00032" he="175.51mm" wi="155.96mm" file="US07297864-20071120-D00032.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00033" num="00033">
<img id="EMI-D00033" he="166.79mm" wi="152.65mm" file="US07297864-20071120-D00033.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00034" num="00034">
<img id="EMI-D00034" he="176.87mm" wi="136.91mm" file="US07297864-20071120-D00034.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00035" num="00035">
<img id="EMI-D00035" he="220.05mm" wi="150.03mm" file="US07297864-20071120-D00035.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00036" num="00036">
<img id="EMI-D00036" he="192.96mm" wi="145.20mm" file="US07297864-20071120-D00036.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00037" num="00037">
<img id="EMI-D00037" he="188.98mm" wi="147.66mm" file="US07297864-20071120-D00037.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00038" num="00038">
<img id="EMI-D00038" he="219.12mm" wi="105.75mm" file="US07297864-20071120-D00038.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00039" num="00039">
<img id="EMI-D00039" he="148.76mm" wi="152.40mm" file="US07297864-20071120-D00039.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00040" num="00040">
<img id="EMI-D00040" he="163.58mm" wi="110.83mm" file="US07297864-20071120-D00040.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00041" num="00041">
<img id="EMI-D00041" he="205.82mm" wi="145.63mm" orientation="landscape" file="US07297864-20071120-D00041.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00042" num="00042">
<img id="EMI-D00042" he="121.24mm" wi="151.81mm" file="US07297864-20071120-D00042.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<p id="p-0002" num="0001">This application claims foreign priority based on Japanese Patent application No. 2004-12168, filed Jan. 20, 2004, the contents of which is incorporated herein by reference in its entirety.</p>
<heading id="h-0001" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0003" num="0002">1. Field of the Invention</p>
<p id="p-0004" num="0003">The present invention is related to an image signal generating apparatus operable to generate an image signal on the basis of a pulse signal issued in response to sliding operation performed by an operator.</p>
<p id="p-0005" num="0004">2. Description of the Related Art</p>
<p id="p-0006" num="0005">Jpn. unexamined patent publication No. 09-212162 discloses an electric string instrument. The electric string instrument comprises a main body provided with a reflective photo interrupter and a bow having a thin reflective member which reflects light. The bow is formed with a black pattern in the side surface thereof. Rectangular black areas are arranged at an equal interval in order to form this black pattern. Each rectangular black area is a light absorption area. Therefore, when sliding operation is performed with the bow, the black pattern of the bow absorbs light emitted from the photo interrupter, and other part reflects light emitted from the photo interrupter. Consequently, a pulse signal of a cycle corresponding to sliding velocity is input to a microcomputer in the main body from the photo interrupter. The microcomputer performs sound volume control in accordance with the cycle of the pulse signal. As just described, the electric string instrument is an apparatus to play music.</p>
<heading id="h-0002" level="1">SUMMARY OF INVENTION</heading>
<p id="p-0007" num="0006">It is an object of the present invention to provide an image signal generating apparatus which generates an image signal on the basis of a pulse signal generated in response to sliding operation performed by an operator and the related techniques thereof.</p>
<p id="p-0008" num="0007">In accordance with the first aspect of the present invention, an image signal generation apparatus comprises a main body provided with a part to be slid, a sliding operation piece that is operated to slidably move in contact with the part to be slid of said main body, a processor operable to generate an image signal corresponding to sliding speed of said sliding operation piece, and wherein said main body includes a measuring unit operable to measure the sliding speed of said sliding operation piece.</p>
<p id="p-0009" num="0008">In accordance with this configuration, the operator can give changes to a displayed image by changing the sliding speed of the sliding operation piece.</p>
<p id="p-0010" num="0009">For example, the processor controls movement velocity of a character image displayed on a display device on the basis of the sliding speed of said sliding operation piece.</p>
<p id="p-0011" num="0010">In accordance with the second aspect of the present invention, an image signal generation apparatus comprises a main body provided with a part to be slid, a sliding operation piece that is operated to slidably move in contact with the part to be slid of said main body, a processor operable to generate an image signal corresponding to sliding time of said sliding operation piece without a change in direction, and wherein said main body includes a measuring unit operable to measure the sliding time of said sliding operation piece.</p>
<p id="p-0012" num="0011">In accordance with this configuration, the operator can give changes to a displayed image by changing the sliding time of the sliding operation piece.</p>
<p id="p-0013" num="0012">For example, the processor controls movement distance of a character image displayed on a display device on the basis of the sliding time of said sliding operation piece.</p>
<p id="p-0014" num="0013">In accordance with the third aspect of the present invention, an image signal generation apparatus comprises a main body provided with a part to be slid, a sliding operation piece that is operated to slidably move in contact with the part to be slid of said main body, a processor operable to generate an image signal corresponding to sliding direction of said sliding operation piece, and wherein said main body includes a measuring unit operable to measure the sliding direction of said sliding operation piece.</p>
<p id="p-0015" num="0014">In accordance with this configuration, the operator can give changes to a displayed image by changing the sliding direction of the sliding operation piece.</p>
<p id="p-0016" num="0015">For example, the processor controls movement direction of a character image displayed on a display device on the basis of the sliding direction of said sliding operation piece.</p>
<p id="p-0017" num="0016">In accordance with the first and second aspects of the present invention, the image signal generation apparatus wherein said measuring unit includes a optical sensor having a light emitting element and light receiving element, wherein said sliding operation piece is formed with first light receiving areas and second light receiving areas which are alternately arranged in longitudinal direction and have different optical characteristic, wherein said light receiving element operable to receive light from said light emitting element via said first light receiving areas of said sliding operation piece and convert it into an electrical signal, and wherein said processor generate the image signal corresponding to the electrical signal output from said light receiving element.</p>
<p id="p-0018" num="0017">In accordance with this configuration, it is possible to measure the sliding speed and the sliding time of the sliding operation piece with ease.</p>
<p id="p-0019" num="0018">In accordance with the first to third aspects of the present invention, the image signal generation apparatus wherein said measuring unit comprises a optical sensor having a light emitting element, a first light receiving element and a second light receiving element, wherein said sliding operation piece is formed with first light receiving areas and second light receiving areas which are alternately arranged in longitudinal direction and have different optical characteristic, wherein said first light receiving element operable to receive light from said light emitting element via said first light receiving areas of said sliding operation piece and convert it into a first electrical signal, wherein said second light receiving element operable to receive light from said light emitting element via said first light receiving areas of said sliding operation piece and convert it into a second electrical signal, wherein said first light receiving element and said second light receiving element are arranged at a predetermined distance in the sliding direction, and the predetermined distance is selected in order to create a certain phase difference between the first electrical signal and the second electrical signal, and wherein said processor generates the image signal on the basis of the first electrical signal and the second electrical signal.</p>
<p id="p-0020" num="0019">In accordance with this configuration, it is possible to measure the sliding speed, the sliding time and the sliding direction of the sliding operation piece with ease.</p>
<p id="p-0021" num="0020">In accordance with the first to third aspects of the present invention, the processor executes a program stored in a storage medium, and generates the image signal on the basis of image information stored in the storage medium.</p>
<p id="p-0022" num="0021">In accordance with this configuration, the user can enjoy various applications by changing the storage medium.</p>
<p id="p-0023" num="0022">In accordance with the first to third aspects of the present invention, the processor generates an audio signal in response to a trigger issued on the basis of sliding operation of said sliding operation piece.</p>
<p id="p-0024" num="0023">In accordance with this configuration, the operator can control sound outputting as well as the image by operating the sliding operation article.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0025" num="0024">The aforementioned and other features and objects of the present invention and the manner of attaining them will become more apparent and the invention itself will be best understood by reference to the following description of a preferred embodiment taken in conjunction with the accompanying drawings, wherein:</p>
<p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. 1</figref> is a schematic diagram showing the overall configuration of the automatic musical instrument as an image signal generating apparatus in accordance with the embodiment of the present invention.</p>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. 2A</figref> is a plan view of the automatic musical instrument main body <b>1</b> of <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. 2B</figref> is a lateral view of the automatic musical instrument main body <b>1</b> of <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. 3</figref> is a bottom view of the automatic musical instrument main body <b>1</b> of <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. 4A</figref> is a side view showing the sliding operation piece <b>2</b> of <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. 4B</figref> is a bottom view showing the sliding operation piece <b>2</b> of <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. 5A</figref> is an expanded view showing the sliding saddle member <b>33</b> as shown in <figref idref="DRAWINGS">FIG. 2A</figref>.</p>
<p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. 5B</figref> is a plan view showing the optical sensor unit <b>90</b> as shown in <figref idref="DRAWINGS">FIG. 5A</figref>.</p>
<p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. 6</figref> is a cross sectional view along A-A line of <figref idref="DRAWINGS">FIG. 5A</figref>.</p>
<p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. 7</figref> is a cross sectional view along B-B line of <figref idref="DRAWINGS">FIG. 5A</figref>.</p>
<p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. 8</figref> is a view showing an example of an operation guide screen as displayed on the screen <b>82</b> of <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. 9</figref> is a view showing an example of the running game screen performed by the automatic musical instrument of <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. 10</figref> is a view showing an example of a start screen of the flying game performed by the automatic musical instrument of <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. 11</figref> is a view showing an example of a screen after the flying game starts.</p>
<p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. 12</figref> is a view showing an example of a catch game screen performed by the automatic musical instrument of <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. 13</figref> is a view showing the electrical construction of the automatic musical instrument main body <b>1</b> as illustrated in <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0042" num="0041"><figref idref="DRAWINGS">FIG. 14</figref> is a block diagram of the high speed processor <b>200</b> of <figref idref="DRAWINGS">FIG. 13</figref>.</p>
<p id="p-0043" num="0042"><figref idref="DRAWINGS">FIG. 15</figref> is a schematic diagram showing the relationship between the reflecting pattern <b>43</b> of the sliding operation piece <b>2</b> and the locations of the optical fibers <b>91</b> and <b>92</b> of the optical sensor unit <b>90</b> of <figref idref="DRAWINGS">FIG. 5A</figref>.</p>
<p id="p-0044" num="0043"><figref idref="DRAWINGS">FIG. 16A</figref> is a view showing pulse signals A and B output from the phototransistors <b>34</b> and <b>35</b> when the sliding operation piece <b>2</b> is slid in (+) direction of <figref idref="DRAWINGS">FIG. 2A</figref>.</p>
<p id="p-0045" num="0044"><figref idref="DRAWINGS">FIG. 16B</figref> is a view showing pulse signals A and B output from the phototransistors <b>34</b> and <b>35</b> when the sliding operation piece <b>2</b> is slid in (−) direction of <figref idref="DRAWINGS">FIG. 2A</figref>.</p>
<p id="p-0046" num="0045"><figref idref="DRAWINGS">FIG. 17</figref> is a schematic diagram showing the state transition of the pulse signals A and B as output from the phototransistors <b>34</b> and <b>35</b>.</p>
<p id="p-0047" num="0046"><figref idref="DRAWINGS">FIG. 18</figref> is a circuit diagram showing the detection unit <b>30</b> provided in the automatic musical instrument main body <b>1</b>.</p>
<p id="p-0048" num="0047"><figref idref="DRAWINGS">FIG. 19</figref> is a schematic representation of a program and data stored in the external ROM <b>300</b> of <figref idref="DRAWINGS">FIG. 13</figref>.</p>
<p id="p-0049" num="0048"><figref idref="DRAWINGS">FIG. 20</figref> is a view for explaining sprites constituting an image object displayed on the screen <b>82</b> of <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0050" num="0049"><figref idref="DRAWINGS">FIG. 21</figref> is a view for explaining the background screen <b>302</b> displayed on the screen <b>82</b> of the television monitor <b>80</b> of <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0051" num="0050"><figref idref="DRAWINGS">FIG. 22A</figref> is a view for explaining the background screen <b>302</b> before scrolled.</p>
<p id="p-0052" num="0051"><figref idref="DRAWINGS">FIG. 22B</figref> is a view for explaining the background screen <b>302</b> after scrolled.</p>
<p id="p-0053" num="0052"><figref idref="DRAWINGS">FIG. 23</figref> is a block diagram of the graphic processor <b>202</b> of <figref idref="DRAWINGS">FIG. 14</figref>.</p>
<p id="p-0054" num="0053"><figref idref="DRAWINGS">FIG. 24</figref> is a block diagram showing the sound processor <b>203</b> of <figref idref="DRAWINGS">FIG. 14</figref>.</p>
<p id="p-0055" num="0054"><figref idref="DRAWINGS">FIG. 25</figref> is a block diagram showing the DAC block <b>271</b> of <figref idref="DRAWINGS">FIG. 24</figref>.</p>
<p id="p-0056" num="0055"><figref idref="DRAWINGS">FIG. 26</figref> is a flowchart showing the running game process performed by the automatic musical instrument of <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0057" num="0056"><figref idref="DRAWINGS">FIG. 27</figref> is a flowchart showing the process flow of the initial setting process in step S<b>1</b> of <figref idref="DRAWINGS">FIG. 26</figref>.</p>
<p id="p-0058" num="0057"><figref idref="DRAWINGS">FIG. 28</figref> is a flowchart showing the process flow of the pulse count process in step S<b>11</b> of <figref idref="DRAWINGS">FIG. 26</figref>.</p>
<p id="p-0059" num="0058"><figref idref="DRAWINGS">FIG. 29</figref> is a flowchart showing the process flow of the trigger processing in step S<b>3</b> of <figref idref="DRAWINGS">FIG. 26</figref>.</p>
<p id="p-0060" num="0059"><figref idref="DRAWINGS">FIG. 30</figref> is a view for explaining the fictive coordinate.</p>
<p id="p-0061" num="0060"><figref idref="DRAWINGS">FIG. 31</figref> is an enlarged view of a part of the background image <b>303</b> of <figref idref="DRAWINGS">FIG. 30</figref>.</p>
<p id="p-0062" num="0061"><figref idref="DRAWINGS">FIG. 32</figref> is a view showing an example of the velocity conversion table.</p>
<p id="p-0063" num="0062"><figref idref="DRAWINGS">FIG. 33</figref> is a flowchart showing the process flow of the character location control process in step S<b>4</b> of <figref idref="DRAWINGS">FIG. 26</figref>.</p>
<p id="p-0064" num="0063"><figref idref="DRAWINGS">FIG. 34</figref> is a view showing an example of the animation tables.</p>
<p id="p-0065" num="0064"><figref idref="DRAWINGS">FIG. 35</figref> is a flowchart showing the process flow of the character animation process in step S<b>5</b> of <figref idref="DRAWINGS">FIG. 26</figref>.</p>
<p id="p-0066" num="0065"><figref idref="DRAWINGS">FIG. 36</figref> is a flowchart showing the process flow of the current position indicating object control process in step S<b>6</b> of <figref idref="DRAWINGS">FIG. 26</figref>.</p>
<p id="p-0067" num="0066"><figref idref="DRAWINGS">FIG. 37</figref> is a flowchart showing the process flow of the time count process in step S<b>7</b> of <figref idref="DRAWINGS">FIG. 26</figref>.</p>
<p id="p-0068" num="0067"><figref idref="DRAWINGS">FIG. 38</figref> is a flowchart showing the process flow of the sound process in step S<b>10</b> of <figref idref="DRAWINGS">FIG. 26</figref>.</p>
<p id="p-0069" num="0068"><figref idref="DRAWINGS">FIG. 39</figref> is a flowchart showing the process flow of the flying game process performed by the automatic musical instrument of <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0070" num="0069"><figref idref="DRAWINGS">FIG. 40</figref> is a flowchart showing the process flow of the character location calculation process in step S<b>203</b> of <figref idref="DRAWINGS">FIG. 39</figref>.</p>
<p id="p-0071" num="0070"><figref idref="DRAWINGS">FIG. 41</figref> is a flowchart showing the process flow of the character location control process in step S<b>204</b> of <figref idref="DRAWINGS">FIG. 39</figref>.</p>
<p id="p-0072" num="0071"><figref idref="DRAWINGS">FIG. 42</figref> is a flowchart showing the process flow of the character animation control in step S<b>205</b> of <figref idref="DRAWINGS">FIG. 39</figref>.</p>
<p id="p-0073" num="0072"><figref idref="DRAWINGS">FIG. 43</figref> is a flowchart showing the process flow of the input indicating bar control process in step S<b>206</b> of <figref idref="DRAWINGS">FIG. 39</figref>.</p>
<p id="p-0074" num="0073"><figref idref="DRAWINGS">FIG. 44</figref> is a flowchart showing the process flow of the flying distance calculation process in step S<b>207</b> of <figref idref="DRAWINGS">FIG. 39</figref>.</p>
<p id="p-0075" num="0074"><figref idref="DRAWINGS">FIG. 45</figref> is a flowchart showing the process flow of the catch game process performed by the automatic musical instrument of <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0076" num="0075"><figref idref="DRAWINGS">FIG. 46</figref> is a flowchart showing the process flow of the character control process in step S<b>303</b> of <figref idref="DRAWINGS">FIG. 45</figref>.</p>
<p id="p-0077" num="0076"><figref idref="DRAWINGS">FIG. 47</figref> is a view showing an example of the time table to display the falling objects <b>79</b>.</p>
<p id="p-0078" num="0077"><figref idref="DRAWINGS">FIG. 48</figref> is a flowchart showing the process flow of the falling object appearance process in step S<b>304</b> of <figref idref="DRAWINGS">FIG. 45</figref>.</p>
<p id="p-0079" num="0078"><figref idref="DRAWINGS">FIG. 49</figref> is a flowchart showing the process flow of the falling object position control process in step S<b>305</b> of <figref idref="DRAWINGS">FIG. 45</figref>.</p>
<p id="p-0080" num="0079"><figref idref="DRAWINGS">FIG. 50</figref> is a flowchart showing the process flow of the catch judgment process in step S<b>306</b> of <figref idref="DRAWINGS">FIG. 45</figref>.</p>
<p id="p-0081" num="0080"><figref idref="DRAWINGS">FIG. 51</figref> is a view showing other example of use of the automatic musical instrument as an image signal generation apparatus in the present embodiment.</p>
<p id="p-0082" num="0081"><figref idref="DRAWINGS">FIG. 52</figref> is a view showing other example of running game screen of <figref idref="DRAWINGS">FIG. 9</figref>.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DESCRIPTION OF THE PREFERRED EMBODIMENTS</heading>
<p id="p-0083" num="0082">In what follows, an embodiment of the present invention will be explained in conjunction with the accompanying drawings. Meanwhile, like references indicate the same or functionally similar elements throughout the respective drawings, and therefore redundant explanation is not repeated.</p>
<p id="p-0084" num="0083"><figref idref="DRAWINGS">FIG. 1</figref> is a schematic diagram showing the overall configuration of an automatic musical instrument as an image signal generating apparatus in accordance with the embodiment of the present invention. <figref idref="DRAWINGS">FIG. 2A</figref> is a plan view of a main body <b>1</b> of <figref idref="DRAWINGS">FIG. 1</figref>. <figref idref="DRAWINGS">FIG. 2B</figref> is a lateral view of the main body <b>1</b> of <figref idref="DRAWINGS">FIG. 1</figref>. <figref idref="DRAWINGS">FIG. 3</figref> is a bottom view of the main body <b>1</b> of <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0085" num="0084">As illustrated in <figref idref="DRAWINGS">FIG. 1</figref>, the automatic musical instrument includes the main body <b>1</b> and a sliding operation piece <b>2</b>. The main body <b>1</b> in accordance with the present embodiment is designed in the form of a violin as an exemplary design thereof. Accordingly, in this case, the sliding operation piece <b>2</b> corresponds to a bow.</p>
<p id="p-0086" num="0085">The main body <b>1</b> is provided with a bout portion <b>10</b> which has a neck portion <b>20</b>, a sliding saddle member <b>33</b>, selection keys <b>12</b><i>a </i>and <b>12</b><i>b</i>, a cancel key <b>12</b><i>c</i>, a decision key <b>12</b><i>d</i>, and a display portion <b>15</b> on the surface thereof. Incidentally, since the main body <b>1</b> includes the sliding saddle member <b>33</b>, it may be called as a sliding saddle body. The neck portion <b>20</b> is provided with a vibrato switch <b>12</b><i>e </i>for adding vibrato effects to musical tones on the surface thereof.</p>
<p id="p-0087" num="0086">As illustrated in <figref idref="DRAWINGS">FIG. 2B</figref>, the bout portion <b>10</b> is also provided with a volume dial <b>16</b>, a headphone terminal <b>17</b>, an AV terminal <b>18</b>, a power terminal <b>19</b>, and a connector <b>22</b> on the side surface thereof.</p>
<p id="p-0088" num="0087">Furthermore, as illustrated in <figref idref="DRAWINGS">FIG. 3</figref>, the bout portion <b>10</b> is provided with a reset switch <b>25</b> for resetting the hardware, a power switch <b>24</b>, a speaker portion <b>11</b>, a battery box <b>26</b>, and a cartridge insertion slot <b>27</b> on the bottom surface thereof. A cartridge socket <b>23</b> is provided behind this cartridge insertion slot <b>27</b>. This power switch <b>24</b> is a slide switch having an “off” position at one end, a television mode position at the center, and a speaker mode position at the other end. In the television mode, sound is output from the speaker of the television monitor <b>80</b>. In the speaker mode, sound is output from the speaker portion <b>11</b> of the main body <b>1</b>. The sound volume of the musical tones as output from the speaker portion <b>11</b> can be adjusted by the volume dial <b>16</b>.</p>
<p id="p-0089" num="0088">A memory cartridge <b>29</b> containing a ROM (read only memory) as illustrated in <figref idref="DRAWINGS">FIG. 1</figref> is inserted into the cartridge socket <b>23</b>. Alternatively, the memory cartridge <b>29</b> to be inserted may contain an EEPROM (electrically erasable and programmable read only memory) instead. Incidentally, the memory contained in the memory cartridge <b>29</b> is not limited thereto.</p>
<p id="p-0090" num="0089">Returning to <figref idref="DRAWINGS">FIG. 1</figref>, the television monitor <b>80</b> includes a screen <b>82</b> at the front side and an AV terminal <b>81</b> below the screen <b>82</b>. Then, the main body <b>1</b> and the television monitor <b>80</b> are connected to each other by an AV cable <b>60</b>. More specifically speaking, the AV terminal <b>18</b> of the main body <b>1</b> and the AV terminal <b>81</b> of the television monitor <b>80</b> are connected to each other by the AV cable <b>60</b>. On the other hand, a DC power voltage is applied to the main body <b>1</b> by an AC adaptor <b>50</b> through the power terminal <b>19</b>. Alternatively, battery cells (not shown in the figure) placed in the battery box <b>26</b> can be used to apply the DC power voltage in place of the AC adaptor <b>50</b>. Also, it is possible to use the main body <b>1</b> with a headphone (not shown) connected thereto. The sound volume of the musical tones as output from the headphone can be adjusted by the volume dial <b>16</b>.</p>
<p id="p-0091" num="0090">The sliding saddle member <b>33</b> will be explained with reference to <figref idref="DRAWINGS">FIG. 2A</figref> and <figref idref="DRAWINGS">FIG. 2B</figref>. As explained later, the sliding saddle member <b>33</b> is designed in the form of an arc as viewed in cross section. A guide <b>31</b> and a guide <b>32</b> are projected from the opposite ends of the sliding saddle member <b>33</b> along the peak of this sliding saddle member <b>33</b>. The opposite side surfaces of the guides <b>31</b> and <b>32</b> are rounded in a plan view and provided to come into contact with the sliding operation piece <b>2</b> during operation. This configuration is selected for the purpose of allowing smooth movement of the sliding operation piece <b>2</b> even with the guides <b>31</b> and <b>32</b> being in contact therewith and preventing the wear of the guides <b>31</b> and <b>32</b> due to the sliding contact between the sliding operation piece <b>2</b> and the guides <b>31</b> and <b>32</b>. The operator can take control of the automatic performance of the automatic musical instrument or the movement of a character displayed on the screen <b>82</b> by sliding the sliding operation piece <b>2</b> that is located between the guide <b>31</b> and the guide <b>32</b> of the sliding saddle member <b>33</b>.</p>
<p id="p-0092" num="0091"><figref idref="DRAWINGS">FIG. 4A</figref> is a side view showing the sliding operation piece <b>2</b> of <figref idref="DRAWINGS">FIG. 1</figref>, and <figref idref="DRAWINGS">FIG. 4B</figref> is a bottom view thereof. As illustrated in <figref idref="DRAWINGS">FIG. 4B</figref>, the sliding operation piece <b>2</b> is formed with a reflecting pattern <b>43</b> in the bottom surface <b>41</b> thereof. This reflecting pattern <b>43</b> comprises light reflecting regions <b>45</b> and light absorbing regions <b>44</b> which are alternately arranged. The light reflecting region <b>45</b> reflects incident light while the light absorbing region <b>44</b> absorbs incident light.</p>
<p id="p-0093" num="0092">The operator slides this sliding operation piece <b>2</b> in such a manner that the bottom surface <b>41</b> of this sliding operation piece <b>2</b> keeps in contact with the sliding saddle member <b>33</b>.</p>
<p id="p-0094" num="0093"><figref idref="DRAWINGS">FIG. 5A</figref> is an expanded view showing the sliding saddle member <b>33</b> as shown in <figref idref="DRAWINGS">FIG. 2A</figref>, and <figref idref="DRAWINGS">FIG. 5B</figref> is a plan view showing the optical sensor unit <b>90</b> as shown in <figref idref="DRAWINGS">FIG. 5A</figref>. As illustrated in <figref idref="DRAWINGS">FIG. 5A</figref>, the optical sensor unit <b>90</b> is located inside the sliding saddle member <b>33</b> in such a position that the sliding operation piece <b>2</b> is passed thereover. This optical sensor unit <b>90</b> includes a light emitting diode <b>36</b>, optical fibers <b>91</b> and <b>92</b>, and phototransistors <b>34</b> and <b>35</b> (not shown in <figref idref="DRAWINGS">FIG. 5</figref>). The optical fiber <b>91</b> and the optical fiber <b>92</b> are arranged along the sliding direction of the sliding operation piece <b>2</b>. On the other hand, the light emitting diode <b>36</b> is located and opposed to the optical fibers <b>91</b> and <b>92</b>. Meanwhile, as illustrated in <figref idref="DRAWINGS">FIG. 5B</figref>, an adhering member <b>93</b> is attached to the upper surface of the optical sensor unit <b>90</b> along the peripheral edge, i.e., the surface contacting the inner surface of the sliding saddle member <b>33</b>. This adhering member <b>93</b> serves to provide close contact between the optical sensor unit <b>90</b> and the sliding saddle member <b>33</b>.</p>
<p id="p-0095" num="0094"><figref idref="DRAWINGS">FIG. 6</figref> is a cross sectional view along A-A line of <figref idref="DRAWINGS">FIG. 5A</figref>. <figref idref="DRAWINGS">FIG. 7</figref> is a cross sectional view along B-B line of <figref idref="DRAWINGS">FIG. 5A</figref>. As illustrated in <figref idref="DRAWINGS">FIG. 6</figref>, the optical sensor unit <b>90</b> is closely attached to the inner surface of the sliding saddle member <b>33</b>. One ends of the optical fibers <b>91</b> and <b>92</b> are exposed to the upper surface of the optical sensor unit <b>90</b> (from the surface portion located opposed to the sliding saddle member <b>33</b>). The optical fiber <b>91</b> and the optical fiber <b>92</b> are arranged at a predetermined distance in the sliding direction. The predetermined distance is selected in order to create a certain phase difference between the pulse signal A of the phototransistor <b>34</b> and the pulse signal B of the phototransistor <b>35</b>. This point will be explained later in detail.</p>
<p id="p-0096" num="0095">On the other hand, the other ends of the optical fibers <b>91</b> and <b>92</b> are fixed respectively in the vicinity of the heads of the phototransistors <b>34</b> and <b>35</b>. By this configuration, the light rays output from the light emitting diode <b>36</b> and reflected by the sliding operation piece <b>2</b> are led respectively to the phototransistors <b>34</b> and <b>35</b> by the optical fibers <b>91</b> and <b>92</b>. The optical sensor unit <b>90</b> and the phototransistors <b>34</b> and <b>35</b> are mounted on a substrate <b>94</b>. Furthermore, the phototransistors <b>34</b> and <b>35</b> are inserted respectively into the two holes which are opened in the bottom surface of the optical sensor unit <b>90</b>. By this configuration, the phototransistors <b>34</b> and <b>35</b> are arranged in order to receive the light rays output from the optical fibers <b>91</b> and <b>92</b> but not to receive other light rays.</p>
<p id="p-0097" num="0096">On the other hand, as illustrated in <figref idref="DRAWINGS">FIG. 7</figref>, the light emitting diode <b>36</b> is mounted on an inclined surface formed in the upper portion of the optical sensor unit <b>90</b>. By this configuration, it is therefore possible to increase the amount of the incident light as illustrated with an arrow # output from the light emitting diode <b>36</b>, reflected by the sliding operation piece <b>2</b> and then received by the optical fibers <b>91</b> and <b>92</b>. Incidentally, the light emitting diode <b>36</b> serves to output infrared light. The sliding saddle member <b>33</b> serves as an infrared filter having the functionality of passing only the infrared light output from the light emitting diode <b>36</b> in order to let the phototransistors <b>34</b> and <b>35</b> detect only the infrared light.</p>
<p id="p-0098" num="0097">Next, the automatic performance of the automatic musical instrument as shown in <figref idref="DRAWINGS">FIG. 1</figref> will be explained. The operator connects the main body <b>1</b> with the television monitor <b>80</b> by the AV cable <b>60</b>. Then, the power switch <b>24</b> (refer to <figref idref="DRAWINGS">FIG. 3</figref>) is turned on (in the television mode). The operation style selection screen (not shown) is displayed on the screen <b>82</b> of the television monitor <b>80</b>, from which the operator selects the automatic performance mode by the selection keys <b>12</b><i>a </i>and <b>12</b><i>b</i>, and then presses the decision key <b>12</b><i>d</i>. Then, the music title selection screen (not shown) is displayed from which the operator selects a music title by the selection keys <b>12</b><i>a </i>and <b>12</b><i>b</i>, followed by pressing the decision key <b>12</b><i>d</i>. On the other hand, the number of the music title as selected is displayed on the display portion <b>15</b>. When the operator selects and decides a music title, the performance can be started.</p>
<p id="p-0099" num="0098"><figref idref="DRAWINGS">FIG. 8</figref> is a view showing an example of an operation guide screen as displayed on the screen <b>82</b> of <figref idref="DRAWINGS">FIG. 1</figref>. When the operator selects and decides a music title, the operation guide screen (refer to <figref idref="DRAWINGS">FIG. 8</figref>) is displayed on the screen <b>82</b>. The music title as selected by the operator is displayed in the vicinity of the upper location of this operation guide screen. In this case, music A is displayed as a music title. An indicator <b>103</b> is displayed below the music title. This indicator <b>103</b> indicates the progress of the BGM (background music). Namely, the entire length of the strip-shaped rectangle of the indicator <b>103</b> represents the entire time length of the music A. The left portion of the indicator <b>103</b> is shaded with a certain color and gradually extended with the progress of the BGM in order to indicate the current time position of the BGM as being currently played back. For this reason, as the playback of the BGM advances, the area of the indicator <b>103</b> shaded with the certain color increases and completely fills the entirety of the indicator <b>103</b> when the music A ends.</p>
<p id="p-0100" num="0099">Furthermore, the indicator <b>103</b> is overlaid with a vertical bar <b>104</b> for indicating the current operation position by the operator. Accordingly, the operator can see how much the current operation position is displaced from the appropriate operation position. Namely, since the appropriate current operation position corresponds to the leading edge (right end) of the left portion of the indicator <b>103</b> which is shaded with the certain color, the operator can see how much the current operation position is displaced from the appropriate operation position by comparing the position of this leading edge (right end) with the position of the vertical bar <b>104</b> indicating the current operation position of the operator. The term “operation position” stands for the position in the time domain relating to the entirety of the music.</p>
<p id="p-0101" num="0100">Also, musical notation marks n-<b>0</b>, . . . , n-<b>6</b>, . . . , are displayed below the indicator <b>103</b> as an operation guide. In the following description, the term “musical notation mark n” is used to generally represent the musical notation marks n-<b>0</b>, . . . , n-<b>6</b>, . . . .</p>
<p id="p-0102" num="0101">This musical notation mark “n” appears from the right end of the screen <b>82</b>, then moves to the left in synchronism with the tempo of the BGM, and finally disappears at the left end of the screen <b>82</b>. If the operator generates a trigger by operation of the sliding operation piece <b>2</b> at the right moment when this musical notation mark “n” enters a correct timing indication square <b>101</b> or passes directly above a correct timing mark <b>102</b>, then the automatic musical instrument outputs musical tones keeping pace with the tempo of the BGM.</p>
<p id="p-0103" num="0102">Also, the distance between adjacent ones of this musical notation mark “n” represents the timely distance between the corresponding notes written in the musical score of the music A as selected. Accordingly, the operator can intuitively recognize the correct timing of operating the sliding operation piece <b>2</b> by taking a look at this distance. In this situation, the timing of operating the sliding operation piece <b>2</b> means the timing of generating the trigger.</p>
<p id="p-0104" num="0103">Furthermore, a note length indication bar <b>100</b> associated with the musical notation mark “n” represents a period for which the output of a musical tone is continued. Accordingly, the operator can intuitively recognize the period of maintaining the output of the musical tone by taking a look at this note length indication bar <b>100</b>. Incidentally, the note length indication bar <b>100</b> associated with the musical notation mark n-<b>1</b> does not reach to the next musical notation mark n-<b>2</b>. This means that a rest notation exists at the end (right end) of this note length indication bar <b>100</b>.</p>
<p id="p-0105" num="0104">Furthermore, when the operator operates the sliding operation piece <b>2</b> to have the automatic musical instrument output a musical tone, the color of the musical notation mark “n” corresponding to the output musical tone and the color of the note length indication bar <b>100</b> associated with the musical notation mark “n” are changed. Therefore, the operator can intuitively recognize which musical notation mark “n” corresponding to the musical tone the automatic musical instrument is currently outputting in response to the trigger, by looking at the color change.</p>
<p id="p-0106" num="0105">Next, the trigger will be explained. As mentioned above, the operator generates the trigger by operating the sliding operation piece <b>2</b>. Musical tones are thereby output one by one in response to the generation of each trigger. The trigger is generated when the sliding direction of the sliding operation piece <b>2</b> is changed while the speed of the sliding operation piece <b>2</b> relative to the main body <b>1</b> (sliding speed) exceeds a predetermined threshold. Also, the sound volume of musical tones can be controlled in accordance with the sliding speed of the sliding operation piece <b>2</b>.</p>
<p id="p-0107" num="0106">Next, a game process performed by the automatic musical instrument of <figref idref="DRAWINGS">FIG. 1</figref> on the basis of the sliding speed of the sliding operation piece <b>2</b> will be explained. In this embodiment, a running game is explained as an example of a game on the basis of the sliding speed of the sliding operation piece <b>2</b>. When the operator selects a game mode in the mode selection screen (not shown), a game selection screen is displayed. The operator selects the running game by the selection keys <b>12</b><i>a </i>and <b>12</b><i>b</i>, and presses the decision key <b>12</b><i>d</i>. Then, the running game will be started.</p>
<p id="p-0108" num="0107"><figref idref="DRAWINGS">FIG. 9</figref> is a view showing an example of the running game screen performed by the automatic musical instrument of <figref idref="DRAWINGS">FIG. 1</figref>. As illustrated in <figref idref="DRAWINGS">FIG. 9</figref>, the running game screen displayed on the screen <b>82</b> includes a character <b>73</b>, a background <b>74</b>, a time indicating portion <b>72</b>, a current position indicating object <b>71</b>, masks <b>88</b>, and a total distance indicating bar <b>70</b>. Moving speed of the character <b>73</b> (the speed relative to the background <b>74</b>) is different depending on the sliding speed of the sliding operation piece member <b>2</b> operated by the operator. In other words, if the sliding speed is faster, the character <b>73</b> proceeds faster (the speed relative to the background <b>74</b> becomes faster) and the animation of the character <b>73</b> is performed faster. On the other hand, the sliding speed is slower, the character <b>73</b> proceeds slower (the speed relative to the background <b>74</b> becomes slower) and also the animation of the character <b>73</b> is performed slowly.</p>
<p id="p-0109" num="0108">In addition to this, musical tones constituting music are output one by one every time a trigger is generated by the sliding operation piece <b>2</b>. Therefore, if sliding operation of the sliding operation piece <b>2</b> performed by the operator is faster, the more up-tempo music is output. On the other hand, if sliding operation is slower, the more slow-tempo music is output. When music tones corresponding to all musical notes constituting the music are output, the game is over. In other words, if triggers are generated at a fast tempo, the game ends early and a time score from start to goal is short. On the other hand, if triggers are generated at a slow tempo, the game ends late and the time score is longer.</p>
<p id="p-0110" num="0109">The total distance indicating bar <b>70</b> represents a total distance which the character <b>73</b> runs in the game. The current position indicating object <b>71</b> shows a location where the character <b>73</b> currently exists and it is displayed above the total distance indicating bar <b>70</b>. More specifically, the length of the total distance indicating bar <b>70</b> is commensurate with the number of the musical notes constituting the music. The current position indicating object <b>71</b> proceeds by one each time a musical tone corresponding to one musical note is output. In addition, an elapsed time from start to current is displayed in the time indicating portion <b>72</b>.</p>
<p id="p-0111" num="0110">Next, a game process performed on the basis of the sliding time of the sliding operation piece <b>2</b> by the automatic musical instrument of <figref idref="DRAWINGS">FIG. 1</figref> will be explained. In this embodiment, a flying game will be explained as an example of the game played on the basis of the sliding time of the sliding operation piece <b>2</b>. The operator selects the flying game by the selection key <b>12</b><i>a </i>and <b>12</b><i>b</i>, and presses the decision key <b>12</b><i>d</i>. In this way, the flying game will be started.</p>
<p id="p-0112" num="0111"><figref idref="DRAWINGS">FIG. 10</figref> is a view showing an example of a start screen of the flying game performed by the automatic musical instrument of <figref idref="DRAWINGS">FIG. 1</figref>. <figref idref="DRAWINGS">FIG. 11</figref> is a view showing an example of a screen after the game starts. As illustrated in <figref idref="DRAWINGS">FIG. 10</figref>, the start screen of the flying game displayed on the screen <b>82</b> includes the character <b>73</b>, the background <b>74</b>, an input indication bar <b>75</b>, the masks <b>88</b> and a balloon object <b>76</b>. As the game starts, the character <b>73</b> starts running. Then when the character <b>73</b> reaches a predetermined position, the character <b>73</b> jumps and grabs the balloon object <b>76</b>. At the same time, the operator starts sliding the sliding operation piece <b>2</b>. The color of the input indication bar <b>75</b> starts changing with the start (drawn by hatching in <figref idref="DRAWINGS">FIG. 11</figref>).</p>
<p id="p-0113" num="0112">As long as the operator keeps sliding the sliding operation piece <b>2</b> continuously without changing the sliding direction, the character <b>73</b> keeps flying with hanging from the balloon object <b>76</b> as illustrated in <figref idref="DRAWINGS">FIG. 11</figref>. If the sliding speed of the sliding operation piece <b>2</b> falls below a certain value, it is considered as an end of the sliding operation. Consequently, the color of the input indicating bar <b>75</b> returns to the original color, and the character <b>73</b> which is hanging from the balloon object <b>76</b> starts descending with holding the balloon object <b>76</b>. When the character <b>73</b> lands, the flying distance is displayed. If the operator keeps sliding for longer time without changing the sliding direction, the flying distance becomes longer. On the other hand, if the operator keeps sliding for shorter time without changing the sliding direction, the flying distance becomes shorter.</p>
<p id="p-0114" num="0113">Next, a game process performed by the automatic musical instrument of <figref idref="DRAWINGS">FIG. 1</figref> on the basis of the sliding direction of the sliding operation piece <b>2</b> will be explained. In this embodiment, a catch game will be explained as an example of a game performed on the basis of the sliding direction. The operator selects the catch game in the game selection screen by the selection key <b>12</b><i>a </i>and <b>12</b><i>b</i>, and presses the decision key <b>12</b><i>d</i>. In this way, the catch game will be started.</p>
<p id="p-0115" num="0114"><figref idref="DRAWINGS">FIG. 12</figref> is a view showing an example of a catch game screen performed by the automatic musical instrument of <figref idref="DRAWINGS">FIG. 1</figref>. As illustrated in <figref idref="DRAWINGS">FIG. 12</figref>, the catch game screen displayed on the screen <b>82</b> includes the character <b>73</b>, the background <b>74</b>, a falling object <b>79</b>, window objects <b>77</b> and life objects <b>78</b>. As the game starts, the window objects <b>77</b> open one after another and the falling objects <b>79</b> come down one after another from the window objects <b>77</b>. When the operator slides the sliding operation piece <b>2</b> to the (+) direction of <figref idref="DRAWINGS">FIG. 2A</figref>, the character <b>73</b> moves in the (+) direction of <figref idref="DRAWINGS">FIG. 12</figref>. On the other hand, when the operator slides the sliding operation piece <b>2</b> to the (−) direction of <figref idref="DRAWINGS">FIG. 2A</figref>, the character <b>73</b> moves in the (−) direction of <figref idref="DRAWINGS">FIG. 12</figref>. The operator tries to catch the falling objects <b>79</b> before they clash into the ground by changing the moving direction of the character <b>73</b> by operating the sliding operation piece <b>2</b>. If the falling object <b>79</b> clashes into the ground, one of the life objects <b>78</b> disappears. When all life objects <b>78</b> disappear, the game is over.</p>
<p id="p-0116" num="0115">Next, the electrical construction of the main body <b>1</b> will be explained. <figref idref="DRAWINGS">FIG. 13</figref> is a view showing the electrical construction of the main body <b>1</b> as illustrated in <figref idref="DRAWINGS">FIG. 1</figref>. As illustrated in <figref idref="DRAWINGS">FIG. 15</figref>, the main body <b>1</b> includes a detection unit <b>30</b>, a key switch group <b>120</b>, the AV terminal <b>18</b>, a high speed processor <b>200</b>, an external ROM (read only memory) <b>300</b> and an external bus <b>400</b>. The key switch group <b>120</b> includes the decision key <b>12</b><i>d</i>, the cancel key <b>12</b><i>c</i>, the selection keys <b>12</b><i>a </i>and <b>12</b><i>b</i>, and the vibrato switch <b>12</b><i>e </i>as described above. The detection unit <b>30</b> includes the optical sensor unit <b>90</b>.</p>
<p id="p-0117" num="0116">The high speed processor <b>200</b> is connected to the external bus <b>400</b>. Furthermore, the external ROM <b>300</b> is connected to the external bus <b>400</b>. Accordingly, the high speed processor <b>200</b> can access the external ROM <b>300</b> through the external bus <b>400</b> to read and execute the control program <b>301</b> as stored in the external ROM <b>300</b>, and read and process the image data <b>30</b> and the music data <b>307</b> as stored in the external ROM <b>300</b>.</p>
<p id="p-0118" num="0117">Also, the high speed processor <b>200</b> can access the external ROM <b>91</b> contained in the memory cartridge <b>29</b> as inserted to the cartridge socket <b>23</b> through the external bus <b>400</b> to read and execute the control program <b>301</b> as stored in the external ROM <b>91</b>, and read and process the image data <b>30</b> and the music data <b>307</b> as stored in the external ROM <b>91</b>.</p>
<p id="p-0119" num="0118">Furthermore, The high speed processor <b>200</b> serves to calculate the sliding direction, the sliding speed and the sliding time of the sliding operation piece <b>2</b> on the basis of the pulse signals A and B output from the phototransistors <b>34</b> and <b>35</b> of the detection unit <b>30</b> (refer to <figref idref="DRAWINGS">FIG. 6</figref>). Furthermore, the high speed processor <b>200</b> executes the process as indicated by on/off signals from the respective keys <b>12</b><i>a </i>to <b>12</b><i>e </i>of the key switch group <b>120</b>.</p>
<p id="p-0120" num="0119"><figref idref="DRAWINGS">FIG. 14</figref> is a block diagram of the high speed processor <b>200</b> of <figref idref="DRAWINGS">FIG. 13</figref>. As illustrated in <figref idref="DRAWINGS">FIG. 14</figref>, this high speed processor <b>200</b> includes a central processing unit (CPU) <b>201</b>, a graphic processor <b>202</b>, a sound processor <b>203</b>, a DMA (direct memory access) controller <b>204</b>, a first bus arbiter circuit <b>205</b>, a second bus arbiter circuit <b>206</b>, an inner memory <b>207</b>, an A/D converter (ADC: analog to digital converter) <b>208</b>, an input/output control circuit <b>209</b>, a timer circuit <b>210</b>, a DRAM (dynamic random access memory) refresh control circuit <b>211</b>, an external memory interface circuit <b>212</b>, a clock driver <b>213</b>, a PLL (phase-locked loop) circuit <b>214</b>, a low voltage detection circuit <b>215</b>, a first bus <b>218</b>, and a second bus <b>219</b>.</p>
<p id="p-0121" num="0120">The CPU <b>201</b> takes control of the entire system and performs various types of arithmetic operations in accordance with the program stored in the memory (the inner memory <b>207</b>, the external ROM <b>300</b>, or the external ROM <b>91</b>). The CPU <b>201</b> is a bus master of the first bus <b>218</b> and the second bus <b>219</b>, and can access the resources connected to the respective buses.</p>
<p id="p-0122" num="0121">The graphic processor <b>202</b> is also a bus master of the first bus <b>218</b> and the second bus <b>219</b>, and generates an image signal VD on the basis of the data as stored in the memory (the inner memory <b>207</b>, the external ROM <b>300</b> or the external ROM <b>91</b>), and output the image signal VD through the AV terminal <b>18</b>. The graphic processor <b>202</b> is controlled by the CPU <b>201</b> through the first bus <b>218</b>. Also, the graphic processor <b>202</b> has the functionality of outputting an interrupt request signal <b>220</b> to the CPU <b>201</b>.</p>
<p id="p-0123" num="0122">The sound processor <b>203</b> is also a bus master of the first bus <b>218</b> and the second bus <b>219</b>, and generates audio signals AR and AL on the basis of the data as stored in the memory (the inner memory <b>207</b>, the ROM <b>300</b> or the ROM <b>91</b>), and output the audio signals AR and AL through the AV terminal <b>18</b>. The sound processor <b>203</b> is controlled by the CPU <b>201</b> through the first bus <b>218</b>. Also, the sound processor <b>203</b> has the functionality of outputting an interrupt request signal <b>220</b> to the CPU <b>201</b>.</p>
<p id="p-0124" num="0123">The DMA controller <b>204</b> serves to transfer data from the external ROM <b>300</b> or the external ROM <b>91</b> to the inner memory <b>207</b>. Also, the DMA controller <b>204</b> has the functionality of outputting, to the CPU <b>201</b>, an interrupt request signal <b>220</b> indicative of the completion of the data transfer. The DMA controller <b>204</b> is also a bus master of the first bus <b>218</b> and the second bus <b>219</b>. The DMA controller <b>204</b> is controlled by the CPU <b>201</b> through the first bus <b>218</b>.</p>
<p id="p-0125" num="0124">The inner memory <b>207</b> may be implemented with one or any necessary combination of a mask ROM, an SRAM (static random access memory) and a DRAM in accordance with the system requirements. A battery <b>217</b> is provided if an SRAM has to be powered by the battery for maintaining the data contained therein. In the case where a DRAM is used, the so called refresh cycle is periodically performed to maintain the data contained therein.</p>
<p id="p-0126" num="0125">The first bus arbiter circuit <b>205</b> accepts a first bus use request signal from the respective bus masters of the first bus <b>218</b>, performs bus arbitration among the requests for the first bus <b>218</b>, and issue a first bus use permission signal to one of the respective bus masters. Each bus master is permitted to access the first bus <b>218</b> after receiving the first bus use permission signal. In <figref idref="DRAWINGS">FIG. 14</figref>, the first bus use request signal and the first bus use permission signal are illustrated as first bus arbitration signals <b>222</b>.</p>
<p id="p-0127" num="0126">The second bus arbiter circuit <b>206</b> accepts a second bus use request signal from the respective bus masters of the second bus <b>219</b>, performs bus arbitration among the requests for the second bus <b>219</b>, and issue a second bus use permission signal to one of the respective bus masters. Each bus master is permitted to access the second bus <b>219</b> after receiving the second bus use permission signal. In <figref idref="DRAWINGS">FIG. 14</figref>, the second bus use request signal and the second bus use permission signal are illustrated as second bus arbitration signals <b>223</b>.</p>
<p id="p-0128" num="0127">The input/output control circuit <b>209</b> serves to perform input and output operations of input/output signals to enable the communication with external input/output device(s) and/or external semiconductor device(s). The read and write operations of input/output signals are performed by the CPU <b>201</b> through the first bus <b>218</b>. Also, the input/output control circuit <b>209</b> has the functionality of outputting an interrupt request signal <b>220</b> to the CPU <b>201</b>.</p>
<p id="p-0129" num="0128">The pulse signals A and B from the above detection unit <b>30</b> and the on/off signals from the respective keys <b>12</b><i>a </i>to <b>12</b><i>e </i>of the key switch group <b>120</b> are input to the input/output control circuit <b>209</b>.</p>
<p id="p-0130" num="0129">The timer circuit <b>210</b> has the functionality of periodically outputting an interrupt request signal <b>220</b> to the CPU <b>201</b> with a time interval as preset. The setting of the timer circuit <b>210</b> such as the time interval is performed by the CPU <b>201</b> through the first bus <b>218</b>.</p>
<p id="p-0131" num="0130">The ADC <b>208</b> converts analog input signals into digital signals. The digital signals are read by the CPU <b>201</b> through the first bus <b>218</b>. Also, the ADC <b>208</b> has the functionality of outputting an interrupt request signal <b>220</b> to the CPU <b>201</b>.</p>
<p id="p-0132" num="0131">The PLL circuit <b>214</b> generates a high frequency clock signal by multiplication of the sinusoidal signal as obtained from a crystal oscillator <b>216</b>.</p>
<p id="p-0133" num="0132">The clock driver <b>213</b> amplifies the high frequency clock signal as received from the PLL circuit <b>214</b> to a sufficient signal level to supply the respective blocks with the clock signal <b>225</b>.</p>
<p id="p-0134" num="0133">The low voltage detection circuit <b>215</b> monitors the power potential Vcc and issues the reset signal <b>226</b> of the PLL circuit <b>214</b> and the reset signal <b>227</b> to the other circuit elements of the entire system when the power potential Vcc falls below a certain voltage. Also, in the case where the inner memory <b>207</b> is implemented with an SRAM requiring the power supply from the battery <b>217</b> for maintaining data, the low voltage detection circuit <b>215</b> serves to issue a battery backup control signal <b>224</b> when the power potential Vcc falls below the certain voltage.</p>
<p id="p-0135" num="0134">The external memory interface circuit <b>212</b> has the functionality of connecting the second bus <b>219</b> to the external bus <b>400</b> and issuing a bus cycle completion signal <b>228</b> of the second bus <b>219</b> to control the length of the bus cycle of the second bus.</p>
<p id="p-0136" num="0135">The DRAM refresh cycle control circuit <b>211</b> periodically and unconditionally gets the ownership of the first bus <b>218</b> to perform the refresh cycle of the DRAM at a certain interval. Needless to say, the DRAM refresh cycle control circuit <b>211</b> is provided in the case where the inner memory <b>207</b> includes a DRAM.</p>
<p id="p-0137" num="0136">In what follows, a method to obtain the sliding speed and the sliding direction of the sliding operation piece <b>2</b> will be discussed in detail.</p>
<p id="p-0138" num="0137"><figref idref="DRAWINGS">FIG. 15</figref> is a schematic diagram showing the relationship between the reflecting pattern <b>43</b> of the sliding operation piece <b>2</b> and the locations of the optical fibers <b>91</b> and <b>92</b> of the optical sensor unit <b>90</b> of <figref idref="DRAWINGS">FIG. 5A</figref>. As illustrated in <figref idref="DRAWINGS">FIG. 15</figref>, with reference to the reflecting pattern <b>43</b> of the sliding operation piece <b>2</b>, “L” is the sum of the width of the light reflecting region <b>45</b> and the width of the light absorbing region <b>44</b>. In this case, the exposed end of the optical fiber <b>91</b> is located “L/4” apart from the exposed end of the optical fiber <b>92</b>. Here, the exposed end is the tip end of the optical fiber <b>91</b> or <b>92</b> and exposed to the inner surface of the sliding saddle member <b>33</b>.</p>
<p id="p-0139" num="0138">The phototransistors <b>34</b> and <b>35</b> receive, through the optical fibers <b>91</b> and <b>92</b>, the infrared light output from the light emitting diode <b>36</b> and reflected by the reflecting pattern <b>43</b>. Since the reflecting pattern <b>43</b> comprises the light reflecting regions <b>45</b> and the light absorbing regions <b>44</b> alternately arranged, the phototransistors <b>34</b> and <b>35</b> intermittently receive the infrared light when the sliding operation piece <b>2</b> is moved. Accordingly, when the sliding operation piece <b>2</b> is operated, the phototransistors <b>34</b> and <b>35</b> output the pulse signals A and B having a frequency in proportion to the sliding speed of the sliding operation piece <b>2</b>. Namely, as the sliding speed of the sliding operation piece <b>2</b> increases, the frequency of the pulse signals A and B output from the phototransistors <b>34</b> and <b>35</b> increases. Conversely, as the sliding speed of the sliding operation piece <b>2</b> decreases, the frequency of the pulse signals output from the phototransistors <b>34</b> and <b>35</b> decreases.</p>
<p id="p-0140" num="0139">Since the optical fiber <b>91</b> for directing infrared light to the phototransistor <b>34</b> is located “L/4” apart from the optical fiber <b>92</b> for directing infrared light to the phototransistor <b>35</b>, the phase difference between the pulse signal A output from the phototransistor <b>34</b> and the pulse signal B output from the phototransistor <b>35</b> is (90 degrees) or (−90 degrees) depending upon the sliding direction of the sliding operation piece <b>2</b>. This will be explained in detail.</p>
<p id="p-0141" num="0140"><figref idref="DRAWINGS">FIG. 16A</figref> is a view showing pulse signals A and B output from the phototransistor <b>34</b> and <b>35</b> when the sliding operation piece <b>2</b> is slid in (+) direction of <figref idref="DRAWINGS">FIG. 2A</figref>. <figref idref="DRAWINGS">FIG. 16B</figref> is a view showing pulse signals A and B output from the phototransistor <b>34</b> and <b>35</b> when the sliding operation piece <b>2</b> is slid in (−) direction of <figref idref="DRAWINGS">FIG. 2A</figref>. Incidentally, for the sake of clarity in explanation, <figref idref="DRAWINGS">FIG. 16A</figref> and <figref idref="DRAWINGS">FIG. 16B</figref> are illustrated on the assumption that the sliding speed of the sliding operation piece <b>2</b> is constant.</p>
<p id="p-0142" num="0141">As illustrated in <figref idref="DRAWINGS">FIG. 16A</figref> and <figref idref="DRAWINGS">FIG. 16B</figref>, the phase difference between the pulse signal A as output from the phototransistor <b>34</b> and the pulse signal B as output from the phototransistor <b>35</b> is (90 degrees) or (−90 degrees). The state transition of the waveforms of the pulse signals A and B in combination is different between the-case where the sliding operation piece <b>2</b> is moved in (+) direction and the case where the sliding operation piece <b>2</b> is moved in (−) direction. This point will be explained in detail.</p>
<p id="p-0143" num="0142"><figref idref="DRAWINGS">FIG. 17</figref> is a schematic diagram showing the state transition of the pulse signals A and B as output from the phototransistors <b>34</b> and <b>35</b>. When the sliding operation piece <b>2</b> is moved in (+) direction of <figref idref="DRAWINGS">FIG. 2A</figref> (corresponding to <figref idref="DRAWINGS">FIG. 16A</figref>), the state transition of the pulse signals A and B turns in the clockwise direction (the (+) transition direction) as illustrated in <figref idref="DRAWINGS">FIG. 17</figref>. Conversely, when the sliding operation piece <b>2</b> is moved in (−) direction of <figref idref="DRAWINGS">FIG. 2A</figref> (corresponding to <figref idref="DRAWINGS">FIG. 16B</figref>), the state transition of the pulse signals A and B turns in the counter clockwise direction (the (−) transition direction) as illustrated in <figref idref="DRAWINGS">FIG. 17</figref>.</p>
<p id="p-0144" num="0143">It is possible to determine the sliding direction of the sliding operation piece <b>2</b> by detecting such a state transition. Namely, the state transition of the pulse signals A and B turning in the clockwise direction means that the sliding operation piece <b>2</b> is moved in (+) direction of <figref idref="DRAWINGS">FIG. 2A</figref>, while the state transition of the pulse signals A and B turning in the counter clockwise direction means that the sliding operation piece <b>2</b> is moved in (−) direction of <figref idref="DRAWINGS">FIG. 2A</figref>. While it is possible to perform the transition detection by hardware, this embodiment of the present invention makes use of software instead. This will be described later.</p>
<p id="p-0145" num="0144"><figref idref="DRAWINGS">FIG. 18</figref> is a circuit diagram showing the detection unit <b>30</b> provided in the main body <b>1</b>. As illustrated in <figref idref="DRAWINGS">FIG. 18</figref>, this detection unit <b>30</b> includes the light emitting diode <b>36</b>, a resistance element <b>57</b> and sensor circuits <b>252</b> and <b>255</b>. The sensor circuit <b>252</b> includes the above phototransistor <b>34</b>, an electrolytic capacitor <b>55</b>, an amplifier <b>254</b> and a hysteresis circuit <b>253</b>. The sensor circuit <b>255</b> includes the above phototransistor <b>35</b>, an electrolytic capacitor <b>55</b>, an amplifier <b>254</b> and a hysteresis circuit <b>253</b>. The amplifier <b>254</b> includes resistor elements <b>51</b> and <b>56</b>, a capacitor <b>38</b>, and an inverter <b>53</b>. The hysteresis circuit <b>253</b> includes resistor elements <b>37</b> and <b>54</b>, and inverters <b>250</b> and <b>251</b>.</p>
<p id="p-0146" num="0145">The resistor element <b>57</b> and the light emitting diode <b>36</b> are connected between an electric power supply Vcc and a ground GND in series. The phototransistor <b>34</b> and the resistor element <b>52</b> are connected between the electric power supply Vcc and the ground GND in series. The resistor element <b>56</b> and the electrolytic capacitor <b>55</b> are connected in series between the input terminal of the inverter <b>53</b> and the connecting point between the phototransistor <b>34</b> and the resistor element <b>52</b>. The capacitor <b>38</b> and the resistor element <b>51</b> are connected in parallel between the input terminal and the output terminal of the inverter <b>53</b>. The resistor element <b>54</b> is connected to the output terminal of the inverter <b>53</b> at one terminal and connected to the input terminal of the inverter <b>251</b> at the other terminal. The inverter <b>251</b> is connected to the input terminal of the inverter <b>250</b> at the output terminal. The resistor element <b>37</b> is connected between the input terminal of the inverter <b>251</b> and the output terminal of the inverter <b>250</b>. The sensor circuit <b>255</b> has the same configuration as the sensor circuit <b>252</b>, and therefore no redundant description is repeated.</p>
<p id="p-0147" num="0146">The amplifier <b>254</b> is a negative feedback amplifier which amplifies the electrical signal of the phototransistor <b>34</b>. Also, this amplifier <b>254</b> serves also as a lowpass filter which remove high frequency components. The hysteresis circuit <b>253</b> is a positive feedback circuit which forms a dead band defined by the ratio between the resistor element <b>37</b> and the resistor element <b>54</b> while preventing the output from being inverted within a certain voltage range. Meanwhile, the operations of the amplifier <b>254</b> and the hysteresis circuit <b>253</b> of the sensor circuit <b>255</b> are same as those of the sensor circuit <b>252</b>, and therefore no redundant description is repeated.</p>
<p id="p-0148" num="0147"><figref idref="DRAWINGS">FIG. 19</figref> is a schematic representation of a program and data stored in the external ROM <b>300</b> of <figref idref="DRAWINGS">FIG. 13</figref>. As illustrated in <figref idref="DRAWINGS">FIG. 19</figref>, the external ROM <b>300</b> is used to store a program <b>301</b>, image data <b>304</b>, and music data <b>307</b>. The image data <b>304</b> includes image object data <b>305</b> and background image data <b>306</b>. The music data <b>307</b> includes musical score data <b>308</b> and sound source data <b>309</b>.</p>
<p id="p-0149" num="0148">Incidentally, it is also possible to store the program <b>301</b>, the image data <b>304</b> and the music data <b>307</b> in the external ROM <b>91</b> of the memory cartridge <b>29</b> instead of the external ROM <b>300</b>, and make use of the program <b>301</b> and data <b>304</b> and <b>307</b> by inserting this memory cartridge <b>29</b> into the socket <b>23</b>.</p>
<p id="p-0150" num="0149">The high speed processor <b>200</b> can read and execute the program <b>301</b> as stored in the external ROM <b>300</b> or the external ROM <b>91</b>, and generate an image signal “VD” on the basis of the image data <b>304</b> and audio signals “AL” and “AR” on the basis of the music data <b>307</b>.</p>
<p id="p-0151" num="0150">As a result, the background image <b>74</b> and the image objects such as the musical notes “n” and the character <b>73</b> are displayed on the screen <b>82</b> by the high speed processor <b>200</b> as illustrated in <figref idref="DRAWINGS">FIG. 8</figref> to <figref idref="DRAWINGS">FIG. 12</figref>. For example, the screen <b>82</b> consists of 256 (width)×224 (height) pixels. An image object consists of one or more sprites. One sprite is a rectangular pixel set. For example, a sprite consists of 8 (width)×8 (height) pixels or 16 (width)×16 (height) pixels. Incidentally, a sprite can be arranged in an arbitrary position of the screen <b>82</b>.</p>
<p id="p-0152" num="0151"><figref idref="DRAWINGS">FIG. 20</figref> is a view for explaining sprites constituting an image object.</p>
<p id="p-0153" num="0152">For example, as shown in <figref idref="DRAWINGS">FIG. 20</figref>, it is assumed that a certain image object is composed of four sprites sp<b>1</b> to sp<b>4</b>. The display position of the image object can be designated by designating the horizontal coordinate x and the vertical coordinate y of the center of the upper left sprite sp<b>1</b>. Since the size of the sprites sp<b>1</b> to sp<b>4</b> is known, it is possible to calculate the display positions of the respective sprites sp<b>2</b> to sp<b>4</b> with ease.</p>
<p id="p-0154" num="0153">The image object data <b>305</b> as stored in the ROM <b>300</b> contains the size and the pixel pattern data of each of the sprites constituting each object, and the size, the depth value, the color palette information, the vertical coordinate x and the vertical coordinate y of each object.</p>
<p id="p-0155" num="0154">The depth value indicates the depth position of the pixels, and if a plurality of pixels overlap each other only the pixel having the largest depth value is displayed. The pixel pattern data designates the color of each pixel constituting a sprite. The color palette information designates a color palette. A color palette consists of a plurality of color information entries. For example, if the color palette as designated by the color palette information contains 16 colors, the color used for displaying each pixel is designated from among the 16 colors in accordance with the pixel pattern data.</p>
<p id="p-0156" num="0155">Next, the scrolling the background <b>74</b> will be explained. First, a background screen will be explained. <figref idref="DRAWINGS">FIG. 21</figref> is a view for explaining the background screen <b>302</b> displayed on the screen <b>82</b> of the television monitor <b>80</b> of <figref idref="DRAWINGS">FIG. 1</figref>. As illustrated in <figref idref="DRAWINGS">FIG. 21</figref>, the background screen <b>320</b> is formed by 32×32 blocks “0” to “1023”. For example, each block “0” to “1023” is a square element consisting of 8×8 pixels. An array PA[<b>0</b>] to PA[<b>1023</b>] and an array CA[<b>0</b>] to CA [<b>1023</b>] corresponding to the blocks “0” to “1023” are provided. The blocks “0” to “1023” are sometimes collectively called “block(s)”, the array PA[<b>0</b>] to PA[<b>1023</b>] are sometimes collectively called “array PA”, and the array CA[<b>0</b>] to CA [<b>1023</b>] are sometimes collectively called “array CA”.</p>
<p id="p-0157" num="0156">Storage location information of pixel pattern data of each block is assigned to corresponding array PA. Incidentally, color palette information and a depth value of each block are assigned to corresponding array CA. The meanings of the pixel pattern data, the color palette information and the depth value are same as the ones for the sprite.</p>
<p id="p-0158" num="0157"><figref idref="DRAWINGS">FIG. 22A</figref> is a view for explaining the background screen <b>302</b> before scrolled. <figref idref="DRAWINGS">FIG. 22B</figref> is a view for explaining the background screen <b>302</b> after scrolled. As illustrated in <figref idref="DRAWINGS">FIG. 22A</figref>, since the size of the screen <b>82</b> is 256 pixels(width)×224 pixels(height), the area of 256 pixels×224 pixels of the background screen <b>302</b> is displayed on the screen <b>82</b>. It is assumed that the background screen <b>302</b> is scrolled leftwards so as to move the center of the background screen <b>302</b> for “k” pixels on the screen <b>82</b>. As a result, since the width of the background screen <b>302</b> is same as the width of the screen <b>82</b>, a region (a shaded area) of the background screen <b>302</b> which has moved outside of the screen <b>82</b> is displayed on the right side of the screen <b>82</b> as shown in <figref idref="DRAWINGS">FIG. 22B</figref>. In other words, in case where the background screen <b>302</b> is scrolled horizontally, it is considered conceptually that the plurality of same background screens <b>302</b> are lined up sideways.</p>
<p id="p-0159" num="0158">For example, it is assumed that the region (the shaded area) of the background screen <b>302</b> which has moved outside of the screen <b>82</b> consists of the blocks “64”, “96”, . . . , “896”, “928”. The image designated by the array PA[<b>64</b>], . . . , PA[<b>928</b>] and CA[<b>64</b>], . . . , CA[<b>928</b>] corresponding to those blocks is displayed on the right side of the screen <b>82</b>. Therefore, in order that the background successively appears by scrolling the background screen <b>302</b> to the left, data assigned to the arrays PA and CA corresponding to the blocks in the region (shaded area) of the background screen <b>302</b> which has moved outside of the screen <b>82</b> needs to be updated. As a result, the image indicated by the updated arrays PA and CA is displayed on the right side of the screen <b>82</b>.</p>
<p id="p-0160" num="0159">In order to display the background <b>74</b> successively and smoothly, data stored in relevant arrays PA and CA needs to be updated before the region corresponding to the relevant arrays PA and CA is displayed on the right side of the screen <b>82</b>. Therefore, since the data stored in the relevant arrays PA and CA needs to be updated while the region corresponding to the relevant arrays PA and CA is still being displayed on the left side of the screen <b>82</b>, display becomes discontinuous on the left side of the screen <b>82</b>. However, as shown in <figref idref="DRAWINGS">FIG. 9</figref> to <figref idref="DRAWINGS">FIG. 11</figref>, this shortcoming can be avoided by adding the mask <b>88</b> on the left side of the screen <b>82</b>. Incidentally, in this embodiment, the background screen <b>302</b> is not scrolled to the right. However, the mask <b>88</b> is also provided on the right side for balance.</p>
<p id="p-0161" num="0160">In this way, the background <b>74</b> is scrolled by scrolling the background screen <b>302</b>. Incidentally, the background image data <b>306</b> to display the background <b>74</b> is stored in the external ROM <b>300</b> or the external ROM <b>91</b>. More specifically, the background image data <b>306</b> includes pixel pattern data of each block constituting the background screen <b>302</b> and other necessary information to generate background <b>74</b>.</p>
<p id="p-0162" num="0161">Next, the process (the generating process of an image signal “VD”) performed by the graphic processor <b>202</b> will be explained in detail. <figref idref="DRAWINGS">FIG. 23</figref> is a block diagram of the graphic processor <b>202</b> of <figref idref="DRAWINGS">FIG. 14</figref>. As illustrated in <figref idref="DRAWINGS">FIG. 23</figref>, the graphic processor <b>202</b> includes a control circuit <b>450</b>, a sprite memory <b>451</b>, a pixel buffer <b>452</b> and a color palette <b>453</b>.</p>
<p id="p-0163" num="0162">For example, the color palette <b>453</b> consists of sixteen color palettes, and each color palettes contains sixteen color information items (sixteen colors). The CPU <b>201</b> writes the horizontal coordinate, the vertical coordinate, the depth value, the size, the color palette information and the storage location information of the pixel pattern data of the sprite to be displayed to the sprite memory <b>451</b> of the graphic processor <b>202</b> during the vertical blanking period.</p>
<p id="p-0164" num="0163">Then, the control circuit <b>450</b> writes the pixel pattern data and the depth value of the sprite to the pixel buffer <b>452</b> in accordance with the information stored in the sprite memory <b>451</b>. For this purpose, the pixel pattern data is read out from the external ROM <b>300</b> or the external ROM <b>91</b> by the control circuit <b>450</b> with reference to the storage location information of the pixel pattern data stored in the sprite memory <b>451</b>.</p>
<p id="p-0165" num="0164">The control circuit <b>450</b> accesses the inner memory <b>207</b>. Then, the control circuit <b>450</b> reads the pixel pattern data of the respective blocks constituting the background screen <b>302</b> from the external ROM <b>300</b> or the external ROM <b>91</b> with reference to the array PA while reading information assigned to the array CA. Then, the control circuit <b>450</b> writes the pixel pattern data and the depth value of the background screen <b>302</b> to the pixel buffer <b>452</b>.</p>
<p id="p-0166" num="0165">However, if a plurality of pixels overlap each other, the control circuit <b>450</b> writes only the pixel pattern data and the depth value of the sprite or the background screen <b>302</b> having the largest depth value to the pixel buffer <b>452</b>.</p>
<p id="p-0167" num="0166">In this case, the pixel buffer <b>452</b> is composed of a plurality of pixel buffer elements in a number smaller than 256 which is the number of the pixels constituting one line of the image (256×224 pixels) displayed on the screen <b>82</b>. This pixel buffer element stores the depth value and the pixel pattern data of one pixel. Meanwhile, the depth value and the pixel pattern data of one pixel are generally referred to as pixel information as a whole.</p>
<p id="p-0168" num="0167">More specifically speaking, the control circuit <b>450</b> sequentially stores the pixel information for each pixel in the pixel buffer <b>452</b> functioning as an FIFO ring buffer with indexing that wraps around to the beginning of the buffer so that the oldest data is overwritten by the latest data. In other words, when the scanning point is shifted, the control circuit <b>450</b> treats the tail of the storage location as the head of the storage location by virtually circulating the pixel buffer <b>452</b> as a ring buffer.</p>
<p id="p-0169" num="0168">The control circuit <b>450</b> reads the pixel information from the pixel buffer <b>452</b> (by scanning the buffer), acquires the color information (the hue information, the saturation information and the brightness information) from the color palette <b>453</b> with reference to the pixel pattern data of the pixel information as read, and generates composite signal which are then output as the image signal “VD”.</p>
<p id="p-0170" num="0169">Next, the process (generating process of audio signals AL and AR) performed by the sound processor <b>203</b> will be explained. <figref idref="DRAWINGS">FIG. 24</figref> is a block diagram showing the sound processor <b>203</b> of <figref idref="DRAWINGS">FIG. 14</figref>. As illustrated in <figref idref="DRAWINGS">FIG. 24</figref>, the sound processor <b>203</b> includes a control circuit <b>270</b>, a DAC block <b>271</b> and a local memory <b>272</b>.</p>
<p id="p-0171" num="0170"><figref idref="DRAWINGS">FIG. 25</figref> is a block diagram showing the DAC block <b>271</b> of <figref idref="DRAWINGS">FIG. 24</figref>. As illustrated in <figref idref="DRAWINGS">FIG. 25</figref>, the DAC block <b>271</b> includes a main volume DAC (MV DAC) <b>275</b>, M channel blocks (M is a positive integer) <b>283</b>, <b>283</b>′, . . . , and mixer circuits <b>281</b> and <b>282</b>. In this case, if each of the channel blocks <b>283</b>, <b>283</b>′, . . . is capable of processing signals of N channels (N is two or more integer), the DAC block <b>271</b> of <figref idref="DRAWINGS">FIG. 43</figref> can handle M×N channels. For example, if M=4 and N=4, it is possible to handle 16 channels. Each of the channel blocks <b>283</b>, <b>283</b>′, . . . , includes a channel volume DAC (CV DAC) <b>276</b>, an envelope (L) DAC (EVL DAC) <b>277</b>, an envelope (R) DAC (EVR DAC) <b>279</b>, a waveform DAC (WV DAC) <b>278</b>, and a waveform DAC (WV DAC) <b>280</b>. In the following description, the term “channel blocks 2830” is used to generally represent the channel blocks <b>283</b>, <b>283</b>′, . . . .</p>
<p id="p-0172" num="0171">The MV DAC <b>275</b> receives main volume data MV from the control circuit <b>203</b> for controlling the master volume of audio signals. The MV DAC <b>275</b> converts the input main volume data MV into an analog signal, which is then output to the CV DACs <b>276</b>.</p>
<p id="p-0173" num="0172">The CV DACs <b>276</b> of the channel blocks <b>283</b>, <b>283</b>′, . . . receive channel volume data CV, CV′, . . . , from the control circuit <b>270</b>. Meanwhile, each of the channel volume data CV, CV′, . . . , is prepared by time division multiplexing channel volume data in N channels (N is two or more integer). The channel volume data is the data used to control the volume of the corresponding channel. In the following description, the term “channel volume data CV0” is used to generally represent the channel volume data CV, CV′, . . . . Incidentally, the channel volume data CV<b>0</b> is a digital signal. The CV DAC <b>276</b> multiplies the channel volume data CV<b>0</b> by the conversion signal (an analog signal) input from the MV DAC <b>275</b>, and outputs the result of the multiplication (an analog signal) to the EVL DAC <b>277</b> and the EVR DAC <b>279</b>. Incidentally, the channel volume data is the data which is read from the inner memory <b>207</b> and stored in the local memory <b>272</b> by the control circuit <b>270</b>.</p>
<p id="p-0174" num="0173">The EVL DACs <b>277</b> of the channel blocks <b>283</b>, <b>283</b>′, . . . receives envelope data EVL, EVL′, . . . , from the control circuit <b>270</b>. Each of the envelope data EVL, EVL′, . . . , is prepared by time division multiplexing envelope data in N channels. The envelope data is the data used to control the envelope of the left channel of the corresponding channel. In the following description, the term “envelope data EVL0” is used to generally represent the envelope data EVL, EVL′, . . . . Incidentally, the envelope data EVL<b>0</b> is a digital signal. The EVL DAC <b>277</b> multiplies the envelope data EVL<b>0</b> by the conversion signal (an analog signal) input from the CV DAC <b>276</b>, and outputs the result of the multiplication (an analog signal) to the WV DAC <b>278</b>.</p>
<p id="p-0175" num="0174">Incidentally, the envelope data is the data which is read from the inner memory <b>207</b> and stored in the local memory <b>272</b> by the control circuit <b>270</b>. Accordingly, the control circuit <b>270</b> sequentially reads the envelope data from the local memory <b>272</b> while incrementing the address pointer on the basis of the envelope pitch control information, then multiplexes the envelope data and outputs the multiplexed data to the DAC block <b>271</b>. Meanwhile, the sound source data <b>309</b> includes the envelope data.</p>
<p id="p-0176" num="0175">The WV DACs <b>278</b> of the channel blocks <b>283</b>, <b>283</b>′, . . . receives the waveform data WV, WV′, . . . from the control circuit <b>270</b>. Each of the waveform data WV, WV′, . . . , is prepared by time division multiplexing waveform data in N channels. In the following description, the term “waveform data WV0” is used to generally represent the waveform data WV, WV′, . . . . Incidentally, the waveform data WV<b>0</b> is a digital signal. The WV DAC <b>278</b> multiplies the waveform data WV<b>0</b> by the conversion signal (an analog signal) input from the EVL DAC <b>277</b>, and outputs the result of the multiplication (an analog signal) to the mixer circuit <b>281</b>. The result of the multiplication is an analog audio signal.</p>
<p id="p-0177" num="0176">Incidentally, the waveform data is the data read from the external ROM <b>300</b> or the external ROM <b>91</b> by the control circuit <b>270</b>. In other words, the control circuit <b>270</b> reads the waveform data from the ROM <b>300</b> or ROM <b>91</b> with reference to the initial address of the waveform data stored in the local memory <b>272</b>, and stores the waveform data in the local memory <b>272</b>.</p>
<p id="p-0178" num="0177">Then, the control circuit <b>270</b> sequentially reads the waveform data from the local memory <b>272</b> while incrementing the address pointer on the basis of the waveform pitch control information, then multiplexes the waveform data and outputs the multiplexed data to the WV DAC <b>278</b>. Meanwhile, the sound source data <b>309</b> includes the waveform data.</p>
<p id="p-0179" num="0178">The mixer circuit <b>281</b> mixes the analog audio signals output respectively from the channel blocks <b>283</b>, <b>283</b>′, . . . , and outputs the mixed signals to the left channel as the audio signal AL.</p>
<p id="p-0180" num="0179">In the same manner as the left channel audio signal AL is generated, a right channel audio signal AR is generated by the EVR DAC <b>279</b>, the WV DAC <b>280</b> and the mixer circuit <b>282</b>.</p>
<p id="p-0181" num="0180">At this time, the pitch control information will be explained. The pitch control information is used to perform the pitch conversion by changing the frequency of reading the waveform data and the envelope data. Namely, the sound processor <b>203</b> periodically reads the pitch control information for waveform data at a certain interval and accumulates the pitch control information for waveform data. Also, the sound processor <b>203</b> periodically reads the pitch control information for envelope data at a certain interval and accumulates the pitch control information for envelope data. The sound processor <b>203</b> processes the accumulation results, and then makes use of the result of processing as the address pointer to waveform data and the address pointer to envelope data respectively. Accordingly, if a large value is set as pitch control information, the address pointer is quickly incremented by the large value to increase the frequency. Conversely, if a small value is set as pitch control information, the address pointer is slowly incremented by the small value to decrease the frequency. In this way, the sound processor <b>203</b> performs the pitch conversion of waveform data and envelope data.</p>
<p id="p-0182" num="0181">Next, the entire operation of the automatic musical instrument of <figref idref="DRAWINGS">FIG. 1</figref> will be explained with reference to the flowchart. A game process performed on the basis of the sliding speed of the sliding operation piece <b>2</b> (the running game of <figref idref="DRAWINGS">FIG. 9</figref>) will be explained.</p>
<p id="p-0183" num="0182"><figref idref="DRAWINGS">FIG. 26</figref> is a flowchart showing the running game process performed by the automatic musical instrument of <figref idref="DRAWINGS">FIG. 1</figref>. As illustrated in <figref idref="DRAWINGS">FIG. 26</figref>, the CPU <b>201</b> initializes the system in step S<b>1</b>. In step S<b>2</b>, the CPU <b>201</b> checks whether or not music is finished. If the music is finished, the CPU finishes the process, otherwise proceeds to step S<b>3</b>.</p>
<p id="p-0184" num="0183">In step S<b>3</b>, the CPU <b>201</b> judges whether or not the sliding operation performed by the operator satisfies the trigger generating requirement. In step S<b>4</b>, the CPU <b>201</b> controls location of the character <b>73</b> on the basis of the sliding speed of the sliding operation piece <b>2</b>. In step S<b>5</b>, the CPU <b>201</b> controls animation of the character <b>73</b> on the basis of the sliding speed of the sliding operation piece <b>2</b>. In step S<b>6</b>, the CPU <b>201</b> controls location of the current position indicating object <b>71</b> on the basis of the trigger in response to the sliding operation of the sliding operation piece <b>2</b>. In step S<b>7</b>, the CPU <b>201</b> calculates current elapsed time for the character <b>73</b>.</p>
<p id="p-0185" num="0184">In step S<b>8</b>, the CPU <b>201</b> determines whether or not the CPU <b>201</b> waits for the video system synchronous interrupt. If the CPU <b>201</b> waits for the video system synchronous interrupt (there is no interrupt responsive to the video system synchronous signal), the CPU <b>201</b> repeats the same step S<b>8</b>. Conversely, if the CPU <b>201</b> gets out of the state of waiting for the video system synchronous interrupt (there is interrupt responsive to the video system synchronous signal), the process proceeds to step S<b>9</b>. In step S<b>9</b>, the graphic processor <b>202</b> updates the displayed image on the television monitor <b>80</b> as instructed by the CPU <b>201</b>. In step S<b>10</b>, the CPU <b>201</b> sets necessary information for the sound processor <b>203</b> to generate the audio signals AL and AR to the inner memory <b>207</b>. The sound processor <b>203</b> generates the audio signals AL and AR on the basis of the information set to the inner memory <b>207</b>. As has been discussed above, the displayed image updating process in step S<b>9</b> and the audio process in step S<b>10</b> are executed in synchronization with the video system synchronous signal. A video system synchronous interrupt is generated each frame.</p>
<p id="p-0186" num="0185">The pulse count process in step S<b>11</b> is performed by the CPU <b>201</b> every time the timer circuit <b>210</b> issues an interrupt request signal. The pulse count process is a process of counting the state transition of the pulse signals A and B as output from the phototransistors <b>34</b> and <b>35</b> (refer to <figref idref="DRAWINGS">FIG. 18</figref>).</p>
<p id="p-0187" num="0186"><figref idref="DRAWINGS">FIG. 27</figref> is a flowchart showing the process flow of the initial setting process in step S<b>1</b> of <figref idref="DRAWINGS">FIG. 26</figref>. As illustrated in <figref idref="DRAWINGS">FIG. 27</figref>, the CPU <b>201</b> initializes a musical score data pointer in step S<b>20</b>. The musical score data pointer is a pointer pointing the location to be accessed for reading the musical score data <b>308</b>. In step S<b>21</b>, the CPU <b>201</b> sets a trigger counter “Ct” to “0”. The trigger counter “Ct” counts a number of times generating triggers. In step S<b>22</b>, the CPU <b>201</b> sets a release counter “Cr” to “0”. The release counter “Cr” counts a number of times the sliding speed successively becomes “0”. In step S<b>23</b>, the CPU <b>201</b> sets a velocity counter “Cv” to “0”. The velocity counter “Cv” counts a number of times the state of the pulse signal A and B output from the phototransistor <b>34</b> and <b>35</b> transits. In step S<b>24</b>, the CPU <b>201</b> initializes various flags. In step S<b>25</b>, the CPU <b>201</b> sets the timer circuit <b>210</b> as the source of generating the interrupt request signal for executing the pulse count process in step S<b>11</b>. In this case, the timer circuit <b>210</b> is set in order that the interrupt request signal is issued with a time interval which is no longer than the shortest envisioned high level period or the shortest envisioned low level period of the pulse signal A of the phototransistor <b>34</b> or the pulse signal B of the phototransistor <b>35</b>.</p>
<p id="p-0188" num="0187"><figref idref="DRAWINGS">FIG. 28</figref> is a flowchart showing the process flow of the pulse count process in step S<b>11</b> of <figref idref="DRAWINGS">FIG. 26</figref>. As illustrated in <figref idref="DRAWINGS">FIG. 28</figref>, the CPU <b>201</b> reads the values of the input/output ports IO<b>0</b> and IO<b>1</b> through the input/output control circuit <b>209</b> in step S<b>30</b>. The pulse signal A from the phototransistor <b>34</b> is input to the input/output port IO<b>0</b>. The pulse signal B from the phototransistor <b>35</b> is input to the input/output port IO<b>1</b>.</p>
<p id="p-0189" num="0188">In step S<b>31</b>, if the value of the input/output port IO<b>0</b> is high level and at the same time the value of the input/output port IO<b>1</b> is low level, the CPU <b>201</b> determines the state information of the input/output ports IO<b>0</b> and IO<b>1</b> as “0” and proceeds to step S<b>34</b>. Otherwise, the CPU <b>201</b> proceeds to step S<b>32</b>. In step S<b>32</b>, if the value of the input/output port IO<b>0</b> is high level and at the same time the value of the input/output port IO<b>1</b> is high level, the CPU <b>201</b> determines the state information of the input/output ports IO<b>0</b> and IO<b>1</b> as “1” and proceeds to step S<b>34</b>. Otherwise, the CPU <b>201</b> proceeds to step S<b>33</b>. In step S<b>33</b>, if the value of the input/output port IO<b>0</b> is low level and at the same time the value of the input/output port IO<b>1</b> is high level, the CPU <b>201</b> determines the state information of the input/output ports IO<b>0</b> and IO<b>1</b> as “2” and proceeds to step S<b>34</b>. Otherwise, since the value of the input/output port IO<b>0</b> is low level and at the same time the value of the input/output port IO<b>1</b> is low level, the CPU <b>201</b> determines the state information of the input/output ports IO<b>0</b> and IO<b>1</b> as “3” and proceeds to step S<b>34</b>.</p>
<p id="p-0190" num="0189">In step S<b>34</b>, the CPU <b>201</b> saves the current state information of the input/output ports IO<b>0</b> and IO<b>1</b> in the inner memory <b>207</b>. In step S<b>35</b>, the CPU <b>201</b> compares the current state information with the previous state information of the input/output ports IO<b>0</b> and IO<b>1</b>. In step S<b>36</b>, if the current state information of the input/output ports IO<b>0</b> and IO<b>1</b> is changed, the CPU <b>201</b> proceeds to step S<b>37</b>. In step S<b>557</b>, the CPU <b>201</b> determines the transition direction of the state information of the input/output ports IO<b>0</b> and IO<b>1</b> (refer to <figref idref="DRAWINGS">FIG. 17</figref>). If the transition direction of the state information is changed in agreement with the (+) transition direction (refer to <figref idref="DRAWINGS">FIG. 16A</figref>), the CPU <b>201</b> increments the velocity counter “Cv” by one in step S<b>38</b>. On the other hand, if the transition direction of the state information is changed in agreement with the (−) transition direction (refer to <figref idref="DRAWINGS">FIG. 16B</figref>), the CPU <b>201</b> proceeds to step S<b>39</b> in which the velocity counter “Cv” is decremented by one. In this manner, the state transition of the pulse signals A and B from the phototransistors <b>34</b> and <b>35</b> is counted.</p>
<p id="p-0191" num="0190"><figref idref="DRAWINGS">FIG. 29</figref> is a flow chart showing an example of the procedure for handling a trigger in step S<b>3</b> of <figref idref="DRAWINGS">FIG. 26</figref>. As illustrated in <figref idref="DRAWINGS">FIG. 29</figref>, in step S<b>50</b>, the CPU <b>201</b> acquires the counter value of the velocity counter Cv. The counter value as acquired is the counter value per frame and indicative of the current sliding velocity of the sliding operation piece <b>2</b>. In step S<b>51</b>, the CPU <b>201</b> resets the velocity counter Cv.</p>
<p id="p-0192" num="0191">In step S<b>52</b>, the CPU <b>201</b> calculates the moving average of the sliding velocity of the sliding operation piece <b>2</b> (the counter value of the velocity counter Cv). For example, the moving average is calculated over ten frames by the use of the current sliding velocity of the sliding operation piece <b>2</b> and the sliding velocities of the previous 9 frames. The moving average of the sliding velocity of the sliding operation piece <b>2</b> is referred here to as the sliding velocity Va.</p>
<p id="p-0193" num="0192">In step S<b>53</b>, the CPU <b>201</b> calculates the absolute value |Va| of the sliding velocity Va, i.e., the sliding speed |Va|. In step S<b>54</b>, the CPU <b>201</b> determines whether or not the sliding speed |Va| of the sliding operation piece <b>40</b> exceeds a predetermined maximum value MAX. If the sliding speed |Va| of the sliding operation piece <b>40</b> exceeds the predetermined maximum value MAX, the process proceeds to step S<b>55</b>, otherwise proceeds to step S<b>59</b>.</p>
<p id="p-0194" num="0193">In step S<b>55</b>, the CPU <b>201</b> refers to the sign of the sliding velocity Va and, if the sign is positive, the maximum value MAX is assigned to the sliding velocity Va in step S<b>57</b>. Conversely, if the sign is negative, (−1)×MAX is assigned to the sliding velocity Va in step S<b>56</b>. In step S<b>58</b>, the CPU <b>201</b> assigns the maximum value MAX to the sliding speed |Va| and proceeds to step S<b>59</b>.</p>
<p id="p-0195" num="0194">In step S<b>59</b>, the CPU <b>201</b> determines whether or not the sliding speed |Va| of the sliding operation piece <b>40</b> exceeds a predetermined threshold value ThV. If the sliding speed |Va| exceeds the predetermined threshold value ThV, the process proceeds to step S<b>60</b>, otherwise proceeds to step S<b>64</b>.</p>
<p id="p-0196" num="0195">In step S<b>60</b>, the CPU <b>201</b> compares the sign of the current sliding velocity Va with the sign of the previous sliding velocity Va of the sliding operation piece <b>2</b>. If the sign of the sliding velocity Va is not changed, the CPU <b>201</b> judges that the sliding direction of the sliding operation piece <b>2</b> is not changed and returns to the main routine (step S<b>61</b>). Conversely, if the sign of the sliding velocity Va is changed, the CPU <b>201</b> judges that the sliding direction of the sliding operation piece <b>2</b> is changed, and proceeds to step S<b>62</b> (step S<b>61</b>). Then, in step S<b>62</b>, the CPU <b>201</b> turns on the sound output flag and the sound outputting flag. The sound output flag as turned on means the generation of a trigger. The sound outputting flag is turned off when sound is not outputting, and turned on when sound is outputting.</p>
<p id="p-0197" num="0196">In step S<b>63</b>, the CPU <b>201</b> increments the trigger counter Ct and returns to the main routine.</p>
<p id="p-0198" num="0197">As described above, the trigger is generated when the sliding direction of the sliding operation piece <b>2</b> is changed (refer to step S<b>61</b>) while the sliding speed |Va| of the sliding operation piece <b>2</b> exceeds the predetermined threshold ThV (refer to step S<b>59</b>).</p>
<p id="p-0199" num="0198">On the other hand, in step S<b>64</b>, the CPU <b>201</b> determines whether or not the sliding speed |Va| is “0”. If the sliding speed |Va| is not “0”, the CPU <b>201</b> proceeds to step S<b>69</b>, in which the release counter Cr is reset, and then returns to the main routine. Conversely, if the sliding speed |Va| is “0”, the CPU <b>201</b> proceeds to step S<b>65</b>.</p>
<p id="p-0200" num="0199">In step S<b>65</b>, the CPU <b>201</b> increments the release counter Cr by one. In step S<b>66</b>, the CPU <b>201</b> determines whether or not the release counter Cr reaches a constant value k. If the release counter Cr does not reach the constant value k, the CPU <b>201</b> returns to the main routine. Conversely, if the release counter Cr reaches the constant value k, the CPU <b>201</b> proceeds to step S<b>67</b>. In step S<b>67</b>, the CPU <b>201</b> resets the release counter Cr. In step S<b>68</b>, the CPU <b>201</b> turns on the hardware release flag, and returns to the main routine.</p>
<p id="p-0201" num="0200">The process of steps S<b>64</b> to S<b>68</b> is a process of invoking the hardware release process after the sliding speed |Va| is successively detected to be “0” for k times (for example, k=7).</p>
<p id="p-0202" num="0201">A fictive coordinate and a velocity conversion table which appear in step S<b>4</b> will be explained before beginning to explain a character location control process in step S<b>4</b> of <figref idref="DRAWINGS">FIG. 26</figref>. <figref idref="DRAWINGS">FIG. 30</figref> is a view for explaining the fictive coordinate. As illustrated in <figref idref="DRAWINGS">FIG. 30</figref>, a background image <b>303</b> consisting of 1024 (width)×256 (height) pixels is provided to the external ROM <b>300</b> or the external ROM <b>91</b>. The background image <b>303</b> is an image from start to goal of the game which the character <b>73</b> moves corresponding to the sliding speed |Va|. A coordinate on the background image <b>303</b> is defined as a fictive coordinate. The origin of the fictive coordinate is in the middle of the extreme left height of the background image <b>303</b>. The CPU <b>201</b> calculates the location of the character <b>73</b> on the fictive coordinate on the basis of the sliding speed |Va| of the sliding operation piece <b>2</b>.</p>
<p id="p-0203" num="0202"><figref idref="DRAWINGS">FIG. 31</figref> is an enlarged view of a part of the background image <b>303</b> of <figref idref="DRAWINGS">FIG. 30</figref>. As illustrated in <figref idref="DRAWINGS">FIG. 31</figref>, the background image <b>303</b> is divided into blocks (described as rectangular elements with broken lines in <figref idref="DRAWINGS">FIG. 31</figref>) corresponding to the blocks of the background screen <b>302</b>. For example, the block consists of 8×8 pixels. The range displayed on the background screen <b>302</b> is a rectangular area including the character <b>73</b> as its center (the upper left corner (x<b>1</b>, y<b>1</b>), the right lower corner (x<b>2</b>, y<b>2</b>)). In other words, storage location information of pixel pattern data, color palette information and depth value indicating the rectangular area of the background image <b>303</b> around the character <b>73</b> are assigned to the array PA[<b>0</b>] to the array PA[<b>1023</b>] and the array CA[<b>0</b>] to the array CA[<b>1023</b>] constituting the background screen <b>302</b></p>
<p id="p-0204" num="0203">Then, if the location of the character <b>73</b> on the fictive coordinate moves to other block on the background image <b>303</b> as indicated by an arrow in <figref idref="DRAWINGS">FIG. 31</figref>, the CPU <b>201</b> displays a rectangular area (the upper left corner (x<b>3</b>, y<b>3</b>), the lower right corner (x<b>4</b>, y<b>4</b>)) including the character <b>73</b> after moved as its center on the background screen <b>302</b>. In other word, the CPU <b>201</b> rewrites the elements of the array PA[<b>0</b>] to PA[<b>1023</b>] and the array CA[<b>0</b>] to CA[<b>1023</b>] to the those of the storage location information of the pixel pattern data, the color palette information and the depth value designating the rectangular area including the character <b>73</b> after moved as its center.</p>
<p id="p-0205" num="0204">In this way, the CPU <b>201</b> can express movement of the character <b>73</b> by changing the background image <b>303</b> while fixing the position of the character <b>73</b> on the screen <b>82</b> (center of the screen <b>82</b>) by rewriting elements of the arrays PA and CA as the character <b>73</b> moves on the fictive coordinate.</p>
<p id="p-0206" num="0205">The fictive coordinate is described as (x, y), the coordinate on the screen <b>82</b> of the television monitor <b>80</b> is described as (X, Y). The center of the screen <b>82</b> is defined as an origin of coordinates on the screen <b>82</b>. The upper direction of a vertical axis is defined as positive direction of X-axis, and the right direction of a horizontal axis is defined as positive direction of Y-axis.</p>
<p id="p-0207" num="0206">When the character <b>73</b> moves on the fictive coordinate within one block, the CPU <b>201</b> expresses movement of the character <b>73</b> in the following way. For example, it is assumed the character <b>73</b> moves for distance “Vv” in x direction. The center of the background screen <b>302</b> is moved by the CPU <b>201</b> for the distance (−Vv) in X-direction on the screen <b>82</b>. In other words, in this case, the movement of the character <b>73</b> is expressed by scrolling the background screen <b>302</b>. Incidentally, the position of the character <b>73</b> on the screen <b>82</b> is being fixed (the center of the screen<b>82</b>). As mentioned above, the CPU <b>201</b> updates the elements of the arrays PA and CA constituting the background screen <b>302</b> and moves the center of the background screen <b>302</b> in accordance with the moving distance “Vv” in x-direction on the fictive coordinate of the character <b>73</b> (in this example, the y-coordinate of the character <b>73</b> is fixed). The movement distance “Vv” is determined with reference to the velocity conversion table on the basis of the sliding speed |va| of the sliding operation piece <b>2</b>.</p>
<p id="p-0208" num="0207"><figref idref="DRAWINGS">FIG. 32</figref> is a view showing an example of the velocity conversion table. As illustrated in <figref idref="DRAWINGS">FIG. 32</figref>, the velocity conversion table shows relation between the sliding speed |Va| of the sliding operation piece <b>2</b> and the movement distance “Vv” on the fictive coordinate. For example, if the sliding speed |Va| is “Va0”, the movement distance “Vv” is “Vv0”. In this table, if the sliding speed |Va| becomes larger, the movement distance “Vv” becomes larger. Conversely, if the sliding speed |Va| becomes smaller, the movement distance “Vv” becomes smaller.</p>
<p id="p-0209" num="0208"><figref idref="DRAWINGS">FIG. 33</figref> is a flowchart showing the process flow of the character location control process in step S<b>4</b> of <figref idref="DRAWINGS">FIG. 26</figref>. As illustrated in <figref idref="DRAWINGS">FIG. 33</figref>, in step S<b>80</b>, the CPU <b>201</b> obtains the movement distance “Vv” of the character <b>73</b> on the fictive coordinate corresponding to the sliding speed |Va| of the sliding operation piece <b>2</b> with reference to the velocity conversion table of <figref idref="DRAWINGS">FIG. 33</figref>. In step S<b>81</b>, the CPU <b>201</b> calculates position of the character <b>73</b> on the fictive coordinate on the basis of the movement distance “Vv”.</p>
<p id="p-0210" num="0209">In step S<b>82</b>, the CPU <b>201</b> determines whether or not the character <b>73</b> moves to other block (refer to <figref idref="DRAWINGS">FIG. 31</figref>). If the character <b>73</b> does not move to other block yet, the process proceeds to step S<b>83</b>, otherwise proceeds to step S<b>84</b>. In step S<b>83</b>, the CPU <b>201</b> change the coordinate (Xf, Yf) of the center of the background screen <b>302</b> on the screen <b>82</b> to (Xf−Vv, Yf). Then, the CPU <b>201</b> returns to the main routine. In step S<b>84</b>, the CPU <b>201</b> rewrites the arrays PA and CA constituting the background screen <b>302</b> and then returns to the main routine in order to display the rectangular area around the position of the character <b>73</b> on the fictive coordinate as a background image.</p>
<p id="p-0211" num="0210">The coordinate information of the center of the background screen <b>302</b> on the screen <b>82</b> and the arrays PA and CA are stored in the predetermined area of the inner memory <b>207</b>.</p>
<p id="p-0212" num="0211">Next, an animation table which appears in step S<b>5</b> will be described before explaining a character animation control process in step S<b>5</b> of <figref idref="DRAWINGS">FIG. 26</figref>. <figref idref="DRAWINGS">FIG. 34</figref> is a view showing an example of the animation tables. As illustrated in <figref idref="DRAWINGS">FIG. 34</figref>, each animation table is a table wherein a sliding speed range, a character number, duration information, next form information, storage location information of animation image data, character size information, color palette information, depth value, sprite size information, and display coordinate information of the character <b>73</b> on the screen <b>82</b> are associated each other.</p>
<p id="p-0213" num="0212">The sliding speed |Va| of the sliding operation piece <b>2</b> is divided into five stages. The sliding speed range is provided to change animation speed corresponding to respective five stages. The character number is given to each different form of character <b>73</b>. The duration information designates a number of frames the specified form of the character <b>73</b> by the character number should be successively displayed. The next form information designates the character number which specifies the form of the character <b>73</b> to be displayed after the specified form of the character <b>73</b> is displayed in accordance with the duration information. For example, the next form information “next” indicates to display specified form of the character <b>73</b> by the character number “2” belonging to the same sliding speed range as previous one after displaying specified form of the character <b>73</b> by the character number “1” during one frame (the duration information). The next form information “top” indicates to display the specified form of the character <b>73</b> by the initial character number “1” belonging to the same sliding speed range as previous one after displaying the specified form of the character <b>73</b> by the character number “10” during one frame (the duration information). The next form information “self” indicates to display the specified form of the character <b>73</b> by the same character number “11” again after displaying the specified form of the character <b>73</b> by the character number “11” during four frames (the duration information).</p>
<p id="p-0214" num="0213">The animation image data is time series data of the different forms of character <b>73</b> to be animated. The storage location information of the animation image data indicates a start address of the animation image data. The animation image data is pixel pattern data. The character size information indicates size of the character <b>73</b>. The color palette information, depth value and sprite size are as explained above.</p>
<p id="p-0215" num="0214">Since the storage location information of the animation image data is the storage location information of the pixel pattern data of the character <b>73</b> of the character number “1”, the storage location information of the pixel pattern data of the character <b>73</b> from the second on can be derived using the character size information. The storage location information of pixel pattern information for each sprite constituting the character <b>73</b> is derived from the storage location information of the pixel pattern data for the character <b>73</b> and the sprite size information. In addition, a display coordinate of each sprite constituting a character <b>73</b> is derived from the display coordinate of the character <b>73</b> and the sprite size information.</p>
<p id="p-0216" num="0215">By the way, in case where the sliding speed |Va| is smaller than the threshold value “ThV” (refer to step S<b>59</b> of <figref idref="DRAWINGS">FIG. 29</figref>), the character number is “11” and the next form information is “self”. In this way, the static (not animated) character <b>73</b> is displayed on the screen <b>82</b>.</p>
<p id="p-0217" num="0216"><figref idref="DRAWINGS">FIG. 35</figref> is a flowchart showing the process flow of the character animation process in step S<b>5</b> of <figref idref="DRAWINGS">FIG. 26</figref>. As illustrated in <figref idref="DRAWINGS">FIG. 35</figref>, the CPU <b>201</b> refers to the animation table pointed by an animation pointer in step S<b>90</b>. The animation pointer is a pointer which points current animation table. In step S<b>91</b>, the CPU <b>201</b> derives the display coordinate and the storage location information of pixel pattern of each sprite constituting the character <b>73</b> on the basis of the information in the animation table, and stores them in certain area of the inner memory <b>207</b>. In step S<b>92</b>, the CPU <b>201</b> obtains other image information (such as size, color palette information and depth value) of each sprite constituting the character <b>73</b>, and stores them in certain area of the inner memory <b>207</b>.</p>
<p id="p-0218" num="0217">In step S<b>93</b>, the CPU <b>201</b> determines whether or not duration designated by the duration information is over. If it is not over yet, the CPU <b>201</b> returns to the main routine, otherwise proceeds to step S<b>94</b>. In step S<b>94</b>, the CPU <b>201</b> determines whether or not the animation is ended. If it is not ended yet, the process proceeds to step S<b>97</b>, otherwise proceeds to step S<b>95</b>. Meanwhile, the end of animation means the end of display of all character <b>73</b> of character number “1” to “10” belonging to same sliding speed range.</p>
<p id="p-0219" num="0218">In step S<b>95</b>, the CPU <b>201</b> judge the sliding speed range where the sliding speed |Va| of the sliding operation piece <b>2</b> belongs. In step S<b>96</b>, the CPU <b>201</b> proceeds the animation pointer to the animation table of the character number “1” corresponding to the sliding speed range where the sliding speed <b>51</b> Va| belongs, then returns to the main routine. In step S<b>97</b>, the CPU <b>201</b> controls the animation pointer in accordance with the next form information from the animation table, then returns to the main routine.</p>
<p id="p-0220" num="0219">For example, if the animation pointer points the animation table of the character number “1” corresponding to the sliding speed range “ThV&lt;|Va|≦V1”, the CPU <b>201</b> proceeds the animation pointer to animation table of the next character number “2” corresponding to the same sliding speed range “ThV&lt;|Va|≦V1.”</p>
<p id="p-0221" num="0220">As can be expected from <figref idref="DRAWINGS">FIG. 34</figref>, if the sliding speed |Va| is larger, animation speed becomes faster (the duration information becomes smaller). On the other hand, if the sliding speed |Va| is smaller, animation speed becomes slower (the duration information becomes larger).</p>
<p id="p-0222" num="0221"><figref idref="DRAWINGS">FIG. 36</figref> is a flowchart showing the process flow of the current position indicating object control process in step S<b>6</b> of <figref idref="DRAWINGS">FIG. 26</figref>. As illustrated in <figref idref="DRAWINGS">FIG. 36</figref>, in step S<b>110</b>, the CPU <b>201</b> multiplies the count value of the trigger counter “Ct” by a predetermined number of pixels, then makes use of the result as a movement distance “LX” of the current position indicating object <b>71</b>. In step S<b>111</b>, the CPU <b>201</b> adds an initial coordinate “Xob0” to the movement distance “LX”, and makes use of it as an X-coordinate “Xob” of the current position indicating object <b>71</b>. A Y-coordinate “Yob” is fixed. In step S<b>112</b>, the CPU <b>201</b> sets the image information (such as the storage location information of pixel pattern data, the display coordinate, size, the color palette information and depth value) of a sprite constituting the current position indicating object <b>71</b> to a prescribed area of the inner memory <b>207</b>. The current position indicating object <b>71</b> is assumed to consist of the single sprite. In step S<b>113</b>, the CPU <b>201</b> sets the image information (such as the storage location information of pixel pattern data, the display coordinate, size, the color palette information and depth value) of sprites constituting the total distance indicating bar <b>70</b> to a prescribed area of the inner memory <b>207</b>.</p>
<p id="p-0223" num="0222">Incidentally, the length of the total distance indicating bar <b>70</b> is commensurate with a number of musical notes in the musical score data <b>308</b>. In this way, the current position indicating object <b>71</b> moves for a distance corresponding to one musical note (the prescribed number of pixels in step S<b>110</b>) every time a trigger is generated.</p>
<p id="p-0224" num="0223"><figref idref="DRAWINGS">FIG. 37</figref> is a flowchart showing the process flow of the time count process in step S<b>7</b> of <figref idref="DRAWINGS">FIG. 26</figref>. As illustrated in <figref idref="DRAWINGS">FIG. 37</figref>, the CPU <b>201</b> increments a counter “Ctm” in step S<b>120</b>. In step S<b>121</b>, the CPU <b>201</b> calculates elapsed time from start on the basis of a count value of the counter “Ctm”. Incidentally, it is assumed that the video synchronous interrupt signal is issued every 60th second. Since the counter “Ctm” is incremented every time a display image (a frame) is updated, it is possible to calculate the elapsed time with ease. In step S<b>122</b>, the CPU <b>201</b> sets the image information (such as the storage location information of pixel pattern data, the display coordinate, size, the color palette information and depth value) of sprites constituting each numeric object for displaying the elapsed time to a prescribed area of the inner memory <b>207</b> in order to display the elapsed time from the start of running. Each numeric object consists of a single sprite.</p>
<p id="p-0225" num="0224">Returning to <figref idref="DRAWINGS">FIG. 26</figref>, in step S<b>9</b>, the CPU <b>201</b> sends the image information of each sprite to the graphic processor <b>202</b> during the vertical blanking period. In addition, the graphic processor <b>202</b> reads information of the array PA and CA stored in the inner memory <b>207</b> during the vertical blanking period. Then, the graphic processor <b>202</b> generates an image signal “VD” on the basis of these information to update a display image. <figref idref="DRAWINGS">FIG. 38</figref> is a flowchart showing the process flow of the audio process in step S<b>10</b> of <figref idref="DRAWINGS">FIG. 26</figref>. In step S<b>130</b>, in accordance with the on/off state of the sound output flag (whether or not a trigger is generated), the CPU <b>201</b> proceeds to step S<b>137</b> if the sound output flag is turned off and proceeds to step S<b>131</b> if the sound output flag is turned on (a trigger is generated). In step S<b>131</b>, the CPU <b>201</b> reads musical note information (i.e. pitch information) from the musical score data <b>308</b> stored in the external ROM <b>300</b> or the external ROM <b>91</b> with reference to the musical score data pointer. In step S<b>132</b>, the CPU <b>201</b> stores, in the inner memory <b>207</b>, the waveform pitch control information corresponding to the musical note information as read.</p>
<p id="p-0226" num="0225">In step S<b>133</b>, the CPU <b>201</b> stores, in the inner memory <b>207</b>, the initial address of the attack portion of the waveform data corresponding to the musical note information as read. In step S<b>134</b>, the CPU <b>201</b> stores, in the inner memory <b>207</b>, the initial address of the loop portion of the waveform data corresponding to the musical note information as read. In step S<b>135</b>, the CPU <b>201</b> increments the musical score data pointer. The musical score data <b>308</b> is data containing the musical note information (the pitch information) arranged in a time series. In step S<b>136</b>, the CPU <b>201</b> turns the sound output flag off.</p>
<p id="p-0227" num="0226">In step S<b>137</b>, in accordance with the on/off state of the sound outputting flag, the CPU <b>201</b> returns to the main routine if the sound outputting flag is turned off and proceeds to step S<b>138</b> if the sound outputting flag is turned on. In step S<b>138</b>, the CPU <b>201</b> checks the state of the hardware release flag. If it is turned on, the CPU <b>201</b> proceeds to step S<b>144</b>, then turns the outputting flag off and proceeds to step S<b>143</b>. Conversely, if the hardware release flag is turned off, the CPU <b>201</b> proceeds to step S<b>139</b>. In step S<b>139</b>, the CPU <b>201</b> calculates an envelope coefficient in proportion to the sliding speed |Va|. For example, if the velocity counter “Cv” is an 8 bit counter, the envelope coefficient is calculated as 8×|Va|×(1/255) while it is clipped to “1” if the envelope coefficient as calculated exceeds “1”. In step S<b>140</b>, the CPU <b>201</b> reads the envelope data compressed and stored in the external ROM <b>300</b> or the external ROM <b>91</b>, and extended in the inner memory <b>207</b>. In step S<b>140</b>, the CPU <b>201</b> reads the envelope data corresponding to the waveform data in accordance with the musical note information as read in step S<b>131</b>.</p>
<p id="p-0228" num="0227">In step S<b>141</b>, the CPU <b>201</b> multiplies the extended envelope data by the envelope coefficient obtained in step S<b>139</b>. In step S<b>142</b>, the CPU <b>201</b> sets the result of multiplication of step S<b>141</b> again as a new envelope data to the inner memory <b>207</b>. In this way, sound volume is controlled by controlling envelope data in accordance with the sliding speed |Va|. In step S<b>143</b>, the CPU <b>201</b> instructs the sound processor <b>203</b> to access the inner memory <b>207</b>. In response to this, the sound processor <b>203</b> reads the initial addresses of the attack portion, the initial addresses of the loop portion and the envelope data as stored in the inner memory <b>207</b> in the appropriate timing, and generates the audio signals “AL” and “AR”. If the hardware release flag is turned on, the sound processor <b>203</b> performs the deadening of sound. Therefore, once the sound output flag is turned on, the audio signals “AL” and “AR” corresponding to relevant musical note information are continuously generated until the hardware release flag is turned on.</p>
<p id="p-0229" num="0228">Incidentally, the similar process (the trigger process, sound process) as <figref idref="DRAWINGS">FIG. 26</figref> is executed when automatically performing music is performed with using the sliding operation piece <b>2</b>. In this case, the image displaying process is performed to display the screen similar to <figref idref="DRAWINGS">FIG. 8</figref>.</p>
<p id="p-0230" num="0229">Next, a game process (the flying game of <figref idref="DRAWINGS">FIG. 10</figref> and <figref idref="DRAWINGS">FIG. 11</figref>) performed on the basis of the sliding time of the sliding operation piece <b>2</b> will be explained.</p>
<p id="p-0231" num="0230"><figref idref="DRAWINGS">FIG. 39</figref> is a flowchart showing the process flow of the flying game process performed by the automatic musical instrument of <figref idref="DRAWINGS">FIG. 1</figref>. As illustrated in <figref idref="DRAWINGS">FIG. 39</figref>, the CPU <b>201</b> initializes the system in step S<b>200</b>. This process is similar to the initial setting process in step S<b>1</b> of <figref idref="DRAWINGS">FIG. 26</figref>, and therefore redundant explanation is not repeated. In step S<b>201</b>, the CPU <b>201</b> checks whether or not the game is over. If the game is over (the character <b>73</b> lands and a prescribed time is elapsed), the CPU <b>201</b> finished processing, otherwise the CPU <b>201</b> proceeds to step S<b>202</b>.</p>
<p id="p-0232" num="0231">In step S<b>202</b>, the CPU <b>201</b> checks whether or not the sliding operation performed by the operator satisfies the trigger generating requirement. This process is similar to the trigger process in step S<b>3</b> of <figref idref="DRAWINGS">FIG. 26</figref>, and therefore redundant explanation is not repeated. In step S<b>203</b>, the CPU <b>201</b> calculates position of the character <b>73</b> on the basis of the sliding time of the sliding operation piece <b>2</b>. In step S<b>204</b>, the CPU <b>201</b> controls the location of the character <b>73</b> on the basis of the result of calculation of step S<b>203</b>. In step S<b>205</b>, the CPU <b>201</b> controls animation of the character <b>73</b>. In step S<b>206</b>, the CPU <b>201</b> controls the color of the input indicating bar <b>75</b> on the basis of the operation of the sliding operation piece <b>2</b>. In step S<b>207</b>, the CPU <b>201</b> calculates fright distance of the character <b>73</b>.</p>
<p id="p-0233" num="0232">In step S<b>208</b>, the CPU <b>201</b> determines whether or not the CPU <b>201</b> waits for the video system synchronous interrupt. If the CPU <b>201</b> waits for the video system synchronous interrupt (there is no interrupt responsive to the video system synchronous signal), the CPU <b>201</b> repeats the same step S<b>208</b>. Conversely, if the CPU <b>201</b> gets out of the state of waiting for the video system synchronous interrupt (the CPU <b>201</b> is given the video system synchronous interrupt), the process proceeds to step S<b>209</b>. In step S<b>209</b>, the graphic processor <b>202</b> updates the display image of the television monitor <b>80</b> as instructed by the CPU <b>201</b>. This is similar to the process in step S<b>9</b> of <figref idref="DRAWINGS">FIG. 26</figref>.</p>
<p id="p-0234" num="0233">In step S<b>210</b>, the CPU <b>201</b> sets necessary information to the inner memory <b>207</b> for the sound processor <b>203</b> to generate audio signals “AL” and “AR”. In the flying game, the CPU <b>201</b> does not output sound in response to the triggers as it does in the running game. Therefore, in step S<b>210</b>, the CPU <b>201</b> sets, to the inner memory <b>207</b>, waveform pitch control information, initial addresses of the attack portion and the loop portion of waveform data, envelope pitch control information and an initial address of envelope data in accordance with musical note information pointed by a musical score data pointer which does not depend on the trigger. The sound processor <b>203</b> reads waveform data and envelope data from the external ROM <b>300</b> or the external ROM <b>91</b> on the basis of the set information, and generates the audio signals “AL” and “AR” for BGM. As described above, the display image update process in step S<b>209</b> and the sound process in step S<b>210</b> are performed in synchronization with the video system synchronous interrupt.</p>
<p id="p-0235" num="0234">The CPU <b>201</b> performs a pulse count process of step S<b>211</b> when the CPU <b>201</b> is given the video system synchronous interrupt by the timer circuit <b>210</b>. The pulse count process is similar to the process in step S<b>11</b> of <figref idref="DRAWINGS">FIG. 26</figref>, and therefore redundant explanation is not repeated.</p>
<p id="p-0236" num="0235"><figref idref="DRAWINGS">FIG. 40</figref> is a flowchart showing the process flow of the character location calculation process in step S<b>203</b> of <figref idref="DRAWINGS">FIG. 39</figref>. As illustrate in <figref idref="DRAWINGS">FIG. 40</figref>, in step S<b>220</b>, the CPU <b>201</b> judges whether or not the character <b>73</b> on the fictive coordinate (refer to <figref idref="DRAWINGS">FIG. 30</figref>) reaches the jump point. If the character <b>73</b> reaches the jump point, the CPU <b>201</b> proceeds to step S<b>221</b>, otherwise proceeds to step S<b>227</b>. In step S<b>227</b>, the CPU <b>201</b> assigns a prescribed value “Vx0” to a variable “Vx”, “0” to a variable “a”, “0” to a variable “Vy”, and “0” to a variable “g”. Then, in step S<b>221</b>, the CPU <b>201</b> judges whether or not the character <b>73</b> on the fictive coordinate reaches the point of the balloon object <b>76</b>. If the character <b>73</b> reaches the point, the CPU <b>201</b> proceeds to step S<b>222</b>, otherwise proceeds to S<b>229</b>. In step S<b>229</b>, the CPU <b>201</b> assigns the prescribed value “Vx0” to the variable “Vx”, “0” to the variable “a”, a prescribed value “Vy0” to the variable “Vy”, and a prescribed value “g0” to the variable “g”.</p>
<p id="p-0237" num="0236">In step S<b>222</b>, the CPU <b>201</b> determines whether or not the sound output flag is turned on. If the sound output flag is turned off, the CPU <b>201</b> proceeds to step S<b>228</b>, otherwise proceeds to step S<b>223</b>. In step S<b>223</b>, the CPU <b>201</b> determines whether or not the hardware release flag is turned on. If the hardware release flag is turned on, the CPU <b>201</b> proceeds to step S<b>228</b>, otherwise proceeds to step S<b>224</b>. In step S<b>228</b>, the CPU <b>201</b> assigns a prescribed value “Vx1” to the variable “Vx”, “0” to the variable “a”, a prescribed value “Vy1” to the variable “Vy”, and the prescribed value “g0” to the variable “g”.</p>
<p id="p-0238" num="0237">In step S<b>224</b>, the CPU <b>201</b> determines whether or not the character <b>73</b> reaches the upper limit. If the character <b>73</b> reaches the upper limit, the CPU <b>201</b> proceeds to step S<b>226</b>, otherwise proceeds to step S<b>225</b>. In step S<b>225</b>, the CPU <b>201</b> assigns a prescribed value “Vx2” to the variable “Vx”, “0” to the variable “a”, a prescribed value “Vy2” to the variable “Vy”, and the prescribed value “g0” to the variable “g”. On the other hand, in step S<b>226</b>, the CPU <b>201</b> assigns the prescribed value “Vx2” to the variable “Vx”, “0” to the variable “a”, “0” to the variable “Vy”, and “0” to the variable “g”.</p>
<p id="p-0239" num="0238">In step S<b>230</b>, the CPU <b>201</b> calculates following formulas on the basis of the variable “Vx”, “Vy”, “a” and “g” assigned in step S<b>227</b>, S<b>228</b>, S<b>229</b>, S<b>225</b> or S<b>226</b>. Incidentally, an initial value “xc0” is assigned to a variable “xc”, and an initial value “yc0” is assigned to a variable “yc”.
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>xc←xc+Vx  (1)<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>Vx←Vx+a  (2)<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>yc←yc+Vx  (3)<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>Vy←Vy−g  (4)<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0240" num="0239">The process in step S<b>227</b> is for calculating the position of the character <b>73</b> between the start and the jump point. The process in step S<b>229</b> is for calculating the position of the character <b>73</b> between the jump point and the balloon. The processes in step S<b>228</b>, S<b>225</b> and S<b>226</b> are for calculating the position of the character <b>73</b> after the character <b>73</b> grabs the balloon. In this case, the process in step S<b>228</b> is a setting process for calculating the position of the character <b>73</b> when either a trigger is not generated or the sliding operation is finished (the input operation is finished). The process in step S<b>226</b> is a setting process for calculating the position of the character <b>73</b> after the character <b>73</b> reaches the prescribed upper limit. The process in step S<b>225</b> is a setting process for calculating the position of the character <b>73</b> when the character <b>73</b> descends under the prescribed upper limit.</p>
<p id="p-0241" num="0240"><figref idref="DRAWINGS">FIG. 41</figref> is a flowchart showing the process flow of the character location control process in step S<b>204</b> of <figref idref="DRAWINGS">FIG. 39</figref>. As illustrated in <figref idref="DRAWINGS">FIG. 41</figref>, in step S<b>240</b>, the CPU <b>201</b> determines whether or not the character <b>73</b> reaches the jump point on the fictive coordinate. If the character <b>73</b> has not reach the jump point yet, the CPU <b>201</b> proceeds to step S<b>248</b>, and then assigns the coordinate (xc, yc) on the fictive coordinate as calculated in step S<b>230</b> of <figref idref="DRAWINGS">FIG. 40</figref> to the coordinate (Xc,Yc) of the character <b>73</b> on the screen <b>82</b>. If the character <b>73</b> has reached the jump point, the CPU <b>201</b> proceeds to step S<b>241</b>. In step S<b>241</b>, the CPU <b>201</b> determines whether or not the character <b>73</b> passes the jump point on the fictive coordinate. If the character <b>73</b> passes the jump point, the CPU <b>201</b> proceeds to step S<b>242</b>, otherwise (i.e. if the character <b>73</b> is right at the jump point) proceeds to step S<b>244</b>. In step S<b>242</b>, the CPU <b>201</b> determines whether or not the character <b>73</b> reaches a prescribed upper limit. If the character <b>73</b> reaches the upper limit, the CPU <b>201</b> proceeds to step S<b>244</b>, otherwise proceeds to step S<b>243</b>. In step S<b>243</b>, the CPU <b>201</b> determines whether or not the character <b>73</b> reaches a prescribed lower limit. If the character reaches the prescribed lower limit, the CPU <b>201</b> proceeds to step S<b>244</b>, otherwise proceeds to step S<b>249</b>.</p>
<p id="p-0242" num="0241">In step S<b>249</b>, the CPU <b>201</b> makes use of the coordinate (Xc, Yc) of the character <b>73</b> on the screen as a coordinate (a previous Xc+Vx, a previous Yc+Vy). In this way, in case where the character <b>73</b> is moving between the prescribed upper limit and the prescribed lower limit on the fictive coordinate, the CPU <b>201</b> does not move the background <b>74</b> but the character <b>73</b> itself on the screen <b>82</b>.</p>
<p id="p-0243" num="0242">In step S<b>244</b>, the CPU <b>201</b> determines whether or not the character <b>73</b> moves to other block. If the character <b>73</b> moves to other block, the CPU <b>201</b> proceeds to step S<b>245</b>, otherwise proceeds to step S<b>246</b>. In step S<b>246</b>, the CPU <b>201</b> defines the coordinate (Xf, Yf) of the center of the background screen <b>302</b> on the screen <b>82</b> as a coordinate (Xf−Vx, Yf−Vy). In step S<b>245</b>, the CPU <b>201</b> rewrites the arrays PA and CA constituting the background screen <b>302</b> in order to display the rectangular area (reference to <figref idref="DRAWINGS">FIG. 31</figref>) around the character <b>73</b> on the fictive coordinate on the screen <b>82</b>. In step S<b>247</b>, the CPU <b>201</b> makes use of the coordinate (Xc, Yc) of the character <b>73</b> on the screen <b>82</b> as a coordinate (Xc<b>0</b>, Yc<b>0</b>). The coordinate (Xc<b>0</b>, Yc<b>0</b>) is at the center of the screen <b>82</b> and it is a constant value. As explained above, in case where the character <b>73</b> exists on the prescribed upper limit or under the prescribed lower limit, the CPU <b>201</b> does not move the character but change the background <b>74</b> to express movement of the character <b>73</b>.</p>
<p id="p-0244" num="0243"><figref idref="DRAWINGS">FIG. 42</figref> is a flowchart showing the process flow of the character animation control in step S<b>205</b> of <figref idref="DRAWINGS">FIG. 39</figref>. As illustrated in <figref idref="DRAWINGS">FIG. 42</figref>, in step S<b>260</b>, the CPU <b>201</b> determines whether or not the character <b>73</b> reaches the jump point on the fictive coordinate. If the character <b>73</b> has not reached the jump point, the CPU <b>201</b> proceeds to step S<b>262</b>, otherwise proceeds to step S<b>261</b>. In step S<b>261</b>, the CPU <b>201</b> increments the animation pointer to an appropriate position to display a static image of the character <b>73</b>. In other words, animation does not performed after the character <b>73</b> reaches the jump point.</p>
<p id="p-0245" num="0244">In step S<b>262</b>, the CPU <b>201</b> refers an animation table pointed by the animation pointer. The format of the animation table is similar to the one of the animation table of <figref idref="DRAWINGS">FIG. 34</figref>. However, in this case, the sliding speed range is not provided to this animation table, and the animation process does not depend on the sliding speed |Va|. In step S<b>263</b>, the CPU <b>201</b> calculates display coordinates and storage location information of pixel pattern data of each sprite constituting the character <b>73</b> on the basis of the information from the animation table, and stores them in the predetermined area of the inner memory <b>207</b>. In step S<b>264</b>, the CPU <b>201</b> obtains other image information of each sprite constituting the character <b>73</b> (such as size, color palette information and depth value) from the animation table, and stores them in the inner memory <b>207</b>.</p>
<p id="p-0246" num="0245">In step S<b>265</b>, the CPU <b>201</b> determines whether or not the duration designated by the duration information of the animation table is over. If the duration is not over yet, the CPU <b>201</b> returns to the main routine, otherwise proceeds to step S<b>266</b>. In step S<b>266</b>, the CPU <b>201</b> increments the animation pointer to the appropriate point in accordance with the next form information with reference to the animation table.</p>
<p id="p-0247" num="0246"><figref idref="DRAWINGS">FIG. 43</figref> is a flowchart showing the process flow of the input indicating bar control process in step S<b>206</b> of <figref idref="DRAWINGS">FIG. 39</figref>. As illustrated in <figref idref="DRAWINGS">FIG. 43</figref>, instep S<b>280</b>, the CPU <b>201</b> determines whether or not the sound output flag is turned on. If the sound output flag is turned on, the CPU <b>201</b> proceeds to step S<b>282</b>, otherwise proceeds to step S<b>281</b>. In step S<b>281</b>, the CPU <b>201</b> sets, in the inner memory <b>207</b>, image information of each sprite constituting the input indicating bar <b>75</b> (such as storage location information of pixel pattern data, display coordinate, size, color palette information and depth value). Then, in step S<b>282</b>, the CPU <b>201</b> determines whether or not the hardware release flag is turned on. If the hardware release flag is turned on, the CPU <b>201</b> proceeds to step S<b>284</b>, otherwise proceeds to step S<b>283</b>. In step S<b>283</b>, the CPU <b>201</b> changes the color palette information of each sprite constituting the input indicating bar <b>75</b> in order to inform that the operator is currently inputting (sliding), and then returns to the main routine. In step S<b>284</b>, the CPU <b>201</b> changes the color palette information of each sprite constituting the input indicating bar <b>75</b> into a default value in order to inform the operator the end of input (the end of sliding).</p>
<p id="p-0248" num="0247"><figref idref="DRAWINGS">FIG. 44</figref> is a flowchart showing the process flow of the flying distance calculation process in step S<b>207</b> of <figref idref="DRAWINGS">FIG. 39</figref>. As illustrated in <figref idref="DRAWINGS">FIG. 44</figref>, in step S<b>270</b>, the CPU <b>201</b> determines whether or not a y-coordinate “yc” on the fictive coordinate of the character <b>73</b> reaches a prescribed value “yce” (y-coordinate of the goal point). In other words, the CPU <b>201</b> determines whether or not the character <b>73</b> reaches the goal point. If the character <b>73</b> has not reaches the goal point yet, the CPU <b>201</b> returns to the main routine, otherwise proceeds to step S<b>271</b>. In step S<b>271</b>, the CPU <b>201</b> calculates the flying distance commensurate with the x-coordinate “xc” on the fictive coordinate of the character <b>73</b>. In step S<b>272</b>, the CPU <b>201</b> calculates image information of sprites constituting each numeric object (such as storage location information of pixel pattern data, display coordinate, size, color palette information and depth value), and stores them in the inner memory <b>207</b>. In step S<b>273</b>, the CPU <b>201</b> resets the hardware release flag, the sound output flag and the sound outputting flag.</p>
<p id="p-0249" num="0248">Next, a game process (the catch game process of <figref idref="DRAWINGS">FIG. 12</figref>) performed on the basis of the sliding direction of the sliding operation piece <b>2</b>.</p>
<p id="p-0250" num="0249"><figref idref="DRAWINGS">FIG. 45</figref> is a flowchart showing the process flow of the catch game process performed by the automatic musical instrument of <figref idref="DRAWINGS">FIG. 1</figref>. As illustrated in <figref idref="DRAWINGS">FIG. 45</figref>, the CPU <b>201</b> initializes the system in step S<b>300</b>. This process is similar to the initial setting process in step S<b>1</b> of <figref idref="DRAWINGS">FIG. 26</figref>, therefore redundant explanation is not repeated. In step S<b>301</b>, the CPU <b>201</b> determines whether or not a game is over. If the game is over (all life objects <b>78</b> are disappeared or a prescribed time is elapsed after the last falling object <b>79</b> appears), the CPU <b>201</b> finishes processing, otherwise proceeds to step S<b>302</b>.</p>
<p id="p-0251" num="0250">In step S<b>302</b>, whether or not the sliding operation performed by the operator satisfies the trigger generating requirement. This process is similar to the trigger process in step S<b>3</b> of <figref idref="DRAWINGS">FIG. 26</figref>, and therefore redundant explanation is not repeated. In step S<b>303</b>, the CPU <b>201</b> controls location of the character <b>73</b> on the basis of the sliding direction of the sliding operation piece <b>2</b>. In step S<b>304</b>, the CPU <b>201</b> performs the appearance process of the falling object <b>79</b> with reference to a time table. In step S<b>305</b>, the CPU <b>201</b> controls position of the falling object <b>79</b> during falling. In step S<b>306</b>, the CPU <b>201</b> determines whether or not the character <b>73</b> catches the falling object <b>79</b>.</p>
<p id="p-0252" num="0251">In step S<b>307</b>, the CPU <b>201</b> determines whether or not the CPU <b>201</b> waits for the video system synchronous interrupt. If the CPU <b>201</b> waits for the video system synchronous interrupt (there is no interrupt responsive to the video system synchronous signal), the CPU <b>201</b> repeats the same step S<b>307</b>. On the other hand, if the CPU <b>201</b> gets out of the state of waiting for the video system synchronous interrupt (the CPU <b>201</b> is given the video system synchronous interrupt), the process proceeds to step S<b>308</b>. In step S<b>308</b>, the graphic processor <b>202</b> updates a display image of the television monitor <b>80</b> as instructed by the CPU <b>201</b>. This is similar to the process in step S<b>9</b> of <figref idref="DRAWINGS">FIG. 26</figref>.</p>
<p id="p-0253" num="0252">In step S<b>309</b>, the CPU <b>201</b> sets necessary information for the sound processor to generate audio signals AL and AR to the inner memory <b>207</b>. In the catch game process, the processor <b>200</b> does not perform sound output in response to triggers as it does in the running game process. Therefore, the CPU <b>201</b> sets waveform pitch control information, initial addresses of the attack portion and the loop portion of waveform data, envelope pitch control information and an initial address of envelope data to the inner memory <b>207</b> in accordance with musical note information pointed by a musical score data pointer which does not depend on the trigger. The sound processor <b>203</b> reads waveform data and envelope data from the external ROM <b>300</b> or the external ROM <b>91</b>, and generates audio signals “AL” and “AR” for BGM. As has been discussed above, the display image update process in step S<b>308</b> and the sound process in step S<b>309</b> are performed in synchronization with the video system synchronous signal.</p>
<p id="p-0254" num="0253">The pulse count process in step S<b>310</b> is performed by the CPU <b>201</b> when the CPU <b>201</b> is given the interrupt by the timer circuit <b>210</b>. The pulse count process is similar to the one in step S<b>11</b> of <figref idref="DRAWINGS">FIG. 26</figref>, and therefore redundant explanation is not repeated.</p>
<p id="p-0255" num="0254"><figref idref="DRAWINGS">FIG. 46</figref> is a flowchart showing the process flow of the character control process in step S<b>303</b> of <figref idref="DRAWINGS">FIG. 45</figref>. As illustrated in <figref idref="DRAWINGS">FIG. 46</figref>, the CPU <b>201</b> calculates the X-coordinate “Xc” of the character <b>73</b> on the screen <b>82</b> in step S<b>320</b>. More specifically, Xc←Xc+the sliding velocity “Va”. In step S<b>321</b>, the CPU <b>201</b> refers to an animation table pointed by the animation pointer. The format of the animation table is similar to the one of <figref idref="DRAWINGS">FIG. 34</figref> in this case. However, the sliding speed range is not provided. Therefore, the animation process does not depend on the sliding speed |Va| of the sliding operation piece <b>2</b>. In step S<b>322</b>, the CPU <b>201</b> calculates a display coordinate and storage location information of pixel pattern data of each sprite constituting the character on the basis of the information from the animation table, and stores them in the predetermined area of the inner memory <b>207</b>. In step S<b>323</b>, the CPU <b>201</b> obtains other image information (such as size, color palette information and depth value) of each sprite constituting the character <b>73</b> from the animation table, and stores them in a prescribed area of the inner memory <b>207</b>.</p>
<p id="p-0256" num="0255">In step S<b>324</b>, the CPU <b>201</b> determines whether or not duration designated by the duration information of the animation table is finished. If it is not finished, the CPU <b>201</b> returns to the main routine, otherwise proceeds to step S<b>325</b>. In step S<b>325</b>, the CPU <b>201</b> determines whether or not animation is finished. If it is not finished, the CPU <b>201</b> proceeds to step S<b>327</b>, otherwise proceeds to step S<b>326</b>. Meanwhile, the end of animation means that display of the character <b>73</b> corresponding to all character number is finished.</p>
<p id="p-0257" num="0256">In step S<b>327</b>, the CPU <b>201</b> increments the animation pointer to an appropriate position in accordance with the next form information of the animation table. In step S<b>326</b>, the CPU <b>201</b> controls the animation pointer in accordance with a sign of the sliding velocity “Va”. The animation tables of the character <b>73</b> for (+) direction and (−) direction of <figref idref="DRAWINGS">FIG. 12</figref> are provided. Therefore, when the sliding direction of the sliding operation piece <b>2</b> is changed (i.e. the sign of the sliding velocity “Va” is changed), the animation pointer is controlled to point the animation table corresponding to the sliding direction by the CPU <b>201</b>.</p>
<p id="p-0258" num="0257">Next, the time table will be explained before explaining the falling object appearance process in step S<b>304</b> of <figref idref="DRAWINGS">FIG. 45</figref>. <figref idref="DRAWINGS">FIG. 47</figref> is a view showing an example of the time table to display the falling objects <b>79</b>. As illustrated in <figref idref="DRAWINGS">FIG. 47</figref>, the time table is a table in which an appearance time of the falling object <b>82</b> and an appearance location of the falling object on the screen <b>82</b> are associated each other.</p>
<p id="p-0259" num="0258"><figref idref="DRAWINGS">FIG. 48</figref> is a flowchart showing the process flow of the falling object appearance process in step S<b>304</b> of <figref idref="DRAWINGS">FIG. 45</figref>. As illustrated in <figref idref="DRAWINGS">FIG. 48</figref>, the CPU <b>201</b> increments the counter “Ca” in step S<b>340</b>. In step S<b>341</b>, the CPU <b>201</b> refers to the time table of <figref idref="DRAWINGS">FIG. 47</figref>. Then, in step S<b>342</b>, the CPU <b>201</b> determines whether or not a current count value of the counter “Ca” coincides with an appearance time on the time table. If the current count value does not coincide with the appearance time, it is not the time for the falling object <b>79</b> to appear. Therefore, the CPU <b>201</b> returns to the main routine, otherwise proceeds to step S<b>343</b>.</p>
<p id="p-0260" num="0259">In step S<b>343</b>, the CPU <b>201</b> calculates a coordinate of each sprite constituting the falling object <b>79</b> to be displayed with reference to the appearance location in the time table. In addition, the CPU <b>201</b> calculates storage location information of pixel pattern data of each sprite. In step S<b>344</b>, the CPU <b>201</b> sets, in a prescribed area of the inner memory <b>207</b>, other image information (such as size, color palette information and depth value) of each sprite constituting the falling object <b>79</b> to be displayed.</p>
<p id="p-0261" num="0260"><figref idref="DRAWINGS">FIG. 49</figref> is a flowchart showing the process flow of the falling object position control process in step S<b>305</b> of <figref idref="DRAWINGS">FIG. 45</figref>. As illustrated in <figref idref="DRAWINGS">FIG. 49</figref>, the CPU <b>201</b> calculates a Y-coordinate “Yd” of the falling object <b>79</b> being currently displayed on the screen <b>82</b> in step S<b>350</b>. More specifically, Yd←Yd−Vd<b>0</b>. In this way, the falling object <b>79</b> descends at a constant speed “Vd0”. In step S<b>351</b>, the CPU <b>201</b> determines whether or not the falling object <b>79</b> has clashed into the ground image. If it has clashed, the CPU <b>201</b> proceeds to step S<b>355</b>, otherwise proceeds to step S<b>352</b>. It is possible to determine whether the falling object has clashed or not by determining whether or not the Y-coordinate “Yd” of the falling object <b>79</b> exists in a prescribed area including a Y-coordinate of the ground image at the center.</p>
<p id="p-0262" num="0261">In step S<b>355</b>, the CPU <b>201</b> performs an extinguishment process of the falling object <b>79</b>. More specifically, the display coordinate of the falling object <b>79</b> is considered to be at outside of the area of the screen <b>82</b>. In step S<b>356</b>, the CPU <b>201</b> performs an extinguishment process of the life object <b>78</b>. More specifically, the display coordinate of the life object <b>78</b> is considered to be at outside of the area of the screen <b>82</b>.</p>
<p id="p-0263" num="0262">In step S<b>352</b>, the CPU <b>201</b> calculates the coordinate of each sprite constituting the falling object <b>79</b> on the basis of the Y-coordinate “Yd” of the falling object <b>79</b>. In addition, the CPU <b>201</b> calculates storage location information of pixel pattern data of each sprite constituting the falling object <b>79</b>. In step S<b>353</b>, the CPU <b>201</b> sets, in a prescribed area of the inner memory <b>207</b>, other image information (such as size, color palette information and depth value) of each sprite constituting the falling object <b>79</b>. In step S<b>354</b>, the CPU <b>201</b> determines whether or not all falling objects <b>79</b> being displayed have been applied the process from step S<b>350</b> to step S<b>356</b>. If all of them are already applied the process, the CPU <b>201</b> returns to the main routine, otherwise proceeds to step S<b>350</b>.</p>
<p id="p-0264" num="0263"><figref idref="DRAWINGS">FIG. 50</figref> is a flowchart showing the process flow of the catch judgment process in step S<b>306</b> of <figref idref="DRAWINGS">FIG. 45</figref>. As illustrated in <figref idref="DRAWINGS">FIG. 50</figref>, in step S<b>360</b>, the CPU <b>201</b> determines whether or not the X-coordinate “Xc” of the character <b>73</b> exists in a prescribed area including the X-coordinate “Xd” of the falling object <b>79</b> as its center. In step S<b>361</b>, if the X-coordinate “Xc” of the character <b>73</b> exists in the prescribed area including the X-coordinate “Xd” of the falling object <b>79</b>, the CPU <b>201</b> proceeds to step S<b>362</b>, otherwise proceeds to step S<b>365</b>. In step S<b>362</b>, the CPU <b>201</b> determines whether or not the difference between the Y-coordinate “Yd” of the falling object <b>79</b> and the Y-coordinate “Yc” of the character <b>73</b> is in a prescribed range. In step S<b>363</b>, if the difference between the Y-coordinate “Yd” of the falling object <b>79</b> and the Y-coordinate “Yc” of the character <b>73</b> is not in the prescribed range, the CPU <b>201</b> proceeds to step S<b>365</b>, otherwise proceeds to step S<b>364</b>. In step S<b>364</b>, the CPU <b>201</b> performs an extinguishment process of the falling object <b>73</b>. More specifically, the display coordinate of the falling object <b>79</b> is considered to be at outside of the range of the screen <b>82</b>. In step S<b>365</b>, the CPU <b>201</b> determines whether or not all falling objects <b>79</b> being displayed have been applied the process from step S<b>360</b> to step S<b>364</b>. If all of them are already applied the process, the CPU <b>201</b> returns to the main routine, otherwise proceeds to step S<b>360</b>.</p>
<p id="p-0265" num="0264">Meanwhile, as described above, in accordance with the present embodiment, the high processor <b>200</b> generates an image signal “VD” corresponding to the sliding speed |Va| of the sliding operation piece <b>2</b>. In this way, the operator can give changes to a displayed image by changing the sliding speed of the sliding operation piece <b>2</b>. In accordance with the example shown in <figref idref="DRAWINGS">FIG. 9</figref>, the high speed processor <b>200</b> controls movement speed of the character <b>73</b> on the screen <b>82</b> in response to the sliding speed |Va| of the sliding operation piece <b>2</b>. In this way, it is possible to control the movement speed of the displayed character <b>73</b> by changing the sliding speed |Va| of the sliding operation piece <b>2</b>.</p>
<p id="p-0266" num="0265">In addition, in accordance with the present embodiment, the high speed processor <b>200</b> generates an image signal “VD” corresponding to the sliding time of the sliding operation piece <b>2</b>. In this way, the operator can give changes to a displayed image by changing the sliding time of the sliding operation piece <b>2</b>. In accordance with the example shown in <figref idref="DRAWINGS">FIG. 10</figref> and <figref idref="DRAWINGS">FIG. 11</figref>, the high speed processor <b>200</b> controls movement distance of the character <b>73</b> in response to the sliding time without changing the sliding direction of the sliding operation piece <b>2</b>. In this way, it is possible to control the movement distance of the displayed character <b>73</b> by changing the sliding time of the sliding operation piece <b>2</b>.</p>
<p id="p-0267" num="0266">Furthermore, in accordance with the present embodiment, the high speed processor <b>200</b> generates an image signal “VD” corresponding to the sliding direction of the sliding operation piece <b>2</b>. In this way, the operator can give changes to a displayed image by changing the sliding direction of the sliding operation piece <b>2</b>. In accordance with the example shown in <figref idref="DRAWINGS">FIG. 12</figref>, the high speed processor <b>200</b> controls movement direction of the character <b>73</b> in response to the sliding direction of the sliding operation piece <b>2</b>. In this way, it is possible to control the movement direction of the displayed character <b>73</b> by changing the sliding direction of the sliding operation piece <b>2</b>.</p>
<p id="p-0268" num="0267">Furthermore, in accordance with the present embodiment, a linear encoder is provided with the infrared emitting diode <b>36</b>, the phototransistors <b>34</b> and <b>35</b>, and the sliding operation piece <b>2</b> having the reflecting pattern <b>43</b>. Therefore, it is possible to measure the sliding speed, the sliding direction and the sliding time with ease.</p>
<p id="p-0269" num="0268">Still further, in accordance with the present embodiment, the high speed processor <b>200</b> can execute the program <b>301</b> stored in the external ROM <b>91</b> of the memory cartridge <b>29</b>. Then, the high speed processor can generate an image signal “VD” and audio signals “AL” and “AR” on the basis of the image data <b>304</b> and the music data <b>307</b> stored in the external ROM <b>91</b>. Therefore, the user can enjoy various applications by changing the cartridge <b>29</b>.</p>
<p id="p-0270" num="0269">Still further, in accordance with the present embodiment, the high speed processor <b>200</b> generates audio signals “AL” and “AR” in response to triggers generated by operation of the sliding operation piece <b>2</b>. Therefore, the operator can control sound output as well as image display by operating the sliding operation piece <b>2</b>.</p>
<p id="p-0271" num="0270">Incidentally, the present invention is not limited to the above embodiments, and a variety of variations and modifications may be effected without departing from the spirit and scope thereof, as described in the following exemplary modifications.</p>
<p id="p-0272" num="0271">(1) In the above description, the state transition of the pulse signals A and B output by the optical sensor unit <b>90</b> is detected by the software counter. Alternatively, it is possible to detect by a hardware counter of the input/output control circuit <b>209</b>.</p>
<p id="p-0273" num="0272">(2) In the above description, the sliding operation piece <b>2</b> is provided with the reflecting pattern <b>43</b> consisting of the light reflecting regions <b>45</b> and the light absorbing regions <b>44</b>, and reflected light is detected by the reflection type optical sensor <b>90</b>. However, the sensor is not limited thereto, and it is possible to use a transmission type instead. More specifically, the sliding operation piece <b>2</b> is formed with a pattern comprising light transmissive regions and light blocking regions which are alternately arranged. Then, a transmission type optical sensor detects transmitted light.</p>
<p id="p-0274" num="0273">(3) <figref idref="DRAWINGS">FIG. 51</figref> is a view showing other example of use of the automatic musical instrument as an image signal generation apparatus. As illustrated in <figref idref="DRAWINGS">FIG. 51</figref>, the automatic musical instrument main body <b>1</b> serving as a master is connected with the automatic musical instrument main body <b>1000</b> by the cable <b>411</b>. Therefore, two operators can perform together. Meanwhile, the automatic musical instrument main body <b>1000</b> and the sliding operation piece <b>3</b> have same functionality as the automatic musical instrument main body <b>1</b> and the sliding operation piece <b>2</b>.</p>
<p id="p-0275" num="0274">The cable <b>411</b> is connected to the connecter <b>22</b> of the automatic musical instrument main body <b>1</b> (refer to <figref idref="DRAWINGS">FIG. 2B</figref>) and the connecter (not shown) of the automatic musical instrument main body <b>1000</b>. The cable <b>411</b> comprises two lines for transmitting pulse signals (corresponding to pulse signals A and B) output from an optical sensor unit (corresponding to the optical sensor unit <b>90</b>) in the automatic musical instrument main body <b>1000</b> to the automatic musical instrument main body <b>1</b>, two power supply lines (Vcc and GND) for supplying power supply voltage “Vcc” and ground voltage “GND” from the main body <b>1</b> to the main body <b>1000</b>, a line for transmitting a signal to turn the main body <b>1000</b> off output from the main body <b>1</b>, and a line for transmitting a signal for turning vibrato of the main body <b>1000</b> off and on to the main body <b>1</b>.</p>
<p id="p-0276" num="0275">As explained above, two operators can enjoy playing an automatic performance and a game together by connecting the main bodies <b>1</b> and <b>1000</b> of the automatic musical instruments. For example, as illustrated in <figref idref="DRAWINGS">FIG. 52</figref>, it is possible to display two characters <b>73</b> and <b>415</b> which are operated by respective operators of the main body <b>1</b> and <b>1000</b> in an applicable example of the running game of <figref idref="DRAWINGS">FIG. 9</figref>. The operators can make their characters compete against each other. In addition to the images in <figref idref="DRAWINGS">FIG. 9</figref>, a time indicating portion <b>260</b> and a current location indicating object <b>261</b> for the character <b>415</b> are displayed on the screen of <figref idref="DRAWINGS">FIG. 52</figref>.</p>
<p id="p-0277" num="0276">(4) Since the optical fiber <b>91</b> is located L/<b>4</b> apart from the optical fiber <b>92</b>, the differential phase between the pulse signal A output and the pulse signal B is (90 degrees) or (−90 degrees). However, the distance between the two optical fibers is not limited thereto.</p>
<p id="p-0278" num="0277">(5) In this embodiment, the trigger is generated when the sliding speed of the sliding operation piece <b>2</b> exceeds the prescribed threshold value and the sliding direction is changed at the same time. However, the trigger generating requirement is not limited thereto. For example, it is possible to generate the trigger only when the sliding speed of the sliding operation piece <b>2</b> exceeds the prescribed threshold value. Alternatively, it is possible to generate the trigger only when the sliding direction is changed.</p>
<p id="p-0279" num="0278">(6) While any appropriate processor can be used as the high speed processor <b>200</b> of <figref idref="DRAWINGS">FIG. 14</figref>, it is preferred to use the high speed processor in relation to which the applicant has been filed patent applications.</p>
<p id="p-0280" num="0279">The details of this high speed processor are disclosed, for example, in Jpn. unexamined patent publication No. 10-307790 and U.S. Pat. No. 6,070,205 corresponding thereto.</p>
<p id="p-0281" num="0280">The foregoing description of the embodiments has been presented for purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form described, and obviously many modifications and variations are possible in light of the above teaching. The embodiment was chosen in order to explain most clearly the principles of the invention and its practical application thereby to enable others in the art to utilize most effectively the invention in various embodiments and with various modifications as are suited to the particular use contemplated.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. An image signal generation apparatus, comprising:
<claim-text>a main body provided with a part to be slid;</claim-text>
<claim-text>a sliding operation piece that is operated to slidably move in contact with the part to be slid of said main body; and</claim-text>
<claim-text>a processor operable to control movement velocity of an image displayed on a display device based on sliding speed of said sliding operation piece,</claim-text>
<claim-text>wherein said main body includes a measuring unit operable to measure the sliding speed of said sliding operation piece,</claim-text>
<claim-text>wherein said measuring unit includes a optical sensor having a light emitting element and light receiving element,</claim-text>
<claim-text>wherein said sliding operation piece is formed with first light receiving areas and second light receiving areas which are alternately arranged in longitudinal direction and have different optical characteristic,</claim-text>
<claim-text>wherein said light receiving element operable to receive light from said light emitting element via said first light receiving areas of said sliding operation piece and convert it into an electrical signal, and</claim-text>
<claim-text>wherein said processor generate the image signal corresponding to the electrical signal output from said light receiving element.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. An image signal generation apparatus, comprising:
<claim-text>a main body provided with a part to be slid;</claim-text>
<claim-text>a sliding operation piece that is operated to slidably move in contact with the part to be slid of said main body; and</claim-text>
<claim-text>a processor operable to control movement distance of an image displayed on a display device based on sliding time of said sliding operation piece being slid without a change in direction,</claim-text>
<claim-text>wherein said main body includes a measuring unit operable to measure the sliding time of said sliding operation piece,</claim-text>
<claim-text>wherein said measuring unit includes a optical sensor having a light emitting element and light receiving element,</claim-text>
<claim-text>wherein said sliding operation piece is formed with first light receiving areas and second light receiving areas which are alternately arranged in longitudinal direction and have different optical characteristic,</claim-text>
<claim-text>wherein said light receiving element operable to receive light from said light emitting element via said first light receiving areas of said sliding operation piece and convert it into an electrical signal, and</claim-text>
<claim-text>wherein said processor generate the image signal corresponding to the electrical signal output from said light receiving element.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. An image signal generation apparatus, comprising:
<claim-text>a main body provided with a part to be slid;</claim-text>
<claim-text>a sliding operation piece that is operated to slidably move in contact with the part to be slid of said main body; and</claim-text>
<claim-text>a processor operable to control movement velocity of an image displayed on a display device based on sliding speed of said sliding operation piece,</claim-text>
<claim-text>wherein said main body includes a measuring unit operable to measure the sliding speed of said sliding operation piece,</claim-text>
<claim-text>wherein said measuring unit comprises a optical sensor having a light emitting element, a first light receiving element and a second light receiving element,</claim-text>
<claim-text>wherein said sliding operation piece is formed with first light receiving areas and second light receiving areas which are alternately arranged in longitudinal direction and have different optical characteristic,</claim-text>
<claim-text>wherein said first light receiving element operable to receive light from said light emitting element via said first light receiving areas of said sliding operation piece and convert it into a first electrical signal,</claim-text>
<claim-text>wherein said second light receiving element operable to receive light from said light emitting element via said first light receiving areas of said sliding operation piece and convert it into a second electrical signal,</claim-text>
<claim-text>wherein said first light receiving element and said second light receiving element are arranged at a predetermined distance in the sliding direction, and the predetermined distance is selected in order to create a certain phase difference between the first electrical signal and the second electrical signal, and</claim-text>
<claim-text>wherein said processor generates the image signal on the basis of the first electrical signal and the second electrical signal.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. An image signal generation apparatus, comprising:
<claim-text>a main body provided with a part to be slid;</claim-text>
<claim-text>a sliding operation piece that is operated to slidably move in contact with the part to be slid of said main body; and</claim-text>
<claim-text>a processor operable to control movement distance of an image displayed on a display device based on sliding time of said sliding operation piece being slid without a change in direction,</claim-text>
<claim-text>wherein said main body includes a measuring unit operable to measure the sliding time of said sliding operation piece,</claim-text>
<claim-text>wherein said measuring unit comprises a optical sensor having a light emitting element, a first light receiving element and a second light receiving element,</claim-text>
<claim-text>wherein said sliding operation piece is formed with first light receiving areas and second light receiving areas which are alternately arranged in longitudinal direction and have different optical characteristic,</claim-text>
<claim-text>wherein said first light receiving element operable to receive light from said light emitting element via said first light receiving areas of said sliding operation piece and convert it into a first electrical signal,</claim-text>
<claim-text>wherein said second light receiving element operable to receive light from said light emitting element via said first light receiving areas of said sliding operation piece and convert it into a second electrical signal,</claim-text>
<claim-text>wherein said first light receiving element and said second light receiving element are arranged at a predetermined distance in the sliding direction, and the predetermined distance is selected in order to create a certain phase difference between the first electrical signal and the second electrical signal, and</claim-text>
<claim-text>wherein said processor generates the image signal on the basis of the first electrical signal and the second electrical signal.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. An image signal generation apparatus, comprising:
<claim-text>a main body provided with a part to be slid;</claim-text>
<claim-text>a sliding operation piece that is operated to slidably move in contact with the part to be slid of said main body; and</claim-text>
<claim-text>a processor operable to control movement direction of an image displayed on a display device based on sliding direction of said sliding operation piece,</claim-text>
<claim-text>wherein said main body includes a measuring unit operable to measure the sliding direction of said sliding operation piece,</claim-text>
<claim-text>wherein said measuring unit comprises a optical sensor having a light emitting element, a first light receiving element and a second light receiving element,</claim-text>
<claim-text>wherein said sliding operation piece is formed with first light receiving areas and second light receiving areas which are alternately arranged in longitudinal direction and have different optical characteristic,</claim-text>
<claim-text>wherein said first light receiving element operable to receive light from said light emitting element via said first light receiving areas of said sliding operation piece and convert it into a first electrical signal,</claim-text>
<claim-text>wherein said second light receiving element operable to receive light from said light emitting element via said first light receiving areas of said sliding operation piece and convert it into a second electrical signal,</claim-text>
<claim-text>wherein said first light receiving element and said second light receiving element are arranged at a predetermined distance in the sliding direction, and the predetermined distance is selected in order to create a certain phase difference between the first electrical signal and the second electrical signal, and</claim-text>
<claim-text>wherein said processor generates the image signal on the basis of the first electrical signal and the second electrical signal.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. An image signal generation program stored on computer-readable medium which, when executed, causes a computer to perform processing, said processing comprising:
<claim-text>a step of measuring sliding speed of a bow-shaped sliding operation piece that is slidably moved in contact with a part to be slid of a main body; and</claim-text>
<claim-text>a step of controlling movement velocity of an image displayed on a display device based on the sliding speed of said sliding operation piece.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. An image signal generation program stored on computer-readable medium which, when executed, causes a computer to perform processing, said processing comprising:
<claim-text>a step of measuring sliding time of a bow-shaped sliding operation piece that is slidably moved in contact with a part to be slid of a main body; and</claim-text>
<claim-text>a step of controlling movement distance of an image displayed on a display device based on the sliding time of said sliding operation piece being slid without change in direction.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. An image signal generation program stored on computer-readable medium which, when executed, causes a computer to perform processing, said processing comprising:
<claim-text>a step of measuring sliding direction of a bow-shaped sliding operation piece that is slidably moved in contact with a part to be slid of a main body; and</claim-text>
<claim-text>a step of controlling movement direction of an image displayed on a display device based on the sliding direction of said sliding operation piece.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. An image signal generation method comprising:
<claim-text>a step of measuring sliding speed of a bow-shaped sliding operation piece that is slidably moved in contact with a part to be slid of a main body; and</claim-text>
<claim-text>a step of controlling movement velocity of an image displayed on a display device based on the sliding speed of said sliding operation piece.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. An image signal generation method comprising:
<claim-text>a step of measuring sliding time of a bow-shaped sliding operation piece that is slidably moved in contact with a part to be slid of a main body; and</claim-text>
<claim-text>a step of controlling movement distance of an image displayed on a display device based on the sliding time of said sliding operation piece being slid without change in direction.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. An image signal generation method comprising:
<claim-text>a step of measuring sliding direction of a bow-shaped sliding operation piece that is slidably moved in contact with a part to be slid of a main body; and</claim-text>
<claim-text>a step of controlling movement direction of an image displayed on a display device based on the sliding direction of said sliding operation piece.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. An image signal generation apparatus, comprising:
<claim-text>a main body provided with a part to be slid;</claim-text>
<claim-text>a sliding operation piece that is operated to slidably move in contact with the part to be slid of said main body; and</claim-text>
<claim-text>a processor operable to control movement velocity of an image displayed on a display device based on sliding speed of said sliding operation piece,</claim-text>
<claim-text>wherein said main body includes a measuring unit operable to measure the sliding speed of said sliding operation piece, and</claim-text>
<claim-text>wherein the sliding operation piece is a bow-shaped piece.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. An image signal generation apparatus, comprising:
<claim-text>a main body provided with a part to be slid;</claim-text>
<claim-text>a sliding operation piece that is operated to slidably move in contact with the part to be slid of said main body; and</claim-text>
<claim-text>a processor operable to control movement distance of an image displayed on a display device based on sliding time of said sliding operation piece being slid without a change in direction,</claim-text>
<claim-text>wherein said main body includes a measuring unit operable to measure the sliding time of said sliding operation piece, and</claim-text>
<claim-text>wherein the sliding operation piece is a bow-shaped piece.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. An image signal generation apparatus, comprising:
<claim-text>a main body provided with a part to be slid;</claim-text>
<claim-text>a sliding operation piece that is operated to slidably move in contact with the part to be slid of said main body; and</claim-text>
<claim-text>a processor operable to control movement direction of an image displayed on a display device based on sliding direction of said sliding operation piece,</claim-text>
<claim-text>wherein said main body includes a measuring unit operable to measure the sliding direction of said sliding operation piece, and</claim-text>
<claim-text>wherein the sliding operation piece is a bow-shaped piece.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The image signal generation apparatus as claimed in <claim-ref idref="CLM-00013">claim 13</claim-ref>,
<claim-text>wherein said processor executes a program stored in a removable storage medium, and generates the image based on image information stored in the removable storage medium.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The image signal generation apparatus as claimed in <claim-ref idref="CLM-00014">claim 14</claim-ref>,
<claim-text>wherein said processor executes a program stored in a removable storage medium, and generates the image based on image information stored in the removable storage medium.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The image signal generation apparatus as claimed in <claim-ref idref="CLM-00013">claim 13</claim-ref>,
<claim-text>wherein said processor generates an audio signal in response to a trigger issued based on sliding operation of said sliding operation piece.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The image signal generation apparatus as claimed in <claim-ref idref="CLM-00014">claim 14</claim-ref>,
<claim-text>wherein said processor generates an audio signal in response to a trigger issued based on sliding operation of said sliding operation piece.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The image signal generation apparatus as claimed in <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein said processor executes a program stored in a removable storage medium, and generates the image on the basis of image information stored in the removable storage medium.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The image signal generation apparatus as claimed in <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein said processor generates an audio signal in response to a trigger issued on the basis of sliding operation of said sliding operation piece.</claim-text>
</claim>
</claims>
</us-patent-grant>
