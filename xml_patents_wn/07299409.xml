<us-patent-grant lang="EN" dtd-version="v4.2 2006-08-23" file="US07299409-20071120.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20071106" date-publ="20071120">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>07299409</doc-number>
<kind>B2</kind>
<date>20071120</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>10383306</doc-number>
<date>20030307</date>
</document-id>
</application-reference>
<us-application-series-code>10</us-application-series-code>
<us-term-of-grant>
<us-term-extension>888</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>15</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>715513</main-classification>
<further-classification>7155011</further-classification>
<further-classification>715716</further-classification>
</classification-national>
<invention-title id="d0e53">Dynamically updating rendered content</invention-title>
<references-cited>
<citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>6452609</doc-number>
<kind>B1</kind>
<name>Katinsky et al.</name>
<date>20020900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>715716</main-classification></classification-national>
</citation>
<citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>7043525</doc-number>
<kind>B2</kind>
<name>Tuttle et al.</name>
<date>20060500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709203</main-classification></classification-national>
</citation>
<citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>7117436</doc-number>
<kind>B1</kind>
<name>O'Rourke et al.</name>
<date>20061000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>715517</main-classification></classification-national>
</citation>
<citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>2002/0073149</doc-number>
<kind>A1</kind>
<name>Young</name>
<date>20020600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709204</main-classification></classification-national>
</citation>
<citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2002/0107945</doc-number>
<kind>A1</kind>
<name>George et al.</name>
<date>20020800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709222</main-classification></classification-national>
</citation>
<citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2002/0152239</doc-number>
<kind>A1</kind>
<name>Bautista-Lloyd et al.</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707513</main-classification></classification-national>
</citation>
<citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2003/0021282</doc-number>
<kind>A1</kind>
<name>Hospodor</name>
<date>20030100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370401</main-classification></classification-national>
</citation>
<citation>
<nplcit num="00008">
<othercit>Moncur, “Sams Teach Yourself JavaScript in 24 Hours, Third Edition”, Jun. 7, 2002, Sams, 3rd, pp. 1-6.</othercit>
</nplcit>
<category>cited by examiner</category>
</citation>
<citation>
<nplcit num="00009">
<othercit>McGlashan, “Dialog Requirements for Voice Markup Languages,” Dec. 23, 1999, W3C, pp. 1-13, &lt;http://www.w3.org/TR/voice-dialog-reqs/&gt;.</othercit>
</nplcit>
<category>cited by examiner</category>
</citation>
<citation>
<nplcit num="00010">
<othercit>Hoque, “JavaScript Event Handlers”, Jun. 24, 2001, Intranet Journal, pp. 1-5, &lt;http://web.archive.org/web/20010624080710/http://www.intranetjournal.com/corner/hoque/eh-1.shtml&gt;.</othercit>
</nplcit>
<category>cited by examiner</category>
</citation>
<citation>
<nplcit num="00011">
<othercit>The Perfect Storm Media Page, “The Perfect Storm”, Oct. 2, 2002, Warner Brothers, pp. 1-3, &lt;http://web.archive.org/web/20021002201647/http://perfectstorm.warnerbros.com/cmp/video.html&gt;.</othercit>
</nplcit>
<category>cited by examiner</category>
</citation>
<citation>
<nplcit num="00012">
<othercit>Real.com, “Error #29”, Jan. 27, 2002, Real Networks, pp. 1-2, &lt;http://web.archive.org/web/20020127101206/http://service.real.com/help/errors/error29.html&gt;.</othercit>
</nplcit>
<category>cited by examiner</category>
</citation>
<citation>
<nplcit num="00013">
<othercit>Microsoft, Microsoft Computer Dictionary Fifth Edition, 2002, Microsoft, Fifth Edition, pp. 1-4.</othercit>
</nplcit>
<category>cited by examiner</category>
</citation>
<citation>
<nplcit num="00014">
<othercit>JavaScript Kit, Understand “event handlers” in JavaScript, Jun. 11, 2002, JavaScript Kit, pp. 1-2.</othercit>
</nplcit>
<category>cited by examiner</category>
</citation>
<citation>
<nplcit num="00015">
<othercit>The American Heritage College Dictionary, 2002, Houghton Mifflin, Fourth Edition, pp. 1-4.</othercit>
</nplcit>
<category>cited by examiner</category>
</citation>
<citation>
<nplcit num="00016">
<othercit>“IBM Tivoli Service Level Advisor V1.1 Helps Enable Improved Service Level Management”, Apr. 9, 2002, IBM United States Software Announcement 202-086 (p. 1-3).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00017">
<othercit>van den Broecke, Just, “Pushlets—Whitepaper”, Aug. 6, 2002, Just Objects B.V., Feb. 24, 2003, &lt;http://www.pushlets.com/doc/whitepaper-all.html&gt; (p. 1-21).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
</references-cited>
<number-of-claims>22</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>7155001</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715513</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715716</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>5</number-of-drawing-sheets>
<number-of-figures>5</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20040177147</doc-number>
<kind>A1</kind>
<date>20040909</date>
</document-id>
</related-publication>
</us-related-documents>
<parties>
<applicants>
<applicant sequence="001" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Joshi</last-name>
<first-name>Niraj P.</first-name>
<address>
<city>Cary</city>
<state>NC</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="002" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Leah</last-name>
<first-name>Robert C.</first-name>
<address>
<city>Cary</city>
<state>NC</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="003" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>McMahan</last-name>
<first-name>Paul F.</first-name>
<address>
<city>Apex</city>
<state>NC</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
</applicants>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<last-name>Doubet</last-name>
<first-name>Marcia L.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="02" rep-type="attorney">
<addressbook>
<last-name>Gibbs</last-name>
<first-name>Andre M.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</parties>
<assignees>
<assignee>
<addressbook>
<orgname>International Business Machines Corporation</orgname>
<role>02</role>
<address>
<city>Armonk</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Hong</last-name>
<first-name>Stephen</first-name>
<department>2178</department>
</primary-examiner>
<assistant-examiner>
<last-name>Faber</last-name>
<first-name>David</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Techniques are disclosed for efficiently updating rendered content (such as content of a Web page) using a “slow-loading” content element, such as a slow-loading image. A reference is embedded within the markup language notation for the content to be rendered, where this reference identifies the source of the slow-loading content element. Delivery of the slow-loading content therefore begins automatically, when the content is rendered. Event handling attributes are specified with the reference, where values of these attributes identify client-side logic to be invoked when the associated event occurs. If the server determines that the rendered content, or some portion thereof, should be asynchronously updated, it abruptly terminates delivery of the slow-loading content. This termination triggers an event handler, which operates to automatically request reloading of the content. Attributes are also preferably specified for handling abort events and successful loading events, causing the client to request reloading of the content in each case (and restarting delivery of the slow-loading content).</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="127.17mm" wi="183.90mm" file="US07299409-20071120-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="184.07mm" wi="139.95mm" orientation="landscape" file="US07299409-20071120-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="232.41mm" wi="170.01mm" orientation="landscape" file="US07299409-20071120-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="181.53mm" wi="125.65mm" orientation="landscape" file="US07299409-20071120-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="144.44mm" wi="87.46mm" orientation="landscape" file="US07299409-20071120-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="230.97mm" wi="169.33mm" orientation="landscape" file="US07299409-20071120-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0002" num="0001">1. Field of the Invention</p>
<p id="p-0003" num="0002">The present invention relates to computer software, and deals more particularly with techniques for efficiently updating rendered content (such as content of a Web page) using a “slow-loading” content element (e.g., a slow-loading image).</p>
<p id="p-0004" num="0003">2. Description of the Related Art</p>
<p id="p-0005" num="0004">The popularity of computer networking environments has increased tremendously in recent years, due in large part to growing business and consumer use of the public Internet and the subset thereof known as the “World Wide Web” (or simply “Web”). Other types of computer networking environments, such as corporate intranets and extranets, are also increasingly popular. As solutions providers focus on delivering improved Web-based computing, many of the solutions which are developed are adaptable to other computer networking environments. Thus, references herein to the Internet and Web are for purposes of illustration and not of limitation. (Furthermore, the terms “Internet”, “Web”, and “World Wide Web” are used interchangeably herein.)</p>
<p id="p-0006" num="0005">Most modern computing applications render their displayable output using a graphical user interface, or “GUI”. In a computer networking environment such as the Internet, client software known as a “browser” is typically responsible for requesting content from a server application and for rendering the information sent by the server in response. Commonly, the rendered information is formatted as a Web page, where the layout of the Web page is defined using a markup language such as Hypertext Markup Language (“HTML”). (References herein to rendered content are in terms of displayed HTML Web pages, although this is by way of illustration and not of limitation.)</p>
<p id="p-0007" num="0006">Many client/server applications that operate in computer networking environments need to asynchronously update a GUI displayed on the client, based on (for example) some change in the server. Examples of this type of application include system monitoring applications such as Tivoli Business Systems Manager and Tivoli Enterprise Console® (which may need to asynchronously display alert notifications to a system administrator); messaging/chat applications such as Lotus Sametime® (e.g., to display an indication of which people on the user's instant messaging buddy list are currently available for instant messaging); and so forth. (“Tivoli Enterprise Console” is a registered trademark of International Business Machines Corporation and “Sametime” is a registered trademark of Lotus Development Corporation.)</p>
<p id="p-0008" num="0007">In the prior art, applications that need to asynchronously update a displayed GUI at a client typically use one of the following techniques to perform the update:</p>
<p id="p-0009" num="0008">1) The client binds to a socket address and listens for connections from the server. In this approach, the client starts a listening thread attached to a socket. When an update occurs, the server creates a connection to the port where the client is listening, delivers the update notification, and then disconnects.</p>
<p id="p-0010" num="0009">2) The client polls the server. In this approach, the client connects to the server periodically to check for updates, and then disconnects until the next polling interval. Typically, client polling results in downloading content without regard to whether it has been updated.</p>
<p id="p-0011" num="0010">3) The client maintains a persistent connection to the server. Here, the client connects to the server and “subscribes” to be notified of updates. When an update occurs, the server sends an update notification over this already-existing connection.</p>
<p id="p-0012" num="0011">When the client application is a Web interface (e.g., HTML displayed in a Web browser), there is still often a need to asynchronously update the client's displayed GUI. Examples of such scenarios include any application where at least some portion of the content delivered to the client for rendering via the Web interface is dynamic in nature—such as stock ticker feeds, weather forecasts, etc. (as well as Web versions of the previously-described monitoring and chat scenarios). <figref idref="DRAWINGS">FIG. 1</figref> shows a sample Web page layout <b>100</b> that has a header <b>110</b>, body <b>120</b>, and footer <b>130</b>. In addition, a dynamic content area <b>140</b> is rendered in the upper right portion of the display. This dynamic content area <b>140</b> may be structured as a frame within page <b>100</b>, and might be used to display a stock ticker with stocks the user wants to monitor, or the current temperature in the user's location, and so forth. However, the techniques described above for asynchronously updating a GUI display become much more problematic and difficult to implement in the Web environment, largely because the underlying technologies (the Hypertext Transport Protocol used for message delivery, the HTML notation, and the JavaScript® scripting language, in particular) don't readily facilitate these types of interactions. (“JavaScript” is a registered trademark of Sun Microsystems, Inc.)</p>
<p id="p-0013" num="0012">It is not possible to use the first technique listed above (where the client listens for server connections) without introducing a Java™ applet, and using an applet in this way is often not possible since an applet that performs this type of privileged operation would require a cryptographic signature on the applet as well a hole in the client's firewall. When using the second technique listed above (where the client polls the server), a great deal of unnecessary network traffic can be generated, and the server can easily get overloaded. Client polling can also cause the GUI to flicker, and can interrupt the user's interactions with the Web page (since the page is suddenly and abruptly refreshed). These disadvantages often make the third technique listed above (use of a persistent connection) the most attractive. (“Java” is a trademark of Sun Microsystems, Inc.)</p>
<p id="p-0014" num="0013">A commonly-used implementation of the third technique is a technology known as “pushlets”. Pushlets basically use an HTML frame to display the client's HTML and a hidden HTML frame to maintain a persistent connection to a servlet. The connection remains persistent because the servlet never closes the output stream of the HttpServletResponse that is destined for the hidden frame. Instead, the servlet holds onto this output stream and whenever a client update is needed, the server sends JavaScript commands to the hidden frame, where this JavaScript contains the updated HTML. A JavaScript listener function in the hidden frame receives the JavaScript commands, and uses Dynamic HTML (“DHTML”) to replace the contents of the visible frame accordingly. Refer to “Pushlets—Whitepaper”, by Just van den Broecke, published Aug. 6, 2002 by Just Objects B. V. on the Internet at http://www.pushlets.com/doc/ whitepaper-all.html for more information on pushlet technology.</p>
<p id="p-0015" num="0014">However, there are several problems with pushlets, several of which are described in the above-referenced white paper on pushlets. These problems include:</p>
<p id="p-0016" num="0015">1) Interference from content buffering. The HTTP framework was not designed for persistent connections, so the content of an HTTP response is often buffered by some component of the network. Buffering may be introduced by an HTTP proxy server, network cache, or even the servlet engine's HTTP server. This buffering can delay the client update, or even prevent it altogether.</p>
<p id="p-0017" num="0016">2) No reconnect mechanism is available. Again, since the HTTP framework was not designed for persistent connections, the HTTP server and/or client often terminate an HTTP request if it has been running for too long. It is also possible for the user to accidentally (or purposefully) terminate the persistent HTTP request by pressing the “Escape” key or the “Stop” button. When the HTTP request ends in this way, the client has no way to automatically reconnect the persistent connection to the server, or to signal the user that he has caused a disconnect.</p>
<p id="p-0018" num="0017">3) Client memory leaks may occur. When using pushlets, the hidden frame is receiving new HTML strings to display in the visible frame. These HTML strings become part of the JavaScript that is contained in the hidden frame's Document Object Model (“DOM”). The browser will not free memory associated with a DOM until the page containing that DOM is reloaded. Since the hidden frame is not reloaded, the memory footprint of the browser can grow without bounds. (Hereinafter, the terms “refresh”, “redraw”, and “reload” are used synonymously when referring to redisplaying content.)</p>
<p id="p-0019" num="0018">4) Cross-browser issues with DHTML support. While a standard version of DHTML is promulgated by the World Wide Web Consortium (“W3C”), different browser vendors have provided their own unique extensions. These vendor-specific extensions complicate efforts to deploy pushlets uniformly across all browser platforms.</p>
<p id="p-0020" num="0019">Accordingly, what is needed are improved techniques for asynchronously updating rendered content, while avoiding drawbacks of prior art approaches.</p>
<heading id="h-0002" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0021" num="0020">An object of the present invention is to provide improved techniques for asynchronously updating rendered content.</p>
<p id="p-0022" num="0021">Another object of the present invention is to define techniques for more efficiently refreshing Web page content.</p>
<p id="p-0023" num="0022">Still another object of the present invention is to define techniques for leveraging existing Web-based components to dynamically update a rendered Web page.</p>
<p id="p-0024" num="0023">Other objects and advantages of the present invention will be set forth in part in the description and in the drawings which follow and, in part, will be obvious from the description or may be learned by practice of the invention.</p>
<p id="p-0025" num="0024">To achieve the foregoing objects, and in accordance with the purpose of the invention as broadly described herein, the present invention provides software-implemented methods, systems, and computer program products for asynchronously reloading dynamically-updateable content such as a Web page. In one aspect of preferred embodiments, this technique comprises: embedding a reference to slow-loading content into markup notation for a Web page to be rendered; and specifying, with the reference, one or more event handlers that will automatically reload content into the Web page upon occurrence of corresponding events. The reference to slow-loading content may be an image element, an audio element, a video element, or other similar element encoded in the markup language notation. The event handlers may be specified as attributes of the element. The markup language may be HTML or another markup language.</p>
<p id="p-0026" num="0025">Typically, the automatically reloaded content is to be loaded into a dynamically-updateable portion of the Web page, and the Web page will be rendered on a client, according to its markup notation, causing delivery of the referenced slow-loading content to begin (from a server that is connected to the client by a connection over a network).</p>
<p id="p-0027" num="0026">The technique may further comprise: subsequently detecting, by the server, that the dynamically-updateable portion of the Web page should be updated; and terminating, by the server, the delivery of the slow-loading content, responsive to the detection, thereby triggering a corresponding event handler at the client.</p>
<p id="p-0028" num="0027">Or, the technique may further comprise: subsequently detecting one of the events at the client (including interruption in delivery of the slow-loading content, a network error, a user interrupting delivery of the slow-loading content, or completion of delivery of the slow-loading content); and automatically triggering, by the client responsive to the subsequent detection, a corresponding event handler at the client.</p>
<p id="p-0029" num="0028">In any case, the triggering of the event handler preferably further comprises automatically invoking, on the client, scripting logic that requests reloading the dynamically-updateable portion of the Web page. The technique may further comprise: receiving the reload request at the server; delivering, from the server to the client, a response containing new content that is responsive to the reload request, wherein the new content also embeds a reference to slow-loading content and specifies one or more event handlers; and rendering the new content from the delivered response at the client, wherein the rendering automatically sends a new request to the server for delivering the slow-loading content referenced in this new content.</p>
<p id="p-0030" num="0029">Optionally, application properties and/or network properties may be used to adjust generation of the requested slow-loading content before returning the generated slow-loading content over the network to the client.</p>
<p id="p-0031" num="0030">In another aspect of preferred embodiments, the technique comprises: embedding a reference to slow-loading content into markup notation for content that is to be rendered, wherein at least a portion of the content to be rendered is dynamically-updateable; and specifying, with the reference, one or more event handlers that will automatically reload content into the dynamically-update portion of the rendered content upon occurrence of corresponding events. This technique may further comprise rendering the content on a target device, according to its markup notation, and beginning delivery of the referenced slow-loading content from a server that is communicatively connected to the target device. Preferably, the technique further comprises: subsequently detecting, at the client, that one of the events has occurred; and automatically requesting, by the corresponding event handler, that the slow-loading content be reloaded.</p>
<p id="p-0032" num="0031">The target device may be (for example) a kiosk having a dynamically-updateable display, a device that provides a Web console having a dynamically-updateable display, or a device that renders information for a Web application.</p>
<p id="p-0033" num="0032">The disclosed techniques may also be used advantageously in methods of doing business, whereby a service is offered to customers for delivering the slow-loading content elements on which preferred embodiments are based, and/or for deploying markup language content that invokes delivery of these slow-loading content elements. This service may be provided under various revenue models, such as pay-per-use billing, monthly or other periodic billing, and so forth. The advantages offered to clients over prior art techniques include more efficiently-refreshed content, more timely content, and/or reduced network traffic.</p>
<p id="p-0034" num="0033">The present invention will now be described with reference to the following drawings, in which like reference numbers denote the same element throughout.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. 1</figref> provides a sample Web page layout that includes a frame for rendering dynamic content, where the present invention provides improvements over prior art techniques for rendering content in this frame;</p>
<p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. 2</figref> is a block diagram of a computer hardware environment in which the present invention may be practiced;</p>
<p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. 3</figref> is a diagram of a networked computing environment in which the present invention may be practiced;</p>
<p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. 4</figref> illustrates syntax used for dynamic content refreshes, according to the present invention; and</p>
<p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. 5</figref> provides a flow chart that sets forth logic which may be used to implement a preferred embodiment of the present invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DESCRIPTION OF PREFERRED EMBODIMENTS</heading>
<p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. 2</figref> illustrates a representative computer hardware environment in which the present invention may be practiced. For example, on the client side of a network connection, techniques of preferred embodiments may operate in a representative single user computer workstation <b>210</b>, such as a personal computer, which typically includes a number of related peripheral devices. The workstation <b>210</b> includes a microprocessor <b>212</b> and a bus <b>214</b> employed to connect and enable communication between the microprocessor <b>212</b> and the components of the workstation <b>210</b> in accordance with known techniques. The workstation <b>210</b> typically includes a user interface adapter <b>216</b>, which connects the microprocessor <b>212</b> via the bus <b>214</b> to one or more interface devices, such as a keyboard <b>218</b>, mouse <b>220</b>, and/or other interface devices <b>222</b>, which can be any user interface device, such as a touch sensitive screen, digitized entry pad, etc. The bus <b>214</b> also connects a display device <b>224</b>, such as an LCD screen or monitor, to the microprocessor <b>212</b> via a display adapter <b>226</b>. The bus <b>214</b> also connects the microprocessor <b>212</b> to memory <b>228</b> and long-term storage <b>230</b> which can include a hard drive, diskette drive, tape drive, etc.</p>
<p id="p-0041" num="0040">The workstation <b>210</b> may communicate with other computers or networks of computers, for example via a communications channel or modem <b>232</b>. Alternatively, the workstation <b>210</b> may communicate using a wireless interface at <b>232</b>, such as a cellular digital packet data (“CDPD”) card. The workstation <b>210</b> may be associated with such other computers in a local area network (“LAN”) or a wide area network (“WAN”), or the workstation <b>210</b> can be a client in a client/server arrangement with another computer, etc. All of these configurations, as well as the appropriate communications hardware and software, are known in the art.</p>
<p id="p-0042" num="0041"><figref idref="DRAWINGS">FIG. 3</figref> illustrates a data processing network <b>240</b> in which the present invention may be practiced. The data processing network <b>240</b> may include a plurality of individual networks, such as wireless network <b>242</b> and network <b>244</b>, each of which may include a plurality of individual workstations <b>210</b>. Additionally, as those skilled in the art will appreciate, one or more LANs may be included (not shown), where a LAN may comprise a plurality of intelligent workstations coupled to a host processor.</p>
<p id="p-0043" num="0042">Still referring to <figref idref="DRAWINGS">FIG. 3</figref>, the networks <b>242</b> and <b>244</b> may also include mainframe computers or servers, such as a gateway computer <b>246</b> or server <b>247</b> (which may access a data repository <b>248</b>). Server <b>247</b> may be an application server or an HTTP server. A gateway computer <b>246</b> serves as a point of entry into each network <b>244</b>. The gateway <b>46</b> may be preferably coupled to another network <b>242</b> by means of a communications link <b>250</b><i>a</i>. The gateway <b>246</b> may also be directly coupled to one or more workstations <b>210</b> using a communications link <b>250</b><i>b</i>, <b>250</b><i>c</i>. The gateway computer <b>46</b> may be implemented utilizing an Enterprise Systems Architecture/370™ available from the International Business Machines Corporation (“IBM®”), an Enterprise Systems Architecture/390® computer, etc. Depending on the application, a midrange computer, such as an Application System/400® (also known as an AS/400®) may be employed. (“Enterprise Systems Architecture/370” is a trademark of IBM; “IBM”, “Enterprise Systems Architecture/390”, “Application System/400”, and “AS/400” are registered trademarks of IBM.)</p>
<p id="p-0044" num="0043">The gateway computer <b>246</b> and/or server <b>247</b> may also be coupled <b>249</b> to a storage device (such as data repository <b>248</b>). Further, the gateway <b>246</b> may be directly or indirectly coupled to one or more workstations <b>210</b>. The server <b>247</b>, when functioning as an HTTP server, preferably carries out server-side processing of the present invention. (Alternatively, the server-side processing described herein may be performed on an application server, provided that server also functions as an HTTP server.)</p>
<p id="p-0045" num="0044">Those skilled in the art will appreciate that the gateway computer <b>246</b> may be located a great geographic distance from the network <b>242</b>, and similarly, the workstations <b>210</b> may be located a substantial distance from the networks <b>242</b> and <b>244</b>. For example, the network <b>242</b> may be located in California, while the gateway <b>246</b> may be located in Texas, and one or more of the workstations <b>210</b> may be located in Florida. The workstations <b>210</b> may connect to the wireless network <b>242</b> using a networking protocol such as the Transmission Control Protocol/Internet Protocol (“TCP/IP”) over a number of alternative connection media, such as cellular phone, radio frequency networks, satellite networks, etc. The wireless network <b>242</b> preferably connects to the gateway <b>246</b> using a network connection <b>250</b><i>a </i>such as TCP or User Datagram Protocol (“UDP”) over IP, X.25, Frame Relay, Integrated Services Digital Network (“ISDN”), Public Switched Telephone Network (“PSTN”), etc. The workstations <b>210</b> may alternatively connect directly to the gateway <b>246</b> using dial connections <b>250</b><i>b </i>or <b>250</b><i>c</i>. Further, the wireless network <b>242</b> and network <b>244</b> may connect to one or more other networks (not shown), in an analogous manner to that depicted in <figref idref="DRAWINGS">FIG. 3</figref>.</p>
<p id="p-0046" num="0045">Software programming code which embodies the present invention is typically accessed by the microprocessor <b>212</b> of the server <b>247</b> from long-term storage media <b>230</b> of some type, such as a CD-ROM drive or hard drive. The software programming code may be embodied on any of a variety of known media for use with a data processing system, such as a diskette, hard drive, or CD-ROM. The code may be distributed on such media, or may be distributed from the memory or storage of one computer system over a network of some type to other computer systems for use by such other systems. Alternatively, the programming code may be embodied in the memory <b>228</b>, and accessed by the microprocessor <b>212</b> using the bus <b>214</b>. The techniques and methods for embodying software programming code in memory, on physical media, and/or distributing software code via networks are well known and will not be further discussed herein. (Note that software operating on a workstation <b>210</b> participates in the present invention, but preferred embodiments of the present invention leverage functionality already present in browsers, as will be discussed below.)</p>
<p id="p-0047" num="0046">The computing environment in which the present invention may be used includes an Internet environment, an intranet environment, an extranet environment, or any other type of networking environment. These environments may be structured in various ways, including a client-server architecture or a multi-tiered architecture. The scope of the present invention also includes a disconnected (i.e. stand-alone) environment, whereby page content is created that will (upon its use at run-time in a networking environment) invoke delivery of slow-loading content elements as disclosed herein (and where this created page content will be transmitted in a networking environment, but may initially be transmitted on media such as diskettes).</p>
<p id="p-0048" num="0047">When used in a networking environment, a user of the present invention (e.g., an end user who will receive dynamically-updated page content) may connect his computer to a server using a wireline connection or a wireless connection. Wireline connections are those that use physical media such as cables and telephone lines, whereas wireless connections use media such as satellite links, radio frequency waves, and infrared waves. Many connection techniques can be used with these various media, such as: using the computer's modem to establish a connection over a telephone line; using a LAN card such as Token Ring or Ethernet; using a cellular modem to establish a wireless connection; etc. The user's computer may be any type of computer processor, including laptop, handheld, or mobile computers; vehicle-mounted devices; desktop computers; mainframe computers; personal digital assistants (“PDAs”); Web-enabled cellular phones; Web appliances; wearable computing devices; so-called “smart” appliances in the home; etc., having processing (and optionally communication) capabilities. The remote server, similarly, can be one of any number of different types of computer which have processing and communication capabilities. These techniques are well known in the art, and the hardware devices and software which enable their use are readily available. Hereinafter, the user's computer will be referred to equivalently as a “workstation”, “device”, or “computer”, and use of any of these terms or the term “server” refers to any of the types of computing devices described above.</p>
<p id="p-0049" num="0048">In preferred embodiments, the present invention is implemented as one or more computer software programs. Preferably, the software operates on a server, where this server connects to clients across a network. The server may be functioning as a Web server, where that Web server provides services in response to requests from a client connected through the Internet. Alternatively, the server may be in a corporate intranet or extranet of which the client's workstation is a component, or in any other networking environment.</p>
<p id="p-0050" num="0049">The present invention provides novel techniques for efficiently refreshing content displayed in a Web page (or a similar window that displays content according to a markup language such as HTML). Existing Web-based components are leveraged in the dynamic, asynchronous content updating techniques disclosed herein. Advantages of the present invention can therefore be realized with minimal expense and without requiring the deployment of additional software products (which is especially beneficial from the perspective of the client-side workstations).</p>
<p id="p-0051" num="0050">According to the present invention, a special content element is included in the markup language specification of Web content (referred to herein as an HTML page, for purposes of illustration but not of limitation) that needs to be dynamically updated. This content element is an image element in preferred embodiments (where this image element is designed to be slow-loading), and thus references hereinafter are to an “image element”. (Alternative embodiments may use other types of content elements without deviating from the scope of the present invention, such as audio or video content elements.) The purpose of this image element is to slowly transmit content to the client browser, thereby keeping a (relatively long-running) connection open between the client and server. This slow transmission is not used to actually display an image in the browser: instead, the connection it keeps open is used to automatically initiate content refreshes when needed. Therefore, the content of the transmitted slow-loading image (or other slow-loading content element) is immaterial.</p>
<p id="p-0052" num="0051">According to preferred embodiments, the markup syntax for the slow-loading image element is generated as in the example syntax <b>400</b> shown in <figref idref="DRAWINGS">FIG. 4</figref> (which may appear within HTML markup for a Web page). This syntax is included in a Web page for which dynamic content is to be asynchronously delivered. The attributes for this image element used in preferred embodiments will now be described with reference to the sample attribute values in <figref idref="DRAWINGS">FIG. 4</figref>.</p>
<p id="p-0053" num="0052">A “src” attribute <b>410</b> on the image element specifies a Uniform Resource Locator (“URL”), and according to standard image-element processing, instructs the browser to download the image from the specified URL (“http://server/DynamicUpdateServlet”, in the example). According to preferred embodiments, the URL points to a server-side logic (such as a servlet) that slowly returns the bytes for an image, while monitoring a status indicator (such as a binary flag or binary-valued property) referred to herein as a “dirty bit”. This dirty bit corresponds to the GUI that is currently displayed in the web browser. When the servlet detects that the GUI needs to be refreshed (i.e., the dirty bit is set), the servlet will abruptly close the output stream on the HttpServletResponse. This abrupt closure automatically triggers a page reload, according to standard processing in the browser, because the client's “onError” JavaScript listener will be called (as discussed with reference to the “onError” attribute, below). Once the content has been refreshed, its dirty bit is preferably reset (indicating that there is currently no revised version of this content that needs to be delivered to the client).</p>
<p id="p-0054" num="0053">It should be noted that while preferred embodiments are described herein with reference to server-side logic implemented as a servlet, this is for purposes of illustration but not of limitation. The actual server-side technology is immaterial, provided the server-side functionality described herein is supported (including delivery of the slow-loading content, etc.). Alternatives to servlets include Active Server Pages (“ASPs”), Dynamic Server Pages (“DSPs”), Perl scripts, Common Gateway Interface (“CGI”) scripts, an operating system executable program running on the server, and so forth.</p>
<p id="p-0055" num="0054">An “onError” attribute <b>420</b> of the image element is used, and instructs the browser to reload the page when the image's “onError” event is fired. The “onError” event is fired when the server terminates the HTTP response before the image has fully loaded (and in particular, when the server terminates the response because it detects that the dirty bit has been set). This event may also be fired if other types of errors occur (as discussed with reference to Block <b>525</b> of FIG. <b>5</b>, below). In the example of <figref idref="DRAWINGS">FIG. 4</figref>, the value of the “onError” attribute is “window.location.reload( )”, which instructs the JavaScript listener to request a reload of the window containing the (hidden) image, and all of its contents. The dynamic content is therefore automatically refreshed. (Alternatively, the entire top-most frame or window may be reloaded, if desired. However, preferred embodiments reload only the dynamic content frame to avoid drawbacks of the prior art, including excessive network traffic and frame flicker.)</p>
<p id="p-0056" num="0055">An “onAbort” attribute <b>430</b> is specified for the image element, and instructs the browser to reload the page when the image's “onAbort” event is fired. The “onAbort” event is fired when the user presses the Escape key or presses the browser's Stop button.</p>
<p id="p-0057" num="0056">An “onLoad” attribute <b>440</b> specified for the image clement instructs the browser to reload the page when the image's “onLoad” event is fired. The “onLoad” event is fired when the image has finished loading. It is important for the server to periodically finish sending the image object to the browser, so that a memory leak is avoided. (Thus, the image will periodically finish its transmission, the storage allocated to it in the DOM will be freed, and the image will then begin to load again automatically due to firing this “onLoad” event.)</p>
<p id="p-0058" num="0057">Note that the firing of the “onError”, “onAbort”, and “onLoad” events occurs according to standard processing in the browser, and the page reloading that results from the listener's processing these events is also according to standard processing. Preferred embodiments of the present invention therefore do not require additional client-side functionality.</p>
<p id="p-0059" num="0058">The “width” and “height” attributes <b>450</b>, <b>460</b> of the image element are preferably set to zero. Therefore, when the browser renders this HTML, the image element does not actually appear in the GUI.</p>
<p id="p-0060" num="0059">Referring now to <figref idref="DRAWINGS">FIG. 5</figref>, logic which may be used to implement preferred embodiments will now be described. The processing begins at Block <b>500</b>, where the client's browser requests a Web page that has been designed to include some type of “live” (i.e., asynchronously-updateable) content. (Note that the browser, and the end user, need not be aware that this requested Web page contains this type of content.) The server responds (Block <b>505</b>) with content that is generated according to the present invention, thereby including an image element for slow-loading, hidden content as described with reference to the syntax in <figref idref="DRAWINGS">FIG. 4</figref>.</p>
<p id="p-0061" num="0060">When the browser receives this content, it renders the Web page (Block <b>510</b>) and automatically begins to load the slow-loading image. As noted in Block <b>515</b>, the image continues to load for some period of time (thereby keeping open a connection between the client and server). Block <b>520</b> represents a test made on the server side of the network, checking the dirty bit to see if the server needs to update the content of the currently-displayed page. When this test has a positive result, processing continues to Block <b>540</b>, where the server closes the output stream over which the image is being sent. The browser will then detect that the stream was closed, and will fire an “onError” event (Block <b>545</b>). This event is handled by the JavaScript handler named in the “onError” attribute, as discussed above with reference to <figref idref="DRAWINGS">FIG. 4</figref>, and therefore a page (re)load request is automatically sent from the client to the server (as shown in <figref idref="DRAWINGS">FIG. 5</figref> by transferring control back to Block <b>500</b>). The processing of this reloaded page proceeds through the logic of <figref idref="DRAWINGS">FIG. 5</figref> in an analogous manner to that of the originally-loaded page.</p>
<p id="p-0062" num="0061">When the test in Block <b>520</b> has a negative result, a test is made (Block <b>525</b>) to see if a network error of some type has halted the loading of the image. For example, the connection between the client and server may have accidentally dropped. When this test has a positive result, the “on Error” event is fired, causing the browser to request a (re)load of the page (as described with reference to Blocks <b>545</b> and <b>500</b>).</p>
<p id="p-0063" num="0062">If the test in Block <b>525</b> has a negative result, then it may happen that the user has halted the image loading. This condition is checked in Block <b>530</b> (representing processing on the client side). If the loading was halted by the user, the “onAbort” event will be fired (Block <b>550</b>), and the JavaScript listener for that event will cause the browser to issue a new request for the page (Block <b>500</b>).</p>
<p id="p-0064" num="0063">If none of the tests in Blocks <b>520</b>, <b>525</b>, or <b>530</b> has a positive result, then Block <b>535</b> checks to see if the image has finished loading successfully. As noted above, the image delivery is preferably designed such that this will periodically occur, in order to avoid memory leaks. Thus, when the loading finishes, the image's “on Load” event will be fired (Block <b>555</b>), and the JavaScript listener will cause the browser to issue a request for (re)loading the page (Block <b>500</b>).</p>
<p id="p-0065" num="0064">If the image has not yet finished loading, but no errors are fired, the test in Block <b>535</b> has a negative result, and control transfers from Block <b>535</b> to Block <b>515</b>, indicating that the delivery of the slow-loading image continues. If available, a timer-driven delay may be interposed between the processing of Blocks <b>535</b> and <b>515</b> to reduce processing overhead.</p>
<p id="p-0066" num="0065">Optionally, the parameters used when generating the slow-loading content may be optimized or adjusted based on properties of the application and/or network. For example, one or more of the following parameters might be adjusted in the server-side logic that generates a slow-loading image: (1) the image size (i.e., number of bytes); (2) the image chunk size (i.e., how many bytes are sent at a time); (3) the image transmission rate (e.g., number of bytes transmitted per second); (4) the image format (e.g., selecting “jpeg ” format vs. “gif ” format, and so forth); etc. Setting the image chunk size may be especially beneficial when the maximum buffer size of all network components (e.g., proxy, firewall, etc.) between the client and server is known. It may be used to set the chunk size to a minimum value that will ensure end-to-end content delivery.</p>
<p id="p-0067" num="0066">In alternative embodiments, the techniques described herein may be used with markup languages other than HTML, and as noted above, other types of slow-loading content elements may be used in place of image elements. Alternative markup languages include the Extensible Markup Language (“XML”), Wireless Markup Language (“WML”), other derivatives of the Standard Generalized Markup Language (“SGML”), etc., provided the markup language supports client-side scripting and exposes attributes such as the onLoad, onError, and onAbort attributes of a markup tag as described herein. For example, in a hypothetical markup language “myML” that allows an &lt;audio&gt; tag, the syntax in <figref idref="DRAWINGS">FIG. 4</figref> might be replaced by the following example syntax:
<ul id="ul0001" list-style="none">
    <li id="ul0001-0001" num="0000">
    <ul id="ul0002" list-style="none">
        <li id="ul0002-0001" num="0067">&lt;audio src=“http://hostname/DynamicUpdateServlet”
        <ul id="ul0003" list-style="none">
            <li id="ul0003-0001" num="0068">onError=“window.location.reload( )” . . . /&gt;
<br/>
The slow-loading content may be any objects (such as images) of different Multipurpose Internet Mail Extension (“MIME”) types.
</li>
        </ul>
        </li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0068" num="0069">In addition to using the present invention for asynchronously updating Web application content displayed on a user's workstation GUI, the techniques disclosed herein may be used in other environments, including (but not limited to) Web consoles and kiosks.</p>
<p id="p-0069" num="0070">As has been demonstrated, the dynamic content refreshing approach of the present invention operates efficiently and avoids drawbacks of prior art techniques. For example, the present invention uses bandwidth more efficiently than prior art page reloading techniques because it does not use client-driven polling, and the disclosed techniques avoid the unnecessary flashing or flickering of browser frames that occurs with prior art approaches. No additional client-side logic is required, beyond existing browser support for JavaScript (or an analogous client-side scripting technique).</p>
<p id="p-0070" num="0071">This asynchronous update technique may be used to refresh content that is updated as a result of daemons or other server-side processing that occurs in application-specific ways.</p>
<p id="p-0071" num="0072">As will be appreciated by one of skill in the art, embodiments of the present invention may be provided as methods, systems, or computer program products. Accordingly, the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment, or an embodiment combining software and hardware aspects. Furthermore, the present invention may take the form of a computer program product which is embodied on one or more computer-usable storage media (including, but not limited to, disk storage, CD-ROM, optical storage, and so forth) having computer-usable program code embodied therein.</p>
<p id="p-0072" num="0073">The present invention has been described with reference to flowchart illustrations and/or block diagrams of methods, apparatus (systems), and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and/or block diagrams, and combinations of blocks in the flowchart illustrations and/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, embedded processor, or other programmable data processing apparatus to produce a machine, such that the instructions (which execute via the processor of the computer or other programmable data processing apparatus) create means for implementing the functions specified in the flowchart and/or block diagram block or blocks.</p>
<p id="p-0073" num="0074">These computer program instructions may also be stored in a computer-readable memory that can direct a computer or other programmable data processing apparatus to function in a particular manner, such that the instructions stored in the computer-readable memory produce an article of manufacture including instruction means which implement the function specified in the flowchart and/or block diagram block or blocks.</p>
<p id="p-0074" num="0075">The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide steps for implementing the functions specified in the flowchart and/or block diagram block or blocks.</p>
<p id="p-0075" num="0076">While preferred embodiments of the present invention have been described, additional variations and modifications in those embodiments may occur to those skilled in the art once they learn of the basic inventive concepts. The techniques disclosed herein are based partially upon certain predefined characteristics of the notations being processed. It will be obvious to one of ordinary skill in the art that the inventive concepts disclosed herein may be adapted to changes in the notations, should they occur. Furthermore, while preferred embodiments are described with reference to JavaScript and HTML, this is intended to encompass similar types of scripting components and similar markup languages. Therefore, it is intended that the appended claims shall be construed to include both the preferred embodiments and all such variations and modifications as fall within the spirit and scope of the invention.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A software-implemented method of asynchronously reloading Web page content, comprising:
<claim-text>responsive to receiving, at a server from a client over a first network connection, a request for displayable Web page content in which at least a portion of the displayable Web page content is dynamic, performing steps of:
<claim-text>generating the requested displayable Web page content using markup language notation and embedding, in the markup language notation, a reference to a stored image, wherein the reference specifies that the stored image is to be rendered with a height of zero and a width of zero and that the client is to automatically re-issue a request for the stored image if the client detects an error condition during loading of the stored image; and</claim-text>
<claim-text>sending the generated Web page content and the embedded reference from the server to the client over the first network connection, the reference configured to cause the client to automatically issue a request, without input from a user of the client, for the stored image upon rendering the markup language notation and detecting the embedded reference therein;</claim-text>
</claim-text>
<claim-text>responsive to receiving, at the server from the client over a second network connection, a request for the stored image, starting delivery of the stored image from the server to the client over the second network connection, the stored image sized as to require relatively longer transmission time, from the server to the client over the second network connection, as compared to transmission time for the sending of the generated Web page content over the first network connection;</claim-text>
<claim-text>detecting, by the server without input from the client or the user, that the displayable Web page content that was sent to the client over the first network connection needs to be updated;</claim-text>
<claim-text>updating the displayable Web page content and closing the second network connection, by the server responsive to the detecting, while the stored image is still being delivered to the client over the second network connection, thereby causing the client to detect the error condition and to automatically respond to the detected error condition by sending a new request for reloading of the displayable Web page content; and</claim-text>
<claim-text>responsive to receiving, at the server from the client, the new request, repeating the performing of the generating and sending steps, wherein the generating step uses the updated Web page content.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the markup language notation is Hypertext Markup Language (“HTML”).</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the specification that the client is to automatically re-issue the request for the stored image if the client detects the error condition further comprises a specification, in syntax of the reference, of an event handler for responding to the error condition.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the reference further specifies that the client is to automatically re-issue the request for the stored image if the client detects that the user has halted the delivery of the stored image.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method according to <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the specification that the client is to automatically re-issue the request for the stored image if the client detects the halting further comprises a specification, in syntax of the reference, of an abort handler for responding to the halting.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the reference further specifies that the client is to automatically re-issue the request for the stored image if the client detects completion of the delivery of the stored image.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method according to <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the specification that the client is to automatically re-issue the request for the stored image if the client detects the completion further comprises a specification, in syntax of the reference, of a load completion handler.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method according to <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the detecting further comprises detecting that the user pressed, at the client, one of an escape key or a stop button.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method according to <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the event handler is specified as an attribute of the reference.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. A method of asynchronously reloading dynamically-updateable content, comprising steps of:
<claim-text>responsive to receiving, at a server from a client over a first network connection, a request for displayable content that is to be rendered at the client, wherein at least a portion of the displayable content to be rendered is dynamically-updateable, performing steps of:
<claim-text>generating the requested displayable content using markup language notation and embedding, in the markup language notation, a reference to a stored image, wherein the reference specifies that the stored image is to be rendered with a height of zero and a width of zero and that the client is to automatically re-issue a request for the stored image if the client detects an error condition during loading of the stored image; and</claim-text>
<claim-text>sending the generated content and the embedded reference from the server to the client over the first network connection, the reference configured to cause the client to automatically issue a request, without input from a user of the client, for the stored image upon rendering the markup language notation and detecting the embedded reference therein;</claim-text>
</claim-text>
<claim-text>responsive to receiving, at the server from the client over a second network connection, a request for the stored image, starting delivery of the stored image from the server to the client over the second network connection, the stored image sized as to require relatively longer transmission time, from the server to the client over the second network connection, as compared to transmission time for the sending of the generated content over the first network connection;</claim-text>
<claim-text>detecting, by the server without input from the client or the user, that the displayable content that was sent to the client over the first network connection needs to be updated;</claim-text>
<claim-text>updating the displayable content and closing the second network connection, by the server responsive to the detecting, while the stored image is still being delivered to the client over the second network connection, thereby causing the client to detect the error condition and to automatically respond to the detected error condition by sending a new request for reloading of the displayable content; and</claim-text>
<claim-text>responsive to receiving, at the server from the client, the new request, repeating the performing of the generating and sending steps, wherein the generating step uses the updated content.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method according to <claim-ref idref="CLM-00010">claim 10</claim-ref>, further comprising the steps of:
<claim-text>receiving the sent displayable content and the embedded reference, at the client from the server over the first network connection; and</claim-text>
<claim-text>rendering the displayable content and the stored image on the client, according to the generated markup language notation, wherein the height of zero and the width of zero causes the stored image to be rendered as invisible.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method according to <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the client is a kiosk having a dynamically-updateable display.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The method according to <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the client provides a Web console having a dynamically-updateable display.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The method according to <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the specification that the client is to automatically re-issue the request for the stored image if the client detects the error condition further comprises a specification, in syntax of the reference, of an event handler for responding to the error condition.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. A computer-implemented system for asynchronously reloading Web page content from a server to a client in a computer networking environment, comprising:
<claim-text>means operable in the server, responsive to receiving, at the server from the client over a first network connection, a request for displayable Web page content to display on a display device coupled to the client, at least a portion of the displayable Web page content comprising dynamic content, for:
<claim-text>generating the requested displayable Web page content using markup language notation and embedding, in the markup language notation, a reference to a stored image which is stored in a network-accessible storage medium, wherein the reference specifies that the stored image is to be rendered with a height of zero and a width of zero and that the client is to automatically re-issue a request for the stored image if the client detects an error condition during loading of the stored image; and</claim-text>
<claim-text>sending the generated Web page content and the embedded reference from the server to the client over the first network connection, the reference configured to cause the client to automatically issue a request, without input from a user of the client, for the stored image upon rendering the markup language notation and detecting the embedded reference therein;</claim-text>
</claim-text>
<claim-text>means operable in the server, responsive to receiving, at the server from the client over a second network connection, a request for the stored image, for starting delivery of the stored image from the server to the client over the second network connection, the stored image sized as to require relatively longer transmission time, from the server to the client over the second network connection, as compared to transmission time for the sending of the generated Web page content over the first network connection;</claim-text>
<claim-text>means operable in the server for detecting, by the server without input from the client or the user, that the displayable Web page content that was sent to the client over the first network connection needs to be updated;</claim-text>
<claim-text>means operable in the server for updating the displayable Web page content and closing the second network connection, by the server responsive to the detecting, while the stored image is still being delivered to the client over the second network connection, thereby causing the client to detect the error condition and to automatically respond to the detected error condition by sending a new request for reloading of the displayable Web page content; and</claim-text>
<claim-text>means operable in the server, responsive to receiving, at the server from the client, the new request, for repeating operation of the means for generating and the means for sending, wherein the means for generating uses the updated Web page content.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The system according to <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein:
<claim-text>the specification that the client is to automatically re-issue the request for the stored image if the client detects the error condition further comprises a specification, in syntax of the reference, of an event handler for responding to the error condition.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The system according to <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the reference further specifies that the client is to automatically re-issue the request for the stored image if the client detects that the user has halted the delivery of the stored image.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The system according to <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the reference further specifies that the client is to automatically re-issue the request for the stored image if the client detects completion of the delivery of the stored image.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. A computer-implemented system for asynchronously reloading dynamically-updateable content from a server to a client in a computer networking environment, comprising:
<claim-text>means operable in the server, responsive to receiving, at the server from the client over a first network connection, a request for displayable content that is to be rendered on a display device coupled to the client, wherein at least a portion of the displayable content to be rendered is dynamically-updateable, for:
<claim-text>generating the requested displayable content using markup language notation and embedding, in the markup language notation, a reference to a stored image which is stored in a network-accessible medium, wherein the reference specifies that the stored image is to be rendered with a height of zero and a width of zero and that the client is to automatically re-issue a request for the stored image if the client detects an error condition during loading of the stored image; and</claim-text>
<claim-text>sending the generated content and the embedded reference from the server to the client over the first network connection, the reference configured to cause the client to automatically issue a request, without input from a user of the client, for the stored image upon rendering the markup language notation and detecting the embedded reference therein;</claim-text>
</claim-text>
<claim-text>means operable in the server, responsive to receiving, at the server from the client over a second network connection, a request for the stored image, for starting delivery of the stored image from the server to the client over the second network connection, the stored image sized as to require relatively longer transmission time, from the server to the client over the second network connection, as compared to transmission time for the sending of the generated content over the first network connection;</claim-text>
<claim-text>means operable in the server for detecting, by the server without input from the client or the user, that the displayable content that was sent to the client over the first network connection needs to be updated;</claim-text>
<claim-text>means operable in the server for updating the displayable content and closing the second network connection, by the server responsive to the detecting, while the stored image is still being delivered to the client over the second network connection, thereby causing the client to detect the error condition and to automatically respond to the detected error condition by sending a new request for reloading of the displayable content; and</claim-text>
<claim-text>means operable in the server, responsive to receiving, at the server from the client, the new request, for repeating operation of the means for generating and the means for sending, wherein the means for generating uses the updated content.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. A computer program product for asynchronously reloading Web page content, the computer program product embodied on one or more computer-readable storage media and comprising:
<claim-text>responsive to receiving, at a server from a client over a first network connection, a request for displayable Web page content in which at least a portion of the displayable Web page content is dynamic, computer-readable program code for:
<claim-text>generating the requested displayable Web page content using markup language notation and embedding, in the markup language notation, a reference to a stored image, wherein the reference specifies that the stored is to be rendered with a height of zero and a width of zero and that the client is to automatically re-issue a request for the stored image if the client detects an error condition during loading of the stored image; and</claim-text>
<claim-text>sending the generated Web page content and the embedded reference from the server to the client over the first network connection, the reference configured to cause the client to automatically issue a request, without input from a user of the client, for the stored image upon rendering the markup language notation and detecting the embedded reference therein;</claim-text>
</claim-text>
<claim-text>responsive to receiving, at the server from the client over a second network connection, a request for the stored image, computer-readable program code for starting delivery of the stored image from the server to the client over the second network connection, the stored image sized as to require relatively longer transmission time, from the server to the client over the second network connection, as compared to transmission time for the sending of the generated Web page content over the first network connection;</claim-text>
<claim-text>computer-readable program code for detecting, by the server without input from the client or the user, that the displayable Web page content that was sent to the client over the first network connection needs to be updated;</claim-text>
<claim-text>computer-readable program code for updating the displayable Web page content and closing the second connection, by the server responsive to the detecting, while the stored image is still being delivered to the client over the second network connection, thereby causing the client to detect the error condition and to automatically respond to the detected error condition by sending a new request for reloading of the displayable Web page content; and</claim-text>
<claim-text>responsive to receiving, at the server from the client, the new request, computer-readable program code for repeating execution of the computer-readable program code for generating and the computer-readable program code for sending, wherein the computer-readable program code for generating uses the updated Web page content.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. A computer program product for asynchronously reloading dynamically-updateable content, the computer program product embodied on one or more computer-readable storage media and comprising:
<claim-text>responsive to receiving, at a server from a client over a first network connection, a request for displayable content that is to be rendered on a display device coupled to the client, wherein at least a portion of the displayable content to be rendered is dynamically-updateable, computer-readable program code for:
<claim-text>generating the requested displayable content using markup language notation and embedding, in the markup language notation, a reference to a stored image, wherein the reference specifies that the stored image is to be rendered with a height of zero and a width of zero and that the client is to automatically re-issue a request for the stored image if the client detects an error condition during loading of the stored image; and</claim-text>
<claim-text>sending the generated content and the embedded reference from the server to the client over the first network connection, the reference configured to cause the client to automatically issue a request, without input from a user of the client, for the stored image upon rendering the markup language notation and detecting the embedded reference therein;</claim-text>
</claim-text>
<claim-text>responsive to receiving, at the server from the client over a second network connection, a request for the stored image, computer-readable program code for starting delivery of the stored image from the server to the client over the second network connection, the stored image sized as to require relatively longer transmission time, from the server to the client over the second network connection, as compared to transmission time for the sending of the generated content over the first network connection;</claim-text>
<claim-text>computer-readable program code for detecting, by the server without input from the client or the user, that the displayable content that was sent to the client over the first network connection needs to be updated;</claim-text>
<claim-text>computer-readable program code for updating the displayable content and closing the second connection, by the server responsive to the detecting, while the stored image is still being delivered to the client over the second network connection, thereby causing the client to detect the error condition and to automatically respond to the detected error condition by sending a new request for reloading of the displayable content; and</claim-text>
<claim-text>responsive to receiving, at the server from the client, the new request, computer-readable program code for repeating execution of the computer-readable program code for generating and the computer-readable program code for sending, wherein the computer-readable program code for generating uses the updated content.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. The computer program product according to <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the reference further specifies that the client is to automatically re-issue the request for the stored image if the client detects that the user has halted the delivery of the stored image.</claim-text>
</claim>
</claims>
</us-patent-grant>
