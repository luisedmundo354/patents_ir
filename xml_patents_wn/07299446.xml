<us-patent-grant lang="EN" dtd-version="v4.2 2006-08-23" file="US07299446-20071120.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20071106" date-publ="20071120">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>07299446</doc-number>
<kind>B2</kind>
<date>20071120</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>11204669</doc-number>
<date>20050816</date>
</document-id>
</application-reference>
<us-application-series-code>11</us-application-series-code>
<us-term-of-grant>
<us-term-extension>269</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>17</main-group>
<subgroup>50</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>716 18</main-classification>
<further-classification>716  1</further-classification>
<further-classification>716  4</further-classification>
<further-classification>716 11</further-classification>
</classification-national>
<invention-title id="d0e53">Enabling efficient design reuse in platform ASICs</invention-title>
<references-cited>
<citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>6292427</doc-number>
<kind>B1</kind>
<name>Roy</name>
<date>20010900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>36523003</main-classification></classification-national>
</citation>
<citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>2002/0073380</doc-number>
<kind>A1</kind>
<name>Cooke et al.</name>
<date>20020600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>716  1</main-classification></classification-national>
</citation>
<citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>2004/0128641</doc-number>
<kind>A1</kind>
<name>Broberg et al.</name>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>716 18</main-classification></classification-national>
</citation>
<citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>2004/0145033</doc-number>
<kind>A1</kind>
<name>McElvain</name>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>257659</main-classification></classification-national>
</citation>
<citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2005/0268268</doc-number>
<kind>A1</kind>
<name>Wang et al.</name>
<date>20051200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>716  9</main-classification></classification-national>
</citation>
</references-cited>
<number-of-claims>20</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>716 18</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>716  1</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>716  4</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>716 11</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>6</number-of-drawing-sheets>
<number-of-figures>8</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20070044058</doc-number>
<kind>A1</kind>
<date>20070222</date>
</document-id>
</related-publication>
</us-related-documents>
<parties>
<applicants>
<applicant sequence="001" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>He</last-name>
<first-name>Ying Chun</first-name>
<address>
<city>Milpitas</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="002" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Martin</last-name>
<first-name>Gregor J.</first-name>
<address>
<city>Mountain View</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="003" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Lindberg</last-name>
<first-name>Grant</first-name>
<address>
<city>Pleasanton</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
</applicants>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<last-name>Maiorana, P.C.</last-name>
<first-name>Christopher P.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</parties>
<assignees>
<assignee>
<addressbook>
<orgname>LSI Corporation</orgname>
<role>02</role>
<address>
<city>Milpitas</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Lin</last-name>
<first-name>Sun James</first-name>
<department>2825</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A design tool for generating design views of a semiconductor chip is presented. The design tool includes an input module, a generation module, a first synthesis module, a user interface module and an extraction module. The input module may be configured to receive input including physical and logical resources and a custom chip specification. The generation module may be configured to generate Register Transfer Level (RTL) views for the semiconductor chip. The first synthesis module may be configured to perform logic synthesis using the RTL views. The user interface module may be configured to query a user whether re-usable intellectual property (IP) is to be generated. The extraction module may be configured to extract and package design information for the re-usable IP in response to a request from the user.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="224.37mm" wi="146.30mm" file="US07299446-20071120-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="111.00mm" wi="98.21mm" file="US07299446-20071120-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="251.97mm" wi="173.14mm" file="US07299446-20071120-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="247.06mm" wi="197.27mm" orientation="landscape" file="US07299446-20071120-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="215.48mm" wi="90.76mm" orientation="landscape" file="US07299446-20071120-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="245.87mm" wi="164.68mm" file="US07299446-20071120-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="259.25mm" wi="202.69mm" orientation="landscape" file="US07299446-20071120-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">FIELD OF THE INVENTION </heading>
<p id="p-0002" num="0001">The present invention relates to integrated circuit design generally and, more particularly, to a method and/or design tool for enabling efficient design reuse in platform/structured application specific integrated circuits (ASICs).</p>
<heading id="h-0002" level="1">BACKGROUND OF THE INVENTION </heading>
<p id="p-0003" num="0002">In a conventional design flow, all customer designed logic is treated in the same way (i.e., the customer designed logic is operated on as raw RTL). The customer cannot package parts of the customer's design into re-usable intellectual property (IP). Subsequent customer designs that reuse logic from a prior customer design still require the entire customer designed logic to be entered into the design system from scratch. Conventional tools do not provide for re-use of the effort from an initial design, in subsequent designs. For example, if the customer has customer designed IP that is to be reused, each time the customer designed IP is reused, the customer has to go through all the stages of an implementation flow.</p>
<p id="p-0004" num="0003">Re-running all of the stages of the implementation flow, on all logic for subsequent designs that share IP is inefficient, is time consuming and can be frustrating to the customer. Also, design-timing closure can be complicated and have a long run time during design placement and optimization.</p>
<p id="p-0005" num="0004">It would be desirable to have a method and/or apparatus enabling efficient design reuse in platform/structured ASICs.</p>
<heading id="h-0003" level="1">SUMMARY OF THE INVENTION </heading>
<p id="p-0006" num="0005">The present invention concerns a design tool for generating design views of a semiconductor chip comprising an input module, a generation module, a first synthesis module, a user interface module and an extraction module. The input module may be configured to receive input including physical and logical resources and a custom chip specification. The generation module may be configured to generate Register Transfer Level (RTL) views for the semiconductor chip. The first synthesis module may be configured to perform logic synthesis using the RTL views. The user interface module may be configured to query a user whether re-usable intellectual property (IP) is to be generated. The extraction module may be configured to extract and package design information for the re-usable IP in response to a request from the user.</p>
<p id="p-0007" num="0006">The objects, features and advantages of the present invention include providing a method and/or design tool for enabling efficient design reuse in platform (or structured) application specific integrated circuits (platform/structured ASICs) that may (i) allow a customer to design IP once, (ii) re-use customer designed IP in subsequent designs, (iii) automatically extract information from customer design, (iv) generate soft, firm and/or hard IP, (v) store extract information with the IP and/or (v) automatically generate re-usable IP in response to customer input.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<p id="p-0008" num="0007">These and other objects, features and advantages of the present invention will be apparent from the following detailed description and the appended claims and drawings in which:</p>
<p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. 1</figref> is a diagram comparing various types of IP;</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. 2</figref> is a flow diagram illustrating an example implementation flow in accordance with a preferred embodiment of the present invention;</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 3</figref> is a block diagram illustrating an example IP collection in accordance with a preferred embodiment of the present invention; and</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 4</figref> is a flow diagram illustrating an example implementation flow using information generated in accordance with a preferred embodiment of the present invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS </heading>
<p id="p-0013" num="0012">The present invention generally relates to the efficiency of customers designing with platform (or structured) application specific integrated circuits (platform/structured ASICs). However, the present invention is not limited to application in platform/structured ASICs. The present invention may be used in other areas of design where re-use of previous design effort is important.</p>
<p id="p-0014" num="0013">The present invention generally assists a modularized design methodology by allowing creation of customer defined soft intellectual property (IP), firm IP and/or hard IP. The present invention generally provides a feature that may be added to existing design tools. Customers may create their own collection of validated IP allowing quick reuse of the IP in subsequent designs.</p>
<p id="p-0015" num="0014">Referring to <figref idref="DRAWINGS">FIG. 1</figref>, a block diagram is shown comparing various types of intellectual property. The present invention generally involves three types of IP (or IP that may be reused at three stages of usability): soft IP, firm IP and hard IP. The term soft IP, as used herein, generally refers to synthesizable RTL (register transfer level) netlist with proper synthesis constraints, configuration options, operating frequency, area and power estimation, etc. The advantage of soft IP is its flexibility. Soft IP is compile time configurable and may be targeted to any technology platform.</p>
<p id="p-0016" num="0015">The term firm IP, as used herein, generally refers to gate level netlist with proper synthesis constraints, relative placement constraints, and operation frequency and area report, as well as power estimation. In contrast to soft IP, firm IP is generally not compile time configurable and can only be targeted to selected technology. One advantage of firm IP is that the front-end optimization of the IP is completed and the user does not have to re-synthesize the IP. Not having to re-synthesize the IP saves design time. Another advantage of firm IP is that the frequency and area report for the firm IP is more accurate than the report for soft IP. For example, size and performance of soft IP may vary depending upon configuration, targeted technology, timing constraints and placement. In contrast to soft IP, firm IP is generated after physical synthesis with pre-defined configuration, technology and timing specifications. Because the configuration, technology and timing specifications are pre-defined, the area and performance report for firm IP is much more accurate than for soft IP.</p>
<p id="p-0017" num="0016">The term hard IP, as used herein, generally refers to timing closed gate level netlist with placement, as well as routing constraints. Hard IP has fixed size and timing information and can only be targeted to selected technology. If the hard IP contains diffused IP, such as memory or SERDES (serializer/deserializer), the number of technology devices that may be chosen as a platform for the hard IP may be limited. One advantage of hard IP is that the optimization of the IP is complete for both front-end and back-end flows, which shortens the product development cycle. Another advantage is that the known architecture, performance and size of the hard IP make the design more predictable. In general, as IP moves from soft to hard embodiments, flexibility and reusability decrease while time-to-market and predictability increase.</p>
<p id="p-0018" num="0017">Referring to <figref idref="DRAWINGS">FIG. 2</figref>, a flow diagram is shown illustrating an example design implementation flow (or process) <b>100</b> in accordance with a preferred embodiment of the present invention. The process <b>100</b> may comprise a block (or module) <b>102</b>, a block (or module) <b>104</b>, a block (or module) <b>106</b>, a block (or module) <b>108</b>, a block (or module) <b>110</b>, a decision block (or module) <b>112</b>, a block (or module) <b>114</b>, a block (or module) <b>116</b>, a decision block (or module) <b>118</b>, a block (or module) <b>120</b>, a block (or module) <b>122</b>, a block (or module) <b>124</b>, a block (or module) <b>126</b>, a block (or module) <b>128</b>, a decision block (or module) <b>130</b>, a block (or module) <b>132</b>, a decision block (or module) <b>134</b>, a decision block (or module) <b>136</b>, a block (or module) <b>138</b>, a block (or module) <b>140</b>, a block (or module) <b>142</b>, a block (or module) <b>144</b>, a block (or module) <b>146</b>, a decision block (or module) <b>148</b>, a decision block (or module) <b>150</b>, a block (or module) <b>152</b>, a block (or module) <b>154</b> and a block (or module) <b>156</b>. In the block <b>102</b>, a device selection may be made to begin the process <b>100</b>. In the block <b>104</b>, specific IP and memory may be selected. In the block <b>106</b>, I/O and clock definitions may be specified. In the block <b>108</b>, RTL integration and verification is generally performed. In the block <b>110</b>, RTL analysis is generally performed. In the block <b>112</b>, the RTL analysis is examined to determine whether any violations have occurred. If violations have occurred, the process <b>100</b> generally moves to the block <b>114</b> where the RTL is fixed. Once the RTL is fixed, the process <b>100</b> generally returns to the block <b>108</b>.</p>
<p id="p-0019" num="0018">If no violations are detected, the process <b>100</b> generally moves to the block <b>116</b>. In the block <b>116</b>, logic synthesis of the design is performed. When the logic synthesis is complete, the process <b>100</b> generally moves to the block <b>118</b>. In the block <b>118</b>, the user may be queried whether reusable soft IP is to be generated. If no reusable soft IP is to be generated, the process <b>100</b> generally moves to the block <b>120</b>. If reusable soft IP is to be generated, the process <b>100</b> generally moves to the block <b>122</b>. In the block <b>122</b>, a tool may be configured to extract soft IP design information. Once the soft IP design information is extracted, the process <b>100</b> moves to the block <b>124</b>. In the block <b>124</b>, the soft IP design information is packaged. When the soft IP is packaged, the process <b>100</b> generally moves to the block <b>120</b>. In the block <b>120</b>, regions for reusable firm and/or hard IP may be created (or identified) based upon user input.</p>
<p id="p-0020" num="0019">From the block <b>120</b>, the process <b>100</b> generally moves to a floor planning stage in the block <b>126</b>. Following generation of a floorplan in the block <b>126</b>, the process <b>100</b> generally moves to the block <b>128</b>. In the block <b>128</b>, a physical synthesis is performed. Once the physical synthesis is performed, the process <b>100</b> generally moves to the block <b>130</b>. In the block <b>130</b>, the result of the physical synthesis may be checked to determine whether timing constraints are met. If timing constraints have not been met, the process <b>100</b> generally returns to (i) the block <b>106</b> to refine the timing constraints or RTL and/or (ii) the block <b>120</b> to refine the floorplan. When the timing constraints are met, the process <b>100</b> generally moves to the block <b>132</b>. In the block <b>132</b>, the physical synthesis results are checked against the particular platform. For example, a gate level netlist design rule check (DRC) may be implemented to prevent problems that might occur in a subsequent back-end flow.</p>
<p id="p-0021" num="0020">Once the physical synthesis gate level netlist has been checked against various design rules, the process <b>100</b> generally moves to the block <b>134</b>. In the block <b>134</b>, the gate level netlist analysis report may be examined to determine whether any violations have occurred. If violations have occurred, the process <b>100</b> generally returns to the block <b>106</b>, the block <b>120</b> or the block <b>128</b> depending on the nature of the violation. When no violations have occurred, the process <b>100</b> generally moves to the block <b>136</b>.</p>
<p id="p-0022" num="0021">In the block <b>136</b>, the user is asked (or queried) whether reusable firm IP is to be generated. If no reusable firm IP is to be generated, the process <b>100</b> generally moves to the block <b>138</b>. When reusable firm IP is to be generated, the process <b>100</b> moves to the block <b>140</b>. In the block <b>140</b>, the firm IP design information is extracted. Once the firm IP design information has been extracted, the process <b>100</b> moves to the block <b>142</b>. In the block <b>142</b>, the firm IP information is packaged. Once the firm IP information has been packaged, the process <b>100</b> moves to the block <b>138</b>. In the block <b>138</b>, the process <b>100</b> generally gathers all design information to be used in a back-end design flow and creates a tar ball to hand off the design to the development center.</p>
<p id="p-0023" num="0022">Once the front-end design hand-off has been completed, the process <b>100</b> generally moves to the block <b>144</b>. In the block <b>144</b>, the implementation flow is finished in the back-end flow. Once the implementation flow is finished, the process <b>100</b> generally moves to the block <b>146</b>. In the block <b>146</b> tape out is performed. The back-end flow (e.g., performed by the development center) generally involves design routing, test insertion, clock tree synthesis, physical layout and final netlist verification (design rule checking, netlist versus layout checking, etc.), tapeout and chip prototype manufacturing. Tapeout generally refers to a final EBEAM for the design.</p>
<p id="p-0024" num="0023">Following tape out, the process <b>100</b> moves to the block <b>148</b>. In the block <b>148</b>, a prototype is examined. If the prototype is not successful, the process. <b>100</b> generally returns to the block <b>106</b>. When the prototype is successful, the process <b>100</b> generally moves to the block <b>150</b>. In the block <b>150</b>, the user is queried (or asked) whether reusable hard IP is to be generated. If no reusable hard IP is to be generated, the process <b>100</b> generally moves to an end block <b>152</b>. If reusable hard IP is to be generated, the process <b>100</b> generally moves to the block <b>154</b>. In the block <b>154</b>, hard IP design information is extracted. Once the hard IP design information has been extracted, the process <b>100</b> moves to the block <b>156</b>. In the block <b>156</b>, the hard IP design information is packaged. Once the hard IP design information has been packaged, the process <b>100</b> generally moves to the end block <b>152</b>.</p>
<p id="p-0025" num="0024">In general, for soft IP, the user maps a design/sub-module to a virtual technology device during a block-level flow. If the design passes RTL rule checking and logical synthesis without any errors and/or congestion warnings, and the target frequency is achieved, the user is presented with the option of creating a soft core for the design block. In one example, the design tool may be configured to generate appropriate configuration information about the core in extensible mark-up language (XML) format. XML is an industry standard format that may be used for delivering design information. However, other standard and/or proprietary formats may be implemented to meet design criteria of a particular implementation. The soft core may be compile-time configurable if each combination of the configuration has been tested in the implementation flow. The advantage of the soft core is that the RTL is known to be good, and statistics about frequency, area, power, etc. may be captured and reused in a subsequent product, helping in both the planning stage and implementation stage. Also, constraints and other related data and settings may be captured and packaged (or bundled up) as part of the IP.</p>
<p id="p-0026" num="0025">For firm IP, the user maps the design (or sub-module) to a chosen technology and device in the block-level flow. If the design passes RTL rule checking, physical synthesis with targeted frequency and has no error and/or congestion warnings, the tool may be configured to automatically create a firm core from the design. The tool generally creates a gate level netlist and relative placement constraints file. If the firm core interfaces to diffused IP, a list of recommended technology devices may be recorded in the auto-generated IP manifest. The firm IP deliverable generally includes the relative placement of cells, but not the routing information. In general, the front-end flow tools may define I/O, clock and memory, perform design rule checking against RTL and gate level netlist file, floorplan and physical synthesis to generate a timing-closed placed gate level netlist. The front-end floe is generally performed by the user.</p>
<p id="p-0027" num="0026">With respect to hard IP, if a user has a timing-closed design/sub-module, the tool may be configured to automatically create a hard IP core from the module. Since hard IP generally contains the final timing-closed routing, the final IP is generally a product of the back-end flow, so cannot be generated entirely by the customer. However, the tool may be configured to allow the customer to highlight a specific core and request that the highlighted core be generated into a piece of hard IP.</p>
<p id="p-0028" num="0027">In general, the different types of IP are generated at different stages of the design flow. The same IP may be delivered in all three formats (e.g., soft, firm and hard) to meet different design reuse criteria. The soft IP may be generated from a previous successful project flow or the user may map the design/sub-module to a virtual technology device during a block-level flow. If the design passes RTL rule checking and logical synthesis without any errors and congestion warnings, and the target frequency is achieved, then they have the option of creating a soft core for that design block. The soft core can be compile-time configurable if each combination of the configuration has been tested in the flow. As indicated in the flow illustrated in FIG. <b>2</b>, the soft IP may be updated if a bug or timing violation fix is identified in a subsequent design flow. Allowing the soft IP to be updated guarantees the integrity of the soft IP. The tool may generate appropriate configuration information about the core in XML (or other) format. In one example, the design information captured and bundled as part of the soft IP package may include the following:
<ul id="ul0001" list-style="none">
    <li id="ul0001-0001" num="0000">
    <ul id="ul0002" list-style="none">
        <li id="ul0002-0001" num="0028">a) synthesizable RTL with different configuration options (if existing);</li>
        <li id="ul0002-0002" num="0029">b) synthesis constraints;</li>
        <li id="ul0002-0003" num="0030">c) estimated timing, size and power info;</li>
        <li id="ul0002-0004" num="0031">d) interface signal information.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0029" num="0032">Similar to soft IP, the firm IP may be generated from a previous successful project flow or the user may map the design/sub-module to a virtual technology device during a block-level flow. The firm IP may be generated after physical synthesis with a time-closed gate level netlist file. If any bug fix affects the design block, the firm IP may be re-generated based on the updated design database. Ideally, the IP placement should be confined in a region to enhance the performance and design reusability. In one example, the design information captured and bundled as part of the firm IP package may include the following:
<ul id="ul0003" list-style="none">
    <li id="ul0003-0001" num="0000">
    <ul id="ul0004" list-style="none">
        <li id="ul0004-0001" num="0033">a) gate level netlist with relative placement constraints;</li>
        <li id="ul0004-0002" num="0034">b) synthesis constraints;</li>
        <li id="ul0004-0003" num="0035">c) estimated timing, size and power info;</li>
        <li id="ul0004-0004" num="0036">d) interface signal information.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0030" num="0037">In contrast to soft and firm IP, which can be generated at the customer's site, hard IP can only be generated based on a successful prototype. Generation of the hard IP should be done by the manufacturer of the platform at the customer's request. In one example, the design information captured and bundled as part of the hard IP package may include the following:
<ul id="ul0005" list-style="none">
    <li id="ul0005-0001" num="0000">
    <ul id="ul0006" list-style="none">
        <li id="ul0006-0001" num="0038">a) a timing-closed gate level netlist with both placement and routing information;</li>
        <li id="ul0006-0002" num="0039">b) an extracted timing model (ETM) of the IP;</li>
        <li id="ul0006-0003" num="0040">c) an accurate timing, size and power report;</li>
        <li id="ul0006-0004" num="0041">d) interface signal information.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0031" num="0042">Referring to <figref idref="DRAWINGS">FIG. 3</figref>, a block diagram is shown illustrating an example of an IP collection in accordance with a preferred embodiment of the present invention. As shown in <figref idref="DRAWINGS">FIG. 3</figref>, IP may be generated from one or more previous successful designs <b>150</b>. The generated IP may be re-used in a next generation of design <b>152</b>. The next generation of design <b>152</b> may also generate reusable IP. The reusable IP generated by the designs <b>150</b> and <b>152</b> may be added to a private (or customer) IP collection <b>154</b>. The present invention generally provides an advantage by enabling private IP collections within a company. Another advantage is that IP related information and statistics about frequency, size, power, etc. may be captured and reused in a subsequent product. The present invention may help in both design planning stages and implementation stages. The present invention may especially benefit large companies with design groups across different geographic regions.</p>
<p id="p-0032" num="0043">Referring to <figref idref="DRAWINGS">FIG. 4</figref>, a flow diagram is shown illustrating an example of an implementation flow <b>200</b> using information generated in accordance with a preferred embodiment of the present invention. The three types of IP generated in accordance with the present invention may be reused within the implementation design flow <b>200</b>. The design flow <b>200</b> may comprise a number of blocks (or modules) <b>202</b>-<b>256</b>. In one example, the blocks <b>202</b>-<b>256</b> may be implemented similarly to the corresponding blocks <b>102</b>-<b>156</b> in <figref idref="DRAWINGS">FIG. 2</figref>. In one embodiment, one or more of the blocks <b>212</b>-<b>224</b>, <b>236</b>, <b>240</b>, <b>242</b>, <b>248</b>, <b>250</b>, <b>254</b> and <b>256</b> may be omitted for previously generated reusable IP.</p>
<p id="p-0033" num="0044">In one example, the design implementation flow <b>200</b> may further comprise a block (or module) <b>260</b>, a block (or module) <b>262</b>, a block (or module) <b>264</b> and a block (or module) <b>266</b>. The block <b>260</b> may be implemented as a private IP environment setup block (or process). The block <b>262</b> may be implemented as a soft IP information input block (or process). The block <b>264</b> may be implemented as a firm IP insertion block (or process). The block <b>266</b> may be implemented as a hard IP insertion block (or process).</p>
<p id="p-0034" num="0045">The block <b>260</b> may be configured to provide information regarding setup of a private IP environment of the design implementation flow <b>200</b>. The design implementation flow <b>200</b> may be configured to use the customer (or private) IP by setting up, for example, a private IP environment variable with the information from the block <b>260</b> before invoking the flow tool. The private IP environment variable may configure the tool to load the IP from both an installation directory provided by the platform manufacturer and a user defined private IP directory. For example, the block <b>260</b> may provide an IP list describing available IP. In one example, the IP list may be implemented as follows:
<ul id="ul0007" list-style="none">
    <li id="ul0007-0001" num="0000">
    <ul id="ul0008" list-style="none">
        <li id="ul0008-0001" num="0046">Platform manufacturer's cores (provided by platform manufacturer):
        <ul id="ul0009" list-style="none">
            <li id="ul0009-0001" num="0047">GigaBlaze® (a trademark of LSI Logic Corporation),</li>
            <li id="ul0009-0002" num="0048">DDR2 PHY,</li>
            <li id="ul0009-0003" num="0049">PCIE x16 Link.</li>
        </ul>
        </li>
        <li id="ul0008-0002" num="0050">3rd Party IP (provided by 3rd party IP vendor or platform manufacturer):
        <ul id="ul0010" list-style="none">
            <li id="ul0010-0001" num="0051">GDA PCIE x1 Link,</li>
            <li id="ul0010-0002" num="0052">Denali DDR2 Memory Controller,</li>
        </ul>
        </li>
        <li id="ul0008-0003" num="0053">Private IP (e.g., internal IP, collected among different design groups of the customer):
        <ul id="ul0011" list-style="none">
            <li id="ul0011-0001" num="0054">EMAC,</li>
            <li id="ul0011-0002" num="0055">DSP,</li>
            <li id="ul0011-0003" num="0056">CAN.</li>
        </ul>
        </li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0035" num="0057">The block <b>262</b> may be configured to provide IP information to the block <b>226</b> for floor planning. For soft IP, the information may include RTL, IP size and instance hierarchy, diffused IP and memory usage, etc. For firm and hard IP, the information may include IP placement information, region, size, diffused IP and memory usage, etc.</p>
<p id="p-0036" num="0058">The block <b>264</b> may be configured to provide firm IP information to the block <b>232</b>. The firm IP information may include placed gate level netlist. In general, the physical synthesis does not have to be re-run. However, in some cases the physical synthesis may be re-run to refine the timing. The block <b>264</b> may be configured to insert the firm IP information (e.g., netlist) into the placed design netlist to form a partially complete design netlist (e.g., only missing the hard IP netlist). The full design netlist may be checked against various design rules (e.g., the block <b>232</b>). The block <b>266</b> may be configured to insert hard IP information (e.g., the netlist) to form a complete design netlist for the back-end flow (e.g., the block <b>244</b>).</p>
<p id="p-0037" num="0059">The advantage of the soft IP generated by the present invention is that the RTL of the soft IP is known to comply with any RTL coding guidelines of the platform. Therefore, the RTL analysis to the soft IP block is not necessary and the IP interface information provides enough information for the tool to continue with the rest of the design logic. Logic synthesis is also generally not necessary because the IP instance hierarchy structure may already be extracted during the IP generation step. Design run time may be saved, especially when dealing with large size IP blocks. In general, the soft IP is generally handled similarly to normal RTL starting with the physical synthesis step (e.g., block <b>128</b> in <figref idref="DRAWINGS">FIG. 2</figref> or block <b>228</b> in <figref idref="DRAWINGS">FIG. 4</figref>).</p>
<p id="p-0038" num="0060">The advantage of the firm IP generated by the present invention is that the RTL analysis and logic synthesis can be avoided. The advantage of the firm IP over the soft IP is that the user may avoid spending time and effort to run physical synthesis on the block and optimize the design block for area and performance. The firm IP may be black-boxed during physical synthesis and a netlist merge may occur after successful physical synthesis. However, the firm IP is generally not configurable and can only be targeted to a chosen technology.</p>
<p id="p-0039" num="0061">The hard IP generated by the present invention is generally black-boxed throughout the front-end flow. The extracted timing model and interface information of the hard IP generally provides information for the tool to complete the floorplan. Users can experiment with placement of the hard IP to achieve full chip timing closure. If diffused IP is used in the hard IP, the number of devices and the placement of the hard IP may be limited. The hard IP netlist merge generally occurs at the back-end flow. In general, the hard IP netlist merge may be taken care of by a design center of the platform manufacturer.</p>
<p id="p-0040" num="0062">The present invention generally allows a user to automatically create re-usable IP based on entry of their original design data into a design tool. Users may use the re-usable IP similarly to other IP that has been approved for use with a particular platform. The present invention also provides the user with the ability of highlighting a particular block of a design that is to be captured as a piece of hard IP.</p>
<p id="p-0041" num="0063">In general, the present invention allows a customer to create their own IP once, and reuse the IP in subsequent designs. By automatically extracting the design data from the IP, a customer can easily use their IP in the same manner the customer would use manufacturer approved IP. For example, with a soft core, the tool may extract clock, constraint, power, gate count, memory information and any other appropriate information. The extracted information may be stored in an XML (or other) form that the tools can read in. In subsequent designs, the XML may be used to save time and reduce risk by helping to, automate the process of integrating the piece of IP.</p>
<p id="p-0042" num="0064">The function(s) performed by the flow diagrams of <figref idref="DRAWINGS">FIGS. 2 and 4</figref> may be implemented using a conventional general purpose digital computer programmed according to the teachings of the present specification, as will be apparent to those skilled in the relevant art(s). Appropriate software coding can readily be prepared by skilled programmers based on the teachings of the present disclosure, as will also be apparent to those skilled in the relevant art(s).</p>
<p id="p-0043" num="0065">The present invention may also be implemented by the preparation of ASICs, FPGAs, or by interconnecting an appropriate network of conventional component circuits, as is described herein, modifications of which will be readily apparent to those skilled in the art(s).</p>
<p id="p-0044" num="0066">The present invention thus may also include a computer product which may be a storage medium including instructions which can be used to program a computer to perform a process in accordance with the present invention. The storage medium can include, but is not limited to, any type of disk including floppy disk, optical disk, CD-ROM, magneto-optical disks, ROMs, RAMs, EPROMs, EEPROMs, Flash memory, magnetic or optical cards, or any type of media suitable for storing electronic instructions.</p>
<p id="p-0045" num="0067">While the invention has been particularly shown and described with reference to the preferred embodiments thereof, it will be understood by those skilled in the art that various changes in form and details may be made without departing from the spirit and scope of the invention.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>The invention claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A design tool for generating design views of a semiconductor chip, the design tool comprising:
<claim-text>an input module configured to receive input comprising physical and logical resources and a custom chip specification;</claim-text>
<claim-text>an generation module configured to generate Register Transfer Level (RTL) views for said semiconductor chip;</claim-text>
<claim-text>a first synthesis module configured to perform logic synthesis using the RTL views;</claim-text>
<claim-text>a user interface module configured to query a user whether re-usable intellectual property (IP) is to be generated on said semiconductor chip; and</claim-text>
<claim-text>an extraction module configured to extract and package design information for the re-usable IP in response to a request from the user.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The design tool according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein said re-usable IP comprises one or more types of IP selected from the group consisting of soft IP, firm IP and hard IP.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The design tool according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein said re-usable IP comprises a synthesizable RTL netlist.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The design tool according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein said re-usable IP comprises a gate level netlist.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The design tool according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein said re-usable FR comprises a timing-closed gate level netlist with placement and routing constraints.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The design tool according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein said design information for the re-usable IP comprises one or more types of information selected from the group consisting of netlists, synthesis constraints, configuration options, operating frequency, area estimation, power estimation, technology and platform constraints.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The design tool according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>a floorplan module configured to generate a floorplan view of said semiconductor chip; and</claim-text>
<claim-text>a second synthesis module configured to perform a physical synthesis for said semiconductor chip.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The design tool according to <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein said floorplan module is configured to accept re-usable IP design information extracted from another custom design.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The design tool according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein said extraction module is configured to package the design information for the re-usable IP using extensible mark-up language (XML).</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The design tool according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein said user interface is further configured to highlight a core for later generation into hard IP in response to input from the user.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. A method for enabling reuse of design information from a design for a semiconductor chip comprising:
<claim-text>receiving input comprising physical and logical resources and a custom chip specification;</claim-text>
<claim-text>generating Register Transfer Level (RTL) views for said semiconductor chip;</claim-text>
<claim-text>generating a logic synthesis using the RTL views;</claim-text>
<claim-text>querying a user whether re-usable intellectual property (IP) is to be generated on said semiconductor chip; and</claim-text>
<claim-text>extracting and packaging design information for the re-usable IP in response to a request from the user.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method according to <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein said re-usable IP comprises one or more types of IP selected from the group consisting of soft IP, firm IP and hard IP.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The method according to <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein said re-usable IP comprises a synthesizable RTL netlist.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The method according to <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein said re-usable IP comprises a gate level netlist.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The method according to <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein said re-usable IP comprises a timing-closed gate level netlist with placement and routing constraints.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The method according to <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein said design information for the re-usable IP comprises one or more types of information selected from the group consisting of netlists, synthesis constraints, configuration options, operating frequency, area estimation, power estimation, interface signals, technology and platform constraints.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The method according to <claim-ref idref="CLM-00011">claim 11</claim-ref>, further comprising:
<claim-text>generating a floorplan view of said semiconductor chip; and</claim-text>
<claim-text>generating a physical synthesis of said semiconductor chip.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The method according to <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the generating of said floorplan view comprises re-using IP design information extracted from another custom design.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The method according to <claim-ref idref="CLM-00011">claim 11</claim-ref>, further comprising highlighting a core for later generation into hard IP in response to input from the user.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. A computer readable medium having instructions for causing a computer to execute a method for designing a semiconductor chip comprising:
<claim-text>receiving input comprising physical and logical resources and a custom chip specification;</claim-text>
<claim-text>generating Register Transfer Level (RTL) views for said semiconductor chip;</claim-text>
<claim-text>generating a logic synthesis using the RTL views;</claim-text>
<claim-text>querying a user whether re-usable intellectual property (IP) is to be generated on said semiconductor chip; and</claim-text>
<claim-text>extracting and packaging design information for the re-usable IP in response to a request from the user.</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>
