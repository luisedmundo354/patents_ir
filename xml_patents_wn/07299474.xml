<us-patent-grant lang="EN" dtd-version="v4.2 2006-08-23" file="US07299474-20071120.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20071106" date-publ="20071120">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>07299474</doc-number>
<kind>B2</kind>
<date>20071120</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>10504678</doc-number>
<date>20030206</date>
</document-id>
</application-reference>
<us-application-series-code>10</us-application-series-code>
<priority-claims>
<priority-claim sequence="01" kind="national">
<country>GB</country>
<doc-number>0203617.6</doc-number>
<date>20020215</date>
</priority-claim>
</priority-claims>
<us-term-of-grant>
<us-term-extension>434</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>3</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>719310</main-classification>
</classification-national>
<invention-title id="d0e71">Application window closure in response to event in parent window</invention-title>
<references-cited>
<citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5819042</doc-number>
<kind>A</kind>
<name>Hansen</name>
<date>19981000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709222</main-classification></classification-national>
</citation>
<citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>6118451</doc-number>
<kind>A</kind>
<name>Alexander</name>
<date>20000900</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>345356</main-classification></classification-national>
</citation>
<citation>
<patcit num="00003">
<document-id>
<country>EP</country>
<doc-number>0660219</doc-number>
<kind>A</kind>
<date>19941200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00004">
<othercit>IBM, Pending Apply/ Close Program, 1991.</othercit>
</nplcit>
<category>cited by examiner</category>
</citation>
</references-cited>
<number-of-claims>2</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>710310</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>719310</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>4</number-of-drawing-sheets>
<number-of-figures>4</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20050091382</doc-number>
<kind>A1</kind>
<date>20050428</date>
</document-id>
</related-publication>
</us-related-documents>
<parties>
<applicants>
<applicant sequence="001" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Adams</last-name>
<first-name>Michael C</first-name>
<address>
<city>Winchester</city>
<country>GB</country>
</address>
</addressbook>
<nationality>
<country>GB</country>
</nationality>
<residence>
<country>GB</country>
</residence>
</applicant>
<applicant sequence="002" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Phillips</last-name>
<first-name>Jonathan</first-name>
<address>
<city>Powys</city>
<country>GB</country>
</address>
</addressbook>
<nationality>
<country>GB</country>
</nationality>
<residence>
<country>GB</country>
</residence>
</applicant>
<applicant sequence="003" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Whyley</last-name>
<first-name>Christopher J M</first-name>
<address>
<city>Southampton</city>
<country>GB</country>
</address>
</addressbook>
<nationality>
<country>GB</country>
</nationality>
<residence>
<country>GB</country>
</residence>
</applicant>
</applicants>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Schmeiser, Olsen &amp; Watts</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="02" rep-type="attorney">
<addressbook>
<last-name>Schiesser</last-name>
<first-name>William E.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</parties>
<assignees>
<assignee>
<addressbook>
<orgname>International Business Machines Corporation</orgname>
<role>02</role>
<address>
<city>Armonk</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Thomson</last-name>
<first-name>William</first-name>
<department>2194</department>
</primary-examiner>
<assistant-examiner>
<last-name>Truong</last-name>
<first-name>LeChi</first-name>
</assistant-examiner>
</examiners>
<pct-or-regional-filing-data>
<document-id>
<country>WO</country>
<doc-number>PCT/GB03/00549</doc-number>
<kind>00</kind>
<date>20030206</date>
</document-id>
<us-371c124-date>
<date>20040812</date>
</us-371c124-date>
</pct-or-regional-filing-data>
<pct-or-regional-publishing-data>
<document-id>
<country>WO</country>
<doc-number>WO03/069465</doc-number>
<kind>A </kind>
<date>20030821</date>
</document-id>
</pct-or-regional-publishing-data>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">The present invention relates to a method for effecting the closure of an application window in response to an event associated with its parent window. The method comprises polling an indicator associated with the parent application window and in the absence of said indicator accessing a system provided function causing the closure of the application window.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="108.80mm" wi="185.34mm" file="US07299474-20071120-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="188.04mm" wi="119.80mm" orientation="landscape" file="US07299474-20071120-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="172.13mm" wi="107.61mm" orientation="landscape" file="US07299474-20071120-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="168.66mm" wi="102.79mm" file="US07299474-20071120-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="132.33mm" wi="127.25mm" orientation="landscape" file="US07299474-20071120-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading>
<p id="p-0002" num="0001">This application is a national stage application of and claims priority from PCT International Application Number PCT/GB03/00549 filed 6 Feb. 2003, which claims priority from GB Application Number 0203617.6 filed 15 Feb. 2002. These disclosures are hereby incorporated by reference herein in their entireties. PCT International Application Number PCT/GB03/00549 was published in the English language as International Publication Number WO 03/069465 A2 on 21 Aug. 2003.</p>
<heading id="h-0002" level="1">FIELD OF THE INVENTION</heading>
<p id="p-0003" num="0002">The present invention relates to the field of Internet technologies and the protection of user's privacy when using an application that enables a user to browse confidential or sensitive information. More specifically the present invention relates to a method for effecting the closure of an application window in response to an event associated with its parent window.</p>
<heading id="h-0003" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0004" num="0003">Consumers use the services provided by the World Wide Web to perform confidential transactions such as personal banking, share dealing, buying goods on-line or launching other services from within a portal environment.</p>
<p id="p-0005" num="0004">A user can access these services over a network communicating with servers located throughout the world for obtaining information. The information is stored on servers and delivered to the user's application from a server by sending files or data packets to the requesting client application from the network server resources.</p>
<p id="p-0006" num="0005">When performing such transactions on line consumers are concerned about the privacy and security of their information. In particular the use of shared computers by a number of different users at the same location increases these concerns as confidential information is on display in open application windows for other users to view.</p>
<p id="p-0007" num="0006">When a number of users share the same computer it is possible that a user may not log off or shut down their application correctly and leave sensitive, confidential or personal information on display in open application windows for a subsequent user to view. The information contained in the open application windows could be used by another user to gain unauthorized access to another persons' bank accounts, share-dealing accounts or credit card details. This is a particular problem for network applications accessing confidential information on-line. The security concerns can mostly be mitigated by explicit session management.</p>
<p id="p-0008" num="0007">Hypertext Transfer Protocol—HTTP, which defines the ways in which network applications interact with network servers; performs session management. HTTP is a ‘request-reply’ protocol in which the client sends a request message to the server containing the URL of the required resource. The server looks up the pathname and, if it exists, sends back the file's content in a reply to the client. HTTP allows for content negotiation and authentication.</p>
<p id="p-0009" num="0008">Authentication involves a user entering a password; on first attempt to access a password protected area, the server reply contains a challenge applicable to that resource, for example a digital signature. When it receives the challenge, the client prompts the user to type a name and password and submits associated credentials with subsequent requests.</p>
<p id="p-0010" num="0009">However the need to establish and close a connection for every request-reply exchange is expensive, both in overloading the server and in sending too many messages over the network. Persistent connections are used that remain open over a series of request reply exchanges between client and server. A persistent connection can be closed by a: client or server at any time by sending an indication to the other participant. Servers may be configured to close a persistent connection when it has been idle for a period of time. If an application over a network has been idle for some time then the connection will time out and the user will be required to re-enter their authentication details into the application.</p>
<p id="p-0011" num="0010">Session management can therefore be useful to stop an unauthorized user gaining access to a variety of different applications that a user may be logged on to, but session management does not provide management of windows and consequently an unauthorized user will be able to view any confidential information on display in an open application window.</p>
<p id="p-0012" num="0011">Where an explicit log off has not occurred in the application window there are a number of design implications that can be considered when designing the user interface with regards to the management of windows. Broadly these fall into the following categories which are; not launching any further application windows, only launching a single application window at a given time in an application window that exhibits modal behavior, or closing the application's home page window by using the application's File—Exit route or an operating system provided function such as the ‘X’ icon or task manager.</p>
<p id="p-0013" num="0012">One method of providing the management of windows in an application is to use an interpreted client side programming language to provide the required functionality. Using an interpreted client side programming language such as JavaScript, the management of windows is limited to creating new application windows with defined properties of height, width, color and style. A client side programming language such as JavaScript uses what are known as ‘modal windows’ to obtain user feedback as to whether to perform specified operations. A typical modal window contains one or more buttons yes, no, cancel or okay and a question prompting the user, for example ‘Do you wish to close this application?’. A modal window will not go away until a user clicks on the yes, no, cancel or okay button.</p>
<p id="p-0014" num="0013">Modal application windows that are provided by client side code have their limitations, for example when using the showModalDialog( ) function in JavaScript. The showModialDialog( ) function creates a separate pop up application window displaying the html page of a given URL. The application window allows the user to address the data of that application window before returning to the parent application window.</p>
<p id="p-0015" num="0014">The showModalDialog( ) function is Internet Explorer® browser specific and provides no support for the Netscape® browser or the W3C Document Object Model. The showModalDialog( ) function creates a completely standalone application window which has no scriptable relationship with the launching application window. On the Macintosh® operating system platform it is not possible to set the width, height and color properties.</p>
<p id="p-0016" num="0015">The onFocus( ) function in the parent window enables the selection of the parent application window and captures the event generated by the onFocus( ) function. The onFocus( ) function carries out a check to determine whether the launched application window exists. The onFocus event handler executes the specified JavaScript code or function on the occurrence of an onFocus( ) generated event. The onFocus event occurs when a window, frame or form element is given focus by the user. The onFocus( ) function works in the Internet Explorers® browser and the Netscape 4.xx® browser, the Macintosh® and the LINUX® platforms.</p>
<p id="p-0017" num="0016">A disadvantage of this function is the inability to minimize the modal window in the Microsoft Windows® operating system. The function can be fatal in the Netscape 6® browser. When the close button on the parent application window is selected and the modal application window is open the parent window is closed leaving the modal application window open.</p>
<p id="p-0018" num="0017">The repeated calling of the self.focus( ) function in a child application window, allows a timer to start when a document is loaded into the application window. The timer rapidly and repeatedly calls the self.focus( ) function on the launched window. A disadvantage of implementing the self.focus( ) function is that it is modal to all other applications and the function cannot access other launched application windows, because there does not exist a scriptable relationship between the application window and the modal window. The self.focus( ) function can also close the launched application window via the operating system function calls; thereby leaving the launched window open, which potentially could contain a transactional application in an invalid session.</p>
<p id="p-0019" num="0018">The onFocus( ) or onClick( ) function in the parent window calls the on OpenedWindow( ) function. Focusing or clicking on the parent application window calls a check for the existence of a launched application window. If the check returns true then the launched application window is brought forward by windowname.focus( ) function. The windowname.focus( ) function has the disadvantage that it does not produce consistent results in the Internet Explorer 4® browser.</p>
<p id="p-0020" num="0019">Compatibility problems are a major consideration when creating applications using an interpreted client side language. Different applications support different levels of HTML and the amount of JavaScript functionality that an application can support depends on the interpreter in the application.</p>
<p id="p-0021" num="0020">Another method of closing opened application windows is by a system provided function such as the ‘X’ icon on the application task bar, the task manager or by the use of the File/Exit on the menu bar. Although this closes the opened application window it provides no automation of the close action of any network or non-network application window launched from within the initial application window and relies on the user to perform the action.</p>
<heading id="h-0004" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0022" num="0021">In accordance with the present invention there is now provided a method for effecting the closure of an application window in response to an event associated with its parent application window comprising the step of, polling on an indicator associated with the parent of the application window and in the absence of said indicator accessing a system provided function causing the closure of the application window. The present invention provides for the automatic closure of a child application window in response to an event associated with the parent of the application window. The present invention closes the child application window when the parent application window no longer exists. Each launched application window takes on the role of a parent and a child with the control of the application window associated with the individual launched application windows. By associating window control with the individual launched applications windows, the launched application is able to detect whether the application it was launched from exists or not.</p>
<p id="p-0023" num="0022">Preferably the method provides for the polling of an indicator of the parent of the application window for the existence of the indicator to determine whether the application window is not to be closed. The present invention provides for the data within the application window to be refreshed or reloaded without closing the application window or subsequent launched application windows that are still required by the user.</p>
<p id="p-0024" num="0023">Preferably the method provides for an event, which is navigating to a resource outside of the application's environment. If a resource is navigated to outside of the application's environment, the application window will close.</p>
<p id="p-0025" num="0024">Preferably the method provides for monitoring the status of the indicator of the parent of the application window. Preferably the method provides for an application window to operate in a network environment.</p>
<p id="p-0026" num="0025">According to a second aspect of the present invention, a computer program product comprising computer program code stored on a computer readable storage medium, when executed on a computer, the program code embodied therein effects the closure of an application window in response to an event occurring in the parent of the application window.</p>
<p id="p-0027" num="0026">According to a third aspect of the present invention, there is provided a system for effecting the closure of an application windows in response to an event associated with its parent application window, the system comprising means for polling on an indicator associated with the parent of the application window and in the absence of said indicator accessing, a system provided function thereby causing the closure of the application window.</p>
<p id="p-0028" num="0027">Preferably the system provides means for polling on said indicator of the parent of the application window for the existence of said indicator to determine whether the application window is not to be closed. Preferably the system provides means for detecting the occurrence of an event, wherein the event is navigating to a resource outside of the application's environment.</p>
<p id="p-0029" num="0028">Preferably the system provides a means for, monitoring the status of the indicator of the parent of the application window. Preferably the system provides means for the parent of the application window to be refreshed without destroying data within the application window.</p>
<p id="p-0030" num="0029">Preferably the system provides means for the parent of the application window to be closed, without closing a required application window.</p>
<p id="p-0031" num="0030">The present invention when operating in a network environment allows for the inherent problems of network page delivery latency. When an application window is reloading or refreshing data within its window, the invention comprises a means for polling on the existence of an indicator to determine the indicators existence. If it does not exist, the system pauses for m seconds before checking for the existence of the indicator. This will allow for the data to be refreshed within the application window without closing any dependent application windows. This achieves a further advantage of not destroying the data structure of the application's window that is being refreshed. Unlike a traditional desktop system the flags exist throughout the user's session and the data is not lost. The present invention therefore does not need to keep a list of what application windows are open and what event handlers are in use at any given time.</p>
<p id="p-0032" num="0031">The present invention further provides an advantage in that the described method, computer program product and system operates across a variety of different applications and is not application specific.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0033" num="0032">The invention will now be described by way of example only, with reference to the accompanying drawings, in which:</p>
<p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. 1</figref> illustrates a portal environment as accessed in a network or non-network environment as found in the prior art;</p>
<p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. 2</figref> illustrates multiple applications in a portal environment as found in the prior art;</p>
<p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. 3</figref> shows a flow diagram illustrating the application window closing method of the present invention;</p>
<p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. 4</figref> illustrates the relationship between multiple application windows as described by the present invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0006" level="1">DETAILED DESCRIPTION OF THE INVENTION</heading>
<p id="p-0038" num="0037">Referring to <figref idref="DRAWINGS">FIG. 1</figref>, a portal environment <b>1</b>, accessed by a network application <b>2</b> over a network <b>3</b>, contains a plurality of hypertext links to other services <b>4</b> for example banking <b>5</b>, insurance <b>6</b>, investment <b>7</b>, loans <b>8</b>, pensions <b>10</b> and savings <b>11</b>.</p>
<p id="p-0039" num="0038">Clicking on the service's hypertext link can access a service <b>4</b>. The application sends a request message <b>13</b> through the network <b>3</b> to the network server <b>15</b> containing the URL <b>12</b> of the required resource. The network server <b>15</b> looks up the pathname of the requested resource <b>12</b> and the network server <b>15</b> sends back the file contents in a reply message <b>14</b> through the network <b>3</b> to the application <b>2</b>. The requested resource <b>12</b> is loaded into an application window in the portal environment <b>1</b>.</p>
<p id="p-0040" num="0039">A plurality of services can be accessed and loaded into a plurality of launched application windows whilst retaining access to the portal home page in the initial application window.</p>
<p id="p-0041" num="0040">Referring to <figref idref="DRAWINGS">FIG. 2</figref>, Internet banking is accessed by selecting the ‘sign on’ hypertext link <b>20</b> from the Internet banking section of the portal home page <b>21</b>. A new application window <b>22</b> is launched and displayed together with the portal homepage <b>21</b>. Confidential information is required to be input into the application's form fields <b>25</b> to identify the user to the application. Once a log-on has successfully completed a second application window <b>23</b> is launched, displaying a list of options pertaining to the manage accounts window, as a selection of hypertext links <b>26</b>. To manage a current account, the current account <b>26</b> hypertext link is selected and a third application window <b>24</b> is launched. Further options are displayed in the newly launched application window. In the example of <figref idref="DRAWINGS">FIG. 2</figref>, by way of an example only, a total of four nested application windows are open on the computer screen. Each application window is dependent on the application window that it was launched from.</p>
<p id="p-0042" num="0041">The present invention is equally applicable to both network environments and non-network environments, where the required information is contained on a server located on a network or stored on a user's computer disk storage system and accessed off-line.</p>
<p id="p-0043" num="0042">Referring now to <figref idref="DRAWINGS">FIG. 3</figref>, the portal home page application is launched <b>31</b>, displaying the hypertext links to other services within or outside of the portal environment. A variable called ‘KeepOpen’ is instantiated in the launched portal homepage window <b>32</b>. A dependent application window is launched <b>33</b> by selecting a hypertext link from the portal homepage <b>1</b>.</p>
<p id="p-0044" num="0043">The &lt;body&gt; tag in the html page in a launched application window contains an onLoad( ) function. The onLoad( ) function calls an initial function. The initial function carries out a check to ascertain if the data currently loaded into the application's parent window contains a variable named for example ‘KeepOpen’ <b>34</b>.</p>
<p id="p-0045" num="0044">If the initial function returns a value of ‘false’ <b>35</b>, the initial function ceases checking whether the variable exists for m seconds <b>36</b>. This allows for the parent application to be refreshed by a user or another application.</p>
<p id="p-0046" num="0045">After m seconds the initial function resumes its check on the ‘KeepOpen’ variable <b>37</b>. If the initial function finds that the ‘KeepOpen’ variable exists, the initial function returns a value of true <b>38</b>. The initial function stops checking the existence of the variable for n seconds <b>39</b>. After n seconds the initial function resumes its check on the ‘KeepOpen’ variable.</p>
<p id="p-0047" num="0046">The initial function continues through this process until the initial function returns a value of ‘false’ <b>35</b>. The initial function pauses checking on the ‘KeepOpen’ variable for m seconds <b>36</b> to allow for the parent application being refreshed. After m seconds the initial function resumes its check on the ‘KeepOpen’ variable. If the ‘KeepOpen’ variable does not exist then a value of ‘false’ is returned <b>41</b> and the child window is closed <b>42</b>.</p>
<p id="p-0048" num="0047">The present invention allows for the inherent problems of network page delivery latency when an application is reloading or refreshing data within its window. The present invention provides a method for polling on the existence of an indicator to determine the indicators existence. If it does not exist, the method pauses for m seconds before checking the existence of the variable. This process allows for the data within the application window to be refreshed without closing any dependent application windows. This achieves a further advantage of not destroying the data structure of the application's window that is being refreshed, unlike a traditional desktop system the flags exist throughout the users session. The present invention therefore does not need to keep a list of what application windows are open and what event handlers are in use at any given time.</p>
<p id="p-0049" num="0048">Referring now to <figref idref="DRAWINGS">FIG. 4</figref> of the present invention, a plurality of application windows can be launched from within a portal environment. Each application window is dependent on the application that it was launched from.</p>
<p id="p-0050" num="0049">When closing the finance application window <b>51</b> by navigating to a resource outside of the portal environment or clicking on a close button, the personal bank account application window <b>52</b> and the current account application window <b>53</b> will be closed. The current account application window <b>53</b> is dependent on the personal bank account application window <b>52</b>. The personal bank account application window <b>52</b> is dependent on the finance application window <b>51</b>. Each window is dependent on the window that it was launched from as the logic runs in the dependent window. Each launched application window takes on the role of a parent and child, but only if a further application window is launched from within the parent application window therefore creating a child application window.</p>
<p id="p-0051" num="0050">When closing the current account application window <b>53</b>, only the current account application window <b>53</b> will close, as there does not exist in this example a dependent window.</p>
<p id="p-0052" num="0051">When closing the portal home page window <b>50</b>, the finance application window <b>51</b>, the personal bank accounts application window <b>52</b> and the current account application window <b>53</b> will close.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>The invention claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method for effecting closure of a child application window in response to an event associated with a parent window of the child application window, said method comprising:
<claim-text>instantiating a KeepOpen indicator in data loaded into the parent window, said parent window associated with a portal home page of a parent application;</claim-text>
<claim-text>launching the child application window by selecting a text link from the portal homepage, wherein a &lt;body&gt; tag in a html page in the child application window comprises an onLoad( ) function;</claim-text>
<claim-text>calling, by the onLoad( ) function, an initial function configured to check for the existence of the KeepOpen indicator in the data currently loaded into the parent window;</claim-text>
<claim-text>after said instantiating the indicator, said launching the child application, and said calling the initial function: performing a loop that comprises at least two iterations, wherein each iteration of the at least two iterations of the loop comprises:
<claim-text>ascertaining, by the initial function, whether the data currently loaded into the parent window comprises the KeepOpen indicator;</claim-text>
<claim-text>if said ascertaining ascertains that the data currently loaded into the parent window comprises the KeepOpen indicator then pausing, by the initial function, a first number of seconds followed by looping back to said ascertaining to perform the next iteration of the loop, otherwise pausing, by the initial function, a second number of seconds followed by determining, by the initial function, whether the data currently loaded into the parent window includes the KeepOpen indicator;</claim-text>
<claim-text>if said determining determines that the data currently loaded into the parent window comprises the KeepOpen indicator then pausing, by the initial function, the first number of seconds followed by looping back to said ascertaining to perform the next iteration of the loop, otherwise exiting the loop followed by closing the child application window;</claim-text>
</claim-text>
<claim-text>wherein during a first iteration of the loop the parent window is not closed and is being refreshed, which causes the initial function to not ascertain that the KeepOpen indicator is comprised by the data currently loaded into the parent window and further causes the initial function, after pausing the second number of seconds, to determine that the KeepOpen indicator is comprised by the data currently loaded into the parent window, resulting in not closing the child application window during the first iteration; and</claim-text>
<claim-text>wherein during a final iteration of the loop the parent window is closed, which causes the initial function to not ascertain that the KeepOpen indicator is comprised by the data currently loaded into the parent window and further causes the initial function, after pausing the second number of seconds, to determine that the KeepOpen indicator is not comprised by the data currently loaded into the parent window, resulting in closing the child application window during the final iteration.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. A computer program product comprising computer program code stored on a computer readable storage medium, which when executed on a computer, the program code embodied therein performs the method of <claim-ref idref="CLM-00001">claim 1</claim-ref>.</claim-text>
</claim>
</claims>
</us-patent-grant>
