<us-patent-grant lang="EN" dtd-version="v4.2 2006-08-23" file="US07298738-20071120.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20071106" date-publ="20071120">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>07298738</doc-number>
<kind>B1</kind>
<date>20071120</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>09976206</doc-number>
<date>20011012</date>
</document-id>
</application-reference>
<us-application-series-code>09</us-application-series-code>
<us-term-of-grant>
<us-term-extension>975</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>H</section>
<class>04</class>
<subclass>L</subclass>
<main-group>12</main-group>
<subgroup>56</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>370360</main-classification>
<further-classification>370474</further-classification>
</classification-national>
<invention-title id="d0e53">Backpressuring using a serial bus interface and a status switch cell</invention-title>
<references-cited>
<citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5526344</doc-number>
<kind>A</kind>
<name>Diaz et al.</name>
<date>19960600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370364</main-classification></classification-national>
</citation>
<citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5666353</doc-number>
<kind>A</kind>
<name>Klausmeier et al.</name>
<date>19970900</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>370230</main-classification></classification-national>
</citation>
<citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>5689500</doc-number>
<kind>A</kind>
<name>Chiussi et al.</name>
<date>19971100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370235</main-classification></classification-national>
</citation>
<citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>5715250</doc-number>
<kind>A</kind>
<name>Watanabe</name>
<date>19980200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>5742765</doc-number>
<kind>A</kind>
<name>Wong et al.</name>
<date>19980400</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>395200</main-classification></classification-national>
</citation>
<citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>5764645</doc-number>
<kind>A</kind>
<name>Bernet et al.</name>
<date>19980600</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>5787255</doc-number>
<kind>A</kind>
<name>Parlan et al.</name>
<date>19980700</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>395200</main-classification></classification-national>
</citation>
<citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>5796736</doc-number>
<kind>A</kind>
<name>Suzuki</name>
<date>19980800</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>5802052</doc-number>
<kind>A</kind>
<name>Venkataraman</name>
<date>19980900</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>370395</main-classification></classification-national>
</citation>
<citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>5802287</doc-number>
<kind>A</kind>
<name>Rostoker et al.</name>
<date>19980900</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>395200</main-classification></classification-national>
</citation>
<citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>5809021</doc-number>
<kind>A</kind>
<name>Diaz et al.</name>
<date>19980900</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>370364</main-classification></classification-national>
</citation>
<citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>5838915</doc-number>
<kind>A</kind>
<name>Klausmeier et al.</name>
<date>19981100</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>395200</main-classification></classification-national>
</citation>
<citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>5859835</doc-number>
<kind>A</kind>
<name>Varma et al.</name>
<date>19990100</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>370229</main-classification></classification-national>
</citation>
<citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>5867480</doc-number>
<kind>A</kind>
<name>Thomas et al.</name>
<date>19990200</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>370230</main-classification></classification-national>
</citation>
<citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>5870394</doc-number>
<kind>A</kind>
<name>Oprea</name>
<date>19990200</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>370392</main-classification></classification-national>
</citation>
<citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>5898688</doc-number>
<kind>A</kind>
<name>Norton et al.</name>
<date>19990400</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>370362</main-classification></classification-national>
</citation>
<citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>5905725</doc-number>
<kind>A</kind>
<name>Sindhu et al.</name>
<date>19990500</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>370389</main-classification></classification-national>
</citation>
<citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>5917820</doc-number>
<kind>A</kind>
<name>Rekhter</name>
<date>19990600</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>370392</main-classification></classification-national>
</citation>
<citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>5917828</doc-number>
<kind>A</kind>
<name>Thompson</name>
<date>19990600</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>370474</main-classification></classification-national>
</citation>
<citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>5920705</doc-number>
<kind>A</kind>
<name>Lyon et al.</name>
<date>19990700</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>395200</main-classification></classification-national>
</citation>
<citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>5946313</doc-number>
<kind>A</kind>
<name>Allan et al.</name>
<date>19990800</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>370397</main-classification></classification-national>
</citation>
<citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>5963541</doc-number>
<kind>A</kind>
<name>Koga et al.</name>
<date>19991000</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>370229</main-classification></classification-national>
</citation>
<citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>5987034</doc-number>
<kind>A</kind>
<name>Simon et al.</name>
<date>19991100</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>370465</main-classification></classification-national>
</citation>
<citation>
<patcit num="00024">
<document-id>
<country>US</country>
<doc-number>6026086</doc-number>
<kind>A</kind>
<name>Lancelot et al.</name>
<date>20000200</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>370353</main-classification></classification-national>
</citation>
<citation>
<patcit num="00025">
<document-id>
<country>US</country>
<doc-number>6034945</doc-number>
<kind>A</kind>
<name>Hughes et al.</name>
<date>20000300</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>370230</main-classification></classification-national>
</citation>
<citation>
<patcit num="00026">
<document-id>
<country>US</country>
<doc-number>6038215</doc-number>
<kind>A</kind>
<name>Uekumasu</name>
<date>20000300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370230</main-classification></classification-national>
</citation>
<citation>
<patcit num="00027">
<document-id>
<country>US</country>
<doc-number>6052379</doc-number>
<kind>A</kind>
<name>Iverson et al.</name>
<date>20000400</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>370442</main-classification></classification-national>
</citation>
<citation>
<patcit num="00028">
<document-id>
<country>US</country>
<doc-number>6088355</doc-number>
<kind>A</kind>
<name>Mills et al.</name>
<date>20000700</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>370392</main-classification></classification-national>
</citation>
<citation>
<patcit num="00029">
<document-id>
<country>US</country>
<doc-number>6091725</doc-number>
<kind>A</kind>
<name>Cheriton et al.</name>
<date>20000700</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>370392</main-classification></classification-national>
</citation>
<citation>
<patcit num="00030">
<document-id>
<country>US</country>
<doc-number>6101188</doc-number>
<kind>A</kind>
<name>Sekine et al.</name>
<date>20000800</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>370401</main-classification></classification-national>
</citation>
<citation>
<patcit num="00031">
<document-id>
<country>US</country>
<doc-number>6111877</doc-number>
<kind>A</kind>
<name>Wilford et al.</name>
<date>20000800</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>370392</main-classification></classification-national>
</citation>
<citation>
<patcit num="00032">
<document-id>
<country>US</country>
<doc-number>6115373</doc-number>
<kind>A</kind>
<name>Lea</name>
<date>20000900</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00033">
<document-id>
<country>US</country>
<doc-number>6134217</doc-number>
<kind>A</kind>
<name>Stiliadis et al.</name>
<date>20001000</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>370232</main-classification></classification-national>
</citation>
<citation>
<patcit num="00034">
<document-id>
<country>US</country>
<doc-number>6144662</doc-number>
<kind>A</kind>
<name>Colmant et al.</name>
<date>20001100</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>370390</main-classification></classification-national>
</citation>
<citation>
<patcit num="00035">
<document-id>
<country>US</country>
<doc-number>6147999</doc-number>
<kind>A</kind>
<name>Honda et al.</name>
<date>20001100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00036">
<document-id>
<country>US</country>
<doc-number>6154446</doc-number>
<kind>A</kind>
<name>Kadambi et al.</name>
<date>20001100</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>370239</main-classification></classification-national>
</citation>
<citation>
<patcit num="00037">
<document-id>
<country>US</country>
<doc-number>6157641</doc-number>
<kind>A</kind>
<name>Wilford</name>
<date>20001200</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>370389</main-classification></classification-national>
</citation>
<citation>
<patcit num="00038">
<document-id>
<country>US</country>
<doc-number>6160793</doc-number>
<kind>A</kind>
<name>Ghani et al.</name>
<date>20001200</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>370236</main-classification></classification-national>
</citation>
<citation>
<patcit num="00039">
<document-id>
<country>US</country>
<doc-number>6167027</doc-number>
<kind>A</kind>
<name>Aubert et al.</name>
<date>20001200</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>370230</main-classification></classification-national>
</citation>
<citation>
<patcit num="00040">
<document-id>
<country>US</country>
<doc-number>6169739</doc-number>
<kind>B1</kind>
<name>Isoyama</name>
<date>20010100</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>370395</main-classification></classification-national>
</citation>
<citation>
<patcit num="00041">
<document-id>
<country>US</country>
<doc-number>6175570</doc-number>
<kind>B1</kind>
<name>Cukier et al.</name>
<date>20010100</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>370414</main-classification></classification-national>
</citation>
<citation>
<patcit num="00042">
<document-id>
<country>US</country>
<doc-number>6185212</doc-number>
<kind>B1</kind>
<name>Sakamoto et al.</name>
<date>20010200</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>370395</main-classification></classification-national>
</citation>
<citation>
<patcit num="00043">
<document-id>
<country>US</country>
<doc-number>6188671</doc-number>
<kind>B1</kind>
<name>Chase et al.</name>
<date>20010200</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>370232</main-classification></classification-national>
</citation>
<citation>
<patcit num="00044">
<document-id>
<country>US</country>
<doc-number>6330239</doc-number>
<kind>B1</kind>
<name>Suzuki</name>
<date>20011200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00045">
<document-id>
<country>US</country>
<doc-number>6424662</doc-number>
<kind>B1</kind>
<name>Miki et al.</name>
<date>20020700</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00046">
<document-id>
<country>US</country>
<doc-number>6519225</doc-number>
<kind>B1</kind>
<name>Angle et al.</name>
<date>20030200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370229</main-classification></classification-national>
</citation>
<citation>
<patcit num="00047">
<document-id>
<country>US</country>
<doc-number>6522667</doc-number>
<kind>B1</kind>
<name>Oda et al.</name>
<date>20030200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00048">
<document-id>
<country>US</country>
<doc-number>6535513</doc-number>
<kind>B1</kind>
<name>Kao et al.</name>
<date>20030300</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00049">
<document-id>
<country>US</country>
<doc-number>6611522</doc-number>
<kind>B1</kind>
<name>Zheng et al.</name>
<date>20030800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>37039521</main-classification></classification-national>
</citation>
<citation>
<patcit num="00050">
<document-id>
<country>US</country>
<doc-number>6615358</doc-number>
<kind>B1</kind>
<name>Dowd et al.</name>
<date>20030900</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00051">
<document-id>
<country>US</country>
<doc-number>6631128</doc-number>
<kind>B1</kind>
<name>Lemieux</name>
<date>20031000</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00052">
<document-id>
<country>US</country>
<doc-number>6741585</doc-number>
<kind>B1</kind>
<name>Monoz et al.</name>
<date>20040500</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00053">
<document-id>
<country>US</country>
<doc-number>6795445</doc-number>
<kind>B1</kind>
<name>Kabie et al.</name>
<date>20040900</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00054">
<document-id>
<country>US</country>
<doc-number>6856595</doc-number>
<kind>B1</kind>
<name>Brown</name>
<date>20050200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370229</main-classification></classification-national>
</citation>
<citation>
<patcit num="00055">
<document-id>
<country>US</country>
<doc-number>2002/0101863</doc-number>
<kind>A1</kind>
<name>Endo</name>
<date>20020800</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00056">
<document-id>
<country>US</country>
<doc-number>2002/0101871</doc-number>
<kind>A1</kind>
<name>Takase et al.</name>
<date>20020800</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00057">
<document-id>
<country>US</country>
<doc-number>2003/0128688</doc-number>
<kind>A1</kind>
<name>Kim</name>
<date>20030700</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00058">
<document-id>
<country>US</country>
<doc-number>2004/0015590</doc-number>
<kind>A1</kind>
<name>Nagami et al.</name>
<date>20040100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00059">
<document-id>
<country>US</country>
<doc-number>2004/0028067</doc-number>
<kind>A1</kind>
<name>Chong et al.</name>
<date>20040200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00060">
<document-id>
<country>WO</country>
<doc-number>WO 97/43869</doc-number>
<date>19971100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00061">
<document-id>
<country>WO</country>
<doc-number>WO 99/17182</doc-number>
<date>19990400</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00062">
<document-id>
<country>WO</country>
<doc-number>WO 00/56012</doc-number>
<date>20000900</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00063">
<othercit>U.S. Appl. No. 09/528,802, filed Mar. 20, 2000, “Circuits for Combining ATM and Packet Data on an Optical Fiber and Methods Therefor,” by Parruck, Nguyen, Ramakrishnan.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00064">
<othercit>U.S. Appl. No. 09/539,479, filed Mar. 30, 2000, “Devices for Aggregating ATM Cells and Packets for Transmission Over the Same Channel,” by Parruck, Nguyen, Ramakrishnan.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00065">
<othercit>U.S. Appl. No. 09/539,306, filed Mar. 30, 2000, “Devices for Employing SONET Frames for Transporting both ATM Cells and Packets Over in the Same Channel in an Optical Fiber,” by Parruck, Nguyen, Ramakrishnan.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00066">
<othercit>U.S. Appl. No. 09/539,478, filed Mar. 30, 2000, “Methods and Apparatus for Dynamically Allocating Bandwidth Between ATM Cells and Packets,” by Parruck, Nguyen, Ramakrishnan.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00067">
<othercit>U.S. Appl. No. 09/539,461, filed Mar. 30, 2000, “Routers for Switching ATM Cells in a Packet-like manner Using a Packet Switch,” by Parruck, Nguyen, Ramakrishnan.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00068">
<othercit>U.S. Appl. No. 09/539,476, filed Mar. 30, 2000, “Processor-based Architecture for Facilitating Integrated Data Transfer between both ATM and Packet Traffic with a Packet Bus or Packet Link, Including Bidirectional ATM-to-Packet Functionality for ATM Traffic,” by Parruck, Nguyen, Ramakrishnan.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00069">
<othercit>U.S. Appl. No. 09/539,477, filed Mar. 30, 2000, “Integrated ATM/Packet Segmentation-and-Reassembly Engine for Handling both Packet and ATM Input Data and for Outputting both ATM and Packet Data,” by Parruck, Nguyen, Ramakrishnan.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00070">
<othercit>“Is the Bloom Off Jasmine” and other pages from ‘Light READING’ web site “www.lightreading.com”, 2 pages (printed Mar. 26, 2001).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00071">
<othercit>Chapter 3, Frame Relay Architecture, from “Frame Relay Technology and Practice” textbook, by Jeff T. Buckwalter, (copyright 2000).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00072">
<othercit>Chapter 5, MPLS Core Protocols, from “MPLS Technology and Applications” textbook, by Bruce Davie and Yakov Rekhter, (copyright 2000).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00073">
<othercit>“GenFlow Family of Traffic Management Co-Processors” and other pages from Acorn Networks' web site “www.Acorn-Networks.com”, 5 pages (printed Mar. 30, 2001).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00074">
<othercit>White Paper entitled “Wire-Speed Traffic Management Solutions Based On Coprocessors”, by Joe Adler and Tam-Anh Chu, Acorn Networks, 14 pages (copyright 2000).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00075">
<othercit>S19202 Advanced Summary Datasheet for “Ganges STS-192 POS/ATM Sonet/SDH Mapper”, Applied Micro Circuits Corporation, revision 1.6, 2 pages (Jun. 2000).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00076">
<othercit>“Product Guide—Ganges (S19202)” and other pages from Applied Micro Circuits Corporation's web site, 3 pages (printed Feb. 27, 2001).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00077">
<othercit>“ZettaCom—Powering Tomorrow's Network”, pages from ZettaCom's web site “www.zettacom.com/products”, 2 pages (downloaded Jan. 31, 2001).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00078">
<othercit>Ocular Networks' Metro Business Access Architecture, pages from Ocular Networks' web site “www.ocularnetworks.com/architecture”, two pages (downloaded Jan. 31, 2001).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
</references-cited>
<number-of-claims>9</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>370230</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>3702301</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>370231-235</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>370236</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>3702361</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>3702362</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>370400</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>370401</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>370469</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>370474</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>370476</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>370360</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>370380</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>370389</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>45</number-of-drawing-sheets>
<number-of-figures>81</number-of-figures>
</figures>
<us-related-documents>
<division>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>09851565</doc-number>
<kind>00</kind>
<date>20010508</date>
</document-id>
<parent-status>PENDING</parent-status>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>09976206</doc-number>
</document-id>
</child-doc>
</relation>
</division>
<continuation-in-part>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>09823667</doc-number>
<kind>00</kind>
<date>20010330</date>
</document-id>
<parent-status>PENDING</parent-status>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>09851565</doc-number>
</document-id>
</child-doc>
</relation>
</continuation-in-part>
<continuation-in-part>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>09779381</doc-number>
<kind>00</kind>
<date>20010207</date>
</document-id>
<parent-status>PENDING</parent-status>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>09823667</doc-number>
</document-id>
</child-doc>
</relation>
</continuation-in-part>
</us-related-documents>
<parties>
<applicants>
<applicant sequence="001" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Parruck</last-name>
<first-name>Bidyut</first-name>
<address>
<city>Cupertino</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="002" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Ramakrishnan</last-name>
<first-name>Chulanur</first-name>
<address>
<city>Saratoga</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
</applicants>
</parties>
<assignees>
<assignee>
<addressbook>
<orgname>Cortina Systems, Inc.</orgname>
<role>02</role>
<address>
<city>Mountain View</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Chan</last-name>
<first-name>Wing</first-name>
<department>2616</department>
</primary-examiner>
<assistant-examiner>
<last-name>Duong</last-name>
<first-name>Duc</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A multi-service segmentation and reassembly (MS-SAR) integrated circuit is disposed on a line card in a router or switch. The MS-SAR can operate in an ingress mode so that it receives packet and/or cell format data and forwards that data to either a packet-based or a cell-based switch fabric. The MS-SAR can also operate in an egress mode so that it receives data from either a packet-based or a cell-based switch fabric and outputs that data in packet and/or cell format. The MS-SAR has a data path through which many flows of different traffic types are processed simultaneously. Each flow is processed by functional blocks along the data path in accordance with one of several application types, the application type for a flow being predetermined by the host processor of the router or switch. Segmentation, reassembly and partitioning techniques are disclosed that reduce costs and facilitate high-speed operation.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="101.09mm" wi="176.61mm" file="US07298738-20071120-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="260.77mm" wi="219.03mm" file="US07298738-20071120-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="123.27mm" wi="165.52mm" file="US07298738-20071120-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="257.22mm" wi="197.53mm" file="US07298738-20071120-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="268.73mm" wi="195.83mm" file="US07298738-20071120-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="231.31mm" wi="207.43mm" file="US07298738-20071120-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="267.21mm" wi="216.32mm" file="US07298738-20071120-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="236.05mm" wi="195.50mm" file="US07298738-20071120-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="270.51mm" wi="184.15mm" file="US07298738-20071120-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="246.89mm" wi="196.93mm" file="US07298738-20071120-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="258.15mm" wi="208.79mm" file="US07298738-20071120-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="254.08mm" wi="202.78mm" file="US07298738-20071120-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="263.06mm" wi="190.75mm" file="US07298738-20071120-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00013" num="00013">
<img id="EMI-D00013" he="240.62mm" wi="204.30mm" file="US07298738-20071120-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00014" num="00014">
<img id="EMI-D00014" he="206.76mm" wi="176.61mm" file="US07298738-20071120-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00015" num="00015">
<img id="EMI-D00015" he="250.11mm" wi="206.08mm" file="US07298738-20071120-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00016" num="00016">
<img id="EMI-D00016" he="264.24mm" wi="217.17mm" file="US07298738-20071120-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00017" num="00017">
<img id="EMI-D00017" he="209.72mm" wi="194.23mm" file="US07298738-20071120-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00018" num="00018">
<img id="EMI-D00018" he="256.29mm" wi="210.40mm" file="US07298738-20071120-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00019" num="00019">
<img id="EMI-D00019" he="251.88mm" wi="215.22mm" file="US07298738-20071120-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00020" num="00020">
<img id="EMI-D00020" he="249.68mm" wi="214.38mm" file="US07298738-20071120-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00021" num="00021">
<img id="EMI-D00021" he="258.15mm" wi="204.64mm" file="US07298738-20071120-D00021.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00022" num="00022">
<img id="EMI-D00022" he="264.58mm" wi="222.00mm" file="US07298738-20071120-D00022.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00023" num="00023">
<img id="EMI-D00023" he="271.86mm" wi="204.05mm" file="US07298738-20071120-D00023.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00024" num="00024">
<img id="EMI-D00024" he="257.47mm" wi="185.50mm" file="US07298738-20071120-D00024.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00025" num="00025">
<img id="EMI-D00025" he="122.00mm" wi="185.34mm" file="US07298738-20071120-D00025.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00026" num="00026">
<img id="EMI-D00026" he="251.38mm" wi="190.33mm" orientation="landscape" file="US07298738-20071120-D00026.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00027" num="00027">
<img id="EMI-D00027" he="257.98mm" wi="190.58mm" file="US07298738-20071120-D00027.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00028" num="00028">
<img id="EMI-D00028" he="265.35mm" wi="215.39mm" orientation="landscape" file="US07298738-20071120-D00028.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00029" num="00029">
<img id="EMI-D00029" he="261.45mm" wi="215.22mm" orientation="landscape" file="US07298738-20071120-D00029.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00030" num="00030">
<img id="EMI-D00030" he="247.48mm" wi="203.45mm" orientation="landscape" file="US07298738-20071120-D00030.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00031" num="00031">
<img id="EMI-D00031" he="257.39mm" wi="220.22mm" orientation="landscape" file="US07298738-20071120-D00031.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00032" num="00032">
<img id="EMI-D00032" he="273.47mm" wi="217.25mm" orientation="landscape" file="US07298738-20071120-D00032.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00033" num="00033">
<img id="EMI-D00033" he="262.81mm" wi="210.82mm" orientation="landscape" file="US07298738-20071120-D00033.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00034" num="00034">
<img id="EMI-D00034" he="264.50mm" wi="203.28mm" orientation="landscape" file="US07298738-20071120-D00034.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00035" num="00035">
<img id="EMI-D00035" he="268.22mm" wi="211.58mm" orientation="landscape" file="US07298738-20071120-D00035.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00036" num="00036">
<img id="EMI-D00036" he="269.49mm" wi="209.63mm" orientation="landscape" file="US07298738-20071120-D00036.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00037" num="00037">
<img id="EMI-D00037" he="246.04mm" wi="198.29mm" file="US07298738-20071120-D00037.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00038" num="00038">
<img id="EMI-D00038" he="239.35mm" wi="191.77mm" file="US07298738-20071120-D00038.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00039" num="00039">
<img id="EMI-D00039" he="243.16mm" wi="164.00mm" file="US07298738-20071120-D00039.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00040" num="00040">
<img id="EMI-D00040" he="250.95mm" wi="173.57mm" file="US07298738-20071120-D00040.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00041" num="00041">
<img id="EMI-D00041" he="251.71mm" wi="173.40mm" file="US07298738-20071120-D00041.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00042" num="00042">
<img id="EMI-D00042" he="267.89mm" wi="207.26mm" orientation="landscape" file="US07298738-20071120-D00042.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00043" num="00043">
<img id="EMI-D00043" he="256.79mm" wi="210.90mm" orientation="landscape" file="US07298738-20071120-D00043.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00044" num="00044">
<img id="EMI-D00044" he="255.02mm" wi="208.45mm" orientation="landscape" file="US07298738-20071120-D00044.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00045" num="00045">
<img id="EMI-D00045" he="263.74mm" wi="211.67mm" file="US07298738-20071120-D00045.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading>
<p id="p-0002" num="0001">This application claims the benefit under 35 U.S.C. § 120 of U.S. patent application Ser. No. 09/851,565, filed May 8, 2001, and is a divisional thereof. This application also claims the benefit under 35 U.S.C. § 120 of U.S. patent application Ser. No. 09/823,667, filed Mar. 30, 2001, of which U.S. patent application Ser. No. 09/851,565 is a continuation-in-part. This application also claims the benefit under 35 U.S.C. § 120 of U.S. application Ser. No. 09/779,381, filed Feb. 7, 2001, of which U.S. patent application Ser. No. 09/851,565 is also a continuation-in-part.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0002" level="1">TECHNICAL FIELD</heading>
<p id="p-0003" num="0002">This invention relates to multi-service network communications, such as, for example, line card circuitry disposed within routers and switches.</p>
<heading id="h-0003" level="1">BACKGROUND INFORMATION</heading>
<p id="p-0004" num="0003"><figref idref="DRAWINGS">FIG. 1</figref> (Prior Art) is a diagram of a part of the Internet <b>1</b>. The Internet, loosely defined, is a collection of networks that are interconnected by devices called “routers”. In the illustration, the Internet <b>1</b> involves seven networks N<b>1</b>-N<b>7</b> and five routers R<b>1</b>-R<b>5</b>. A protocol called the Internet Protocol (IP) is used to communicate a message from a source device (a node) on one network to a destination device (a node) on another network. The message is broken up into pieces and each of these pieces is packaged into what is called an “IP packet”. These packets may be of varying lengths. The IP packets of the message are then sent from the source to the destination from one network to the next via the routers. The various IP packets can take different paths to get from the source to the destination. When all the IP packets arrive at the destination, they are reassembled to recreate the original message.</p>
<p id="p-0005" num="0004">This high level IP message can be transported across an individual network using any one of many lower level protocols. Some of the protocols are packet-based protocols, whereas others of the protocols are cell-based protocols. One packet-based protocol used to transport IP is called Multi-Protocol Label Switching (MPLS). In MPLS, each packet is encapsulated with an MPLS label by the first MPLS device it encounters as it enters an MPLS network. The MPLS device is called an MPLS edge router. The MPLS edge router analyses the contents of the IP header and selects an appropriate MPLS label with which to encapsulate the packet. MPLS packets therefore have varying lengths in the same way that IP packets do. At all the nodes within the network subsequent to the edge router, the MPLS label (and not the IP header) is used to make the forwarding decisions for the packet. Paths through particular nodes in the network are setup from edge to edge, the label defining the particular path its packet will take. Finally, as an MPLS labeled packet leaves the network via an edge router, the edge router removes the MPLS label.</p>
<p id="p-0006" num="0005">One cell-based lower level protocol used to transport IP over a network is the Asynchronous Transfer Mode (ATM) protocol. In ATM, all packets are of equal length. They are therefore called “cells”. A large IP packet is transported over an ATM network by segmenting the large IP packet into a plurality of smaller pieces. Each of the smaller pieces is packaged to become an ATM cell. The ATM cells are then transported across the ATM network. When the ATM cells reach the edge of the ATM network, their payloads are reassembled to reform the large IP packet. In <figref idref="DRAWINGS">FIG. 1</figref>, networks N<b>1</b>, N<b>5</b> and N<b>3</b> are cell-based ATM networks. Networks N<b>2</b>, N<b>6</b>, N<b>4</b> and N<b>7</b> are packet-based MPLS networks.</p>
<p id="p-0007" num="0006">In the example of <figref idref="DRAWINGS">FIG. 1</figref>, networks N<b>3</b> and N<b>4</b> are OC-192 high-speed networks adapted to carry traffic over long distances. Router R<b>2</b> at one end of network N<b>3</b> may, for example, be located in San Francisco whereas router R<b>4</b> at the other end of network N<b>3</b> may be located in New York. Such high-speed long distance networks are often called the “backbone” of the Internet.</p>
<p id="p-0008" num="0007">In the example of <figref idref="DRAWINGS">FIG. 1</figref>, individual users U<b>1</b>-U<b>10</b> are coupled to the Internet via local area networks. Networks N<b>1</b>, N<b>2</b> and N<b>7</b> are local area networks. In one example where the network is a corporate network serving an office building, the users are corporate employees in a building. In an example where the network is a network operated by an Internet Service Provider (ISP), the users are individual customers that pay the ISP to gain access to the Internet.</p>
<p id="p-0009" num="0008">Consider the situation where users on networks N<b>1</b> and N<b>2</b> issue IP messages that are destined to go to destinations to the right side of the backbone such that the messages should go through one of the two back bone networks N<b>3</b> and N<b>4</b>. In such a case, the IP traffic from networks N<b>1</b> and N<b>2</b> is aggregated and supplied to the router access point on the appropriate backbone network. A portion of the Internet called the “Metropolitan Area” performs this function. In the illustration, the metro area includes a router R<b>1</b> used for aggregating traffic from networks N<b>1</b> and N<b>2</b>, and for routing that information to the appropriate one of backbone networks N<b>3</b> and N<b>4</b>.</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. 2</figref> (Prior Art) is a more detailed view of router R<b>1</b>. Router R<b>1</b> includes line cards <b>2</b>-<b>3</b> for interfacing to ATM networks, other line cards <b>4</b> and <b>5</b> for interfacing to MPLS networks, and a switch fabric <b>11</b>. ATM line card <b>3</b> is coupled to ATM network N<b>5</b> such that router R<b>1</b> can communicate with backbone network N<b>3</b> via network N<b>5</b>. Similarly, MPLS line card <b>5</b> is coupled to MPLS network N<b>6</b> such that router R<b>1</b> can communicate with backbone network N<b>4</b> via network N<b>6</b>. ATM line card <b>2</b> is coupled to ATM network N<b>1</b> via OC-12 fiber optic link <b>6</b>, SONET multiplexer <b>7</b>, higher speed OC-48 fiber optic link <b>8</b>, and SONET multiplexer <b>9</b>. MPLS line card <b>4</b> is coupled to MPLS network N<b>2</b> via OC-12 fiber optic link <b>10</b>, SONET multiplexer <b>7</b>, higher speed OC-48 fiber optic link <b>8</b>, and SONET multiplexer <b>9</b>. SONET multiplexer <b>7</b> performs time division multiplexing (TDM) to modulate both ATM traffic from network N<b>1</b> as well as packet MPLS traffic from network N<b>2</b> onto the same wavelength channel transmitted over the same fiber optic link <b>8</b>. SONET multiplexer <b>9</b> performs the inverse function of time demultiplexing the signal on fiber optic link <b>8</b> to extract and separate the ATM traffic from the MPLS traffic.</p>
<p id="p-0011" num="0010">Router R<b>1</b>, when it receives an IP message from one of networks N<b>1</b> or N<b>2</b>, determines whether to forward the message on the message's “next hop” to router R<b>2</b> or R<b>3</b>. In this way IP network information from the users is aggregated in the metro area and is directed to the correct backbone network for communication across long distances to the destination.</p>
<p id="p-0012" num="0011">A problem may exist if one of the local area networks coupled to router R<b>1</b> is disconnected or if the type of traffic on that network is changed from MPLS packet traffic to ATM cell traffic or visa versa. Consider the situation in which ATM network N<b>1</b> ceases business operations. In that case, the operator of router R<b>1</b> will likely want to disconnect network N<b>1</b> from its SONET multiplexer <b>7</b> and to couple in the network of another paying customer. For example, the operator may want to disconnect ATM network N<b>1</b> and to connect in its place MPLS network N<b>7</b>. If this is done, however, MPLS traffic would be received on ATM line card <b>2</b>. ATM line card <b>2</b> is not suitable for coupling to an MPLS network. Consequently, ATM line card <b>2</b> may have to be disconnected and a suitable MPLS line card substituted in its place. With the expansion of the Internet and with advances in IP switching technology, it appears that the proportion of packet networks to ATM networks is increasing. Accordingly, as more and more of the networks coupled to a router such as router R<b>1</b> migrate from one type of traffic to the other, more and more of the line cards of the router will have to replaced. This is undesirable. A solution is desired whereby a smooth and easy migration from one type of traffic to the next is possible without the removal of line cards or the physical manipulation of the router.</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 3</figref> is a diagram of one possible approach to the problem involving a line card <b>12</b> that handles both ATM and packet traffic. Line card <b>12</b> is coupled to a switch fabric of a router by interface <b>13</b>. Cell and packet traffic received from fiber optic cable <b>14</b> and transmitted on fiber optic cable <b>15</b> are time division multiplexed/demultiplexed by TDM device <b>16</b>. Cell traffic is handled by integrated circuit device <b>17</b>. Packet traffic is handled by integrated circuit device <b>18</b>. As the relative amounts of cell traffic to packet traffic change, the same line card can be used.</p>
<heading id="h-0004" level="1">SUMMARY</heading>
<p id="p-0014" num="0013">Although the line card set forth in <figref idref="DRAWINGS">FIG. 3</figref> is satisfactory for some applications, the general approach of <figref idref="DRAWINGS">FIG. 3</figref> involves substantial cost. The non-recurring engineering costs associated with developing an integrated circuit can be quite high. Even though the development of a particular integrated circuit may make technical sense for a given application, it may be economically unreasonable to do so where production volumes of the integrated circuit would be low. For each line card of <figref idref="DRAWINGS">FIG. 3</figref>, there is one integrated circuit for handling ATM traffic and one integrated circuit for handling packet traffic. Developing a single integrated circuit having the functionality of both the ATM device and the packet device might involve less non-recurring engineering costs than developing two different integrated circuits, but the integration would likely result in an undesirably large integrated circuit. Parts of such a single integrated circuit may see little use in certain circumstances. Consider the situation in which the mix of ATM traffic to packet traffic shifts to where there is little or no ATM traffic. The single integrated circuit would involve a data path and associated circuitry for handling ATM traffic that is underutilized or is not used at all. Providing this extra unnecessary circuitry on the single integrated circuit would constitute an unnecessary expense. It would therefore make the line card solution afforded by the single integrated circuit unnecessarily expensive. It would be preferable to get more use out of the circuitry provided on the integrated circuit in order to reduce costs.</p>
<p id="p-0015" num="0014">Not only might some circuitry be underutilized, but also so might other circuitry become overburdened. In the above situation, for example, more and more processing responsibilities would be required of the packet handling circuitry. If the processing capability of the packet handling circuitry is sized to accommodate a particular load, then increasing the load beyond that load by more and more of the traffic shifting to packet traffic may result in the line card being inadequate to handle the required traffic.</p>
<p id="p-0016" num="0015">In one novel aspect, the same circuitry on a single Multi-Service Segmentation And Reassembly (MS-SAR) integrated circuit handles both cell traffic and packet traffic. Rather than there being a first data path through the integrated circuit for cell processing, and another data path through the integrated circuit for packet processing, functional blocks along a single data path process cell and/or packet information that passes through the integrated circuit though the single data path. Individual flows passing through the single data path are processed in accordance with the traffic type of the individual flow. Any mix of cell to packet traffic can be accommodated, thereby enabling a smooth migration from one traffic type to another. The MS-SAR can handle dynamic changes in the relative amounts of cell and packet traffic. Production costs associated with the integrated circuit are reduced because the same functional blocks are used, albeit in different ways, to process different types of flows.</p>
<p id="p-0017" num="0016">In another novel aspect, production volumes may be increased in order to realize economies of scale and to reduce per part cost. To allow production volumes to be increased, the very same MS-SAR integrated circuit is usable not only both as an ingress device and an egress device, but also with either a packet-based switch fabric or a cell-based switch fabric. By providing a single MS-SAR integrated circuit that functions as either an ingress device or an egress device as compared to a device that can function as just one or the other, the number of applications for the MS-SAR integrated circuit is increased. By providing a single MS-SAR integrated circuit that can work with either a packet-based switch fabric or a cell-based switch fabric, the number of applications for the single MS-SAR integrated circuit is increased as compared to the same device that could only function with one type of switch fabric.</p>
<p id="p-0018" num="0017">In another novel aspect, a single MS-SAR integrated circuit involves a lookup block, a segmentation block, and a reassembly block, wherein traffic flows through a single data path through the lookup block, and then through the segmentation block, and then through the reassembly block. By using two identical such MS-SAR devices, one in an ingress mode and another in an egress mode, information received onto the ingress MS-SAR in either ATM or packet format can be communicated through either a packet-based or a cell-based switch fabric, and can be output from the egress MS-SAR in either ATM or packet format. Information communicated in AAL5 adaptation cells received onto the ingress MS-SAR can be reassembled and output in packet format on the egress MS-SAR. Packet format information received onto the ingress MS-SAR can be segmented and output in the form of AAL5 adaptation cells from the egress MS-SAR. The versatility of the single MS-SAR to handle many different traffic types using the same circuitry further increases the number of applications for which the integrated circuit can be used.</p>
<p id="p-0019" num="0018">In another novel aspect, individual flows are processed in different ways by an egress MS-SAR. An indication of the type of egress processing to be done by an MS-SAR on a flow is embedded into the flow that is received from a switch fabric onto the egress MS-SAR. The egress MS-SAR reads the embedded indication and performs the type of egress processing indicated. In one embodiment, the indication of the type of egress processing is contained in a switch header (the switch header can be either a switch header for a cell-based switch fabric or for a packet-based switch fabric), the switch header being added by a first MS-SAR functioning in an ingress mode, the first MS-SAR and the second MS-SAR being substantially identical integrated circuits. In one embodiment, information on how to locate the indication of the type in the information coming into the egress MS-SAR is provided to the egress MS-SAR for each logical input port of the egress MS-SAR. The egress MS-SAR uses: 1) the input port number of the flow, and 2) the information on how to locate the indication for a given input port, to locate the indication in the information coming in from the switch fabric.</p>
<p id="p-0020" num="0019">In accordance with known ATM adaptation layer protocols, packet data can be transmitted over an ATM network by segmenting the packet into smaller pieces and then transmitting each smaller piece over the ATM network in the form of an ATM cell. After transmission across the ATM network, the data payloads of the individual ATM cells are recovered and are reassembled into the original packet. This segmentation and reassembly process has been traditionally performed on a line card by reassembling packets as the individual ATM cells are received onto the line card. A reassembly context is maintained for each packet being reassembled. This reassembly context may, for example, include a composite cyclic redundancy check (CRC) value that is modified as each ATM cell carrying a portion of the packet is received and processed. The CRC value calculated on the data portions received is checked against a CRC transmitted in a trailer of the last ATM cell to verify that the data carried by the numerous ATM cells has not been corrupted in the segmentation and reassembly process. Once a packet has been checked and reassembled, is it buffered into a payload memory on the line card. If, for example, the line card were to support the simultaneous reassembly of one million packets, then the line card would have to be able to store one million reassembly contexts. This would involve a large amount of memory.</p>
<p id="p-0021" num="0020">In another novel aspect, packets to be reassembled on the line card in such an adaptation layer process are not reassembled before being buffered on the line card. Rather, the payloads of the individual cells are buffered in payload memory as cells. The line card does not maintain a reassembly context for each such packet being buffered. When the buffered packet information is to be output from the line card, the cell payloads corresponding to the packet are read out of payload memory and the cell payloads are reassembled to form the packet. In this way, a large number of packets being received onto the line card do not need to be simultaneously reassembled, but rather the number of packets being simultaneously reassembled can be set to have a smaller maximum. In one embodiment, one million flows to be reassembled can be received at one time onto a line card, but only one packet per active line card output port is reassembled at a time. By reducing the maximum number of packets being simultaneously reassembled, the maximum number of reassembly contexts to be stored on the line card is reduced. Reducing the number of reassembly contexts to be stored reduces the amount of memory necessary and thereby reduces line card costs.</p>
<p id="p-0022" num="0021">Not only is a reassembly context involved the reassembly process, but a segmentation context is also traditionally involved in the segmentation process. Traditionally, packets to be segmented on a line card in accordance with an adaptation layer process are received and stored into payload memory as packets. When a packet is to be output, it is retrieved from payload memory and is segmented into segments such that each of the segments forms the data payload of an ATM cell. To be able to check the integrity of the data when the segments are reassembled, a CRC is calculated on the packet at the time of segmentation and is transmitted in a trailer that is included in the last ATM cell. For each such segmentation process that is going on at the same time, a segmentation context including a partial CRC value is maintained. If a large number such as a million simultaneous output flows is to be supported by the line card, then the large number of segmentation contexts must be stored on the line card. This involves a lot of memory and consequently increases line card cost.</p>
<p id="p-0023" num="0022">In another novel aspect, packets to be segmented in accordance with an adaptation layer protocol are segmented on a per input port basis as they are received onto the line card and prior to being buffered on the line card. The packets are not buffered on the line card, but rather segments are buffered. Because only one segmentation is performed at a time for a given line card input port, the maximum number of simultaneous segmentations is limited to the number of input ports. By limiting the maximum number of simultaneous segmentations to be performed, the memory required to store the associated segmentation contexts is reduced. In one embodiment, one million simultaneous flows can be processed, but there are only sixty-four input ports. The amount of memory required for storing segmentation contexts is therefore significantly reduced.</p>
<p id="p-0024" num="0023">In another novel aspect, an MS-SAR involves a data path such that data received onto the MS-SAR passes through the data path and to a memory manager that stores the data into payload memory. The data is then read out of the payload memory and passes through the remainder of the data path to be output from the MS-SAR. How and when the data is read out of payload memory is controlled by control circuitry. The control circuitry controls the memory manager so that the memory manager retrieves data from payload memory so that it will be output from the MS-SAR in a manner controlled by the control circuitry. In one novel aspect, the MS-SAR is partitioned into two integrated circuits such that the data path circuitry is disposed on one integrated circuit and such that the control circuitry is disposed on another integrated circuit. Partitioning the MS-SAR in this way facilitates future increasing of data throughput rates without redesigning the MS-SAR. To increase data throughput, for example from OC-192 rates to OC-768 rates, multiple data path integrated circuits are disposed in parallel, each of the data path integrated circuits being controlled by the same control integrated circuit. The control integrated circuit has multiple control interfaces, one such interface for coupling to and controlling each of the data path integrated circuits.</p>
<p id="p-0025" num="0024">In another novel aspect, a router involves a first line card and a second line card. Each of the first and second line cards involves an MS-SAR operating in the ingress mode and an MS-SAR operating in the egress mode. The egress MS-SAR on the second line card can become endangered of being overloaded if, for example, the ingress MS-SAR on the first line card continues to send network information for a flow to the egress MS-SAR on the second line card, but the egress MS-SAR on the second line card is prevented from outputting that information, for example due to congestion at the framer. Consequently, more and more of the network information for the flow will end up having to be buffered by the egress MS-SAR of the second line card. In one novel aspect, the ingress and egress MS-SAR devices of the first line card are linked by a serial bus on the first line card, and the ingress and egress MS-SAR devices of the second line card are linked by a serial bus on the second line card. If the egress MS-SAR of the second line card is in danger of becoming overloaded, then the egress MS-SAR of the second line card sends an indication of this situation to the ingress MS-SAR of the second line card via the serial bus on the second line card. The ingress MS-SAR of the second line card relays that information to the first line card by outputting a special status switch cell. The special status switch cell is transported across the switch fabric to the egress MS-SAR of the first line card. The egress MS-SAR of the first line card detects the special status switch cell, and relays the indication of the situation to the ingress MS-SAR of the first line card via the serial bus on the first line card. In response to receiving this indication from the serial bus, the ingress MS-SAR on the first line card slows or stops outputting the information that is overburdening the egress MS-SAR on the second line card.</p>
<p id="p-0026" num="0025">In another novel aspect, an integrated circuit includes a reassembly circuit, wherein in an ingress mode the reassembly circuit uses a flow ID to lookup a switch header in an memory, and wherein in an egress mode the reassembly circuit uses a flow ID to lookup a network protocol header (for example, ATM header or MPLS header) in the memory.</p>
<p id="p-0027" num="0026">These are but some of the novel aspects. Other novel structures and methods are disclosed in the detailed description below. This summary does not purport to define the invention. The invention is defined by the claims.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. 1</figref> (Prior Art) illustrates a part of the Internet where different traffic types are aggregated.</p>
<p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. 2</figref> (Prior Art) is a diagram of a router in the part of the Internet illustrated in <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. 3</figref> is a diagram illustrative of an approach to solving a problem associated with the network structure of <figref idref="DRAWINGS">FIG. 1</figref>. Although the line card as illustrated may and is intended to reflect a product designed by or being designed by Northern Telecom Ltd., adequate details about this line card are not available to the inventors or the assignee to state here in this patent document that what is shown in <figref idref="DRAWINGS">FIG. 3</figref> is prior art.</p>
<p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. 4</figref> is a diagram of a switching device (in this case a router) in accordance with an embodiment of the present invention.</p>
<p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. 5</figref> is a diagram of a line card in the router of <figref idref="DRAWINGS">FIG. 4</figref>.</p>
<p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. 6</figref> is a diagram that sets forth various application types that the router of <figref idref="DRAWINGS">FIG. 4</figref> (involving a pair of MS-SAR devices, one operating in an ingress mode, and the other operating in an egress mode) can carry out.</p>
<p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. 7</figref> is a diagram illustrating ingress and egress application types involving a cell-based switch fabric. These application types can be carried out by the router of <figref idref="DRAWINGS">FIG. 4</figref>.</p>
<p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. 8</figref> is a diagram illustrating ingress and egress application types involving a packet-based switch fabric. These application types can be carried out by the router of <figref idref="DRAWINGS">FIG. 4</figref>.</p>
<p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. 9</figref> is a diagram of an example in accordance with an embodiment of the present invention wherein a first flow is processed in accordance with ingress application type <b>3</b> and egress application type <b>11</b>, and wherein a second flow is processed in accordance with ingress application type <b>0</b> and egress application type <b>8</b>.</p>
<p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. 10</figref> is a diagram illustrating an MS-SAR and associated memories in accordance with an embodiment of the present invention.</p>
<p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. 11</figref> is a simplified representation of an MPLS packet of flow #<b>1</b> in the example of <figref idref="DRAWINGS">FIG. 9</figref>.</p>
<p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. 12</figref> is a simplified diagram of chunks of flow #<b>1</b> that are output by the incoming SPI-4 interface block in the example of <figref idref="DRAWINGS">FIG. 9</figref>.</p>
<p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. 13</figref> is a diagram that illustrates information flow into an ingress MS-SAR in the example of <figref idref="DRAWINGS">FIG. 9</figref>.</p>
<p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. 14</figref> is a representation of a port table in the lookup engine.</p>
<p id="p-0042" num="0041"><figref idref="DRAWINGS">FIGS. 15A-15C</figref> are diagrams of the building of a per flow queue for flow #<b>1</b> in the example of <figref idref="DRAWINGS">FIG. 9</figref>.</p>
<p id="p-0043" num="0042"><figref idref="DRAWINGS">FIG. 16</figref> is a diagram of a dequeue memory location (stores the header pointer) for one FID.</p>
<p id="p-0044" num="0043"><figref idref="DRAWINGS">FIGS. 17 and 18</figref> are diagrams of the first and second enqueue memory locations (store the tail pointer) for one FID.</p>
<p id="p-0045" num="0044"><figref idref="DRAWINGS">FIG. 19</figref> is a diagram of a memory location (stores a pointer to a buffer in the body of a queue) for an intermediate BID in a linked list.</p>
<p id="p-0046" num="0045"><figref idref="DRAWINGS">FIG. 20</figref> is a diagram of an ATM cell of flow #<b>2</b> in the example of <figref idref="DRAWINGS">FIG. 9</figref>.</p>
<p id="p-0047" num="0046"><figref idref="DRAWINGS">FIG. 21</figref> is a diagram of a 56-byte chunk of flow #<b>2</b> as output from the incoming SPI-4 interface block of the ingress MS-SAR in the example of <figref idref="DRAWINGS">FIG. 9</figref>.</p>
<p id="p-0048" num="0047"><figref idref="DRAWINGS">FIG. 22</figref> is a diagram of a 64-byte chunk of flow #<b>2</b> as output from the segmentation block of the ingress MS-SAR in the example of <figref idref="DRAWINGS">FIG. 9</figref>.</p>
<p id="p-0049" num="0048"><figref idref="DRAWINGS">FIG. 23</figref> is a diagram of a per flow queue for flow #<b>2</b> of the example of <figref idref="DRAWINGS">FIG. 9</figref>.</p>
<p id="p-0050" num="0049"><figref idref="DRAWINGS">FIG. 24</figref> is a diagram of the port calendar in the reassembly block in the MS-SAR.</p>
<p id="p-0051" num="0050"><figref idref="DRAWINGS">FIGS. 25 and 26</figref> are diagrams of the port empty and port full registers in the reassembly block in the MS-SAR.</p>
<p id="p-0052" num="0051"><figref idref="DRAWINGS">FIG. 27</figref> is a diagram that illustrates information flow from payload memory out of the ingress MS-SAR in the example of <figref idref="DRAWINGS">FIG. 9</figref>.</p>
<p id="p-0053" num="0052"><figref idref="DRAWINGS">FIG. 28</figref> is a diagram that illustrates the three switch cells of flow #<b>1</b> in the example of <figref idref="DRAWINGS">FIG. 9</figref>.</p>
<p id="p-0054" num="0053"><figref idref="DRAWINGS">FIG. 29</figref> is a diagram of the switch cell for flow #<b>2</b>.</p>
<p id="p-0055" num="0054"><figref idref="DRAWINGS">FIG. 30</figref> is a diagram that illustrates the general flow of information into egress MS-SAR <b>200</b> in the example of <figref idref="DRAWINGS">FIG. 9</figref>.</p>
<p id="p-0056" num="0055"><figref idref="DRAWINGS">FIG. 31</figref> is a diagram of the first switch cell for flow #<b>1</b> in the example of <figref idref="DRAWINGS">FIG. 9</figref>.</p>
<p id="p-0057" num="0056"><figref idref="DRAWINGS">FIG. 32</figref> is a diagram that illustrates the general flow of information out of egress MS-SAR <b>200</b> in the example of <figref idref="DRAWINGS">FIG. 9</figref>.</p>
<p id="p-0058" num="0057"><figref idref="DRAWINGS">FIG. 33</figref> is a diagram that illustrates the format of one FID entry in the header table of the MS-SAR.</p>
<p id="p-0059" num="0058"><figref idref="DRAWINGS">FIG. 34</figref> illustrates three 64-byte chunks of flow #<b>1</b> as the chunks pass from reassembly block <b>205</b> to outgoing SPI-4 interface block <b>206</b> in the example of <figref idref="DRAWINGS">FIG. 9</figref>.</p>
<p id="p-0060" num="0059"><figref idref="DRAWINGS">FIG. 35</figref> illustrates the MPLS packet of flow #<b>1</b> as output from framer <b>142</b> in the example of <figref idref="DRAWINGS">FIG. 9</figref>.</p>
<p id="p-0061" num="0060"><figref idref="DRAWINGS">FIG. 36</figref> illustrates the ATM cell of flow #<b>2</b> as output from reassembly block <b>205</b> in the example of <figref idref="DRAWINGS">FIG. 9</figref>.</p>
<p id="p-0062" num="0061"><figref idref="DRAWINGS">FIG. 37</figref> illustrates the ATM cell of flow #<b>2</b> as output form outgoing SPI-4 interface block <b>206</b> of egress MS-SAR <b>200</b> in the example of <figref idref="DRAWINGS">FIG. 9</figref>.</p>
<p id="p-0063" num="0062"><figref idref="DRAWINGS">FIG. 38</figref> illustrates an example of application types <b>5</b>, <b>6</b>, <b>14</b> and <b>13</b>.</p>
<p id="p-0064" num="0063"><figref idref="DRAWINGS">FIG. 39</figref> illustrates the processing of flow #<b>1</b> in accordance with ingress application type <b>5</b> in the example of <figref idref="DRAWINGS">FIG. 38</figref>.</p>
<p id="p-0065" num="0064"><figref idref="DRAWINGS">FIG. 40</figref> illustrates the processing of flow #<b>2</b> in accordance with ingress application type <b>6</b> in the example of <figref idref="DRAWINGS">FIG. 38</figref>.</p>
<p id="p-0066" num="0065"><figref idref="DRAWINGS">FIG. 41</figref> illustrates the processing of flow #<b>1</b> in accordance with egress application type <b>14</b> in the example of <figref idref="DRAWINGS">FIG. 38</figref>.</p>
<p id="p-0067" num="0066"><figref idref="DRAWINGS">FIG. 42</figref> illustrates the processing of flow #<b>2</b> in accordance with egress application type <b>13</b> in the example of <figref idref="DRAWINGS">FIG. 38</figref>.</p>
<p id="p-0068" num="0067"><figref idref="DRAWINGS">FIG. 43</figref> illustrates an example wherein a flow is processed on an ingress MS-SAR in accordance with ingress application type <b>1</b> and is processed on an egress MS-SAR in accordance with egress application type <b>9</b>.</p>
<p id="p-0069" num="0068"><figref idref="DRAWINGS">FIG. 44</figref> illustrates an example wherein a flow is processed on an ingress MS-SAR in accordance with ingress application type <b>2</b> and is processed on an egress MS-SAR in accordance with egress application type <b>10</b>.</p>
<p id="p-0070" num="0069"><figref idref="DRAWINGS">FIG. 45</figref> illustrates an example wherein a flow is processed on an ingress MS-SAR in accordance with ingress application type <b>4</b> and is processed on an egress MS-SAR in accordance with egress application type <b>14</b>.</p>
<p id="p-0071" num="0070"><figref idref="DRAWINGS">FIG. 46</figref> illustrates an example wherein a flow is processed on an ingress MS-SAR in accordance with ingress application type <b>6</b> and is processed on an egress MS-SAR in accordance with egress application type <b>12</b>.</p>
<p id="p-0072" num="0071"><figref idref="DRAWINGS">FIG. 47</figref> illustrates an example wherein a flow is processed on an ingress MS-SAR in accordance with ingress application type <b>6</b> and is processed on an egress MS-SAR in accordance with egress application type <b>14</b>.</p>
<p id="p-0073" num="0072"><figref idref="DRAWINGS">FIG. 48</figref> is a diagram of an embodiment wherein MS-SAR functionality is partitioned into two integrated circuit chips (a data path integrated circuit and a control integrated circuit) such that multiple data path integrated circuits chips can be used with one control integrated circuit chip to increase data path throughput.</p>
<p id="p-0074" num="0073"><figref idref="DRAWINGS">FIG. 49</figref> is a diagram of a packet as it is output from the distribution integrated circuit of <figref idref="DRAWINGS">FIG. 48</figref>.</p>
<p id="p-0075" num="0074"><figref idref="DRAWINGS">FIGS. 50 and 51</figref> are diagrams that illustrate the building of a packet queue in connection with the operation of the embodiment of <figref idref="DRAWINGS">FIG. 48</figref>.</p>
<p id="p-0076" num="0075"><figref idref="DRAWINGS">FIG. 52</figref> is a diagram that illustrates a technique for accessing certain information stored in external memory in a reduced amount of time in connection with the embodiment of <figref idref="DRAWINGS">FIG. 48</figref>.</p>
<p id="p-0077" num="0076"><figref idref="DRAWINGS">FIG. 53</figref> is a diagram that illustrates a serial bus that couples an egress MS-SAR of a line card to an ingress MS-SAR of the same line card. The egress MS-SAR can use the serial bus to backpressure the sending ingress MS-SAR.</p>
<p id="p-0078" num="0077"><figref idref="DRAWINGS">FIG. 54</figref> is a block diagram on one particular embodiment of incoming SPI-4 interface block <b>201</b> of <figref idref="DRAWINGS">FIG. 10</figref>.</p>
<p id="p-0079" num="0078"><figref idref="DRAWINGS">FIG. 55</figref> is a diagram of input control block <b>801</b> of <figref idref="DRAWINGS">FIG. 54</figref>.</p>
<p id="p-0080" num="0079"><figref idref="DRAWINGS">FIG. 56</figref> is a diagram of output control block <b>803</b> of <figref idref="DRAWINGS">FIG. 54</figref>.</p>
<p id="p-0081" num="0080"><figref idref="DRAWINGS">FIG. 57</figref> is a block diagram of one particular embodiment of segmentation block <b>203</b> of <figref idref="DRAWINGS">FIG. 10</figref>.</p>
<p id="p-0082" num="0081"><figref idref="DRAWINGS">FIG. 58</figref> is a block diagram of one particular embodiment of memory manager block <b>204</b> of <figref idref="DRAWINGS">FIG. 10</figref>. <figref idref="DRAWINGS">FIGS. 58A and 58B</figref> together form a more detailed version of <figref idref="DRAWINGS">FIG. 58</figref>.</p>
<p id="p-0083" num="0082"><figref idref="DRAWINGS">FIG. 59</figref> is a block diagram of one particular embodiment of reassembly block <b>205</b> of <figref idref="DRAWINGS">FIG. 10</figref>. <figref idref="DRAWINGS">FIGS. 59A-59D</figref> together form a more detailed version of FIG.</p>
<p id="p-0084" num="0083"><figref idref="DRAWINGS">FIGS. 60A-60D</figref> are diagrams that illustrate reassembly types carried out by the reassembly block of <figref idref="DRAWINGS">FIG. 59</figref>. The function of the reassembly block in each of these reassembly types can be described at the functional level in Verilog, and hardware circuitry realized from the Verilog using hardware synthesis software.</p>
<p id="p-0085" num="0084"><figref idref="DRAWINGS">FIG. 61</figref> is a diagram of one particular embodiment of outgoing SPI-4 interface block <b>206</b> of <figref idref="DRAWINGS">FIG. 10</figref>. <figref idref="DRAWINGS">FIGS. 61A and 61B</figref> together form a more detailed version of <figref idref="DRAWINGS">FIG. 61</figref>.</p>
<p id="p-0086" num="0085"><figref idref="DRAWINGS">FIG. 62</figref> is a diagram of CPU interface block <b>211</b> of <figref idref="DRAWINGS">FIG. 10</figref>.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0006" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0087" num="0086"><figref idref="DRAWINGS">FIG. 4</figref> is a simplified diagram of a router <b>100</b> in accordance with an embodiment of the present invention. Router <b>100</b> includes a plurality of line cards <b>101</b>-<b>104</b>, a switch fabric <b>105</b> and a central processing unit (CPU) <b>106</b>. The line cards <b>101</b>-<b>104</b> are coupled to switch fabric <b>105</b> by parallel buses <b>107</b>-<b>114</b>. In the present example, each of parallel buses <b>107</b>-<b>114</b> is a 16-bit SPI-4, Phase II, LVDS parallel bus operating at 400 MHz at a double data rate (DDR). CPU <b>106</b> is coupled to line cards <b>101</b>-<b>104</b> by another parallel bus <b>131</b>. In the present example, parallel bus <b>131</b> is a 32-bit PCI bus. In this example, each of the line cards can receive network communications in multiple formats. For example, line card <b>101</b> is coupled to a fiber optic cable <b>115</b> such that line card <b>101</b> can receive from cable <b>115</b> network communications at OC-192 rates in packets, ATM cells, and/or AAL5 cells. AAL5 cells are considered a type of ATM cell.</p>
<p id="p-0088" num="0087">Line card <b>101</b> is also coupled to a fiber optic cable <b>116</b> such that line card <b>101</b> can output onto cable <b>116</b> network communications at OC-192 rates in packets, ATM cells, and/or AAL5 cells. The fiber optic cables <b>117</b> and <b>118</b> across which line card <b>103</b> communicates are also labeled in the diagram. All the line cards <b>101</b>-<b>104</b> in this example have substantially identical circuitry.</p>
<p id="p-0089" num="0088"><figref idref="DRAWINGS">FIG. 5</figref> is a more detailed diagram of representative line card <b>101</b>. Line card <b>101</b> includes OC-192 optical transceiver modules <b>119</b> and <b>120</b>, two serial-to-parallel devices (SERDES) <b>121</b> and <b>122</b>, a framer integrated circuit <b>123</b>, a IP classification engine <b>124</b>, two multi-service segmentation and reassembly devices (MS-SAR devices) <b>125</b> and <b>126</b>, static random access memories (SRAMs) <b>127</b> and <b>128</b>, and dynamic random access memories (DRAMs) <b>129</b> and <b>130</b>. MS-SAR devices <b>125</b> and <b>126</b> are identical integrated circuit devices, one of which (MS-SAR <b>125</b>) is configured to be in an “ingress mode”, the other of which (MS-SAR <b>126</b>) is configured to be in an “egress mode”. Each MS-SAR device includes a mode register that is written to by CPU <b>106</b> via bus <b>131</b>. When router <b>100</b> is configured, CPU <b>106</b> writes to the mode register in each of the MS-SAR devices on each of the line cards so as to configure the MS-SAR devices of the line cards appropriately.</p>
<p id="h-0007" num="0000">Router and Line Card:</p>
<p id="p-0090" num="0089">Fiber optic cable <b>115</b> of <figref idref="DRAWINGS">FIG. 4</figref> can carry information modulated onto one or more of many different wavelengths (sometimes called “colors”). Each wavelength can be thought of as constituting a different communication channel for the flow of information. Accordingly, optics module <b>119</b> converts optical signals modulated onto one of these wavelengths into analog electrical signals. Optics module <b>119</b> outputs the analog electrical signals in serial fashion onto a high-speed analog bus <b>132</b>. Serdes <b>121</b> receives this serial information and outputs it in parallel form to framer <b>123</b> via high-speed parallel bus <b>133</b>. Framer <b>123</b> receives the information from bus <b>133</b>, frames it, and outputs it to classification engine <b>124</b> via another SPI-4 bus <b>134</b>. Classification engine <b>124</b> performs IP classification and outputs the information to the ingress MS-SAR <b>125</b> via another SPI-4 bus <b>135</b>. The ingress MS-SAR <b>125</b> processes the network information in various novel ways (explained below), and outputs the network information to switch fabric <b>105</b> (see <figref idref="DRAWINGS">FIG. 4</figref>) via SPI-4 bus <b>107</b>. All the SPI-4 buses of <figref idref="DRAWINGS">FIGS. 4 and 5</figref> are separate SPI-4, phase II, 400 MHz DDR buses having sixteen bit wide data buses.</p>
<p id="p-0091" num="0090">Switch fabric <b>105</b>, once it receives the network information, supplies that information to one of the line cards of router <b>100</b>. Each of the line cards is identified by a “virtual output port” number. Router <b>100</b> can include up to 256 line cards. Accordingly, the virtual output port number has a range of from 0 to 255.</p>
<p id="p-0092" num="0091">In the example of <figref idref="DRAWINGS">FIG. 4</figref>, switch fabric <b>105</b> may supply network information received on fiber optic cable <b>115</b> to any one of fiber optic cables <b>116</b>, <b>118</b>, <b>136</b> or <b>137</b>. It is one of the primary functions of router <b>100</b> to determine, based on the certain information such as the intended destination of the network information, how to route the information. In the case where the network information is in the IP packet format, the router makes its decision on where to route the network information based on an intended IP destination address present in the IP header of each packet. In the case where the network information is in the ATM cell format, the router makes its decision on where to route the network information based on a virtual path identifier and virtual channel identifier (VPINCI) information in the ATM header of each ATM cell.</p>
<p id="p-0093" num="0092">If, for example, the network information received from fiber optic cable <b>115</b> is to be output from fiber optic cable <b>118</b>, then switch fabric <b>105</b> would direct that network information to the “virtual output port” of line card <b>103</b>. If, on the other hand, the network information received from fiber optic cable <b>110</b> is to be output from fiber optic cable <b>137</b>, then switch fabric <b>105</b> would direct that network information to the “virtual output port” of line card <b>104</b>. To facilitate the rapid forwarding of such network information through the switch fabric <b>105</b>, network information passed to the switch fabric <b>105</b> for routing is provided with a “switch header”. The “switch header” may be in a format specific to the manufacturer of the switch fabric of the router. The switch header identifies the “virtual output port” to which the associated network information should be routed. Switch fabric <b>105</b> uses the virtual output port number in the switch header to route the network information to the correct line card.</p>
<p id="p-0094" num="0093">It is, however, generally the router <b>100</b> that determines to which of the multiple line cards particular network information will be routed. Accordingly, the router's CPU <b>106</b> provisions lookup information in (or accessible to) the ingress MS-SAR <b>125</b> so that the MS-SAR <b>125</b> will append an appropriate switch header onto the network information before the network information is sent to the switch fabric <b>105</b> for routing. The ingress MS-SAR <b>125</b> uses header information in the network information to lookup the particular switch header specified by CPU <b>106</b> for the particular network information. Once the MS-SAR <b>125</b> has found the switch header that it is to append to the network information, MS-SAR <b>125</b> appends this switch header to the network information and sends the network information with the switch header on to the switch fabric <b>105</b> via SPI-4 bus <b>107</b>.</p>
<p id="p-0095" num="0094">Switch fabric <b>105</b> receives the network information and forwards it to the line card identified by the particular “virtual output port” in the switch header. Consider the example in which the network information is forwarded to the virtual output port of line card <b>103</b> so that the network information from fiber optic cable <b>115</b> will be output onto fiber optic cable <b>117</b>. Because the structures of the various line cards are identical in this example, the flow of network information through line card <b>103</b> is explained as passing through the egress MS-SAR <b>126</b> of <figref idref="DRAWINGS">FIG. 5</figref>. The network information and switch header is received onto the egress MS-SAR <b>126</b> of the line card that is identified by the virtual output port number in the switch header. The egress MS-SAR <b>126</b> receives the network information, removes the switch header, performs other novel processing (explained below) on the network information, and outputs the network information to framer <b>123</b> via SPI-4 bus <b>138</b>. Framer <b>123</b> outputs the network information to serdes <b>122</b> via high-speed parallel bus <b>139</b>. Serdes <b>122</b> converts the network information into serial analog form and outputs it to output optics module <b>120</b> via high-speed analog bus <b>140</b>. Output optics module <b>120</b> converts the information into optical signals modulated onto one wavelength channel. This optical information is transmitted through fiber optic cable <b>116</b> (which corresponds to cable <b>118</b>).</p>
<p id="p-0096" num="0095">Although each line card in the example of <figref idref="DRAWINGS">FIG. 4</figref> outputs to only one fiber optic cable (i.e., has only one physical output port), this need not be the case. If, for example, a high speed OC-192 optical transceiver and cable is coupled to a line card, then the line card may only have one physical output port. If, on the other hand, two lower speed optical transceivers (for example, OC-48 transceivers) and cables are coupled to the line card, then the line card may have two physical output ports (one being the first OC-48 transceiver and cable, the other being for the second OC-48 transceiver and cable). The egress MS-SAR <b>126</b> outputs onto SPI-4 bus <b>138</b> network information to be transmitted along with an output port number from 0 to 63. (This “output port number” is not to be confused with the “virtual output port number” used to identify line cards.) Groups of these 64 output port numbers are mapped by framer <b>123</b> to the physical output ports provided on the line card. For example, output ports <b>0</b>-<b>31</b> on SPI-4 bus <b>138</b> may be mapped to a first physical output port (a first OC-48 output transceiver), whereas output ports <b>32</b>-<b>63</b> on SPI-4 bus <b>138</b> may be mapped to a second physical output port (a second OC-48 output transceiver). In accordance with the SPI-4 bus protocol, there are 64 logical output ports that egress MS-SAR <b>126</b> can specify on SPI-4 bus <b>138</b>.</p>
<p id="p-0097" num="0096">In a similar way, a line card may receive network information from more than one optical input transceiver module and more than one fiber optic cable. Information coming into a first optical input transceiver module (i.e., a first physical port) would be supplied onto SPI-4 bus <b>134</b> by framer <b>123</b> with a logical input port number that maps to the first optical input transceiver module onto which the information was received. Similarly, information coming into a second optical input transceiver module (i.e., a second physical port) would be supplied onto SPI-4 bus <b>134</b> by framer <b>123</b> with a logical input port number that maps to the second optical input transceiver module onto which the information was received. In accordance with the SPI-4 bus protocol, there are 64 logical input ports that framer <b>123</b> can specify on SPI-4 bus <b>134</b>. The logical input port information on SPI-4 bus <b>134</b> flows through classification engine <b>124</b> to appear on SPI-4 bus <b>135</b>.</p>
<p id="h-0008" num="0000">Application Types:</p>
<p id="p-0098" num="0097">A flow is a sequence of one or more packets or cells transmitted between a selected source and a selected destination, the flow generally representing a single session using a protocol. Each packet or cell in a flow is expected to have the same routing information according to the dictates of the protocol. The specific embodiment of the MS-SAR device described here can process up to one million flows simultaneously. Each of these one million flows is processed in accordance with any one of several “application types”. In each application type, the ingress MS-SAR processes the flow in accordance with one of several “ingress application types” and the egress MS-SAR processes the flow in accordance with one of several “egress application types”. <figref idref="DRAWINGS">FIG. 6</figref> sets forth, for each application type, the related ingress application type and the related egress application type. <figref idref="DRAWINGS">FIG. 7</figref> sets forth the ingress and egress application types when the switch fabric is a cell-based switch fabric. <figref idref="DRAWINGS">FIG. 8</figref> sets forth the ingress and egress application types when the switch fabric is a packet-based switch fabric.</p>
<p id="h-0009" num="0000">Example of Application Types <b>0</b>, <b>3</b>, <b>8</b> and <b>11</b>:</p>
<p id="p-0099" num="0098"><figref idref="DRAWINGS">FIGS. 9-37</figref> illustrate an example of how two flows of different traffic types (flow #<b>1</b> is an MPLS packet, flow #<b>2</b> is an ATM cell) are received onto a first line card (in this example, line card <b>101</b>), simultaneously pass through the ingress MS-SAR <b>125</b> on the first line card, pass through switch fabric <b>105</b> (in this case switch fabric <b>105</b> is a cell-based switch fabric), pass onto a second line card (in this example, line card <b>103</b>), simultaneously pass through an egress MS-SAR <b>200</b> on the second line card <b>103</b>, and are output by the second line card <b>103</b>. In this example, flow #<b>1</b> and flow #<b>2</b> are both communicated to first line card <b>101</b> on the same wavelength channel transmitted on the same fiber optic cable <b>115</b>. Similarly, flow #<b>1</b> and flow #<b>2</b> are both communicated from second line card <b>103</b> on the same wavelength channel transmitted on the same fiber optic cable <b>118</b>.</p>
<p id="p-0100" num="0099">In <figref idref="DRAWINGS">FIG. 9</figref>, flow #<b>1</b> is an MPLS packet flow passing into an ingress line card, where the ingress line card supplies switch cells to the switch fabric. As indicated by the lower left example of <figref idref="DRAWINGS">FIG. 7</figref>, this type of flow is identified as ingress application type <b>3</b>. Ingress MS-SAR <b>125</b> therefore performs processing on flow #<b>1</b> in accordance with ingress application type <b>3</b>. In <figref idref="DRAWINGS">FIG. 9</figref>, flow #<b>2</b> is an ATM cell flow passing into an ingress line card, where the ingress line card supplies switch cells to the switch fabric. As indicated by the upper left example of <figref idref="DRAWINGS">FIG. 7</figref>, this type of flow is identified as ingress application type <b>0</b>. Ingress MS-SAR <b>125</b> therefore performs processing on flow #<b>2</b> in accordance with ingress application type <b>0</b>.</p>
<p id="p-0101" num="0100"><figref idref="DRAWINGS">FIG. 10</figref> is a more detailed diagram of the MS-SAR devices <b>125</b> and <b>200</b> present on line cards <b>101</b> and <b>103</b>. Each MS-SAR device includes an incoming SPI-4 interface block <b>201</b>, a lookup engine block <b>202</b>, a segmentation block <b>203</b>, a memory manager block <b>204</b>, a reassembly and header-adding block <b>205</b>, an outgoing SPI-4 interface block <b>206</b>, a per flow queue block <b>207</b>, a data base block <b>208</b>, a traffic shaper block <b>209</b>, an output scheduler block <b>210</b>, and a CPU interface block <b>211</b>. In one embodiment, the blocks within dashed line <b>212</b> are realized on a first integrated circuit and the blocks within dashed line <b>213</b> are realized on a second integrated circuit. In the event the functionality of the MS-SAR is broken into two integrated circuits, a second CPU interface block <b>214</b> is provided so that CPU <b>106</b> can communicate with both integrated circuits. The MS-SAR interfaces to and uses numerous other external memory integrated circuit devices <b>215</b>-<b>228</b> that are disposed on the line card along with the MS-SAR.</p>
<p id="p-0102" num="0101">In the example of <figref idref="DRAWINGS">FIG. 9</figref>, the MPLS packet of flow #<b>1</b> is received onto input optics module <b>119</b> from fiber optic cable <b>115</b>. The MPLS packet passes through (see <figref idref="DRAWINGS">FIGS. 5 and 9</figref>) the input optics module <b>119</b>, through serdes <b>121</b>, and to multi-service SONET framer <b>123</b>. Framer <b>123</b> is a framer that includes a demapper for separating ATM cells and MPLS packets that are received on the same wavelength via input optics module <b>119</b>. Framer <b>123</b> in one embodiment is a Ganges S19202 STS-192 POS/ATM SONET/SDH Mapper available from Applied Micro Circuits Corporation, 200 Brickstone Square, Andover, Mass. 01810. Framer <b>123</b> outputs the MPLS packet information of flow #<b>1</b>, along with a logical input port number indicative of the physical input module from which the information was received, in 16-bit pieces, onto SPI-4 bus <b>134</b>. Classification engine <b>124</b> performs IP (Internet Protocol) classification in the case where router <b>100</b> performs IP lookup. Classification engine <b>124</b> may, in one embodiment, be a classification engine available from Fast-Chip Incorporated, 950 Kifer Road, Sunnyvale, Calif. 94086. In the particular example of <figref idref="DRAWINGS">FIG. 9</figref>, the packet traffic (flow #<b>1</b>) comes into the router in MPLS form and exits the router in MPLS form. Consequently, IP classification is not performed in this embodiment.</p>
<p id="p-0103" num="0102"><figref idref="DRAWINGS">FIG. 11</figref> is a simplified diagram of the MPLS packet <b>300</b> of flow #<b>1</b> as it is received onto ingress MS-SAR <b>125</b>. MPLS packet <b>300</b> contains an MPLS header <b>301</b>, and a data payload <b>303</b>. An SPI-4 start delimiter <b>302</b> and an SPI-4 end delimiter <b>304</b> frame the packet. MPLS header <b>301</b> includes the 20-bit MPLS label. The MPLS header <b>301</b> is disposed in the packet between the layer two (L2) header and the layer three (L3) IP header. The L2 header was removed by framer <b>123</b> such that beginning of the packet as received onto ingress MS-SAR <b>125</b> is the MPLS header.</p>
<p id="p-0104" num="0103">Ingress MS-SAR <b>125</b> (see <figref idref="DRAWINGS">FIG. 10</figref>) receives the packet information in multiple sixteen-byte bursts, sixteen bits at a time, via sixteen input terminals <b>198</b>. When incoming SPI-4 interface block <b>201</b> accumulates 64 bytes (block <b>201</b> accumulates bytes in ingress mode and up to 80 bytes in egress mode), it sends the 64-byte chunk to lookup block <b>202</b> via 64-bit wide data bus <b>317</b>. In this way incoming SPI-4 interface block <b>201</b> breaks the packet up into 64-byte chunks and communicates the chunks to lookup block <b>202</b>.</p>
<p id="p-0105" num="0104"><figref idref="DRAWINGS">FIG. 12</figref> illustrates the three 64-byte chunks into which this particular MPLS packet <b>300</b> is broken as output from incoming SPI-4 interface block <b>201</b> to lookup block <b>202</b>. The incoming SPI-4 interface block <b>201</b> uses the start delimiter <b>302</b> and the end delimiter <b>304</b> to identify the beginning and ending of the packet <b>300</b>. The incoming SPI-4 interface block <b>201</b> outputs two additional signals (an end-of-packet signal and a start-of-packet signal) along with each of the 64-byte chunks. <figref idref="DRAWINGS">FIG. 12</figref> shows the end-of-packet (EOP) and start-of-packet (SOP) bits for each of the three 64-byte chunks.</p>
<p id="p-0106" num="0105"><figref idref="DRAWINGS">FIG. 13</figref> shows information flow through ingress MS-SAR <b>125</b>. CPU <b>106</b> has previously placed lookup information into ingress MS-SAR <b>125</b> so that the information in each MPLS packet header can be used by lookup block <b>202</b> to find: 1) a particular flow ID (FID) for the flow that was specified by CPU <b>106</b>, and 2) the ingress application type. The ingress application type, once determined, is used by other blocks of the ingress MS-SAR <b>125</b> to configure themselves in the appropriate fashion to process the network information appropriately.</p>
<p id="p-0107" num="0106">Only one traffic type (for example, MPLS packet or ATM cell) is permitted on each logical input port of SPI-4 bus <b>135</b>. The traffic type is assigned by CPU <b>106</b>, but there can only be one traffic type assigned at a given time for a given logical input port. A “port table” in lookup block <b>202</b> contains, for each of the sixty-four logical input ports, the allowed traffic type as specified by CPU <b>106</b>. This allowed traffic type information is provisioned in the port table before the flow starts by CPU <b>106</b>.</p>
<p id="p-0108" num="0107"><figref idref="DRAWINGS">FIG. 14</figref> is a conceptual diagram that shows the relationship of the information in the “port table” in lookup block <b>202</b>. For each logical input port there is a traffic type defined. Lookup block <b>202</b> uses the incoming logical port number supplied by framer <b>123</b> to lookup the traffic type allowed on the logical input port that packet <b>300</b> was received on. Each traffic type has a known format. Accordingly, once the traffic type is known, the lookup block can locate in the header of the incoming flow the particular information that will be used to lookup an associated FID found in a “FID hash table”. This “FID hash table” is stored in external memories <b>215</b> and <b>216</b> (see <figref idref="DRAWINGS">FIG. 10</figref>).</p>
<p id="p-0109" num="0108">In the present example of <figref idref="DRAWINGS">FIG. 9</figref>, packet <b>300</b> is an MPLS packet. Lookup block <b>202</b> uses the traffic type found in the “port table” to locate the 20-bit MPLS label within the first chunk of the packet. The MPLS label contains information similar to source and destination addressing information. A hash generator in the lookup block <b>202</b> uses the 20-bit MPLS label as a “hash key” to generate a “hash index”. This “hash index” is used as an address for the “FID hash table”. The content of the FID hash table location addressed contains both the FID and the ingress application type.</p>
<p id="p-0110" num="0109">The FID and ingress application type, once determined, are passed via 64-bit wide data bus <b>318</b> (see <figref idref="DRAWINGS">FIG. 10</figref>), one at a time, to segmentation block <b>203</b> along with the consecutive 64-byte chunks of data. Segmentation block <b>203</b> stores these 64-bytes chunks on a per port basis. Each 64-byte chunk is stored in a buffer in SRAM within segmentation block <b>203</b>, and a pointer to the buffer is pushed onto a FIFO of pointers for the input port. The FID and traffic type is also pushed onto the FIFO with the pointer. In the present example, there are three 64-byte chunks in flow #<b>1</b>. Segmentation block <b>203</b> calculates a cyclic redundancy check (CRC) value for the data portion of the entire packet, and adds a trailer including this CRC such that the trailer is at the end of the last 64-byte chunk. Segmentation block <b>203</b> adds any pad that might be necessary between the end of the data of the last 64-byte chunk and the trailer. Memory manager block <b>204</b> pops the FIFO of pointers such that segmentation block <b>203</b> forwards the 64-byte chunks one at a time to memory manager block <b>204</b> via a 128-bit wide bus <b>319</b>.</p>
<p id="p-0111" num="0110">Payload memory <b>217</b> contains a large number of 64-byte buffers, each buffer being addressed by a buffer identifier (BID). Some of the 64-byte buffers of payload memory <b>217</b> may be used and storing data, whereas others may not be storing data (i.e., are “free”). Per flow queue block <b>207</b> maintains a linked list of the BIDs of available buffers, called the “free buffer queue”. The “free buffer queue” is stored in external SSRAM <b>226</b> (see <figref idref="DRAWINGS">FIG. 10</figref>). When memory manager block <b>204</b> receives the first 64-byte chunk <b>305</b> of data associated with packet <b>300</b>, memory manager block <b>204</b> issues an “enqueue” command via enqueue command line <b>320</b> to per flow queue block <b>207</b>. This constitutes a request for the BID of a free buffer. Per flow queue block <b>207</b> pops the free buffer queue to obtain the BID of a free buffer, and forwards that BID to memory manager block <b>204</b> via lines <b>321</b>. Memory manager block <b>204</b> then stores the 64-byte chunk <b>305</b> (see <figref idref="DRAWINGS">FIG. 12</figref>) of data for packet <b>300</b> in the buffer in payload memory <b>217</b> identified by the BID. The writing of the 64-byte chunk of data is indicated in <figref idref="DRAWINGS">FIG. 13</figref> by the upward pointing heavy arrow <b>322</b> that extends toward payload memory block <b>217</b>.</p>
<p id="p-0112" num="0111">Per flow queue block <b>207</b> also maintains a linked list (i.e., a “queue”) of the BIDs for the various 64-byte chunks of each flow that are stored in payload memory <b>217</b>. Such a linked list is called a “per flow queue”. <figref idref="DRAWINGS">FIG. 15A</figref> illustrates how per flow queue block <b>207</b> builds the linked list for flow #<b>1</b>. Each linked list has a head pointer and a tail pointer. A list of the head pointers for the one million possible FIDs is stored in external SRAM <b>228</b> (see <figref idref="DRAWINGS">FIG. 10</figref>). A list of the tail pointers for the one million possible FIDs is stored in external SRAM <b>227</b>.</p>
<p id="p-0113" num="0112">The head pointer for the FID of flow #<b>1</b> is set to point to the memory location that stores the BID where the first chunk <b>305</b> is stored in payload memory <b>217</b>. Because there is only one chunk (C<b>1</b>) in the linked list for flow #<b>1</b>, the tail pointer is set to point to the same location. This first chunk <b>305</b> of flow #<b>1</b> is the start of packet <b>300</b> as identified by an SOP bit.</p>
<p id="p-0114" num="0113">Next, the second 64-byte chunk <b>306</b> is received by the memory manager block <b>204</b>. The memory manager block <b>204</b> again issues an enqueue command to per flow queue block <b>207</b>, again obtains a BID of a free buffer, and then writes the second chunk <b>306</b> into the payload memory at the location identified by the BID. The per flow queue block <b>207</b> pops the free buffer queue to remove the now-used BID from the free buffer queue, and adds the BID for the second chunk <b>306</b> to the linked list for the FID of flow #<b>1</b>. As illustrated in <figref idref="DRAWINGS">FIG. 15B</figref>, the BID of the second chunk <b>306</b> is added to the linked list for the FID of flow #<b>1</b>.</p>
<p id="p-0115" num="0114">Next, the third 64-byte chunk <b>307</b> is received by the memory manager block <b>204</b>. The same sequence of storing the chunks into payload memory and adding the BID to the linked list of flow #<b>1</b> is carried out. <figref idref="DRAWINGS">FIG. 15C</figref> illustrates the per flow queue for flow #<b>1</b> including pointers to these three chunks. In the case of chunk <b>307</b>, this chunk is the last chunk of the packet as indicated by the EOP bit. The linked list for flow #<b>1</b> is therefore complete.</p>
<p id="p-0116" num="0115"><figref idref="DRAWINGS">FIG. 16</figref> is a diagram of a memory location in FID dequeue memory <b>228</b> (see <figref idref="DRAWINGS">FIG. 10</figref>) that stores the head pointer for a flow. Per flow queue block <b>207</b> stores in the location, along with the BID head, other information it receives from memory manager block <b>204</b> relating to the chunk. This information includes an EOP bit that indicates whether the chunk is the last chunk of a packet, an SOP bit that indicates whether the chunk is the first chunk of a packet, and the ingress application type. Per flow queue block <b>207</b> also stores with the head pointer EFCI, CLP and OAM bits. These bits were extracted by lookup block <b>202</b> from the header. There is one memory location such as the one illustrated in <figref idref="DRAWINGS">FIG. 16</figref> for each per flow queue. In the example of <figref idref="DRAWINGS">FIG. 15C</figref>, chunk C<b>1</b> is pointed to by a head pointer in one such memory location.</p>
<p id="p-0117" num="0116"><figref idref="DRAWINGS">FIGS. 17 and 18</figref> are diagrams of two memory locations in FID enqueue memory <b>227</b> (see <figref idref="DRAWINGS">FIG. 10</figref>) that store a tail pointer. Per flow queue block <b>207</b> stores in these locations, along with a pointer to the BID tail, other information on the chunk including the output port number from which the data will eventually be output, the size of the per flow queue, and an indication of a time to live (a TTL bit). There is one such pair of memory locations for each per flow queue. In the example of <figref idref="DRAWINGS">FIG. 15C</figref>, chunk C<b>3</b> is pointed to by information in a pair of two such memory locations.</p>
<p id="p-0118" num="0117"><figref idref="DRAWINGS">FIG. 19</figref> is a diagram of a memory location in SRAM <b>226</b> that stores the pointer for a chunk in a queue between the head and tail. Per flow queue block <b>207</b> stores in this location a pointer to the next BID in the per flow queue. The location also stores an EOP indication and an SOP indication. In the example of <figref idref="DRAWINGS">FIG. 15C</figref>, there is one such memory location for chunk C<b>2</b>.</p>
<p id="p-0119" num="0118">In the example of <figref idref="DRAWINGS">FIG. 9</figref>, a second flow (flow #<b>2</b>) of a different traffic type (ATM cell) is received onto the same line card <b>101</b> that flow #<b>1</b> was. In this example, flow #<b>2</b> is also received via the same fiber optic cable <b>115</b> and is modulated onto the same wavelength channel that flow #<b>1</b> was. The 53-byte ATM cell of flow #<b>2</b> passes through the same optics module <b>119</b>, serdes <b>121</b> and framer <b>123</b>. Framer <b>123</b> removes the fifth byte (the “HEC” Header Error Control byte) of the ATM header and places the remaining 52-byte ATM cell onto the 16-bit SPI-4 bus <b>134</b>. This information passes through classification engine <b>124</b> to SPI-4 bus <b>135</b> such that the 52-byte ATM cell is received onto the incoming SPI-4 interface block <b>201</b> of ingress MS-SAR <b>125</b> via sixteen SPI-4 input terminals <b>198</b> (see <figref idref="DRAWINGS">FIG. 10</figref>). Incoming SPI-4 interface block <b>201</b> receives the 52-byte ATM cell in multiples of 16-byte bursts, 16 bits at a time.</p>
<p id="p-0120" num="0119"><figref idref="DRAWINGS">FIG. 20</figref> is a simplified diagram of the ATM cell <b>308</b> as received onto ingress MS-SAR <b>125</b>. ATM cell <b>308</b> is 52-bytes long. ATM cell <b>308</b> includes an ATM header <b>309</b> and a data payload <b>311</b>. An SPI-4 bus start delimiter <b>310</b> and end delimiter <b>312</b> frame the ATM cell. Incoming SPI-4 interface block <b>201</b> receives the ATM cell and supplies it to lookup block <b>202</b>, sixty-four bits at a time, via 64-bit wide data bus <b>317</b>.</p>
<p id="p-0121" num="0120">The internal data path within the MS-SAR from incoming SPI-4 interface block <b>201</b>, through lookup block <b>202</b>, and to segmentation block <b>203</b> is 64-bits (8-bytes) wide. Incoming SPI-4 interface block <b>201</b> therefore adds a 4-byte pad <b>314</b> (see <figref idref="DRAWINGS">FIG. 21</figref>) to pad the 52-byte ATM cell up to 56-bytes (a multiple of 8 bytes) before sending the ATM cell to lookup block <b>202</b>.</p>
<p id="p-0122" num="0121"><figref idref="DRAWINGS">FIG. 21</figref> is a diagram of ATM cell <b>308</b> as it is output from incoming SPI-4 interface block <b>201</b> to lookup block <b>202</b>. Because the entire ATM cell <b>308</b> is contained in one 64-byte chunk, the SOP and EOP signals output by the incoming SPI-4 interface block <b>201</b> indicate both the start of packet (in this case the packet is a cell) and end of packet (in this case the packet is a cell).</p>
<p id="p-0123" num="0122">Lookup block <b>202</b> receives the 56-byte chunk for ATM cell <b>308</b>, and from the logical input port number looks up the traffic type from the “port table” (see <figref idref="DRAWINGS">FIG. 14</figref>). The “port table” indicates that the traffic type is ATM cells. Lookup block <b>202</b> uses the traffic type to locate the 12-bit VPI and 16-bit VCI fields in the ATM cell header. The hash generator of lookup block <b>202</b> uses the located VPI and VCI information as a “hash key” to create a “hash index”. This “hash index” is then used to lookup the FID and ingress application type in the “FID table” stored in external memories <b>215</b> and <b>216</b>.</p>
<p id="p-0124" num="0123">Once the FID and the ingress application type for flow #<b>2</b> are determined, these values are passed from lookup block <b>202</b> to segmentation block <b>203</b> via 64-bit bus <b>318</b> along with the 56-byte chunk. Segmentation block <b>203</b> adds an additional 8-byte pad to pad the ATM cell up to 64-bytes, stores the 64-byte chunk into an SRAM (not shown) in segmentation block <b>203</b>, and pushes a pointer to that chunk onto its FIFO of pointers for that input port. Memory manager block <b>204</b> pops the FIFO of pointers such that segmentation block <b>203</b> supplies the 64-byte chunk from its SRAM to memory manager block <b>203</b>.</p>
<p id="p-0125" num="0124"><figref idref="DRAWINGS">FIG. 22</figref> is a simplified diagram of the 64-byte chunk as output from segmentation block <b>203</b> onto 128-bit bus <b>319</b>. This 64-byte cell contains the 4-byte pad <b>314</b> added by the incoming SPI-4 interface block <b>201</b> and the additional 8-byte pad <b>315</b> added by segmentation block <b>203</b>. When memory manager block <b>204</b> receives the 64-byte chunk, memory manager block <b>204</b> issues an enqueue command via command line <b>320</b> to per flow queue block <b>207</b>, obtains in return a BID, and then stores the 64-byte chunk in payload memory <b>217</b> at the location identified by the BID. Per flow queue block <b>207</b> pops the free buffer queue, thereby removing the now-used BID from the free buffer queue, and adds the BID to a linked list for flow #<b>2</b>.</p>
<p id="p-0126" num="0125"><figref idref="DRAWINGS">FIG. 23</figref> is a diagram that illustrates the two linked lists. The linked list for flow #<b>1</b> (FID<b>1</b>) has BIDs for three chunks C<b>1</b>, C<b>2</b> and C<b>3</b>, whereas the flow for flow #<b>2</b> (FID<b>2</b>) has BIDs for one chunk C<b>1</b>. The chunk for the ATM cell is indicated as being both the “start of packet” as well as the “end of packet”.</p>
<p id="p-0127" num="0126">Once the linked lists (queues) for flow #<b>1</b> and flow #<b>2</b> are formed, the linked lists are popped (i.e., dequeued) in a particular way and order such that their associated chunks in payload memory <b>217</b> are output from ingress MS-SAR <b>125</b> in a desired fashion, taking into account user-programmable policing/metering parameters. User-programmable parameters may include, for example, burst size, peak cell rate, and sustainable cell rate.</p>
<p id="p-0128" num="0127">The dequeue process starts with data base block <b>208</b> determining an output port to service using a port calendar. This port calendar is located within data base block <b>208</b>. Once the output port to service is selected, data base block <b>208</b> supplies the output port to traffic shaper block <b>209</b> and to output scheduler block <b>210</b>. The traffic shaper block <b>209</b> and the output scheduler block <b>210</b> supply flow IDs back to data base block <b>208</b>. Data base block <b>208</b> selects one of the two flow IDs to dequeue for that port. Data base block <b>208</b> gives priority to traffic shaper output over output scheduler output such that only if the shaper has no FID to output for a given port will the output scheduler be allowed to schedule an FID for that port. Either traffic shaping is performed on an individual flow by traffic shaper block <b>209</b>, or output scheduling is performed on the flow by output scheduler block <b>210</b>.</p>
<p id="p-0129" num="0128">Traffic shaper block <b>209</b> performs traffic shaping on a per flow basis for up to one million flows. On a particular flow, either a single leaky bucket shaping scheme is used, a dual leaky bucket shaping scheme is used, or no shaping at all is used. The shaper selects a peak rate or a sustained rate per flow ID depending on an accumulated credit. Up to 1024 different programmable rates can be shaped simultaneously. In one mode, the rate of incoming traffic with a particular flow ID is measured (i.e., metered) and the flow ID of a violator is marked if the measured rate is above a specific threshold programmed by CPU <b>106</b> for the flow ID. Up to 1024 different programmable thresholds can be metered simultaneously.</p>
<p id="p-0130" num="0129">Output scheduler block <b>210</b> uses a weighted round-robin scheme to select a quality of service of the selected port. Once the quality of service is selected, a flow ID is selected based on a round-robin scheme.</p>
<p id="p-0131" num="0130">When data base block <b>208</b> receives a flow ID from either traffic shaper block <b>209</b> or output scheduler block <b>210</b>, data base block <b>208</b> generates a request to per flow queue block <b>207</b> to issue a dequeue command to dequeue the flow ID. Per flow queue block <b>207</b> accesses the per flow queue of the flow ID, determines the next BID to dequeue, and outputs the BID in the form of a dequeue command to memory manager block <b>204</b>.</p>
<p id="p-0132" num="0131">Per flow queue block <b>207</b> is programmable to cause the linked list of one flow to be output multiple times (i.e., multicast), each time with a different flow ID. Multicasting is performed by replicating the linked list of a flow, each replica linked list having its own flow ID. Per flow queue block <b>207</b> is also programmable to cause multiple flows to be combined into one flow (i.e., tunneling). Tunneling is performed by linking the tail of one linked list to the head of another so as to create one large composite linked list, the composite linked list having one flow ID.</p>
<p id="p-0133" num="0132">In the present example, the linked list of flow #<b>1</b> (see <figref idref="DRAWINGS">FIG. 22</figref>) is dequeued first. Per flow queue block <b>207</b> pops the BID of the first chunk C<b>1</b> off the FID<b>1</b> linked list for flow #<b>1</b> and forwards that BID to memory manager block <b>204</b> in a dequeue command. The dequeue command contains the BID of the 64-byte chunk to be read out of payload memory <b>217</b>, as well as the ingress application type, an EOP bit, an SOP bit, and the output port number (one of 64 logical output ports on SPI-4 bus <b>107</b>). The dequeue command is sent via dequeue command line <b>323</b>. The BID is sent via BID lines <b>321</b>. Per flow queue block <b>207</b> adds the now available BID to the free buffer queue in external memory <b>226</b>.</p>
<p id="p-0134" num="0133">In response to receiving the dequeue command, memory manager block <b>204</b> retrieves the first chunk C<b>1</b> identified by the BID and outputs that first chunk C<b>1</b> to reassembly block <b>205</b> via 128-bit data bus <b>324</b>. Memory manager block <b>205</b> supplies to reassembly block <b>205</b> other control information including the FID of chunk C<b>1</b>, the SOP and EOP bits, the ingress application type being performed on flow #<b>1</b>, and a logical output port ID (PID) identifying the one of the 64 logical output ports on SPI-4 bus <b>107</b> to which the chunk will be sent.</p>
<p id="p-0135" num="0134">Reassembly block <b>205</b> uses the ingress application type to determine what type of action it should perform on the associated chunk. In the present example, flow #<b>1</b> is processed in accordance with ingress application type <b>3</b>. External memory <b>218</b> (see <figref idref="DRAWINGS">FIG. 10</figref>) contains a “header table” <b>327</b>. For each FID, the CPU <b>106</b> has stored beforehand in header table <b>327</b> a switch header that reassembly block <b>205</b> is to append to the data of the chunk before sending the data on to the switch fabric. Accordingly, reassembly block <b>205</b> uses the FID to lookup in “header table” <b>327</b> the “switch header” placed there for this FID by CPU <b>106</b>. The switch header can be either 8-bytes or 16-bytes depending on the requirements of the switch fabric. As explained above, the “switch header” contains the “virtual port number” of the particular egress line card that the switch fabric <b>105</b> wants the switch cell routed to. In the present example of <figref idref="DRAWINGS">FIG. 9</figref>, the egress line card is line card <b>103</b>. Accordingly, CPU <b>106</b> has placed the “virtual port number” of line card <b>103</b> into the “switch header” associated with flow #<b>1</b>.</p>
<p id="p-0136" num="0135">Reassembly block <b>205</b> also provides a special 4-byte “Azanda header”. The Azanda header is embedded in the switch cell as the last four bytes of the switch header. This Azanda header contains information on how the switch cell should be processed by the particular egress MS-SAR that receives the switch cell (in this case MS-SAR <b>200</b>). The Azanda header includes the egress application type to be used to process the switch cell in the egress MS-SAR. The Azanda header also includes the FID of the cell, an SOP bit, an EOP bit, and quality of service information.</p>
<p id="p-0137" num="0136">When reassembly block <b>205</b> receives the 64-byte chunk from memory manager block <b>204</b>, it stores the 64-byte chunk into a dual-port DATA_SRAM and stores the “switch header” (including the “Azanda switch header”) into a HDR_SRAM. The DATA_SRAM (not shown) and the HDR_SRAM (now shown) are part of the reassembly block <b>205</b>. A pointer that points to the data in DATA_SRAM and to the header in HDR_SRAM is pushed onto a queue for the particular logical output port. In the present example, where the MS-SAR is operating in the ingress mode, there is only one logical output port (i.e., the output of line card <b>101</b>), consequently there is only one output port queue. The pointer is therefore placed on this queue. The output port queue is maintained in a Q_FIFO (not shown) that is also part of the reassembly block <b>205</b>.</p>
<p id="p-0138" num="0137"><figref idref="DRAWINGS">FIG. 24</figref> is a conceptual diagram of a “port calendar” located in reassembly block <b>205</b>. <figref idref="DRAWINGS">FIG. 25</figref> is a diagram of a “port empty” register located in reassembly block <b>205</b>. <figref idref="DRAWINGS">FIG. 26</figref> is a diagram of a “port full” register located in reassembly block Reassembly block <b>205</b> uses the port calendar and registers of <figref idref="DRAWINGS">FIGS. 24-26</figref> to determine how to pop the output port queues in the Q_FIFO and move the associated chunks to an OUTPUT_DATA_FIFO. The OUTPUT_DATA_FIFO (not shown) is located within reassembly block <b>205</b> and serves as the interface through which data flows to outgoing SPI-4 interface block <b>206</b>.</p>
<p id="p-0139" num="0138">Outgoing SPI-4 interface block <b>206</b> periodically sends port full status information that is used to load the “port full” register to keep reassembly block <b>205</b> updated on how busy the various output logical ports are. Memory manager block <b>204</b> periodically sends empty status information that is used to load the “port empty” register to keep reassembly block <b>205</b> updated on whether there is any more information coming from the memory manager <b>205</b> for each of the various logical output logical ports. In each of the “port empty” and “port full” registers, there is one bit for each of the respective sixty-four logical output ports of ingress MS-SAR <b>125</b>.</p>
<p id="p-0140" num="0139">Reassembly block <b>205</b> steps through the rows of the port calendar of <figref idref="DRAWINGS">FIG. 24</figref>, one by one. For each row, reassembly block <b>205</b> reads the port ID (PID) from the last field of the row and examines the bit corresponding to that port ID in each of the “port empty” and “port full” registers. If the bits in these two registers indicate that the port is neither full (i.e., that port has all the data it can handle) nor empty (no data is available for that port), then reassembly block <b>205</b> pops the queue in Q_FIFO for that port ID. The popping of the queue causes reassembly block <b>205</b> to retrieve one 64-byte data chunk from DATA_SRAM and its associated header from HDR_SRAM. (In ingress mode, all chunks are 64 bytes but in egress mode EOP chunks can be less than 64 bytes). The header is then appended to the data chunk as the complete “switch cell” is pushed onto the OUTPUT_DATA_FIFO. Outgoing SPI-4 interface block <b>206</b> pops the OUTPUT_DATA_FIFO, thereby causing the “switch cell” to be supplied to outgoing SPI-4 interface block <b>206</b> in 64-bit pieces via 64-bit bus <b>325</b> (see <figref idref="DRAWINGS">FIG. 10</figref>). The logical output port is provided to outgoing SPI-4 interface block <b>206</b> along with the switch cell. Outgoing SPI-4 interface block <b>206</b> in turn outputs the switch cell onto SPI-4 bus <b>107</b> in 16-bit pieces via sixteen output terminals <b>326</b> of ingress MS-SAR <b>125</b>. The SPI-4 bus <b>107</b> includes an SOP delimiter and an EOP delimiter between data bursts on the SPI-4 bus. Data bursts on the SPI-4 bus are transmitted in multiples of 16 bytes.</p>
<p id="p-0141" num="0140">In this example, MS-SAR <b>125</b> is in the ingress mode, so there is only one logical output port. Consequently there is only one entry in the port calendar of <figref idref="DRAWINGS">FIG. 24</figref>. When a row entry is processed having a jump bit of “1”, processing of rows returns to the first row. In the example of <figref idref="DRAWINGS">FIG. 24</figref> where there is only one logical output port, there is a “1” in the jump column of the first row entry for port ID number one. Accordingly, the one and only output queue in the Q_FIFO is popped. The circular arrow in <figref idref="DRAWINGS">FIG. 24</figref> illustrates this return in the present example where there is only one logical output port (PID <b>1</b>).</p>
<p id="p-0142" num="0141"><figref idref="DRAWINGS">FIG. 27</figref> illustrates information flow for flow #<b>1</b> out of ingress MS-SAR <b>125</b>. The heavy upwardly pointing arrow represents the dequeuing operation being performed by per flow queue block <b>207</b> including the passing of BIDs and associated parameters to memory manager block <b>204</b>. The heavy arrow extending from payload memory block <b>217</b> to the right represents the flow of 64-byte chunks through reassembly block <b>205</b> and to the switch fabric.</p>
<p id="p-0143" num="0142">Per flow queue <b>207</b> continues issuing dequeue commands in the desired order such that the associated various 64-byte chunks of the two flows (see <figref idref="DRAWINGS">FIG. 23</figref>) are read out of payload memory <b>217</b> and such that corresponding switch cells are generated. The switch cells are output to switch fabric <b>105</b> from outgoing SPI-4 interface block <b>206</b> via SPI-4 bus <b>107</b>.</p>
<p id="p-0144" num="0143"><figref idref="DRAWINGS">FIG. 28</figref> illustrates the three switch cells that correspond to 64-byte chunks C<b>1</b>, C<b>2</b> and C<b>3</b> of packet <b>300</b>. The switch headers of each of the three cells contain the “virtual port number” of line card <b>103</b> to which the cells are to be routed. The Azanda header of each switch cell contains the egress application type (egress application type <b>11</b>) that the egress MS-SAR <b>200</b> is to perform on the switch cells of flow #<b>1</b>.</p>
<p id="p-0145" num="0144"><figref idref="DRAWINGS">FIG. 29</figref> illustrates the switch cell that corresponds to the one and only 64-byte chunk for ATM cell <b>308</b>. The switch header of this switch cell contains the “virtual port number” of line card <b>103</b> to which the cell is to be routed. The Azanda header of the switch cell contains the egress application type (egress application type <b>8</b>) that the egress MS-SAR <b>200</b> is to perform on the switch cell of flow #<b>2</b>.</p>
<p id="p-0146" num="0145">Switch fabric <b>105</b> receives the switch cells from SPI-4 bus <b>107</b> and uses the “virtual port number” embedded in the switch headers to route the switch cells to line card <b>103</b>. The switch cells are received on the SPI-4 bus <b>110</b> (see <figref idref="DRAWINGS">FIG. 9</figref>) of line card <b>103</b>. SPI-4 bus <b>110</b> is coupled to the SPI-4 bus input terminals (see input terminals <b>198</b> of <figref idref="DRAWINGS">FIG. 10</figref>) of egress MS-SAR device <b>200</b> of line card <b>103</b>. Operation of egress MS-SAR <b>200</b> is explained below in connection with <figref idref="DRAWINGS">FIG. 10</figref>.</p>
<p id="p-0147" num="0146"><figref idref="DRAWINGS">FIG. 30</figref> illustrates the general flow of information into egress MS-SAR <b>200</b>. The first incoming switch cell of packet <b>300</b> is read into incoming SPI-4 interface block <b>201</b> and is passed to lookup block <b>202</b>. Lookup block <b>202</b> need not, however, perform a lookup using hashing as was done in the ingress mode described above. Rather, because there is an Azanda header embedded in the switch cells, and because that Azanda header contains the FID and the egress application type to be performed by the egress MS-SAR, lookup block <b>202</b> merely locates this Azanda header and extracts the embedded information.</p>
<p id="p-0148" num="0147"><figref idref="DRAWINGS">FIG. 31</figref> illustrates the first switch cell for packet <b>300</b> of flow #<b>1</b>. The Azanda header is the last four bytes of the switch header. Although the size of the switch header can differ from switch fabric to switch fabric, all switch cells for a given switch fabric have the same size. CPU <b>106</b> writes the size of the switch header for its switch fabric into a “number of bytes of switch header” field in each row of the “port table” (see <figref idref="DRAWINGS">FIG. 14</figref>). This number is the same for all rows of the “port table”. Lookup block <b>202</b> in egress MS-SAR <b>200</b> reads the “number of bytes of switch header” field in the row of the port table in the egress MS-SAR <b>200</b> for the logical input port from which the switch cells were received. From this number of bytes of the switch cell, lookup engine block <b>202</b> locates the last four bytes which are the Azanda header. From the Azanda header, lookup block <b>202</b> retrieves the FID and the egress application type to be performed by egress MS-SAR <b>200</b>. Lookup block <b>202</b> removes the switch header and passes the remaining 64-bytes to segmentation block <b>203</b> along with the FID and egress application type. The egress application type is supplied along with the 64-byte chunk so that the other blocks that receive the 64-byte chunk will perform the correct type of processing on the associated 64-bytes. The FID in the example of <figref idref="DRAWINGS">FIG. 9</figref> is flow #<b>1</b>. The egress application type in the example of <figref idref="DRAWINGS">FIG. 9</figref> for flow#<b>1</b> is egress application type <b>11</b>.</p>
<p id="p-0149" num="0148">In accordance with egress application type <b>11</b>, segmentation block <b>203</b> does not perform segmenting per se but rather forwards the 64-byte chunk to memory manager block <b>204</b> via the per-port FIFO mechanism described above. Memory manager block <b>204</b> issues an enqueue command via enqueue command line <b>320</b>, and stores the 64-byte chunk in payload memory <b>217</b>. Per flow queue block <b>207</b> adds the BID to the per flow queue for flow #<b>1</b>. The same process flow occurs for the second and third switch cells associated with flow #<b>1</b>.</p>
<p id="p-0150" num="0149"><figref idref="DRAWINGS">FIG. 30</figref> represents the storing of 64-byte chunks into payload memory <b>217</b> by the heavy upward pointing arrow that extends toward payload memory block <b>217</b>. The heavy downward pointing arrow that extends toward per flow queue block <b>207</b> represents the enqueue command and the building of the three BID linked list for flow #<b>1</b>.</p>
<p id="p-0151" num="0150">The switch cell for the ATM cell (see <figref idref="DRAWINGS">FIG. 29</figref>) is received onto egress MS-SAR <b>200</b> (see <figref idref="DRAWINGS">FIG. 9</figref>) in similar fashion. As in the case for the switch cells for the packet, lookup block <b>202</b> uses the logical input port number supplied by incoming SPI-4 interface block <b>201</b> to access the appropriate row in the “port table” (see <figref idref="DRAWINGS">FIG. 14</figref>) in the lookup block <b>202</b>. From the “number of bytes of switch header” field in that row, lookup block <b>202</b> locates the “Azanda header” in the incoming switch cell. The Azanda header contains the egress application type and the FID. Lookup block <b>202</b> removes the switch header, and forwards the remaining 64-byte chunk to segmentation block <b>203</b> along with the FID and egress application type to be performed by egress MS-SAR <b>200</b>. The 64-byte chunk in this case contains the 4-byte ATM header, the 48-byte ATM payload, and twelve bytes of pad.</p>
<p id="p-0152" num="0151">In the example of <figref idref="DRAWINGS">FIG. 9</figref>, the FID is flow #<b>2</b>. In the example of <figref idref="DRAWINGS">FIG. 9</figref>, the egress application type for flow #<b>2</b> is egress application type <b>8</b>. In accordance with egress application type <b>8</b>, segmentation block <b>203</b> does not perform segmentation per se but rather passes the 64-byte chunk and the egress application type to memory manager block <b>204</b> via the per-port FIFO mechanism described above. Memory manager block <b>204</b> stores the 64-byte chunk. Per flow queue block <b>207</b> adds the BID for this chunk and parameters associated with the chunk to a per flow queue for flow #<b>2</b>.</p>
<p id="p-0153" num="0152">Once the 64-byte chunks from the various switch cells are stored in payload memory <b>217</b> and the linked lists for flow #<b>1</b> and flow #<b>2</b> are built, then the linked lists can be popped (i.e., “dequeued”) and the 64-byte chunks output in various orders. For example, output scheduler block <b>210</b> can schedule the popping of the queues to control flow to output ports on a flow ID basis.</p>
<p id="p-0154" num="0153"><figref idref="DRAWINGS">FIG. 32</figref> illustrates the general flow of information out of egress MS-SAR <b>200</b> in one scenario when the linked lists for flow #<b>1</b> and flow #<b>2</b> are dequeued. As each BID is dequeued from a per flow queue, the associated 64-byte chunk is read from payload memory <b>217</b> and is supplied via 128-bit wide data bus <b>324</b> to reassembly block <b>205</b>. As explained above in connection with the ingress mode, reassembly block <b>205</b> maintains one reassembly queue for each of the 64 logical output ports. If two flows share the same logical output port, then the entire linked list for one flow must be dequeued before the linked list for the next flow having the same logical output port is dequeued. In the example of <figref idref="DRAWINGS">FIG. 8</figref>, flow #<b>1</b> and flow #<b>2</b> have different logical output ports. The dequeue command as received by memory manager block <b>204</b> from per flow queue block <b>207</b> contains the port ID (PID) of the one of the 64 logical output ports of line card <b>103</b>.</p>
<p id="p-0155" num="0154">In the present example, the three-chunk linked list for flow #<b>1</b> is dequeued first, one chunk at a time. Each 64-byte chunk is read into the DATA_SRAM of reassembly block <b>205</b> and a pointer to that chunk is stored in the Q_FIFO in the queue for the logical output port of flow #<b>1</b>. The first chunk contains the MPLS packet header. In an MPLS manipulation operation, reassembly block <b>205</b> can add (i.e., “push”) MPLS labels to, or remove (i.e., “pop”) MPLS labels from, the MPLS header found in the first chunk.</p>
<p id="p-0156" num="0155">Consider the situation in <figref idref="DRAWINGS">FIG. 9</figref> where a first MPLS label for communication across the network coupled to router <b>100</b> via fiber optic cable <b>115</b> is to be replaced with a second MPLS label for communication across the network coupled to router <b>100</b> via fiber optic cable <b>118</b>. Reassembly block <b>205</b> determines the type of MPLS manipulation to perform using the FID to lookup MPLS information that CPU <b>106</b> stored previously in the external “header table” <b>327</b> (see <figref idref="DRAWINGS">FIG. 10</figref>) of the egress MS-SAR <b>200</b>. For each FID, header table <b>327</b> contains MPLS manipulation information.</p>
<p id="p-0157" num="0156"><figref idref="DRAWINGS">FIG. 33</figref> is a more detailed diagram of an entry for a FID in “header table” <b>327</b> of <figref idref="DRAWINGS">FIG. 10</figref>. The entry for each FID includes two 72-bit words. The first word contains an eight-bit control word CONTROL_WORD_<b>1</b>, a first 32-bit field that can contain either a first MPLS label or an ATM VPI/VCI header, and a second 32-bit field that can contain a second MPLS label. The second word contains a second eight-bit control word CONTROL_WORD_<b>2</b>, a first 32-bit field that can contain a switch header, and a second 32-bit field that holds the 32-bit Azanda header. The first two bits of CONTROL_WORD_<b>1</b> indicate the header type: “00” indicates MPLS type, “10” indicates ATM type, and “01” indicates L2 Ethernet type. The next three bits of CONTROL_WORD_<b>1</b> indicate the type of MPLS manipulation to perform: “000” indicates replace MPLS label and decrement the 8-bit MPLS time to live (TTL) field, “001” indicates push one MPLS label and decrement the original MPLS TTL, “010” indicates push two MPLS labels and decrement the original MPLS TTL, “010” indicates pop one MPLS label and decrement the original MPLS TTL, and “100” indicates pop two MPLS labels and decrement the original MPLS TTL. The next two bits of CONTROL_WORD_<b>1</b> indicate the number of valid header words for that FID in the header table <b>327</b>. The last bit of CONTROL_WORD_<b>1</b> indicates that L2 stripping and CRC checking is enabled. The first five bits of CONTROL_WORD_<b>2</b> indicate the number of L2 header bytes to remove if type is L2 Ethernet.</p>
<p id="p-0158" num="0157">In the example of <figref idref="DRAWINGS">FIG. 9</figref>, the entry in header table <b>327</b> for flow #<b>1</b> indicates that the header type is MPLS and that information in the MPLS field (see <figref idref="DRAWINGS">FIG. 33</figref>) determines the action. In the present example, the MPLS label is to be replaced. Reassembly block <b>205</b> therefore replaces the MPLS label in the first 64-byte chunk for flow #<b>1</b> with the MPLS label found in an MPLS label field of the first word of the entry for flow #<b>1</b> in header table <b>327</b>. Reassembly block <b>205</b> also decrements the original TTL number.</p>
<p id="p-0159" num="0158">As described above in connection with <figref idref="DRAWINGS">FIGS. 24-26</figref>, reassembly engine <b>205</b> cycles through the entries in its port calendar (see <figref idref="DRAWINGS">FIG. 24</figref>). The port calendar is provisioned beforehand by CPU <b>106</b> so that there is one entry for the port of flow #<b>1</b> and another entry for the port of flow #<b>2</b>. If when reassembly block <b>205</b> services one of the rows of the port calendar the full and empty registers indicate that outgoing SPI-4 interface block <b>206</b> is ready for data for that output port, then the queue for that output port is popped such that one 64-byte chunk stored in DATA_SRAM is combined with a header from HDR_SRAM if appropriate and the result is pushed onto the OUTPUT_DATA_FIFO within reassembly block <b>205</b>.</p>
<p id="p-0160" num="0159">As the various 64-byte chunks of the packet are received from memory manager block <b>204</b>, reassembly block <b>205</b> uses a CRC engine to calculate a CRC value on the data. The CRC value calculated on only part of the data is called a “partial CRC”. The partial CRC value is changed as each additional piece of data passes through the reassembly block <b>205</b>. When the last of the data (as indicated by the EOP bit) passes through the CRC engine, the CRC value is a “complete CRC”. The complete 32-bit CRC is compared with the 32-bit CRC value found in the AAL5 trailer of the last 64-byte chunk of the packet. If the two CRC values match, then the data was not corrupted.</p>
<p id="p-0161" num="0160">The AAL5 trailer also contains a sixteen-bit “length of payload” field that indicates the length of the payload of the packet being reassembled. Reassembly block <b>205</b> maintains a partial packet byte count value for the packet. As each 64-byte chunk of the packet is received from memory manager block <b>204</b>, reassembly block <b>205</b> adds the number of bytes received to the partial packet byte count value. After the last 64-byte chunk for the packet has been received and the partial packet byte count value has been added to, reassembly block <b>205</b> compares the now complete packet byte count value with the “length of payload” value from the AAL5 trailer. The two should match.</p>
<p id="p-0162" num="0161">After checking the CRC and the byte count, reassembly block <b>205</b> removes the trailer and any padding from the last 64-byte chunk, and pushes the last chunk onto the OUTPUT_DATA_FIFO.</p>
<p id="p-0163" num="0162">Outgoing SPI-4 interface block <b>206</b> receives the pieces of the packet, piece by piece (each piece being 64-bytes), from OUTPUT_DATA_FIFO and supplies those pieces of the packet of flow #<b>1</b> to framer <b>123</b>. As framer <b>123</b> is ready to receive another piece of the packet being sent out on a particular output port, outgoing SPI-4 interface block <b>206</b> sends it one via 16-bit wide SPI-4 bus <b>141</b>. Outgoing SPI-4 interface block <b>206</b> supplies bursts and start and end delimiters in accordance with SPI-4 protocol to demarcate the packet. Framer <b>142</b> receives the packet from SPI-4 bus <b>141</b> and uses the start delimiters and the end delimiters to frame the packet. The packet passes through transmit serdes <b>143</b> and optics module <b>144</b> and onto fiber optic cable <b>118</b>. In this way, 64-byte chunks of the packet of flow #<b>1</b> go through reassembly block <b>205</b> one by one, the header of the first chunk being modified in accordance with egress application type <b>11</b>, the trailer on the last chunk being checked and then removed. Accordingly, the term “reassembly” here does not necessarily require that the entire packet exist in reassembled form in the reassembly block or even on the MS-SAR. Rather the reassembly block outputs the various chunks of the packet sequentially such that the packet is transmitted in reassembled from on the fiber optic cable.</p>
<p id="p-0164" num="0163"><figref idref="DRAWINGS">FIG. 34</figref> illustrates the three 64-byte chunks of flow #<b>1</b> as passed through reassembly block <b>205</b> to outgoing SPI-4 interface block <b>206</b>. The chunks are illustrated as 64-byte chunks rather than 64-bit pieces for ease of illustration.</p>
<p id="p-0165" num="0164"><figref idref="DRAWINGS">FIG. 35</figref> illustrates the MPLS packet of flow #<b>1</b> as output from SPI-4 interface block <b>206</b> to framer <b>142</b>.</p>
<p id="p-0166" num="0165">The 64-byte chunk for the ATM cell of flow #<b>2</b> in this example is dequeued from payload memory <b>217</b> in similar fashion. Per flow queue block <b>207</b> issues a dequeue command to memory manager block <b>204</b> that indicates the BID of the chunk, and the logical output port from which the flow is to be transmitted. Reassembly block uses the FID of flow #<b>2</b> to access the FID entry in “header table” <b>327</b> (see <figref idref="DRAWINGS">FIG. 9</figref>). The header type bits of CONTROL_WORD_<b>1</b> of the FID entry for flow #<b>2</b> indicates that the header type is ATM. Reassembly block <b>205</b> therefore replaces (i.e., “translates”) the VPINCI field in the ATM header of the chunk in HDR_SRAM with the VPI/VCI information stored in the FID entry for flow #<b>2</b>. Reassembly block <b>205</b> may also be programmed by information in header table <b>327</b> to change the CLP (Cell Loss Priority bit in the ATM header that indicates a high or low priority for the ATM cell).</p>
<p id="p-0167" num="0166">Reassembly block <b>205</b> receives the 64-byte chunk, stores it into DATA_SRAM, and pushes a pointer to the 64-bytes onto a queue for the logical output port for flow #<b>2</b>. Reassembly block <b>205</b> services the ports in its port calendar as explained above, combines the data portion in the DATA_SRAM with the translated ATM header portion in HDR_SRAM, and loads the completed ATM cell of flow #<b>2</b> into the OUTPUT_DATA_FIFO in reassembly block <b>205</b>. The last eight bytes of the 64 bytes in DATA_SRAM are pad. Reassembly block <b>205</b> removes this 8-byte pad by not reading it into the OUTPUT_DATA_FIFO. Outgoing SPI-4 interface block <b>205</b> pops the OUTPUT_DATA_FIFO such that reassembly block <b>205</b> supplies the resulting 56-byte chunk to outgoing SPI-4 interface block <b>205</b>. <figref idref="DRAWINGS">FIG. 36</figref> illustrates the 56-byte chunk (ATM cell plus four bytes of pad) as output from reassembly block <b>205</b>.</p>
<p id="p-0168" num="0167">Outgoing SPI-4 interface block <b>206</b> removes the last four bytes of pad when sending the ATM cell out. It does this using byte enables. Outgoing SPI-4 interface block <b>206</b> outputs start and end delimiters to demarcate the 52-byte ATM cell in accordance with the SPI-4 bus protocol. The entire 52-byte cell is output in one burst. <figref idref="DRAWINGS">FIG. 37</figref> illustrates the ATM cell of flow #<b>2</b> as output from outgoing SPI-4 interface block <b>206</b> of egress MS-SAR <b>200</b> via 16-bit wide SPI-4 bus <b>141</b>.</p>
<p id="p-0169" num="0168">Framer <b>142</b> receives the ATM cell from SPI-4 bus <b>141</b> and uses the start and end delimiters to frame the ATM cell. Framer <b>142</b> then supplies the ATM cell to transmit serdes <b>143</b>. Serdes <b>143</b> in turn supplies the ATM cell in analog serial fashion to optics module <b>144</b>. Optics module <b>144</b> outputs the ATM cell onto fiber optic cable <b>118</b>. In the example of <figref idref="DRAWINGS">FIG. 9</figref>, there is only one physical output port (i.e., the fiber optic cable <b>118</b>). Framer <b>142</b> therefore maps the logical output ports for flow #<b>1</b> and flow #<b>2</b> on SPI-4 bus <b>141</b> to the same serdes <b>143</b> for transmission on the same wavelength channel on the same fiber optic cable <b>118</b>.</p>
<p id="h-0010" num="0000">Example of Application Types <b>5</b>, <b>6</b>, <b>14</b> and <b>13</b>:</p>
<p id="p-0170" num="0169"><figref idref="DRAWINGS">FIG. 38</figref> illustrates an example of how two flows of different types (flow #<b>1</b> is a flow of three AAL5 cells, flow #<b>2</b> is an MPLS packet) are received onto a first line card (in this example, line card <b>101</b>), simultaneously pass through ingress MS-SAR <b>125</b> on the first line card, pass through switch fabric <b>105</b> (in this example switch fabric <b>105</b> is a packet-based switch fabric), pass onto a second line card (in this example, line card <b>103</b>), simultaneously pass through egress MS-SAR <b>200</b> on the second line card <b>103</b>, and are output by second line card <b>103</b>. Flow #<b>1</b> exits line card <b>103</b> as an MPLS packet, whereas flow #<b>2</b> exists line card <b>103</b> as four AAL5 cells. In this example, flow #<b>1</b> and flow #<b>2</b> are both communicated to first line card <b>101</b> on the same wavelength channel transmitted on the same fiber optic cable <b>115</b>. Similarly, flow #<b>1</b> and flow #<b>2</b> are both communicated from second line card <b>103</b> on the same wavelength channel and on the same fiber optic cable <b>118</b>.</p>
<p id="p-0171" num="0170">In <figref idref="DRAWINGS">FIG. 38</figref>, flow #<b>1</b> is a flow of AAL5 cells flow passing into an ingress line card, where the ingress line card supplies a packet to a packet-based switch fabric. As indicated by the middle left example of <figref idref="DRAWINGS">FIG. 8</figref>, this type of flow is identified as ingress application type <b>5</b>. The various blocks within ingress MS-SAR <b>125</b> therefore perform processing on flow #<b>1</b> in accordance with ingress application type <b>5</b>. In <figref idref="DRAWINGS">FIG. 38</figref>, flow #<b>2</b> involves an MPLS packet flow passing into an ingress line card, where the ingress line card supplies a packet to a packet-based switch fabric. As indicated by the bottom left example of <figref idref="DRAWINGS">FIG. 8</figref>, this type of flow is identified as ingress application type <b>6</b>. The various blocks within ingress MS-SAR <b>125</b> therefore perform processing on flow #<b>2</b> in accordance with ingress application type <b>6</b>.</p>
<p id="p-0172" num="0171">Ingress application type <b>5</b> processing on flow #<b>1</b> is explained in connection with <figref idref="DRAWINGS">FIGS. 38</figref>, <b>5</b>, <b>39</b> and <b>10</b>. The first AAL5 cell of flow #<b>1</b> is received via fiber optic cable <b>115</b> (see <figref idref="DRAWINGS">FIG. 5</figref>) and passes through optics module <b>119</b>, serdes <b>121</b>, framer <b>123</b> and classification engine <b>124</b>. The 52-byte AAL5 cell is received onto ingress MS-SAR <b>125</b> in 16-bit pieces via SPI-4 bus <b>135</b> via terminals <b>198</b> (see <figref idref="DRAWINGS">FIG. 10</figref>). The AAL5 cell includes a 4-byte ATM header and a 48-byte payload. Incoming SPI-4 interface block <b>201</b> appends a 4-byte pad to the end of the 52-byte AAL5 cell before forwarding the resulting 56-byte chunk <b>400</b> (see <figref idref="DRAWINGS">FIG. 39</figref>) to lookup block <b>202</b>. <figref idref="DRAWINGS">FIG. 39</figref> illustrates the 56-byte chunk <b>400</b> as it is output from incoming SPI-4 interface block <b>201</b>.</p>
<p id="p-0173" num="0172">As explained above in connection with the example of <figref idref="DRAWINGS">FIG. 9</figref>, lookup block <b>202</b> uses the input port type supplied via bus <b>317</b> to lookup the associated traffic type in the “port table” of lookup block <b>202</b>. In this case, the traffic type is “ATM cells”. From the traffic type, lookup block <b>202</b> locates the VPI and VCI fields in the ATM cell header. Lookup block <b>202</b> uses the VPI and VCI information to lookup in the “FID table” (in external memories <b>215</b> and <b>216</b>) the FID and the ingress application type. Lookup block <b>202</b> forwards the FID and ingress application type to the other blocks of the MS-SAR. Lookup block <b>202</b> removes the 4-byte ATM header and the 4-byte pad, and forwards the remaining 48-byte chunk <b>401</b> of data to segmentation block <b>203</b> via bus <b>318</b>. <figref idref="DRAWINGS">FIG. 39</figref> illustrates the 48-byte chunk <b>401</b> as it is output from lookup block <b>202</b>.</p>
<p id="p-0174" num="0173">Segmentation block <b>203</b> adds a 16-byte pad to the 48-byte chunk to form a 64-byte chunk <b>402</b>. Memory manager block <b>204</b> reads the 64-byte chunk <b>402</b> from segmentation block <b>203</b> and stores 64-byte chunk <b>402</b> into a buffer in payload memory <b>217</b> using the enqueue command mechanism set forth above in connection with the example of <figref idref="DRAWINGS">FIG. 9</figref>. The per flow queue for flow #<b>1</b> at this point involves just one buffer. The other two AAL5 cells of flow #<b>1</b> are processed in similar fashion such that corresponding 48-byte chunks <b>403</b> and <b>404</b> are queued in the per flow queue for flow #<b>1</b>.</p>
<p id="p-0175" num="0174">Ingress application type <b>6</b> processing on flow #<b>2</b> is explained in connection with <figref idref="DRAWINGS">FIGS. 38</figref>, <b>5</b>, <b>40</b> and <b>10</b>. The MPLS packet flow #<b>2</b> is received via fiber optic cable <b>115</b> and passes through optics module <b>119</b>, serdes <b>121</b>, framer <b>123</b> and classification engine <b>124</b>. The MPLS packet is received onto ingress MS-SAR <b>125</b> in 16-bit pieces via SPI-4 bus <b>135</b> via terminals <b>198</b> (see <figref idref="DRAWINGS">FIG. 10</figref>). The MPLS packet includes a four-byte MPLS header and a data payload. To illustrate operation of the ingress MS-SAR, the MPLS packet data payload in this example is 150 bytes.</p>
<p id="p-0176" num="0175">Incoming SPI-4 interface block <b>201</b> (see <figref idref="DRAWINGS">FIG. 10</figref>) forwards the 154-byte packet <b>405</b> as 64-bit pieces to lookup block <b>202</b>. <figref idref="DRAWINGS">FIG. 40</figref> illustrates the 154-byte packet <b>405</b> as it is output from incoming SPI-4 interface block <b>201</b>. As explained above in connection with the example of <figref idref="DRAWINGS">FIG. 9</figref>, lookup block <b>202</b> uses the input port type supplied via bus <b>317</b> to lookup the associated traffic type in the lookup block's “port table”. In this case, the traffic type is “MPLS packet”. From the traffic type, lookup block <b>202</b> locates the 20-bit MPLS label within the MPLS header. Lookup block <b>202</b> uses the MPLS label to determine the FID and the ingress application type. Lookup block <b>202</b> forwards the FID and ingress application type to the other blocks of the MS-SAR. The packet <b>406</b> is forwarded in 64-bit pieces to segmentation block <b>203</b> via bus <b>318</b>. Although all the 64-bit pieces of a packet for a given input port are supplied to segmentation block <b>203</b> before any other 64-bit pieces are received for that input port, 64-bit pieces for other input ports may be communicated from lookup block <b>202</b> in an interleaved fashion with the 64-bit pieces of packet <b>406</b>. <figref idref="DRAWINGS">FIG. 40</figref> illustrates the packet <b>406</b> as it is output from lookup block <b>202</b>.</p>
<p id="p-0177" num="0176">Segmentation block <b>203</b> “segments” the incoming packet <b>406</b> into 64-byte AAL5 like chunks. In the present example, there are three such chunks <b>407</b>-<b>409</b>. The first chunk <b>407</b> contains the 4-byte MPLS header. Segmentation block <b>203</b> adds an AAL5 trailer <b>410</b> to the end of the last chunk <b>409</b>. Any gap between the end of the 26-byte data payload <b>411</b> of the last chunk <b>409</b> and the trailer <b>410</b> is filled with a pad <b>412</b>. The term “segmentation” here does not mean that segmentation block <b>203</b> in this embodiment necessarily breaks the incoming packet into 64-byte chunks. That has already been done in this embodiment by SPI-4 interface block <b>201</b>. Rather, the term “segmentation” means that the packet leaves segmentation block <b>203</b> properly segmented into chunks in accordance with a segmentation scheme. In this example, segmentation block <b>203</b> calculates a cyclic redundancy check (CRC) value on the chunks of the packet and includes that CRC into trailer <b>410</b> of the last chunk <b>409</b>.</p>
<p id="p-0178" num="0177">Chunks of the packet are output from incoming SPI-4 interface block <b>201</b> in 64-byte chunks. Between the various chunks of a packet, other chunks from other flows may pass through the lookup block <b>202</b> and to the segmentation block <b>203</b>. Segmentation block <b>203</b> therefore queues the 64-byte chunks <b>407</b>-<b>409</b> into a FIFO on a per port basis. The per port FIFO is located within segmentation block <b>203</b>. As segmentation block <b>203</b> receives each chunk from an input port, segmentation block <b>203</b> reads a partial CRC for the port from a CRC table (not shown) within segmentation block <b>203</b>. The partial CRC is modified as a function of the current chunk received, and the new partial CRC is written back into the CRC table entry for the appropriate port. When the EOP of a chunk indicates the chunk is the last chunk of a packet, then the final CRC is calculated and this CRC is inserted into the trailer.</p>
<p id="p-0179" num="0178">Memory manager block <b>204</b> reads the 64-byte chunks from the per port FIFO in segmentation block <b>203</b> and stores the 64-byte chunks into buffers in payload memory <b>217</b> using the enqueue command mechanism set forth above in connection with the example of <figref idref="DRAWINGS">FIG. 9</figref>. The per flow queue for flow #<b>2</b> in this case involves three buffers.</p>
<p id="p-0180" num="0179">Once the 64-byte chunks for flow #<b>1</b> and flow #<b>2</b> are stored in payload memory <b>217</b>, their per flow queues can be dequeued so as to carry out traffic shaping and/or output scheduling functions. In the event that the per flow queue for flow #<b>1</b> is dequeued, 64-byte chunk <b>402</b> (see <figref idref="DRAWINGS">FIG. 39</figref>) is output from memory manager block <b>204</b> via 128-bit bus <b>324</b> (see <figref idref="DRAWINGS">FIG. 10</figref>). Reassembly block <b>205</b> uses the FID of chunk <b>402</b> to lookup a switch header <b>413</b> in the “header table” <b>327</b>. In this case, CPU <b>106</b> has placed a switch header <b>413</b> appropriate for packet-based switch fabric <b>105</b> into the location for flow #<b>1</b> in “header table” <b>327</b>. Reassembly block <b>205</b> removes the 16-byte pad from the first chunk <b>402</b>, adds the switch packet header <b>413</b> to the front to the chunk, and supplies the combination to outgoing SPI-4 interface block <b>206</b> using the port calendar mechanism explained above in connection with the example of <figref idref="DRAWINGS">FIG. 9</figref>. This outputting to outgoing SPI-4 interface block <b>206</b> can occur before all the other 64-byte chunks of the per flow queue are dequeued. In one embodiment of reassembly block <b>205</b>, either the second 64-byte chunk of a per flow queue or an EOP chunk must be received before the first chunk can be output. The 64-byte chunks <b>403</b> and <b>404</b> are dequeued and processed by reassembly block <b>205</b> in similar fashion, except that no header is added to these chunks. The combination of the switch header <b>413</b> and the data portions of the three chunks <b>402</b>-<b>404</b> is a switch packet <b>414</b>.</p>
<p id="p-0181" num="0180"><figref idref="DRAWINGS">FIG. 39</figref> shows this switch packet <b>414</b> as it is output from reassembly block <b>205</b> via 64-bit bus <b>325</b>. The data portions of the three 64-byte chunks <b>402</b>-<b>404</b> together form the data payload of switch packet <b>414</b>. <figref idref="DRAWINGS">FIG. 39</figref> also illustrates switch packet <b>414</b> as it is output from outgoing SPI-4 interface block <b>206</b>.</p>
<p id="p-0182" num="0181">The 64-byte chunks <b>407</b>-<b>409</b> (see <figref idref="DRAWINGS">FIG. 40</figref>) of flow #<b>2</b> are dequeued in similar fashion, the three chunks being processed through the per port queue in reassembly block <b>205</b> for the output port of this flow. Reassembly block <b>205</b> uses the FID of the first chunk to lookup a switch header <b>415</b> in “header table” <b>327</b>. Reassembly block <b>205</b> adds switch header <b>415</b> to the front to the first 64-byte chunk. Reassembly block <b>205</b> calculates a CRC from the data payload of the three chunks <b>407</b>-<b>409</b> and checks to make sure that it matches the CRC found in the trailer <b>410</b> of the last chunk <b>409</b>. After checking the CRC, reassembly block <b>205</b> removes the pad <b>412</b> and trailer <b>410</b>.</p>
<p id="p-0183" num="0182">First chunk <b>407</b> is processed and supplied to the outgoing SPI-4 interface block <b>206</b> along with switch header <b>415</b> before the remaining chunks <b>408</b> and <b>409</b> of the packet are dequeued. Reassembly block <b>205</b> does not store the entire packet in reassembled form on the MS-SAR, but rather processes and outputs the individual 64-byte chunks of the packet one at a time. In this embodiment, the OUTPUT_DATA_FIFO into which reassembly block <b>205</b> pushes processed chunks is only 256 bytes in size, a size inadequate to store the entire 160-byte switch packet.</p>
<p id="p-0184" num="0183">Chunks of flow #<b>2</b> are output from reassembly block <b>205</b> using the port calendar mechanism explained above in connection with the example of <figref idref="DRAWINGS">FIG. 9</figref>. The combination of the data portions of the three chunks <b>407</b>-<b>409</b> and the added switch header <b>415</b> together form switch packet <b>416</b>. <figref idref="DRAWINGS">FIG. 40</figref> shows switch packet <b>416</b> as it is output from reassembly block <b>205</b> via 64-bit bus <b>325</b>. Switch packet <b>416</b> is output from outgoing SPI-4 interface block <b>206</b> to the packet switch fabric <b>105</b> in 16-bit pieces via terminals <b>326</b>.</p>
<p id="p-0185" num="0184">Switch packets <b>414</b> and <b>416</b> for flow #<b>1</b> and for flow #<b>2</b> are switched by the packet switch fabric <b>105</b> of router <b>100</b> such that they are supplied to line card <b>103</b>. As described above in connection with the example of <figref idref="DRAWINGS">FIG. 9</figref>, router <b>100</b> uses a “virtual output port” number in the switch header to identify the particular destination line card to which the packets should be routed.</p>
<p id="p-0186" num="0185">Processing by egress MS-SAR <b>200</b> on flow #<b>1</b> is explained in connection with <figref idref="DRAWINGS">FIGS. 41</figref>, <b>5</b> and <b>10</b>. Switch packet <b>414</b> from packet-based switch fabric <b>105</b> is received in 16-bit pieces onto SPI-4 bus <b>100</b> via terminals <b>198</b>. Switch packet <b>414</b> includes 8 or 16 bytes of switch header in addition to the packet itself. <figref idref="DRAWINGS">FIG. 41</figref> illustrates switch packet <b>414</b> as it is output from incoming SPI-4 interface block <b>201</b>. Switch packet <b>414</b> is passed to lookup block <b>202</b> along with a PID indicating the logical input port.</p>
<p id="p-0187" num="0186">In the example of <figref idref="DRAWINGS">FIG. 38</figref>, flow #<b>1</b> through egress MS-SAR <b>200</b> is a flow from a packet-based switch fabric that is output as an MPLS packet. As indicated by the flow to the bottom right of <figref idref="DRAWINGS">FIG. 8</figref>, this is egress application type <b>14</b>. The Azanda header (see <figref idref="DRAWINGS">FIG. 33</figref>) is the last four bytes of the switch header. This Azanda header contains both the FID as well as the egress application type to be performed on flow #<b>1</b> by egress MS-SAR <b>200</b>. Again, as explained above in connection with <figref idref="DRAWINGS">FIG. 8</figref>, only one traffic type is permitted on any one logical input port. Lookup block <b>202</b> uses the logical input port number supplied to it via 64-bit bus <b>317</b> (see <figref idref="DRAWINGS">FIG. 10</figref>) to locate the Azanda header in the information coming from the switch fabric. Lookup block <b>202</b> extracts the FID (FID<b>1</b>) and egress application type (egress application type <b>14</b>). Lookup block <b>202</b> removes the switch header <b>413</b> and supplies the data payload of the packet via 64-bit bus <b>318</b> to segmentation block <b>203</b> along with the extracted FID and egress application type.</p>
<p id="p-0188" num="0187"><figref idref="DRAWINGS">FIG. 41</figref> illustrates the data payload <b>417</b> as it is output from lookup block <b>202</b>. Payload <b>417</b>, however, is passed to segmentation block <b>203</b> in 64-byte chunks. In the example of <figref idref="DRAWINGS">FIG. 38</figref>, the 144-byte payload of flow #<b>1</b> contains enough information for there to be three such chunks. The first chunk <b>418</b> contains 64 bytes, the second chunk <b>419</b> contains 64 bytes, and the third chunk <b>420</b> contains sixteen bytes of data <b>421</b>. Segmentation block <b>203</b> calculates a CRC on the data of the three chunks and adds a trailer <b>422</b> so that the trailer is located at the end of the third 64-byte chunk <b>420</b>. Segmentation block <b>203</b> adds any necessary pad between the end of the data <b>421</b> of the last chunk and the trailer <b>422</b> of the last chunk. The three chunks <b>418</b>-<b>420</b> of <figref idref="DRAWINGS">FIG. 41</figref> are queued on a per port basis into an SRAM in segmentation block <b>203</b> as explained above in connection with <figref idref="DRAWINGS">FIG. 40</figref> and pointers to the chunks are pushed onto a FIFO in segmentation block <b>203</b>. Memory manager block <b>204</b> pops the FIFO, reads the chunks, and stores the chunks into payload memory <b>217</b>. <figref idref="DRAWINGS">FIG. 41</figref> illustrates the three 64-byte chunks <b>418</b>-<b>420</b> supplied by segmentation block <b>203</b> to memory manager block <b>204</b>. The enqueue command mechanism as outlined above is used such that a per flow queue of BIDs is formed for the chunks of flow #<b>1</b>.</p>
<p id="p-0189" num="0188">Processing by egress MS-SAR <b>200</b> on flow #<b>2</b> is explained in connection with <figref idref="DRAWINGS">FIGS. 42</figref>, <b>5</b> and <b>10</b>. The switch packet <b>416</b> from packet-based switch fabric <b>105</b> is received in 16-bit pieces onto SPI-4 bus <b>100</b> via terminals <b>198</b>. Switch packet <b>416</b> includes 8 or 16 bytes of switch header <b>415</b>, 4 bytes of MPLS header, and 150 bytes of MPLS data payload.</p>
<p id="p-0190" num="0189"><figref idref="DRAWINGS">FIG. 42</figref> illustrates switch packet <b>416</b> as it is output from incoming SPI-4 interface block <b>201</b>. Switch packet <b>416</b> is passed to lookup block <b>202</b> along with the logical input port. The lookup block <b>202</b> uses the logical input port supplied to it via 64-bit bus <b>317</b> to locate the Azanda header in the information coming from the switch fabric. The lookup block extracts the FID and egress application type (egress application type <b>13</b>). In the case of flow #<b>2</b>, information from a packet-based switch fabric is output from egress MS-SAR <b>200</b> as AAL5 cells. This corresponds to egress application type <b>13</b> as indicated in the middle right portion of <figref idref="DRAWINGS">FIG. 8</figref>. Lookup block <b>202</b> removes switch header <b>415</b> and supplies the remainder of the packet (MPLS header and MPLS payload) to segmentation block <b>203</b> along with the extracted FID and egress application type. <figref idref="DRAWINGS">FIG. 41</figref> illustrates the MPLS header <b>423</b> and MPLS data payload <b>424</b> as supplied by lookup block <b>202</b> to segmentation block <b>203</b> via 64-bit bus <b>318</b>.</p>
<p id="p-0191" num="0190">In egress application type <b>13</b>, segmentation block <b>203</b> “segments” the MPLS header <b>423</b> and MPLS data payload <b>424</b> into four 48-byte chunks <b>425</b>-<b>428</b>, because each of these four chunks will be the data payload of an AAL5 cell to be output from egress MS-SAR <b>200</b>. In this example, the fourth 64-byte chunk contains only ten bytes of data <b>429</b>. Segmentation block <b>203</b> adds a trailer <b>430</b> so that the trailer <b>430</b> is located at the end of the first 48-bytes of the fourth 64-byte chunk. Any necessary pad <b>431</b> is added between the end of data <b>429</b> and the start of trailer <b>430</b>. Segmentation block <b>203</b> adds a 16-byte pad to the end of each 48-byte chunk to pad each chunk up to the 64-byte size stored in payload memory <b>217</b>. <figref idref="DRAWINGS">FIG. 42</figref> illustrates the four 64-byte chunks as output from segmentation block <b>203</b>. The mechanism for supplying the four chunks to memory block <b>204</b> involves a queue as explained above. Memory manager block <b>204</b> pops the queue, receives the 64-byte chunks from segmentation block <b>203</b>, and stores the 64-byte chunks into 64-byte buffers using the enqueue command mechanism described above. A per flow queue for flow #<b>2</b> is created.</p>
<p id="p-0192" num="0191">The pointers in the per flow queues for flow #<b>1</b> and flow #<b>2</b> are then popped off in a desired order using the dequeue command. Here in this example of <figref idref="DRAWINGS">FIG. 38</figref>, we will consider the per flow queue of flow #<b>1</b> being dequeued first. The three 64-byte chunks for flow #<b>1</b> are received from payload memory <b>217</b> by reassembly block <b>205</b> and are pushed onto a queue in reassembly block <b>205</b> for the intended output port. The pad and trailer of the third 64-byte chunk <b>420</b> (see <figref idref="DRAWINGS">FIG. 41</figref>) are removed. Reassembly block <b>205</b> also computes a CRC on the combined data of the three chunks and verifies that the CRC in trailer <b>422</b> matches the newly computed CRC. For the first 64-byte chunk <b>418</b>, reassembly block <b>205</b> uses the FID to lookup an MPLS header <b>432</b> in header table <b>327</b> (see <figref idref="DRAWINGS">FIG. 10</figref>). The MPLS header <b>432</b> was placed in header table <b>327</b> by CPU <b>106</b> before the lookup operation. Reassembly block <b>205</b> performs an MPLS manipulation operation if controlled to do so by control information in the header table.</p>
<p id="p-0193" num="0192"><figref idref="DRAWINGS">FIG. 41</figref> illustrates a simplified view of MPLS header <b>432</b> and the aggregated 144 bytes of data <b>433</b> as it is output from reassembly block <b>205</b>. MPLS header <b>432</b> and data <b>433</b> together form an MPLS packet <b>434</b>. Although shown here reassembled as a 144-byte block, the various 64-byte chunks of packet <b>434</b> are output from reassembly block <b>205</b> one by one, the first 64-byte chunk having the MPLS header appended to it. The chunks are output from reassembly block <b>205</b> using the port calendar and queue mechanism set forth above. Outgoing SPI-4 interface block <b>206</b> pops the Q_FIFO of reassembly block <b>205</b>, receives the chunks of the MPLS packet <b>434</b> in 64-bit pieces via 64-bit bus <b>325</b>, and supplies the pieces of the MPLS packet onto terminals <b>326</b>. The pieces of MPLS packet <b>434</b> pass over SPI-4 bus <b>141</b> to framer <b>142</b>, through framer <b>142</b>, serdes <b>143</b>, and optics module <b>144</b>, and onto fiber optic cable <b>118</b>. It is therefore seen that ATM cell information received onto the line card <b>101</b> passes through the packet-based switch fabric and exits line card <b>103</b> as an assembled MPLS packet.</p>
<p id="p-0194" num="0193">The per flow queue for flow #<b>2</b> is dequeued next in this example (see <figref idref="DRAWINGS">FIG. 42</figref>), the 64-byte chunks <b>425</b>-<b>428</b> of flow #<b>2</b> being supplied to the appropriate output port queue in reassembly block <b>205</b>. In egress application type <b>13</b>, reassembly block <b>205</b> removes the 16-bytes of pad from each 64-byte chunk to recover the 48-bytes of data. Reassembly block <b>205</b> uses the FID of a chunk to lookup a 4-byte ATM header <b>435</b>, adds the ATM header <b>435</b> to the 48-byte chunk of data, and adds a 4-byte alignment pad such that each chunk is 56-bytes. The data <b>429</b>, pad <b>431</b>, and trailer <b>430</b> of the fourth 64-byte chunk <b>428</b> form the data portion of the last 56-byte chunk as illustrated in <figref idref="DRAWINGS">FIG. 42</figref>. The ATM header <b>435</b> is the same for each of the four 56-byte chunks of this flow.</p>
<p id="p-0195" num="0194">Reassembly block <b>205</b> performs ATM translation by using the FID to access the FID entry in “header table” <b>327</b> (see <figref idref="DRAWINGS">FIG. 10</figref>). Because the header type in CONTROL_WORD_<b>1</b> of the FID entry is “ATM”, reassembly block <b>206</b> replaces the PTI, CLP, EFCI and OAM bits in the ATM header using the incoming EOP, CLP, EFCI and OAM bits from memory manager block <b>204</b>. The last AAL5 cell (marked EOP) is marked using the PTI field in the ATM header. The packet length is checked against the maximum MTU. Reassembly block <b>205</b> checks the length and CRC in AAL5 trailer <b>430</b>. <figref idref="DRAWINGS">FIG. 42</figref> illustrates the AAL5 cells <b>436</b>-<b>439</b> as output from reassembly block <b>205</b> in 64-bit pieces onto 64-bit bus <b>325</b>. Outgoing SPI-4 interface block <b>206</b> pops the queue for the correct output port, retrieves each AAL5 cell, removes the 4-byte alignment pad, and outputs the resulting 52-byte AAL5 cells onto terminals <b>326</b> in 16-bit pieces. The AAL5 cells of flow #<b>2</b> pass over SPI-4 bus <b>141</b>, through framer <b>142</b>, through serdes <b>143</b>, through optics module <b>144</b>, and onto fiber optic cable <b>118</b>. It is therefore seen that MPLS packet information received onto the line card <b>101</b> passes through the packet-based switch fabric and exits line card <b>103</b> in AAL5 cell form.</p>
<p id="h-0011" num="0000">Application Types <b>1</b> and <b>9</b>:</p>
<p id="p-0196" num="0195"><figref idref="DRAWINGS">FIG. 43</figref> illustrates an example of ingress application type <b>1</b> and egress application type <b>9</b>. The incoming data in this example is two AAL5 cells. These two 52-byte AAL5 cells are received onto ingress MS-SAR <b>125</b> via terminals <b>198</b>. The two cells are output from the incoming SPI-4 interface block. The first cell contains 4 bytes of ATM header and 48 bytes of ATM data #<b>1</b>. The first part of the ATM data <b>24</b> #<b>1</b> in this example is a packet header (for example, an IP header). The second cell contains 4 bytes of ATM header and a small amount of data (ATM data #<b>2</b>). An AAL5 trailer is disposed at the end of the 52 bytes of the second cell, and a pad is disposed between the end of the AAL5 data #<b>2</b> and the beginning of the trailer in accordance with the AAL5 protocol.</p>
<p id="p-0197" num="0196">Incoming SPI-4 interface block <b>201</b> adds four bytes of pad to each cell prior to sending the cells to lookup block <b>202</b>. The 4-byte pad is added because the data path from the incoming SPI-4 interface block to the segmentation block is 64-bits wide. Segmentation block <b>203</b> removes the 4-byte ATM header and adds an additional twelve bytes of pad for a total of sixteen bytes of pad. Memory manager block <b>204</b> passes the resulting two 64-byte chunks to payload memory <b>217</b> for storage. The two 64-byte chunks are read from payload memory and are passed to reassembly block <b>205</b>. Reassembly block <b>205</b> does not in this ingress application check the CRC in the trailer of the second cell. Reassembly block <b>205</b> adds either 8 or 16 bytes of a switch header to each 64-byte chunk, and passes the resulting chunks to outgoing SPI-4 interface block <b>206</b> as illustrated. Chunks are, however, processed through reassembly block <b>205</b> one at a time. As illustrated, the packet header in the AAL5 data #<b>1</b> is passed through the various blocks of the ingress MS-SAR to the outgoing SPI-4 interface block <b>206</b>. The cells pass out of the ingress MS-SAR <b>125</b> as “switch cells”, pass through the cell-based switch fabric, and to a line card having an egress MS-SAR. The arrow from the top portion of <figref idref="DRAWINGS">FIG. 43</figref> to the bottom portion of <figref idref="DRAWINGS">FIG. 43</figref> illustrates this passing through the switch fabric.</p>
<p id="p-0198" num="0197">The two switch cells pass through the incoming SPI-4 interface block and to lookup block <b>202</b> of the egress MS-SAR <b>200</b> as illustrated. Lookup block <b>202</b> removes the switch headers. The resulting two chunks pass through segmentation block <b>203</b> and are passed to memory manager block <b>204</b> one at a time for storage. Segmentation block <b>203</b> in egress application type <b>9</b> does not perform segmentation. The two 64-byte chunks are read out of memory manager block <b>204</b> and pass to reassembly block <b>205</b>. Reassembly block <b>205</b> maps AAL5 data #<b>1</b> and AAL5 data #<b>2</b> into one contiguous data portion. As each of the data portions passes into reassembly block <b>205</b>, a CRC on the data is computed. The composite CRC is then compared with the CRC in the trailer of the last 64-byte chunk (in this case the second chunk) as that second chunk passes into reassembly block <b>205</b>. Reassembly block <b>205</b> adds an MPLS header and if programmed to do so by control information in the header table, performs an MPLS manipulation operation on the MPLS header. The resulting packet (MPLS header and AAL5 data #<b>1</b> and AAL5 data #<b>2</b>) is then sent out to the framer via the outgoing SPI-4 interface block <b>206</b>.</p>
<p id="h-0012" num="0000">Application Types <b>2</b> and <b>10</b>:</p>
<p id="p-0199" num="0198"><figref idref="DRAWINGS">FIG. 44</figref> illustrates an example of ingress application type <b>2</b> and egress application type <b>10</b>. In this example an incoming MPLS packet (MPLS header and 72 bytes of MPLS payload) is received onto the ingress MS-SAR <b>125</b> and passes through incoming SPI-4 interface block <b>201</b>. Lookup block <b>202</b> performs a lookup and determines that the ingress application type is ingress application type <b>2</b>. Segmentation block <b>203</b> outputs the packet as two 64-byte chunks such that the first bytes of the first 64-byte chunk includes the MPLS header and a first part (AAL5 data #<b>1</b>) of the data payload. The remainder of the data of the MPLS packet (AAL5 data #<b>2</b>) is segmented into the second 64-byte chunk. Segmentation block <b>203</b> calculates a CRC on the 72 bytes of packet data and includes an AAL5 trailer into the second 64-byte chunk as illustrated so that the trailer is located at the end of the first 48 bytes of the second chunk. Segmentation block <b>203</b> appends 16 bytes of pad to the end of each 48-byte chunk so that each chunk is padded up to 64 bytes. The resulting two 64-byte chunks pass out of segmentation block <b>203</b> one at a time and are stored in memory manager block <b>204</b>. The 64-bytes chunks are read out of payload memory and pass to reassembly block <b>205</b> one at a time. Reassembly block <b>205</b> performs a switch header lookup and adds a switch header to each 64-byte chunk. Reassembly block <b>205</b> does not perform any checking of the CRC in the trailer. The resulting switch cells are output via outgoing SPI-4 interface block <b>206</b> as illustrated.</p>
<p id="p-0200" num="0199">The switch cells pass through a switch-based fabric and to an egress line card that includes the egress MS-SAR <b>200</b>. The switch cells pass through the incoming SPI-4 interface block <b>201</b> of the egress MS-SAR <b>200</b>. Lookup block <b>202</b> locates the Azanda header at the end of the switch header and determines the egress application type (egress application type <b>10</b>) to be performed. Lookup block <b>202</b> removes the switch headers and passes the remaining two 64-byte chunks to the memory manager block <b>204</b> for storage into payload memory. The 64-byte chunks are read out of payload memory and are passed one at a time to reassembly block Reassembly block <b>205</b> performs a header lookup and adds an ATM header to each 64-byte chunk. Reassembly block <b>205</b> removes 12 bytes of pad from the end of each chunk as illustrated in <figref idref="DRAWINGS">FIG. 44</figref>. The resulting chunks are passed to outgoing SPI-4 interface block <b>206</b>. Outgoing SPI-4 interface block <b>206</b> last the remaining 4-bytes of pad from the end of each chunk and outputs the chunks as ATM cells to the framer of the egress line card.</p>
<p id="h-0013" num="0000">Application Types <b>4</b> and <b>14</b>:</p>
<p id="p-0201" num="0200"><figref idref="DRAWINGS">FIG. 45</figref> illustrates an example of ingress application type <b>4</b> and egress application type <b>14</b>. In this example an incoming ATM cell (four bytes of ATM header and 48 bytes of ATM payload) is received onto the ingress MS-SAR <b>125</b> and passes through incoming SPI-4 interface block <b>201</b>. Lookup block <b>202</b> performs a lookup and determines that the ingress application type is ingress application type <b>4</b>. Lookup block <b>202</b> adds four bytes of pad as illustrated in <figref idref="DRAWINGS">FIG. 45</figref> and passes the resulting 56 bytes to segmentation block <b>203</b>. Segmentation block <b>203</b> generates neither a CRC nor a trailer. Segmentation block <b>203</b> adds an additional 8 bytes of pad as illustrated in <figref idref="DRAWINGS">FIG. 45</figref>. The resulting 64-byte chunk is stored by memory manager block <b>204</b> in payload memory. The 64-byte chunk is read out of payload memory and passes to reassembly block <b>205</b>. Reassembly block <b>205</b> performs a header lookup and adds an 8 or 16-byte switch header to the 64-byte chunk. The resulting switch packet (8 or 16 bytes of switch header, four bytes of ATM header, 48 bytes of ATM data, and 12 bytes of pad) is passed to a packet-based switch fabric via outgoing SPI-4 interface block <b>206</b>. The switch packet passes through the switch fabric and is received onto the appropriate line card and the ingress MS-SAR <b>200</b>. Lookup block <b>202</b> locates the Azanda header and determines the egress application type (egress application type <b>14</b>). Lookup block <b>202</b> removes the switch header and passes the remaining 64-bytes to segmentation block <b>203</b>. Segmentation block <b>203</b> does not attach a trailer, but merely passes the 64-byte chunk to memory manager block <b>204</b> for storage in payload memory. The 64-byte chunk is retrieved from payload memory and is passed to reassembly block <b>205</b>. Reassembly block <b>205</b> performs a header lookup, and appends an MPLS header as illustrated. Reassembly block <b>205</b> removes the last eight bytes of pad. The resulting “encapsulated” ATM cell (MPLS header, 4 bytes of ATM header, 48 bytes of ATM data, and 4 bytes of pad) is output as an MPLS packet to the framer of the egress line card via outgoing SPI-4 interface block <b>206</b>.</p>
<p id="h-0014" num="0000">Application Types <b>6</b> and <b>12</b>:</p>
<p id="p-0202" num="0201"><figref idref="DRAWINGS">FIG. 46</figref> illustrates an example of ingress application type <b>6</b> and egress application type <b>12</b>. In this example an incoming ATM encapsulated cell (four bytes of MPLS header, 4 bytes of ATM header, and 48 bytes of ATM payload) is received onto the ingress MS-SAR <b>125</b> and passes through incoming SPI-4 interface block <b>201</b>. Lookup block <b>202</b> performs a lookup and determines that the ingress application type is ingress application type <b>6</b>. Lookup block <b>202</b> adds four bytes of pad as illustrated in <figref idref="DRAWINGS">FIG. 46</figref> and passes the resulting 56-byte chunk to segmentation block <b>203</b>. Segmentation block <b>203</b> pads the chunk up to 64-bytes but generates neither a CRC nor a trailer. The 64-byte chunk is stored by memory manager block <b>204</b> in payload memory. The 64-byte chunk is read out of payload memory and passes to reassembly block <b>205</b>. Reassembly block <b>205</b> performs a header lookup, adds an 8 or 16-byte switch header to the 64-byte chunk, and removes the last 8 bytes of pad. The resulting packet (8 or 16 bytes of switch header, four bytes of MPLS header, four bytes of ATM header, 48 bytes of ATM data, and 4 bytes of pad) is passed to a packet-based switch fabric via outgoing SPI-4 interface block <b>206</b>. The switch packet passes through the packet-based switch fabric and is received onto the appropriate line card and the egress MS-SAR <b>200</b>. In the egress MS-SAR, the lookup block <b>202</b> locates the Azanda header and determines the egress application type (egress application type <b>12</b>). Lookup block <b>202</b> removes the switch header and MPLS header and passes the remaining 56-bytes (4 bytes of ATM header, 48 bytes of ATM data, and 4 bytes of pad) to segmentation block <b>203</b>. Segmentation block <b>203</b> does not attach a trailer, but adds an additional 8-byte pad to pad the chunk up to 64 bytes. The 64-byte chunk is stored in payload memory, is read out of payload memory, and passes to reassembly block <b>205</b>. Reassembly block <b>205</b> translates the ATM header. For example, if instructed so by control information in the header table, reassembly block <b>205</b> replaces the VPINCI information in the ATM header with VPI/VCI information retrieved from the header table. Reassembly block <b>205</b> removes the last 8 bytes of pad and passes the resulting ATM cell (4 bytes of ATM header, 48 bytes of data, and 4 bytes of pad) to outgoing SPI-4 interface block <b>206</b>. Outgoing SPI-4 interface block <b>206</b> removes the last 4 bytes of pad and passes the resulting 52-byte ATM cell to the framer of the egress line card.</p>
<p id="h-0015" num="0000">Application Types <b>6</b> and <b>14</b>:</p>
<p id="p-0203" num="0202"><figref idref="DRAWINGS">FIG. 47</figref> illustrates an example of ingress application type <b>6</b> and egress application type <b>14</b>. In this example an incoming MPLS packet (four bytes of MPLS header and 160 bytes of packet payload) is received onto the ingress MS-SAR <b>125</b> of a first line card and passes through incoming SPI-4 interface block <b>201</b>. Lookup block <b>202</b> performs a lookup operation and determines that the ingress application type is ingress application type <b>6</b>. Segmentation block <b>203</b> outputs the packet information as 64-byte chunks as illustrated in <figref idref="DRAWINGS">FIG. 47</figref>. In the example of <figref idref="DRAWINGS">FIG. 47</figref>, the 160 bytes of data payload of the packet is segmented so that the 4-byte MPLS header and 60 bytes of data is segmented into the first 64-byte chunk. The next 64 bytes of data is segmented into the next 64-byte chunk. The remaining 36 bytes of data <b>440</b> from the 160-byte payload is segmented into the third 64-byte chunk as illustrated. Segmentation block <b>203</b> calculates a CRC on the data payload and places the CRC calculated into a trailer <b>441</b> that is incorporated as the end of the last 64-byte chunk. Any space between the end of the data <b>440</b> and trailer <b>441</b> is filled with a pad <b>442</b>. Segmentation block <b>203</b> may be outputting 64-byte chunks of a packet at the same time that it is receiving chunks of the same packet. The 64-byte chunks are stored by memory manager block <b>204</b> into payload memory. The 64-byte chunks are read out of payload memory and are supplied to reassembly block <b>205</b>. Reassembly block <b>205</b> maps the data portions of the 64-bytes chunks into 160-bytes of packet data as illustrated. Reassembly block <b>205</b> calculates a CRC on the data as the various chunks of data pass into the reassembly block <b>205</b>. When the data from the last 64-byte chunk is received onto reassembly block <b>205</b>, reassembly block compared the final CRC with the CRC in the trailer of the last 64-byte chunk. Using the FID of the flow, reassembly block <b>205</b> performs a header lookup and attaches a switch header to the front of the data payload. The resulting switch packet (switch header, MPLS header, and packet data) is supplied to outgoing SPI-4 interface block <b>206</b> in pieces, one at a time. Although the packet data payload is illustrated in <figref idref="DRAWINGS">FIG. 46</figref> as being reassembled by reassembly block <b>205</b>, a first part of the switch packet may be flowing out of reassembly block <b>205</b> to outgoing SPI-4 interface block <b>206</b> at the same time that a second part of the data portion of the switch packet is being received onto reassembly block <b>205</b>.</p>
<p id="p-0204" num="0203">The switch packet of <figref idref="DRAWINGS">FIG. 46</figref> passes through a packet-based switch fabric to a second line card having an egress MS-SAR. The arrow in <figref idref="DRAWINGS">FIG. 46</figref> illustrates this flow of information. The switch packet (switch header, MPLS header, and 160 bytes of packet data in this example) is received onto the egress MS-SAR via incoming SPI-4 interface block <b>201</b>. Lookup block <b>202</b> removes the switch header, locates the Azanda header, and determines from the Azanda header the egress application type to be performed (egress application type <b>14</b>). Segmentation block <b>203</b> segments the packet as illustrated in <figref idref="DRAWINGS">FIG. 46</figref> into 64-byte chunks. Segmentation block adds a trailer to the end of the last 64-byte chunk as explained above. The 64-byte chunks are supplied one by one to the memory manager block <b>204</b> and are stored one by one into payload memory. The 64-bytes are read out of payload memory one by one and are supplied, one by one, to reassembly block <b>205</b>. When reassembly block <b>205</b> receives the first 64-byte chunk, reassembly block <b>205</b> performs a header lookup using header table <b>327</b>. If instructed to by control information found in the header table <b>327</b>, reassembly block <b>205</b> performs an MPLS manipulation operation on the MPLS header. For example, reassembly block <b>205</b> may replace the MPLS label in the MPLS header with an MPLS retrieved from header table <b>327</b>. Reassembly block <b>205</b> maps the data portions of the three 64-byte chunks into one packet payload as illustrated in <figref idref="DRAWINGS">FIG. 46</figref>. As the data portion of the various 64-byte chunks pass through reassembly block <b>205</b>, reassembly block <b>205</b> calculates a CRC on the data such that reassembly block <b>205</b> checks the final composite CRC with the CRC found in the last 64-byte chunk. The first part of the resulting MPLS packet can be output from reassembly block <b>205</b> at the same time that later 64-byte chunks for the packet are being received onto reassembly block <b>205</b>. The resulting MPLS packet (MPLS header, and 160 bytes of packet data) is output to the framer of the egress line card via outgoing SPI-4 interface block <b>206</b>.</p>
<p id="h-0016" num="0000">Reassembly “On-The-Fly”:</p>
<p id="p-0205" num="0204">Where a segmented packet is received on an egress line card in the form of a plurality of individual cells (for example AAL5 cells), and where the data payloads of the individual cells are to be reassembled into the original packet, the data payloads of the individual cells are buffered in payload memory before any reassembly is done. Rather than doing reassembly before the cells are buffered, reassembly in the MS-SAR <b>200</b> is done on a per output port basis as the cells for a flow are being output (i.e., on-the-fly) from the egress MS-SAR. A packet being reassembled is not necessarily reassembled in the sense that the entire reassembled packet exists in reassembled form in reassembly block <b>205</b>. Rather the individual 64-byte chunks making up the packet are processed by reassembly block <b>205</b> one at a time. It is, for example, possible that a first part of the packet has already passed out of the reassembly block <b>205</b> before the last part of the packet has been read out of payload <b>204</b>.</p>
<p id="p-0206" num="0205">In accordance with one embodiment, a “reassembly context” is maintained for each reassembly process going on. A reassembly context may, for example, include: 1) a 32-bit partial CRC value maintained for a reassembly process taking place on an output port, and 2) a 16-bit partial (i.e., running) packet length byte count (count of the total number of bytes received for the reassembly process taking place on the output port, including any padding bytes and any trailer bytes). Rather than maintaining such a reassembly context for each of the many flows coming into the egress MS-SAR (it is, for example, possible that each incoming flow would be AAL5 cells requiring reassembly), reassembly is done on a per output port basis after buffering in payload memory <b>217</b>, thereby reducing the maximum number of reassembly contexts that have to be maintained to one per output port. There is at most one such packet reassembly process going on for each of the output ports that is configured and active. Reducing the number of reassembly contexts to be stored reduces the amount of memory necessary and thereby reduces line card costs.</p>
<p id="h-0017" num="0000">Segmentation “On-The-Fly”:</p>
<p id="p-0207" num="0206">A packet received onto an ingress line card may, in accordance with an adaptation layer protocol, require segmentation into a plurality of pieces, where each of the pieces is the data payload of an individual cell. The AAL5 protocol is an example of one such protocol. The segmenting is done so that the individual cells can later be reassembled into the original packet. Rather than storing such a packet into payload memory, retrieving the packet, and then segmenting it as it is sent out to the switch fabric, segmentation in ingress MS-SAR <b>125</b> is done on a per input port basis as flows are received (i.e., on-the-fly) onto the ingress MS-SAR. Segmentation, as the term is used here, encompasses the one-by-one processing of segments of a packet such that the processed segments include information required by the segmentation protocol. A segmentation block may, for example, output a processed segment before the last part of the packet has even been received by the segmentation block.</p>
<p id="p-0208" num="0207">In accordance with one embodiment, a segmentation context is maintained for each segmentation process going on. A segmentation context may, for example, include a 32-bit CRC value and a 16-bit packet byte count value. Because a packet to be segmented is received onto segmentation block <b>203</b> in segments, and because segmentation block <b>203</b> processes these segments one by one, the segmentation engine maintains a partial 32-bit CRC value for the packet and a partial packet byte count value. As each segment is processed, segmentation block <b>203</b> updates the partial CRC value and partial packet byte count value. After the last segment has been received onto the segmentation block as indicated by the EOP bit of the segment, then the partial CRC value is the complete CRC value for the packet. Similarly, the partial packet byte count value contains the number of bytes in the packet. The 32-bit complete CRC value and the 16-bit packet byte count value are included by segmentation block <b>203</b> into the AAL5-like trailer that the segmentation block appends to the last 64-byte chunk for the packet. Rather than maintaining such a segmentation context for each of the many flows going out of the ingress MS-SAR (it is, for example, possible that each outgoing flow is to be in the form of AAL5 cells), this segmentation process is done before buffering on a per input port basis, thereby reducing the maximum number of segmentation contexts that have to be maintained to one per input port. There is at most one such packet segmentation process going on for each of the input ports that is configured and active. Reducing the number of segmentation contexts to be stored reduces the amount of memory necessary and thereby reduces line card costs. If a separate counter or separate CRC engine is provided for each segmentation process, then reducing the number of segmentation processes going on at one time further reduces costs.</p>
<p id="h-0018" num="0000">Multiple Data Path Chips to Increase Throughput Rate:</p>
<p id="p-0209" num="0208"><figref idref="DRAWINGS">FIG. 48</figref> illustrates a novel aspect wherein MS-SAR functionality is partitioned into a control integrated circuit and a data path integrated circuit such that system throughput can be increased by using multiple data path integrated circuits. This increase in system throughput is accomplished without having to redesign either the data path integrated circuit or the control integrated circuit. The data path integrated circuit and the control integrated circuit therefore make a versatile chip set. Where a lower throughput is required, cost is reduced by using just one data path integrated circuit with one control integrated circuit. Where a higher throughput is required, multiple data path integrated circuits are used with one control integrated circuit. Accordingly, the very same data path and control integrated circuits are useful for a wide range of throughput applications. As a result, larger production runs of each integrated circuit is likely and an associated reduction in per part cost is expected.</p>
<p id="p-0210" num="0209"><figref idref="DRAWINGS">FIG. 48</figref> illustrates a line card <b>500</b> having a first MS-SAR <b>501</b> configured in the ingress mode and a second MS-SAR <b>502</b> configured in the egress mode. Network information passing from fiber optic cable <b>503</b> to the switch fabric passes through optics module <b>504</b>, serdes <b>505</b>, framer/mapper <b>506</b> and classification engine <b>507</b> before it reaches ingress MS-SAR <b>501</b>. In an egress path, network information passes from egress MS-SAR <b>502</b>, through framer/mapper <b>506</b>, serdes <b>508</b> and optics module <b>509</b> to fiber optic cable <b>510</b>. The optics/serdes/framer circuitry of <figref idref="DRAWINGS">FIG. 48</figref> is similar to the corresponding circuitry of <figref idref="DRAWINGS">FIG. 5</figref>, except that the circuitry in <figref idref="DRAWINGS">FIG. 48</figref> can receive from and output to fiber optic cables <b>503</b> and <b>510</b> are higher data throughout rates. For example, where line card <b>101</b> of <figref idref="DRAWINGS">FIG. 5</figref> may receive and output at OC-192 line rates (about 10 gigabits per second), line card <b>500</b> of <figref idref="DRAWINGS">FIG. 48</figref> may receive and output at OC-768 line rates (about 40 gigabits per second).</p>
<p id="p-0211" num="0210">How the partitioning of MS-SAR functionality facilitates handling higher data throughput rates is explained in connection with ingress MS-SAR <b>501</b> of <figref idref="DRAWINGS">FIG. 48</figref>. Ingress MS-SAR <b>501</b> includes a distribution integrated circuit <b>511</b>, a control integrated circuit <b>512</b>, four data path integrated circuits <b>513</b>-<b>516</b>, and one aggregation integrated circuit <b>517</b>. Control integrated circuit <b>512</b> includes the circuitry shown in <figref idref="DRAWINGS">FIG. 10</figref> within dashed line <b>213</b>. Each of the data path integrated circuits <b>513</b>-<b>516</b> includes the circuitry shown in <figref idref="DRAWINGS">FIG. 10</figref> within dashed line <b>212</b>. Although per flow queue block <b>207</b> in the embodiment of <figref idref="DRAWINGS">FIG. 10</figref> has only one control interface for sending and receiving enqueue and dequeue commands, the control integrated circuit <b>512</b> of the embodiment of <figref idref="DRAWINGS">FIG. 48</figref> has four such interfaces. Accordingly, ingress control integrated circuit <b>512</b> of <figref idref="DRAWINGS">FIG. 48</figref> is coupled to data path integrated circuits <b>513</b>-<b>516</b> via control buses <b>518</b>-<b>521</b>, respectively.</p>
<p id="p-0212" num="0211">Operation of the circuit of <figref idref="DRAWINGS">FIG. 48</figref> is explained in connection with an example of a high-speed stream of multiple packets being received from fiber optic cable <b>503</b> at OC-768 rates. The packets pass, one by one, through optics module <b>504</b>, serdes <b>505</b>, framer/mapper <b>506</b>, and classification engine <b>507</b> to distribution integrated circuit <b>511</b>. Distribution integrated circuit <b>511</b> receives the packets from classification engine <b>507</b> via an SPI-4-like bus <b>522</b>. This bus <b>522</b> is like an SPI-4 bus, except that it is capable of operating at 40 gigabits per second rates. Each packet is framed by a start delimiter and an end delimiter.</p>
<p id="p-0213" num="0212">Distribution integrated circuit <b>511</b> distributes each incoming packet to one of the four data path integrated circuits <b>513</b>-<b>516</b>, the particular data path integrated circuit being chosen so as to distribute data path processing load evenly among the multiple data path integrated circuits. Any of many known load-balancing algorithms can be employed. Distribution integrated circuit <b>511</b> only outputs complete packets. In addition to distributing load, distribution integrated circuit <b>511</b> includes a sequence number along with each packet. In one embodiment, there is a sequence of sequence numbers for each flow. Distribution integrated circuit <b>511</b> employs a lookup block like lookup block <b>202</b> of <figref idref="DRAWINGS">FIG. 10</figref>. Lookup information is provisioned by the CPU beforehand as explained above in connection with lookup block <b>202</b> of <figref idref="DRAWINGS">FIG. 10</figref>. Distribution integrated circuit <b>511</b> receives a packet, identifies the flow, increments a sequence number for that flow, and adds the sequence number to the packet. Each respective packet of a flow therefore carries a sequence number that is one greater than the sequence number of the previous packet in that flow.</p>
<p id="p-0214" num="0213"><figref idref="DRAWINGS">FIG. 49</figref> is a diagram of a packet as output by distribution integrated circuit <b>511</b>. The packet includes a data portion <b>523</b> and a header portion <b>524</b>. The packet is framed by a start delimiter <b>525</b> and an end delimited <b>526</b>. The sequence number <b>527</b> added by distribution integrated circuit <b>511</b> is disposed between the start delimited <b>525</b> and the packet header <b>524</b>.</p>
<p id="p-0215" num="0214">The various packets, after being marked with sequence numbers, flow into the various data path integrated circuits <b>513</b>-<b>516</b>. The lookup block of the data path integrated circuit that receives the packet determines the flow ID of the packet as described above in connection with the embodiment of <figref idref="DRAWINGS">FIG. 10</figref>. In the embodiment of <figref idref="DRAWINGS">FIG. 48</figref>, the lookup block also extracts the packet sequence number. Both the flow ID and the packet sequence number are then supplied to the control integrated circuit <b>512</b> via the enqueue mechanism. Control integrated circuit <b>512</b> is therefore aware of which packets of which flows have been received onto which data path integrated circuits. In addition to performing the other traffic management, policing, shaping, and metering functions described above, control integrated circuit <b>512</b> issues dequeue commands to ensure that the various packets of a flow are supplied to aggregation integrated circuit <b>517</b> in the same order in which they were received onto distribution integrated circuit <b>511</b>. To do this, control integrated circuit <b>512</b> maintains a “packet queue” for each flow.</p>
<p id="p-0216" num="0215"><figref idref="DRAWINGS">FIGS. 50 and 51</figref> illustrate the building of such a packet queue. In <figref idref="DRAWINGS">FIG. 50</figref>, the packets of a flow (FID<b>1</b>) were sequence numbered P<b>1</b>, P<b>2</b>, P<b>3</b> and so forth by distribution integrated circuit <b>511</b>. Control integrated circuit <b>512</b> maintains a head pointer and a tail pointer for this packet queue. The first packets P<b>1</b>, P<b>2</b>, P<b>3</b> in this flow have already been dequeued and sent through the aggregation integrated circuit <b>517</b> to the switch fabric. Consequently they do not appear in the packet queue. The next packet to be dequeued is packet P<b>5</b>. Control integrated circuit <b>512</b> will dequeue the various 64-byte chunks of this packet by dequeuing a per flow queue for this packet as explained above in connection with <figref idref="DRAWINGS">FIG. 10</figref>. In the example of <figref idref="DRAWINGS">FIG. 50</figref>, packet P<b>7</b> of flow #<b>1</b> has not been queued in the packet queue. Accordingly, control integrated circuit <b>512</b> will not dequeue packet P<b>8</b>, but rather will wait until packet P<b>7</b> has been queued.</p>
<p id="p-0217" num="0216"><figref idref="DRAWINGS">FIG. 51</figref> illustrates the packet queue after packet P<b>7</b> has been queued. Note that packet P<b>7</b> has been linked into the queue in its proper place before packet P<b>8</b> such that the dequeueing of the linked list will result in the packets of the flow being dequeued in the proper order. In the example of <figref idref="DRAWINGS">FIG. 51</figref>, packet P<b>5</b> has been dequeued, and a new packet for this flow, packet P<b>10</b>, has been received and queued.</p>
<p id="p-0218" num="0217">Control integrated circuit <b>512</b> dequeues the various packets in accordance with this scheme so that the various packets of each flow are output to aggregation integrated circuit <b>517</b> in the correct order. Aggregation integrated circuit <b>517</b> combines the packets in the order it receives them into one stream. That one stream is output to the switch fabric via SPI-4-like bus <b>528</b>. Bus <b>528</b> is like an SPI-4 bus, except that it is capable of operating at 40 gigabits per second rates. It is therefore seen that one high throughput rate data path (40 gigabits/second) coming into the line card is processed using four lower throughput rate data path integrated circuits (10 gigabits/second), and that the outputs of the four lower throughput rate data path integrated circuits are combined to form one higher throughput rate data path (40 gigabits/second) to the switch fabric.</p>
<p id="p-0219" num="0218">In the embodiment of <figref idref="DRAWINGS">FIG. 48</figref>, the incoming data path having the increased throughput rate is being controlled by only one control integrated circuit <b>512</b>. The associated increase in processing required of control integrated circuit <b>512</b> may result in difficulties in accessing external memory.</p>
<p id="p-0220" num="0219"><figref idref="DRAWINGS">FIG. 52</figref> is a diagram of an external memory device <b>529</b> that is coupled to a control integrated circuit. External memory device <b>529</b> may, for example, be external memory <b>225</b> of <figref idref="DRAWINGS">FIG. 10</figref>. External memory device <b>529</b> stores two types of information, information #<b>1</b> and information #<b>2</b>, both of which must be accessed within a particular amount of time related to the rate of incoming information. Where the control integrated circuit is clocked by a clock signal, this particular amount of time can be referred to as four clock periods. In the example to the left of <figref idref="DRAWINGS">FIG. 52</figref>, each piece of information can be accessed in two clock periods. Both pieces of information are stored in the same external memory device requiring one to be accessed before the other. A total of four clock periods is therefore required to access both pieces of information.</p>
<p id="p-0221" num="0220">If the circuit of <figref idref="DRAWINGS">FIG. 48</figref> is now employed to handle OC-768 line rate information coming in from fiber optic cable <b>503</b>, then this same information (information #<b>1</b> and information #<b>2</b>) must be accessed in a smaller amount of time. Consider the example where both information #<b>1</b> and information #<b>2</b> must now be accessed within two clock periods. A memory may not be available that has fast enough access times to handle the accessing required within this fewer number of clock periods.</p>
<p id="p-0222" num="0221">In accordance with one novel aspect, two external memories are used. Information #<b>1</b> is stored in the first external memory <b>530</b> and information #<b>2</b> is stored in second external memory <b>531</b>. The two external memories are accessed at the same time in parallel. If external memories <b>530</b> and <b>531</b> are the same type of external memory <b>529</b>, then these external memories have access times of two clock periods and both information #<b>1</b> and information #<b>2</b> are accessed within the required two clock periods. It is to be understood, of course, that the four and two in the example are used only to illustrate the technique of accessing memories in parallel to facilitate handling higher data throughput rates. The technique here is not limited to the numbers in this example. An example of information #<b>1</b> is cell count information stored in the embodiment of <figref idref="DRAWINGS">FIG. 10</figref> in PFQ STAT memory <b>225</b>. An example of information #<b>2</b> is packet count information stored in the embodiment of <figref idref="DRAWINGS">FIG. 10</figref> in PFQ STAT memory <b>225</b>. These two types of information are, in one embodiment of <figref idref="DRAWINGS">FIG. 48</figref>, stored in different external memory devices.</p>
<p id="p-0223" num="0222">Although the operation of the embodiment of <figref idref="DRAWINGS">FIG. 48</figref> is described in connection with a flow of packets, the same process is followed to handle flows of cells. The embodiment of <figref idref="DRAWINGS">FIG. 48</figref> handles all the application types of <figref idref="DRAWINGS">FIGS. 7 and 8</figref>. It is also to be understood that the functionality of the circuit of <figref idref="DRAWINGS">FIG. 48</figref> can be rearranged. For example, the distribution chip and the control integrated circuit may be combined onto one integrated circuit such that only one lookup block is required. Alternatively, the lookup function may be performed on the distribution chip such that results of the lookup are forwarded to the control integrated circuit. Various rearrangements of the functionality of <figref idref="DRAWINGS">FIG. 48</figref> are possible without losing the benefit of the novel partitioning of the MS-SAR.</p>
<p id="h-0019" num="0000">Backpressuring Using Serial Bus:</p>
<p id="p-0224" num="0223">A router <b>600</b> involves a first line card <b>601</b> and a second line card <b>601</b>. Each of the first and second line cards involves an MS-SAR operating in the ingress mode and an MS-SAR operating in the egress mode. The egress MS-SAR <b>603</b> on the second line card can become endangered of being overloaded if, for example, the ingress MS-SAR <b>604</b> on the first line card continues to send network information for a flow to the egress MS-SAR <b>603</b> on the second line card, but the egress MS-SAR <b>603</b> on the second line card is prevented from outputting that information, for example due to congestion at the framer <b>605</b>. Consequently, more and more of the network information for the flow will end up having to be buffered by the egress MS-SAR <b>603</b> of the second line card (buffered in payload memory).</p>
<p id="p-0225" num="0224">In one novel aspect, the ingress and egress MS-SAR devices <b>604</b> and <b>606</b> of the first line card <b>601</b> are linked by a serial bus <b>607</b> on the first line card, and the ingress and egress MS-SAR devices <b>603</b> and <b>608</b> of the second line card <b>602</b> are linked by a serial bus <b>609</b> on the second line card. If the egress MS-SAR <b>603</b> of the second line card is in danger of becoming overloaded, then the egress MS-SAR <b>603</b> of the second line card sends an indication of this situation to the ingress MS-SAR <b>608</b> of the second line card via the serial bus <b>609</b> on the second line card. In one embodiment, it is the per flow queue block of the egress MS-SAR <b>603</b> that detects that the size of the free buffer queue has decreased to an undesirably low level. The per flow queue block is therefore coupled to the serial bus <b>609</b> as illustrated in <figref idref="DRAWINGS">FIG. 53</figref>.</p>
<p id="p-0226" num="0225">The ingress MS-SAR <b>608</b> of the second line card receives this indication from serial bus <b>609</b> and relays the indication to the first line card <b>601</b> by outputting a special status switch cell <b>611</b>. The special status switch cell <b>611</b> is transported across the switch fabric <b>610</b> to the egress MS-SAR <b>606</b> of the first line card. The egress MS-SAR <b>606</b> of the first line card detects the special status switch cell, and relays the indication of the situation to the ingress MS-SAR <b>604</b> of the first line card via the serial bus <b>607</b> on the first line card. In one embodiment, it is the segmentation block that detects the special status switch cell. The segmentation block is therefore coupled to the serial bus <b>607</b> as illustrated in <figref idref="DRAWINGS">FIG. 53</figref>.</p>
<p id="p-0227" num="0226">In response to receiving this indication from serial bus <b>607</b>, the ingress MS-SAR <b>604</b> on the first line card slows or stops its outputting of the information that is overburdening the egress MS-SAR <b>603</b> on the second line card. In one embodiment, the output scheduler is able to slow or stop the outputting of information that is overburdening egress MS-SAR <b>603</b>. Consequently, the serial bus <b>607</b> is coupled to the output scheduler block of ingress MS-SAR <b>604</b> as illustrated in <figref idref="DRAWINGS">FIG. 53</figref>.</p>
<p id="h-0020" num="0000">Incoming SPI-4 Interface Block in More Detail:</p>
<p id="p-0228" num="0227"><figref idref="DRAWINGS">FIG. 54</figref> is a block diagram of one particular embodiment <b>800</b> of incoming SPI-4 interface block <b>201</b> of <figref idref="DRAWINGS">FIG. 10</figref>. Incoming SPI-4 interface block <b>800</b> includes an input control block <b>801</b>, an input FIFO block <b>802</b>, an output control block <b>803</b>, a port calendar block <b>804</b>, a CPU interface block <b>805</b>, and a test multiplexer block <b>806</b>. As illustrated in <figref idref="DRAWINGS">FIG. 55</figref>, input control block <b>801</b> includes a single-data rate (SDR) pack block <b>807</b>, a receive (RX) state machine block <b>808</b>, and a parity checker block <b>809</b>. As illustrated in <figref idref="DRAWINGS">FIG. 56</figref>, output control block <b>803</b> includes a per port control block <b>810</b>, an SPI table SRAM block <b>811</b>, a data FIFO <b>812</b>, a control FIFO <b>813</b>, an output control block <b>814</b>, and a free buffer list block <b>815</b>.</p>
<p id="p-0229" num="0228">In operation, incoming SPI-4 interface block <b>800</b> receives 16-bit double data rate data at approximately 10 gigabits per second that is transmitted to the MS-SAR in accordance with the SPI-4, phase II, specification. Incoming SPI-4 interface block <b>800</b> packs the incoming data into 64-bit wide words, extracts in-band port control information (input port addresses, SOP, EOP, and error control codes), and then passes the data along with the extracted control information to lookup block <b>202</b> (see <figref idref="DRAWINGS">FIG. 10</figref>). SDR pack block <b>807</b> converts the 16-bit DDR data words into 32-bit SDR data words. The one-bit DDR control bit is converted into a two-bit SDR control word. The two-bit control word indicates which 16-bit word within a 32-bit word is the control word. Based on the two-bit control word, RX state machine <b>808</b> extracts the in-band port address, start/end-of-packet indication and error-control code from the data and control path and packs the data into 64-bit data words and pushes the 64-bit data and the 16-bit control into 80-bit wide input FIFO block <b>802</b>.</p>
<p id="p-0230" num="0229">Per-port control block <b>810</b> of <figref idref="DRAWINGS">FIG. 56</figref> accumulates data on a per port basis and queues the control information into control FIFO <b>813</b> when it has accumulated a complete data buffer in data FIFO <b>812</b>. Output control block <b>814</b> reads from control FIFO <b>813</b> and from data FIFO <b>812</b> and outputs the related data and control information to lookup block <b>202</b>. As the data flows into per port control block <b>810</b>, parity checker block <b>809</b> calculates four-bit Diagonal Interleaved Parity (DIP-4) and reports an error if the calculated DIP-4 is not equal to the one received with the control word.</p>
<p id="p-0231" num="0230">More detailed operation of the various blocks of <figref idref="DRAWINGS">FIGS. 54-56</figref> is now described. SDR pack block <b>807</b> of <figref idref="DRAWINGS">FIG. 55</figref> converts the 16-bit 400 MHz DDR data into 32-bit 400 MHz SDR data. The RDCTL control signal is used to determine whether the high byte or the low byte of the 32-bit SDR data is control information. The RX state machine block <b>808</b> of <figref idref="DRAWINGS">FIG. 55</figref> receives 32-bit words from SDR pack block <b>807</b> along with a two-bit indication of data or control. RX state machine <b>808</b> extracts the in-band control information and packs the data into 64-bit wide words. It also sends the data and control words to parity checker block <b>809</b> to check parity.</p>
<p id="p-0232" num="0231">The incoming SPI-4 interface block <b>800</b> expects the control word be sixteen bits and to have a particular format. Bits <b>0</b>-<b>3</b> are a DIP-4 (Diagonal Interleaved Parity) value. Bits <b>4</b>-<b>11</b> are an 8-bit port address. Bit <b>12</b> is a start-of-packet (SOP) bit. Bits <b>13</b> and <b>14</b> are end-of-packet status bits. Bit <b>15</b> is a control word type. Such a 16-bit control word, when present in the data path, is aligned such that its MSB is sent on the MSB of the incoming data lines. A control word that separates two adjacent data burst transfers may contain status information pertaining to the previous transfer, the following transfer, or both transfers.</p>
<p id="p-0233" num="0232">RX state machine block <b>808</b> operates in accordance with a state transition table, where transitions are based on the types of control words received. Parity checker block <b>809</b> calculates DIP-4 parity and compares the calculated parity with the one received in the control word.</p>
<p id="p-0234" num="0233">Input FIFO block <b>802</b> (see <figref idref="DRAWINGS">FIG. 54</figref>) is a 256×80 bit dual-port FIFO running at 200 MHz that absorbs the incoming data and control information from input control block <b>801</b>. Each 80-bit entry includes an SOP bit, an EOP bit, an SOB bit, an EOB bit, an error bit, a parity error bit, on reserved bit, five PID bits, three byte valid bits, and 64 data bits. The write operation is controlled by receive state machine <b>808</b>. Read operation is controlled by the per-port control block <b>810</b> (see <figref idref="DRAWINGS">FIG. 56</figref>). Per-port control block <b>810</b> reads from input FIFO block <b>802</b> as long as input FIFO block <b>802</b> is not empty.</p>
<p id="p-0235" num="0234">For each new data burst read from FIFO <b>802</b> (a burst of data is marked with SOP or SOB), per-port control block <b>810</b> obtains a pointer to a free buffer in data FIFO <b>812</b> from the free buffer list block <b>815</b>. Free buffer list block <b>815</b> includes a 128×10 bit single port SRAM containing pointers to available locations in data FIFO <b>812</b>. Per-port control block <b>810</b> also obtains temporary control information from SPI table block <b>811</b>. SPI table block <b>811</b> is a table of sixty-four entries, one for each input port. The table contains control information for the incoming data burst for each port. Each 32-bit entry in SPI table <b>811</b> includes one SOP bit, one EOP bit, one error bit, one parity error bit, six PID bits, three byte valid bits, seven cell count bits, ten pointer bits, and two reserved bits.</p>
<p id="p-0236" num="0235">After obtaining a pointer to a free buffer and after obtaining associated control information from SPI table block <b>811</b>, per-port control block <b>810</b> accumulates the incoming data into the pointed to 80-byte buffer in data FIFO <b>812</b> (accumulates on a per-port basis, one buffer per port). The associated control information is only pushed into the control FIFO <b>813</b> when the buffer is full or when an EOP is received.</p>
<p id="p-0237" num="0236">Data FIFO <b>812</b> is a dual-port FIFO that implements <b>128</b> buffers of 80 bytes each. The amount of data stored in a buffer is sixty-four bytes in ingress mode, and eighty bytes in egress mode when operating with a packet-based switch fabric. When operating in egress mode with a cell-based switch fabric, each incoming switch cell is a complete packet (i.e., there is an EOP for each incoming switch cell). Each buffer is used to store either seventy-two bytes or eighty bytes, depending on whether the switch header is eight or sixteen bytes long. When data from an 80-byte buffer is sent out to lookup block <b>202</b>, output control block <b>814</b> returns the pointer to the buffer back to the end of the free buffer list stored in free buffer list block <b>815</b>.</p>
<p id="p-0238" num="0237">Port calendar block <b>804</b> receives per-port FIFO status information from segmentation block <b>203</b> via line SEG_SPII_FULL. Port calendar block <b>804</b> encodes this status as a two-bit status word and sends the status word back to the transmit device at the rate of one port per cycle in round robin fashion based on the port calendar. The “11” status word is reserved for in-band framing. A DIP-2 odd parity is sent at the end of each complete sequence, immediately before the “11” framing pattern. When memory usage exceeds fifty percent (i.e., more than 64 data buffers are used), then the incoming SPI-4 interface block <b>800</b> sends a FULL indication to all incoming ports. This FULL indication can also be triggered if a FULL indication arrives from the lookup block <b>202</b>. The NOT-FULL indication is sent when the shared memory usage falls below twenty-five percent (i.e., less than 32 data buffers are used).</p>
<p id="p-0239" num="0238">The CPU can write to any location in any memory within incoming SPI-4 interface block <b>800</b> by writing data to be written into registers in CPU interface block <b>805</b> and then writing an appropriate opcode with an address into a command register in CPU interface block <b>805</b>. Alternatively, the CPU can read from any location in any memory by writing an appropriate opcode and address into the command register. The CPU interface block <b>805</b> reads the identified location and returns the data stored there to data registers in the CPU interface block <b>805</b>. The CPU can then read the data from the data registers. The CPU can also cause the CPU interface block <b>805</b> to perform various diagnostic functions by writing particular opcodes into the command register. For example, a multiplexer in the test multiplexer block <b>806</b> can be controlled to couple a selected internal node in incoming SPI-4 interface block <b>800</b> to a particular output pin of the MS-SAR.</p>
<p id="h-0021" num="0000">Segmentation Block <b>203</b> in More Detail:</p>
<p id="p-0240" num="0239"><figref idref="DRAWINGS">FIG. 57</figref> is a block diagram of one particular embodiment <b>900</b> of segmentation block <b>203</b> of <figref idref="DRAWINGS">FIG. 10</figref>. Segmentation block <b>900</b> includes an L2 align block <b>901</b>, an L2 CRC block <b>902</b>, an align pipe block <b>903</b>, an input phase block state machine <b>904</b>, a free buffer list block <b>905</b>, a segmentation table and statistics SRAM block <b>907</b>, a data SRAM block <b>908</b>, a CRC generator block <b>909</b>, a CRC SRAM block <b>910</b>, an output phase state machine block <b>911</b>, a control queue FIFO block <b>912</b>, a CPU interface block <b>913</b>, a per flow queue-to-segmentation interface (PFQ_SEG) block <b>914</b>, a segmentation-to-scheduler interface (SEG_SCH) block <b>915</b>, a pack_<b>128</b> block <b>916</b>, and a segmentation test multiplexer (SEG_TST) block <b>917</b>.</p>
<p id="p-0241" num="0240">There is at least one 64-byte buffer for each input port (there are actually eighty such blocks whereas there are 64 possible input ports) in data SRAM block <b>908</b>. There is one 74-bit entry in control queue FIFO <b>912</b> for each of the 64-byte buffers in data SRAM block <b>908</b>. Consequently, there are eighty 74-bit entries in control queue FIFO <b>912</b>. Control queue FIFO is a dual-port SRAM. As bursts of data flow into segmentation block <b>900</b> from lookup block <b>202</b> (see <figref idref="DRAWINGS">FIG. 10</figref>), the incoming data is stored in data SRAM block <b>908</b> whereas control information for the data is stored in control queue FIFO <b>912</b>. There is a one-to-one correspondence between the 64-byte buffers in data SRAM <b>908</b> and the entries in control queue FIFO <b>912</b>. Free buffer list block <b>905</b> stores a pointer that points to one pair of a 64-byte buffer in data SRAM <b>908</b> and its associated 74-bit entry in control queue FIFO <b>912</b>. The pointer indicates whether the buffer is available or not.</p>
<p id="p-0242" num="0241">One 74-bit entry in control queue FIFO <b>912</b> includes: 1) seven bits for the port ID, 2) four bits for the type of incoming traffic on the port, 3) one SOP bit which if set indicates the start of packet, 4) one EOP bit which if set indicates the end of packet, 5) one BAD bit which if set indicates an error condition and that the data should be discarded, 6) one CLP (Cell Loss Priority) bit which is valid only for ATM traffic, 7) one EFCI (Explicit Forced Congestion Indication) bit which is valid only for ATM traffic, 8) one OAM (Operation, Administration and Maintenance) bit, 9) one LAST AAL5 bit which if set indicates the last chunk of an AAL5 group of chunks, 10) one AAL5 TRAILER bit which indicates that the data in the current buffer has an associated trailer, 11) six “cell length” bits (also called “chunk length” bits) which indicate the number of valid bytes in the 64-byte chunk, 12) seven PTR bits which indicate the start address of the buffer in data SRAM <b>908</b>, 13) three reserved bits, 14) twenty FID bits which indicate the flow ID of the incoming data on the port, 15) sixteen “packet length” bits which indicate number of bytes in the packet (only valid for packet traffic), and 16) three QOS (Quality Of Service) bits that indicate a quality of service.</p>
<p id="p-0243" num="0242">Segmentation table and statistics SRAM block <b>907</b> actually includes two dual-port memories, a segmentation table memory and a statistics memory. For each input port, there is a 36-bit entry in the segmentation table memory that contains per port parameters. Each segmentation table entry includes: 1) one SOP bit which if set indicates a start of packet burst has been received for the port, 2) one EOP bit which if set indicates that an end of packet burst has been received for the port, 3) one BAD bit which if set indicates an error condition has been detected and that the associated data should be discarded, 4) seven PTR bits which indicate the start address of the associated 64-byte chunk in data SRAM <b>908</b>, 5) the sixteen “packet length” bits which are used to keep track of the total number of bytes of the incoming packet that have been received on the port, 6) the six “cell length” bits (also called “chunk length” bits) which are used to keep track of the total number of bytes received for the associated 64-byte buffer in data SRAM <b>908</b>, and 7) four reserved bits. The “cell length” value indicates how big the chunk is (in bytes) that is present in the associated 64-byte buffer. There are sixty-four such 36-bit entries, one for each of the sixty-four input ports.</p>
<p id="p-0244" num="0243">For each input port, there is also an 80-bit entry in the statistics memory. Each statistics table entry includes: 1) a 32-bit “packet received” value which indicates the number of packets received on that port, and 2) a 48-bit “data received” value which indicates the number of bytes of data received on that port. There are sixty-four such entries, one for each input port.</p>
<p id="p-0245" num="0244">Information coming into the MS-SAR is output from the incoming SPI interface block <b>201</b> in bursts. Each burst is a multiple of sixteen bytes. Some bursts can be longer than others. Each burst is received associated with one of the sixty-four possible input ports. The incoming SPI interface block <b>201</b> adds a start of burst (SOB) bit to the beginning of the burst, and adds an end of burst (EOB) bit to the end of the burst. The data of an MPLS packet or an ATM cell may be carried in multiple such bursts. Segmentation block <b>900</b> receives these bursts from lookup block <b>202</b>. A burst from one input port can be followed by a burst from a different input port such that multiple bursts that comprise the data for one packet are received interspersed with intervening bursts for other packets.</p>
<p id="p-0246" num="0245">In normal operation, if there is a 64-byte buffer available in data SRAM <b>908</b> to receive an incoming burst, then free buffer list block <b>905</b> outputs a seg_lut_rdy signal <b>918</b> to lookup block <b>202</b>. Input phase state machine <b>904</b> waits for a lut_seg_valid signal <b>919</b> to be returned from the lookup block <b>202</b>. The returned lut_seg_valid signal <b>919</b> indicates that there is valid control information and data information on the 64-bit bus <b>318</b> from lookup block <b>202</b>. In this example, the lut_seg_valid signal <b>919</b> being asserted indicates that all signals whose signal names start with lut_seg are valid. Sixty-four bits of data are clocked in at once from lines lut_seg_data[63:0], the number of valid bytes in the sixty-four bits being indicated by lut_seg_byte_v[2:0].</p>
<p id="p-0247" num="0246">As information is received from a given input port, the values in the segmentation table entry associated with the input port and values in the statistics table associated with the input port are updated. For example, as explained above, the segmentation table includes a six-bit “cell length” (also called “chunk length”) field for storing the number of bytes in the chunk of data that is stored in the current 64-byte buffer in data SRAM <b>908</b>. Because the data from multiple bursts can be placed into the current 64-byte buffer in data SRAM <b>908</b>, and because traffic from other ports can be received onto the segmentation block <b>900</b> between these multiple bursts, segmentation block <b>900</b> keeps track of the segmentation table information and the statistics information between bursts. Accordingly, the first time a burst is received for a 64-byte buffer for a particular input port, input phase state machine <b>904</b> writes initial information into the entry in segmentation table memory. The SOP bit, for example, is set whereas the EOP bit is not. The “packet length” field and the “cell length” field are set to zero. If, on the other hand, a burst has already been received for that particular input port, then input phase state machine <b>904</b> reads the per-port parameters from the entries in the segmentation table memory <b>907</b> for that input port. Similarly, input phase state machine <b>904</b> reads the statistics in the statistics memory <b>907</b> for that input port. Input phase state machine <b>904</b> reads these values when the lut_seg_valid signal <b>919</b> is received from lookup block <b>202</b>. More particularly, when the lut_seg_valid signal <b>919</b> is received from the lookup block <b>202</b>, the input phase state machine <b>904</b>: a) reads from the free buffer list SRAM block <b>905</b> to obtain a pointer to an available 64-byte buffer in data SRAM block <b>906</b>, b) uses the port ID received from lookup block <b>202</b> to read segmentation table SRAM <b>907</b> to get the per-port parameters for that port, and c) uses the port ID received from lookup block <b>202</b> to read the statistics SRAM <b>907</b> to get the statistics for that port. The per-port parameters received from lookup block <b>202</b> with the burst are compared with those from segmentation table memory <b>907</b>. Error conditions may be set. For example, if two consecutive SOP bursts are received without an intervening EOP burst, then an error has occurred. If an error condition is detected, then the BAD bit in the segmentation table SRAM entry is set to indicate that the associated data is bad and should be discarded.</p>
<p id="p-0248" num="0247">In <figref idref="DRAWINGS">FIG. 57</figref>, input phase state machine <b>904</b> contains a signal labeled cur_xxx. This label represents many signals associated with the current burst. The label prvy_xxx represents many signals associated with the previous burst. One of the current signals cur_xxx is the port ID associated with the current burst. This current port ID signal indicates the last port address processed. The port ID received from the bus <b>318</b> is compared to the current PID to see if the incoming burst is from the same port address. If so, then the data burst is a continuation to the one previously processed, and segmentation table and statistics information already in internal registers in input phase state machine <b>904</b> are used. The segmentation table and statistics SRAM <b>907</b> does not need to be accessed. If, on the other hand, the incoming burst is not from the same port, then the incoming data burst is for a new port ID and new segmentation table and statistics information is to be used. Segmentation table and statistics information for the last processed burst are therefore stored back into the segmentation table and statistics memory <b>907</b> before similar information for port of the new burst is loaded into the registers in the input phase state machine <b>904</b>. There are three sets of internal registers (not shown) in input phase state machine <b>904</b> that store three sets of per-port segmentation table and statistics information: one for the last processed port (i.e. the current parameters); one for the port from lookup block <b>202</b> that comes with the valid signal; and one for the previously serviced port that needs to be written back to the segmentation and statistics memory <b>907</b>.</p>
<p id="p-0249" num="0248">There are two statistics counters in the input phase state machine <b>904</b>, one that counts the number of packets received on the current port (32-bit “packet received” value) and one that counts the number of bytes received on the current port (48-bit “data received” value). The outputs of these counters are kept in the statistics memory <b>907</b> on a per port basis. The running count of bytes received and the number of packets received continue to accumulate and may roll over. The CPU of the router can read the two values at two different times, take the differences between the values at the two times, and thereby calculate how much traffic is being received on each port. The CPU reads these values via the CPU interface <b>913</b>.</p>
<p id="p-0250" num="0249">There is at most one segmentation process going on per port. Incoming burst data for a port is accumulated into a corresponding one of the 64-byte buffers in data SRAM <b>908</b>. The maximum amount of data that can be stored in the 64-byte buffer (either 48, 56, or 64 bytes) is determined by the application type of the flow. The 64-byte format is used for packet data. The 48-byte format is used for AAL5 ATM data. The 56-byte format is used for non-AAL5 ATM data. Control information for the data in a 64-byte buffer is queued into a location in queue FIFO <b>912</b> that corresponds to the particular 64-byte buffer. Segmentation table and statistics information is written back to the segmentation table and statistics memory <b>907</b>. Input phase state machine <b>904</b> contains a six-bit data byte counter (not shown) that increments the six-bit “cell length” (also called the “chunk length”) count value (stored in segmentation table memory <b>907</b>) upon receiving each incoming data byte for a 64-byte buffer. When the number of bytes in the 64-byte buffer reaches the maximum amount allowed by the format used, then the data in the 64-byte buffer is ready for transfer to memory manager block <b>204</b>.</p>
<p id="p-0251" num="0250">Input phase state machine block <b>904</b> also contains a 16-bit packet length counter that counts the number bytes in the current packet. The output of this packet length counter is the “packet length” field in the queue FIFO entry. This counter continues counting bytes until the EOP is reached. The output of this counter is incorporated into the AAL5 trailer if such a trailer is to be added.</p>
<p id="p-0252" num="0251">Segmentation block <b>900</b> handles the alignment of data to 64-bit bus <b>318</b> (see <figref idref="DRAWINGS">FIG. 10</figref>) in the situation where lookup block <b>202</b> adds a L2 special header that does not line up with a 64-bit boundary. Align pipe block <b>903</b> is a pipeline used to align control information (including port ID (PID) and flow ID (FID)) so that the control information lines up with the 64-bits of data passing through the L2 align block <b>901</b>. Block <b>902</b> is not used to calculate a CRC for an AAL5 trailer. Rather, block <b>902</b> is used only to calculate the CRC-32 for an L2 header in the special case where a packet is being broken up into multiple AAL5 cells that are being output in the egress mode. In such a case, the CRC bytes in the L2 header are replaced by new CRC bytes calculated by L2 CRC generator <b>902</b>. If no L2 header modification is to be performed, then the data passes to the input phase state machine <b>904</b> via a bypass path such that no alignment is performed.</p>
<p id="p-0253" num="0252">Free Buffer List block <b>905</b> is an 80×7 bit dual port internal SRAM. After power on reset, the CPU initializes the free buffer list using a CPU command called the “Init FBL” command. There are multiple CPU commands. The CPU can cause a CPU command to be performed writing a command opcode for a particular CPU command into a command register in CPU interface block <b>913</b>. CPU interface block <b>913</b> involves a state machine that then carries out the command indicated by the opcode. There are commands by which the CPU can write information into any location in any of the memories within segmentation block <b>900</b> and there are commands by which the CPU can read any location in any of the memories within segmentation block <b>900</b>. In the case of the “Init FBL” opcode, execution of the command takes approximately eighty cycles of the 200 MHz clock. No data passes through the segmentation block <b>900</b> until the initialization is completed.</p>
<p id="p-0254" num="0253">CRC generator block <b>909</b> generates the CRC that covers the PDU (Protocol Data Unit) in the AAL5 format. CRC generator block <b>909</b> actually includes two CRC generators, one CRC-32 engine for 64-bit wide data input, and one CRC-32 engine for 32-bit wide data input. The CRC generator block <b>909</b> uses the port ID to read a partial CRC from CRC SRAM block <b>910</b>. CRC SRAM <b>910</b> is a 65×32 bit dual-port SRAM that stores a partial CRC for each port. The partial CRC is loaded into the CRC-32 engine for 64-bit wide data and the CRC-32 engine for 64-bit wide data calculates the CRC as the data is output to memory manager block <b>204</b>. All the data up to the AAL5 trailer is passed through this CRC-32 engine for 64-bit wide data input. The partial CRC output by this CRC-32 engine is then loaded into the second CRC engine for 32-bit wide data input. Then the four most significant bytes of the AAL5 trailer are sent through the CRC-32 engine for 32-bit wide data (two of these bytes are the packet length determined by the packet length counter of the input phase state machine block <b>904</b>). The resulting CRC output by the CRC-32 engine for 32-bit wide data is then the final CRC for the AAL5 trailer. At the end of a packet, the final CRC is multiplexed out by multiplexer <b>920</b> to be the last four bytes of the AAL5 trailer.</p>
<p id="p-0255" num="0254">Output phase state machine block <b>911</b> sends a seg_mem_available signal <b>921</b> to memory manager block <b>204</b> to indicate that a completed 64-byte buffer is available to transfer. Memory manager block <b>204</b> replies with the mem_seg_ctrl_pop signal <b>922</b> if it is ready to receive the completed 64-byte buffer. When the mem_seg_ctrl_pop signal is received from memory manager block <b>204</b>, the output phase state machine block <b>911</b> reads control queue FIFO <b>912</b> for the control information entry for the available 64-byte buffer, reads the appropriate 64-byte buffer from data SRAM <b>908</b>, and transmits the data from the 64-byte buffer along with the control information to memory manager block <b>204</b>. Data SRAM <b>908</b> is sixty-four bits wide. Individual words of data pass via lines <b>923</b>, through multiplexer <b>924</b>, and to pack <b>128</b> block <b>916</b>. Pack <b>128</b> block <b>916</b> converts two consecutive 64-bit words into one 128-bit word. The 128-bit word is then passed to memory manager block <b>204</b> via lines seg_mem_data[127:0]. There are eight time slots of the global 200 MHz clock that clocks the MS-SAR, the current time slot being indicated by a value timeslot[2:0] received via lines <b>925</b> from a timeslot generator. The output phase state machine block <b>911</b> only outputs information to memory manager block <b>204</b> in one predetermined time slot. Memory manager block <b>204</b> reads the data from a 64-byte buffer in four consecutive reads of the 128-bit bus.</p>
<p id="p-0256" num="0255">As set forth above in connection with <figref idref="DRAWINGS">FIG. 53</figref>, egress MS-SAR <b>603</b> can serially communicate with the segmentation block of an ingress MS-SAR <b>608</b> via a serial bus <b>609</b> such that the ingress MS-SAR <b>608</b> is made to transmit a status cell <b>611</b> through the switch fabric <b>610</b>. The lines pfq_seg_valid, pfq_seg_clk, and pfq_seg_data[2:0] are the serial bus <b>609</b> signals. PFQ_SEG interface block <b>914</b> receives a twelve-bit status cell in serial fashion via this serial bus. When a status cell is pending in the PFQ_SEG interface block <b>914</b>, the PFQ_SEG interface block <b>914</b> generates a request to output phase state machine block <b>911</b>. Output phase state machine block <b>911</b> then receives the status cell via lines <b>926</b> and transmits the status cell using one of the regular port accesses. The transmission of a status cell takes priority over the transmission of other 64-byte chunks to the memory manager block <b>204</b>.</p>
<p id="p-0257" num="0256">As seen in <figref idref="DRAWINGS">FIG. 53</figref>, status cell information received by egress MS-SAR <b>606</b> is communicated to ingress MS-SAR <b>604</b> via serial bus <b>607</b>. In <figref idref="DRAWINGS">FIG. 57</figref>, SEG_SCH interface block <b>915</b> monitors the lut_seg_type[3:0] lines. If the type is “type <b>7</b>” when lut_seg_valid signal <b>919</b> is asserted, then a status cell is present. The SEG_SCH interface block <b>915</b> reads the status cell via lut_seg_data[63:0], serializes the information, and outputs it as a twelve-bit value via the seg_sch_data[2:0] and seg_sch_valid lines. These lines and the seg_sch_clk clock line comprise the serial bus <b>607</b> that extends to the scheduler block of ingress MS-SAR <b>604</b>.</p>
<p id="p-0258" num="0257">The CPU can also inject a 64-byte chunk of information. The CPU does this via CPU interface block <b>913</b> and a “CPU inject” command. If CPU interface block <b>913</b> contains a 64-byte chunk of information that is ready for forwarding to memory manager block <b>204</b>, then output phase state machine block <b>911</b> will output that 64-byte chunk provided there is no status cell pending. The output phase state machine block <b>911</b> will only output one CPU-injected chunk once in every sixty-four forwarded 64-byte chunks. When output phase state machine block <b>911</b> finishes outputting a 64-byte chunk to memory manager block <b>204</b>, it returns the pointer to the buffer where the chunk was stored to the free buffer list block <b>905</b> via fbl_wr and fbl_addr lines <b>927</b>.</p>
<p id="p-0259" num="0258">The SEG_TST multiplexer block <b>917</b> is provided for test purposes. It multiplexes one of many test points within the segmentation block <b>203</b> onto test terminals (test pins) of the MS-SAR integrated circuit.</p>
<p id="h-0022" num="0000">Memory Manager Block in More Detail:</p>
<p id="p-0260" num="0259"><figref idref="DRAWINGS">FIG. 58</figref> is a simplified block diagram of one particular embodiment <b>1000</b> of memory manager block <b>204</b> of <figref idref="DRAWINGS">FIG. 10</figref>. Memory manager block <b>1000</b> includes a cell depository manager block <b>1001</b>, an SRAM adapter block <b>1002</b>, and a CPU interface block <b>1003</b>. Cell depository manager block <b>1001</b> includes an enqueue control block <b>1004</b>, a dequeue control block <b>1005</b>, and a per flow queue interface block <b>1006</b>. SRAM adapter block <b>1002</b> includes a memory controller block <b>1007</b> and a cell composition block <b>1008</b>.</p>
<p id="p-0261" num="0260">When a 64-byte chunk is ready to be transferred from segmentation block <b>203</b> to payload memory <b>217</b>, segmentation block <b>203</b> asserts a SEG_MEM_AVAILABLE signal to enqueue control block <b>1004</b>. When enqueue control block <b>1004</b> detects the SEG_MEM_AVAILABLE asserted, it asserts the MEM_SEG_CNTL_POP signal back to segmentation block <b>203</b> in a predetermined time slot. Segmentation block <b>203</b> then sends control information including SEG_MEM_FID[19:0], SEG_MEM_TYPE[3:0], SEG_MEM_CLASS[2:0], SEG_MEM_EOP, and SEG_MEM_SOP, to enqueue control block <b>1004</b>. Segmentation block <b>203</b> then sends sixty-four bytes of data to enqueue control block <b>1004</b> as four 128-bit transfers over SEG_MEM_DATA[127:0]. These four transfers occur in four predetermined time slots. The data is pushed onto a 128-bit by 64-bit deep data FIFO in enqueue control block <b>1004</b>. The control information is formed into a control word which is supplied to per flow queue block <b>207</b> via per flow queue interface block <b>1006</b>. Per flow queue interface block <b>1006</b> manages the passing of the control info from the clock domain of memory manager block <b>1000</b> to the clock domain of per flow queue block <b>207</b>. The control information is passed via lines MEM_PFQ_PARAM[23:0] along with an enqueue request signal via line MEM_PFQ_ENQ.</p>
<p id="p-0262" num="0261">Per flow queue block <b>207</b> returns a 20-bit buffer ID BID[19:0] via lines PFQ_MEM_PARAM[23:0]. The buffer ID indicates which 64-byte buffer in payload memory <b>217</b> will be used to store the 64-bytes of data. PFQ_MEM_DEQ indicates that the BID is being supplied as an enqueue command and not as a dequeue command. BID[19:0] passes via per flow queue interface block <b>1006</b> to enqueue control block <b>1004</b> where it is pushed onto a BID FIFO. The BID FIFO is twenty bits wide and sixteen bits deep. Each location in the BID FIFO is associated with four corresponding locations in the data FIFO where the corresponding data is stored. When a BID is present in the BID FIFO, enqueue control block <b>1004</b> asserts an available signal via an ENQ_CELL AVAILABLE line to SRAM adapter block <b>1002</b>. SRAM adapter block <b>1002</b> responds by popping the data FIFO four times and the BID FIFO once via line ENQ_CELL_DATA_POP such that the BID and associated data are transferred to memory controller block <b>1007</b>. Memory controller block <b>1007</b> writes to payload memory <b>217</b> four times to store the sixty-four bytes of data into payload memory <b>217</b> starting at the location identified by BID[19:0]. In this embodiment, there is only port for interfacing to external memory <b>217</b>. Memory manager block <b>1007</b> manages transferring the 64-byte chunk of data in multiple accesses to external memory <b>217</b> via this single port.</p>
<p id="p-0263" num="0262">Although in this embodiment external memory <b>217</b> is ZBT (zero bus turnaround) SRAM, external memory <b>217</b> may in other embodiments be another type of memory such as, for example, DRAM. In some embodiments, bandwidth to external memory <b>217</b> is increased by realizing external memory <b>217</b> in multiple integrated circuit memory devices, where each is accessed via a different one of a plurality of interface ports controlled by the same memory controller block <b>1007</b>. Memory controller <b>1007</b> in <figref idref="DRAWINGS">FIG. 58</figref> is programmable to interface with pipelined memory. In one such embodiment, the four memory locations where a chunk of data is stored are read in sequence. Although the reading of the first of the four locations requires multiple clock cycles, pipelining is employed such that the other of the four locations are read, one location on each subsequent clock cycle.</p>
<p id="p-0264" num="0263">After the 64-byte chunk of data is stored in a 64-byte buffer identified by BID[19:0], the 64-byte chunk is retrieved in response to a dequeue command. In a dequeue command, per flow queue block <b>207</b> sends a buffer ID BID[19:0] and associated control information to per flow queue interface block <b>1006</b> via lines PFQ_MEM_PARAM[23:0]. BID[19:0] indicates where in external memory <b>217</b> the data chunk is stored. The PFQ_MEM_DEQ signal is asserted to indicate the BID is supplied as part of a dequeue command. Per flow queue interface block <b>1006</b> pushes the BID[19:0] into a BID FIFO in dequeue control block <b>1005</b> and the control information into a control FIFO in dequeue control block <b>1005</b>. Dequeue control block <b>1005</b> sends an available signal to memory controller block <b>1007</b> via the DEQ_CELL_AVAILABLE line. Memory controller block <b>1007</b> responds by popping the BID and control FIFOs in dequeue control block <b>1005</b> using the DEQ_CELL_POP signal. Memory controller block <b>1007</b> then uses the BID[19:0] to retrieve the identified 64-byte chunk from external memory <b>217</b>.</p>
<p id="p-0265" num="0264">The retrieved data is passed to cell composition block <b>1008</b> via SRAM data line <b>1009</b> whereas the associated control information is passed to cell composition block <b>1008</b> via BID/CNTL line <b>1010</b>. Cell composition block <b>1008</b> realigns the control information and the associated data such that the control information and BID are stored at location in a BID/control FIFO that corresponds with four locations in a data FIFO where the data is stored. When corresponding locations in the BID/control FIFO and the data FIFO are loaded, cell composition block <b>1008</b> sends an available signal to reassembly block <b>205</b> via the MEM_RAS_AVAILABLE line. Reassembly block <b>205</b> responds by asserting a RAS_MEM_CONTROL_POP signal to pop the BID and control information from the BID/control FIFO and by asserting a RAS_MEM_DATA_POP signal four times to pop the data from the data FIFO.</p>
<p id="p-0266" num="0265">The CPU can read or write any one of the 64-byte buffers in external memory <b>217</b> via CPU interface block <b>1003</b>. CPU interface block <b>1003</b> contains sixteen 32-bit data registers and one 32-bit command register. Several bits in the command register indicate an opcode, whereas other bits indicate an address. For example, to write to a 64-byte buffer, the CPU writes the sixteen bytes of data into the sixteen 32-bit data registers. The CPU then writes to the command register, the opcode portion of the command register indicating a buffer write operation, the address portion of the command register indicating the BID of the buffer. Once the command register is written, CPU interface block <b>1003</b> reads the command register and executes the command. In the case of the write buffer command, the data from the sixteen data registers is written into external memory <b>217</b> by memory controller block <b>1107</b>. CPU interface block <b>1003</b> also includes a memory manager configuration register. The CPU can configure memory manager block <b>1000</b> in one of numerous ways by writing a configuration word into this configuration register. In one specific embodiment, the configuration register contains: 1) a first multi-bit value which indicates how chip selects to the external memory <b>217</b> are to be generated, and 2) a second multi-bit value which indicates an access time of the external memories used to implement payload memory <b>217</b>.</p>
<p id="h-0023" num="0000">Reassembly Block in More Detail:</p>
<p id="p-0267" num="0266"><figref idref="DRAWINGS">FIG. 59</figref> is a simplified block diagram of one particular embodiment <b>1100</b> of reassembly block <b>205</b> of <figref idref="DRAWINGS">FIG. 10</figref>. Reassembly block <b>1100</b> includes an enqueue state machine block <b>1101</b>, a free buffer list block <b>1102</b>, a reassembly table SRAM block <b>1103</b>, an output port queue block <b>1104</b>, a control SRAM block <b>1105</b>, an header SRAM block <b>1106</b>, a data SRAM block <b>1107</b>, a dequeue state machine block <b>1108</b>, a port calendar block <b>1109</b>, an output FIFO block <b>1110</b>, an AAL5 CRC checker block <b>1111</b> containing a CRC table <b>1112</b>, an L2 CRC checker block <b>1113</b> containing a CRC table <b>1114</b>, a first data pipeline block <b>1115</b>, a second data pipeline block <b>1116</b>, a CPU port buffer block <b>1117</b>, and a CPU interface block <b>1118</b>.</p>
<p id="p-0268" num="0267">In operation, 64-byte chunks and associated control information are received from memory manager block <b>204</b> via 128-bit bus <b>324</b> (see <figref idref="DRAWINGS">FIG. 10</figref>). Each 64-byte chunk is destined for one of sixty-four possible output ports. The particular output port is identified by an output port ID (PID) received via MEM_RAS_PID[6:0] lines from memory manager block <b>204</b>. Reassembly block <b>1100</b> includes a dual-port SRAM that contains one hundred and twenty-eight 64-byte buffers for storing 64-byte chunks. There is a queue (i.e., a linked list) of pointers to these 64-byte buffers in the reassembly block for each of the active output ports. A 64-byte chunk of data received from memory manager block <b>204</b> is stored in a 64-byte buffer and a pointer to the buffer is pushed onto the queue for the particular output port. The output port is designated by MEM_RAS_PID[6:0] for that 64-byte chunk. The flow ID (FID) of the 64-byte chunk is used to lookup header information from header table <b>327</b> (see <figref idref="DRAWINGS">FIG. 10</figref>) stored in external reassembly memory <b>218</b> (see <figref idref="DRAWINGS">FIG. 59</figref>). The retrieved header information for the 64-byte chunk is stored in a location in header SRAM <b>1106</b> that is also pointed to by the same pointer. In this way, pointers to the 64-byte chunks and the associated header information are stored in reassembly block <b>1100</b> in per-port queues. Enqueue state machine <b>1101</b> handles the enqueueing operation. Dequeue state machine <b>1108</b> then pops a selected per-port queue to retrieve a pointer, reads the 64-byte chunk and the header information pointed to by the popped pointer, does processing on the 64-byte chunk in accordance with the application type of the 64-byte chunk, and pushes the processed 64-byte chunk onto output FIFO <b>1110</b>. The particular per-port queue popped is determined by port calendar <b>1109</b>. Outgoing SPI-4 interface block <b>206</b> pops output FIFO <b>1110</b> and the processed information is transferred to outgoing SPI-4 interface block <b>206</b>.</p>
<p id="p-0269" num="0268">More detailed operation of reassembly block <b>1100</b> of <figref idref="DRAWINGS">FIG. 59</figref> is now described. Memory manager block <b>204</b> contains a first FIFO for storing 64-byte chunks of data. Memory manager block <b>204</b> also contains a second FIFO for storing control information associated with the 64-byte chunks of data in the first FIFO. The control information includes an SOP bit, an EOP bit, a twenty-bit flow ID (FID), a seven-bit output port ID (PID), a four-bit application type (TYPE), a CLP bit, an EFCI bit, an OAM bit, and a three-bit CLASS. If such a 64-byte chunk is available in memory manager block <b>204</b>, then memory manager block <b>204</b> sends an available signal to enqueue state machine <b>1101</b> via the MEM_RAS_AVAILABLE line <b>1119</b>. Enqueue state machine <b>1101</b> requests a pointer to a free 64-byte buffer via request line <b>1120</b>. Free buffer list block <b>1102</b> returns a pointer to enqueue state machine <b>1101</b> via PTR[6:0] lines <b>1121</b>. This pointer points to one of 128 buffers in data SRAM <b>1107</b>, and also points to one of 128 pairs of locations in header SRAM block <b>1106</b>, and also points to one of 128 locations in control SRAM <b>1105</b>. The 64-byte buffer pointed to is “free” in that it is not used by any queue (i.e., is free).</p>
<p id="p-0270" num="0269">Once enqueue state machine <b>1101</b> has a pointer to a free buffer, it sends a pop signal to memory manager block <b>204</b> to pop the FIFO containing the data via RAS_MEM_DATA_POP line <b>1122</b>. A 64-byte chunk then passes via MEM_RAS_DATA[127:0] lines <b>1123</b> and data pipeline <b>1115</b> and into data SRAM block <b>1107</b> to be stored at the location indicated by the pointer. Enqueue state machine block <b>1101</b> sends a pop signal to memory manager block <b>204</b> to pop the FIFO containing the associated control information via RAS_MEM_CTRL_POP line <b>1124</b>. Control information associated with the 64-byte block then passes to enqueue state machine block <b>1101</b> via lines MEM_RAS_SOP, MEM_RAS_EOP, MEM_RAS_FID[19:0], MEM_RAS_PID[6:0], MEM_RAS_TYPE[3:0], MEM_RAS_CLP, MEM_RAS_EFCI, MEM_RAS_OAM, and MEM_RAS_CLASS[2:0]. MEM_RAS PID[6:0] designates the output port. MEM_RAS_TYPE[3:0] designates the application type to be performed on the chunk. MEM_RAS_FID[19:0] designates the flow ID of the chunk.</p>
<p id="p-0271" num="0270">Enqueue state machine block <b>1101</b> uses the flow ID to read the associated FID entry in the header table stored in external reassembly memory <b>218</b>. <figref idref="DRAWINGS">FIG. 33</figref> illustrates one such FID entry. The FID entry is read by enqueue state machine block <b>1101</b> via HDR_DATA[35:0] lines <b>1125</b> and is stored in header SRAM <b>1106</b> at a pair of locations pointed to by the pointer PTR[6:0]. Enqueue state machine block <b>1101</b> stores the control information for the chunk in a location in control SRAM <b>1105</b> pointed to by the pointer. The same pointer PTR[6:0] on lines <b>1126</b> points to the eight 64-bit locations in data SRAM <b>1107</b> that hold the 64-bytes of data, points to the two 256-bit locations in header SRAM <b>1106</b> that stores the FID entry, and points to the one 32-bit location in control SRAM <b>1105</b> that stores the control information.</p>
<p id="p-0272" num="0271">Packet information, regardless of its length, is segmented and stored by the MS-SAR in 64-byte chunks as explained above. By convention, an indication of the length of the packet (in terms of number of valid bytes) is stored in a trailer at the end of the last 64-byte chunk. Accordingly, the last 64-byte chunk of such a packet could contain a little bit of data, followed by padding, and followed by the trailer. Where reassembly block <b>1100</b> is to remove the padding, the reassembly block <b>1100</b> must know how much padding there is. Reassembly block <b>1100</b> therefore maintains a “running packet length” count of the total number of bytes (the count includes valid data bytes, as well as any padding and the trailer) received for a packet, from 64-byte chunk to 64-byte chunk, up to and including the last chunk of the packet that has its EOP bit set. The “running packet length” count at the end of the last 64-byte chunk (the last chunk is the chunk with its EOP set) is the number of bytes in the packet. The number of bytes of padding is determined by recovering the packet length value (number of valid data bytes in the packet) from the trailer (the trailer by convention is at the end of the last 64-byte chunk), and subtracting this number of valid data bytes from the “running packet length” count, and then also subtracting the number of bytes of the trailer (the number of bytes of the trailer is a known and fixed number). Accordingly, reassembly block <b>1100</b> maintains one such 16-bit “running packet length” byte count for each of the 64 possible output ports. These 16-bit running packet length count values are stored in reassembly table SRAM <b>1103</b> on a per port bases. Before the data of a chunk is written to data SRAM <b>1107</b>, enqueue state machine block <b>1101</b> uses the PID of the 64-byte chunk to read the 16-bit running “packet length” partial byte count from reassembly table SRAM <b>1103</b>. It adds to this count in accordance with how many bytes (including any padding or trailer) there are in the current 64-byte chunk, and then before the next 64-byte chunk is read from memory manager block <b>204</b> writes the updated running “packet length” byte count value back into reassembly table <b>1103</b> at the location designated by the PID.</p>
<p id="p-0273" num="0272">The per-port queues are maintained using entries in control SRAM <b>1105</b>. Each 32-bit entry in control SRAM <b>1105</b> contains the following fields: 1) a one-bit PEND field, 2) a four-bit TYPE field which indicates the application type (type of processing to be done on the associated chunk), 3) a six-bit “cell length” field that indicates the number of valid data bytes in the associated 64-byte chunk, 4) an L2EN bit which indicates L2 header stripping and CRC checking is enabled, 5) an L2HDR bit which indicates the number of L2 header bytes to be stripped, 6) one BAD bit which indicates an error condition has occurred, 7) one SOP bit, 8) one EOP bit, 9) a seven-bit NEXT RD_PTR field which indicates a pointer to where the next 64-byte chunk in the per-port queue is stored in the reassembly block, 10) a two-bit NEXT HDR_WD field which indicates the number of header bytes for the next 64-byte chunk, and 11) a three-bit MPLS field which indicates what kind of MPLS operation that the reassembly block is to perform. By the use of the NEXT RD_PTR, the entry for one pointer can be made to point to another entry.</p>
<p id="p-0274" num="0273">Output port queue block <b>1104</b> contains sixty-four 24-bit entries, one entry being for each output port. Each entry contains the following fields: 1) one EOP bit, 2) a seven-bit RD_PTR (head pointer) field that indicates where on the reassembly block the 64-byte chunk at the head of the per-port queue is stored, 3) a seven-bit WR_PTR (tail pointer) field that indicates where on the reassembly block the 64-byte chunk at the tail of the per-port queue is stored, 4) one empty status bit which indicates if there are no 64-byte chunks queued for that port, 5) one PEND bit which indicates if a 64-byte chunk is waiting to be queued to the output port, and 6) two HDR_WDS bits which indicate the number of header words for the next 64-byte chunk for that port to be sent to the outgoing SPI-4 interface block.</p>
<p id="p-0275" num="0274">It is therefore seen that output port queue block <b>1104</b> stores, for each per-port queue, a head pointer that points to the head entry in control SRAM <b>1105</b> and a tail pointer that points to the tail entry in control SRAM <b>1105</b>. If the empty bit in an output port queue is set, then the queue is empty. If the head pointer and the tail pointer are the same, then there is only one entry in the queue. If the head pointer points to an entry, the NEXT RD_PTR field of which points to the tail pointer, then there are two entries in the queue. To add a third pointer to a queue, the entry in control SRAM <b>1105</b> pointed to by the queue's tail pointer is modified so that its NEXT RD_PTR field points to the entry pointed to by the new third pointer. The tail pointer field for that port in output port queue block <b>1104</b> is then changed to be the new third pointer. A 64-byte chunk received from memory manager block <b>204</b> is therefore said to be “pushed” onto a per-port queue when the 64-byte chunk is stored in data SRAM <b>1107</b> and a pointer to the stored chunk becomes the new tail pointer.</p>
<p id="p-0276" num="0275">Port calendar <b>1109</b> identifies an output port as explained above in connection with <figref idref="DRAWINGS">FIG. 24</figref>. Dequeue state machine <b>1108</b> sends a request to port calendar block <b>1109</b> via request line <b>1127</b> and port calendar <b>1109</b> responds by identifying an output port via OUT_PID[6:0] lines <b>1128</b>. Dequeue state machine block <b>1108</b> then pops the per-port queue for that identified output port. It does this by reading the entry for that port in output port queue block <b>1104</b>, retrieving the head pointer, and then using the head pointer to read: 1) the pointed to 64-byte chunk from data SRAM <b>1107</b>, 2) the pointed to header information from header SRAM <b>1106</b>, and 3) the pointed to control information from control SRAM block <b>1105</b>. The popped head pointer is no longer the head pointer. Rather, the pointer to the next 64-byte block identified by the NEXT RD_PTR field in the control SRAM block <b>1105</b> is written into the entry in output port queue block <b>1104</b> to be the new head pointer. The old head pointer is communicated to enqueue state machine <b>1101</b> via RETURN PTR[6:0] lines <b>1129</b>. Enqueue state machine <b>1101</b> causes this pointer to be “released” (i.e., be indicated as “free”) by sending the pointer to free buffer list block <b>1102</b> via PTR[6:0] lines <b>1130</b> along with a release signal via RELEASE line <b>1131</b>. The 64-byte chunk of data passes from data SRAM block <b>1107</b> via lines <b>1132</b>, through data pipeline <b>1116</b>, through multiplexer <b>1133</b>, and into output FIFO <b>1110</b>. Output FIFO <b>1110</b> is big enough to hold four 64-byte chunks at one time. The header for the 64-byte chunk that is stored in header SRAM <b>1106</b> is multiplexed via multiplexer <b>1133</b> into the output FIFO so as to be in the appropriate place with respect to the data. Dequeue state machine block <b>1108</b> controls multiplexer <b>1133</b> via HDR_SEL line <b>1134</b>. Processing in accordance with the application type indicated by the value TYPE[3:0] read out of control SRAM <b>1105</b> is carried out. Which bytes in the 64-byte chunk are padding are indicated by an eight-bit value stored in output FIFO <b>1110</b> with each 64-byte chunk. There is one bit in this value RAS_SPIO_BYTE_EN[7:0] for each byte in the 64-byte chunk. Outgoing SPI-4 interface block <b>206</b> pops the output FIFO <b>1110</b> via line SPIO_RAS_POP. Any byte of the received data on lines RAS_SPIO_DATA[63:0] for which the corresponding bit in RAS_SPIO_BYTE_EN[7:0] is not set is not read into outgoing SPI-4 interface block <b>206</b>. The byte of padding is therefore effectively removed.</p>
<p id="p-0277" num="0276">There are two CRC blocks: 1) enqueue CRC generator block <b>1111</b> that generates the CRC for the AAL5 format, and 2) dequeue CRC generator block <b>1113</b> that generates the CRC for the L2 format. The polynomial used is CRC-32. There is a minimum of one clock delay in generating the CRC because the internal data path is sixty-four bits and the CRC polynomial is calculated thirty-two bits at a time. The CRC is generated in two stages, first the upper thirty-two bits and then the lower thirty-two bits. For AAL5 encapsulation, the CRC is checked during the enqueue process of writing the data into data SRAM block <b>1107</b>. CRC generator block <b>1111</b> reads a partial CRC using the port ID as the address to CRC table SRAM <b>1112</b>. CRC table SRAM <b>1112</b> stores one partial CRC for each of the sixty-four output ports. Enqueue CRC generator block <b>1111</b> loads the partial CRC and starts calculating as the data is coming in from memory manager block <b>204</b>. When the complete 64-byte chunk is loaded in data SRAM block <b>1107</b>, enqueue CRC generator block <b>1111</b> writes back the partial CRC into CRC table SRAM <b>1112</b>, again using the port ID as the address. At the end of the last chunk of a packet (as determined by EOP), the CRC is compared to the CRC in the AAL5 trailer. If the compare fails, then the packet is marked as bad by setting a BAD bit in control SRAM <b>1105</b> via AAL5_CRC_OK line <b>1136</b>. When this packet is sent out of reassembly block <b>1100</b> via output FIFO <b>1110</b>, this bad bit is communicated to outgoing SPI-4 interface block <b>1100</b> via line <b>1137</b>, OR gate <b>1138</b>, the bad bit in output FIFO <b>1110</b> for the last 64-byte chunk of the packet, and signal RAS_SPIO_ABORT that is communicated to outgoing SPI-4 interface block <b>206</b>.</p>
<p id="p-0278" num="0277">For the L2 encapsulation, the CRC is checked during the dequeue process while reading the data out of data SRAM <b>1107</b>. L2 CRCR checker block <b>1113</b> has a CRC table <b>1114</b> for storing one partial CRC for each of the sixty-four output ports. This CRC table <b>1114</b> is accessed on a per-port basis. The end of the data packet is determined by comparing the packet length calculated and stored in reassembly table SRAM <b>1103</b> with the actual packet length (valid bytes) recorded in the AAL5 trailer. Once the end of the data is located, the L2 CRC is checked at the calculated packet boundary to determine the integrity of the L2 CRC for that data packet. If L2 CRC checker block <b>1113</b> determines that the packet has a CRC error, then the error condition is sent to the outgoing SPI interface block <b>206</b> via line <b>1139</b>, OR gate <b>1138</b>, the bad bit in output FIFO <b>1110</b>, and signal RAS_SPIO_ABORT.</p>
<p id="p-0279" num="0278">CPU interface block <b>1118</b> is an interface by which the CPU can cause certain operations to be performed depending on which one of a plurality of opcodes the CPU writes into a 32-bit command register in CPU interface block <b>1118</b>. Using this 32-bit command register and six other general purpose 32-bit registers, the CPU can read from and write to any of the memory locations in any memory in reassembly block <b>1100</b>. Certain opcodes allow the CPU to read status and statistics information. For example, reassembly block <b>1100</b> in some embodiments includes a per port statistics memory (not shown) that includes sixty-four entries, one for each output port. In one embodiment, each entry is 112 bits long and includes: 1) a sixteen-bit TTL_ERRORS field that accumulates a count of the total number of TTL timeout errors detected on that port as various packets are received on that port, 2) a sixteen-bit CRC ERRORS field that accumulates a count of the number of CRC errors detected on the output port as the various packets are received on that port, 3) a 32-bit PKT_RCVD field that accumulates a count of the total number of cells or packets that are received on that output port, and 4) a 48-bit DATA_RCVD field that accumulates a count of the total number of valid bytes received on that output port as the various packets are received on that port. The CPU can read entries from this per port statistics memory via CPU interface block <b>1118</b>.</p>
<p id="p-0280" num="0279">In the embodiment of <figref idref="DRAWINGS">FIG. 59</figref>, the CPU can receive 64-byte data chunks through CPU interface block <b>1118</b> using a special output port (output port <b>65</b>). Data for this special output port is buffered into CPU port buffer block <b>1117</b> so that reassembly block <b>1100</b> can reassemble the data into the proper configuration before the data is read by the CPU. If output scheduler block <b>210</b> sends such a CPU chunk, then reassembly block <b>1100</b> sets the CPU FULL status bit and waits for at least sixty-four cycles before clearing the bit. Output scheduler block <b>210</b> does not send another CPU chunk until the falling edge of the CPU FULL status bit. Once reassembly block <b>110</b> detects a 64-byte CPU chunk as determined by the PID, reassembly block <b>1100</b> writes the 64-bit control word for the CPU chunk into CPU port buffer block <b>1117</b>. The data of the CPU chunk is then written into CPU port buffer block <b>1117</b>. After one complete CPU chunk is received, CPU interface block <b>1118</b> reads the control word from the FIFO. Based on the type field, CPU interface block <b>1118</b> determines if another CPU chunk is required before the current CPU chunk can be supplied to the CPU. This would occur for packet traffic types when an EOP must be detected before the second to last cell can be sent. If another CPU chunk is required, then the CPU FULL status bit to the data base block <b>208</b> is cleared after a minimum of sixty-four cycles and scheduler block <b>210</b> sends another CPU chunk. Once the second CPU chunk is received and the control word has been read to determine whether it is an EOP or not, then the first chunk along with the associated control header is read out of CPU port buffer <b>1117</b> and is loaded into the general purpose registers in CPU interface block <b>1118</b>. Once these registers are loaded, the CPU data bit in the status register is set informing the CPU that a chunk of data is available for reading. The CPU then issues a “GET CPU” command to read from the registers. If there is padding to be stripped based on the type, then the padding is stripped when the data is read out of CPU port buffer <b>1117</b> so that the padding is not loaded into the general purpose registers. The cell length field is used to determine how much padding is to be stripped from the end of the associated chunk. No header operation is performed on CPU chunks, so the only padding is at the end of the chunk.</p>
<p id="p-0281" num="0280">Enqueue data pipe block <b>1115</b> converts data from 128-bit wide to 64-bit wide for entry into data SRAM <b>1107</b>. Enqueue data pipe block <b>1115</b> also provides the appropriate delay necessary for enqueue state machine block <b>1101</b> to obtain the pointer needed to store the chunk into data SRAM <b>1107</b>. Dequeue data pipe block <b>1116</b> delays data to the output FIFO block <b>1110</b> so that the header can be inserted and the CRC checked for L2 packets before the last word is sent. Header SRAM block <b>1106</b> is a 256x64 bit internal dual port SRAM that stores header information on a per-port basis. The memory is organized as 128 sixteen-byte buffers so that two sixteen-byte headers are stored for each output port. Output FIFO block <b>1110</b> is a 32×88 bit FIFO implemented using dual port memory. The output FIFO is large enough to store three maximum size chunks. The output FIFO has two full indications (Almost Full and Full) and two empty indications (Almost Empty and Empty). Almost Full is asserted when the FIFO has ten locations left. Full is asserted when the FIFO has nine or fewer locations left. By indicating that the FIFO is almost full when it has only ten locations left, the dequeue state machine block <b>1108</b> can then send one more complete chunk. When the FIFO is one word beyond Almost Full, then the Full signal is asserted thereby indicating that once the current chunk is completed that no more chunks are to be transferred until Full goes inactive. Almost Empty is asserted when one word is left in the output FIFO. Empty is asserted when the output FIFO is empty. Outgoing SPI interface block <b>206</b> ORs the two empty signals together to determine when to pop the output FIFO. Outgoing SPI interface block <b>206</b> also uses the two empty signals to determine when only one word is left in the FIFO. This is necessary because the minimum POP size is two clock cycles, but when only one word is left the FIFO only has valid data for the first read of the FIFO. If Empty is active but Almost Empty is inactive, then only one word is in the FIFO. Dequeue state machine block <b>1108</b> causes data to be loaded into output FIFO block <b>1110</b> as long as output port calendar block <b>1109</b> indicates chunks are available and output FIFO block <b>1110</b> is not full. If output FIFO block <b>1110</b> goes full, then the current chunk being transferred is completed before reassembly block <b>1100</b> stops sending data to output FIFO block <b>1110</b>. Outgoing SPI interface block <b>206</b> pops data from the output FIFO block <b>1110</b> as long as FIFO block <b>1110</b> is not empty and outgoing SPI interface block <b>206</b> is not inserting control words into the data stream. FIFO block <b>1110</b> allows outgoing SPI interface block <b>206</b> to control the flow of data from reassembly block <b>1100</b> so it has time to add the control words into the output data stream (coming out of outgoing SPI interface block <b>206</b>) between bursts.</p>
<p id="p-0282" num="0281">External reassembly memory <b>218</b> (see <figref idref="DRAWINGS">FIG. 10</figref>) is 4Mx36 bits of external SRAM that stores the header control information on a per-FID basis. External reassembly memory <b>218</b> includes the appropriately programmed new header for the particular flow and/or the necessary MPLS manipulation control information for that flow. Reassembly memory <b>218</b> supports 1M flows with sixteen bytes of header and two bytes of control information per flow. In one embodiment, the MS-SAR operates without any external reassembly memory <b>218</b>. In such an embodiment, only the Azanda switch header is added in the ingress mode and no MPLS translation occurs in the egress mode. The Azanda header is obtained from side band signals coming from memory manager block <b>204</b> and any L2 stripping information is obtained from the control register. For AAL5 type traffic, lookup block <b>202</b> (see <figref idref="DRAWINGS">FIG. 10</figref>) adds the appropriate ATM header and reassembly block <b>1100</b> passes the ATM header on without translation.</p>
<p id="p-0283" num="0282">Dequeue state machine block <b>1108</b> performs any MPLS manipulation required pursuant to requirements of the application type. The FID entry in the header table in external memory <b>218</b> contains the MPLS label operation instruction and new labels. Three bits in the first control word contain encoded instructions for what MPLS operation to perform. In the embodiment of <figref idref="DRAWINGS">FIG. 59</figref>, the operation is either: 1) replace the MPLS tag, 2) push the MPLS tag once or twice, or 3) pop the MPLS tag once or twice. After each MPLS operation, the original MPLS TTL value is decremented. If the TTL value is one before being decremented, then the packet is dropped. This is done by not pushing the packet onto output FIFO <b>1110</b> and by dropping subsequent chunks from the flow until the EOP is reached. If two labels are being pushed, then label #<b>1</b> is pushed on first and label #<b>2</b> is pushed on second. If one label is pushed, then label #<b>1</b> is used. If two labels are popped, then the third label is the one remaining on the top. If one label is popped, then the second label remains on top.</p>
<p id="p-0284" num="0283">Although the simplified diagram of <figref idref="DRAWINGS">FIG. 59</figref> illustrates many of the important interconnections between the various sub-blocks within the specific embodiment of reassembly block <b>1100</b>, there are multiple other interconnections not shown in <figref idref="DRAWINGS">FIG. 59</figref> that are used to implement various details of the processing carried out by reassembly block <b>1100</b> in accordance with the multiple application types. These many interconnections are omitted from <figref idref="DRAWINGS">FIG. 59</figref> in order to clarify the above explanation of the general operation of reassembly block <b>1100</b>. Reassembly block <b>1100</b> is implemented, in accordance with one embodiment, by describing the functionality to be performed in accordance with each of the application types using a hardware description language such as Verilog. Once the functional of the reassembly block has been described in Verilog, circuitry is synthesized from that description using commonly available software tools.</p>
<p id="p-0285" num="0284"><figref idref="DRAWINGS">FIGS. 60A-60J</figref> illustrate functionality of the reassembly block in certain application types. Because reassembly block operation in several application types is similar, functional description of the reassembly block <b>1100</b> is simplified by describing reassembly block operation in eight different reassembly types.</p>
<p id="p-0286" num="0285"><figref idref="DRAWINGS">FIG. 60A</figref> illustrates reassembly type <b>1</b> processing. In reassembly type <b>1</b>, 64-byte chunks in payload memory <b>217</b> are mapped into switch cells by adding a switch header. Reassembly type <b>1</b> handles reassembly processing for application types <b>0</b>-<b>3</b> and <b>7</b>. <figref idref="DRAWINGS">FIG. 60A</figref> shows a one-to-one mapping of ATM cells stored in 64-byte memory buffers into switch cells. The switch header added is eight or sixteen bytes long with the Azanda header being the last four bytes. Reassembly block <b>1100</b> in reassembly type <b>1</b> informs the SPI interface of the number of valid bytes in each eight-byte word and, for packet traffic, indicates which chunk is the SOP and which chunk is the EOP. For AAL5 cells, the cells are stored in payload memory as 48-byte AAL5 cells with an AAL5 trailer at the end and padding to fill each 64-byte buffer up to sixty-four bytes. For packet traffic, the 64-byte chunks are stored in payload memory as 64-byte chunks with an AAL5-like trailer added to pass on the packet length information. <figref idref="DRAWINGS">FIG. 60B</figref> shows AAL5 encapsulated cells. <figref idref="DRAWINGS">FIG. 60C</figref> shows pseudo-AAL5 encapsulated packets. For all ingress traffic manager types, the CLASS, OAM, EFCI and CLP bits from memory manager block <b>204</b> are inserted into the Azanda four-byte header. For application types <b>0</b> and <b>1</b>, the CLASS, OAM, EFCI and CLP bits are whatever was in the ATM header. For application types <b>2</b> and <b>3</b>, the CLASS, OAM, EFCI and CLP are always zero coming from memory manager block <b>204</b>.</p>
<p id="p-0287" num="0286"><figref idref="DRAWINGS">FIG. 60D</figref> illustrates reassembly type <b>2</b> processing. In reassembly type <b>2</b>, 52-byte ATM cells stored as 64-byte chunks are mapped into packets and a packet header is added before the packet is sent on to the outgoing SPI-4 interface block. Only one ATM cell is mapped into each packet. Eight of the twelve bytes of padding at the end of each 64-byte chunk is removed before the packet is sent out. This allows a 64-byte packet to be sent out that includes eight bytes of header. If the switch packet header is sixteen bytes, then the packet is seventy-two bytes long. The CLASS, OAM, EFCI and CLP bits are passed in the Azanda header portion of the switch packet header.</p>
<p id="p-0288" num="0287"><figref idref="DRAWINGS">FIG. 60E</figref> illustrates reassembly type <b>3</b> processing. In reassembly type <b>3</b>, 48-byte ATM cells stored in payload memory are mapped into packets by stripping the sixteen bytes of padding from each 64-byte chunk and then optionally stripping the L2 packet header and optionally adding a switch packet header before sending the resulting switch packet on to the outgoing SPI-4 interface block. Reassembly block <b>1100</b> checks the L2 CRC before stripping the L2 header to ensure packet integrity before sending the packet on to the switch fabric. Reassembly block <b>1100</b> also checks against the maximum MTU and the length and CRC in the AAL5 trailer and removes the AAL5 encapsulation. The CLASS, OAM, EFCI and CLP bits are passed in the Azanda header portion of the switch packet header. The L2 CRC being sent out is now incorrect due to the removal of the L2 header and must be replaced by the egress MS-SAR when it adds a new L2 packet header. Lookup block <b>202</b> replaces the L2 header and segmentation block <b>203</b> calculates the new CRC. For the L2 stripping case, the special header required by lookup block <b>202</b> in the egress MS-SAR is added by the switch fabric.</p>
<p id="p-0289" num="0288"><figref idref="DRAWINGS">FIG. 60F</figref> illustrates reassembly type <b>4</b> processing. In reassembly type <b>4</b>, reassembly block <b>1100</b> maps AAL5-like switch cells stored in payload memory into packets, checks against the maximum MTU, removes the AAL5 encapsulation, and may add an eight or sixteen-byte switch packet header. The CLASS, OAM, EFCI and CLP bits are passed in the Azanda header portion of the switch packet header. Reassembly type <b>4</b> can also be carried out with a lookup operation.</p>
<p id="p-0290" num="0289"><figref idref="DRAWINGS">FIG. 60G</figref> illustrates reassembly type <b>5</b> processing. In reassembly type <b>5</b>, reassembly block <b>1100</b> translates the ATM header by replacing the 28-bit VPINCI and then replacing the CLP bit with the logical OR of the CLP coming from the memory manager block <b>204</b> and the CLP already in the ATM header before the cell is sent out. The PTI field is left unchanged. The extra twelve bytes of padding from the end of each ATM cell is stored as 64-byte chunks in payload memory. This padding is stripped by the outgoing SPI-4 interface block using byte enables. The remaining information is sent out as a 52-byte ATM cell.</p>
<p id="p-0291" num="0290"><figref idref="DRAWINGS">FIG. 60H</figref> illustrates reassembly type <b>6</b> processing. In reassembly type <b>6</b>, reassembly block <b>1100</b> maps the 48-byte AAL5 encapsulated ATM cells stored as 64-byte chunks in payload memory into packets by stripping the sixteen bytes of padding from each chunk and then performing an MPLS operation based on the contents of the external reassembly memory <b>218</b>. The resulting packet is then sent on to the outgoing SPI-4 interface block. Part of the MPLS operation is decrementing the MPLS TTL. If the MPLS TTL is one before being decremented, then the packet is dropped. Reassembly block <b>1100</b> also checks against the maximum MTU and the length and CRC in the AAL5 trailer before removing the AAL5 encapsulation.</p>
<p id="p-0292" num="0291"><figref idref="DRAWINGS">FIG. 60I</figref> illustrates reassembly type <b>7</b> processing. In reassembly type <b>7</b>, reassembly block <b>1100</b> adds the four-byte ATM header along with four bytes of padding, so the data is eight-byte word-aligned to the 48-byte AAL5 encapsulated ATM cells stored in payload memory as 64-byte chunks. Reassembly block <b>1100</b> strips the sixteen bytes of padding, replaces the PTI and CLP bits in the ATM header using the incoming EOP, OAM, CLP and EFCI bits from memory manager block <b>204</b>, and then transmits the chunks as AAL5 cells. The four bytes of alignment padding are stripped using the byte enables when transmitting to the outgoing SPI-4 interface block. The EOP AAL5 cell is marked using the PTI field in the ATM header. The packet length is checked against the maximum MTU. The length and CRC in the AAL5 trailer are checked.</p>
<p id="p-0293" num="0292"><figref idref="DRAWINGS">FIG. 60J</figref> illustrates reassembly type <b>8</b> processing. In reassembly type <b>8</b>, reassembly block <b>1100</b> maps the AAL5 like switch cells stored in payload memory into packets and performs an MPLS operation based on the contents of external reassembly memory <b>218</b>. Part of the MPLS operation is decrementing the MPLS TTL. If the MPLS TTL is one before being decremented, then the packet is dropped. Reassembly block <b>1100</b> also checks the packet length against the maximum MTU. The length and CRC in the AAL5 trailer are checked before removing the AAL5 encapsulation.</p>
<p id="h-0024" num="0000">Outgoing SPI-4 Interface Block in More Detail:</p>
<p id="p-0294" num="0293"><figref idref="DRAWINGS">FIG. 60</figref> is a simplified block diagram of one particular embodiment <b>1200</b> of outgoing SPI-4 interface block <b>206</b> of <figref idref="DRAWINGS">FIG. 10</figref>. Port calendar state machine <b>1201</b> utilizes a port calendar memory <b>1202</b> to identify an output port that can receive data. Reassembly block <b>205</b> supplies data and control information at a 200 MHz rate via RX state machine <b>1203</b> and per port FIFO <b>1204</b> to data FIFO <b>1205</b>. TX state machine <b>1206</b> causes the data and control information to be output from data FIFO <b>1205</b> at a 400 MHz double data rate. The data flows through 64-to-16 unpack engine block <b>1207</b> which unpacks the 64-bit data words to form 16-bit data words. Data parity generation block <b>1208</b> calculates a four-bit diagonal interleaved parity (DIP-4) on the data. TX state machine block <b>1206</b> combines the DIP-4 bits with the control information read out of data FIFO <b>1205</b> to form 16-bit control words. Multiplexer <b>1209</b> multiplexes the control words and data words in accordance with the SPI-4 specification and the resultant 16-bit flow of information passes out of the MS-SAR and onto an external 16-bit, 400 MHz DDR bus. Signal names in <figref idref="DRAWINGS">FIG. 60</figref> are descriptive of their information content and function. Operation of port calendar <b>1201</b> is similar to the operation of the port calendar described in connection with <figref idref="DRAWINGS">FIG. 24</figref>.</p>
<p id="h-0025" num="0000">CPU Interface Block in More Detail:</p>
<p id="p-0295" num="0294"><figref idref="DRAWINGS">FIG. 61</figref> is a simplified diagram of one particular embodiment <b>1300</b> of CPU interface block <b>211</b> of <figref idref="DRAWINGS">FIG. 10</figref>. CPU interface block <b>1300</b> provides a general purpose CPU interface port for the MS-SAR integrated circuit. The CPU interface port has a 32-bit data bus. The various registers within the CPU interface blocks of the various other blocks of the MS-SAR are accessible by the CPU through CPU interface block <b>1300</b>. CPU interface block <b>1300</b> receives a ten-bit address from the CPU and decodes it. Three bits of the ten-bit address identify one of the blocks within the MS-SAR whereas the other seven bits identify a register within that block. CPU interface block <b>1300</b> generates block select signals that are supplied to each of the other blocks of the MS-SAR.</p>
<p id="p-0296" num="0295">There are also registers within the CPU interface block <b>1300</b> that can be read from and/or written to by the CPU. These registers include a read-only version register, a mode register, a soft reset register, and an input/output disable register. The mode register includes: 1) a six bit value which indicates the port number of the MS-SAR when the MS-SAR is in the ingress mode, 2) a one-bit value which indicates whether the MS-SAR is in the ingress mode or in the egress mode, 3) a one-bit value which indicates whether or not the MS-SAR is operating with an external reassembly memory <b>218</b>, and 4) a four-bit value which selects the test multiplexer of one internal block, the output of which is coupled to the MX<b>1</b>_TEST_OUT[31:0] output test port. Each of these test multiplexers has a thirty-two bit output bus. Test multiplexer <b>917</b> of <figref idref="DRAWINGS">FIG. 57</figref> is an example of one such test multiplexer. CPU interface block <b>1300</b> controllably multiplexes the 32-bit output bus of one of these test multiplexers onto 32-bit output test bus MX<b>1</b>_TEST_OUT[31:0].</p>
<p id="p-0297" num="0296">The soft reset register allows the CPU to soft reset any individual block within the MS-SAR. The input/output disable register contains bits which indicate for each of the blocks of the MS-SAR whether the input of the block is enabled or disabled, and whether the output of the block is enabled or disabled.</p>
<p id="p-0298" num="0297">CPU interface block <b>1300</b> also generates a global synchronization signal GSYNC that is supplied to all blocks. GSYNC is a pulse signal that is asserted once every 520 cycles of the global 200 MHz clock. GSYNC is used to synchronize communication between the various blocks of the MS-SAR. Each block uses GSYNC to generate the three-bit time slot count value (a three-bit value that has eight as its maximum count value) by counting the GSYNC signal.</p>
<p id="p-0299" num="0298">Although the present invention is described in connection with certain specific embodiments for instructional purposes, the present invention is not limited thereto. Although the bus protocol by which the incoming bus interface block communicates off-chip and the protocol by which the outgoing bus interface communicates off-chip are the same (SPI-4) in the above-described embodiments, they need not be the same. Only one or neither of the interface blocks need communicate off-chip in accordance with the SPI-4 protocol. The SPI-4 bus is mentioned just as an example. More than one incoming bus interface block can be provided so that the MS-SAR can interface to either of two different types of buses. Although the lookup block is disposed in the data path between the incoming bus interface block and the segmentation block, this need not be the case in all embodiments. The lookup block may, for example, analyze data passing from the incoming bus interface to the segmentation block without acting as a buffer in the data path between the incoming bus interface block and the segmentation block. In some embodiments, the segmentation block does buffer an entire packet before segmenting it, rather than receiving the packet in smaller pieces and then processing those smaller pieces one by one. Similarly, the reassembly block in some embodiments does reassemble an entire packet before sending the reassembled packet out to the outgoing bus interface block. Although in the embodiments described above the incoming network data is stored in payload memory in buffers that all have the same size, this need not be the case. Multiple different buffer sizes are employed in some embodiments. The data of packets could, for example, be stored in one size of buffer whereas the data of ATM cells could be stored in another size of buffer. Although the Azanda header is described here as being embedded in the switch header, this is not the case in all embodiments. In one embodiment, the Azanda header is provided in the switch cell after the payload. The Azanda header is intended to provide a general-purpose vehicle for the communication of information from an ingress MS-SAR to an egress MS-SAR. Information other than FID and egress application type can be included in such an Azanda header. The specific format for the Azanda header provided above is provided to illustrate the general concept. The architectural concepts disclosed are not limited to any particular protocol, but rather are generally applicable to other protocols. Other application types can be supported, where the various functional blocks of the MS-SAR operate on a flow in a particular way determined by the application type of the flow. Accordingly, various modifications, adaptations, and combinations of various features of the described embodiments can be practiced without departing from the scope of the invention as set forth in the claims.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method involving a first line card, a second line card, and a switch fabric, the first line card comprising an ingress device and an egress device, the second line card comprising an ingress device and an egress device, a flow of network information flowing out of the ingress device of the first line card and initially through the switch fabric and to the egress device of the second line card, the egress device of the second line card having an amount of payload memory available for storing network information, wherein the egress device of the second line card comprises a first integrated circuit, the ingress device of the second line card comprises a second integrated circuit, the egress device of the first line card comprises a third integrated circuit, and the ingress device of the first line card comprises a fourth integrated circuit, wherein the first, second, third and fourth integrated circuits are substantially structurally identical integrated circuits, each having a single data extending from a first bus interface, through segmentation circuitry, through reassembly circuitry, and to a second bus interface the method comprising:
<claim-text>(a) detecting on the egress device of the second line card that the amount of available payload memory available for storing network information flowing on the data path of the first integrated circuit has reached a low level;</claim-text>
<claim-text>(b) in response to the detecting of (a) sending a first indication from the egress device of the second line card to the ingress device of the second line card, the first indication being sent from the egress device of the second line card to the ingress device of the second line card via a bus on the second line card;</claim-text>
<claim-text>(c) receiving the first indication on the ingress device of the second line card and in response sending a status switch cell on the data path of the second integrated circuit from the ingress device of the second line card, through the switch fabric, and to the egress device of the first line card;</claim-text>
<claim-text>(d) receiving the status switch cell on the data path of the third integrated circuit of the egress device of the first line card and in response sending a second indication from the egress device of the first line card to the ingress device of the first line card, the second indication being sent for the egress device of the first line card to the ingress device of the first line card via a bus on the first line card; and</claim-text>
<claim-text>(e) receiving the second indication on the ingress device of the first line card and in response slowing the flow of the network information on the data path of the fourth integrated circuit out of the ingress device of the first line card,</claim-text>
<claim-text>wherein network information communicated on the data paths of the first, second, third, and fourth integrated circuits is sent through the respective segmentation circuitry, reassembly circuitry of the integrated circuits.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the payload memory is coupled to the egress device of the second line card.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the bus on the second line card is a serial bus, and wherein the bus on the first line card is a serial bus.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the flow of the network information is slowed in (e) by stopping the flow of the network information out of the ingress device of the first line card.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the egress device of the second line card maintains a free buffer queue, the free buffer queue having a size, the egress device of the second line card detecting that the amount of available payload memory has reached a low level in (a) by monitoring the size of the free buffer queue.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. A method involving a first line card, a second line card, and a switch fabric, the first line card comprising an ingress device and an egress device, the second line card comprising an ingress device and an egress device, a flow of network information flowing out of the ingress device of the first line card and through the switch fabric and to the egress device of the second line card, the egress device of the second line card having an amount of payload memory available for storing network information, wherein the egress device of the second line card comprises a first integrated circuit, the ingress device of the second line card comprises a second integrated circuit, the egress device of the first line card comprises a third integrated circuit, and the ingress device of the first line card comprises a fourth integrated circuit, wherein the first, second, third and fourth integrated circuits are substantially structurally identical integrated circuits, the method comprising:
<claim-text>(a) detecting on the egress device of the second line card that the amount of available payload memory has reached a low level;</claim-text>
<claim-text>(b) in response to the detecting of (a) sending a first indication from the egress device of the second line card to the ingress device of the second line card, the first indication being sent from the egress device of the second line card to the ingress device of the second line card via a bus on the second line card;</claim-text>
<claim-text>(c) receiving the first indication on the ingress device of the second line card and in response sending a status switch cell from the ingress device of the second line card, through the switch fabric, and to the egress device of the first line card;</claim-text>
<claim-text>(d) receiving the status switch cell on the egress device of the first line card and in response sending a second indication from the egress device of the first line card to the ingress device of the first line card, the second indication being sent for the egress device of the first line card to the ingress device of the first line card via a bus on the first line card; and</claim-text>
<claim-text>(e) receiving the second indication on the ingress device of the first line card and in response slowing the flow of the network information out of the ingress device of the first line card,</claim-text>
<claim-text>wherein the ingress device of the first line card is a multi-service segmentation and reassembly device, the multi-service segmentation and reassembly device receiving both flows of packets and flows of cells.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. A system, comprising:
<claim-text>a switch fabric;</claim-text>
<claim-text>a first line card comprising an ingress device and an egress device, the ingress device of the first line card being coupled to the egress of the first line card via a first serial bus; and</claim-text>
<claim-text>a second line card comprising an ingress device and an egress device, the ingress device of the second line card being coupled to the egress device of the second line card via a second serial bus, the egress device of the second line card backpressuring the ingress device of the first line card by sending a backpressuring signal to the ingress device of the first line card, the backpressuring signal passing from the egress device of the second line card to the ingress device of the second line card via the second serial bus, the backpressuring signal then passing from the ingress device of the second line card to the egress device of the first line card in the form of a status switch cell passed from the ingress device of the second line card to the egress device of the first line card through the switch fabric, the backpressuring signal then passing from the egress device of the first line card to the ingress device of the first line card via the first serial bus,</claim-text>
<claim-text>wherein the egress device of the second line card comprises a first integrated circuit, the ingress device of the second line card comprises a second integrated circuit, the egress device of the first line card comprises a third integrated circuit, and the ingress device of the first line card comprises a fourth integrated circuit, wherein the first, second, third and fourth integrated circuits are substantially structurally identical integrated circuits,</claim-text>
<claim-text>wherein each of the first, second, third and fourth integrated circuits is an integrated circuit that has a single data path, the single data path extending from a first bus interface, through segmentation circuitry, through reassembly circuitry, and to a second bus interface.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The system of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein a flow of network information passes from the ingress device of the first line card, through the switch fabric, and to the egress device of the second line card, and wherein the ingress device of the first line card receives the backpressuring signal and in response thereto shows the flow of network information.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The system of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the egress device of the second line card maintains a free buffer queue, the free buffer queue having a size, the egress device of the second line card sending the backpressuring signal via the second serial bus if the egress device of the second line card determines that the size of the free buffer queue has reached a low level.</claim-text>
</claim>
</claims>
</us-patent-grant>
