<us-patent-grant lang="EN" dtd-version="v4.2 2006-08-23" file="US07299352-20071120.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20071106" date-publ="20071120">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>07299352</doc-number>
<kind>B2</kind>
<date>20071120</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>10963302</doc-number>
<date>20041012</date>
</document-id>
</application-reference>
<us-application-series-code>10</us-application-series-code>
<us-term-of-grant>
<us-term-extension>119</us-term-extension>
<disclaimer>
<text>This patent is subject to a terminal disclaimer.</text>
</disclaimer>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>H</section>
<class>04</class>
<subclass>L</subclass>
<main-group>29</main-group>
<subgroup>06</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>H</section>
<class>04</class>
<subclass>L</subclass>
<main-group>29</main-group>
<subgroup>08</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>H</section>
<class>04</class>
<subclass>L</subclass>
<main-group>29</main-group>
<subgroup>04</subgroup>
<symbol-position>L</symbol-position>
<classification-value>N</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>713156</main-classification>
<further-classification>713157</further-classification>
<further-classification>713180</further-classification>
</classification-national>
<invention-title id="d0e55">Controlled-content recoverable blinded certificates</invention-title>
<references-cited>
<citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>4759063</doc-number>
<kind>A</kind>
<name>Chaum</name>
<date>19880700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>380 30</main-classification></classification-national>
</citation>
<citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>4949380</doc-number>
<kind>A</kind>
<name>Chaum</name>
<date>19900800</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>5604805</doc-number>
<kind>A</kind>
<name>Brands</name>
<date>19970200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>380 30</main-classification></classification-national>
</citation>
<citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>5659616</doc-number>
<kind>A</kind>
<name>Sudia</name>
<date>19970800</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>5903882</doc-number>
<kind>A</kind>
<name>Asay et al.</name>
<date>19990500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>705 44</main-classification></classification-national>
</citation>
<citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>5982898</doc-number>
<kind>A</kind>
<name>Hsu et al.</name>
<date>19991100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713156</main-classification></classification-national>
</citation>
<citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>6052467</doc-number>
<kind>A</kind>
<name>Brands</name>
<date>20000400</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>6108644</doc-number>
<kind>A</kind>
<name>Goldschlag et al.</name>
<date>20000800</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>6212634</doc-number>
<kind>B1</kind>
<name>Geer et al.</name>
<date>20010400</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>6763459</doc-number>
<kind>B1</kind>
<name>Corella</name>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713156</main-classification></classification-national>
</citation>
<citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>6871276</doc-number>
<kind>B1</kind>
<name>Simon</name>
<date>20050300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713156</main-classification></classification-national>
</citation>
<citation>
<nplcit num="00012">
<othercit>Chaum David; “Online Cash Checks,” 1998; pp. 288-293.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00013">
<othercit>Stubblebine et al.; “Unlinkable Serial Transactions: Protocols and Applications”; ACM Transactions on Information and Systems Security, vol. 2, Issue 4, Nov. 1999; pp. 354-389; ISSN:1094-9224.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
</references-cited>
<number-of-claims>14</number-of-claims>
<us-exemplary-claim>7</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>713157</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>713156</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>713180</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>7</number-of-drawing-sheets>
<number-of-figures>8</number-of-figures>
</figures>
<us-related-documents>
<continuation>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>09543056</doc-number>
<kind>00</kind>
<date>20000405</date>
</document-id>
<parent-grant-document>
<document-id>
<country>US</country>
<doc-number>6871276</doc-number>
<kind>A </kind>
</document-id>
</parent-grant-document>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>10963302</doc-number>
</document-id>
</child-doc>
</relation>
</continuation>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20050066164</doc-number>
<kind>A1</kind>
<date>20050324</date>
</document-id>
</related-publication>
</us-related-documents>
<parties>
<applicants>
<applicant sequence="001" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Simon</last-name>
<first-name>Daniel R.</first-name>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
</applicants>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Lee &amp; Hayes, PLLC</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</parties>
<assignees>
<assignee>
<addressbook>
<orgname>Microsoft Corporation</orgname>
<role>02</role>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Barrón, Jr.</last-name>
<first-name>Gilberto</first-name>
<department>2132</department>
</primary-examiner>
<assistant-examiner>
<last-name>Perungavoor</last-name>
<first-name>Venkat</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">In a cryptographic system, a certificate is used to provide information regarding a client device. The certificate is blindly signed by a certifying authority to preserve the anonymity of the client device. However, information is encoded into the signature so that a content server can readily verify security attributes of the client device and make decisions regarding the delivery of electronic content to the client device based on those security attributes.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="72.64mm" wi="235.97mm" file="US07299352-20071120-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="259.25mm" wi="196.60mm" orientation="landscape" file="US07299352-20071120-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="255.78mm" wi="205.91mm" orientation="landscape" file="US07299352-20071120-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="219.29mm" wi="132.93mm" file="US07299352-20071120-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="253.15mm" wi="137.24mm" orientation="landscape" file="US07299352-20071120-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="258.83mm" wi="191.60mm" file="US07299352-20071120-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="258.83mm" wi="197.27mm" file="US07299352-20071120-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="255.61mm" wi="196.60mm" file="US07299352-20071120-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">RELATED APPLICATIONS</heading>
<p id="p-0002" num="0001">This is a continuation of application Ser. No. 09/543,056, filed Apr. 5, 2000, now U.S. Pat. No. 6,871,276 entitled “Controlled-Content Recoverable Blinded Certificates”, which is hereby incorporated by reference herein.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0002" level="1">TECHNICAL FIELD</heading>
<p id="p-0003" num="0002">This invention relates to cryptography. More particularly, the invention relates to generating and using controlled-content recoverable blinded certificates.</p>
<heading id="h-0003" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0004" num="0003">The number of people using computers, as well as the tasks they are used to perform, is continually increasing. The Internet is one example of such an increase—more and more people are communicating with one another, researching information, and purchasing goods and services over the Internet. However, accompanying this increasing usage of computers and the Internet is an increasing concern about user-privacy, including concerns that individual's purchasing and researching (or “web surfing”) behavior is being monitored by others.</p>
<p id="p-0005" num="0004">A user can connect to the Internet at any time of day or night and purchase electronic content that is immediately transferred to his or her computer (a process referred to as “downloading”). Examples of such content include music (e.g., MP3 compressed audio files), text (e.g., electronic books), software applications, etc. In order to obtain electronic content over the Internet, the seller or other provider of such content often desires some assurances regarding the security of the device requesting the content (e.g., the user's computer). Such assurances indicate to the seller/provider that the electronic content obtained will not be used inappropriately. For example, an assurance that music files transferred to the device will not be improperly copied to another device.</p>
<p id="p-0006" num="0005">Most users are willing to abide by such “proper usage” requirements for the content they download. However, many are unwilling to forgo any personal privacy in order to do so. For example, many users would be willing to accept a mechanism that gave the seller/provider the desired assurances regarding the security of their computer (or other device), but do not want their identity revealed in order to do so.</p>
<p id="p-0007" num="0006">One way in which these assurances can be made to the seller/provider is for the requesting device to authenticate itself to the seller/provider. Such authentication typically involves the requesting device identifying itself to the seller/provider, either directly or indirectly via the authentication mechanism. This identification, however, can also allow the user's behavior to be tracked. For example, if a user continually uses the same public key for public key encryption when obtaining electronic content, then the user can be tracked using that key. Given the ability to track users using such mechanisms, they are unlikely to achieve widespread user acceptance.</p>
<p id="p-0008" num="0007">The invention described below addresses these disadvantages by providing controlled-content recoverable blinded certificates.</p>
<heading id="h-0004" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0009" num="0008">In a cryptographic system, a certificate is used to provide information regarding a client device. The certificate is blindly signed by a certifying authority to preserve the anonymity of the client device. However, information is encoded into the signature so that a content server can readily verify attributes of the client device.</p>
<p id="p-0010" num="0009">According to one aspect of the invention, a public key cryptographic system is used in which the client device can generate new public/private key pairs at will. A new public key is incorporated into a certificate and blindly signed by the certifying authority. As the certificate is blinded, the certifying authority does not know the exact content of what is being signed, but does encode into the signature the same information as was in the signature of the last certificate it signed for the client device. By changing public keys the client device can prevent other devices from tracking it based on its public key, and by having the new certificate (with the new public key) blindly signed the client device can prevent the certifying authority from equating the previous public key to the new public key.</p>
<p id="p-0011" num="0010">According to another aspect of the invention, the client device is recoverable from a failure of the client device during the process of obtaining a new public key. Such a failure could result in a loss of the information used to generate the new public keys. The client device can recover from such a failure by using a fixed “pseudo-random” number generator to generate “random” numbers based on a fixed seed value. The client device can readily re-generate its previous public/private key pairs using this number generator. Each generated public key is submitted to a certificate archive to determine whether a current valid certificate exists for that public key. The generation and checking process continues until a public/private key pair is generated for which a valid certificate exists.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0012" num="0011">The present invention is illustrated by way of example and not limitation in the figures of the accompanying drawings. The same numbers are used throughout the figures to reference like components and/or features.</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 1</figref> shows a client/server network system and environment in accordance with one embodiment of the invention.</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 2</figref> shows a general example of a computer that can be used in accordance with the invention.</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 3</figref> illustrates an exemplary certificate that can be used in accordance with the invention.</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 4</figref> is a block diagram illustrating an exemplary data flow for blindly signing certificates and using the certificates to obtain electronic content according to one embodiment of the invention.</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 5</figref> illustrates an example of the bit encoding according to one embodiment of the invention.</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 6</figref> is a flowchart illustrating an exemplary process for generating a new blindly signed certificate in accordance with one implementation of the invention.</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 7</figref> is a flowchart illustrating an exemplary process for obtaining content using a new signed certificate in accordance with one implementation of the invention.</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 8</figref> is a flowchart illustrating an exemplary process for restoring a key pair generator to its proper state according to one embodiment of the invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0006" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0021" num="0020">The discussion herein assumes that the reader is familiar with cryptography. For a basic introduction of cryptography, the reader is directed to a text written by Bruce Schneier and entitled “Applied Cryptography: Protocols, Algorithms, and Source Code in C,” published by John Wiley &amp; Sons with copyright 1994 (or second edition with copyright 1996).</p>
<p id="h-0007" num="0000">Network Structure</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 1</figref> shows a client/server network system and environment in accordance with one embodiment of the invention. Generally, the system includes one or more client devices <b>102</b>, one or more content servers <b>104</b>, one or more revocation servers <b>106</b>, and one or more certifying authorities <b>108</b>. The client devices <b>102</b>, servers <b>104</b> and <b>106</b>, and certifying authorities <b>108</b> communicate with one another over a data communications network. The data communications network in <figref idref="DRAWINGS">FIG. 1</figref> is a public network <b>110</b>, such as the Internet. The data communications network might also include local-area networks and/or private wide-area networks, and can include both wired and wireless sections. Alternatively, one or more of client devices <b>102</b>, servers <b>104</b> and <b>106</b>, and certifying authorities <b>108</b> may communicate with each other directly rather than via network <b>110</b>.</p>
<p id="p-0023" num="0022">Client device <b>102</b> includes an original certificate <b>112</b> that identifies various security-related attributes of client device <b>102</b>. In the illustrated example, certificate <b>112</b> is part of a central processing unit (CPU) of client device <b>102</b> and is incorporated into the CPU when the CPU is manufactured (or alternatively when client device <b>102</b> is manufactured). Client device <b>102</b> also includes a current certificate <b>114</b>. Current certificate <b>114</b> is initially the same as original certificate <b>112</b>, but may be subsequently changed, as discussed in more detail below.</p>
<p id="p-0024" num="0023">Client device <b>102</b> further includes a key pair generator <b>116</b> that generates a key pair <b>118</b> including a public key and a private key for the device <b>102</b>. In the illustrated example, generator <b>116</b> generates a key pair in a conventional manner according to the well-known RSA (Rivest, Shamir, and Adelman) encryption technique. A random number seed <b>120</b> provides a fixed seed value to be used by generator <b>116</b> in generating a key pair and recovering its state if necessary, as discussed in more detail below.</p>
<p id="p-0025" num="0024">Client device <b>102</b> also includes a public key <b>122</b> for certifying authority <b>11108</b>. Public key <b>122</b> allows client device <b>102</b> to establish a secure communications link to certifying authority <b>108</b> via network <b>110</b>, as discussed in more detail below.</p>
<p id="p-0026" num="0025">Content server <b>104</b> includes various electronic content <b>124</b> that can be transferred to client <b>102</b> via network <b>110</b> (also referred to as “downloading”). Content <b>124</b> represents any type of electronic content, such as audio content (e.g., songs), video content (e.g., movies), textual content (e.g., articles, books, magazines or newspapers), software (e.g., complete applications, upgrades, or fixes), etc. Content <b>124</b> can include different titles (e.g., multiple different songs and software applications) as well as different versions of the same content (e.g., different quality versions of the same song). To download content <b>124</b>, client device <b>102</b> requests the appropriate content <b>124</b> from content server <b>104</b>. Based on the requested content and the various attributes of client device <b>102</b> (e.g., its security attributes), content server <b>104</b> determines which content (or which version of particular content), if any, it will transfer to client device <b>102</b>.</p>
<p id="p-0027" num="0026">Certifying authority <b>108</b> certifies public keys generated by client device <b>102</b>. This certification provides a verification to content server <b>104</b> that the public key presented to server <b>104</b> by client <b>102</b> is actually from client <b>102</b> and that client <b>102</b> has the attributes that it claims to have. Certifying authority <b>108</b> includes a secure connection module <b>126</b> to establish a secure connection to client <b>102</b> via network <b>110</b>, and a signature module <b>128</b> that certifies the public keys generated by client device <b>102</b> by “signing” the keys, as discussed in more detail below. Certifying authority <b>108</b> also includes a certificate archive <b>130</b> that is a record of currently valid (non-revoked) certificates that have been signed by certifying authority <b>108</b>. A new certificate is added to certificate archive <b>130</b> and the corresponding previous certificate removed from certificate archive <b>130</b> by client device <b>102</b> (or alternatively certifying authority <b>108</b>) when the new certificate is created or signed. Certificate archive <b>130</b> can be used by client <b>102</b> in the event it is recovering the state of key pair generator <b>116</b> or the current key pair <b>118</b>, as discussed in more detail below.</p>
<p id="p-0028" num="0027">Revocation server <b>106</b> maintains a certificate revocation list <b>132</b> that identifies revoked certificates. Certificates of client device <b>102</b>, as well as other client devices coupled to network <b>110</b>, identify the public key and other attributes of those devices. Certifying authority <b>108</b>, in conjunction with client device <b>102</b>, can generate and certify a new certificate having a new public key. During the certification process, client device <b>102</b> (or alternatively certifying authority <b>108</b>) also revokes the previous certificate used by client device <b>102</b>. The previous certificate is revoked so that the previous certificate (and thus the previous public key) of client device <b>102</b> is no longer valid. Certificate revocation list <b>132</b> is a record of these revoked certificates. Alternatively, previous certificates may not be revoked.</p>
<p id="h-0008" num="0000">Exemplary Computer Environment</p>
<p id="p-0029" num="0028">In the discussion below, the invention will be described in the general context of computer-executable instructions, such as program modules, being executed by one or more conventional personal computers. Generally, program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. Moreover, those skilled in the art will appreciate that the invention may be practiced with other computer system configurations, including hand-held devices, multiprocessor systems, microprocessor-based or programmable consumer electronics, network PCs, minicomputers, mainframe computers, and the like. In a distributed computer environment, program modules may be located in both local and remote memory storage devices.</p>
<p id="p-0030" num="0029">Alternatively, the invention can be implemented in hardware or a combination of hardware, software, and/or firmware. For example, the invention can be implemented using one or more application specific integrated circuits (ASICs).</p>
<p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. 2</figref> shows a general example of a computer <b>142</b> that can be used in accordance with the invention. Computer <b>142</b> is shown as an example of a computer that can perform the functions of client device <b>102</b>, content server <b>104</b>, revocation server <b>106</b>, or certifying authority <b>108</b> of <figref idref="DRAWINGS">FIG. 1</figref>. Computer <b>142</b> includes one or more processors or processing units <b>144</b>, a system memory <b>146</b>, and a system bus <b>148</b> that couples various system components including the system memory <b>146</b> to processors <b>144</b>.</p>
<p id="p-0032" num="0031">The bus <b>148</b> represents one or more of any of several types of bus structures, including a memory bus or memory controller, a peripheral bus, an accelerated graphics port, and a processor or local bus using any of a variety of bus architectures. The system memory includes read only memory (ROM) <b>150</b> and random access memory (RAM) <b>152</b>. A basic input/output system (BIOS) <b>154</b>, containing the basic routines that help to transfer information between elements within computer <b>142</b>, such as during start-up, is stored in ROM <b>150</b>. Computer <b>142</b> further includes a hard disk drive <b>156</b> for reading from and writing to a hard disk, not shown, a magnetic disk drive <b>158</b> for reading from and writing to a removable magnetic disk <b>160</b>, and an optical disk drive <b>162</b> for reading from or writing to a removable optical disk <b>164</b> such as a CD ROM or other optical media. The hard disk drive <b>156</b>, magnetic disk drive <b>158</b>, and optical disk drive <b>162</b> are connected to the system bus <b>148</b> by an SCSI interface <b>166</b> or some other appropriate interface. The drives and their associated computer-readable media provide nonvolatile storage of computer readable instructions, data structures, program modules and other data for computer <b>142</b>. Although the exemplary environment described herein employs a hard disk, a removable magnetic disk <b>160</b> and a removable optical disk <b>164</b>, it should be appreciated by those skilled in the art that other types of computer readable media which can store data that is accessible by a computer, such as magnetic cassettes, flash memory cards, digital video disks, random access memories (RAMs) read only memories (ROM), and the like, may also be used in the exemplary operating environment.</p>
<p id="p-0033" num="0032">A number of program modules may be stored on the hard disk, magnetic disk <b>160</b>, optical disk <b>164</b>, ROM <b>150</b>, or RAM <b>152</b>, including an operating system <b>170</b>, one or more application programs <b>172</b>, other program modules <b>174</b>, and program data <b>176</b>. A user may enter commands and information into computer <b>142</b> through input devices such as keyboard <b>178</b> and pointing device <b>180</b>. Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are connected to the processing unit <b>144</b> through an interface <b>182</b> that is coupled to the system bus. A monitor <b>184</b> or other type of display device is also connected to the system bus <b>148</b> via an interface, such as a video adapter <b>186</b>. In addition to the monitor, personal computers typically include other peripheral output devices (not shown) such as speakers and printers.</p>
<p id="p-0034" num="0033">Computer <b>142</b> operates in a networked environment using logical connections to one or more remote computers, such as a remote computer <b>188</b>. The remote computer <b>188</b> may be another personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to computer <b>142</b>, although only a memory storage device <b>190</b> has been illustrated in <figref idref="DRAWINGS">FIG. 2</figref>. The logical connections depicted in <figref idref="DRAWINGS">FIG. 2</figref> include a local area network (LAN) <b>192</b> and a wide area network (WAN) <b>194</b>. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets, and the Internet. In the described embodiment of the invention, remote computer <b>188</b> executes an Internet Web browser program such as the “Internet Explorer” Web browser manufactured and distributed by Microsoft Corporation of Redmond, Wash.</p>
<p id="p-0035" num="0034">When used in a LAN networking environment, computer <b>142</b> is connected to the local network <b>192</b> through a network interface or adapter <b>196</b>. When used in a WAN networking environment, computer <b>142</b> typically includes a modem <b>198</b> or other means for establishing communications over the wide area network <b>194</b>, such as the Internet. The modem <b>198</b>, which may be internal or external, is connected to the system bus <b>148</b> via a serial port interface <b>168</b>. In a networked environment, program modules depicted relative to the personal computer <b>142</b>, or portions thereof, may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.</p>
<p id="p-0036" num="0035">Generally, the data processors of computer <b>142</b> are programmed by means of instructions stored at different times in the various computer-readable storage media of the computer. Programs and operating systems are typically distributed, for example, on floppy disks or CD-ROMs. From there, they are installed or loaded into the secondary memory of a computer. At execution, they are loaded at least partially into the computer's primary electronic memory. The invention described herein includes these and other various types of computer-readable storage media when such media contain instructions or programs for implementing the steps described below in conjunction with a microprocessor or other data processor. The invention also includes the computer itself when programmed according to the methods and techniques described below. Furthermore, certain sub-components of the computer may be programmed to perform the functions and steps described below. The invention includes such sub-components when they are programmed as described. In addition, the invention described herein includes data structures, described below, as embodied on various types of memory media.</p>
<p id="p-0037" num="0036">For purposes of illustration, programs and other executable program components such as the operating system are illustrated herein as discrete blocks, although it is recognized that such programs and components reside at various times in different storage components of the computer, and are executed by the data processor(s) of the computer.</p>
<p id="h-0009" num="0000">Client Certificates</p>
<p id="p-0038" num="0037">Client device <b>102</b> can provide information about itself to content server <b>104</b> via a certificate previously signed by a certifying authority. <figref idref="DRAWINGS">FIG. 3</figref> illustrates an exemplary certificate <b>210</b> that includes a public key <b>212</b> and one or more attributes <b>214</b>. Public key <b>212</b> is the current public key (in accordance with RSA cryptography) being used by client device <b>102</b>. Attributes <b>214</b> identify various characteristics of client device <b>102</b>, such as what type of device client <b>102</b> is or how client <b>102</b> was constructed. For example, attributes may identify client device <b>102</b> as a particular type of device (e.g., a personal computer with an Intel® microprocessor, a personal MP3 audio player, or an Internet browsing device such as a WebTV® terminal or a gaming console), or a device with particular security characteristics (e.g., a computer with an Intel® microprocessor built to run only the Microsoft® Windows NT® operating system). In the illustrated example, attributes <b>214</b> include a security level <b>216</b> of client device <b>102</b> (e.g., a numeric level of a predefined set of security levels) and an identifier <b>218</b> of certifying authority <b>108</b>. Additionally, an expiration date and time <b>220</b> may be included in attributes <b>214</b>, identifying when certificate <b>210</b> will expire (no longer be valid).</p>
<p id="p-0039" num="0038">Client device <b>102</b> includes a processor (such as processing unit <b>144</b> of <figref idref="DRAWINGS">FIG. 2</figref>) that is capable of performing cryptographic functions, such as signing, encrypting, decrypting, and authenticating. An additional cryptographic accelerator (not shown) may also be included to assist the processor with intensive mathematical computations commonly involved in cryptographic functions.</p>
<p id="p-0040" num="0039">The processor manufacturer equips processor <b>144</b> with a pair of public and private keys <b>118</b> that are unique to the processor <b>144</b>, and thus unique to device <b>102</b>. Other physical implementations may include storing the key on an external device to which the main processor has privileged access (where the stored secrets are inaccessible to arbitrary application or operating system code). The private <b>11</b> key is never revealed and is used only for the specific purpose of signing stylized messages, as discussed below in more detail.</p>
<p id="p-0041" num="0040">The processor manufacturer also issues a signed original certificate <b>112</b> testifying that it produced the processor according to a known specification and including the attributes <b>214</b> of <figref idref="DRAWINGS">FIG. 3</figref>. Generally, the certificate <b>112</b> testifies that the manufacturer created the key pair <b>118</b>, placed the key pair onto the processor <b>144</b>, and then destroyed its own knowledge of the private key, or alternatively that the private key was generated internally in the device, and the public key was obtained from it under controlled circumstances by the manufacturer. In this way, nobody but the client device <b>102</b> knows the client device private key; the same key is not issued to other processors. The certificate can in principle be stored on a separate physical device but still logically belongs to the processor with the corresponding key. Alternatively, the manufacturer of client device <b>102</b> rather than the processor <b>144</b> may equip client device <b>102</b> with the public/private key pair <b>118</b> and certificate <b>112</b>.</p>
<p id="p-0042" num="0041">In order for the client device <b>102</b> to cryptographically sign a message (e.g., a certificate), its public key (from key pair <b>118</b>) is made known to the device(s) that will receive the message. The public key can be included in non-encrypted form along with the signed message, or may otherwise be made publicly known. Making the public key publicly known, however, can result in the loss of at least some anonymity of the client device <b>102</b>. If the client device <b>102</b> continually uses the same public key, then that public key can become associated with device <b>102</b> and the transactions conducted, information obtained, etc. can be tracked based on the public key.</p>
<p id="p-0043" num="0042">The invention solves this problem by allowing client device <b>102</b> to change <b>11</b> key pair <b>118</b>. A new key pair can be generated by generator <b>116</b> and the new public key incorporated into a certificate that is forwarded to certifying authority <b>108</b> for certification. The certificate is blinded so that certifying authority <b>108</b> does not know the value of the new public key and thus cannot associate the new public key with the previous public key. However, the certifying authority <b>108</b> digitally signs the certificate from client device <b>102</b> and encodes some (or all) of the same attributes into the new certificate (with the new public key) as were associated with the previous certificate used by client device <b>102</b>. Thus, client device <b>102</b> is able to generate a new key pair and have the public key certified as having the same attributes as the previous key without revealing any information regarding the identity of client device <b>102</b>.</p>
<p id="p-0044" num="0043"><figref idref="DRAWINGS">FIG. 4</figref> is a block diagram illustrating an exemplary data flow for blindly signing certificates and using the certificates to obtain electronic content according to one embodiment of the invention. The client device <b>102</b> and certifying authority <b>108</b> establish a secure connection <b>232</b> between themselves (e.g., via network <b>110</b> of <figref idref="DRAWINGS">FIG. 1</figref>). The client device <b>102</b> generates a new key pair, incorporates the new public key into a new certificate, blinds the new certificate, and transmits the blinded certificate <b>234</b> to certifying authority <b>108</b> via the secure connection <b>232</b>. Client device <b>102</b> also requests that certifying authority <b>108</b> sign the certificate indicating that client device <b>102</b> has all or many of the same attributes as the previous certificate used by client device <b>102</b>. Certifying authority <b>108</b> verifies that the blinded certificate <b>234</b> is to have the same attributes as the previous certificate based on information encoded in the previous signed certificate. If certifying authority <b>108</b> can verify such, then it issues a new signed certificate <b>236</b> for blinded certificate <b>234</b>; otherwise it will not issue signed certificate <b>236</b>.</p>
<p id="p-0045" num="0044">Signed certificate <b>236</b> is received by client <b>102</b> and stored as current certificate <b>114</b> of <figref idref="DRAWINGS">FIG. 1</figref>. Signed certificate <b>236</b> gives client <b>102</b> a valid certificate in which is encoded various attributes. However, since certifying authority <b>108</b> issued signed certificate <b>236</b> based on a blinded certificate, certifying authority <b>108</b> has no knowledge of what the public key in that certificate is.</p>
<p id="p-0046" num="0045">Client <b>102</b> can then use its new public key to obtain electronic content from content server <b>104</b>. Client <b>102</b> forwards the current certificate and a request for content <b>238</b> to content server <b>104</b>. Alternatively, a secure connection between client <b>102</b> and content server <b>104</b> may be established analogous to secure connection <b>232</b> between client <b>102</b> and certifying authority <b>108</b>. Content server <b>104</b> evaluates the request and certificate <b>238</b> to determine what content, if any, to deliver to client <b>102</b> and/or how to deliver the content to client <b>102</b> (e.g., what fee to charge, how to collect the fee, what additional security precautions to insist on, etc.). This determination is made by content server <b>104</b>, at least in part, by evaluating the attributes encoded in the certificate received from client <b>102</b>. Based on its evaluation, content server <b>104</b> forwards the appropriate requested content <b>240</b> in the appropriate manner to client device <b>102</b>.</p>
<p id="p-0047" num="0046">The invention makes use of public key cryptography to encrypt and decrypt information as well as to digitally sign and verify messages. The invention is described using the well-known RSA algorithm. Alternatively, other public key cryptographic algorithms could be used, such as well-known elliptic curve cryptosystems or well-known Diffie-Hellman key agreement protocols.</p>
<p id="p-0048" num="0047">Secure connection <b>232</b> is established by client <b>102</b> and certifying authority <b>108</b> generating a session key. According to one implementation, the session key is generated using the client public key and the certifying authority public key. The client <b>102</b> selects a random value, encrypts the random value with the certifying authority public key <b>122</b> of <figref idref="DRAWINGS">FIG. 1</figref>, and sends the encrypted random value to certifying authority <b>108</b> along with current certificate <b>114</b> (which includes the client public key). The certifying authority <b>108</b> also selects a random value, encrypts the random value with the client public key, and sends the encrypted random value to client <b>102</b>. Each of the client <b>102</b> and certifying authority <b>108</b> can decrypt the encrypted random values they receive using their respective private keys. The client <b>102</b> and certifying authority <b>108</b> then combine the two random values in some known manner (e.g., adding the two values, concatenating the two values, etc.) to generate the session key. All subsequent communications between client <b>102</b> and certifying authority <b>108</b> via secure connection <b>232</b> are encrypted in a conventional manner using this session key.</p>
<p id="p-0049" num="0048">The public and private keys are generated and used in accordance with RSA. Using RSA, two large prime numbers p and q are selected and multiplied to generate a product n. A value e is also generated and is relatively prime to (p−1)(q−1). A value of d, which is the inverse of e is also determined, such that:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>ed=</i>1 <i>mod</i>(<i>p−</i>1)(<i>q−</i>1)<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
The private key then is the pair p and q, or alternatively d, and the public key is the pair n and e.
</p>
<p id="p-0050" num="0049">A message m (e.g., a series of numbers representing a textual message, such as the ASCII values for alphanumerics) can be encrypted to generate m<sub>encrypt </sub>via the following formula:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>m</i><sub>encrypt</sub><i>=m</i><sup>e</sup>(<i>mod n</i>)<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
The intended recipient of the message knows the private key and can easily decrypt the message using the following formula:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>m</i>=(<i>m</i><sub>encrypt</sub><sup>c</sup>)<sup>d</sup>(<i>mod n</i>)<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
However, no known algorithm can efficiently decrypt the encrypted message m<sub>encrypt </sub>without knowing the private key.
</p>
<p id="p-0051" num="0050">A message m can similarly be digitally signed by the owner of the private key to generate m<sub>signed </sub>via the following formula:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>m</i><sub>signed</sub><i>=m</i><sup>d</sup>(<i>mod n</i>)<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
Anyone else that knows the public key can decrypt the signed message m<sub>signed </sub>and verify that it was indeed signed using the private key corresponding to the public key using the following formula:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>m=</i>(<i>m</i><sub>signed</sub><sup>d</sup>)<sup>e </sup>(<i>mod n</i>)<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0052" num="0051">The invention can also have a message m be blindly signed. A blindly signed message is one that is digitally signed without the device doing the signing having any knowledge of the underlying message. Thus, client <b>102</b> can have certifying authority <b>108</b> sign a message m (e.g., including a new public key) without certifying authority <b>108</b> having any knowledge of the actual content of message m (e.g., the new public key). The blinding process is carried out by client <b>102</b> generating a value x and multiplying the message m by the value x<sup>e</sup>. The blinded message mx<sup>e </sup>is then sent to certifying authority <b>108</b>, which signs the blinded message according to the following formula:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>mx</i><sub>signed</sub>=(<i>mx</i><sup>e</sup>)<sup>d</sup>(<i>mod n</i>)<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
This value is returned to client <b>102</b>, which can easily generate the signed message (m<sup>d </sup>(mod n)) according to the following:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>(<i>mx</i><sup>e</sup>)<sup>d</sup>(<i>mod n</i>)=<i>m</i><sup>d</sup>(<i>x</i><sup>e</sup>)<sup>d</sup>(<i>mod n</i>)=<i>m</i><sup>d</sup>(<i>x</i>)(<i>mod n</i>)<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
As client <b>102</b> generated x, it can easily divide this result by x leaving the signed message (m<sup>d </sup>(mod n)).
</p>
<p id="p-0053" num="0052">The digital signature (whether blind or otherwise) can also be carried out using a conventional one-way hash function, such as Secure Hash Algorithm-1 (SHA-1) or Message Digest 5 (MD5). A one-way hash function is a mathematical function that, given an input message, generates an output “hash value”. The one-way hash function is chosen such that it is conjectured to be infeasible, knowing the one-way hash function and given a particular hash value, to find a message which produces the particular hash value. The one-way hash function being used is made publicly known, allowing verification of what was signed.</p>
<p id="p-0054" num="0053">One-way hash functions can be used with the invention in different manners. According to one implementation, client device <b>102</b> uses a hash function to generate a hash value for the certificate, blinds the hash value, and forwards the blinded hash value to certifying authority <b>108</b> for signature. Content server <b>104</b> could then use the known hash function to generate a hash value for the certificate it receives from client device <b>102</b> and verify that it is the same certificate as was presented to certifying authority <b>108</b> if the hash value it computes is the same as the digitally signed hash value.</p>
<p id="p-0055" num="0054">Information is encoded into the digital signature by choice of the public key portion e. The value of e is the product of multiple integers e<sup>i</sup>. The presence of a particular integer e<sup>i </sup>indicates a value of one (or alternatively zero), whereas the absence of a particular integer e<sup>i </sup>indicates a value of zero (or alternatively one). This results in the value e encoding a series of bit values. An additional level of security is added by generating a second value e<sub>2 </sub>which is a product of all of the integers which were not included in e. Each message (e.g., a certificate) would then be signed twice, once with the value of e and once with the value of e<sub>2</sub>. Both of these signed messages would then be verified by content server <b>104</b> in determining whether to provide content to client device <b>102</b>.</p>
<p id="p-0056" num="0055">The values of the integers e<sup>i </sup>should be chosen to be relatively prime to (p−1)(q−1). This can be accomplished, for example, by choosing values of p and q such that (p−1) and (q−1) are both twice a prime number, and skipping the value two when choosing e<sup>i </sup>values.</p>
<p id="p-0057" num="0056">Additionally, with the value of e selected, the corresponding value of d, which is a product of multiple integers d<sup>i</sup>, can be readily determined. The value of each integer d<sup>i </sup>can be determined by calculating the value such that e<sup>i</sup>d<sup>i</sup>=1mod(p−1)(q−1).</p>
<p id="p-0058" num="0057"><figref idref="DRAWINGS">FIG. 5</figref> illustrates an example of the bit encoding according to one embodiment of the invention. In the illustrated example, up to fifteen different integers e<sup>i </sup>are included. In the example encoding <b>248</b>, the first, fourth, ninth and twelfth integers e<sup>i </sup>are included, resulting in the encoded value of 100100001001000. In the example encoding <b>250</b>, the second, third, fifth, sixth, seventh, eighth, tenth, eleventh, thirteenth, fourteenth, and fifteenth integers e<sup>i </sup>are included, resulting in the encoded value of 011011110110111.</p>
<p id="p-0059" num="0058">The information encoded into the digital signature identifies various attributes of client device <b>102</b>. In one implementation, each of the attributes <b>216</b>, <b>218</b>, and <b>220</b> included in certificate <b>210</b> of <figref idref="DRAWINGS">FIG. 3</figref> are encoded into the digital signature. The encoding can further be seen from the following example. Assume that eight different security levels are predefined, one of which is identified as security level <b>216</b> of certificate <b>210</b>. Three different values e<sup>i </sup>(e.g., e<sup>1</sup>, e <sup>2</sup>, and e <sup>3</sup>) are used to encode the security level <b>216</b> into the signature. Thus, assuming that a security level of five would be encoded as its binary representation (101<sub>2</sub>), then the values encoded into the digital signature as e<sup>1</sup>, e<sup>2</sup>, and e<sup>3 </sup>would be 1, 0, and 1, respectively.</p>
<p id="p-0060" num="0059">By way of further example, assume that the values of the fifteen integers e<sup>i </sup>are as indicated in Table I below.</p>
<p id="p-0061" num="0060">
<tables id="TABLE-US-00001" num="00001">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="offset" colwidth="56pt" align="left"/>
<colspec colname="1" colwidth="28pt" align="center"/>
<colspec colname="2" colwidth="133pt" align="center"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="2" rowsep="1">TABLE I</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="2" align="center" rowsep="1"/>
</row>
<row>
<entry/>
<entry>Integer</entry>
<entry>Value</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="2" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="offset" colwidth="56pt" align="left"/>
<colspec colname="1" colwidth="28pt" align="center"/>
<colspec colname="2" colwidth="133pt" align="char" char="."/>
<tbody valign="top">
<row>
<entry/>
<entry>e<sup>1 </sup></entry>
<entry>3</entry>
</row>
<row>
<entry/>
<entry>e<sup>2 </sup></entry>
<entry>5</entry>
</row>
<row>
<entry/>
<entry>e<sup>3 </sup></entry>
<entry>7</entry>
</row>
<row>
<entry/>
<entry>e<sup>4 </sup></entry>
<entry>11</entry>
</row>
<row>
<entry/>
<entry>e<sup>5 </sup></entry>
<entry>13</entry>
</row>
<row>
<entry/>
<entry>e<sup>6 </sup></entry>
<entry>17</entry>
</row>
<row>
<entry/>
<entry>e<sup>7 </sup></entry>
<entry>19</entry>
</row>
<row>
<entry/>
<entry>e<sup>8 </sup></entry>
<entry>23</entry>
</row>
<row>
<entry/>
<entry>e<sup>9 </sup></entry>
<entry>29</entry>
</row>
<row>
<entry/>
<entry>e<sup>10</sup></entry>
<entry>31</entry>
</row>
<row>
<entry/>
<entry>e<sup>11</sup></entry>
<entry>37</entry>
</row>
<row>
<entry/>
<entry>e<sup>12</sup></entry>
<entry>41</entry>
</row>
<row>
<entry/>
<entry>e<sup>13</sup></entry>
<entry>43</entry>
</row>
<row>
<entry/>
<entry>e<sup>14</sup></entry>
<entry>47</entry>
</row>
<row>
<entry/>
<entry>e<sup>15</sup></entry>
<entry>53</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0062" num="0061">Using the values listed in Table I, the value of encoding <b>248</b> would be 3·11·29·41, the product of which is 39,237. Similarly, the value of encoding <b>250</b> would be 5·7·13·17·19·23·31·37·43·47·53, the product of which is 11,223,947,638,085.</p>
<p id="p-0063" num="0062">Certifying authority <b>108</b> uses this value e with encoded information to sign the blind certificate it receives from client device <b>102</b>. Certifying authority <b>108</b> generates the signature for the new certificate based on the encoded information in the previous certificate's signature (the previously signed certificate from client device <b>102</b> was received during the establishment of secure connection <b>232</b> of <figref idref="DRAWINGS">FIG. 4</figref>). For the first certificate signed by certifying authority <b>108</b> for client device <b>102</b>, there is no previously signed certificate. Thus, certifying authority <b>108</b> relies on the digital signature of the manufacturer on original certificate <b>112</b> of <figref idref="DRAWINGS">FIG. 1</figref> to verify the certificate and encodes the attributes from original certificate <b>112</b> into the signature. Certifying authority <b>108</b> can thus ensure that it does not attribute any greater level of security to the device when encoding information into the new certificate than was encoded into the previous certificate.</p>
<p id="p-0064" num="0063">Certifying authority <b>108</b> may, however, modify the information encoded in the new signature. For example, an expiration date and time for the certificate may be encoded into the signature, indicating that the certificate is valid for a period of six months after issuance. Thus, each time the client device <b>102</b> requests a new signed certificate, certifying authority <b>108</b> encodes the new expiration date and time into the new signature.</p>
<p id="p-0065" num="0064">In order to obtain content from content server <b>104</b>, client device <b>102</b> forwards a request for content and its current signed certificate <b>238</b> to content server <b>104</b>. The signed certificate makes a representation to content server <b>104</b> of various attributes of client device <b>102</b>. Content server <b>104</b> verifies these attributes using the information encoded into the digital signature.</p>
<p id="p-0066" num="0065">Both the public key portion n and the encodings for e used by certifying authority <b>108</b> are made known to content server <b>104</b>. The public key portion n and the encodings for e can be made publicly known, or alternatively can be communicated securely (e.g., using public-key encryption) to content server <b>104</b> from certifying authority <b>108</b>. Given the attributes that client device <b>102</b> claims to have, and the encodings used by certifying authority <b>108</b> in signing client certificates, content server <b>104</b> can readily determine whether the attributes encoded in the digital signature match the claimed attributes. For example, using the encodings a proposed value of e can be generated based on the claimed attributes. This proposed value of e can then be used, in conjunction with the public key portion n received from certifying authority <b>108</b>, to verify the signature of the certificate.</p>
<p id="p-0067" num="0066">If the claimed attributes are not verified, then content server <b>104</b> can refuse to provide content to client device <b>102</b>. However, if the claimed attributes are verified, then content server <b>104</b> transmits the requested content <b>240</b> to client device <b>102</b>. What content and/or how the content is transmitted to client device <b>102</b> can vary depending on the attributes of client device <b>102</b>. For example, a fee may or may not be imposed, a particular quality level of content may be transmitted, confirmation from client device <b>102</b> of additional security precautions that must be taken, a licensing agreement accepted, etc.</p>
<p id="p-0068" num="0067"><figref idref="DRAWINGS">FIG. 6</figref> is a flowchart illustrating an exemplary process for generating a new blindly signed certificate in accordance with one implementation of the invention. Steps on the left side of <figref idref="DRAWINGS">FIG. 6</figref> are implemented by client device <b>102</b> of <figref idref="DRAWINGS">FIGS. 1 and 4</figref>, while steps on the right side of <figref idref="DRAWINGS">FIG. 6</figref> are implemented by certifying authority <b>108</b> of <figref idref="DRAWINGS">FIGS. 1 and 4</figref>. The process of <figref idref="DRAWINGS">FIG. 6</figref> may be performed in software. <figref idref="DRAWINGS">FIG. 6</figref> is described with additional reference to components in <figref idref="DRAWINGS">FIGS. 1 and 4</figref>.</p>
<p id="p-0069" num="0068">Initially, client device <b>102</b> and certifying authority <b>108</b> establish a secure connection between each other (steps <b>252</b> and <b>254</b>) based on the client's previous certificate (so that the certifying authority knows the correct attributes to encode into the new certificate). Client <b>102</b> then constructs a new public/private key pair (step <b>256</b>). Client <b>102</b> then constructs a new certificate by replacing the public key in its current certificate with the new public key, and blinds the new certificate (step <b>258</b>). Client <b>102</b> sends the blinded certificate to certifying authority <b>108</b> (step <b>260</b>). Certifying authority <b>108</b> receives the blinded certificate (step <b>262</b>) and signs the blinded certificate encoding attributes into the signature based on the previous certificate (step <b>264</b>).</p>
<p id="p-0070" num="0069">Certifying authority <b>108</b> then sends the signed blinded certificate to client device <b>102</b> (step <b>266</b>). Client device <b>102</b> receives the signed blinded certificate (step <b>268</b>), and unblinds the signed blinded certificate to generate the signed certificate (step <b>270</b>).</p>
<p id="p-0071" num="0070"><figref idref="DRAWINGS">FIG. 7</figref> is a flowchart illustrating an exemplary process for obtaining content using a new signed certificate in accordance with one implementation of the invention. Steps on the left side of <figref idref="DRAWINGS">FIG. 7</figref> are implemented by client device <b>102</b> of <figref idref="DRAWINGS">FIGS. 1 and 4</figref>, while steps on the right side of <figref idref="DRAWINGS">FIG. 7</figref> are implemented by content server <b>104</b> of <figref idref="DRAWINGS">FIGS. 1 and 4</figref>. The process of <figref idref="DRAWINGS">FIG. 7</figref> may be performed in software. <figref idref="DRAWINGS">FIG. 7</figref> is described with additional reference to components in <figref idref="DRAWINGS">FIGS. 1 and 4</figref>.</p>
<p id="p-0072" num="0071">Initially, client device <b>102</b> generates a content request (step <b>282</b>). This may be automatically generated by client device <b>102</b> or alternatively may be in response to a user request at client device <b>102</b>. Client <b>102</b> sends the request and current certificate <b>114</b> (signed by certifying authority <b>108</b>) to content server <b>104</b> (step <b>284</b>).</p>
<p id="p-0073" num="0072">Content server <b>104</b> receives the request and signed certificate (step <b>286</b>), and identifies the attributes encoded in the signature (step <b>288</b>). Content server <b>104</b> then checks whether the attributes in the certificate match the attributes encoded in the signature (step <b>290</b>). If the attributes do not match, then the process stops (step <b>292</b>), and content server <b>104</b> does not provide the requested content to client device <b>102</b>. Content server <b>104</b> assumes that if the attributes do not match, the certificate has been tampered with and thus the certificate and client device <b>102</b> are not trustworthy. Thus, the content of the certificate is “controlled” —any attempts by a user to alter the certificate (e.g., to increase the security level of his or her device) would be detected.</p>
<p id="p-0074" num="0073">However, if the attributes match, then content server <b>104</b> decides, based on the attributes, whether to supply content, how to supply content, and/or what content to supply to client <b>102</b> (step <b>294</b>). Server <b>104</b> then transmits the appropriate content to client <b>102</b> (step <b>296</b>), which receives the requested content (step <b>298</b>).</p>
<p id="h-0010" num="0000">Key Recovery</p>
<p id="p-0075" num="0074">Returning to <figref idref="DRAWINGS">FIG. 1</figref>, a new key pair for client device <b>102</b> can be generated by key pair generator <b>116</b>. Generator <b>116</b> includes a pseudo-random number generator that produces a string of “random” numbers based on a fixed initial seed value <b>120</b>. Seed value <b>120</b> is fixed—it is stored in a manner so that it is not lost in the event of a system failure (e.g., it may be programmed into a nonvolatile read only memory). The state of the pseudo-random number generator is saved after a random number is generated so that the next time a random number is to be generated it can pick up from its most recent state. The pseudo-random number generator uses a fixed algorithm(s) to generate its “random” number output, such as RC4, available from RSA Security, Inc. of Bedford, Mass.</p>
<p id="p-0076" num="0075">To generate a new key pair, generator <b>116</b> generates two random integers (via the pseudo-random number generator) and begins testing each integer, as well as the successors of each, for primality. The order in which successors are tested is fixed (and thus can be subsequently duplicated if necessary, as discussed in more detail below). Any of a wide variety of conventional techniques can be used to test for primality, such as the well-known Miller-Rabin or Solovay-Strassen techniques. Once a prime number has been identified from each sequence (which are the values p and q of the private key), the value of n for the public key can be readily generated by multiplying the two prime numbers.</p>
<p id="p-0077" num="0076">Situations can arise where client <b>102</b> needs to re-generate previously generated public/private key pairs. For example, a failure of client device <b>102</b> at an inopportune moment may cause client <b>102</b> to lose its private key (e.g., erased from memory) and/or the random number generator to lose its current state. In such situations, client <b>102</b> re-starts its key pair generation process with seed value <b>120</b> to bring key pair generator <b>116</b> back to its previous state.</p>
<p id="p-0078" num="0077"><figref idref="DRAWINGS">FIG. 8</figref> is a flowchart illustrating an exemplary process for restoring key pair generator <b>116</b> to its proper state according to one embodiment of the invention. The process of <figref idref="DRAWINGS">FIG. 8</figref> is implemented by client device <b>102</b> of <figref idref="DRAWINGS">FIG. 1</figref>, and may be performed in software. <figref idref="DRAWINGS">FIG. 8</figref> is described with additional reference to components in <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0079" num="0078">Initially, generator <b>116</b> generates a public/private key pair based on its seed value <b>120</b> (step <b>312</b>). Because the seed value <b>120</b> has not changed and the algorithm(s) for generating the prime numbers of the private key are fixed, each time that generator <b>116</b> generates a public/private key pair using its seed value <b>120</b> the same public/private key pair will be generated. Generator <b>116</b> then requests a valid certificate for the generated public key (step <b>314</b>). This request is made to a certificate server or archive, which is archive <b>130</b> in the illustrated example of <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0080" num="0079">The certificate server or archive will check whether a valid certificate exists for the public key and return either the valid certificate or an indication that no such certificate exists. Generator <b>116</b> checks whether it receives a valid certificate or an indication that no such certificate exists (step <b>316</b>). If a valid certificate exists, then its state has been restored (step <b>318</b>). However, if no such certificate exists then generator <b>116</b> generates another public/private key pair (step <b>320</b>). Eventually, a valid certificate will be received and the state of generator <b>116</b> restored (step <b>318</b>).</p>
<heading id="h-0011" level="1">CONCLUSION</heading>
<p id="p-0081" num="0080">Thus, the invention provides controlled-content recoverable blinded certificates. A client device can readily create a new public key with a digital signature from a certifying authority and with security attributes of the client <b>11</b> device advantageously encoded into the digital signature. A blinding process is used to blind the public key for signature, thereby preventing the certifying authority from tracking the client device based on the relationship between its previous public key and its new public key. A content server can use these encoded security attributes to determine whether and how to provide requested electronic content to the client device. Additionally, according to one aspect of the invention, the client device uses a fixed algorithm and a fixed seed value to generate public/private key pairs, thereby advantageously allowing the client device to recover from a failure during the process of changing its public key.</p>
<p id="p-0082" num="0081">Although the invention has been described in language specific to structural features and/or methodological steps, it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features or steps described. Rather, the specific features and steps are disclosed as preferred forms of implementing the claimed invention.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>The invention claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method comprising:
<claim-text>receiving, from a client, a current signed certificate and a request to sign a new certificate;</claim-text>
<claim-text>determining attributes of the client based on the current signed certificate;</claim-text>
<claim-text>selecting, in accordance with public key cryptography, a public/private key pair that is based at least in part on the attributes of the client; and</claim-text>
<claim-text>digitally signing the new certificate using the selected private key.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. A method as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the attributes are security attributes of the client.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. A method as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the new certificate is a blinded certificate.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. A method as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising determining additional information to encode into the digital signature, and wherein the selecting further comprises selecting the public/private key pair based on the attributes of the client and the additional information.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. A method as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the selecting comprises determining a bit pattern that corresponds to the security attributes of the client, and identifying a public/private key pair that corresponds to the bit pattern.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. A method as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the digitally signing comprises calculating a value of a formula
<claim-text>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>(blinded certificate)<sup>d</sup>mod(n),<?in-line-formulae description="In-line Formulae" end="tail"?>
</claim-text>
<claim-text>wherein d represents a private key of a device performing the digital signing and wherein n is a product of two prime numbers that comprise the private key.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. A method comprising:
<claim-text>generating a public/private key pair for use in public key cryptography;</claim-text>
<claim-text>creating a certificate including the public key;</claim-text>
<claim-text>transmitting the certificate to a certificate archive;</claim-text>
<claim-text>receiving, from the certificate archive, an indication of whether the certificate is currently valid; and</claim-text>
<claim-text>repeating the generating, creating, transmitting, and receiving for additional certificates until an indication that one of the certificates is currently valid is received.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. One or more computer-readable memories containing a computer program that is executable by a processor to perform the method recited in <claim-ref idref="CLM-00007">claim 7</claim-ref>.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. A method for recovering from a device failure in a public key encryption system, the method comprising the following acts:
<claim-text>(a) generating a public/private key pair using a fixed algorithm and a fixed seed value;</claim-text>
<claim-text>(b) creating a certificate incorporating the public key;</claim-text>
<claim-text>(c) querying a certificate archive as to whether the certificate is valid;</claim-text>
<claim-text>(d) if the certificate is not valid, then generating a new public/private key pair using the fixed algorithm and based on the public key;</claim-text>
<claim-text>(e) repeating acts (b)-(d) until a valid certificate is created.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. One or more computer-readable memories containing a computer program that is executable by a processor to perform the method recited in <claim-ref idref="CLM-00009">claim 9</claim-ref>.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. One or more computer-readable media containing a plurality of instructions that, when executed by one or more processors, causes the one or more processors to:
<claim-text>receive, from a client, a current signed certificate and a request to sign a new certificate;</claim-text>
<claim-text>determine attributes of the client based on the current signed certificate;</claim-text>
<claim-text>select, in accordance with public key cryptography, a public/private key pair that is based at least in part on the attributes of the client; and</claim-text>
<claim-text>digitally sign the new certificate using the selected private key.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. One or more computer-readable media as recited in <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the attributes are security attributes of the client.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. One or more computer-readable media as recited in <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the new certificate is a blinded certificate.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. One or more computer-readable media as recited in <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the instructions that cause the one or more processors to select the public/private key pair further cause the one or more processors to determine a bit pattern that corresponds to the security attributes of the client, and identify a public/private key pair that corresponds to the bit pattern.</claim-text>
</claim>
</claims>
</us-patent-grant>
