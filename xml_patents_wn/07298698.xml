<us-patent-grant lang="EN" dtd-version="v4.2 2006-08-23" file="US07298698-20071120.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20071106" date-publ="20071120">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>07298698</doc-number>
<kind>B1</kind>
<date>20071120</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>10325448</doc-number>
<date>20021220</date>
</document-id>
</application-reference>
<us-application-series-code>10</us-application-series-code>
<us-term-of-grant>
<us-term-extension>1085</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>H</section>
<class>04</class>
<subclass>L</subclass>
<main-group>1</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>370231</main-classification>
<further-classification>370462</further-classification>
<further-classification>709225</further-classification>
<further-classification>709226</further-classification>
<further-classification>709229</further-classification>
</classification-national>
<invention-title id="d0e53">Method and apparatus for statistically controlling priority between queues</invention-title>
<references-cited>
<citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>4253146</doc-number>
<kind>A</kind>
<name>Bellamy et al.</name>
<date>19810200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709226</main-classification></classification-national>
</citation>
<citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>4593282</doc-number>
<kind>A</kind>
<name>Acampora et al.</name>
<date>19860600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370447</main-classification></classification-national>
</citation>
<citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>4779267</doc-number>
<kind>A</kind>
<name>Limb</name>
<date>19881000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370232</main-classification></classification-national>
</citation>
<citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>5208805</doc-number>
<kind>A</kind>
<name>Ochiai</name>
<date>19930500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370389</main-classification></classification-national>
</citation>
<citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>5353287</doc-number>
<kind>A</kind>
<name>Kuddes et al.</name>
<date>19941000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370448</main-classification></classification-national>
</citation>
<citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>6470014</doc-number>
<kind>B1</kind>
<name>Ono et al.</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>3703951</main-classification></classification-national>
</citation>
</references-cited>
<number-of-claims>14</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>370230</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>370231</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>370412-420</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>370437</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>370462</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>370463</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709225</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709226</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709229</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>3</number-of-drawing-sheets>
<number-of-figures>3</number-of-figures>
</figures>
<parties>
<applicants>
<applicant sequence="001" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Callum</last-name>
<first-name>Roy</first-name>
<address>
<city>Beaverton</city>
<state>OR</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
</applicants>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Blakely, Sokoloff, Taylor &amp; Zafman LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</parties>
<assignees>
<assignee>
<addressbook>
<orgname>Intel Corporation</orgname>
<role>02</role>
<address>
<city>Santa Clara</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Kizou</last-name>
<first-name>Hassan</first-name>
<department>2616</department>
</primary-examiner>
<assistant-examiner>
<last-name>Zhu</last-name>
<first-name>Bo Hui A.</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A method and apparatus for controlling access to a plurality of resources at a predetermined ratio based on multiple received requests. The system includes a series of multiplexors, adders, subtractors, multi-bit clocked registers, and comparators arranged to maintain the desired predetermined ratio. The registers act to maintain a first value correlated to a first quantity of requests granted for a first requester in excess of an amount desired according to the predetermined ratio and maintain a second value correlated to a second quantity of requests granted for a second requester with respect to the total requests desired from the second requester. One comparator compares the value from the first register with a predetermined value to assess whether to grant access to the first requestor.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="139.78mm" wi="219.96mm" file="US07298698-20071120-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="221.57mm" wi="155.28mm" orientation="landscape" file="US07298698-20071120-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="190.58mm" wi="161.97mm" orientation="landscape" file="US07298698-20071120-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="217.09mm" wi="183.30mm" orientation="landscape" file="US07298698-20071120-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0002" num="0001">1. Field of the Invention</p>
<p id="p-0003" num="0002">The present invention relates generally to the field of priority control, and more specifically to controlling the priority accorded to more than one queue seeking access to a shared resource.</p>
<p id="p-0004" num="0003">2. Description of the Related Art</p>
<p id="p-0005" num="0004">Data communication networks receive and transmit ever increasing amounts of data. Data is transmitted from an originating entity or requester, through the network to a destination, such as a channel or resource. Along this path may be multiple points that receive data, typically in the form of packets or data frames, and along each point data must be routed to the next point in the network in a rapid and efficient manner. Certain protocols or standards may be employed in transferring data from one point to another, and such standards enable hardware and software employing different configurations to effectively receive and transfer the data. Such standards include, but are not limited to, Utopia, X.25, and other standards promulgated by the ITU and ANSI.</p>
<p id="p-0006" num="0005">The points throughout the data network operate to receive data requests or packets from various requesters and provide results or satisfy requests in an orderly and efficient manner. Requests may arrive synchronously or asynchronously, and requests may be for access to multiple resources or channels or to particular sets of resources or channels. A single requester may request access to multiple resources at one time. The hardware or software at the data transmission point in the data network acts as a traffic officer, deciding which data packets receive priority in transmission while requiring others to wait.</p>
<p id="p-0007" num="0006">The traditional hardware or software used to perform this access control function has been a form of arbiter. Other designs have been employed, including lookup tables, FIFO arrangements, and other designs known to those skilled in the art. An arbiter receives requests from requesters and allocates those requests among the channels or resources sequentially according to requester position. For example, if requestors one through five seek access to a Channel A, and requesters one through four transmit multiple requests while requester five transmits one request, the arbiter allows access in an ordered manner to requesters one through five and subsequently to one through four until all requests have been satisfied. If requester five has not made a request, the arbiter skips requester five and goes on to the next requester in sequence. If requester five adds a request at some point during arbitration, this new request is satisfied sequentially. This is sometimes referred to as round robin arbitration. Arbitration differs from a FIFO arrangement in that input channels are individually queued in arbitration, while FIFO employs a single queue, and the first request received from any requester is the first request satisfied.</p>
<p id="p-0008" num="0007">The problems with previous arbitration and FIFO arrangements include a general inability to prioritize the arriving requests in a predetermined ratio, such as permitting channel one to have access to 75 percent of the resource while permitting channel two only 25 percent of the resource. It is desirable for certain requests, requesters, or channels to receive higher priority or greater access to the resource than others. Previous arbitration schemes simply go through the requests from the requesters in order and allow them access to the resource when a request is present and when it is the requestor's “turn.” FIFO arrangements cycle through the requests as received with no allowance for priority or ratio of access to the resource. In the previous arbitration arrangement, using the foregoing example, if requester one is to be accorded 25 percent of the accesses to the resource but generates a large number of requests in a short amount of time, while requester two is to be accorded 75 percent of the accesses, the previous arbitration scheme will grant the request from requester one any time the requester one queue includes a request. A FIFO will simply grant access based on order received with no regard to the desired ratio. This granting of a slot to undesirable requests based on the desired ratio hinders system performance by slowing desirable requests. The result is delays to satisfy requests, lower throughput, or incorrect ratio throughput at the data transfer point.</p>
<p id="p-0009" num="0008">While arbiters and FIFOs are simple, straightforward, and relatively well known, it would be desirable to offer a simple, straightforward mechanism or method that provides for statistical control, such as controlling ratio, between queues using relatively well known devices.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0002" level="1">DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0010" num="0009">The present invention is illustrated by way of example, and not by way of limitation, in the figures of the accompanying drawings in which:</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 1</figref> is a dual level statistical priority controller or arbitrator that controls queue access to a resource at a ratio of M:N;</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 2</figref> illustrates one hardware implementation of the statistical priority controller or arbitrator that controls access to a resource at a ratio of M:N, specifically within a network interface hardware setting; and</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 3</figref> is a multiple level statistical priority controller or arbitrator that controls queue access to a resource at a ratio of M:N:P.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0003" level="1">DETAILED DESCRIPTION OF THE INVENTION</heading>
<p id="p-0014" num="0013">The present design addresses the situation where two or more queues of requests seek access to a shared resource and it is desired that the two or more queues obtain access to the shared resource so that the ratio of tasks is fixed, such as at a ratio of M:N or M:N:P. The present design statistically controls the priority of assignment without starving one queue or the other. Further, a daisy-chained system as disclosed can enable multiple queues having multiple ratios, such as M:N:P for three queues. More than three queues can also be served based on the system and method teachings presented herein.</p>
<p id="p-0015" num="0014">A simple solution to controlling priority when two queues seek access to a resource would be to simply count out M tasks from one queue and N tasks from the other queue. This simple solution works when the queues have tasks available, but if queues produce requests or tasks intermittently or in bursts, use of this simple mechanism results in inefficient use of the shared resource. The resource will be idle waiting for tasks from one queue when the other queue has processed the requisite number of requests or tasks. If the simple mechanism is set up to skip work from a queue when it has no work available, the M:N ratio is not followed.</p>
<p id="p-0016" num="0015">In the present design, the ratio values such as M and N may generally be from 0 to 15, where the ratio M:N or M:N:P or otherwise is generally maintained without many of the problems associated with previous systems. One aspect of the design is illustrated in <figref idref="DRAWINGS">FIG. 1</figref>. From <figref idref="DRAWINGS">FIG. 1</figref>, multiplexors <b>102</b>, <b>104</b>, <b>108</b>, and <b>110</b> receive three inputs and make a decision between the two inputs received on the left side of the multiplexors based on the signal received at the top of the multiplexor. When a signal received at the top of each multiplexor <b>102</b>, <b>104</b>, <b>108</b>, and <b>110</b> is True, the signal marked with a “1” is passed for each of multiplexor <b>102</b>, <b>104</b>, <b>108</b>, or <b>110</b>. Multi-bit clocked registers <b>105</b> and <b>111</b> are employed as storage and are clocked at the clocking rate of the device. Adder <b>101</b> receives an input, adds N to that input, and transmits N plus the input as its output. Subtractor <b>107</b> also receives an input, subtracts M from the input, and transmits the input minus M as its output.</p>
<p id="p-0017" num="0016">Incrementor <b>109</b> increments its input, or adds one to the value received. Decrementor <b>103</b> decrements its input, or subtracts one from the value received. Comparator <b>112</b> determines whether the value received is greater than or equal to M. If the value received by comparator <b>112</b> is greater than M, the output is set True; if not, output is set False. Comparator <b>106</b> compares the received value to zero, and if the value received is greater than or equal to zero, the output of comparator <b>106</b> is True. If the value received is less than zero, the output is set False.</p>
<p id="p-0018" num="0017">The system <b>100</b> receives four values as inputs, namely M, N, queue_M_used and queue_N_used. M and N represent the statistical ratio between the two queues to be allowed access to the resource, while queue_M_used indicates use of the shared resource by queue M, and queue_N_used indicates use of the shared resource by queue M. The values queue_M_used and queue_N_used indicate usage of a queue on a previous frame; thus if queue M is used at frame one, the value of queue_M_used at frame two is True while the value of queue_N_used at frame two is false. The output of the queue is priority_N, which indicates priority should be given to servicing the N queue. If True, priority is given to servicing the N queue, where if False, priority is given to servicing the M queue.</p>
<p id="p-0019" num="0018">In operation, assume that the desired ratio is three instances of M having access to the resource are to pass for every one instance of N having access to the resource, or an M:N ratio of 3:1. Each time the M queue is used, 1 is added to the value stored in multi-bit clocked register <b>111</b>. When the value stored in multi-bit clocked register <b>111</b> is equal to or exceeds M, M is subtracted from the value stored in multi-bit clocked register <b>111</b>, and N is added to the value stored in multi-bit clocked register <b>105</b>. Generally, during the same frame, the value of N is added to the value stored in multi-bit clocked register <b>105</b>. Every time that queue N is used, a value of 1 is subtracted from the value stored in multi-bit clocked register <b>105</b>. Thus the value stored in multi-bit clocked register <b>105</b> represents the number of N queue tasks needed to be serviced to maintain the M:N ratio. The system tests the output of multi-bit clocked register <b>105</b> and if the output of multi-bit clocked register <b>105</b> is non-negative, priority is given to servicing the N queue based on output in the form of priority_N.</p>
<p id="p-0020" num="0019">For a ratio of 3:1, during a first frame, no value is true coming in to multiplexors <b>102</b>, <b>104</b>, <b>108</b>, or <b>110</b>. the value in multiplexor <b>104</b> is zero, which passes to multi-bit clocked register <b>105</b>, which is greater than or equal to zero. Thus priority_N is True, and queue N is allowed access to the resource. The value of 0 passes from multi-bit clocked register <b>111</b>, and 0 is compared against M, or 3, at comparator <b>112</b>. 0 is not greater than or equal to 3, and thus output of comparator <b>112</b> is False, and the signals add_N and sub_M are false as well.</p>
<p id="p-0021" num="0020">In the next frame, the value of queue_N_used is 1, the value of queue_M_used is 0. Values are fed back from multi-bit clocked register <b>105</b> and multi-bit clocked register <b>111</b>, and in this case values of 0 are fed back in both cases. Adder <b>101</b> adds N to 0, for a total of 1. add_N is false, and thus 0 passes to multiplexor <b>102</b>. queue_N_used is true, and thus the value of (0-1) or −1 is received from subtractor <b>103</b> and passes at multiplexor <b>104</b>. The value of −1 is stored in multi-bit clocked register <b>105</b>. In the lower path, subtractor <b>107</b> subtracts 1 from 0, but sub_M is false, and thus 0 passes through multiplexor <b>108</b>. queue_M_used is False, and 0 passes from multiplexor <b>110</b> and 0 is stored in multi-bit clocked register <b>111</b>. The output of comparator <b>106</b> is False, and thus one priority M request is permitted. The value in comparator <b>112</b> remains False, as the value in multi-bit clocked register <b>111</b> remains 0.</p>
<p id="p-0022" num="0021">In frame three, queue_N_used is False, queue_M_used is True, and sub_M and add_N are both False. Thus the lower paths are used for both multiplexor <b>102</b> and multiplexor <b>104</b>, with −1 passed from multi-bit clocked register <b>105</b> and 0 from multi-bit clocked register <b>111</b>. The lower value is passed at multiplexor <b>104</b> of −1, while 1 is added at incrementor <b>109</b> to the 0 value to produce 1 coming from multiplexor <b>110</b> to multi-bit clocked register <b>111</b>. One is still not greater than or equal to 3, thus output from comparator <b>112</b> is False, while the −1 in multi-bit clocked register <b>105</b> again makes comparator <b>106</b> false. Thus M is allowed access in frame three, with values in multi-bit clocked register <b>105</b> being −1 and multi-bit clocked register <b>111</b> being 1. Frame four operates much like frame three, allowing the M queue access while only incrementing the value in multi-bit clocked register <b>111</b> to 2. Frame five operates in the same manner as frame four, but the value in multi-bit clocked register <b>111</b> is 3, which is greater than or equal to 3, and thus output from comparator <b>112</b> is True, and sub_M and add_N are True. Frame five allows the M queue access to the resource.</p>
<p id="p-0023" num="0022">In frame six, both multiplexors <b>102</b> and <b>108</b> pass the upper levels since sub_M and add_N are True. The value in multi-bit clocked register <b>105</b> is −1, while the value in multi-bit clocked register <b>111</b> is 3. Adder <b>101</b> adds 1 to −1 to produce 0, and with queue_N_used False, multiplexor <b>104</b> passes the value of 0 to multi-bit clocked register <b>105</b>. 0 is greater than or equal to 0, so comparator <b>106</b> allows access to the N queue. In the lower segment, 3 is fed back from multi-bit clocked register <b>111</b> and subtractor <b>107</b> subtracts 3 from this value, yielding 0. queue_M_used is True, and thus 1 is added to 0 to produce 1 from multiplexor <b>110</b> to multi-bit clocked register <b>111</b>. The value of 1 is not greater than or equal to 3, and thus the value from comparator <b>112</b> is False. Further frames progress in a manner similar to that described in this example.</p>
<p id="p-0024" num="0023">The value maintained in multi-bit clocked register <b>105</b> at any given frame thus correlates to a quantity of N requests granted more than desired according to the ratio. For −1 in multi-bit clocked register <b>105</b>, this correlates to one more N request granted than desired to maintain the ratio. The value maintained in multi-bit clocked register <b>111</b> at any given frame thus correlates to a quantity of M requests granted with respect to the total M requests desired. For a value of 2 contained in multi-bit clocked register <b>111</b>, this correlates to 2 M requests granted of the 3 desired M value. The value in multi-bit clocked register <b>105</b> my go exceedingly negative, while the value in multi-bit clocked register <b>105</b> may go exceedingly positive depending on the requests received.</p>
<p id="p-0025" num="0024">The bit width of multi-bit clocked register <b>105</b> and multi-bit clocked register <b>111</b> is finite. The bit width of multi-bit clocked register <b>111</b> generally should be one bit wider than the binary value accorded to M. For M able to vary between, for example, 0 and 15, inclusive, the multi-bit clocked register <b>111</b> may be five bits wide (four bits for values 0-15 plus one bit). The size of multi-bit clocked register <b>105</b> is larger, as this multi-bit clocked register <b>105</b> provides storage of the averaging data over time and typically includes a sign bit. In the implementation shown, the contents of multi-bit clocked register <b>105</b> can be either positive or negative and thus the register must allow for a sign bit. Multi-bit clocked register <b>111</b> in this aspect only includes positive numbers or zero and thus may omit a sign bit. The size of each multi-bit clocked register depends on the application and the number of requests received in a given amount of time, but for a general networking implementation in accordance with the foregoing example, a 9 bit representation is generally sufficient for multi-bit clocked register <b>105</b>. Greater values of M or N, or a significant number of requests from one queue arriving before another queue, may require additional bit width for multi-bit clocked register <b>105</b>. Multi-bit clocked registers <b>105</b> and <b>111</b> may be provided with overflow testing capability such that the values included do not exceed the bit width. An overflow condition indicates requests are arriving from one queue and not the other. In such a condition, a maximum value may be maintained, and additional accesses by the oversubscribed queue may be discarded or ignored using overflow protection. Thus if queue M constantly is accorded access to the resource because no queue N requests are available, multi-bit clock register <b>111</b> keeps incrementing until a maximum value is reached based on bit width, for example 32, and any received M access is ignored and the value in multi-bit clocked register <b>111</b> remains 32. When an N request is granted, M counts down from 32 and the system <b>100</b> seeks to maintain the M:N ratio from that point forward. Simply put, if 50 requests are received from queue M while 0 requests are received from queue N, few practical systems can maintain a reasonable M:N ratio for access.</p>
<p id="p-0026" num="0025">A system employing the design is illustrated in <figref idref="DRAWINGS">FIG. 2</figref>. From <figref idref="DRAWINGS">FIG. 2</figref>, cryptographic processor <b>201</b> is requested by various network requesters, and the system <b>200</b> controls access to the cryptographic processor <b>201</b>. The system <b>200</b> represents a network interface card (NIC), having a PCI (Peripheral Component Interconnect) interface <b>202</b>, representing a circuit board bus connection to connect boards to memory and the CPU (central processing unit) within network hardware. The MAC/PHY <b>203</b> is the Medium Access/Physical Layer that provides access to the Physical Layer of the network hardware. MAC/PHY <b>203</b> provides data along datapath <b>204</b> and is received at receiver <b>205</b> for PCI Interface <b>202</b>. PCI Interface <b>202</b> employs transmitter <b>206</b> to transmit data via datapath <b>207</b> back to MAC/PHY <b>205</b>. Datapath <b>204</b> passes data in the form of requests to switch <b>208</b>, while transmitter <b>206</b> also passes data in the form of requests to switch <b>208</b>. Arbiter <b>100</b> controls access of the datapath <b>204</b> and transmitter <b>206</b> to the cryptographic processor <b>201</b>. For example, in accordance with the terminology used in the foregoing discussion of <figref idref="DRAWINGS">FIG. 1</figref>, datapath <b>204</b> may be considered queue M and transmitter <b>206</b> considered queue N. The desired ratio may be, for example, 3 datapath <b>204</b> requests for every 2 transmitter <b>206</b> requests. Receipt of an N request at switch <b>208</b> indicates permitting access to the cryptographic processor <b>201</b> by transmitter <b>206</b>, while receipt of a “not N” or M request from arbiter <b>100</b> enables the datapath <b>204</b> to have access to cryptographic processor <b>201</b>. The cryptographic processor <b>201</b> may transmit results to receiver <b>205</b> or datapath <b>207</b> as shown in <figref idref="DRAWINGS">FIG. 2</figref> or to some other desired location.</p>
<p id="p-0027" num="0026">The arbiter <b>100</b> is therefore employed to control which path has access to cryptographic processor <b>201</b> at any one time. M and N in this implementation are programmed into registers where M controls the receive path priority and N controls the transmit path priority.</p>
<p id="p-0028" num="0027">The design may be extended in certain circumstances to multiple queues. For example, if three queues M, N, and P seek access to one resource, and it is desired to maintain a ratio of 50 percent access to M, 25 percent access to N, and 25 percent access to P, a daisy-chained arrangement of the arbiter of <figref idref="DRAWINGS">FIG. 1</figref> may be provided as shown in <figref idref="DRAWINGS">FIG. 3</figref>. For the M:N:P ratio of 50:25:25 or 2:1:1, the system first employs a design virtually identical to that of <figref idref="DRAWINGS">FIG. 1</figref> to decide between queues M and N. In this arrangement, M is 2 while N is 1, a ratio of 2:1 between M and N, equivalent to two M access indications for every N indication.</p>
<p id="p-0029" num="0028">From <figref idref="DRAWINGS">FIG. 3</figref>, multiplexors <b>302</b>, <b>304</b>, <b>308</b>, and <b>310</b> receive three inputs and make a decision between the two inputs received on the left side of the multiplexors based on the signal received at the top of the multiplexor. When the signal received at the top is True, the signal marked with a “1” is passed for each multiplexors <b>302</b>, <b>304</b>, <b>308</b>, and <b>310</b>. Multi-bit clocked registers <b>305</b> and <b>311</b> are employed as storage and are clocked at the clocking rate of the device. Adder <b>301</b> receives an input, adds N to that input, and transmits N plus the input as its output. Subtractor <b>307</b> also receives an input, subtracts M from the input, and transmits the input minus M as its output.</p>
<p id="p-0030" num="0029">Incrementor <b>309</b> increments its input, or adds one to the value received. Decrementor <b>303</b> decrements its input, or subtracts one from the value received. Comparator <b>312</b> determines whether the value received by comparator <b>312</b> is greater than M, the output is set True; if not, output is set False. Comparator <b>306</b> compares the received value to zero, and if the value received is greater than or equal to zero, the output of comparator <b>306</b> is True. If the value received is less than zero, the output is set False.</p>
<p id="p-0031" num="0030">Operation of this system is similar to that of the design in <figref idref="DRAWINGS">FIG. 1</figref>. The same inputs are received, and output is either True or False, where True indicates provide queue N with access, and False indicates provide queue M with access.</p>
<p id="p-0032" num="0031">This priority_N value, true or false, passes to the second stage, which decides between M/N queue and P queue. To maintain the 2:1:1 ratio from the foregoing example, the value of M/N would be 3:1, meaning 3 M/N requests pass for every one P request.</p>
<p id="p-0033" num="0032">Multiplexors <b>352</b>, <b>354</b>, <b>358</b>, and <b>360</b> receive three inputs and make a decision between the two inputs received on the left side of each multiplexor based on the signal received at the top of the multiplexor. When the signal received at the top is True, the signal marked with a “1” is passed for each multiplexors <b>352</b>, <b>354</b>, <b>358</b>, and <b>360</b>. Multi-bit clocked registers <b>355</b> and <b>361</b> are employed as storage and are clocked at the clocking rate of the device. Adder <b>351</b> receives an input, adds M/N (in this example, 3) to that input, and transmits M/N plus the input as its output. Subtractor <b>357</b> also receives an input, subtracts P (1 in this example) from the input, and transmits the input minus P as its output.</p>
<p id="p-0034" num="0033">Incrementor <b>359</b> increments its input, or adds one to the value received. Decrementor <b>353</b> decrements its input, or subtracts one from the value received. Comparator <b>362</b> determines whether the value received is greater than or equal to P. If the value received by comparator <b>362</b> is greater than P, the output is set True; if not, output is set False. Comparator <b>356</b> compares the received value to zero, and if the value received is greater than or equal to zero, the output of comparator <b>356</b> is True. If the value received is less than zero, the output is set False.</p>
<p id="p-0035" num="0034">If the output of comparator <b>356</b> is False, requestor P is provided with access to the resource. If the output of comparator <b>356</b> is True, either requestor M or N is provided access to the resource, depending on the output from comparator <b>306</b>. Certain special processing must exist for this additional queue access analysis. Evaluator <b>380</b> determines the queue allowed based on the signals received from comparator <b>306</b> and comparator <b>356</b>. For example, if priority_N is True and priority_M/N is True, Priority N is transmitted. As may be appreciated, resetting of registers, setting feedback values such as add_N and sub_M, and compensating for allowing one queue access but not the other two queues requires slight modifications that would be within the skill of one knowledgeable in the art. For example, in a situation where P is granted, where priority_N is either True or False but priority_M/N from comparator <b>356</b> is False, Priority P is allowed. However, in the subsequent frame, queue_M_used and queue_N_used feeding multiplexors <b>304</b> and <b>310</b>, for example, would not both be set False. The upper elements would not change until either the M queue or the N queue is granted. In this manner, multiple queues can be offered access to the resource at a predetermined statistical ratio between requesting queues.</p>
<p id="p-0036" num="0035">It will be appreciated to those of skill in the art that the present design may be applied to other systems that perform arbitration, and is not restricted to the arbitration structures and processes described herein.</p>
<p id="p-0037" num="0036">Further, while specific queues, channels, requesters, ratios, and resources have been discussed herein, it is to be understood that more or less or different types of each may be employed while still within the scope of the present invention. Accordingly, any and all modifications, variations, or equivalent arrangements which may occur to those skilled in the art, should be considered to be within the scope of the present invention as defined in the appended claims.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A system for controlling access to a resource, wherein access to the resource is enabled at a predetermined ratio between requestors, comprising:
<claim-text>a first request register configured to maintain a first value correlated to a first quantity of requests granted for a first requestor in excess of an amount desired according to the predetermined ratio;</claim-text>
<claim-text>a second request register configured to maintain a second value correlated to a second quantity of requests granted for a second requestor with respect to total requests desired from the second requestor;</claim-text>
<claim-text>a first comparator coupled to compare the value from the first register with a predetermined value to generate a signal for granting priority access to the resource to one of the first or second requestors; and</claim-text>
<claim-text>a second comparator for comparing the second value from the second register to the total requests desired from the second requestor.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising a first plurality of multiplexors configured to receive signals based on the results of the second comparator, wherein a valid signal from the second comparator causes the plurality of multiplexors to change values according to the predetermined ratio.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The system of <claim-ref idref="CLM-00002">claim 2</claim-ref>, further comprising a second plurality of multiplexors configured to receive indication of a previous frame request granted and allow signals to pass based on the previous frame request granted.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The system of <claim-ref idref="CLM-00003">claim 3</claim-ref>, further comprising:
<claim-text>an incrementor coupled to the first request register to increment the first value by a first integer representing that portion of the predetermined ratio associated with the first requestor; and</claim-text>
<claim-text>a decrementor coupled to the second request register to decrement the second value by a second integer representing that portion of the predetermined ratio associated with the second requestor.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>an incrementor coupled to the first request register to increment the first value by a first integer representing that portion of the predetermined ratio associated with the first requestor; and</claim-text>
<claim-text>a decrementor coupled to the second request register to decrement the second value by a second integer representing that portion of the predetermined ratio associated with the second requester.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising a switch connected to the first comparator enabling access to the resource based on the value received from the first comparator.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. A method of controlling access to a resource according to a predetermined ratio between requestors, comprising:
<claim-text>computing a first value correlated to a first quantity of requests granted for a first requester in excess of an amount desired according to the predetermined ratio;</claim-text>
<claim-text>calculating a second value correlated to a second quantity of requests granted for a second requestor with respect to the total requests desired from the second requestor according to the predetermined ratio;</claim-text>
<claim-text>comparing the first value with a predetermined value to assess whether to grant access to the first requestor;</claim-text>
<claim-text>comparing the second value to the total requests desired from the second requestor to generate a signal fed back to cause a change in the first and second values according to the predetermined ratio dependent upon the signal; and</claim-text>
<claim-text>granting access priority to one of the first or second requestors for accessing the resource dependent upon the comparing of the first value with the predetermined value.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, further comprising:
<claim-text>further receiving indication of a previous frame request granted; and</claim-text>
<claim-text>allowing signals to pass based on the previous same request granted.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, further comprising:
<claim-text>incrementing the first value by a first integer representing that portion of the predetermined ratio associated with the first requestor; and</claim-text>
<claim-text>decrementing the second value by a second integer representing that portion of the predetermined ratio associated with the second requestor.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. A system for controlling access to a resource according to a predetermined ratio between requestors, comprising:
<claim-text>a request register containing a value;</claim-text>
<claim-text>a ratio alteration block connected to the request register;</claim-text>
<claim-text>a first multiplexor configured to receive the value from the request register and a quantity from the ratio alteration block;</claim-text>
<claim-text>a unitary alteration block connected to the first multiplexor and configured to alter a first multiplexor value received from the first multiplexor by one unit;</claim-text>
<claim-text>a second multiplexor configured to receive input from the unitary alteration block and the first multiplexor; and</claim-text>
<claim-text>a comparator coupled to compare output from the request register to a predetermined value to generate a signal for granting priority access to the resource between the requestors,</claim-text>
<claim-text>wherein the request register receives the value from the second multiplexor.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The system of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein output from said comparator indicates a requestor granted access to the resource.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The system of <claim-ref idref="CLM-00010">claim 10</claim-ref>, further comprising:
<claim-text>a second request register containing a second value;</claim-text>
<claim-text>a second ratio alteration block connected to the second request register;</claim-text>
<claim-text>a third multiplexor configured to receive the second value from the request register and a second quantity from the ratio alteration block;</claim-text>
<claim-text>a second unitary alteration block connected to the third multiplexor and configured to alter a third multiplexor value received from a third multiplexor by one unit; and</claim-text>
<claim-text>a fourth multiplexor configured to receive input from the second unitary alteration block and the third multiplexor;</claim-text>
<claim-text>wherein the second request register receives the value from the fourth multiplexor.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The system of <claim-ref idref="CLM-00012">claim 12</claim-ref>, further comprising a second comparator for comparing output from the register to a second predetermined value.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The system of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein output from said second comparator provides input to said first multiplexor and said third multiplexor.</claim-text>
</claim>
</claims>
</us-patent-grant>
