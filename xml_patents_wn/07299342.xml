<us-patent-grant lang="EN" dtd-version="v4.2 2006-08-23" file="US07299342-20071120.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20071106" date-publ="20071120">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>07299342</doc-number>
<kind>B2</kind>
<date>20071120</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>11201842</doc-number>
<date>20050811</date>
</document-id>
</application-reference>
<us-application-series-code>11</us-application-series-code>
<us-term-of-grant>
<us-term-extension>26</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>9</main-group>
<subgroup>302</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>712222</main-classification>
<further-classification>712 32</further-classification>
<further-classification>712 37</further-classification>
</classification-national>
<invention-title id="d0e53">Complex vector executing clustered SIMD micro-architecture DSP with accelerator coupled complex ALU paths each further including short multiplier/accumulator using two's complement</invention-title>
<references-cited>
<citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>4760525</doc-number>
<kind>A</kind>
<name>Webb</name>
<date>19880700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>712  2</main-classification></classification-national>
</citation>
<citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5361367</doc-number>
<kind>A</kind>
<name>Fijany et al.</name>
<date>19941100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>712 15</main-classification></classification-national>
</citation>
<citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>5491828</doc-number>
<kind>A</kind>
<name>Intrater et al.</name>
<date>19960200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>712 35</main-classification></classification-national>
</citation>
<citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>5805875</doc-number>
<kind>A</kind>
<name>Asanovic</name>
<date>19980900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>712222</main-classification></classification-national>
</citation>
<citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>5987556</doc-number>
<kind>A</kind>
<name>Nakagawa et al.</name>
<date>19991100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2003/0005261</doc-number>
<kind>A1</kind>
<name>Sheaffer</name>
<date>20030100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2003/0172249</doc-number>
<kind>A1</kind>
<name>Ganapathy et al.</name>
<date>20030900</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2003/0212728</doc-number>
<kind>A1</kind>
<name>Dagan et al.</name>
<date>20031100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2005/0278502</doc-number>
<kind>A1</kind>
<name>Hundley</name>
<date>20051200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00010">
<othercit>Nilsson, et al, “An accelerator structure for programmable multi-standard baseband processors,” Proceedings of the IAESTED Wireless Networks Conference, Jul. 2004.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00011">
<othercit>Glossner, et al, “A Multithreaded Processor Architecture for SDR,” Proceedings of the Korean Institute of Communication Sciences, pp. 70-85, Nov. 2002, vol. 19, No. 11, web site ce.et.tudelft.nl/publicationfiles/625<sub>—</sub>22<sub>—</sub>sandbridge<sub>—</sub>korean<sub>—</sub>institute<sub>—</sub>paper.pdf.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00012">
<othercit>Brash, “The ARM Architecture Version 6 (ARMv6)”, Jan. 2002, web site.arm.com/support/White<sub>—</sub>Papers.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
</references-cited>
<number-of-claims>34</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>None</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>7</number-of-drawing-sheets>
<number-of-figures>7</number-of-figures>
</figures>
<us-related-documents>
<continuation-in-part>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>11135964</doc-number>
<kind>00</kind>
<date>20050524</date>
</document-id>
<parent-status>PENDING</parent-status>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>11201842</doc-number>
</document-id>
</child-doc>
</relation>
</continuation-in-part>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20060271764</doc-number>
<kind>A1</kind>
<date>20061130</date>
</document-id>
</related-publication>
</us-related-documents>
<parties>
<applicants>
<applicant sequence="001" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Nilsson</last-name>
<first-name>Anders Henrik</first-name>
<address>
<city>Linköping</city>
<country>SE</country>
</address>
</addressbook>
<nationality>
<country>SE</country>
</nationality>
<residence>
<country>SE</country>
</residence>
</applicant>
<applicant sequence="002" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Tell</last-name>
<first-name>Eric Johan</first-name>
<address>
<city>Linköping</city>
<country>SE</country>
</address>
</addressbook>
<nationality>
<country>SE</country>
</nationality>
<residence>
<country>SE</country>
</residence>
</applicant>
<applicant sequence="003" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Liu</last-name>
<first-name>Dake</first-name>
<address>
<city>Linköping</city>
<country>SE</country>
</address>
</addressbook>
<nationality>
<country>SE</country>
</nationality>
<residence>
<country>SE</country>
</residence>
</applicant>
</applicants>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Meyertons Hood Kivlin Kowert &amp; Goetzel, P.C.</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="02" rep-type="attorney">
<addressbook>
<last-name>Curran</last-name>
<first-name>Stephen J.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</parties>
<assignees>
<assignee>
<addressbook>
<orgname>Coresonic AB</orgname>
<role>03</role>
<address>
<city>Johanneshov</city>
<country>SE</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Kim</last-name>
<first-name>Kenneth S.</first-name>
<department>2111</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A programmable digital signal processor including a clustered SIMD microarchitecture includes a plurality of accelerator units, a processor core and a complex computing unit. Each of the accelerator units may be configured to perform one or more dedicated functions. The processor core includes an integer execution unit that may be configured to execute integer instructions. The complex computing unit may be configured to execute complex vector instructions. The complex computing unit may include a first and a second clustered execution pipeline. The first clustered execution pipeline may include one or more complex arithmetic logic unit datapaths configured to execute first complex vector instructions. The second clustered execution pipeline may include one or more complex multiplier accumulator datapaths configured to execute second complex vector instructions.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="175.60mm" wi="234.70mm" file="US07299342-20071120-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="174.58mm" wi="177.80mm" file="US07299342-20071120-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="246.13mm" wi="188.64mm" orientation="landscape" file="US07299342-20071120-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="190.67mm" wi="174.84mm" file="US07299342-20071120-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="232.49mm" wi="181.61mm" orientation="landscape" file="US07299342-20071120-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="237.49mm" wi="188.64mm" file="US07299342-20071120-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="216.58mm" wi="173.06mm" file="US07299342-20071120-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="205.99mm" wi="181.61mm" file="US07299342-20071120-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<p id="p-0002" num="0001">This application is a continuation-in-part of prior application Ser. No. 11/135,964, filed May 24, 2005.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0003" num="0002">1. Field of the Invention</p>
<p id="p-0004" num="0003">This invention relates to digital signal processors and, more particularly, to programmable digital signal processor microarchitecture.</p>
<p id="p-0005" num="0004">2. Description of the Related Art</p>
<p id="p-0006" num="0005">In a relatively short period of time, the use of wireless devices and especially mobile telephones has increased dramatically. This worldwide proliferation of wireless devices has lead to a large number of emerging radio standards and a convergence of wireless products. This in turn has lead to an increasing interest in Software Defined Radio (SDR).</p>
<p id="p-0007" num="0006">SDR, as described by the SDR Forum, is “a collection of hardware and software technologies that enable reconfigurable system architectures for wireless networks and user terminals. SDR provides an efficient and comparatively inexpensive solution to the problem of building multi-mode, multi-band, multi-functional wireless devices that can be enhanced using software upgrades. As such, SDR may be considered an enabling technology that is applicable across a wide range of areas within the wireless industry.”</p>
<p id="p-0008" num="0007">Many wireless communication devices use a radio transceiver that includes one or more digital signal processors (DSP). One type of DSP used in the radio is a baseband processor (BBP), which may handle many of the signal processing functions associated with processing of the received the radio signal and preparing signals for transmission. For example, a BBP may provide modulation and demodulation, as well as channel coding and synchronization functionality.</p>
<p id="p-0009" num="0008">Many conventional BBPs are implemented as Application Specific Integrated Circuit (ASIC) devices, which may support a single radio standard. In many cases, ASIC BBPs may provide excellent performance. However, ASIC solutions may be limited to operate within the radio standard for which the on-chip hardware was designed.</p>
<p id="p-0010" num="0009">To provide an SDR solution, increased flexibility may be needed in radio baseband processors to meet requirements for time to market, cost and product lifetime. To handle the requirements of demanding applications such as Wireless Local Area Networks (LAN), third/fourth generation mobile telephony, and digital video broadcasting, a large degree of parallelism may be needed in the baseband processor.</p>
<p id="p-0011" num="0010">To that end, various programmable BBP (PBBP) solutions have been suggested that are typically based on highly complex, very long instruction word (VLIW) and/or multiple processor core machines. These conventional PBBP solutions may have drawbacks such as increased die area and possibly limited performance when compared to their ASIC counterparts. Thus, it may be desirable to have a programmable DSP architecture that may support a large number of different modulation techniques, bandwidth and mobility requirements, and may also have acceptable area and power consumption.</p>
<heading id="h-0002" level="1">SUMMARY</heading>
<p id="p-0012" num="0011">Various embodiments of a programmable digital signal processor including a clustered SIMD microarchitecture are disclosed. In one embodiment, a digital signal processor includes a plurality of accelerator units, a processor core and a complex computing unit. Each of the accelerator units may be configured to perform one or more dedicated functions. The processor core includes an integer execution unit that may be configured to execute integer instructions. The complex computing unit may be configured to execute complex vector instructions. The complex computing unit may include a first and a second clustered execution pipeline. The first clustered execution pipeline may include one or more complex arithmetic logic unit datapaths configured to execute first complex vector instructions. The second clustered execution pipeline may include one or more complex multiplier accumulator datapaths configured to execute second complex vector instructions.</p>
<p id="p-0013" num="0012">In one specific implementation, each data path within the clustered execution pipelines may be configured to natively interpret all data as complex valued data.</p>
<p id="p-0014" num="0013">In another specific implementation, each datapath within a given clustered execution pipeline may execute a single complex operation that is part of a vector instruction per clock cycle. In addition, the integer execution unit may execute a single instruction per clock cycle concurrent with execution of any complex vector instructions executed by any of the datapaths within the first and the second clustered execution pipelines.</p>
<p id="p-0015" num="0014">In yet another specific implementation, the complex computing unit may execute single instruction multiple data (SIMD) instructions.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram of one embodiment of a multi-mode wireless communication device including a programmable baseband processor.</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 2</figref> is a block diagram of one embodiment of the programmable baseband processor of <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 3</figref> is a diagram illustrating the instruction issue pipelines of one embodiment of the programmable baseband processor of <figref idref="DRAWINGS">FIG. 2</figref>.</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 4</figref> is a block diagram illustrating more detailed aspects of one embodiment of the programmable baseband processor of <figref idref="DRAWINGS">FIG. 2</figref>.</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 5</figref> is a diagram illustrating more detailed aspects of one embodiment of the clustered SIMD control path of the processor core of <figref idref="DRAWINGS">FIG. 2</figref>.</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 6</figref> is a diagram of one embodiment of the complex short MAC datapath of the complex ALU shown in <figref idref="DRAWINGS">FIG. 4</figref>.</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 7</figref> is a diagram of one embodiment of an exemplary datapath of the complex MAC unit shown in <figref idref="DRAWINGS">FIG. 4</figref>.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<p id="p-0023" num="0022">While the invention is susceptible to various modifications and alternative forms, specific embodiments thereof are shown by way of example in the drawings and will herein be described in detail. It should be understood, however, that the drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed, but on the contrary, the intention is to cover all modifications, equivalents, and alternatives falling within the spirit and scope of the present invention as defined by the appended claims. Note, the headings are for organizational purposes only and are not meant to be used to limit or interpret the description or claims. Furthermore, note that the word “may” is used throughout this application in a permissive sense (i.e., having the potential to, being able to), not a mandatory sense (i.e., must). The term “include” and derivations thereof mean “including, but not limited to.” The term “connected” means “directly or indirectly connected,” and the term “coupled” means “directly or indirectly coupled.”</p>
<heading id="h-0004" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0024" num="0023">Turning now to <figref idref="DRAWINGS">FIG. 1</figref>, a block diagram of one embodiment of a multi-mode wireless communication device including a programmable baseband processor is shown. In the illustrated embodiment, some of the basic partitioning of a radio communication system from both functional and hardware points of view are shown. More particularly, the multimode wireless communication device <b>100</b> includes a receive subsystem <b>110</b> and a transmit subsystem <b>120</b>, each of which is coupled to one or more antenna(s) <b>125</b>. It is noted that in various embodiments, multimode wireless communication device may be a hand-held mobile telephony device or the like. It is further noted that components having a reference designator that includes both a number and a letter may be referred to by just the number where appropriate.</p>
<p id="p-0025" num="0024">Receive subsystem <b>110</b> includes a portion of RF front end <b>130</b> that is coupled between antenna <b>125</b> and an analog-to-digital converter (ADC) <b>140</b>. The ADC <b>140</b> is coupled to programmable baseband processor (PBBP) <b>145</b>A, which is in turn coupled to application processor(s) <b>150</b>. Transmit subsystem <b>120</b> includes applications processor(s) <b>160</b> coupled to PBBP <b>145</b>B, which is coupled to digital-to-analog converter (DAC) <b>170</b>. DAC <b>170</b> is also coupled to a portion of RF front end <b>130</b>. It is noted that PBBP <b>145</b>A and <b>145</b>B may be implemented as one programmable processor and in some embodiments they may be manufactured on a single integrated circuit. It is also noted that in some embodiments ADC <b>140</b> and DAC <b>170</b> may be implemented as part of PBBP <b>145</b>A. It is further noted that in other embodiments, communication device <b>100</b> may be implemented on a single integrated circuit.</p>
<p id="p-0026" num="0025">PBBP <b>145</b> performs many functions in both transmit subsystem <b>120</b> and receive subsystem <b>110</b>. Within transmit subsystem <b>120</b>, the PBBP <b>145</b>B may convert data from application sources to a format adapted to the radio channel. For example, transmit subsystem <b>120</b> may perform functions such as channel coding, digital modulation, and symbol shaping. Channel coding refers to using different methods for error correction (e.g., convolutional coding) and error detection (e.g., using a cyclic redundancy code (CRC)). Digital modulation refers to the process of mapping a bit stream to a stream of complex samples. The first (and sometimes the only) step in the digital modulation is to map groups of bits to a specific signal constellation, such as Binary Phase Shift Keying (BPSK), Quadrature Phase Shift Keying (QPSK), or Quadrature Amplitude Modulation (QAM). There are various ways of mapping groups of bits to the amplitude and phase of a radio signal. In some cases, a second step, domain translation, may be applied. In an Orthogonal Frequency Division Multiplexing (OFDM) system (i.e., a modulation method where information is sent over a large number of adjacent frequencies simultaneously), an Inverse Fast Fourier Transform (IFFT) may be used for this step. In a spread spectrum system such as Code Division Multiple Access (CDMA), for example, (a “spread spectrum” method of allowing multiple users to share the RF spectrum by assigning each active user an individual “code”), each symbol is multiplied with a spreading sequence including {0, +/−1}+{0, +/−i}. The final step is symbol shaping, which transforms the square wave to a band-limited signal using a digital band pass filter. Since channel coding and mapping functions typically operate on a bit level (and not on a word level), they are generally not suitable for implementation in a programmable processor. However, as will be described in greater detail below, in various embodiments of PBBP <b>145</b>, these functions and others may be implemented using one or more dedicated hardware accelerators.</p>
<p id="p-0027" num="0026">PBBP <b>145</b> may perform such functions as synchronization, channel equalization, demodulation, and forward error correction. For example, receive subsystem <b>110</b> may recover symbols from the distorted analog baseband signal and translate them to a bit stream with an acceptable bit error rate (BER) for applications running in applications processor(s) <b>150</b>.</p>
<p id="p-0028" num="0027">Synchronization may be divided into several steps. The first step may include detecting an incoming signal or frame, and is sometimes referred to as “energy detection.” In connection with this, operations such as antenna selection and gain control, may also be carried out. The next step is symbol synchronization, which aims to find the exact timing of the incoming symbols. All the preceding operations are typically based on complex auto- or cross-correlations.</p>
<p id="p-0029" num="0028">In many cases, it may be necessary that receive subsystem <b>110</b> perform some kind of compensation for imperfections in the radio channel. This compensation is known as channel equalization. In OFDM systems, channel equalization may involve a simple scaling and rotation of each sub-carrier after performing an FFT. In a CDMA system, a “rake” receiver is often used to combine incoming signals from multiple signal paths with different path delays. In some systems, least mean square (LMS) adaptive filters may be used. Similar to synchronization, most operations involved in channel estimation and equalization may employ convolution-based algorithms. These algorithms are generally not similar enough to share the same fixed hardware. However they may be implemented efficiently on a programmable DSP processor such as PBBP <b>145</b>.</p>
<p id="p-0030" num="0029">Demodulation may be thought of as the opposite operation of modulation. Demodulation typically involves performing an FFT in OFDM systems and a correlation with spreading sequence or “de-spread” in DSSS/CDMA systems. The last step of demodulation may be to convert the complex symbol to bits according to the signal constellation. Similar to channel coding, de-interleaving and channel decoding may not be suitable for firmware implementation. However, as described in greater detail below, Viterbi or Turbo decoding, which may be used for convolutional codes, are very demanding functions that may be implemented as one or more hardware accelerators.</p>
<p id="h-0005" num="0000">Programmable Baseband Processor Architecture</p>
<p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. 2</figref> illustrates a block diagram of one embodiment of the programmable baseband processor of <figref idref="DRAWINGS">FIG. 1</figref>. PBBP <b>145</b> may support different radio standards with multiple modes of operation (i.e., preamble reception, payload reception, and transmission) and different data rates, by providing dynamic reconfigurability. To achieve the desired reconfigurability, various embodiments of PBBP <b>145</b> may include a central processor core that manages the DSP flow by controlling the interconnection between the processor core, multiple memory units, and a variety of hardware accelerators using an internal network.</p>
<p id="p-0032" num="0031">Referring to <figref idref="DRAWINGS">FIG. 2</figref>, PBBP <b>145</b> includes a processor core <b>146</b>, and a complex computing unit <b>290</b>. PBBP <b>145</b> also includes a plurality of data memory units designated 0 through n, where n may be any number. PBBP <b>145</b> also includes a plurality of hardware accelerators, designated 0 through m, where m may be any number. In addition, PBBP <b>145</b> includes a network interconnect <b>250</b> that is coupled between the processor core <b>146</b> and complex computing unit <b>290</b>, and each of the data memories and the accelerators. Further, PBBP <b>145</b> includes integer and coefficient memory units, designated <b>220</b> and <b>215</b>, respectively, each of which are coupled to the processor core <b>146</b> and complex computing unit <b>290</b> via network interconnect <b>250</b>. Lastly, PBBP <b>145</b> includes a medium access layer (MAC) interface unit <b>225</b>, which is coupled between network interconnect <b>250</b> and a Host/MAC processor such as applications processors <b>150</b> and <b>160</b> for example.</p>
<p id="p-0033" num="0032">In the illustrated embodiment, processor core <b>146</b> includes an integer execution unit <b>260</b> that is coupled to control registers CR <b>265</b> and to network interconnect <b>250</b>. Integer execution unit <b>260</b> includes an ALU <b>261</b>, a multiplier accumulator unit <b>262</b> and a set of register files (RF) <b>263</b>. In one embodiment, integer execution unit <b>260</b> may function as a reduced instruction set controller (RISC) configured to execute 16-bit integer instructions, for example. It is noted that in other embodiments, integer execution unit <b>260</b> may be configured to execute different sized integer instructions such as 8-bit or 32-bit instructions, for example.</p>
<p id="p-0034" num="0033">In various embodiments, complex computing unit <b>290</b> may include multiple clustered single-instruction multiple-data (SIMD) execution pipelines. Accordingly, in the embodiment illustrated in <figref idref="DRAWINGS">FIG. 2</figref>, complex computing unit <b>290</b> includes a SIMD cluster pipeline <b>295</b>A and a SIMD cluster pipeline <b>295</b>B. SIMD cluster pipeline <b>295</b>A includes a complex multiplier accumulator (CMAC) unit <b>270</b> and a vector controller <b>275</b>A that is coupled to CMAC <b>270</b>. In addition, SIMED cluster pipeline <b>295</b>A includes a vector load unit (VLU) <b>284</b>A and a vector store unit (VSU) <b>283</b>A, each of which are coupled to CMAC <b>270</b>. SIMD cluster pipeline <b>295</b>B includes a complex arithmetic logic unit (CALU) <b>280</b> coupled to a vector controller <b>275</b>B. SIMD cluster pipeline <b>295</b>B further includes a VSU <b>283</b>B, and a VLU <b>284</b>B, each of which are coupled to CALU <b>280</b>.</p>
<p id="p-0035" num="0034">In the illustrated embodiment, CALU <b>280</b> is shown as a four-way complex ALU that may include four independent datapaths each having a complex short multiplier-accumulator (CSMAC) (shown in <figref idref="DRAWINGS">FIG. 4</figref>). As will be described in greater detail below, CALU <b>280</b> may execute vector instructions. In one embodiment, CALU <b>280</b> may be particularly suited to execute complex vector instructions. Further, each of the independent datapaths of CALU <b>280</b> may concurrently execute the complex vector instructions.</p>
<p id="p-0036" num="0035">CMAC <b>270</b> may be optimized for operations on vectors of complex numbers. That is to say, in one embodiment, CMAC <b>270</b> may be configured to interpret all data as complex data. In addition, CMAC <b>270</b> may include multiple data paths that may be run concurrently or separately. In one embodiment, CMAC <b>270</b> may include four complex data paths that include multipliers, adders, and accumulator registers (all not shown in <figref idref="DRAWINGS">FIG. 2</figref>). Thus, CMAC <b>270</b> may be referred to as a four-way CMAC datapath. In addition to multiplying and adding, CMAC <b>270</b> may also perform rounding and scaling operations and support saturation. In one embodiment, CMAC <b>270</b> operations may be divided into multiple pipeline steps. In addition, each of the four complex data paths may compute a complex multiplication and accumulation in one clock cycle. The CMAC <b>270</b>, (i.e., the four data paths together) may execute an operation on an N-element vector in N/4 clock cycles, to support complex vector computing (e.g., complex convolution, conjugate complex convolution and complex vector dot product). The CMAC <b>270</b> may also support operations on complex values stored in the accumulator registers (e.g., complex add, subtract, conjugate, etc).</p>
<p id="p-0037" num="0036">For example, CMAC <b>270</b>, may compute a complex multiplication such as (A<sub>R</sub>+jA<sub>I</sub>)*(B<sub>R</sub>+jB<sub>I</sub>) in one clock cycle and complex accumulation in one clock cycle and support complex vector computing (e.g., complex convolution, conjugate complex convolution, and complex vector dot product).</p>
<p id="p-0038" num="0037">In one embodiment, as described above, PBBP <b>145</b> may include multiple clustered SIMD execution pipelines. More particularly, the datapaths described above may be grouped together into SIMD clusters in which each cluster may execute different tasks while every data path within a cluster may perform a single instruction on multiple data each clock cycle. Specifically, the four-way CALU <b>280</b> and the four-way CMAC <b>270</b> may function as separate SIMD clusters in which CALU <b>280</b> may perform four parallel operations such as four correlations or de-spread of four different codes in parallel, while CMAC <b>270</b> performs two parallel Radix-2 FFT butterflies or one Radix-4 FFT butterfly, for example. It is noted that although CALU <b>280</b> and CMAC <b>270</b> are shown as four-way units, it is contemplated that in other embodiments, they may each include any number of units. Thus, in such embodiments, PBBP <b>145</b> may include any number of SIMD clusters as desired. The control path for clustered SIMD operation is described in more detail in conjunction with the description of <figref idref="DRAWINGS">FIG. 5</figref>, below.</p>
<p id="h-0006" num="0000">The Instruction Set Architecture</p>
<p id="p-0039" num="0038">In one embodiment, the instruction set architecture for processor core <b>146</b> may include three classes of compound instructions. The first class of instructions are RISC instructions, which operate on 16-bit integer operands. The RISC-instruction class includes most of the control-oriented instructions and may be executed within integer execution unit <b>260</b> of the processor core <b>146</b>. The next class of instructions are DSP instructions, which operate on complex-valued data having a real portion and an imaginary portion. The DSP instructions may be executed on one or more of the SIMD-clusters. The third class of instructions are the Vector instructions. Vector instructions may be considered extensions of the DSP instructions since they operate on large data sets and may utilize advanced addressing modes and vector loop support. An exemplary listing of vector instructions is shown below in Table 1. With few exceptions, and as noted, the vector instructions operate on complex data types.</p>
<p id="p-0040" num="0039">
<tables id="TABLE-US-00001" num="00001">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" rowsep="1">TABLE 1</entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>An exemplary listing of complex vector instructions.</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="56pt" align="left"/>
<colspec colname="2" colwidth="161pt" align="left"/>
<tbody valign="top">
<row>
<entry>Mnemonic</entry>
<entry>Operation</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
<row>
<entry>—</entry>
<entry>CMAC Vector Instructions</entry>
</row>
<row>
<entry>MUL</entry>
<entry>Element-wise vector multiplication or multiply</entry>
</row>
<row>
<entry/>
<entry>vector by scalar</entry>
</row>
<row>
<entry>ACC</entry>
<entry>Sum of the vector elements</entry>
</row>
<row>
<entry>NACC</entry>
<entry>Negative Sum of the vector elements</entry>
</row>
<row>
<entry>VADD</entry>
<entry>Vector addition</entry>
</row>
<row>
<entry>VSUB</entry>
<entry>Vector subtraction</entry>
</row>
<row>
<entry>FFT</entry>
<entry>One layer of radix-2 FFT butterflies</entry>
</row>
<row>
<entry>FFT2</entry>
<entry>Two parallel radix-2 FFT butterflies.</entry>
</row>
<row>
<entry>FFTL</entry>
<entry>Last layer radix-4 FFT butterfly, used in the last</entry>
</row>
<row>
<entry/>
<entry>layer of FFT to implement frequency domain filtering.</entry>
</row>
<row>
<entry>FFT2L</entry>
<entry>Two parallel radix-2 last layer FFT butterflies</entry>
</row>
<row>
<entry>R4T</entry>
<entry>General radix-4 butterfly (DCT, FFT, NTT, . . .)</entry>
</row>
<row>
<entry>ADDSUB2</entry>
<entry>Two parallel “Addition and Subtractions”</entry>
</row>
<row>
<entry>VMULC</entry>
<entry>Element-wise multiplication of a constant and vector</entry>
</row>
<row>
<entry>MAC</entry>
<entry>Multiply-accumulate (scalar product)</entry>
</row>
<row>
<entry>NMAC</entry>
<entry>Negative multiply accumulate</entry>
</row>
<row>
<entry>WBF</entry>
<entry>Walsh transform butterfly</entry>
</row>
<row>
<entry>SQRABS</entry>
<entry>Element-wise complex square absolute value</entry>
</row>
<row>
<entry>SQRABSACC</entry>
<entry>Sum of square absolute values (vector energy)</entry>
</row>
<row>
<entry>SQRABSMAX</entry>
<entry>Find largest square absolute value and its index</entry>
</row>
<row>
<entry>—</entry>
<entry>Vector Move Instructions</entry>
</row>
<row>
<entry>VMOVE</entry>
<entry>Vector Move</entry>
</row>
<row>
<entry>DUP</entry>
<entry>Duplicate scalar value to all lanes in a execution</entry>
</row>
<row>
<entry/>
<entry>unit</entry>
</row>
<row>
<entry>—</entry>
<entry>Vector ALU Instructions</entry>
</row>
<row>
<entry>SMUL</entry>
<entry>Element-wise short multiplication</entry>
</row>
<row>
<entry>SMUL4</entry>
<entry>Four parallel element-wise short multiplications</entry>
</row>
<row>
<entry>SMAC</entry>
<entry>Short multiplication and accumulation (de-spread)</entry>
</row>
<row>
<entry>SMAC4</entry>
<entry>Four parallel short multiplication and accumulations</entry>
</row>
<row>
<entry/>
<entry>(de-spread)</entry>
</row>
<row>
<entry>OVSF</entry>
<entry>N-parallel SMAC with OVSF-codes (multi-code de-</entry>
</row>
<row>
<entry/>
<entry>spread in CDMA)</entry>
</row>
<row>
<entry>VADDC</entry>
<entry>Element-wise add a constant to a vector</entry>
</row>
<row>
<entry>VSUBC</entry>
<entry>Element-wise subtract a constant from a vector</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0041" num="0040">As will be described in greater detail below in conjunction with the description of <figref idref="DRAWINGS">FIG. 5</figref>, the instruction format may include various fields depending on the class of instruction. For example, in one embodiment, RISC instructions may include a unit field, an opcode field and an argument field and vector instructions may additionally include a vector size field.</p>
<p id="p-0042" num="0041">Many baseband-receiving algorithms may be decomposed into task-chains with little backward dependencies between tasks. This property may not only allow different tasks to be performed in parallel on SIMD execution units, it may also be exploited using the above instruction set architecture. Since vector operations typically operate on large vectors, one instruction may be issued every clock cycle, thereby reducing the complexity of the control path. In addition, since vector SIMD instructions run on long vectors, many RISC instructions may be executed during the vector operation. As such, in one embodiment, processor core <b>146</b> may be a single instruction issue per clock cycle machine and each of the SIMD clusters and the integer execution unit may execute an instruction each clock cycle in a pipelined fashion. Thus, PBBP <b>145</b> may be thought of as running two threads in parallel. The first thread includes program flow and miscellaneous processing using integer execution unit <b>260</b>. The second thread includes complex vector instructions executed on the SIMD clusters. <figref idref="DRAWINGS">FIG. 3</figref> illustrates the instruction execution pipelines of one embodiment of the programmable baseband processor of <figref idref="DRAWINGS">FIG. 2</figref>.</p>
<p id="p-0043" num="0042">Referring collectively to <figref idref="DRAWINGS">FIG. 2</figref> and <figref idref="DRAWINGS">FIG. 3</figref>, the left column of <figref idref="DRAWINGS">FIG. 3</figref> represents time (in execution clock cycles). The remaining columns represent the execution pipelines of a complex SIMD cluster (e.g., one datapath of CMAC <b>270</b> and CALU <b>280</b>) and the integer execution unit <b>260</b> and the issuance of instructions thereto. More particularly, in the first clock cycle, a complex vector instruction (e.g., CVL. <b>256</b>) is issued to CMAC <b>270</b>. As shown, the vector instruction takes many cycles to complete. In the next clock cycle, a vector instruction is issued to CALU <b>280</b>. In the next clock cycle, an integer instruction is issued to integer execution unit <b>260</b>. In the next several cycles, while the vector instructions are being executed, any number of integer instructions may be issued to integer execution unit <b>260</b>. It is noted that although not shown, the remaining SIMD clusters may also be concurrently executing instructions in a similar fashion.</p>
<p id="p-0044" num="0043">It is noted that in one embodiment, to provide control flow synchronization and to control the data flow, “idle” instructions may be used to halt the control flow until a given vector operation is completed. For example, execution of certain vector instructions by a corresponding SIMD execution unit may allow an “idle” instruction to be executed by integer execution unit <b>260</b>. The “idle” instruction may halt the integer execution unit <b>260</b> until an indication such as a flag, for example, is received from the corresponding SIMD execution unit by integer execution unit <b>260</b>.</p>
<p id="h-0007" num="0000">The Hardware Accelerators</p>
<p id="p-0045" num="0044">As described above, to provide multi-mode support across a wide range of radio standards, many baseband functions may be provided by dedicated hardware accelerators used in combination with a programmable core. For example, in one embodiment one or more of the following functions may be implemented using accelerators 0 through m of <figref idref="DRAWINGS">FIG. 2</figref>: a decimator/filter, a four “finger” RAKE function for use in CDMA and DSSS modulation schemes, a Radix-4 FFT/Modified Walsh transform for use in OFDM modulation schemes and in IEEE 802.11b, a demapper, a Convolutional/Turbo encoder-Viterbi/Turbo decoder, a configurable block interleaver, a configurable scrambler, and a CRC accelerator. It is noted that in other embodiments, other numbers and types of functions may be implemented using accelerators 0 through m.</p>
<p id="p-0046" num="0045">In one embodiment, the decimator/filter accelerator may include a configurable filter such as a finite impulse response (FIR) filter that may be used for such standards as IEEE 802.11a and others. The four-finger rake accelerator may include a local complex memory for delay path storage, de-spread code generators and a matched filter (all not shown) that may perform multipath search and channel estimation functions. The Radix-4 FFT/Modified Walsh transform (FFT/MWT) accelerator may include a Radix-4 butterfly (not shown) and flexible address generators (not shown). In one embodiment, the FFT/MWT accelerator may perform a 64-point FFT in 54 clock cycles and a modified Walsh transform in support of the IEEE 802.11b standard in 18 clock cycles. The Convolutional/Turbo encoder-Viterbi decoder accelerator may include a reconfigurable Viterbi decoder and a Turbo encoder/decoder to provide support for convolutional and turbo error correcting codes. In one embodiment, decoding of convolutional codes may be performed by the Viterbi algorithm, whereas Turbo codes may be decoded by utilizing a Soft output Viterbi algorithm. A configurable block interleaver accelerator may be used to reorder data to spread neighboring data bits in time, and in the OFDM case, among different frequencies. In addition, the scrambler accelerator may be used to scramble data with pseudo-random data to ensure an even distribution of ones and zeros in the transmitted data-stream. The CRC accelerator may include a linear feedback shift register (not shown) or other algorithm for generating CRC.</p>
<p id="h-0008" num="0000">The Memory Units</p>
<p id="p-0047" num="0046">To efficiently utilize the SIMD architecture of processor core <b>146</b>, memory management and allocation may be important considerations. As such, the data memory system architecture includes several relatively small data memory units (e.g., DM<b>0</b>-DMn). In one embodiment, data memories DM<b>0</b>-DMn may be used for storing complex data during processing. Each of these memories may be implemented to have any number (e.g., four) of interleaved memory banks, which may allow any number (e.g., four) of consecutive addresses (vector elements) to be accessed in parallel. In addition, each of data memories DM<b>0</b>-DMn may include an address generation unit (e.g., Addr. Gen <b>201</b> of DM<b>0</b>) that may be configured to perform modulo addressing as well as FFT addressing. Further, each of DM<b>0</b>-DMn may be connected via the network interconnect <b>250</b> to any of the accelerators and to the processor core <b>146</b>. Coefficient memory <b>215</b> may be used for storing FFT and filter coefficients, look-up tables, and other data not processed by accelerators. Integer memory <b>220</b> may be used as a packet buffer to store a bitstream for the MAC interface <b>225</b>. Coefficient memory <b>215</b> and integer memory <b>220</b> are both coupled to processor core <b>146</b> via network interconnect <b>250</b>.</p>
<p id="h-0009" num="0000">The Network</p>
<p id="p-0048" num="0047">Network interconnect <b>250</b> is configured to interconnect data paths, memories, accelerators and external interfaces. Thus, in one embodiment, network interconnect <b>250</b> may behave similar to a crossbar in which the connections may be set up from one input (write-) port to one output (read-) port, and any input port may be connected to any output port in an M×M structure. Although in some embodiments, connections between some memories and some computing units may not be necessary. As such, network interconnect <b>250</b> may be optimized to allow certain specific configurations, thus simplifying network interconnect <b>250</b>. Having an interconnect such as network interconnect <b>250</b> may eliminate the need for an arbiter and addressing logic, thus reducing the complexity of the network and the accelerator interfaces, while still allowing many concurrent communications. It is noted that in one embodiment, network interconnect <b>250</b> may be implemented using multiplexers or a combinatorial logic structure such as an And-Or structure, for example. However, it is contemplated that in other embodiments, network interconnect <b>250</b> may be implemented using any type of physical structure as desired.</p>
<p id="p-0049" num="0048">In one embodiment, network interconnect <b>250</b> may be implemented as two sub-networks. The first sub-network may be used for sample-based transfers and the second sub-network may be a serial network used for bit-based transfers. The division of the two networks may improve the throughput of the networks since bit-based transfers may otherwise require tedious framing and de-framing of data chunks that are not equal to the data width of the network. In such an embodiment, each sub-network may be implemented as a separate crossbar switch that is configured by processor core <b>146</b>. Network interconnect <b>250</b> may also be configured to allow accelerators having associated functionality to be connected directly to each other in a chain and with data memories. In one embodiment, network interconnect <b>250</b> may enable the data to flow seamlessly between accelerator units without the intervention of processor core <b>146</b>, thereby enabling processor core <b>146</b> to be involved with the network only during creation and destruction of network connections.</p>
<p id="p-0050" num="0049">As described above, it may not be necessary to connect all units (e.g., memories, accelerators, etc.) to all other units and network interconnect <b>250</b> may be optimized to only allow certain configurations. In those embodiments, network interconnect <b>250</b> may be referred to as a “partial network.” To transfer data between these partial networks, several memory blocks within one or more data memory units (e.g., DM<b>0</b>) may be assigned to both sub-networks. These memory blocks may be used as ping-pong buffers between tasks. Costly memory moves may be avoided by “swapping” memory blocks between computing elements. This strategy may provide an efficient and predictable data flow without costly memory move operations.</p>
<p id="p-0051" num="0050">“<figref idref="DRAWINGS">FIG. 4</figref> illustrates further aspects of the embodiment of the programmable baseband processor of <figref idref="DRAWINGS">FIG. 2</figref>. It is noted that components corresponding to components in <figref idref="DRAWINGS">FIG. 2</figref> are numbered identically for clarity and simplicity. In the embodiment of <figref idref="DRAWINGS">FIG. 4</figref>, processor core <b>146</b> includes a program control unit <b>310</b> that is coupled to integer execution unit <b>260</b>. As described above, integer execution unit <b>260</b> includes an ALU <b>261</b>, a separate multiplier accumulator unit <b>262</b> and a set of register files (RF) <b>263</b>. Complex computing unit <b>290</b> includes CMAC execution unit <b>291</b> and CALU execution unit <b>292</b>. CMAC execution unit <b>29</b>l includes a vector controller <b>275</b>A that is coupled to a vector load unit <b>284</b>A, which is in turn coupled to CMAC unit <b>270</b>. CMAC unit <b>270</b> is also coupled to a vector store unit <b>283</b>A. CALU execution unit <b>292</b> includes a vector controller <b>275</b>B that is coupled to a vector load unit <b>284</b>B, which is in turn coupled to CALU <b>280</b>. CALU <b>280</b> is also coupled to a vector store unit <b>283</b>B. It is noted that in one embodiment, CMAC execution unit <b>291</b> and CALU execution unit <b>292</b> may correspond to SIMD cluster pipelines <b>295</b>A and <b>295</b>B, respectively.”</p>
<p id="p-0052" num="0051">In the illustrated embodiment, CALU <b>280</b> includes four data paths. Similarly, CMAC <b>270</b> also includes four data paths including four CMAC units designated CMAC <b>276</b>A through <b>276</b>D. An embodiment of a CMAC datapath is described further below in conjunction with the description of <figref idref="DRAWINGS">FIG. 7</figref>.</p>
<p id="p-0053" num="0052">Since the CALU <b>280</b>, along with address and code generators, may be a main component used for such functions as Rake finger processing, by implementing a 4-way CALU with accumulator, either four parallel correlations or de-spread of four different codes may be performed at the same time. These operations may be enabled by adding simple or “short” complex multipliers capable of only multiplying by {0, +/−1}+{0, +/−i} to the accumulator unit. Thus, in one embodiment, CALU <b>280</b> includes four different CSMAC datapaths, which are designated <b>285</b>A through <b>285</b>D. An exemplary CSMAC datapath (e.g., CSMAC <b>285</b>A) is shown in <figref idref="DRAWINGS">FIG. 6</figref>. It is noted that although four datapaths are shown within the CALU <b>280</b> and CMAC <b>270</b>, it is contemplated that in other embodiments, any number of datapaths may be used.</p>
<p id="p-0054" num="0053">In one embodiment, CSMAC <b>285</b> may be controlled from either the instruction word, a de-scrambling code generator or from an OVSF code generator. All subunits may be controlled by vector controller <b>275</b>A and <b>275</b>B, which may be configured to manage load and store order, code generation and hardware loop counting.</p>
<p id="p-0055" num="0054">To relax the memory interface, vector load unit <b>284</b> and vector store unit <b>283</b> may be employed. Accordingly, in the illustrated embodiment VLU <b>284</b> includes storage <b>281</b> to relax the memory interface and reduce the number of memory data fetches over the network <b>250</b>. For example, if four consecutive data items were read from memory, VLU <b>284</b> may, in some cases, reduce the number of memory fetches by as much as ¾ by only performing a single fetch operation.</p>
<p id="p-0056" num="0055">Since the CMAC execution unit <b>291</b> includes multiple CMAC units, several concurrent CMAC operations may be performed. As such, each CMAC unit may use one coefficient and one input data item for each operation. Thus, the memory bandwidth for this type of task could be large. However, the instruction set may take advantage of storage <b>281</b> within vector load unit <b>284</b> by storing a number of previous data items locally. By reordering the data access pattern, the memory access rate may be reduced.</p>
<p id="p-0057" num="0056">In one embodiment, VLU <b>284</b> may act as an interface between the memory (e.g., DM<b>0</b>-n), the network interconnect <b>250</b>, and the execution units (e.g., VLU <b>284</b>A is associated with CMAC execution units and VLU <b>284</b>B is associated with CALU execution units). In one embodiment, VLU <b>284</b> may load data using two different modes. In the first mode, multiple data items may be loaded from a bank of memories. In the other mode, data may be loaded one data item at a time and then distributed to the SIMED datapaths in a given cluster. The latter mode may be used to reduce the number of memory accesses when consecutive data are processed by a SIMD cluster.</p>
<p id="p-0058" num="0057"><figref idref="DRAWINGS">FIG. 5</figref> is a diagram illustrating an exemplary control path of a clustered SIMD processor such as PBBP <b>145</b> of <figref idref="DRAWINGS">FIG. 2</figref> and <figref idref="DRAWINGS">FIG. 4</figref>. PBBP <b>145</b> includes processor core <b>146</b> which includes a RISC-type execution unit, and which is represented by RISC data path <b>510</b>, and a number SIMD datapaths represented by SIMD datapath #<b>0</b> <b>525</b> and SIMD datapath #n <b>535</b>. To provide control over the multiple datapaths, the control path hardware <b>500</b> includes program flow control <b>501</b> coupled to a program counter <b>502</b> which is in turn coupled to program memory (PM) <b>503</b>. PM <b>503</b> is coupled to multiplexer <b>504</b>, unit-field extraction <b>508</b>, SIMD control <b>520</b> and SIMD control <b>530</b>. Multiplexer <b>504</b> is coupled to instruction register <b>505</b>, which is coupled to instruction decoder <b>506</b>. Instruction decoder <b>506</b> is further coupled to control signal register (CSR) <b>507</b>, which is in turn coupled to the remainder of the RISC datapath <b>510</b>. Similarly, each of the SIMD control units <b>520</b> and <b>530</b> include respective instruction registers (e.g., <b>522</b>, <b>532</b>), instruction decoders (e.g., <b>523</b>, <b>533</b>), and CSRs (e.g., <b>524</b>, <b>534</b>), which are coupled to their respective SIMD clusters (e.g., <b>525</b> and <b>535</b>). It is noted that at least some of the circuits shown in <figref idref="DRAWINGS">FIG. 5</figref> may be part of program control unit <b>310</b> of <figref idref="DRAWINGS">FIG. 4</figref>. For example, in one embodiment, program flow control <b>501</b>, instruction register <b>505</b>, decoder <b>506</b>, control unit <b>507</b>, unit field extraction <b>508</b>, and issue control <b>509</b> may be part of program control unit <b>310</b> of <figref idref="DRAWINGS">FIG. 4</figref>.</p>
<p id="p-0059" num="0058">As described above, the instruction format may include a unit field. In one embodiment, the unit field in the instruction word may include three bits that represent the unit (e.g., integer execution unit, or SIMD path #<b>1</b>-<b>4</b>) to which the instruction is to be issued. More particularly, the unit field may provide information that enables the issue control unit <b>509</b> to determine to which instruction decoder/execution unit the instruction is issued. Every instruction decoder within the execution units may then decode the remaining fields as specified by that unit. This implies that it may be possible to have different organization and size of the remaining fields between the execution units, as desired. In one embodiment, the unit-field extraction unit <b>508</b> may remove or strip the unit field before the remaining bits of the instruction word are sent to the respective instruction register/decoder.</p>
<p id="p-0060" num="0059">In one embodiment, during each clock cycle, one instruction may be fetched from the PM <b>503</b>. The unit field in the instruction word may be extracted from the instruction word and used to control to which control unit the instruction is dispatched. For example, if the unit field is “000” the instruction may be dispatched to the RISC data-path. This may cause the issue control unit <b>509</b> to allow the instruction word to pass through multiplexer <b>504</b> into the “instruction register” <b>505</b> for the RISC data path, while no new instructions are loaded into the SIMD control units this cycle. If however, the unit field held any other value, the issue control unit <b>509</b> may enable the instruction word to pass through into the “instruction register” <b>522</b>, <b>532</b> for the corresponding SIMD control unit and cause a NOP instruction to be sent to the RISC data path instruction register.</p>
<p id="p-0061" num="0060">In one embodiment, when an instruction is dispatched to the SIMD execution units, the vector length field from the instruction word may be extracted and stored in the count register (e.g., <b>521</b>, <b>531</b>) of the corresponding SIMD control unit (e.g., <b>520</b>, <b>530</b>). This count register may be used to keep track of the vector length in the corresponding vector instruction. When a corresponding SIMD execution unit has finished the vector operation, the vector controller <b>275</b> may cause a signal (flag) to be sent to program flow control <b>501</b> to indicate that the unit is ready to accept a new instruction. The vector controller corresponding to each SIMD control unit <b>520</b>, <b>530</b> may additionally create control signals for prolog and epilog states within the execution unit. Such control signals may control VLU <b>284</b> for CSMAC operations and also manage odd vector lengths, for example.</p>
<p id="p-0062" num="0061">As described above, in many baseband-processing algorithms such as in CDMA systems, for example, the received complex data sequence from the antenna is multiplied with a “(de-)spreading code.” Thus, there may be a need to element-wise multiply (and accumulate) a complex vector by the de-spreading code, which may be a complex vector containing only numbers from the following set: {0, +/−1}+{0, +/−i}. The result of the complex multiplication is then accumulated. In some conventional programmable processors, this functionality may be performed by executing several arithmetic instructions or by one fully implemented CMAC unit. However, using an N-way CSMAC unit (e.g., CSMAC <b>285</b>A-D) within a programmable processor, the hardware costs may be reduced.</p>
<p id="p-0063" num="0062"><figref idref="DRAWINGS">FIG. 6</figref> is a diagram of an exemplary datapath of the four-way CSMAC unit of the complex ALU shown in <figref idref="DRAWINGS">FIG. 4</figref>. It is noted that CSMAC <b>285</b> of <figref idref="DRAWINGS">FIG. 6</figref> may be illustrative of any of CSMAC <b>285</b>A through <b>285</b>D of <figref idref="DRAWINGS">FIG. 4</figref>. CSMAC <b>285</b> includes inverters <b>601</b>A and <b>601</b>B, four multiplexers designated <b>603</b>A through <b>603</b>D. In addition, CSMAC <b>285</b> includes several adders designated <b>602</b>, and <b>604</b>A, <b>604</b>B, <b>606</b>A, and <b>606</b>B. Further, CSMAC <b>285</b> includes two guard units <b>606</b>A and <b>606</b>B, two accumulator registers <b>607</b>A and <b>607</b>B, and two round/saturate units <b>608</b>A and <b>608</b>B.</p>
<p id="p-0064" num="0063">In one embodiment, CSMAC <b>285</b> receives the vector data via VLU <b>284</b>. The real and imaginary parts follow separate paths, as shown. Depending on the de-spread code that is to be multiplied by the incoming vector data, multiplexers <b>603</b>A through <b>603</b>D may allow the corresponding real and imaginary parts and their complement or negated versions to be passed to the adders <b>604</b>A and <b>604</b>B, where they are added, sometimes with a carry. Accordingly, depending on the operation, CSMAC <b>285</b> may effectively multiply the respective real and imaginary parts by {0, +/−1}+{0, +/−i} using two's complement arithmetic. The guard units <b>605</b>A and <b>605</b>B may be configured to condition the results from adders <b>604</b>A and <b>604</b>B. For example, when conditions such as overflows exist, the results may be conditioned to provide a maximum or a minimum (i.e., saturated) value, as desired. Adders <b>606</b>A and <b>606</b>B in conjunction with accumulator registers <b>607</b>A and <b>607</b>B, may accumulate the respective results, which may be passed to the round/saturate units and on to VSU <b>283</b>B to be sent to data memory.</p>
<p id="p-0065" num="0064">Thus from the foregoing description, a conventional multiplier is not used. Instead, two's complement addition is performed, thereby saving die area and power. Thus, a four-way CSMAC such as CSMAC <b>285</b>A-D may be implemented as an area efficient, four-way CSMAC unit which may perform four parallel CSMAC operations in a programmable environment. The enhanced four-way CSMAC unit can either perform the vector multiplication four times faster than a single unit, or multiply the same vector with four different coefficient vectors. The latter operation may be used to enable “Multi-code de-spread” in CDMA systems. As described above, VLU <b>284</b> may duplicate one data item or coefficient item among all data-paths of CSMAC <b>285</b> as necessary. The duplication mode may be especially useful when multiplying the same data item with different internally generated coefficients (for example, using OVSF codes).</p>
<p id="p-0066" num="0065"><figref idref="DRAWINGS">FIG. 7</figref> is a diagram of one embodiment of a complex MAC unit datapath shown in <figref idref="DRAWINGS">FIG. 4</figref>. It is noted that CMAC <b>276</b> of <figref idref="DRAWINGS">FIG. 7</figref> may be illustrative of any of CMAC <b>276</b>A through <b>276</b>D of <figref idref="DRAWINGS">FIG. 4</figref>. CMAC <b>276</b> includes four multi-bit multipliers designated <b>701</b>A through <b>701</b>D that are coupled to four respective result registers <b>702</b>A through <b>702</b>D. In addition, CMAC <b>276</b> includes six full adders designated <b>703</b>, <b>704</b>, <b>709</b>A, <b>709</b>B, <b>710</b>A, and <b>710</b>B. Further, CMAC <b>276</b> includes multiplexers <b>705</b>, <b>706</b>, <b>707</b>, and <b>708</b>, and accumulator registers ACRR <b>711</b>A and ACIR <b>711</b>B.</p>
<p id="p-0067" num="0066">In the illustrated embodiment, multiplier <b>701</b>A may multiply the real part of operand A with the real part of operand C, while multiplier <b>701</b>B may multiply the imaginary part of operand A with the imaginary part of operand C. In addition, multiplier <b>701</b>C may multiply the real part of operand A with the imaginary part of operand C, and multiplier <b>701</b>D may multiply the imaginary part of operand A with the real part of operand C. The results may be stored in result registers <b>702</b>A-<b>702</b>D, respectively.</p>
<p id="p-0068" num="0067">Adder <b>703</b> may perform addition and subtraction on the results from multipliers <b>702</b>A and <b>702</b>B, while adder <b>704</b> may perform addition and subtraction on the results from multipliers <b>702</b>C and <b>702</b>D. Multiplexers <b>705</b> and <b>707</b> may allow a bypass of the multipliers/adders depending on the values of the operands. Depending on the function being performed, multiplexers <b>706</b> and <b>708</b> may selectively provide values to the accumulator portion, which includes adders <b>709</b>A, <b>709</b>B, <b>710</b>A, and <b>710</b>B, and accumulator registers ACRR <b>711</b>A and ACIR <b>711</b>B. ACRR <b>711</b>A is the accumulator register for real data and ACIR <b>711</b>B is the accumulator register for imaginary data.</p>
<p id="p-0069" num="0068">In one embodiment, CMAC <b>276</b> may execute one complex valued multiply-accumulate operation (e.g., a radix-2 FFT butterfly) each clock cycle. It is particularly optimized for operations such as correlation, FFT, or absolute maximum search, for example, that may be performed on vectors of complex numbers (e.g., complex valued in-phase (I) and quadrature (Q) pairs). As described above, processor core <b>146</b> has a special class of multi-cycle vector oriented instructions, which can execute in parallel with CALU and RISC/integer instructions. In one embodiment, the complex vector instructions may be 16 bits long, which may provide efficient use of program memory. However, it is contemplated that in other embodiments, the instruction length may be any number of bits.</p>
<p id="p-0070" num="0069">In one embodiment, when performing complex multiplication or convolution, normal complex computing may be performed when adder <b>703</b> performs subtraction and adder <b>704</b> performs addition. Complex conjugate computing may be performed when adder <b>703</b> performs addition and adder <b>704</b> performs subtraction. In addition, when performing either normal complex or complex conjugate multiplication for dot product multiplication and vector rotation, the iterative loop of ACRR <b>711</b>A and ACIR <b>711</b>B may be broken and adder <b>710</b>A and adder <b>710</b>B may be used for rounding before sending the result to a vector memory with native length. Likewise, when performing complex convolution for complex filters, complex auto-correlation, and complex cross correlation, adder <b>710</b>A and adder <b>710</b>B may provide plus or minus accumulation of the real part and the imaginary parts respectively.</p>
<p id="p-0071" num="0070">In one embodiment, when performing FFT or IFFT computing, the CMAC <b>276</b> datapath may give (pipelined) one butterfly computing per clock cycle, (i.e., two points of FFT computing per clock cycle). To execute an FFT, adder <b>709</b>A and adder <b>709</b>B perform subtraction and the iterative loop of ACRR and ACIR of adder <b>710</b>A and adder <b>710</b>B are broken. In addition, adder <b>710</b>A and adder <b>710</b>B perform addition operations.</p>
<p id="p-0072" num="0071">In one embodiment, to perform the various operations associated with baseband synchronization and data reception described above, the following instructions may be executed on CMAC <b>276</b>:
<ul id="ul0001" list-style="none">
    <li id="ul0001-0001" num="0000">
    <ul id="ul0002" list-style="none">
        <li id="ul0002-0001" num="0072">CMUL.n: Normal complex multiplication with rounding on results, and executes n steps as a non-overlapped loop. Operands may be supplied from OPA and OPB ports. The result will be on port C with native length complex data format.</li>
        <li id="ul0002-0002" num="0073">CCMUL.n: Complex conjugate multiplication with rounding on results, and executes n steps as a non-overlapped loop. Operands may be supplied from OPA and OPB ports. The result will be provided on port C with native length complex data format.</li>
        <li id="ul0002-0003" num="0074">CMAC.n: Normal complex multiplication and accumulation as a non-overlapped loop executing n steps. Operands may be supplied from OPA and OPB ports. The real part of the result may be stored in ACRR <b>711</b>A and the imaginary part may be stored in ACIR <b>711</b>B.</li>
        <li id="ul0002-0004" num="0075">CCMAC.n: Complex conjugate multiplication and accumulation as a non-overlapped loop executing n steps. Operands may be supplied from OPA and OPB ports. The real part of the result may be stored in ACRR <b>711</b>A and the imaginary part may be stored in ACIR <b>711</b>B.</li>
        <li id="ul0002-0005" num="0076">FFT.m.n: The m<sup>th </sup>step of a size n FFT: Complex data may be fetched from Port A, and Port B and complex coefficient may be fetched from port C based on normal in-order addressing; complex data results may be sent to port D using bit-reversal addressing.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0073" num="0077">It is noted that the flexible nature of the architecture and micro-architecture of PBBP <b>145</b> described above may provide support for multiple radio standards and multiple operational modes within those standards.</p>
<p id="p-0074" num="0078">Although the embodiments above have been described in considerable detail, numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A digital signal processor comprising:
<claim-text>a plurality of accelerator units, each configured to perform one or more dedicated functions;</claim-text>
<claim-text>a processor core coupled to the plurality of accelerator units, wherein the processor core includes an integer execution unit configured to execute integer instructions; and</claim-text>
<claim-text>a complex computing unit coupled to the plurality of accelerator units, wherein the complex computing unit is configured to execute complex vector instructions;</claim-text>
<claim-text>wherein the complex computing unit includes a first clustered execution pipeline including one or more complex arithmetic logic unit datapaths configured to execute first complex vector instructions, and a second clustered execution pipeline including one or more complex multiplier accumulator datapaths configured to execute second complex vector instructions; and</claim-text>
<claim-text>wherein each of the one or more complex arithmetic logic unit datapaths further includes a complex short multiplier accumulator datapath configured to multiply a complex data value by values in a set of numbers defined by {0, +/−1}+{0,+/−i} using two's complement arithmetic.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The processor as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein each datapath within the first and the second clustered execution pipelines is configured to execute a single complex operation, which is part of a vector instruction, per clock cycle.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The processor as recited in <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the integer execution unit is configured to execute a single instruction per clock cycle concurrent with execution of any complex vector instructions executed by any of the datapaths within the first and the second clustered execution pipelines.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The processor as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein each of the complex multiplier accumulator datapaths is configured to natively interpret any data as complex valued data.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The processor as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein each of the first and the second complex vector instructions operate on complex valued data having a real portion and an imaginary portion.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The processor as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the complex computing unit is configured to execute single instruction multiple data (SIMD) instructions.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The processor as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein at least some accelerator units of the plurality of accelerator units are configurable hardware implementations of the dedicated functions associated with baseband signal processing.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The processor as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein each of the first and the second first clustered execution pipelines further includes a respective vector load unit configured to cause data items to be fetched each clock cycle for use by any datapath in a respective clustered execution pipeline.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The processor as recited in <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein each vector load unit includes a storage configured to locally store data from a fetch operation performed during a previous clock cycle for use by any datapath in any respective clustered execution pipeline during a subsequent clock cycle.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The processor as recited in <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein each of the first and the second first clustered execution pipelines further includes a respective vector controller unit coupled to the respective vector load unit and configured to manage load and store order of vector operations by any of the data paths of the first and the second first clustered execution pipelines.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The processor as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein given respective functions of the one or more dedicated functions are associated with baseband signal processing corresponding to different wireless communication standards.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The processor as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising a plurality of memory units, wherein each memory unit includes an address generation unit configured to generate an address corresponding to a local memory location in response to receiving a read or write transaction.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The processor as recited in <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein each of the plurality of memory units, the plurality of accelerator units, the processor core, and the complex computing unit are manufactured on a single integrated circuit.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The processor as recited in <claim-ref idref="CLM-00012">claim 12</claim-ref>, further comprising a network configured to provide connectivity between the plurality of memory units, the plurality of accelerator units, the processor core, and the complex computing unit.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The processor as recited in <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein in response to execution of particular integer instructions, the network is configured to couple given memory units of the plurality of memory units to one or more of the plurality of accelerator units.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The processor as recited in <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein in response to execution of particular integer instructions, the network is configured to couple given memory units of the plurality of memory units to the complex computing unit.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The processor as recited in <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein in response to execution of particular integer instructions, the network is configured to couple together, in a chain, two or more accelerator units of the plurality of accelerator units and to further couple a first accelerator unit of the chain to one of a given one of the plurality of memory units and the complex computing unit.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. A multimode wireless communication device comprising:
<claim-text>a radio frequency front-end unit configured to transmit and receive radio frequency signals;</claim-text>
<claim-text>a programmable digital signal processor coupled to the radio frequency front-end unit, wherein the programmable digital signal processor includes:
<claim-text>a plurality of accelerator units, each configured to perform one or more dedicated functions; and</claim-text>
<claim-text>a processor core coupled to the plurality of accelerator units, wherein the processor core includes an integer execution unit configured to execute integer instructions; and</claim-text>
<claim-text>a complex computing unit coupled to the plurality of accelerator units, wherein the complex computing unit is configured to execute complex vector instructions;</claim-text>
<claim-text>wherein the complex computing unit includes a first clustered execution pipeline including one or more complex arithmetic logic unit datapaths configured to execute first complex vector instructions, and a second clustered execution pipeline including one or more complex multiplier accumulator datapaths configured to execute second complex vector instructions; and</claim-text>
<claim-text>wherein each of the one or more complex arithmetic logic unit datapaths further includes a complex short multiplier accumulator datapath configured to multiply a complex data value by values in a set of numbers defined by {0,+/−1}+{0,+/−i} using two's complement arithmetic.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The wireless communication device as recited in <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein at least some accelerator units of the plurality of accelerator units are configurable hardware implementations of the dedicated functions associated with baseband signal processing.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The wireless communication device as recited in <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein each datapath within the first and the second clustered execution pipelines is configured to execute a single complex operation, which is part of a vector instruction, per clock cycle.</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. The wireless communication device as recited in <claim-ref idref="CLM-00020">claim 20</claim-ref>, wherein the integer execution unit is configured to execute a single instruction per clock cycle concurrent with execution of any complex vector instructions executed by any of the datapaths within the first and the second clustered execution pipelines.</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. The wireless communication device as recited in <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein each of the complex multiplier accumulator datapaths is configured to natively interpret any data as complex valued data.</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. The wireless communication device as recited in <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein each of the first and the second complex vector instructions operate on complex valued data having a real portion and an imaginary portion.</claim-text>
</claim>
<claim id="CLM-00024" num="00024">
<claim-text>24. The wireless communication device as recited in <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein the complex computing unit is configured to execute single instruction multiple data (SIMD) instructions.</claim-text>
</claim>
<claim id="CLM-00025" num="00025">
<claim-text>25. The wireless communication device as recited in <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein each of the first and the second first clustered execution pipelines further includes a respective vector load unit configured to cause data items to be fetched each clock cycle for use by any datapath in a respective clustered execution pipeline.</claim-text>
</claim>
<claim id="CLM-00026" num="00026">
<claim-text>26. The wireless communication device as recited in <claim-ref idref="CLM-00025">claim 25</claim-ref>, wherein each vector load unit includes a storage configured to locally store data from a fetch operation performed during a previous clock cycle for use by any datapath in any respective clustered execution pipeline during a subsequent clock cycle.</claim-text>
</claim>
<claim id="CLM-00027" num="00027">
<claim-text>27. The wireless communication device as recited in <claim-ref idref="CLM-00026">claim 26</claim-ref>, wherein each of the first and the second first clustered execution pipelines further includes a respective vector controller unit coupled to the respective vector load unit and configured to manage load and store order of vector operations by any of the data paths of the first and the second first clustered execution pipelines.</claim-text>
</claim>
<claim id="CLM-00028" num="00028">
<claim-text>28. The wireless communication device as recited in <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein given respective functions of the one or more dedicated functions are associated with baseband signal processing corresponding to different wireless communication standards.</claim-text>
</claim>
<claim id="CLM-00029" num="00029">
<claim-text>29. The wireless communication device as recited in <claim-ref idref="CLM-00018">claim 18</claim-ref>, further comprising a plurality of memory units, wherein each memory unit includes an address generation unit configured to generate an address corresponding to a local memory location in response to receiving a read or write transaction.</claim-text>
</claim>
<claim id="CLM-00030" num="00030">
<claim-text>30. The wireless communication device as recited in <claim-ref idref="CLM-00029">claim 29</claim-ref>, wherein each of the plurality of memory units, the plurality of accelerator units, the processor core, and the complex computing unit are manufactured on a single integrated circuit.</claim-text>
</claim>
<claim id="CLM-00031" num="00031">
<claim-text>31. The wireless communication device as recited in <claim-ref idref="CLM-00030">claim 30</claim-ref>, further comprising a network configured to provide connectivity between the plurality of memory units, the plurality of accelerator units, the processor core, and the complex computing unit.</claim-text>
</claim>
<claim id="CLM-00032" num="00032">
<claim-text>32. The wireless communication device as recited in <claim-ref idref="CLM-00031">claim 31</claim-ref>, wherein in response to execution of particular integer instructions, the network is configured to couple given memory units of the plurality of memory units to one or more of the plurality of accelerator units.</claim-text>
</claim>
<claim id="CLM-00033" num="00033">
<claim-text>33. The wireless communication device as recited in <claim-ref idref="CLM-00031">claim 31</claim-ref>, wherein in response to execution of particular integer instructions, the network is configured to couple given memory units of the plurality of memory units to the complex computing unit.</claim-text>
</claim>
<claim id="CLM-00034" num="00034">
<claim-text>34. The wireless communication device as recited in <claim-ref idref="CLM-00031">claim 31</claim-ref>, wherein in response to execution of particular integer instructions, the network is configured to couple together, in a chain, two or more accelerator units of the plurality of accelerator units and to further couple a first accelerator unit of the chain to one of a given one of the plurality of memory units and the complex computing unit.</claim-text>
</claim>
</claims>
</us-patent-grant>
