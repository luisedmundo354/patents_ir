<us-patent-grant lang="EN" dtd-version="v4.2 2006-08-23" file="US07298371-20071120.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20071106" date-publ="20071120">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>07298371</doc-number>
<kind>B2</kind>
<date>20071120</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>10848018</doc-number>
<date>20040517</date>
</document-id>
</application-reference>
<us-application-series-code>10</us-application-series-code>
<us-term-of-grant>
<us-term-extension>139</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>T</subclass>
<main-group>15</main-group>
<subgroup>30</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>T</subclass>
<main-group>15</main-group>
<subgroup>10</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>T</subclass>
<main-group>17</main-group>
<subgroup>00</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>345423</main-classification>
<further-classification>345427</further-classification>
<further-classification>345420</further-classification>
</classification-national>
<invention-title id="d0e53">Efficient object storage for zone rendering</invention-title>
<references-cited>
<citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>4967375</doc-number>
<kind>A</kind>
<name>Pelham et al.</name>
<date>19901000</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5898437</doc-number>
<kind>A</kind>
<name>Deolaliker</name>
<date>19990400</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6323860</doc-number>
<kind>B1</kind>
<name>Zhu et al.</name>
<date>20011100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>345427</main-classification></classification-national>
</citation>
<citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>6344852</doc-number>
<kind>B1</kind>
<name>Zhu et al.</name>
<date>20020200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>6380935</doc-number>
<kind>B1</kind>
<name>Heeschen et al.</name>
<date>20020400</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>6437780</doc-number>
<kind>B1</kind>
<name>Baltaretu et al.</name>
<date>20020800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>345423</main-classification></classification-national>
</citation>
<citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>6525737</doc-number>
<kind>B1</kind>
<name>Duluk, Jr. et al.</name>
<date>20030200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>6577305</doc-number>
<kind>B1</kind>
<name>Duluk, Jr. et al.</name>
<date>20030600</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>6747653</doc-number>
<kind>B2</kind>
<name>Doyle</name>
<date>20040600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>345501</main-classification></classification-national>
</citation>
</references-cited>
<number-of-claims>12</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>345420</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>345423</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>345427</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>5</number-of-drawing-sheets>
<number-of-figures>5</number-of-figures>
</figures>
<us-related-documents>
<continuation>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>10039006</doc-number>
<kind>00</kind>
<date>20011231</date>
</document-id>
<parent-grant-document>
<document-id>
<country>US</country>
<doc-number>6747653</doc-number>
<kind>A </kind>
</document-id>
</parent-grant-document>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>10848018</doc-number>
</document-id>
</child-doc>
</relation>
</continuation>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20040212622</doc-number>
<kind>A1</kind>
<date>20041028</date>
</document-id>
</related-publication>
</us-related-documents>
<parties>
<applicants>
<applicant sequence="001" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Doyle</last-name>
<first-name>Peter L.</first-name>
<address>
<street>2532 Templeton Dr.</street>
<city>El Dorado Hills</city>
<state>CA</state>
<postcode>95762</postcode>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
</applicants>
</parties>
<examiners>
<primary-examiner>
<last-name>Tung</last-name>
<first-name>Kee M.</first-name>
<department>2628</department>
</primary-examiner>
<assistant-examiner>
<last-name>Nguyen</last-name>
<first-name>Hau H</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Similar, contiguous primitives are stored as a single primitive in zone rendering bins. A primitive packet used in the bin is allowed to vary in length and the currently open type of primitive is recorded on a per-bin basis. A special code is used to specify a variable number of subsequent indices. With this mechanism, the hardware is able to start outputting and replicating primitive commands into bin lists on the fly without requiring the buffering of the entire primitive. Given the variable nature of the primitive instruction, multiple similar/sequential primitives can be concatenated using a single primitive command header.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="171.79mm" wi="211.50mm" file="US07298371-20071120-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="132.16mm" wi="92.54mm" orientation="landscape" file="US07298371-20071120-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="228.26mm" wi="180.42mm" orientation="landscape" file="US07298371-20071120-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="104.48mm" wi="143.68mm" file="US07298371-20071120-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="138.26mm" wi="106.68mm" file="US07298371-20071120-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="246.46mm" wi="181.27mm" orientation="landscape" file="US07298371-20071120-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<p id="p-0002" num="0001">This application is a continuation of Ser. No. 10/039,006, filed on Dec. 31, 2001 now U.S. Pat. No. 6,747,653, entitled “Efficient Object Storage for Zone Rendering.”</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND</heading>
<p id="p-0003" num="0002">1. Field</p>
<p id="p-0004" num="0003">The present invention relates generally to graphics systems and more particularly to graphics-rendering systems.</p>
<p id="p-0005" num="0004">2. Background Information</p>
<p id="p-0006" num="0005">Computer graphics systems are commonly used for displaying graphical representations of objects on a two-dimensional video display screen. Current computer graphics systems provide highly detailed representations and are used in a variety of applications. In typical computer graphics systems, an object to be represented on the display screen is broken down into graphics primitives. Primitives are basic components of a graphics display and may include points, lines, vectors and polygons, such as triangles and quadrilaterals. Typically, a hardware/software scheme is implemented to render or draw the graphics primitives that represent a view of one or more objects being represented on the display screen.</p>
<p id="p-0007" num="0006">The primitives of the three-dimensional objects to be rendered are defined by a host computer in terms of primitive data. For example, when the primitive is a triangle, the host computer may define the primitive in terms of X, Y and Z coordinates of its vertices, as well as the red, green and blue (R, G and B) color values of each vertex. Additional primitive data may be used in specific applications.</p>
<p id="p-0008" num="0007">Image rendering is the conversion of a high-level object-based description into a graphical image for display on some display device. For example, an act of image rendering occurs during the conversion of a mathematical model of a three-dimensional object or scene into a bitmap image. Another example of image rendering is converting an HTML document into an image for display on a computer monitor. Typically, a hardware device referred to as a graphics-rendering engine performs these graphics processing tasks. Graphics-rendering engines typically render scenes into a buffer that is subsequently output to the graphical output device, but it is possible for some rendering-engines to write their two-dimensional output directly to the output device. The graphics-rendering engine interpolates the primitive data to compute the display screen pixels that represent the each primitive, and the R, G and B color values of each pixel.</p>
<p id="p-0009" num="0008">A graphics-rendering system (or subsystem), as used herein, refers to all of the levels of processing between an application program and a graphical output device. A graphics engine can provide for one or more modes of rendering, including zone rendering. Zone rendering attempts to increase overall 3D rendering performance by gaining optimal render cache utilization, thereby reducing pixel color and depth memory read/write bottlenecks. In zone rendering, a screen is subdivided into an array of zones and per-zone instruction bins, used to hold all of the primitive and state setting instructions required to render each sub-image, are generated. Whenever a primitive intersects (or possibly intersects) a zone, that primitive instruction is placed in the bin for that zone. Some primitives will intersect more than one zone, in which case the primitive instruction is replicated in the corresponding bins. This process is continued until the entire scene is sorted into the bins. Following the first pass of building a bin for each zone intersected by a primitive, a second zone-by-zone rendering pass is performed. In particular, the bins for all the zones are rendered to generate the final image.</p>
<p id="p-0010" num="0009">Conventionally, the storage of 3D primitive instruction in a bin is formatted as follows: a one 32-bit header describing the type of primitive and an explicit count of vertex indices, followed by a series of 16-bit vertex indices (with a possible trailing 16-bit pad to ensure 32-bit alignment in the bin). The explicit count in the header required knowledge of the size (i.e., number of indices) of the primitive at the time the primitive instruction is generated. The 32-bit header contributes to the bin list bandwidth and footprint requirements of zone rendering.</p>
<p id="p-0011" num="0010">What is needed therefore is a method and apparatus for efficient object storage for zone rendering.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0002" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 1</figref> illustrates a block diagram of an embodiment of a computer system including an embodiment of a graphics device for implementing efficient object storage for zone rendering.</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 2</figref> illustrates a block diagram of an embodiment of a graphics device including a graphics-binning engine, graphics-rendering engine and bins.</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 3</figref> illustrates a depiction of an embodiment of a zone renderer screen view including zones and geometrical primitives.</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 4</figref> illustrates a block diagram of an embodiment of a primitive command with variable vertex count.</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 5</figref> illustrates a diagram of an embodiment of information stored in a bin pointer list.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0003" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0017" num="0016">Embodiments of the present invention provide for efficient object storage for zone rendering. In particular, similar, contiguous primitives to be stored as a single primitive in the zone rendering bins. To enable this, the primitive packet used in the bin is allowed to vary in length and the currently open type of primitive is recorded on a per-bin basis.</p>
<p id="p-0018" num="0017">In the detailed description, numerous specific details are set forth in order to provide a thorough understanding of the present invention. However, it will be understood by those skilled in the art that the present invention maybe practiced without these specific details. In other instances, well-known methods, procedures, components and circuits have been described in detail so as not to obscure the present invention.</p>
<p id="p-0019" num="0018">Some portions of the detailed description that follow are presented in terms of algorithms and symbolic representations of operations on data bits or binary signals within a computer. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to convey the substance of their work to others skilled in the art. An algorithm is here, and generally, considered to be a self-consistent sequence of steps leading to a desired result. The steps include physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers or the like. It should be understood, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussions, it is appreciated that throughout the specification, discussions utilizing such terms as “processing” or “computing” or “calculating” or “determining” or the like, refer to the action and processes of a computer or computing system, or similar electronic computing device, that manipulate and transform data represented as physical (electronic) quantities within the computing system's registers and/or memories into other data similarly represented as physical quantities within the computing system's memories, registers or other such information storage, transmission or display devices.</p>
<p id="p-0020" num="0019">Embodiments of the present invention may be implemented in hardware or software, or a combination of both. However, embodiments of the invention may be implemented as computer programs executing on programmable systems comprising at least one processor, a data storage system (including volatile and non-volatile memory and/or storage elements), at least one input device, and at least one output device. Program code may be applied to input data to perform the functions described herein and generate output information. The output information may be applied to one or more output devices, in known fashion. For purposes of this application, a processing system includes any system that has a processor, such as, for example, a digital signal processor (DSP), a micro-controller, an application specific integrated circuit (ASIC), or a microprocessor.</p>
<p id="p-0021" num="0020">The programs may be implemented in a high level procedural or object oriented programming language to communicate with a processing system. The programs may also be implemented in assembly or machine language, if desired. In fact, the invention is not limited in scope to any particular programming language. In any case, the language may be a compiled or interpreted language.</p>
<p id="p-0022" num="0021">The programs may be stored on a storage media or device (e.g., hard disk drive, floppy disk drive, read only memory (ROM), CD-ROM device, flash memory device, digital versatile disk (DVD), or other storage device) readable by a general or special purpose programmable processing system, for configuring and operating the processing system when the storage media or device is read by the processing system to perform the procedures described herein. Embodiments of the invention may also be considered to be implemented as a machine-readable storage medium, configured for use with a processing system, where the storage medium so configured causes the processing system to operate in a specific and predefined manner to perform the functions described herein.</p>
<p id="p-0023" num="0022">An example of one such type of processing system is shown in <figref idref="DRAWINGS">FIG. 1</figref>. Sample system <b>100</b> may be used, for example, to execute the processing for methods in accordance with the present invention, such as the embodiment described herein. Sample system <b>100</b> is representative of processing systems based on the microprocessors available from Intel Corporation, although other systems (including personal computers (PCs) having other microprocessors, engineering workstations, set-top boxes and the like) may also be used. In one embodiment, sample system <b>100</b> may be executing a version of the WINDOWS.™. operating system available from Microsoft Corporation, although other operating systems and graphical user interfaces, for example, may also be used.</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram of a system <b>100</b> of one embodiment of the present invention. The computer system <b>100</b> includes central processor <b>102</b>, graphics and memory controller <b>104</b> including graphics device <b>106</b>, memory <b>108</b> and display device <b>114</b>. Processor <b>102</b> processes data signals and may be a complex instruction set computer (CISC) microprocessor, a reduced instruction set computing (RISC) microprocessor, a very long instruction word (VLIW) microprocessor, a process implementing a combination of instruction sets, or other processor device, such as a digital signal processor, for example. Processor <b>102</b> may be coupled to common bus <b>112</b> that transmits data signals between processor <b>102</b> and other components in the system <b>100</b>. <figref idref="DRAWINGS">FIG. 1</figref> is for illustrative purposes only. The present invention can also be utilized in a configuration including a descrete graphics device.</p>
<p id="p-0025" num="0024">Processor <b>102</b> issues signals over common bus <b>112</b> for communicating with memory <b>108</b> or graphics and memory controller <b>104</b> in order to manipulate data as described herein. Processor <b>102</b> issues such signals in response to software instructions that it obtains from memory <b>108</b>. Memory <b>108</b> may be a dynamic random access memory (DRAM) device, a static random access memory (SRAM) device, or other memory device. Memory <b>108</b> may store instructions and/or data represented by data signals that may be executed by processor <b>102</b>, graphics device <b>106</b> or some other device. The instructions and/or data may comprise code for performing any and/or all of the techniques of the present invention. Memory <b>108</b> may also contain software and/or data. An optional cache memory <b>110</b> may be used to speed up memory accesses by the graphics device <b>106</b> by taking advantage of its locality of access. In some embodiments, graphics device <b>106</b> can offload from processor <b>102</b> many of the memory-intensive tasks required for rendering an image. Graphics device <b>106</b> processes data signals and may be a complex instruction set computer (CISC) microprocessor, a reduced instruction set computing (RISC) microprocessor, a very long instruction word (VLIW) microprocessor, a process implementing a combination of instruction sets, or other processor device, such as a digital signal processor, for example. Graphics device <b>106</b> may be coupled to common bus <b>112</b> that transmits data signals between graphics device <b>106</b> and other components in the system <b>100</b>, including render cache <b>110</b> and display device <b>114</b>. Graphics device <b>106</b> includes rendering hardware that among other things writes specific attributes (e.g. colors) to specific pixels of display <b>114</b> and draw complicated primitives on display device <b>114</b>. Graphics and memory controller <b>104</b> communicates with display device <b>114</b> for displaying images rendered or otherwise processed by a graphics controller <b>104</b>. Display device <b>114</b> may comprise a computer monitor, television set, flat panel display or other suitable display device.</p>
<p id="p-0026" num="0025">Memory <b>108</b> stores a host operating system that may include one or more rendering programs to build the images of graphics primitives for display. System <b>100</b> includes graphics device <b>106</b>, such as a graphics accelerator that uses customized hardware logic device or a co-processor to improve the performance of rendering at least some portion of the graphics primitives otherwise handled by host rendering programs. The host operating system program and its host graphics application program interface (API) control the graphics device <b>106</b> through a driver program.</p>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. 2</figref> illustrates a block diagram of an embodiment <b>120</b> of a graphics device including a graphics-binning engine <b>120</b>, vertex buffers <b>150</b> including first buffer <b>152</b> including only vertex X and Y data, graphics-rendering engine <b>136</b> and bins <b>128</b>. <figref idref="DRAWINGS">FIG. 3</figref> illustrates an embodiment <b>160</b> of various screen objects implemented on a zone rendering system <b>120</b> (shown in <figref idref="DRAWINGS">FIG. 2</figref>) is illustrated. Referring to <figref idref="DRAWINGS">FIGS. 2 and 3</figref>, a screen object to be presented on the display screen is broken down into graphics primitives <b>162</b>. Primitives <b>162</b> may include, but are not limited to, graphical objects such as polygons (e.g., triangles and quadrilaterals), lines, points and vectors. The graphics engine <b>106</b> is implemented to render, or draw, the graphics primitives <b>162</b> that represent a view of one or more screen objects being represented on the display screen. In zone rendering, a screen is subdivided into an array of zones <b>164</b> commonly screen-space rectangles although other geometric variants may be used as well. Each zone <b>164</b> is associated with a bin. Each bin <b>128</b> includes a chained series of command buffers <b>134</b> stored within non-contiguous physical memory pages. The bins <b>128</b> are thus preferably implemented as a chain of independent physical pages.</p>
<p id="p-0028" num="0027">When a primitive <b>162</b> intersects a zone <b>164</b>, the corresponding primitive instruction is placed in the bin <b>128</b> associated with the zone <b>164</b> intersected. Per-zone instruction bins <b>128</b> are thus used to hold primitive instructions and state-setting instructions required to render each sub-image and are generated by comparing the screen-space extent of each primitive <b>162</b> to the array of zones <b>164</b>. Thus, as the primitives <b>162</b> are received, the present invention determines which zone(s) <b>164</b> each primitive <b>162</b> intersects, and replicates the primitive instructions into a bin <b>128</b> associated with each of these zones <b>164</b>.</p>
<p id="p-0029" num="0028">The process of assigning primitives (and their attributes) <b>162</b> to zones <b>164</b> is referred to as binning. “Bin” <b>128</b> refers to the abstract buffer used for each zone-where a bin <b>128</b> will typically be realized as a series of instruction batch buffers <b>134</b>. Binning performs the necessary computations to determine what primitives <b>162</b> lie in what zones <b>164</b> and can be performed by dedicated hardware and/or software implementations.</p>
<p id="p-0030" num="0029">In one typical implementation, a driver <b>122</b> writes out a set of primitive instructions to be parsed by the graphics-binning engine <b>126</b>. In particular, the information necessary for primitive binning is stored in vertex buffers <b>150</b>, which includes first buffer <b>152</b> and second buffer <b>154</b>. As discussed in detail below, first buffer <b>150</b> stores vertex X and Y data, while second buffer <b>154</b> contains the remainder of the vertex data. For each zone <b>164</b> intersected by a primitive <b>162</b>, the graphics-binning engine writes corresponding primitive instructions into buffers <b>134</b> associated with the zones <b>164</b> intersected. Given the split vertex buffers <b>152</b> and <b>154</b>, graphics binning-engine <b>126</b> is now permitted to read and cache only vertex screen X and Y data from first buffer <b>150</b>. Some primitives <b>162</b> will intersect more than one zone <b>164</b>, in which case the primitive instruction is replicated in bins <b>128</b> corresponding to the intersected zones <b>164</b>. For example, the lightning bolt depicted in <figref idref="DRAWINGS">FIG. 3</figref> intersects nine zones <b>164</b>. This process is continued until the entire scene is sorted into bins <b>128</b>.</p>
<p id="p-0031" num="0030">Referring to <figref idref="DRAWINGS">FIG. 2</figref>, in a typical implementation, a graphics primitive and state-setting instruction stream, referred to as a scene input list <b>124</b>, is initially applied to graphics-binning engine ring buffer <b>125</b> associated with graphics-binning engine <b>126</b>. The scene input list <b>124</b> may be a single, temporally-ordered scene description as received by the application programming interface (API). Graphics-binning engine <b>126</b> is typically implemented as a hardware binning engine (HWB) <b>126</b>. One skilled in the art will recognize that a software or software plus hardware binner could be used as well. The graphics-binning engine <b>126</b> parses scene input list <b>124</b> and determines which zone(s) <b>164</b> each primitive <b>162</b> intersects.</p>
<p id="p-0032" num="0031">As previously noted, the zones <b>164</b> are associated with bins <b>128</b>. Graphics-binning engine <b>126</b> compares the screen-space extent of each primitive <b>162</b> to the array of zones <b>164</b>, and replicates the associated primitive commands into corresponding bins <b>128</b>. Bins <b>128</b> are comprised of chained series of command buffers <b>134</b> typically stored within non-contiguous physical memory pages. A bin list is a list of buffers <b>134</b> which comprise each bin <b>132</b>. Pages are initially allocated to the bin memory pool (BMP) <b>140</b>. The bin pointer list <b>130</b> is initialized with the page numbers of the pages and stores write pointers into each bin list <b>132</b>.</p>
<p id="p-0033" num="0032">The graphics-binning engine <b>126</b> also maintains the current graphics state by parsing associated state-setting instructions contained with the scene input list <b>124</b>. Prior to placing a primitive command in any given bin <b>128</b>, the graphics-binning engine <b>126</b> typically precedes the primitive command in the bin <b>128</b> with any required state-setting instructions.</p>
<p id="p-0034" num="0033">After the scene input list <b>124</b> has been completely parsed, the associated bins (i.e. bin <b>0</b>, bin <b>1</b> . . . bin n−1) are ready to be used by the graphics-rendering engine <b>136</b> to render the scene. As discussed in detail below, instructions are included at the end of the scene input list <b>124</b> to cause the graphics-binning engine <b>126</b> to increment the register in pending scene counter <b>148</b> by one and initiate rendering of the binned scene. For example, graphics-binning engine <b>126</b> sends a render instruction to graphics-rendering engine ring buffer <b>157</b> associated with graphics-rendering engine <b>136</b> via path <b>156</b>.</p>
<p id="p-0035" num="0034">Once all the primitives <b>162</b> are sorted and the command structures completed, a second pass is made to render the scene one zone <b>164</b> at a time. Following the first pass of building a bin for each zone <b>164</b> intersected by a primitive <b>162</b>, a second zone-by-zone rendering pass is performed. In particular, the bins <b>128</b> for all the zones <b>164</b> are rendered to generate the final image, with each scene rendered one zone <b>164</b> at a time. The order with which the zones <b>164</b> are rendered is typically not significant. All bins <b>128</b> associated with primitives <b>162</b> that touch pixels within a particular zone <b>164</b> are rendered before the next zone <b>164</b> is rendered. A single primitive <b>162</b> may intersect many zones <b>164</b>, thus requiring multiple replications. As a result, primitives <b>162</b> that intersect multiple zones <b>164</b> are rendered multiple times (i.e. once for each zone <b>164</b> intersected).</p>
<p id="p-0036" num="0035">Rendering performance improves as a result of the primitives <b>162</b> being sorted by their intersection with zones <b>164</b> that are aligned to the render cache <b>110</b>. Since the graphics device <b>106</b> is only working on a small portion of the screen at a time (i.e. a zone <b>164</b>), it is able to hold the frame buffer contents for the entire zone <b>164</b> in a render cache <b>110</b>. The dimensions of the zone <b>164</b> are typically a constant tuned to the size and organization of the render cache <b>110</b>. It is by this mechanism that the render cache <b>110</b> provides optimal benefits—reuse of cached data is maximized by exploiting the spatial coherence of a zone <b>164</b>. Through use of the zone rendering mode, only the minimum number of color memory writes need be performed to generate the final image one zone <b>164</b> at a time, and color memory reads and depth memory reads and writes can be minimized or avoided altogether. Use of the render cache <b>110</b> thus significantly reduces the memory traffic and improves performance relative to a conventional renderer that draws each primitive completely before continuing to the next primitive.</p>
<p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. 4</figref> illustrates a block diagram of an embodiment <b>170</b> of a primitive command with variable vertex count. Embodiments of the present invention provide for efficient object storage for zone rendering. In particular, similar, contiguous primitives to be stored as a single primitive in the zone rendering bins. To enable this, the primitive packet used in the bin is allowed to vary in length and the currently open type of primitive is recorded on a per-bin basis.</p>
<p id="p-0038" num="0037">The requirement for an explicit vertex count in the object instruction header is eliminated. Instead, a special code is used to specify a variable number of subsequent indices. A special index value of 0xFFFF is reserved to terminate the vertex index sequence. With this mechanism, the hardware is able to start outputting (and possibly replicating) primitive commands into bin lists on the fly without requiring the buffering of the entire primitive. Given the variable nature of the primitive instruction, multiple similar/sequential primitives can be concatenated using a single primitive command header. This reduces the bandwidth and footprint overhead caused by separate primitive instruction headers.</p>
<p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. 5</figref> illustrates a diagram of an embodiment <b>180</b> of information stored in a bin pointer list. In order to permit the concatenation of object vertex indices across primitives, the currently open type of primitive (POINTLIST, LINELIST, TRILIST, RECTLIST, or NOT_OPEN) is recorded on a per-bin basis in order to detect changes in primitive type. This information is stored in the bin pointer as illustrated in <figref idref="DRAWINGS">FIG. 5</figref>.</p>
<p id="p-0040" num="0039">Having now described the invention in accordance with the requirements of the patent statutes, those skilled in the art will understand how to make changes and modifications to the present invention to meet their specific requirements or conditions. Such changes and modifications may be made without departing from the scope and spirit of the invention as set forth in the following claims.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A graphics device, comprising:
<claim-text>a vertex buffer containing vertex data;</claim-text>
<claim-text>a plurality of bin buffers, each associated with a different zone on a display device and comprising a chained series of command buffers to store primitive command information; and</claim-text>
<claim-text>a graphics binning engine programmed to copy vertex data to the plurality of bin buffers when the vertex data is representative of a graphics primitive that intersects the zone associated with the bin buffer.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The graphics device as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the graphics binning engine is programmed to maintain a graphics state by parsing state setting instructions.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The graphics device as recited in <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the graphics binning engine is programmed to place the state setting instructions in the bin buffers.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The graphics device as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising a graphics rendering engine for rendering an image on a zone-by-zone basis based on the data in the bin buffers.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. A system comprising:
<claim-text>a graphics device having:
<claim-text>a plurality of vertex buffers including a first buffer to store vertex coordinate data of vertex data and a second buffer to store a remainder of the vertex data;</claim-text>
<claim-text>a plurality of bin buffers each associated with a zone of a display, each bin buffer to store primitive commands associated with a corresponding zone; and</claim-text>
<claim-text>a binning engine to read the vertex coordinate data in the first buffer and to write the primitive commands to the bin buffers based on the vertex coordinate data in the first buffer; and</claim-text>
</claim-text>
<claim-text>a processor coupled to the graphics device.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The system of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein dimensions of the zone are of a constant value tuned to a size and organization of a render cache.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The system of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein at least some of the primitive commands stored in the bin buffers include a variable vertex count.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The system of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the at least some of the primitive commands include a header code to identify a variable number of indices.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. A method comprising:
<claim-text>storing first vertex information to a first vertex buffer of a graphics engine and storing second vertex information to a second vertex buffer of the graphics engine, wherein the first vertex information corresponds to vertex coordinate data and the second vertex information corresponds to vertex remainder data of a primitive;</claim-text>
<claim-text>storing primitive instructions associated with the first vertex information to each of a plurality of bin buffers of the graphics engine corresponding to a display zone that is to be intersected by the primitive; and</claim-text>
<claim-text>reading the primitive instructions in the plurality of bin buffers to generate an image on a display.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, further comprising storing a zone at a time in a render cache coupled to the graphics engine.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, further comprising storing the primitive instructions with a variable vertex count.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, further comprising storing a header code in the primitive instructions to identify a variable number of indices.</claim-text>
</claim>
</claims>
</us-patent-grant>
