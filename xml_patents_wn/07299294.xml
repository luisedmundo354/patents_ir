<us-patent-grant lang="EN" dtd-version="v4.2 2006-08-23" file="US07299294-20071120.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20071106" date-publ="20071120">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>07299294</doc-number>
<kind>B1</kind>
<date>20071120</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>09548188</doc-number>
<date>20000412</date>
</document-id>
</application-reference>
<us-application-series-code>09</us-application-series-code>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>15</main-group>
<subgroup>16</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>709235</main-classification>
<further-classification>709201</further-classification>
<further-classification>709217</further-classification>
<further-classification>709222</further-classification>
<further-classification>709225</further-classification>
<further-classification>709230</further-classification>
<further-classification>709238</further-classification>
<further-classification>709245</further-classification>
<further-classification>709250</further-classification>
<further-classification>711  6</further-classification>
<further-classification>711203</further-classification>
</classification-national>
<invention-title id="d0e43">Distributed traffic controller for network data</invention-title>
<references-cited>
<citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>4792941</doc-number>
<kind>A</kind>
<name>Yanosy et al.</name>
<date>19881200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370232</main-classification></classification-national>
</citation>
<citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5191651</doc-number>
<kind>A</kind>
<name>Halim et al.</name>
<date>19930300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709250</main-classification></classification-national>
</citation>
<citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>5341477</doc-number>
<kind>A</kind>
<name>Pitkin et al.</name>
<date>19940800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709226</main-classification></classification-national>
</citation>
<citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>5452291</doc-number>
<kind>A</kind>
<name>Eisenhandler et al.</name>
<date>19950900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370402</main-classification></classification-national>
</citation>
<citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>5530897</doc-number>
<kind>A</kind>
<name>Meritt</name>
<date>19960600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>710  9</main-classification></classification-national>
</citation>
<citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>5550816</doc-number>
<kind>A</kind>
<name>Hardwick et al.</name>
<date>19960800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370397</main-classification></classification-national>
</citation>
<citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>5636216</doc-number>
<kind>A</kind>
<name>Fox et al.</name>
<date>19970600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370402</main-classification></classification-national>
</citation>
<citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>5729681</doc-number>
<kind>A</kind>
<name>Aditya et al.</name>
<date>19980300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709230</main-classification></classification-national>
</citation>
<citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>5774660</doc-number>
<kind>A</kind>
<name>Brendel et al.</name>
<date>19980600</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>395200</main-classification></classification-national>
</citation>
<citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>5774668</doc-number>
<kind>A</kind>
<name>Choquier et al.</name>
<date>19980600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709223</main-classification></classification-national>
</citation>
<citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>5790804</doc-number>
<kind>A</kind>
<name>Osborne</name>
<date>19980800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709245</main-classification></classification-national>
</citation>
<citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>5825772</doc-number>
<kind>A</kind>
<name>Dobbins et al.</name>
<date>19981000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
</citation>
<citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>5835725</doc-number>
<kind>A</kind>
<name>Chiang et al.</name>
<date>19981100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
</citation>
<citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>5892925</doc-number>
<kind>A</kind>
<name>Aditya et al.</name>
<date>19990400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
</citation>
<citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>5898830</doc-number>
<kind>A</kind>
<name>Wesinger et al.</name>
<date>19990400</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>39518701</main-classification></classification-national>
</citation>
<citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>5963720</doc-number>
<kind>A</kind>
<name>Grossman</name>
<date>19991000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
</citation>
<citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>6006259</doc-number>
<kind>A</kind>
<name>Adelman et al.</name>
<date>19991200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709223</main-classification></classification-national>
</citation>
<citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>6047324</doc-number>
<kind>A</kind>
<name>Ford et al.</name>
<date>20000400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
</citation>
<citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>6073178</doc-number>
<kind>A</kind>
<name>Wong et al.</name>
<date>20000600</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>709229</main-classification></classification-national>
</citation>
<citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>6088330</doc-number>
<kind>A</kind>
<name>Bruck et al.</name>
<date>20000700</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>370228</main-classification></classification-national>
</citation>
<citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>6091951</doc-number>
<kind>A</kind>
<name>Sturniolo et al.</name>
<date>20000700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>4554322</main-classification></classification-national>
</citation>
<citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>6101552</doc-number>
<kind>A</kind>
<name>Chiang et al.</name>
<date>20000800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709245</main-classification></classification-national>
</citation>
<citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>6104870</doc-number>
<kind>A</kind>
<name>Frick et al.</name>
<date>20000800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>703 27</main-classification></classification-national>
</citation>
<citation>
<patcit num="00024">
<document-id>
<country>US</country>
<doc-number>6128277</doc-number>
<kind>A</kind>
<name>Bruck et al.</name>
<date>20001000</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>370221</main-classification></classification-national>
</citation>
<citation>
<patcit num="00025">
<document-id>
<country>US</country>
<doc-number>6131112</doc-number>
<kind>A</kind>
<name>Lewis et al.</name>
<date>20001000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
</citation>
<citation>
<patcit num="00026">
<document-id>
<country>US</country>
<doc-number>6154465</doc-number>
<kind>A</kind>
<name>Pickett</name>
<date>20001100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370466</main-classification></classification-national>
</citation>
<citation>
<patcit num="00027">
<document-id>
<country>US</country>
<doc-number>6167054</doc-number>
<kind>A</kind>
<name>Simmons et al.</name>
<date>20001200</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>370422</main-classification></classification-national>
</citation>
<citation>
<patcit num="00028">
<document-id>
<country>US</country>
<doc-number>6243360</doc-number>
<kind>B1</kind>
<name>Basilico</name>
<date>20010600</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>370231</main-classification></classification-national>
</citation>
<citation>
<patcit num="00029">
<document-id>
<country>US</country>
<doc-number>6249801</doc-number>
<kind>B1</kind>
<name>Zisapel et al.</name>
<date>20010600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>718105</main-classification></classification-national>
</citation>
<citation>
<patcit num="00030">
<document-id>
<country>US</country>
<doc-number>6253326</doc-number>
<kind>B1</kind>
<name>Lincke et al.</name>
<date>20010600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
</citation>
<citation>
<patcit num="00031">
<document-id>
<country>US</country>
<doc-number>6253327</doc-number>
<kind>B1</kind>
<name>Zhang et al.</name>
<date>20010600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726 14</main-classification></classification-national>
</citation>
<citation>
<patcit num="00032">
<document-id>
<country>US</country>
<doc-number>6304558</doc-number>
<kind>B1</kind>
<name>Mysore</name>
<date>20011000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370312</main-classification></classification-national>
</citation>
<citation>
<patcit num="00033">
<document-id>
<country>US</country>
<doc-number>6314475</doc-number>
<kind>B1</kind>
<name>Collin et al.</name>
<date>20011100</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>710 15</main-classification></classification-national>
</citation>
<citation>
<patcit num="00034">
<document-id>
<country>US</country>
<doc-number>6324177</doc-number>
<kind>B1</kind>
<name>Howes et al.</name>
<date>20011100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370389</main-classification></classification-national>
</citation>
<citation>
<patcit num="00035">
<document-id>
<country>US</country>
<doc-number>6327628</doc-number>
<kind>B1</kind>
<name>Anuff et al.</name>
<date>20011200</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>703311</main-classification></classification-national>
</citation>
<citation>
<patcit num="00036">
<document-id>
<country>US</country>
<doc-number>6353858</doc-number>
<kind>B1</kind>
<name>Raamot et al.</name>
<date>20020300</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>709249</main-classification></classification-national>
</citation>
<citation>
<patcit num="00037">
<document-id>
<country>US</country>
<doc-number>6374299</doc-number>
<kind>B1</kind>
<name>Ford et al.</name>
<date>20020400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
</citation>
<citation>
<patcit num="00038">
<document-id>
<country>US</country>
<doc-number>6392990</doc-number>
<kind>B1</kind>
<name>Tosey et al.</name>
<date>20020500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370218</main-classification></classification-national>
</citation>
<citation>
<patcit num="00039">
<document-id>
<country>US</country>
<doc-number>6411685</doc-number>
<kind>B1</kind>
<name>ONeal</name>
<date>20020600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
</citation>
<citation>
<patcit num="00040">
<document-id>
<country>US</country>
<doc-number>6415323</doc-number>
<kind>B1</kind>
<name>McCanne et al.</name>
<date>20020700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709225</main-classification></classification-national>
</citation>
<citation>
<patcit num="00041">
<document-id>
<country>US</country>
<doc-number>6424992</doc-number>
<kind>B2</kind>
<name>Devarakonda et al.</name>
<date>20020700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
</citation>
<citation>
<patcit num="00042">
<document-id>
<country>US</country>
<doc-number>6452925</doc-number>
<kind>B1</kind>
<name>Sistanizadeh et al.</name>
<date>20020900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370352</main-classification></classification-national>
</citation>
<citation>
<patcit num="00043">
<document-id>
<country>US</country>
<doc-number>6469998</doc-number>
<kind>B1</kind>
<name>Burgaleta Salinas et al.</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370338</main-classification></classification-national>
</citation>
<citation>
<patcit num="00044">
<document-id>
<country>US</country>
<doc-number>6480508</doc-number>
<kind>B1</kind>
<name>Mwikalo et al.</name>
<date>20021100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
</citation>
<citation>
<patcit num="00045">
<document-id>
<country>US</country>
<doc-number>6490289</doc-number>
<kind>B1</kind>
<name>Zhang et al.</name>
<date>20021200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370401</main-classification></classification-national>
</citation>
<citation>
<patcit num="00046">
<document-id>
<country>US</country>
<doc-number>6507908</doc-number>
<kind>B1</kind>
<name>Caronni</name>
<date>20030100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713153</main-classification></classification-national>
</citation>
<citation>
<patcit num="00047">
<document-id>
<country>US</country>
<doc-number>6587455</doc-number>
<kind>B1</kind>
<name>Ray et al.</name>
<date>20030700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370352</main-classification></classification-national>
</citation>
<citation>
<patcit num="00048">
<document-id>
<country>US</country>
<doc-number>6721907</doc-number>
<kind>B2</kind>
<name>Earl</name>
<date>20040400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714 57</main-classification></classification-national>
</citation>
<citation>
<patcit num="00049">
<document-id>
<country>US</country>
<doc-number>6748499</doc-number>
<kind>B2</kind>
<name>Beukema et al.</name>
<date>20040600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711147</main-classification></classification-national>
</citation>
<citation>
<patcit num="00050">
<document-id>
<country>US</country>
<doc-number>6760775</doc-number>
<kind>B1</kind>
<name>Anerousis et al.</name>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709238</main-classification></classification-national>
</citation>
<citation>
<patcit num="00051">
<document-id>
<country>US</country>
<doc-number>6785704</doc-number>
<kind>B1</kind>
<name>McCanne</name>
<date>20040800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>718105</main-classification></classification-national>
</citation>
<citation>
<patcit num="00052">
<document-id>
<country>US</country>
<doc-number>6845091</doc-number>
<kind>B2</kind>
<name>Ogier et al.</name>
<date>20050100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370338</main-classification></classification-national>
</citation>
<citation>
<patcit num="00053">
<document-id>
<country>US</country>
<doc-number>6917626</doc-number>
<kind>B1</kind>
<name>Duvvury</name>
<date>20050700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370466</main-classification></classification-national>
</citation>
<citation>
<patcit num="00054">
<document-id>
<country>US</country>
<doc-number>6934765</doc-number>
<kind>B2</kind>
<name>Held et al.</name>
<date>20050800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709245</main-classification></classification-national>
</citation>
<citation>
<patcit num="00055">
<document-id>
<country>US</country>
<doc-number>6944785</doc-number>
<kind>B2</kind>
<name>Gadir et al.</name>
<date>20050900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714  4</main-classification></classification-national>
</citation>
<citation>
<patcit num="00056">
<document-id>
<country>US</country>
<doc-number>6957276</doc-number>
<kind>B1</kind>
<name>Bahl</name>
<date>20051000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709245</main-classification></classification-national>
</citation>
<citation>
<patcit num="00057">
<document-id>
<country>US</country>
<doc-number>6996628</doc-number>
<kind>B2</kind>
<name>Keane et al.</name>
<date>20060200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709238</main-classification></classification-national>
</citation>
<citation>
<patcit num="00058">
<document-id>
<country>WO</country>
<doc-number>9826559</doc-number>
<date>19980600</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00059">
<document-id>
<country>WO</country>
<doc-number>WO 99/17217</doc-number>
<date>19990400</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00060">
<document-id>
<country>WO</country>
<doc-number>9933227</doc-number>
<date>19990700</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00061">
<othercit>Caruso, J. “NASA-funded software aids reliabillity,” CNN.com -Dec. 22, 1999 http://www/cnn.com/1999/TECH/computing/12/22/nasa.software.idg/index.html.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00062">
<othercit>Press Release: “Rainfinity Unveils Rainwall -Industry's First Fully Distributed Clustering Solution for Internet Gateways,” Spring Internet World '99, Los Angeles, CA -Apr. 14, 1999.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00063">
<othercit>Goldszmidt, G. S., “Load management for scaling up internet services” IEEE Network Operations and Management Symposium, US, New York, NY: IEEE vol. Conf. 10, pp. 828-835, Feb. 15, 1998.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00064">
<othercit>International Search Report mailed on Oct. 6, 2000 for PCT Application PCT/US/00/09966.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
</references-cited>
<number-of-claims>75</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>709222</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709230</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709232</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709238</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709244</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709245</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709251</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709201</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709217</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709219</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709227</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709250</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709225</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709229</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709234</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709235</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709241</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>711  6</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>711203</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>17</number-of-drawing-sheets>
<number-of-figures>17</number-of-figures>
</figures>
<us-related-documents>
<continuation>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>09437637</doc-number>
<kind>00</kind>
<date>19991110</date>
</document-id>
<parent-status>ABANDONED</parent-status>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>09548188</doc-number>
</document-id>
</child-doc>
</relation>
</continuation>
</us-related-documents>
<parties>
<applicants>
<applicant sequence="001" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Bruck</last-name>
<first-name>Jehoshua</first-name>
<address>
<city>La Canada</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="002" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Bohossian</last-name>
<first-name>Vasken</first-name>
<address>
<city>Pasadena</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="003" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Fan</last-name>
<first-name>Chenggong</first-name>
<address>
<city>Pasadena</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="004" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>LeMahieu</last-name>
<first-name>Paul</first-name>
<address>
<city>Pasadena</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="005" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Love</last-name>
<first-name>Philip</first-name>
<address>
<city>Pasadena</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
</applicants>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<last-name>Young</last-name>
<first-name>Barry N.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</parties>
<assignees>
<assignee>
<addressbook>
<orgname>EMC Corporation</orgname>
<role>02</role>
<address>
<city>Hopkinton</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Won</last-name>
<first-name>Michael</first-name>
<department>2155</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A distributed gateway for controlling computer network data traffic dynamically reconfigures traffic assignments among multiple gateway machines for increased network availability. If one of the distributed gateway machines becomes unavailable, traffic assignments are moved among the multiple machines such that network availability is substantially unchanged. The machines of the distributed gateway form a cluster and communicate with each other using a Group Membership protocol word such that automatic, dynamic traffic assignment reconfiguration occurs in response to machines being added and deleted from the cluster, with no loss in functionality for the gateway overall, in a process that is transparent to network users, thereby providing a distributed gateway functionality that is scalable. Operation of the distributed gateway remains consistent as machines are added and deleted from the cluster. A scalable, distributed, highly available, load balancing network gateway is thereby provided, having multiple machines that function as a front server layer between the network and a back-end server layer having multiple machines functioning as Web file servers, FTP servers, or other application servers. The front layer machines comprise a server cluster that performs fail-over and dynamic load balancing for both server layers.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="155.96mm" wi="176.11mm" file="US07299294-20071120-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="197.10mm" wi="155.45mm" file="US07299294-20071120-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="237.74mm" wi="178.14mm" file="US07299294-20071120-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="244.43mm" wi="204.30mm" file="US07299294-20071120-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="208.11mm" wi="200.58mm" file="US07299294-20071120-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="151.64mm" wi="190.42mm" file="US07299294-20071120-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="159.09mm" wi="129.96mm" file="US07299294-20071120-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="249.60mm" wi="81.62mm" orientation="landscape" file="US07299294-20071120-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="174.07mm" wi="136.06mm" file="US07299294-20071120-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="270.00mm" wi="198.20mm" file="US07299294-20071120-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="148.25mm" wi="179.92mm" file="US07299294-20071120-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="149.27mm" wi="180.93mm" file="US07299294-20071120-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="269.58mm" wi="187.71mm" orientation="landscape" file="US07299294-20071120-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00013" num="00013">
<img id="EMI-D00013" he="263.48mm" wi="175.85mm" orientation="landscape" file="US07299294-20071120-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00014" num="00014">
<img id="EMI-D00014" he="223.44mm" wi="87.38mm" orientation="landscape" file="US07299294-20071120-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00015" num="00015">
<img id="EMI-D00015" he="205.99mm" wi="106.43mm" file="US07299294-20071120-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00016" num="00016">
<img id="EMI-D00016" he="227.16mm" wi="151.64mm" file="US07299294-20071120-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00017" num="00017">
<img id="EMI-D00017" he="173.40mm" wi="177.21mm" file="US07299294-20071120-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading>
<p id="p-0002" num="0001">This application is a continuation of U.S. patent application Ser. No. 09/437,637 entitled “Distributed Traffic Controller for Network Data”, filed Nov. 10, 1999, now abandoned which is incorporated herein by reference.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0002" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0003" num="0002">1. Field of the Invention</p>
<p id="p-0004" num="0003">This invention relates to computer network data traffic and, more particularly, to controllers that manage the flow of data in a computer network.</p>
<p id="p-0005" num="0004">2. Description of the Related Art</p>
<p id="p-0006" num="0005">To enable sharing of data among computer users, most computer systems in use today are connected to a computer network. Computers in an office, for example, may be connected over a local area network (LAN) to gain access to a server computer, which manages common data storage. The Internet is a computer network in which literally millions of user computers communicate with server computers over a widely distributed network. The server computers may be file servers that provide data files in response to user requests, or they may perform other functions, such as e-mail processing.</p>
<p id="p-0007" num="0006">Data traffic over the Internet generally follows a transportation protocol called the Transport Control Protocol/Internet Protocol (TCP/IP). Some of the data traffic involves user data messages that are sent from users over the network through routers and switches to destination computers. The destination computer may be a server computer, such as where an Internet user requests a page from a web site. In that case, a user sends a request message to a web server computer in accordance with a hypertext transfer protocol (HTTP). The request is received at the web server computer, which returns the web site data over the Internet network to the requesting user computer. Instead of a server computer, the destination computer may be another user, such as where an Internet user sends an e-mail message over the Internet to another user. In that case, a user sends an e-mail message to an outgoing mail server computer, which sends the message out over the Internet to an appropriate destination e-mail server, which then routes the message to the appropriate user computer.</p>
<p id="p-0008" num="0007">Because the Internet is a public data network, there is no way to reliably ensure the integrity of data traffic being routed over the Internet. That is, so-called “hackers” may be sending computer viruses to randomly targeted destinations, or hackers may attempt to gain access to a web server computer to alter or destroy the data stored there. To protect against such malicious acts, firewall systems have been developed to screen out unwanted traffic and to protect against unauthorized intrusions.</p>
<p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. 1</figref> shows a conventional firewall system <b>100</b> in which a single firewall machine <b>102</b> acts as a secure gateway between the Internet <b>104</b> or other public network and two local user networks <b>106</b>, <b>108</b>. All traffic to and from the outside world (the Internet) must pass through the firewall machine <b>102</b>. In accordance with TCP/IP addressing, Internet traffic views the address of the system <b>100</b> through an external subnet address, which in the <figref idref="DRAWINGS">FIG. 1</figref> system is illustrated as the external subnet of (200.199.198.0). In this document, network addresses will be enclosed within parentheses, whether for subnets or individual host machines. Those skilled in the art will understand that the firewall machine <b>102</b> will have a machine address that is an address under the external subnet. In particular, the address of (200.199.198.1) is shown in <figref idref="DRAWINGS">FIG. 1</figref> as the address, or Uniform Resource Locator (URL) of the firewall machine <b>102</b>. Similarly, the two local networks <b>106</b>, <b>108</b> are shown connected to the firewall machine <b>102</b>, the first subnet <b>106</b> shown as the (192.168.1.0) subnet and the second subnet <b>108</b> shown as the (192.168.2.0) subnet.</p>
<p id="p-0010" num="0009">To implement the firewall processing, the gateway computer <b>102</b> is loaded with firewall software programming, as well as being configured with network interfaces to each internal and external subnet <b>106</b>, <b>108</b>. Such firewall software is readily available and may comprise, for example, the “FireWall-1” product from Check Point Software Technologies Ltd. of Redwood City, Calif., USA.</p>
<p id="p-0011" num="0010">The firewall machine <b>102</b> will have multiple Internet protocol (IP) addresses, one for each subnet. Because there is a single firewall machine, all client machines and routers of the local networks <b>106</b>, <b>108</b> can simply specify the IP address of the firewall machine <b>102</b> as their default gateway for all outgoing data traffic destined for the Internet. This firewall implementation provides a simple and relatively inexpensive solution to ensuring integrity of the local networks on the “downstream” side of the gateway <b>102</b>. Unfortunately, the single gateway is a single point of failure and can become a potential bottleneck for data traffic. This likely will be become more and more critical as firewall machines are asked to perform more and more tasks, such as encryption and authentication. That is, whenever the firewall machine <b>102</b> is not functioning, all of the internal, local network machines are isolated from the outside world via the Internet. The single bottleneck can be a serious problem, because even simple maintenance and upgrades on the firewall machine will be necessary from time to time, and when they occur, they will result in network downtime that will isolate the client side machines from the Internet. For many web sites, such as e-commerce sites, no amount of downtime is acceptable.</p>
<p id="p-0012" num="0011">Conventionally, increased availability and reduced network downtime is provided by multiple gateway machines. In the system <b>200</b> shown in <figref idref="DRAWINGS">FIG. 2</figref>, a multiple gateway system is provided to the Internet <b>202</b> that is comprised of multiple firewall machines <b>204</b>, <b>206</b>, <b>208</b>, <b>210</b>. Rather than a single IP address, the gateway is identified by a single external subnet (200.199.198.0) and with an associated set of IP addresses, comprising an address pool, off that subnet and corresponding to each of the firewall machines <b>204</b>, <b>206</b>, <b>208</b>, <b>210</b>, respectively. For example, the addresses may comprise the set of (200.199.198.1), (200.199.198.2), (200.199.198.3), and (200.199.198.4).</p>
<p id="p-0013" num="0012">In <figref idref="DRAWINGS">FIG. 2</figref>, each firewall machine <b>204</b>, <b>206</b>, <b>208</b>, <b>210</b> is connected to two internal subnets, a first subnet <b>212</b> and a second subnet <b>214</b>. Each of these internal subnets, which are local networks, can be connected to multiple local computers <b>216</b>, <b>218</b>, <b>220</b>, such as web server or e-mail server computers. Each computer connected to either one of the internal subnets <b>212</b>, <b>214</b> must select one IP address from a corresponding pool of subnet IP addresses as their default gateway address.</p>
<p id="p-0014" num="0013">For example, the first subnet <b>212</b> is indicated as the (192.168.1.0) subnet, and may be associated with a pool of IP addresses comprising (192.168.1.1), (192.168.1.2), (192.168.1.3), and (192.168.1.4) addresses. Therefore, a web server <b>216</b> connected to the first subnet <b>212</b> can select either one of these four IP pool addresses as its default gateway computer for handling upstream data traffic. The second subnet <b>214</b> is indicated as the (192.168.2.0) subnet, and is shown as having an IP address pool comprising (192.168.2.1), (192.168.2.2), (192.168.2.3), and (192.168.2.4) addresses. Therefore, a web server <b>220</b> connected to the second subnet <b>214</b> can select either one of these second subnet IP addresses as its default gateway computer for handling upstream data traffic.</p>
<p id="p-0015" num="0014">In the <figref idref="DRAWINGS">FIG. 2</figref> system <b>200</b>, if there is a failure of any gateway machine <b>204</b>, <b>206</b>, <b>208</b>, <b>210</b> or of any network interface or software at a firewall machine, then all local network machines and routers configured to use that machine as their default gateway will lose their connection to the outside world. For example, if the web server computer <b>216</b> is configured to use the first subnet firewall machine <b>204</b> as its default gateway, and if there is a failure with that machine, then the web server <b>216</b> will lose communication with the outside world, even though there are still three remaining firewall machines <b>204</b>, <b>206</b>, <b>208</b> that might be able to handle data traffic from that web server. Thus, whenever a failure occurs, some local network users will be out of communication. The multiple firewall machine implementation shown in <figref idref="DRAWINGS">FIG. 2</figref> therefore relieves the operational bottleneck problem described above by providing additional resources for handling data traffic, but cannot provide high availability in the case of machine failures.</p>
<p id="p-0016" num="0015">From the discussion above, it should be apparent that there is a need for controlling data traffic over a network so as to provide firewall protection, relieve operational bottlenecks, and increase network availability. The present invention solves this need.</p>
<heading id="h-0003" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0017" num="0016">In accordance with the invention, a distributed gateway for computer network data traffic dynamically reconfigures traffic assignments among multiple machines for increased network availability. If one of the distributed gateway machines becomes unavailable, traffic assignments are moved among the multiple machines such that network availability is substantially unchanged. The machines of the distributed gateway form a cluster and communicate with each other such that automatic, dynamic traffic assignment reconfiguration occurs in response to machines being added and deleted from the cluster, with no loss in functionality for the gateway overall, in a process that is transparent to network users, thereby providing a distributed gateway functionality that is scalable. Thus, operation of the distributed gateway remains consistent as machines are added and deleted from the cluster. Each machine of the distributed gateway can continue with any applications it may be running, such as firewall software, while participating in the distributed gateway and dynamic reconfiguration processing of the present invention. In this way, the invention substantially maintains network availability regardless of machine failures, so that there is no single point of failure and no lapse in gateway functionality.</p>
<p id="p-0018" num="0017">In one aspect of the invention, the machines of the distributed gateway cluster communicate with each other by passing a Group Membership protocol word among the cluster machines over the subnet network with which they are connected. The protocol word is used to inform the distributed gateway machines of the cluster status, including the status of individual machines, in a token ring arrangement. Thus, each machine of the cluster becomes aware of any problem with any of the other machines in the cluster and is aware of the operational status of each machine. With such knowledge, the machines will individually determine the traffic load being borne by the other machines. If any one machine observes that another machine is handling an excessive amount of network traffic, the observing machine will take on some of the traffic from the overloaded machine, thereby performing a load balancing operation.</p>
<p id="p-0019" num="0018">In another aspect of the invention, a user can configure and monitor a machine of the distributed gateway cluster from any other machine of the cluster, and also can perform such configuration and monitoring from a remote location. Such operations can be conducted through a command line interface or through a graphical user interface (GUI) that permits real time changes in network IP address assignments.</p>
<p id="p-0020" num="0019">In another aspect of the invention, a scalable, distributed, highly available, load balancing network server system is provided, having multiple machines that function as a front server layer between the network and a back-end server layer having multiple machines functioning as Web file servers, FTP servers, or other application servers. The front layer machines comprise a server cluster that performs fail-over and dynamic load balancing for both server layers. The operation of the servers on both layers is monitored, and when a server failure at either layer is detected, the system automatically shifts network traffic from the failed machine to one or more of the remaining operational machines, reconfiguring front-layer servers as needed without interrupting operation of the servers. The server system automatically accommodates additional machines in the server cluster, without service interruption. A system constructed in accordance with the invention provides a front layer server cluster that manages multiple network addresses and ensures availability of all network addresses assigned to the front layer at all times. The system operates with a dynamic reconfiguration protocol that permits reassignment of network addresses to the front layer machines. The server cluster may manage network address assignments and route network traffic, operating as a gateway, providing management of virtual network addresses such that network address assignments can be moved from gateway to gateway without requiring rebooting. Finally, the system provides symmetric routing of network traffic, guaranteeing that the incoming and outgoing traffic of the same network connection goes through the same front-layer server.</p>
<p id="p-0021" num="0020">Other features and advantages of the present invention should be apparent from the following description of the preferred embodiment, which illustrates, by way of example, the principles of the invention.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 1</figref> is a schematic diagram of a prior art computer system in which a single firewall computer controls the flow of data traffic from a network to local network computers.</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 2</figref> is a schematic diagram of a prior art computer system in which multiple firewall computers control the flow of data traffic from a network to local network computers.</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 3</figref> is a schematic diagram of a computer system constructed in accordance with the present invention.</p>
<p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. 4</figref> is a representation of a gateway computer in <figref idref="DRAWINGS">FIG. 3</figref>, illustrating the OSI networking model components of the gateway constructed in accordance with the present invention.</p>
<p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. 5</figref> is a representation of the system architecture for the Application Wrapper illustrated in <figref idref="DRAWINGS">FIG. 4</figref>.</p>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. 6</figref> is a block diagram of a gateway computer in the system of <figref idref="DRAWINGS">FIG. 3</figref>, illustrating the hardware components of the computer.</p>
<p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. 7</figref> is a representation of the Group Membership protocol word used by the distributed gateway computer of <figref idref="DRAWINGS">FIG. 4</figref> in communicating status information in the computer system of the invention.</p>
<p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. 8</figref> is a flow diagram of the operating steps executed by a distributed gateway computer of <figref idref="DRAWINGS">FIG. 3</figref> in starting up and processing group membership messages on a subnet of the system.</p>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. 9</figref> is a flow diagram that shows details of the group membership message processing performed by each of the distributed gateway computers of <figref idref="DRAWINGS">FIG. 3</figref>.</p>
<p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. 10</figref> is a representation of a GUI setup screen as shown on the display device of the <figref idref="DRAWINGS">FIG. 6</figref> computer, in accordance with the present invention, for setting up primary IP addresses.</p>
<p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. 11</figref> is a representation of a GUI setup screen as shown on the display device of the <figref idref="DRAWINGS">FIG. 6</figref> computer, in accordance with the present invention, for setting up virtual IP addresses.</p>
<p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. 12</figref> is a representation of a GUI screen as shown on the display device of the <figref idref="DRAWINGS">FIG. 6</figref> computer, in accordance with the present invention, for a Remote Management Console screen for running the distributed gateway cluster from a remote computer.</p>
<p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. 13</figref> is a representation of the Remote Management Console screen of <figref idref="DRAWINGS">FIG. 12</figref>, showing the Edit menu for entry of cluster configuration data.</p>
<p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. 14</figref> is a representation of a token message train, sent by the distributed gateway servers illustrated in <figref idref="DRAWINGS">FIG. 3</figref>.</p>
<p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. 15</figref> is a flow diagram that shows the operating process of a distributed gateway in the system of <figref idref="DRAWINGS">FIG. 3</figref> to provide IP address reassignment without server OS rebooting.</p>
<p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. 16</figref> is a flow diagram that shows the operation of a distributed gateway in the system of <figref idref="DRAWINGS">FIG. 3</figref> to provide symmetric routing of traffic through the gateway server cluster.</p>
<p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. 17</figref> is a schematic block diagram that illustrates the data traffic in the server cluster operation according to <figref idref="DRAWINGS">FIG. 16</figref>.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DESCRIPTION OF THE PREFERRED EMBODIMENTS</heading>
<p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. 3</figref> is a representation of a computer system <b>300</b> constructed in accordance with the present invention. A system constructed in accordance with the present invention is set up to include at least two computers acting as a distributed traffic control center, or gateway, between two networks. The <figref idref="DRAWINGS">FIG. 3</figref> system <b>300</b> includes four machines <b>302</b>, <b>304</b>, <b>306</b>, <b>308</b> that act as a distributed gateway <b>310</b> between an external subnet <b>312</b> interface to the Internet <b>314</b> and two internal subnets <b>316</b>, <b>318</b>. The four machines control network traffic to and from the internal subnets. The four machines can dynamically reconfigure traffic assignments among themselves and provide increased network availability. For example, if one of the machines <b>302</b>, <b>304</b>, <b>306</b>, <b>308</b> becomes unavailable, traffic assignments are moved among the remaining machines such that network availability to host machines on the internal subnets <b>316</b>, <b>318</b> is substantially unchanged. In the illustrated embodiment of <figref idref="DRAWINGS">FIG. 3</figref>, the external network is the Internet, and therefore the data traffic being handled by the gateway <b>310</b> follow the TCP/IP protocol model, but it should be understood that other network protocols may be accommodated by a distributed gateway constructed in accordance with the invention, without departing from the teachings of the invention.</p>
<p id="p-0040" num="0039">As described further below, the machines <b>302</b>, <b>304</b>, <b>306</b>, <b>308</b> of the distributed gateway <b>310</b> communicate with each other such that dynamic traffic assignment reconfiguration occurs automatically in response to any machine being added or deleted from the gateway <b>310</b>, with no loss in functionality for the gateway. The reconfiguration process is transparent to local network users, thereby providing a distributed gateway functionality that is scalable. Each machine of the gateway may implement an operational function, such as web server, e-mail server, or encryption services, and can continue with its operational functions while it participates in the distributed gateway and dynamic reconfiguration processing. In this way, the invention substantially maintains network availability regardless of machine failures, so that there is no single point of failure and no lapse in gateway functionality.</p>
<p id="p-0041" num="0040">Each machine <b>302</b>, <b>304</b>, <b>306</b>, <b>308</b> of <figref idref="DRAWINGS">FIG. 3</figref> is associated with an Internet protocol (IP) address that uniquely identifies the machine and provides an address that is associated with a network interface card (NIC) of the respective machine. This IP address, which is associated with a physical resource such as the NIC, will be referred to as a primary (or physical) IP address, and is an address off of the respective subnet <b>316</b>, <b>318</b>. Those skilled in the art will understand that each of the machines includes a NIC interface for each network (internal and external) to which the machine is connected.</p>
<p id="p-0042" num="0041">In accordance with the invention, the machines <b>302</b>, <b>304</b>, <b>306</b>, <b>308</b> provide a distributed gateway by maintaining a set of dynamically assignable IP addresses for each subnet <b>312</b>, <b>316</b>, <b>318</b>. The set of assignable IP addresses for each subnet is called a virtual IP pool. Each subnet <b>312</b>, <b>316</b>, <b>318</b> in <figref idref="DRAWINGS">FIG. 3</figref> is identified with a respective virtual IP pool <b>322</b>, <b>324</b>, <b>326</b>. Software that provides the distributed gateway functionality is installed in each of the machines <b>302</b>, <b>304</b>, <b>306</b>, <b>308</b>. Thus, in <figref idref="DRAWINGS">FIG. 3</figref>, each one of the gateway machines includes three NIC interfaces, for connection of the respective machine to the external subnet <b>312</b> and the two internal subnets <b>316</b>, <b>318</b>, and each of the machines is associated with a primary IP address and with a virtual IP address for each subnet.</p>
<p id="p-0043" num="0042">Because of the distributed gateway software installed at each machine, users or host machines on both sides of the gateway <b>310</b> will know of and will direct data packets to an address in one of the virtual IP pools, rather than the primary IP address associated with each gateway machine. Thus, a router <b>320</b> that directs data traffic to the computers behind the gateway <b>310</b> will be aware of only the IP addresses in the virtual IP pool <b>322</b> on the external subnet and will not be aware of the primary IP addresses assigned to the NIC cards of each respective gateway machine <b>302</b>, <b>304</b>, <b>306</b>, <b>308</b>. Similarly, the internal host machines <b>330</b>, <b>332</b>, <b>334</b> behind the gateway <b>310</b> will be aware of only the IP addresses in the virtual IP pools <b>324</b>, <b>326</b> on the respective internal subnets <b>316</b>, <b>318</b> and will not be aware of the primary IP addresses assigned to the NIC cards in the gateway machines for each connection to an internal subnet.</p>
<p id="p-0044" num="0043">As described more fully below, the dynamic assignment of virtual IP addresses to primary IP addresses permits reconfiguration in response to machine problems and in response to variations in network traffic loading among the machines. If a gateway machine becomes unavailable, then the virtual IP address (or addresses) for which it was responsible are simply assigned to one or more different gateway machines. This capability is referred to as a fail-over capability. A related feature is the scalability of the system, such that the system automatically reconfigures itself dynamically as machines are added or deleted. This also permits more efficient workload distribution among the gateway machines. If a gateway machine becomes heavily burdened with data traffic, one or more of the virtual IP addresses assigned to it will instead be assigned to one or more different gateway machines.</p>
<heading id="h-0006" level="1">System Software Components</heading>
<p id="p-0045" num="0044"><figref idref="DRAWINGS">FIG. 4</figref> is a representation of a gateway computer in <figref idref="DRAWINGS">FIG. 3</figref>, illustrating the system architecture <b>400</b> of the gateway constructed in accordance with the present invention. Those skilled in the art will understand that <figref idref="DRAWINGS">FIG. 4</figref> is a system architecture representation in terms of the Open Systems Interconnection (OSI) networking model published by the International Standards Organization.</p>
<p id="p-0046" num="0045">The lowest level of the system architecture is the Physical layer, Layer <b>1</b>, where data packets are received at a cable connection <b>402</b> from the distributed gateway machine to a subnet, which in the preferred embodiment typically comprises an Ethernet peer-to-peer network. The next OSI level is the Data Link layer, which packages data bits received from the physical layer into data frames that are processed by the higher layers. The Data Link layer is responsible for providing an error-free transmission of data frames between computers through the Physical layer. For example, data packets in the gateway machine are physically received at a network interface card (NIC) of the gateway from a network cable connection. <figref idref="DRAWINGS">FIG. 4</figref> shows the data link layer function being performed by a NIC Driver <b>404</b>, which may be a conventional driver program for processing data traffic received in accordance with the Ethernet protocol, or whatever protocol is used for the associated subnet with which the NIC communicates.</p>
<p id="p-0047" num="0046">The Network layer of the OSI system model is responsible for addressing messages and translating logical addresses into physical addresses. This layer determines which path data will take from a source computer to a destination computer. In <figref idref="DRAWINGS">FIG. 4</figref>, the Network layer is occupied by the Application Wrapper Driver <b>406</b> and the Application Driver <b>408</b>. The Application Wrapper Driver refers to the driver for the application wrapper software that provides the distributed gateway functionality of the present invention. The Application Driver refers to the driver for the application software with which the gateway machine operates. For example, the distributed gateway may be operated in conjunction with firewall software, to provide a distributed firewall gateway. Alternatively, the application software may comprise an e-mail server, in which case the invention provides a distributed mail server with extremely high availability. Other application software may work with the distributed gateway software of the invention to provide the desired gateway functionality.</p>
<p id="p-0048" num="0047">The next layer in the OSI model is the Transport layer, which in <figref idref="DRAWINGS">FIG. 4</figref> is represented by the TCP/IP stack <b>410</b>. The Transport layer repackages messages so as to avoid errors and ensure data is in the proper sequence. The details of this OSI layer in general, and the TCP/IP functioning in particular, will be well understood by those skilled in the art. In the Application/Presentation layer, the distributed gateway of the invention includes the Application Wrapper <b>412</b> and the Application <b>414</b> software. The Application module <b>414</b> refers to software that performs conventional functions, in concert with the distributed functionality of the present invention. For example, the Application module may provide firewall processing, e-mail services, or web page server functionality. As noted above, the Application Wrapper <b>412</b> is the software that provides the distributed gateway functionality in accordance with the invention, while the Application is the operational software whose functionality is enhanced, so as to be scalable and distributed, by the Application Wrapper software.</p>
<p id="p-0049" num="0048"><figref idref="DRAWINGS">FIG. 5</figref> shows details of the Application Wrapper <b>410</b> to better illustrate the architecture of the distributed gateway. One component function of the Application Wrapper is the Virtual IP Address module <b>502</b>, which maintains the virtual-to-primary IP address mapping between the primary addresses and the virtual IP address pool. Consistent State Sharing <b>504</b> is a module that permits the gateway machines to know which machines are functioning and which virtual IP addresses have been assigned to each of the machines. The Reliable Communication <b>506</b> component tracks acknowledgment messages communicated around the gateway, and also helps implement Group Membership Management <b>508</b>, which keeps track of the available machines. Network operations are monitored by the Global Fault Monitor <b>510</b>, which is complemented by a Local Fault Monitor <b>512</b> for the particular machine on which the Application Wrapper is running. A Local Load Monitor <b>514</b> determines the data flow rate through the NIC interface in bytes to keep track of machine loading. The Dynamic Load Balancing <b>516</b> ensures that no single gateway machine becomes overloaded. It does this by moving virtual IP address assignments, if necessary, in view of the monitored local loads. The Transparent Fail-Over <b>518</b> ensures that a failed machine is quickly replaced with an alternative machine, thereby providing high availability in a manner that is transparent to users. These functions operate in conjunction with overall Network Management tasks <b>520</b> performed by the gateway software.</p>
<heading id="h-0007" level="1">Computer Construction</heading>
<p id="p-0050" num="0049"><figref idref="DRAWINGS">FIG. 6</figref> is a block diagram of a gateway computer in the system of <figref idref="DRAWINGS">FIG. 3</figref>, illustrating the hardware components for one of the computers. Those skilled in the art will appreciate that the gateway computers <b>302</b>, <b>304</b>, <b>306</b>, <b>308</b> and the internal host computers can all have a similar computer construction.</p>
<p id="p-0051" num="0050"><figref idref="DRAWINGS">FIG. 6</figref> is a block diagram of an exemplary computer <b>600</b> such as might comprise any of the computers <b>302</b>, <b>304</b>, <b>306</b>, <b>308</b>. Each computer <b>600</b> operates under control of a central processor unit (CPU) <b>502</b>, such as a “Pentium” microprocessor and associated integrated circuit chips, available from Intel Corporation of Santa Clara, Calif., USA. A computer user can input commands and data from a keyboard <b>504</b> and can view inputs and computer output at a display <b>606</b>. The display is typically a video monitor or flat panel display. The computer <b>600</b> also includes a direct access storage device (DASD) <b>607</b>, such as a hard disk drive. The memory <b>408</b> typically comprises volatile semiconductor random access memory (RAM). Each computer preferably includes a program product reader <b>610</b> that accepts a program product storage device <b>612</b>, from which the program product reader can read data (and to which it can optionally write data). The program product reader can comprise, for example, a disk drive, and the program product storage device can comprise removable storage media such as a magnetic floppy disk, a CD-R disc, a CD-RW disc, or DVD disc. Each computer <b>600</b> can communicate with the others over the network through a network interface <b>614</b> that enables communication over a connection <b>616</b> between the network and the computer. The network interface typically comprises, for example, a Network Interface Card (NIC) that permits communications over a variety of networks. In the gateway <b>310</b> (<figref idref="DRAWINGS">FIG. 3</figref>), the network can comprise an Ethernet network or can comprise a connection to the Internet.</p>
<p id="p-0052" num="0051">The CPU <b>602</b> operates under control of programming steps that are temporarily stored in the memory <b>608</b> of the computer <b>600</b>. When the programming steps are executed, the Distributed Gateway machine performs its functions. Thus, the programming steps implement the functionality of the distributed system architecture modules <b>100</b> illustrated in <figref idref="DRAWINGS">FIG. 5</figref>. The programming steps can be received from the DASD <b>607</b>, through the program product storage device <b>612</b>, or through the network connection <b>616</b>. The storage drive <b>610</b> can receive a program product <b>612</b>, read programming steps recorded thereon, and transfer the programming steps into the memory <b>608</b> for execution by the CPU <b>602</b>. As noted above, the program product storage device can comprise any one of multiple removable media having recorded computer-readable instructions, including magnetic floppy disks and CD-ROM storage discs. Other suitable program product storage devices can include magnetic tape and semiconductor memory chips. In this way, the processing steps necessary for operation in accordance with the invention can be embodied on a program product.</p>
<p id="p-0053" num="0052">Alternatively, the program steps can be received into the operating memory <b>608</b> over the network <b>314</b>. In the network method, the computer receives data including program steps into the memory <b>608</b> through the network interface <b>614</b> after network communication has been established over the network connection <b>616</b> by well-known methods that will be understood by those skilled in the art without further explanation. The program steps are then executed by the CPU to implement the processing of the Distributed Gateway system.</p>
<p id="p-0054" num="0053">It should be understood that all of the computers <b>302</b>, <b>304</b>, <b>306</b>, <b>308</b> of the computer system illustrated in <figref idref="DRAWINGS">FIG. 3</figref> have a construction similar to that shown in <figref idref="DRAWINGS">FIG. 6</figref>, so that details described with respect to the <figref idref="DRAWINGS">FIG. 6</figref> computer <b>600</b> will be understood to apply to all computers of the system <b>300</b>. Alternatively, any of the computers <b>302</b>, <b>304</b>, <b>306</b>, <b>308</b> can have an alternative construction, so long as they can communicate with the other computers and support the functionality described herein.</p>
<heading id="h-0008" level="1">Group Membership Protocol Word</heading>
<p id="p-0055" num="0054">The fail-over operation, scalability of the system, assignments of virtual IP (VIP) addresses to machines, and the ability to dynamically reconfigure such assignments, are achieved with the distributed gateway software through a Group Membership protocol word that provides state sharing information among all the machines in a cluster. The state-sharing protocol word is passed around the cluster machines who are members of the same subnet in a token ring arrangement that will be familiar to those skilled in the art.</p>
<p id="p-0056" num="0055"><figref idref="DRAWINGS">FIG. 7</figref> is a representation of the Group Membership state protocol word <b>700</b> that is used by the cluster computers of <figref idref="DRAWINGS">FIG. 6</figref> in communicating the state information among the machines of the distributed gateway. The state protocol word <b>700</b> includes a Signal Type (SIG) field <b>702</b> that indicates whether the word is a token message for normal operating conditions or is a notification message (also called a “911” message). The next field is a Sequence (SEQ.) field <b>704</b> that is incremented by each node as the message makes its way around the nodes of the cluster. The next field is a Membership field <b>706</b> that indicates the group composition of the cluster, followed by a VIP list and assignments field <b>708</b> (Group Composition) to reflect cluster configuration data, and finally there is an Operational Data field containing load and byte count data <b>710</b> that indicates the data flow rate through a node. In particular, the data flow rate is indicated by information retrieved from the NIC of the node. Each received Group Membership message, whether it is a normal token message or a “911” message, is parsed by the distributed gateway software of each particular cluster machine to extract the necessary data.</p>
<p id="p-0057" num="0056">The Sequence number field <b>704</b> is incremented by each node when it receives a message (a token message or 911 message). An initial random sequence number is selected as a default start value, and when the sequence numbering reaches a predetermined limit value, the sequence numbering wraps around and begins at the start value. When a node puts a message on the subnet, the node increments the sequence number that was contained in the received token, places the incremented token back out on the subnet, and stores the incremented number in memory. Thus, any message produced by a node will have a unique sequence number. A node should not receive a token message with a sequence number lower than the sequence number stored in its memory.</p>
<p id="p-0058" num="0057">The Membership field <b>706</b> in a token message is a collection of sub-fields to indicate group composition. In particular, the Membership field of the preferred embodiment contains data that provides the number of nodes in the cluster, a list of the nodes, the current node sending the token message, and the destination node (the next node in the cluster, the node to whom the message is being sent). Each node changes the appropriate membership field values when the node receives the token, and in this way ensures that the token is passed along the machines in the cluster, from node to node in proper sequence.</p>
<p id="p-0059" num="0058">For example, the “number of nodes” field in a token message might indicate a cluster having four nodes, such as illustrated in <figref idref="DRAWINGS">FIG. 3</figref>. The token message might indicate subnet addresses of (1.1.1.1), (1.1.1.2), (1.1.1.3), and (1.1.1.4) in the “list of nodes” data of the Membership field <b>706</b>. If the nodes are numbered, from first to last, as −1, −2, −3, and −4, and if, at a particular point in time, the token is being sent from the second node (node −2) and is received at the third node (−3), then the “current node” value is “2” (the second node in the cluster) and the “destination node” value is “3” (the third node). After the third node (−3) receives the token, the third node changes the “current node” to “3”, changes the destination node to “4”, and sends the token back out on the subnet to the next node. In this way, each node always knows whether it is the intended recipient of a token message.</p>
<p id="p-0060" num="0059">The Membership field <b>706</b> in a “911” message includes two sub-fields comprising an originating node address and a permission flag. A “911” message is sent by a node (the “originating node”) when that node determines that the token message might have been lost somewhere in the cluster, and therefore might need to be regenerated. This may occur, for example, if another node fails when it has possession of the token message for processing. In that case, the originating node needs to determine if it has the latest copy of the token to regenerate the token. This determination is made with the help of the “911” message.</p>
<p id="p-0061" num="0060">As a “911” message is sent around the machines of a distributed gateway cluster, the permission flag value in the message is set to TRUE by each node when it receives the “911” message, unless a receiving node has a higher sequence number stored in its memory for the last token message it sent out. If the receiving node has a higher sequence number, then it sets the permission flag to FALSE before putting the “911” message back out on the subnet. When the originating node receives back the “911” message, it will examine the message to determine if the permission flag sub-field contains TRUE or FALSE. If the permission flag is FALSE, then the originating node will not regenerate the token message it has in memory. That is, when the “911” message received by the originating node says FALSE, that means another node has already sent out a more recent token, with a higher sequence number. Therefore, the originating node will wait for the next token message (having a higher sequence number), and will adopt the system values (VIP list, membership, etc.) that are indicated in that token. If the originating node receives a “911” message back with TRUE, then the originating node knows it has the most recent token, so it will re-send the last token message it has, with all its system values (VIP list, membership, etc.). The unique sequence number ensures that only one node, the one with the most recent token message, will change the permission flag to TRUE.</p>
<p id="p-0062" num="0061">The Group Composition field <b>708</b> of the Group Membership protocol word <b>700</b> contains a list of virtual IP addresses (VIP list) and of corresponding node assignments for those addresses. The Group Composition field contains sub-fields of data that specify the VIP address, the primary IP address to which that VIP address is currently assigned, an indication for each VIP address whether there is a preference for assignment to that address, and a persistence or “sticky” flag to indicate whether the preference is sticky. A sticky VIP address assignment means that the VIP address will be forced to an assignment to that particular node, so that all traffic for that VIP address must be directed to that node, unless the machine is unavailable. Thus, a sticky assignment in the Membership field means that all data traffic for that node will be directed to that node, if the node is available. If the node fails, traffic will be re-routed. If the node comes back up, then the data traffic intended for the node will again be directed to that node. A persistence flag set to a non-zero value indicates that a user has indicated a preference for assigning that VIP address to the node involved.</p>
<p id="p-0063" num="0062">For example, if there are four addresses in the VIP list, then the information in the Group Composition field <b>708</b> might be summarized in Table 1 below:</p>
<p id="p-0064" num="0063">
<tables id="TABLE-US-00001" num="00001">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="4">
<colspec colname="1" colwidth="49pt" align="center"/>
<colspec colname="2" colwidth="49pt" align="center"/>
<colspec colname="3" colwidth="56pt" align="center"/>
<colspec colname="4" colwidth="63pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="4" rowsep="1">TABLE 1</entry>
</row>
<row>
<entry namest="1" nameend="4" align="center" rowsep="1"/>
</row>
<row>
<entry>VIP Address</entry>
<entry>Current Host</entry>
<entry>Preferred Host</entry>
<entry>Persistence Flag</entry>
</row>
<row>
<entry namest="1" nameend="4" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>1.1.1.1</entry>
<entry>1.1.1.5</entry>
<entry>1.1.1.6</entry>
<entry>0</entry>
</row>
<row>
<entry>1.1.1.2</entry>
<entry>1.1.1.5</entry>
<entry>1.1.1.5</entry>
<entry>1</entry>
</row>
<row>
<entry>1.1.1.3</entry>
<entry>1.1.1.6</entry>
<entry>0.0.0.0</entry>
<entry>0</entry>
</row>
<row>
<entry>1.1.1.4</entry>
<entry>1.1.1.6</entry>
<entry>1.1.1.6</entry>
<entry>3</entry>
</row>
<row>
<entry namest="1" nameend="4" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0065" num="0064">As Table 1 shows, the Group Composition field <b>708</b> contains four sub-fields: VIP address, Current Host, Preferred Host, and Persistence Flag. Each of the first three fields holds the value of an IP address. The last field is an integer. In the preferred embodiment, data in the Group Composition field <b>708</b> will be placed in sequence, so that data for the first row of Table 1 is listed in the Group Composition field, followed by data for the second row, and so forth. Other schemes for packing the Group Composition field may be used.</p>
<p id="p-0066" num="0065">In the Group Composition data, there is one VIP address sub-field, providing a VIP list for the entire cluster. The first sub-field, VIP address, lists the VIP addresses for the entire distributed gateway cluster. The second sub-field, Current Host, specifies which node currently owns this particular VIP address. The primary IP address of that node is used in the Current Host value. For example, according to Table 1, node (1.1.1.5) owns, or is assigned, VIP addresses (1.1.1.1) and (1.1.1.2). The third sub-field, Preferred Host, indicates the node at which this VIP prefers to be hosted. For example, to move VIP address (1.1.1.1) from Node (1.1.1.5) to Node (1.1.1.6), it would be necessary to specify Current Host as (1.1.1.5), and Preferred Host as (1.1.1.6). The VIP address assignments indicated by the Current Host and Preferred Host data sub-fields can be changed by a user during real-time operation of the distributed gateway application through a user interface, which is described in greater detail below.</p>
<p id="p-0067" num="0066">The last sub-field of the Group Composition data is the Persistence Flag. It indicates whether the associated VIP address is “sticky” to the Preferred Host. When a VIP address is “sticky” to an assigned node (the one it is associated with in the same row of Table 1), it is no longer handled by the load balancing process of the distributed gateway application wrapper. The Persistence Flag field can take three possible integer values: “0”, “1” and “3”. When it is “0”, it means that the associated VIP address is not sticky to any node. This VIP address can be moved, if so required by the load balancing process. When the Persistence Flag is “1”, it means this VIP address is sticky to the Current Host specified in the same row of Table 1, and therefore it is not handled by the load balancing process. If the Current Host fails, this VIP address assignment will move to another node of the subnet, and will become sticky to that node. It will stay on that node even if the original Host recovers. When the Persistence Flag is “3”, it means this VIP address is sticky to the Preferred Host.</p>
<p id="p-0068" num="0067">Whenever the Preferred Host is functioning (alive), the VIP address will move to the Preferred Host node and stay with it (becomes “sticky” to it). When the Preferred Host fails, it fails over to another node of the subnet. The VIP address will move back to the Preferred Host when the Preferred Host recovers. It should be noted that regardless of which value the Persistence Flag takes, when the Current Host fails, the associated VIP address will always fail over to a healthy (alive) node. As described further below, the “sticky” feature of a VIP address assignment can be changed by a user in real time through a system interface.</p>
<p id="p-0069" num="0068">Returning to <figref idref="DRAWINGS">FIG. 7</figref>, the last data field of the protocol word <b>700</b> is the load and byte count data field <b>710</b>. This data field indicates the traffic flow of message packets through each of the distributed gateway machines of the cluster subnet. In the preferred embodiment, the data comprises a byte count of data through the network interface card that connects each distributed gateway machine to the subnet. As with the group composition field <b>708</b>, the byte count field <b>710</b> is organized in the protocol word such that the data for the first node occurs first, then the second node, then the byte count data for the third node, and so forth for each of the machines in the cluster who are connected to the pertinent subnet.</p>
<p id="p-0070" num="0069">In accordance with the invention, the protocol word <b>700</b> is circulated around the subnet from machine to machine, in sequence. Each machine receives a protocol word as part of the group membership message that is passed from machine to machine approximately at a rate of once every 100 milliseconds. Other message passing rates may be used, depending on the network configuration and machine operation.</p>
<heading id="h-0009" level="1">Machine Operation</heading>
<p id="p-0071" num="0070"><figref idref="DRAWINGS">FIG. 8</figref> is a flow diagram of the operating steps executed by a distributed gateway computer of <figref idref="DRAWINGS">FIG. 3</figref> in starting up and processing group membership messages on a subnet of the system. This processing is executed by the computer from its program memory once the appropriate distributed gateway application software is loaded onto the computer and the setup operation (described below) has been completed.</p>
<p id="p-0072" num="0071">In the first processing step performed by the starting computer, represented by the flow diagram box numbered <b>802</b>, the configuration data of the machine is read from the direct access storage device, such as the hard disk of the computer. The configuration data includes a number of stored configuration files, including a node map, the virtual IP addresses of the cluster, cluster configuration options, local fault monitoring specifications for the machine, and a license key or password. The node map contains the primary IP addresses of all the nodes in the cluster, in an arbitrary ordering around the subnet that is determined by the user during the setup process. The configuration files specify the “initial” cluster setup. Users can change these settings at runtime with the user interface described below. Such runtime changes will not affect the configuration files, though a user may manually edit them with a text editor.</p>
<p id="p-0073" num="0072">From the node map of the configuration data, the computer that is starting up knows whether it has companion machines in the subnet cluster, and it knows how many additional machines to expect in the cluster. Therefore, the starting computer next will attempt to contact all of the other machines on the subnet and determine if it is the first executing machine in the cluster. This process is represented by the decision box numbered <b>804</b>.</p>
<p id="p-0074" num="0073">The process of a starting computer to determine if it is the first operational node involves first sending a unicast UDP (User Datagram Protocol) packet message. The UDP message implements a conventional connectionless protocol message that provides a means of sending and receiving datagrams over a network. Those skilled in the art will be familiar with the use of UDP packet messages. The UDP message sent by a starting computer includes a Group Membership protocol word, as described above in conjunction with the description of <figref idref="DRAWINGS">FIG. 7</figref>.</p>
<p id="p-0075" num="0074">If the starting computer is actually attempting to recover or regenerate a token, and is not involved in an initial start sequence, then it could use the UDP message to send a “911” or notification message, as described above. When the computer rejoins the cluster, it will use the current cluster setup information in a token message for the cluster properties. If the starting computer is actually starting up from a cold start, then the UDP message will comprise a token message, such as that described above, that includes all the node data and configuration information that the starting computer retrieved from its configuration files. In either case, the computer that sends out the message waits for a reply.</p>
<p id="p-0076" num="0075">If the starting computer receives no replies to the message for all other nodes in the configuration, then it knows it must be the first node in the cluster. This corresponds to an affirmative (YES) outcome at the decision box numbered <b>804</b>. If the starting computer is the first cluster computer, then it assumes responsibility for all the VIP addresses in the cluster. Thus, it will set the data fields in the Group Membership protocol word accordingly, and continue data traffic handling operation while it waits for the other machines of the cluster to join. In accordance with operation of the cluster machines of the invention, the starting computer will send out a gratuitous ARP (Address Resolution Protocol) message for each VIP address that it takes. This mode of operation is referred to as “alone mode”, and is indicated by the <figref idref="DRAWINGS">FIG. 8</figref> flow diagram box numbered <b>806</b>.</p>
<p id="p-0077" num="0076">Those skilled in the art will be familiar with the conventional ARP scheme for translating logical IP addresses into physical network interface addresses in conjunction with stored address resolution information. More particularly, the network interface addresses are also known as Media Access Control (MAC) addresses for network cards. The ARP message is a conventional means of storing logical to physical address data in the machines connected to a network, such as each of the subnets connected to the starting computer. Thus, for each subnet to which it is connected, the starting computer will determine if it is the first node and, if it is, the starting computer will send out a gratuitous ARP message for the VIP addresses that it is taking.</p>
<p id="p-0078" num="0077">If the starting computer receives a reply to the UDP message, then it knows other machines are active in the cluster, and it will attempt to join the cluster. This corresponds to the “join cluster” processing of box <b>808</b>, following the negative outcome (NO) of the decision box <b>804</b>. Any node that is already active and has received the UDP message from the starting computer will accept the starting computer into the operating cluster, in the following manner.</p>
<p id="p-0079" num="0078">As noted above, a starting computer will send a <b>911</b> message with a Group Membership protocol word over the subnet with the data it has retrieved from its configuration files. When the operating node receives the 911 message from the starting computer, the operating node processes the node list in the message and adds the starting node into the list, as appropriate. Thus, permanent connections specified by initial data may indicate a particular VIP address assignment, or predetermined default assignments may be used. In either case, the operating node adds the new node into the node list data and then puts the processed Group Membership token back out onto the subnet. When the starting computer receives back the Group Membership token, it will process the node assignment data to reflect the presence of the operating node, and it thereby becomes part of the cluster. The starting computer will then pass the Group Membership token along, back out onto the subnet, in its normal operation.</p>
<p id="p-0080" num="0079"><figref idref="DRAWINGS">FIG. 9</figref> is a flow diagram that illustrates the Group Membership message processing performed by each of the distributed gateway computers of <figref idref="DRAWINGS">FIG. 3</figref> during normal operation, as a node in a cluster. In general, for the distributed gateway application software, a token acts as a failure detector. Therefore, if a token does not reach the specified destination node from a current node, the current node will assume the destination node is down. As a result of not receiving an acknowledgment, the current node will modify the group membership information on the token accordingly, and will send the token to the next node in the subnet cluster, past the previous destination node. In contrast to the token processing described above, a “911” message will not modify the membership on the token when the destination cannot be reached. It will simply increment the destination node, and send to the next node in the subnet ring. This processing is illustrated in <figref idref="DRAWINGS">FIG. 9</figref>, as explained further below.</p>
<p id="p-0081" num="0080">First of all, if a node has not received a Group Membership message from another node for greater than a time-out interval, then the node will send out a “911” notification Group Membership message, as was described above in conjunction with <figref idref="DRAWINGS">FIG. 7</figref>. This processing is represented by the flow diagram box numbered <b>901</b>. In the next step of normal message processing, represented by the <figref idref="DRAWINGS">FIG. 9</figref> flow diagram box numbered <b>902</b>, the node receives a Group Membership message. The node next determines whether the message is a token message or a “911” notification message, by examining the signal type message field described above in conjunction with <figref idref="DRAWINGS">FIG. 7</figref>. If the message is not a token message, then it is a “911” message, a negative outcome at the decision box numbered <b>904</b>. As indicated by the flow diagram box numbered <b>906</b>, the node will process the “911” message to examine the sequence number, determine if the sequence number it has is greater than the received sequence number, and process the permission flag. The node may determine that the “911” message is one that it sent, in which case it may need to regenerate the last token message it sent (if permission=“TRUE”). In that case, it will regenerate the token, and put the message token back out onto the subnet. If it did not send the “911” message, then the node will determine if it has a sequence number greater than that in the message. If it has a higher sequence number, it will set the permission flag (FALSE) accordingly, and send the message back out onto the subnet. If the node does not have a higher sequence number, it does not change the permission flag setting, and the sends the message onto the subnet to the next node.</p>
<p id="p-0082" num="0081">Whether or not the originating node changes the permission flag, it waits for an acknowledgment from the next node (the destination node) after sending the “911” message back out onto the subnet. This is represented by the decision box numbered <b>907</b>. If the originating node receives a response, an affirmative outcome at the decision box numbered <b>907</b>, it continues with normal processing. If the originating node does not receive an acknowledgment response within the timeout interval, a negative outcome at the decision box <b>907</b>, then the originating node increments the destination node in the “911” message to skip the non-responsive node on the subnet, and sends out that modified “911” message. This processing is represented by the flow diagram box numbered <b>908</b>. The originating node then waits for that new destination node to respond, in accordance with the decision box <b>907</b>.</p>
<p id="p-0083" num="0082">Token failure detection generally assumes that failure to receive an acknowledgment within a predetermined time interval indicates that a message never reached the destination node, and therefore assumes that the destination node is down. Such failure detection is not totally reliable, however, as a failure to respond within the time interval may simply indicate a slow node. Thus, in an asynchronous network environment, a reliable failure detector is virtually impossible to build, since one cannot tell a “dead” or down node from a “very slow” node. Under operations of the distributed gateway application software, however, if a “slow node” is mistaken for a “dead node” and is deleted from the list of active nodes, then the slow node will rejoin the cluster automatically. This is accomplished because of the following sequence of events: When a slow node is waiting for the token to arrive, its timeout interval will expire. That node will then send out a “911” message, thinking that the prior node is down. The “911” message will be regarded by the other nodes as an add request to join the cluster, and that slow node will effectively be added back into the distributed gateway cluster.</p>
<p id="p-0084" num="0083">If the received Group Membership message is a token message, an affirmative outcome at the decision box <b>904</b>, then the node processes the information contained in the message. This processing is represented by the flow diagram box numbered <b>909</b>. Thus, changes in VIP address assignments may be received, or changes in such assignments may need to be implemented, in response to load information in the operational data. At the decision box numbered <b>910</b>, the node may determine that a change in VIP address assignment is needed. The node may make this determination, for example, if the load level it is experiencing, or if the load level it sees another node experiencing, exceeds a predetermined byte rate load level limit.</p>
<p id="p-0085" num="0084">Thus, individual nodes in a cluster may observe the configuration and operational data in a token message and recognize that another node in the cluster is receiving a sufficiently great amount of data traffic, due to its VIP address assignments, that the performance of the cluster as a group could be improved if the load of the other node is reduced. If that is the case, then the message processing node that has received the token message and has observed the need for reassignment will proceed with a VIP address reassignment in which the processing node will reassign one or more VIP addresses from the overloaded node to itself, or even reassign VIP addresses from itself to another node. For example, each processing node that recognizes an overloaded condition may take one additional VIP address assignment. If the next node that receives the token message sees that the overloaded condition still exists, it will take another VIP address assignment for itself. In this way, dynamic load balancing will occur during real time operation of the cluster.</p>
<p id="p-0086" num="0085">If the processing node determines that a reassignment of VIP addresses is needed, an affirmative outcome at the decision box <b>910</b>, then the node will implement whatever reassignment its processing dictates by changing the VIP address data in the Group Composition field <b>708</b> (<figref idref="DRAWINGS">FIG. 7</figref>) of the token message. Whenever there is a new or changed VIP address assignment, the node making the change sends out the ARP message mentioned above in connection with startup processing. Unlike the startup processing, however, this ARP message occurs during normal processing, and is prompted not by startup processing but by the desire to change assignments and inform the other nodes. The message is therefore referred to as a “gratuitous” ARP message. This processing is represented by the flow diagram box numbered <b>912</b>. Those skilled in the art will understand that each machine connected to a subnet includes an ARP cache that contains data to translate logical IP addresses into physical MAC addresses, and will further understand that an ARP message is a message that is sent out over a network and is automatically processed by any computer communicating with that network to store the ARP message information into the ARP cache of the computer. The clients and routers on the subnet will receive the ARP message and will then automatically refresh their respective ARP caches with the new assignment information. All such processing is incorporated into the processing of the flow diagram box numbered <b>912</b>.</p>
<p id="p-0087" num="0086">After the token message is processed, with or without VIP address changes, the node increments the sequence number and changes the current node and destination node data fields of the message, as described above with respect to <figref idref="DRAWINGS">FIG. 7</figref>. The node then sends the token message back out on the subnet to the next node. This processing is represented by the flow diagram box numbered <b>916</b>.</p>
<p id="p-0088" num="0087">After the originating node sends the token message onto the subnet, it waits for an acknowledgment from the destination node. If the originating node receives a response, an affirmative outcome at the decision box numbered <b>918</b>, it continues with normal processing. If the originating node does not receive an acknowledgment response within the timeout interval, a negative outcome at the decision box, then the originating node modifies the active membership list for the cluster to delete the non-responsive node, then increments the destination node number on the subnet to skip the non-responsive node, and sends out that modified token message onto the subnet. This processing is represented by the flow diagram box numbered <b>920</b>. The originating node then waits for that new destination node to respond, in accordance with the decision box <b>918</b>.</p>
<heading id="h-0010" level="1">Graphical User Interface</heading>
<p id="p-0089" num="0088">The software to implement the distributed gateway processing described above (the Application Wrapper module of <figref idref="DRAWINGS">FIG. 4</figref>) is installed into program memory of a computer that is to become part of a distributed gateway cluster in accordance with the invention. In the preferred embodiment, the software provides a graphical user interface (GUI) in both the program setup mode and in the program operational mode. Thus, a user will be shown GUI display screens to guide the user through setup and operation. Those skilled in the art will be familiar with GUI display screens and the manner in which they are created, displayed, and manipulated by users.</p>
<p id="p-0090" num="0089"><figref idref="DRAWINGS">FIG. 10</figref> is a representation of a GUI setup screen <b>1000</b> as shown on the display device of the <figref idref="DRAWINGS">FIG. 6</figref> computer, in accordance with the present invention, for setting up primary IP addresses of the distributed gateway cluster. The setup screen of <figref idref="DRAWINGS">FIG. 10</figref> appears on the user computer display as a window when the setup program of the Application Wrapper (<figref idref="DRAWINGS">FIG. 4</figref>) is launched. As <figref idref="DRAWINGS">FIG. 10</figref> indicates, the setup program of the distributed gateway first asks the user to set up the internal IP addresses (the primary IP pool) for each computer that will be a part of the distributed gateway cluster. In the exemplary data of <figref idref="DRAWINGS">FIG. 10</figref>, the cluster has four IP addresses, represented by (1.1.1.1), (1.1.1.2), (1.1.1.3), and (1.1.1.4). These IP addresses are entered into an IP address list box <b>1002</b> one by one after the user enters them into a text box <b>1004</b>. The IP addresses can be added and deleted by using the Add <b>1006</b> and Remove <b>1008</b> buttons of the setup window. When the numbers in the primary IP address pool have been entered, the user is ready for the next setup window, to which the user proceeds by selecting the Next button <b>1010</b>.</p>
<p id="p-0091" num="0090"><figref idref="DRAWINGS">FIG. 11</figref> is a representation of a GUI setup screen <b>1100</b> as shown on the display device of the <figref idref="DRAWINGS">FIG. 6</figref> computer, in accordance with the present invention, for setting up virtual IP addresses. After the addresses of the primary IP address pool have been set, the setup program must next process the virtual IP address pool. When the user selects the Next button <b>1010</b> from <figref idref="DRAWINGS">FIG. 10</figref>, the distributed gateway program initiates a system check for network interface (NIC) cards. In the example of <figref idref="DRAWINGS">FIG. 11</figref>, the program has displayed a message in the virtual IP (VIP) address setup window <b>1100</b> that indicates finding a NIC with an IP address of (1.1.1.2). It should be understood that the system check will find each NIC that is installed into the node computer, and that <figref idref="DRAWINGS">FIG. 11</figref> simply illustrates one of the display windows that will be shown during the entire setup process.</p>
<p id="p-0092" num="0091">The <figref idref="DRAWINGS">FIG. 11</figref> display window <b>1100</b> indicates that the user should now enter the virtual IP address pool of addresses that will be associated with the NIC that has a primary IP address of (1.1.1.2). As indicated in the virtual IP address list box <b>1102</b>, the subnet virtual IP addresses for this NIC will be (1.1.1.91), (1.1.1.92), (1.1.1.93), and (1.1.1.94). These addresses will be entered by the user with the virtual IP address text box <b>1104</b> and the Add button <b>1106</b> and Remove button <b>1108</b>. The user must enter the virtual IP addresses for each machine being configured. It should be apparent that the list of virtual IP addresses should be the same for each machine on the subnet. It also should be clear that each subnet will have a set of virtual IP addresses entered for it, for both the external subnet(s) and the internal subnet(s).</p>
<p id="p-0093" num="0092">After the setup procedure has been completed, the user must input the configuration parameters for the cluster. Configuring the distributed gateway cluster in accordance with the invention involves modifying the configuration files first described above. In a conventional window programming environment, for example, these files include a node map configuration called “nodemap.cfg” that will list the primary IP addresses for the gateway machines. Another configuration file is “vip.cfg”, which determines the virtual IP addresses in the VIP address pool for each subnet connected to the cluster. These configuration files contain configuration data in a text format, in which the IP addresses are simply listed, for example. The distributed gateway application will know the nature of the data contained in each configuration file because the file names are predetermined. For example, a standard windowing operating system (such as “Windows NT” by Microsoft Corporation of Redmond, Wash., USA) will process a file name with a “.cfg” suffix as a text file, containing characters of a standard ASCII alphanumeric set. The configuration file contents may be easily edited by the user, using a command line editor utility of the distributed gateway or other suitable utility.</p>
<p id="p-0094" num="0093">For example, the “vip.cfg” file may contain the text data shown below in Table 2:</p>
<p id="p-0095" num="0094">
<tables id="TABLE-US-00002" num="00002">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="offset" colwidth="56pt" align="left"/>
<colspec colname="1" colwidth="49pt" align="left"/>
<colspec colname="2" colwidth="112pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="2" rowsep="1">TABLE 2</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="2" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>virtual IP Pool</entry>
<entry/>
</row>
<row>
<entry/>
<entry>VIRTUAL_IP</entry>
<entry>131.143.36.0 {</entry>
</row>
<row>
<entry/>
<entry/>
<entry>131.143.36.91</entry>
</row>
<row>
<entry/>
<entry/>
<entry>131.143.36.91</entry>
</row>
<row>
<entry/>
<entry/>
<entry>131.143.36.91</entry>
</row>
<row>
<entry/>
<entry/>
<entry>131.143.36.91</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="63pt" align="left"/>
<colspec colname="1" colwidth="154pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>}</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0096" num="0095">In addition to the node map and the VIP address list, optional configuration files include the local monitor configuration file “localmonitor.cfg”, which is used for specifying fault detection behavior of the machine. As described more fully below, the monitor functions that can be specified includes parameters for triggering monitoring of local NIC's, monitoring of the application (firewall), and monitoring of the remote hosts/router combination via the “Ping” protocol.</p>
<p id="p-0097" num="0096">The NIC monitoring function tests the network interface cards in the local machine to determine if the cards are still functioning properly. The system can set this parameter to a default value. Details of the testing for NIC functionality will depend on the NIC being used, and will be understood by those skilled in the art.</p>
<p id="p-0098" num="0097">Monitoring of the remote hosts/router involves testing the application (in the preferred embodiment, a firewall) for proper operation. In the case of a firewall application, the testing would involve generating “dummy” packets and checking to see if the firewall rejects or accepts such packets, based on the rules required by the firewall application. That is, the distributed gateway software (the Application Wrapper of <figref idref="DRAWINGS">FIG. 4</figref>) would interface with the Application (<figref idref="DRAWINGS">FIG. 4</figref>) to periodically generate predetermined dummy packets of a type that should be accepted by the firewall Application, and that should be rejected by the firewall. The distributed gateway software would then report the results as part of the GUI, as described further below.</p>
<p id="p-0099" num="0098">Details of interfacing the distributed gateway software with the firewall software will depend on the firewall software being used. Those skilled in the art will understand how to implement such an interface, in accordance with the description herein. To properly interface the two applications, the default gateway of hosts or routers external to the distributed gateway should be set to one of the IP addresses from the external virtual IP address pool for the subnet of that host or router, and the default gateway of hosts or routers internal to the distributed gateway should be set to one of the IP addresses from the internal virtual IP address pool for the subnet of that host or router.</p>
<p id="p-0100" num="0099">The use of the “Ping” function to monitor the remote host/router will be apparent to those skilled in the art, where the distributed gateway software will assume that a remote host/router is not functioning properly if it does not respond to a conventional “Ping” message within a predetermined time interval. In accordance with the invention, the Ping function may be activated and deactivated by setting a parameter in the “localmonitor.cfg” file, such as by inserting an “enableMonitor( )” entry into the text file and inserting an IP address to be pinged by using an entry of the form “addMachine(IP address)”. The function may be deactivated by including a “disableMonitor( ) entry into the text file.</p>
<p id="p-0101" num="0100">By editing the configuration file, a user may directly set and modify operating parameters of the distributed gateway. Alternatively, the distributed gateway software may permit changing one or more of the parameters through the GUI display screens, as described further below.</p>
<p id="p-0102" num="0101"><figref idref="DRAWINGS">FIG. 12</figref> is a representation of a GUI screen <b>1200</b> as shown on the display device of the <figref idref="DRAWINGS">FIG. 6</figref> computer, in accordance with the present invention, for a Remote Management Console screen for running the distributed gateway cluster from a remote computer. The Remote Management Console is generated by the distributed gateway application software and permits setting operating parameters of the distributed gateway, as well as monitoring the functioning of the gateway. The screen <b>1200</b> shows the status of a single machine in the distributed gateway, selected in accordance with a secure procedure described further below.</p>
<p id="p-0103" num="0102">The Remote Management Console screen <b>1200</b> is shown on the display device of the computer (<figref idref="DRAWINGS">FIG. 6</figref>) and, in accordance with a window operating system for a GUI, includes conventional program window artifacts. Thus, the display screen includes a window title bar <b>1202</b> across the top of the screen with window sizing icons <b>1204</b>. A menu bar <b>1206</b> provides a means for selecting user actions, such as opening files, editing file contents and system parameters, changing the display details, and requesting help information. The lower part of the display screen <b>1200</b> includes a graphical representation of the gateway machines <b>1208</b>.</p>
<p id="p-0104" num="0103">Each respective gateway machine is represented in the Remote Management Console screen <b>1200</b> with a separate area. For example, in the illustrated embodiment, there are four virtual IP addresses for the machine being monitored, comprising (1.1.1.91), (1.1.1.92), (1.1.1.93), and (1.1.1.94). Thus, these four VIP addresses are represented by four separate screen areas <b>1210</b>, <b>1212</b>, <b>1214</b>, <b>1216</b> containing various icons. In the preferred embodiment, the exact shape and theme of the icons can be selected by the user. A general boxed shape is used in the drawing figures, for simplicity of presentation. Where details of one screen area <b>1210</b>, <b>1212</b>, <b>1214</b>, <b>1216</b> are provided, it should be understood that the explanation of such details also applies to the other display areas of the Remote Management Console display screen, as all of them are capable of showing the same information.</p>
<p id="p-0105" num="0104">A Gateway icon <b>1220</b> shows the overall status of the particular distributed gateway machine, indicating whether the machine is operational for the virtual IP address and indicating which global options are enabled. In one standard representation form of the icon <b>1220</b>, the icon indicates that the distributed gateway is fully functional. If an automatic rejoin feature is enabled, the Gateway icon includes an “AUTO” or “A” indication <b>1222</b>. When automatic rejoin is enabled, the distributed gateway machine will attempt to rejoin a cluster after recovery from an error condition that has resulted in a failed machine. The error condition may comprise a failed NIC, a failed firewall application, and the like. In the preferred embodiment, the automatic rejoin feature is enabled as a default condition. In another option, a load balancing feature may be selected. Load balancing is indicated with a suitable Gateway icon display feature, such as “L.BAL” or “L” 1224. If load balancing is selected, the distributed gateway application will move virtual IP addresses from machines with higher traffic loads to machines with lower traffic loads, automatically during normal operation. Load balancing is enabled as a default condition. Finally, the Gateway icon indicates a failed or closed gateway virtual IP address with a suitable “CLOSED” or “X” icon <b>1226</b>. A user may edit the condition of a gateway and force the gateway condition to be closed, in which condition it will remain until the user opens the gateway again.</p>
<p id="p-0106" num="0105">In each gateway VIP address screen area <b>1210</b>, <b>1212</b>, <b>1214</b>, <b>1216</b>, a load bar <b>1230</b> shows the current byte traffic load being handled by the machine. The load bar is colored in a vertical “thermometer scale” reading to indicate traffic load, preferably on a logarithmic scale. If a user places the display cursor stationary over the load bar, the GUI will display the numerical value of the traffic load, after a predetermined time interval. On either side of the load bar <b>1230</b>, columns of IP icons represent the virtual IP numbers managed by a particular machine. Each icon indicates a particular IP address of the internal or external VIP address pool. In the first screen area <b>1210</b>, for example, the IP icons <b>1232</b> to the left of the load bar <b>1230</b> represent the internal VIP addresses, and the IP icons <b>1234</b>, <b>1236</b> to the right of the load bar represent the external VIP addresses. A number or character in an IP icon <b>1232</b>, <b>1234</b>, <b>1236</b> indicates an IP address that is being managed or handled by the respective machine <b>1210</b>, <b>1212</b>, <b>1214</b>, <b>1216</b>. A blank icon indicates no assignment.</p>
<p id="p-0107" num="0106">In accordance with the GUI and system operation, any VIP address can be set to stay on a particular distributed gateway machine by dragging and dropping the IP icons <b>1232</b>, <b>1234</b>, <b>1236</b> from a machine in one of the screen areas <b>1210</b>, <b>1212</b>, <b>1214</b>, <b>1216</b> to a machine in a different one of the screen areas. It should be understood that the GUI will not permit dragging and dropping an IP icon from an external VIP area to an internal VIP area. When an IP icon is moved from one machine area to another, the IP address associated with the IP icon is moved to the new machine. If a user affirmatively moves an IP icon, the distributed gateway application will automatically set the “Preference” flag (described above with regard to the setup procedure) and will change the IP icon to indicate the setting of the “Preference” flag, such as by adding a red dot <b>1238</b> to the IP icon. As noted above, an IP address for which the user has indicated a preference assignment (either in setup or by dragging and dropping) will be moved by the distributed gateway application only if the preferred machine fails, or if the preference is removed by the user.</p>
<p id="p-0108" num="0107">In the preferred embodiment, the GUI permits a user to set and change the VIP address options for a machine by using a conventional display mouse and right-clicking the display mouse when the display cursor is placed over an IP icon. The action of right-clicking causes the GUI to display a preferences menu that permits setting and removing an IP address preference. Setting the IP preference in this way means that the current machine assignment is the preferred assignment for the VIP address, so that the red dot <b>1238</b> will show.</p>
<p id="p-0109" num="0108">Below the load bar <b>1230</b> and IP icons <b>1232</b>, <b>1234</b>, <b>1236</b> in each display screen area <b>1210</b>, <b>1212</b>, <b>1214</b>, <b>1216</b> are placed local monitor icons and condition icons that indicate the status associated with the local monitor components. The local monitor icons include a NIC Load icon <b>1240</b>, an Application Condition (firewall) icon <b>1242</b>, and a Ping icon <b>1244</b>. Each local monitor icon is an identifier that is associated with a condition icon placed directly below it. The condition icons illustrate three different condition levels for their respective associated components and are represented in the preferred embodiment as a traffic signal display.</p>
<p id="p-0110" num="0109">For example, the NIC Load icon <b>1240</b> indicates that the traffic signal <b>1250</b> with which it is associated shows the status of the network interface card to the indicated subnet, or the status of the link for that card to the subnet. A red traffic signal (or top-most icon display indication) indicates that the distributed gateway software has detected that the NIC is not functioning properly. A yellow traffic signal (or mid-level icon display indication) indicates that the NIC is not being monitored by the distributed gateway software. That is, the NIC load monitoring feature is either disabled or not supported by the installed software for this component. A green traffic signal (or lower-most icon display indication) indicates that the NIC is functioning properly.</p>
<p id="p-0111" num="0110">Similarly, the Application Condition icon <b>1242</b> indicates that the traffic signal icon <b>1252</b> with which it is associated shows the status of the application (firewall) on the local machine. A red traffic signal indicates that the distributed gateway software has detected that the firewall is not functioning properly, a yellow signal indicates that the firewall is not being monitored by the software, and a green signal indicates that the firewall is functioning properly. The Ping icon <b>1244</b> indicates the status of the ping remote monitor. Thus, a red signal indicates that no timely ping response was received, a yellow signal indicates that the Ping feature is not being monitored, and a green signal indicates that the last ping response was timely received.</p>
<p id="p-0112" num="0111">The operation of any one of the particular local monitor components <b>1240</b>, <b>1242</b>, <b>1244</b> can be enabled and disabled by right-clicking on the traffic signal icon for the desired component. Enabling the monitor means that the given component (NIC, application, or ping) will be monitored. If the component is functioning properly, the associated traffic signal icon will be set to green when the component is enabled in this way. If the component has failed, the traffic signal will be set to red. If the component cannot be monitored, such as where a NIC is incompatible with the monitor software, the traffic signal will be set to yellow when the component is enabled in this way.</p>
<heading id="h-0011" level="1">Remote Monitoring</heading>
<p id="p-0113" num="0112">As described above, the Remote Management Console display <b>1200</b> permits changing and monitoring the distributed gateway through the GUI. In accordance with the Remote Management Console and the operation of the distributed gateway software, the cluster can be changed and monitored as described above from any one of the cluster machines, and from a suitably configured remote machine external to the cluster. More particularly, a remote machine can be used if it can communicate with a machine of the cluster and if it has access to the appropriate GUI graphical components. Access to the GUI components can be achieved either by installation of the distributed gateway software on the remote machine, or if the appropriate GUI components can be delivered to the remote machine during the cluster monitoring. Such remote monitoring will first be enabled from a machine of the cluster using the Edit menu of the Remote Management Console screen.</p>
<p id="p-0114" num="0113"><figref idref="DRAWINGS">FIG. 13</figref> is a representation of the Remote Management Console screen <b>1200</b> of <figref idref="DRAWINGS">FIG. 12</figref>, showing the drop-down Edit menu selections. <figref idref="DRAWINGS">FIG. 13</figref> shows the screen after a user has selected the Edit menu from the menu bar <b>1206</b> and caused the Edit menu <b>1302</b> to drop down from the menu bar. The menu selections include Add Gateway Monitor <b>1304</b>, Set Number of Adapters <b>1306</b>, Set Size of IP Pool <b>1308</b>, Set Client Authentication Port <b>1310</b>, and Set Password <b>1312</b>. It should be noted that the first time the Remote Management Console is displayed after the distributed gateway software is installed, the details of the machines in the cluster will not be observed. Thus, neither a machine of the cluster or a remote machine may obtain the monitoring information from the display. The Edit menu <b>1302</b> must be selected and parameters set to enable monitoring of the cluster machines, as described below.</p>
<p id="p-0115" num="0114">The Add Gateway Monitor function permits a user to enter a primary IP address for each gateway machine to be monitored. One IP address will be entered for each machine in the cluster. Ordinarily, the IP address of each machine in the cluster will be entered, so that each machine can be monitored. The Number of Adapters function is for entering the number of NICs to show for each machine. The default number of NICs is two, for a minimal cluster configuration, as this indicates connection of the machine to one external subnet and one internal subnet. The user entry in the Number of Adapters should match the number entered for the setup value, in the setup procedure described above.</p>
<p id="p-0116" num="0115">The Set Size of IP Pool function permits a user to enter the size of the IP address pools, with a default number of four. This value defines the number of IP addresses managed by the distributed gateway on each subnet. The Set Client Authentication Port function involves connecting via a telnet operation to a port on the Application (firewall) machine. This ensures communication between the distributed gateway software and the application software (such as the firewall) with which it works.</p>
<p id="p-0117" num="0116">The Set Password function provides a means of authenticating a user who wishes to gain access to the cluster monitoring information. The password entered here will be used to permit a remote user to communicate with a machine in the cluster. It should be noted that this authentication password does not guarantee access to the distributed gateway software and to information from the Remote Monitoring Console. Rather, a separate cluster password is necessary, in addition to the authentication password. The cluster password is preferably set only by a user at a cluster machine, using a local administrative utility program of the distributed gateway software. In the preferred embodiment, the distributed gateway software provides a “Change Service Password” option from the software “Start” menu that, when selected from a cluster machine, permits an authorized user to set the cluster password. In this way, a setup user specifies a password that must be provided when connecting to the cluster.</p>
<p id="p-0118" num="0117">Finally, the distributed gateway software includes a command line interface utility program that provides an alternative to the GUI. The command line interface permits the same control as the Remote Monitoring Console of the GUI. That is, just as an authorized user may remotely connect to a cluster machine and view the GUI display to determine the status of the cluster, an authorized user may remotely connect to a cluster machine and receive cluster status information from a text-based, command line interface. The command line interface will appear in a text window, in a conventional manner that will be familiar to those skilled in the art.</p>
<p id="p-0119" num="0118">In the preferred embodiment, the command line interface will report the local status of the machine to which a remote user connects or of the local machine at which a user has invoked the command line interface, and will also report on the global status of the cluster. The global status information may be retrieved by connecting to any machine of the cluster. In addition, a remote user may move VIP address assignments from one machine to another by connecting to any machine of the cluster. It should be noted, however, that the command line interface will return a success indication (that is, a no error condition) if the command from the remote machine is successfully communicated to the cluster machine, but the command line interface does not determine if the remote machine actually carries out the requested action. Such information is available when communicating with the GUI.</p>
<p id="p-0120" num="0119">Thus, the distributed gateway constructed in accordance with the invention dynamically reconfigures traffic assignments among multiple machines for increased network availability. The distributed gateway moves traffic assignments among the multiple machines if one of the gateway machines becomes unavailable, such that network availability is substantially unchanged. The machines of the distributed gateway communicate with each other such that automatic, dynamic traffic assignment reconfiguration occurs in response to machines being added and deleted, with and no loss in functionality for the gateway cluster overall, in a process that is transparent to local network users, thereby providing a distributed gateway functionality that is scalable. Each machine of the gateway can advantageously continue with its operational functions, such as operating firewall software, while participating in the distributed gateway and dynamic reconfiguration processing. In this way, the invention substantially maintains network availability regardless of machine failures, so that there is no single point of failure and no lapse in gateway functionality.</p>
<heading id="h-0012" level="1">Improved State Sharing Protocol</heading>
<p id="p-0121" num="0120">A network gateway server cluster constructed in accordance with the present invention includes multiple gateway server computers, also called traffic control computers, that function as a front layer gateway of a first subnet between the network and a back-end layer that includes multiple machines of a second subnet. The front-layer servers provide a scalable, distributed, highly available, load balancing server system that performs fail-over and dynamic load balancing for both server layers. The front-layer servers achieve their unique functionality with a dynamic reconfiguration protocol that permits reassignment of network addresses to the front layer machines and supports state information sharing and CPU load information sharing among the front-layer servers. To provide such functionality, the front-layer servers utilize a token scheme in an expanded format compared to that described above.</p>
<p id="p-0122" num="0121">The server cluster configuration and address assignment are achieved through the operation and protocol word scheme previously described. As noted above, a variety of unique functional features are provided by a gateway server cluster constructed and operated in accordance with the invention. The unique functional features will be described next.</p>
<heading id="h-0013" level="1">Consistent State Sharing</heading>
<p id="p-0123" num="0122">Consistent state sharing among the servers in the cluster is important for the distributed server application in accordance with the invention. In this embodiment, the Group Membership Protocol Word described above in Section A is expanded and generalized to create a general Consistent State Sharing scheme. This Consistent State Sharing mechanism is reliable, has low-overhead, and serves as the core to enable other features of the front-layer distributed server system.</p>
<p id="p-0124" num="0123">The foundation of the Consistent State Sharing mechanism is a Reliable Message layer that is implemented with the distributed gateway server application software. In this embodiment, the Reliable Message layer sits on top of UDP (that is, it uses UDP to send data) and comprises a module of the application software. It has an acknowledgement and automatic resend mechanism that enables reliable delivery of data. Its main differentiation with TCP is that, first, it is a connectionless protocol; secondly, it supports multiple subnet transport; furthermore, in the case of delivery failure, it calls a call-back function from the layer above it.</p>
<p id="p-0125" num="0124">Upper layer software, comprising modules of the distributed server application, can send a message of any size using the Reliable Message layer. The sender-side operation of the Reliable Message layer partitions the message being sent into a number of packets. It sends all packets using UDP, creating a record for each packet as well as for the message. When the timeout of any packet expires, it resends that packet, and doubles the timeout value. After a predetermined number of resends using all possible paths, if the Reliable Message layer still fails to receive acknowledgement, the Reliable Message layer will call the callback function to notify the upper layer software, passing it the record of the original message. On the other hand, after all packets have been acknowledged by the receiver, the Reliable Message layer cleans the records for the packets and for the message by deletion. The upper layer software comprises any software calling the Reliable Message layer for messaging.</p>
<p id="p-0126" num="0125">On the receiver side of the Reliable Message layer processing, for every packet received, the Reliable Message layer sends out an acknowledgement. The Reliable Message layer of a front layer server maintains a buffer in which it places the packets, until all packets for a message are received. When all packets are received, the Reliable Message layer asks the upper layer software to process the message.</p>
<p id="p-0127" num="0126">With the creation of the Reliable Message layer, this embodiment provides consistent state sharing with a reliable message passing interface. In this consistent state sharing scheme, the token described in the Group Membership Protocol Word serves as the “locomotive” of a state-sharing “train”. This is illustrated in <figref idref="DRAWINGS">FIG. 14</figref>. The “locomotive” <b>1402</b> can have an arbitrary number of data modules <b>1404</b> attached to it, like carriages of a train. This is achieved with a data field in the token header that specifies the number of data modules (carriages) associated with the token (locomotive). The token <b>1402</b>, together with the data modules <b>1404</b>, becomes a message. Thus, the Reliable Message layer is a means of transporting this message. This message travels in a token ring fashion around all the members of the gateway server cluster, as described above. Each member of the cluster can load and unload information onto or from the message train, changing the token header to specify the number of data modules, as needed.</p>
<p id="p-0128" num="0127">Currently, the data that travels on the consistent state sharing mechanism described above include Virtual IP information, cluster configuration information, node fault and load monitoring information, connection information, server monitoring information. Other types of information may be added, as needed.</p>
<heading id="h-0014" level="1">Dynamic Address Assignment without Reboot</heading>
<p id="p-0129" num="0128">Some server operating systems will not permit changing the IP address of a server without rebooting the server. Rebooting a server machine involves shutting down the server and reapplying power. It should be apparent that the server is unavailable while the reboot is performed, and therefore rebooting a server can cause a critical lapse of server availability and should be avoided. A gateway server constructed in accordance with the present invention provides a distributed gateway server that advantageously permits network address assignments to be moved from one distributed server to another of a gateway cluster without requiring rebooting. This is achieved by “hiding” the IP address reassignment from the server operating system (OS) software of the cluster machines. The OS may comprise, for example, the “Windows NT Server” operating system produced by Microsoft Corporation of Redmond, Wash., USA installed on the server machine.</p>
<p id="p-0130" num="0129"><figref idref="DRAWINGS">FIG. 15</figref> shows the operating process of a distributed server in accordance with the invention. In the first operation, represented by the flow diagram box numbered <b>1502</b>, the server OS is configured so that all IP addresses are assigned to all distributed server machines of the server cluster. That is, the OS of each distributed server in the cluster configured upon installation such that all IP addresses to be shared are, in the view of the OS, assigned to all of the cluster servers. This permits flexibility in assigning the IP addresses to any one of the cluster servers without rebooting, because any IP address reassignment is transparent to the server OS. Thus, to the server OS, it appears that no IP address reassignment ever occurs, and therefore no rebooting is ever needed.</p>
<p id="p-0131" num="0130">In the next operation, represented by the flow diagram box numbered <b>1504</b>, a distributed server (DS) that is reassigned by the server application (<figref idref="DRAWINGS">FIG. 4</figref>) to a new IP address will generate a gratuitous ARP message, as described above. The other distributed servers of the server cluster respond to the gratuitous ARP message with their particular IP address assignment, per the description above (<figref idref="DRAWINGS">FIG. 9</figref>). This operation is represented by the flow diagram box numbered <b>1506</b>. Lastly, to prevent OS rebooting, the distributed server application software of each distributed server will block the ARP reply messages of the cluster servers from being detected by their respective server OS, by discarding the reply messages. This operation is indicated by the flow diagram box numbered <b>1508</b>. In this way, it is guaranteed that there is no IP address conflict, because each server OS is unaware of the machines having duplicate IP numbers. For each virtual IP, at any time, only one server is answering the ARP request, and therefore the mutual exclusivity of the virtual IP addresses is maintained.</p>
<heading id="h-0015" level="1">Symmetric Traffic Routing</heading>
<p id="p-0132" num="0131">Another feature provided by the server system constructed in accordance with the invention is that of symmetric routing of network traffic among the cluster machines. This is advantageous because a cluster of front layer servers may assign a distributed gateway server to handle incoming traffic to be forwarded to a machine on another subnet, but that distributed server may be different from the default server that will be used by the subnet machine. Thus, the distributed server handling incoming traffic destined for a subnet machine will not be the same distributed server that receives return responses from the subnet machine. This results in asymmetric traffic loading among the distributed servers, and is undesirable in some cases where symmetric routing is required. In accordance with the invention, the distributed servers of a gateway server cluster will forward data traffic among the machines in the cluster to ensure that data traffic enters and leaves the cluster from the same distributed server, thereby providing symmetric routing.</p>
<p id="p-0133" num="0132"><figref idref="DRAWINGS">FIG. 16</figref> is a flow diagram that illustrates the operation of the server cluster to implement symmetric traffic handling in accordance with the invention. For a server cluster having distributed servers as described above, one of the distributed servers is assigned to be an “authoritative” server, or authoritative node, for the server cluster. This assignment is carried out by the front-layer server constructed in accordance with the present invention.</p>
<p id="p-0134" num="0133">In the first step of operation illustrated in <figref idref="DRAWINGS">FIG. 16</figref>, as represented by the flow diagram box numbered <b>1602</b>, a server, or node, of the server cluster receives a data request from a client machine and hashes the data request to determine which server node will be the authoritative node for the request. It should be understood that different nodes of the server cluster may be assigned “authoritative nodes” for different data requests, depending on the IP addresses (of destination Web server) involved. Once the authoritative node is identified, the data request is forwarded from the receiving node to the authoritative node. This operation comprises the operation identified by the box <b>1602</b>.</p>
<p id="p-0135" num="0134">When the authoritative node receives the data request, the authoritative node determines which distributed server in the server cluster will handle the data traffic associated with this request from this client to the designated Web server. When the authoritative node identifies the handling node, it forwards the data request to the identified node for handling. This operation is represented by the flow diagram box numbered <b>1604</b>. Next, as represented by the flow diagram box numbered <b>1606</b>, the handling node receives the data request and sends it along to the appropriate Web server for response. The Web server (WS) response is sent to a default node of the server cluster. Those skilled in the art will know that a Web server typically has a default upstream router (toward the Internet) to which it sends replies to data requests. Sending the Web server reply to the default reply node is represented by the flow diagram box numbered <b>1608</b>.</p>
<p id="p-0136" num="0135">Next, as represented by the flow diagram box numbered <b>1610</b>, the default reply node hashes the received data request reply to the authoritative node for replies, and sends the reply message to that authoritative reply node. The authoritative reply node receives the reply message and forwards it to the server node that will ensure symmetric communication. That is, the authoritative reply node will determine the node of the server cluster that first received the data request from the client, and will forward the reply message to that node. In this way, the data request passes to and from the server cluster through the same distributed server, thereby providing symmetric communication. This operation is represented by the flow diagram box numbered <b>1612</b>.</p>
<p id="p-0137" num="0136">Finally, in an optimization step, the authoritative node sends forwarding information to the default reply node. The default reply node stores this information, which indicates the node to which the authoritative node forwarded the reply for symmetric communication. On subsequent reply messages received at the default reply node, the distributed server of the default reply node will know which server should receive the reply message, and will directly forward the reply message to that node. Thus, the default reply node can skip the step of sending the reply message to the authoritative node. This operation is represented by the flow diagram box numbered <b>1614</b>.</p>
<p id="p-0138" num="0137"><figref idref="DRAWINGS">FIG. 17</figref> diagrammatically illustrates the operation described in connection with <figref idref="DRAWINGS">FIG. 16</figref>. A server cluster <b>1702</b> receives data requests from a router <b>1704</b> that interfaces to the Internet <b>1706</b>. The data request is received at Server <b>1</b> of the server cluster, in accordance with IP address assignments and operation of the cluster, as indicated by the data path <b>1708</b>. The receiving node Server <b>1</b> hashes the request to the authoritative node, which in this example is Server <b>2</b>, as indicated by the arrow <b>1710</b>. The authoritative node determines the Web server that will handle the data request, and the data request is then forwarded to Web Server <b>1</b>, which is the destination Web server. In the preferred embodiment, the authoritative server informs the receiving node Server <b>1</b>, which forwards the data request. This processing is represented by the data path <b>1712</b>.</p>
<p id="p-0139" num="0138">The sequence <b>1710</b> corresponds to the box <b>1602</b> of the <figref idref="DRAWINGS">FIG. 16</figref> flow diagram, and the sequence <b>1712</b> corresponds to box <b>1604</b> and box <b>1606</b> of <figref idref="DRAWINGS">FIG. 16</figref>.</p>
<p id="p-0140" num="0139">The reply message is sent from Web Server <b>1</b> to the default reply node for Web Server <b>1</b>, which in this example is Server <b>3</b> of the server cluster. The default reply data path is represented by the arrow <b>1714</b> (corresponding to box <b>1608</b> of <figref idref="DRAWINGS">FIG. 16</figref>). At the default reply node (Server <b>3</b>), the reply node hashes the reply message to determine that the authoritative reply node for this message is Server <b>2</b>, and then forwards the reply to Server <b>2</b>. The forwarding operation is indicated by the arrow <b>1716</b>. Finally, Server <b>2</b> forwards the reply to Server <b>1</b>, which is the node needed to ensure symmetric operation of the cluster, in the operation represented by the arrow <b>1718</b>. Server <b>1</b> then sends the reply back to the requesting client, through the router <b>1704</b>, per the path <b>1720</b>.</p>
<p id="p-0141" num="0140">The operation of <b>1716</b> corresponds to the operation of the <figref idref="DRAWINGS">FIG. 16</figref> box <b>1610</b>, and the operation of <b>1718</b> corresponds to the <figref idref="DRAWINGS">FIG. 16</figref> flow diagram box numbered <b>1612</b>.</p>
<p id="p-0142" num="0141">In the optimization step, Server <b>2</b>, the authorization reply node, informs Server <b>3</b>, the default reply node, that the server ultimately returning the reply message is Server <b>1</b>. Therefore, Server <b>3</b> will store this information and send reply messages from Web Server <b>1</b> directly to Server <b>1</b>, bypassing an intermediate step. This processing is indicated by the arrow <b>1722</b> (and corresponds to the <figref idref="DRAWINGS">FIG. 16</figref> box <b>1614</b>).</p>
<p id="p-0143" num="0142">The authoritative servers can, if desired, perform load balancing operations in accordance with well-known techniques for adjusting load among the servers. Both the receiving node and the handling node will cache the assignment data that are provided by the authoritative nodes. The technique described above for the symmetric routing can be applied to a variety of gateway server functions. Such symmetric load balancing capability is advantageous because some server functions, such as firewalls, may change certain IP address and port settings, which may result in changed hashing values. The operation as described above can be used to detect connection changes (detecting as changes to client or server IP address and port, or changes to protocol type) and then to restore symmetry.</p>
<p id="p-0144" num="0143">The present invention has been described above in terms of presently preferred embodiments so that an understanding of the present invention can be conveyed. There are, however, many configurations for network data traffic controllers not specifically described herein but with which the present invention is applicable. The present invention should therefore not be seen as limited to the particular embodiments described herein, but rather, it should be understood that the present invention has wide applicability with respect to network data traffic controllers generally. All modifications, variations, or equivalent arrangements and implementations that are within the scope of the attached claims should therefore be considered within the scope of the invention.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>We claim:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A data traffic controller for a computer network, the data traffic controller comprising:
<claim-text>a network interface that permits communication with a subnet over which network data is sent and received; and</claim-text>
<claim-text>a plurality of computers connected in a cluster between the network interface and the subnet to form a distributed gateway for communicating network data between said network interface and said subnet, each of which computers executes a distributed gateway application that dynamically assigns any of a plurality of virtual network addresses selected from a pool of virtual addresses to any of a plurality of primary network addresses to send network data to an intended host on the subnet, wherein network data intended for said host on the subnet is addressed to one of the virtual network addresses, and wherein the computers communicate operational status information among themselves for each computer on the same subnet using a group membership protocol word to dynamically reconfigure network data traffic assignments among the plurality of computers in response to said status information for said dynamic assignment of virtual network addresses, wherein one computer can configure and monitor the operating condition of another computer in the distributed gateway cluster.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. A method of controlling data traffic for a computer network through a cluster of a plurality of computers connected as a distributed gateway between a network interface and a subnet over which network data is sent and received, the method comprising:
<claim-text>receiving network data intended for a host on the subnet at said plurality of computers, wherein the network data is addressed to one of a plurality of virtual network addresses selected from a pool of virtual network addresses that are on the subnet and are associated with one or more primary network addresses;</claim-text>
<claim-text>communicating by a computer with one or more of said plurality of computers on the same subnet operational status information about said one or more computers; and</claim-text>
<claim-text>dynamically assigning by said plurality of computers in response to said status information said one virtual network address to a primary network address to send the network data to the intended host on the subnet, wherein a computer can configure and monitor the operating condition of another computer in the distributed gateway cluster.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. A method of controlling data traffic as defined in <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein said computers comprise server computers that are all members of a first subnet of network addresses over which network data is sent and received, and further comprising:
<claim-text>communicating with the plurality of server computers state information and load information with a dynamic reconfiguration protocol that permits reassignment of network addresses among the server computers in response to said state information and said load information, said status information comprising said state information and said load information; and</claim-text>
<claim-text>communicating between said server computers and a plurality of host computers that are members of a host subnet of network addresses to send and receive network data traffic.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. A method as defined in <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein communicating with said plurality of server computers comprises sending data using a Reliable Message layer scheme that comprises a token data packet and one or more data carriage packets, wherein the token data packet specifies the number of data carriage packets that together comprise a Reliable Message packet and wherein the data carriage packets include data relating to state information and data traffic load information about each of the server computers.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. A method as defined in <claim-ref idref="CLM-00003">claim 3</claim-ref>, further including:
<claim-text>configuring an operating system of the server computers such that all network addresses in a pool of addresses assigned to the first subnet are assigned to the server computers;</claim-text>
<claim-text>generating a gratuitous address resolution protocol (ARP) message in response to an address reassignment of one server computer and communicating the ARP message to the other server computers of the first subnet;</claim-text>
<claim-text>blocking the sending of an ARP acknowledgment message to the other server computers of the first subnet for any received gratuitous ARP message, thereby inhibiting reboot operation of the respective server computers and ensuring that each server computer is unaware of any duplicate assignment of network address numbers.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. A method as defined in <claim-ref idref="CLM-00003">claim 3</claim-ref>, further including operating as an authoritative node of the first subnet to ensure symmetric routing of network data traffic to and from the first subnet.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. A method as defined in <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein operating to ensure symmetric traffic routing comprises:
<claim-text>receiving a data request from a responding server computer of the first subnet, wherein the data request was initially received at the responding server computer, which determined the authoritative node for responding to the data request;</claim-text>
<claim-text>identifying a server computer in the first subnet that will handle the data traffic associated with the data request and forwarding the data request to the identified server computer for handling;</claim-text>
<claim-text>receiving a reply message from a server computer of the first subnet that is operating as a default reply node to a second subnet computer that is responding to the data request; and</claim-text>
<claim-text>forwarding the reply message to a server computer of the first subnet that will ensure symmetric routing of the data request and reply message with respect to the server computers of the first subnet.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. A method as defined in <claim-ref idref="CLM-00007">claim 7</claim-ref>, further comprising forwarding assignment information to the server computer of the first subnet that was operating as the default reply node for the data request, wherein the assignment information includes forwarding information that the default reply node can use to directly forward response messages from the second subnet computer to the first subnet computer that will ensure symmetric routing.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. A data traffic controller as defined in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the operational status includes the network data traffic loads being carried by each computer.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. A data traffic controller as defined in <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein a computer communicates with the other computers on the same subnet to form said distributed gateway.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. A data traffic controller as defined in <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the computers dynamically reconfigure the address assignments among the distributed gateway computers in response to traffic loads being carried by the computers.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. A data traffic controller as defined in <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein a computer determines that it is carrying a traffic load that is less than the traffic load being carried by one of the other computers of said plurality, and in response reconfigures the address assignments to assume a portion of the traffic load being handled by the one other computer and thereby reduces the traffic load of the one other computer.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. A data traffic controller as defined in <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the traffic load being carried by a computer of the distributed gateway cluster increases when another one of the computers in the distributed gateway cluster becomes unavailable, and in response the the computers reconfigure the traffic load being handled by the computers.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. A data traffic controller as defined in <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein operations of the data traffic controller are substantially unchanged after a reconfiguration of the address assignments, thereby making the reconfiguration transparent to a user.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. A data traffic controller as defined in <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the operations of the data traffic controller include one or more computer application programs.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. A data traffic controller as defined in <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the computer application program comprises a firewall program.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. A data traffic controller as defined in <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the computer application program comprises a mail server program.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. A data traffic controller as defined in <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the computer application program comprises a file server program.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. A data traffic controller as defined in <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein upon a new computer communicating with the plurality of computers of the distributed gateway cluster of computers already communicating among themselves, the new computer joins the distributed gateway cluster.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. A data traffic controller as defined in <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the computers of the distributed gateway cluster recognize that the new computer has a lower traffic load than the remaining computers of the distributed gateway cluster when the new computer joins the cluster, and in response the new computer assumes a portion of the traffic load from one or more of the computers in a process that dynamically reconfigures the traffic address assignments of the computers.</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. A data traffic controller as defined in <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the computers of the cluster detect when the new computer begins communicating with the cluster, thereby joining the cluster, and in response the computers perform a dynamic reconfiguration process to change one or more traffic address assignments from the computers to the new computer.</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. A data traffic controller as defined in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein a computer communicates by passing said group membership protocol word to the other computers along the subnet.</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. A data traffic controller as defined in <claim-ref idref="CLM-00022">claim 22</claim-ref>, wherein the group membership protocol word includes node map configuration data indicating traffic assignments for each one of the computers in the distributed gateway cluster.</claim-text>
</claim>
<claim id="CLM-00024" num="00024">
<claim-text>24. A data traffic controller as defined in <claim-ref idref="CLM-00022">claim 22</claim-ref>, wherein the group membership protocol word includes data that indicates the traffic load being carried by each computer in the distributed gateway cluster.</claim-text>
</claim>
<claim id="CLM-00025" num="00025">
<claim-text>25. A data traffic controller as defined in <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein a computer can receive a user input that specifies a configuration or monitoring change for another computer, and can receive the user input from a remote user.</claim-text>
</claim>
<claim id="CLM-00026" num="00026">
<claim-text>26. A data traffic controller as defined in <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the data traffic controller performs the dynamic reconfiguration of address assignments through a graphical user interface (GUI).</claim-text>
</claim>
<claim id="CLM-00027" num="00027">
<claim-text>27. A data traffic controller as defined in <claim-ref idref="CLM-00026">claim 26</claim-ref>, wherein subnet virtual network addresses and traffic address assignments are graphically represented, and the reconfiguration of address assignments can be performed by a drag and drop action of traffic address assignments onto subnet virtual network addresses.</claim-text>
</claim>
<claim id="CLM-00028" num="00028">
<claim-text>28. A data traffic controller as defined in <claim-ref idref="CLM-00026">claim 26</claim-ref>, wherein the GUI includes a local status monitor indicator for the network interface.</claim-text>
</claim>
<claim id="CLM-00029" num="00029">
<claim-text>29. A data traffic controller as defined in <claim-ref idref="CLM-00026">claim 26</claim-ref>, wherein the GUI includes a local condition monitor indicator for the application program of the data traffic controller.</claim-text>
</claim>
<claim id="CLM-00030" num="00030">
<claim-text>30. A data traffic controller as defined in <claim-ref idref="CLM-00026">claim 26</claim-ref>, wherein the GUI includes a local condition monitor indicator for a ping communication utility.</claim-text>
</claim>
<claim id="CLM-00031" num="00031">
<claim-text>31. A method as defined in <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the operational status includes the network data traffic loads being carried by each computer.</claim-text>
</claim>
<claim id="CLM-00032" num="00032">
<claim-text>32. A method as defined in <claim-ref idref="CLM-00031">claim 31</claim-ref>, wherein each computer communicates with the other computers on the same subnet and thereby forms a distributed gateway cluster of computers.</claim-text>
</claim>
<claim id="CLM-00033" num="00033">
<claim-text>33. A method as defined in <claim-ref idref="CLM-00032">claim 32</claim-ref>, further including the computers dynamically reconfiguring the address assignments among the distributed gateway cluster computers in response to traffic loads being carried by the computers.</claim-text>
</claim>
<claim id="CLM-00034" num="00034">
<claim-text>34. A method as defined in <claim-ref idref="CLM-00033">claim 33</claim-ref>, wherein reconfiguring comprises a computer determining that it is carrying a traffic load that is less than the traffic load being carried by one of the other computers, and in response reconfiguring the address assignments to assume a portion of the traffic load being handled by another computer and thereby reducing the traffic load of the other computer.</claim-text>
</claim>
<claim id="CLM-00035" num="00035">
<claim-text>35. A method as defined in <claim-ref idref="CLM-00033">claim 33</claim-ref>, wherein the traffic load being carried by the other computer increases when one of the remaining computers in the distributed gateway cluster becomes unavailable, and in response the computers reconfigure the traffic load being handled by the computers.</claim-text>
</claim>
<claim id="CLM-00036" num="00036">
<claim-text>36. A method as defined in <claim-ref idref="CLM-00033">claim 33</claim-ref>, wherein reconfiguring the address assignments results in substantially no change in the operations of the data traffic controller, thereby making the reconfiguration transparent to a user.</claim-text>
</claim>
<claim id="CLM-00037" num="00037">
<claim-text>37. A method as defined in <claim-ref idref="CLM-00036">claim 36</claim-ref>, wherein the operations of the data traffic controller include one or more computer application programs.</claim-text>
</claim>
<claim id="CLM-00038" num="00038">
<claim-text>38. A method as defined in <claim-ref idref="CLM-00037">claim 37</claim-ref>, wherein the computer application program comprises a firewall program.</claim-text>
</claim>
<claim id="CLM-00039" num="00039">
<claim-text>39. A method as defined in <claim-ref idref="CLM-00037">claim 37</claim-ref>, wherein the computer application program comprises a mail server program.</claim-text>
</claim>
<claim id="CLM-00040" num="00040">
<claim-text>40. A method as defined in <claim-ref idref="CLM-00037">claim 37</claim-ref>, wherein the computer application program comprises a file server program.</claim-text>
</claim>
<claim id="CLM-00041" num="00041">
<claim-text>41. A method as defined in <claim-ref idref="CLM-00032">claim 32</claim-ref>, wherein upon a new computer communicating with a computer of the distributed gateway cluster of computers already communicating among themselves, said new computer joins the distributed gateway cluster.</claim-text>
</claim>
<claim id="CLM-00042" num="00042">
<claim-text>42. A method as defined in <claim-ref idref="CLM-00041">claim 41</claim-ref>, wherein the computers of the distributed gateway cluster recognize that a joining computer has a lower traffic load than the computers of the distributed gateway cluster when the computer joins the cluster, and in response the joining computer assumes a portion of the traffic load from one or more of the computers in a process that dynamically reconfigures the traffic address assignments of the cluster.</claim-text>
</claim>
<claim id="CLM-00043" num="00043">
<claim-text>43. A method as defined in <claim-ref idref="CLM-00041">claim 41</claim-ref>, wherein upon detecting when a new computer begins communicating with the cluster, thereby joining the cluster, performing a dynamic reconfiguration process to change one or more traffic address assignments from the computers of the cluster to the new computer.</claim-text>
</claim>
<claim id="CLM-00044" num="00044">
<claim-text>44. A method as defined in <claim-ref idref="CLM-00041">claim 41</claim-ref>, wherein said communicating comprises passing a group membership protocol word to the computers of the subnet.</claim-text>
</claim>
<claim id="CLM-00045" num="00045">
<claim-text>45. A method as defined in <claim-ref idref="CLM-00044">claim 44</claim-ref>, wherein the group membership protocol word includes node map configuration data indicating traffic assignments for each one of the computers in the distributed gateway cluster.</claim-text>
</claim>
<claim id="CLM-00046" num="00046">
<claim-text>46. A method as defined in <claim-ref idref="CLM-00044">claim 44</claim-ref>, wherein the group membership protocol word includes data that indicates the traffic load being carried by each computer in the distributed gateway cluster.</claim-text>
</claim>
<claim id="CLM-00047" num="00047">
<claim-text>47. A method as defined in <claim-ref idref="CLM-00031">claim 31</claim-ref>, wherein a computer can receive a user input that specifies a configuration or monitoring change for another computer, and can receive the user input from a remote user.</claim-text>
</claim>
<claim id="CLM-00048" num="00048">
<claim-text>48. A method as defined in <claim-ref idref="CLM-00032">claim 32</claim-ref>, wherein said dynamically assigning comprises dynamic reconfiguration of address assignments through a graphical user interface (GUI).</claim-text>
</claim>
<claim id="CLM-00049" num="00049">
<claim-text>49. A method as defined in <claim-ref idref="CLM-00048">claim 48</claim-ref>, wherein the subnet virtual network addresses and traffic address assignments are graphically represented, and the reconfiguration of address assignments comprises a drag and drop action of traffic address assignments onto subnet virtual network addresses.</claim-text>
</claim>
<claim id="CLM-00050" num="00050">
<claim-text>50. A method as defined in <claim-ref idref="CLM-00048">claim 48</claim-ref>, wherein the GUI includes a local status monitor indicator for the network interface.</claim-text>
</claim>
<claim id="CLM-00051" num="00051">
<claim-text>51. A method as defined in <claim-ref idref="CLM-00048">claim 48</claim-ref>, wherein the GUI includes a local condition monitor indicator for the application program of the data traffic controller.</claim-text>
</claim>
<claim id="CLM-00052" num="00052">
<claim-text>52. A method as defined in <claim-ref idref="CLM-00048">claim 48</claim-ref>, wherein the GUI includes a local condition monitor indicator for a ping communication utility.</claim-text>
</claim>
<claim id="CLM-00053" num="00053">
<claim-text>53. A program product for use in a computer of a plurality of computers connected in a cluster as a distributed gateway between a network interface and a subnet of a computer network over which network data is sent and received, wherein the network data is received through the network interface and communicated through the computer cluster to the subnet, the program product comprising:
<claim-text>a recordable medium embodying computer-readable instructions executable by the computers to perform a method comprising:</claim-text>
<claim-text>receiving by said plurality of computers network data intended for a host on the subnet, wherein the network data is addressed to one of a plurality of virtual network addresses selected from a pool of virtual network addresses that are on the subnet and are associated with one or more primary network addresses;</claim-text>
<claim-text>communicating among one or more of said plurality of computers on the same subnet operational status information about said computers; and</claim-text>
<claim-text>dynamically assigning by said plurality of computers of said cluster in response to said communicating said status information said virtual network address to a primary network address to send the network data to the intended host on the subnet, thereby controlling network data traffic, wherein a computer can configure and monitor the operating condition of another computer in the distributed gateway cluster.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00054" num="00054">
<claim-text>54. A program product as defined in <claim-ref idref="CLM-00053">claim 53</claim-ref>, wherein the operational status includes the network data traffic loads being carried by each computer.</claim-text>
</claim>
<claim id="CLM-00055" num="00055">
<claim-text>55. A program product as defined in <claim-ref idref="CLM-00054">claim 54</claim-ref>, wherein a computer communicates with the other computers on the same subnet and thereby forms a distributed gateway cluster of computers.</claim-text>
</claim>
<claim id="CLM-00056" num="00056">
<claim-text>56. A program product as defined in <claim-ref idref="CLM-00055">claim 55</claim-ref>, further including dynamically reconfiguring the address assignments among the distributed gateway cluster computers in response to traffic loads being carried by the computers.</claim-text>
</claim>
<claim id="CLM-00057" num="00057">
<claim-text>57. A program product as defined in <claim-ref idref="CLM-00056">claim 56</claim-ref>, wherein said reconfiguring comprises a computer determining that it is carrying a traffic load that is less than the traffic load being carried by one of the other computers, and in response reconfiguring the address assignments to assume a portion of the traffic load being handled by the other computers and thereby reducing the traffic load of the other computers.</claim-text>
</claim>
<claim id="CLM-00058" num="00058">
<claim-text>58. A program product as defined in <claim-ref idref="CLM-00056">claim 56</claim-ref>, wherein the traffic load being carried by the other computer increases when one of the other computers in the distributed gateway cluster becomes unavailable, and in response reconfiguring the traffic load being handled by the other computers.</claim-text>
</claim>
<claim id="CLM-00059" num="00059">
<claim-text>59. A program product as defined in <claim-ref idref="CLM-00056">claim 56</claim-ref>, wherein operations are substantially unchanged after a reconfiguration of the address assignments, thereby making the reconfiguration transparent to a user.</claim-text>
</claim>
<claim id="CLM-00060" num="00060">
<claim-text>60. A program product as defined in <claim-ref idref="CLM-00058">claim 58</claim-ref>, wherein the operations of the data traffic controller include one or more computer application programs.</claim-text>
</claim>
<claim id="CLM-00061" num="00061">
<claim-text>61. A program product as defined in <claim-ref idref="CLM-00060">claim 60</claim-ref>, wherein the computer application program comprises a firewall program.</claim-text>
</claim>
<claim id="CLM-00062" num="00062">
<claim-text>62. A program product as defined in <claim-ref idref="CLM-00060">claim 60</claim-ref>, wherein the computer application program comprises a mail server program.</claim-text>
</claim>
<claim id="CLM-00063" num="00063">
<claim-text>63. A program product as defined in <claim-ref idref="CLM-00060">claim 60</claim-ref>, wherein the computer application program comprises a file server program.</claim-text>
</claim>
<claim id="CLM-00064" num="00064">
<claim-text>64. A program product as defined in <claim-ref idref="CLM-00055">claim 55</claim-ref>, wherein a computer begins communicating with a distributed gateway cluster of computers already communicating among themselves, thereby joining the distributed gateway cluster.</claim-text>
</claim>
<claim id="CLM-00065" num="00065">
<claim-text>65. A program product as defined in <claim-ref idref="CLM-00064">claim 64</claim-ref>, wherein the computers of the distributed gateway cluster recognize that a computer has a lower traffic load than the remaining computers of the distributed gateway cluster when the computer joins the cluster, and in response the computer assumes a portion of the traffic load from one or more of the computers in a process that dynamically reconfigures the traffic address assignments of the cluster.</claim-text>
</claim>
<claim id="CLM-00066" num="00066">
<claim-text>66. A program product as defined in <claim-ref idref="CLM-00064">claim 64</claim-ref>, wherein the computers detect when a new computer begins communicating with the cluster, thereby joining the cluster, and in response the computers perform a dynamic reconfiguration process to change one or more traffic address assignments to the new computer.</claim-text>
</claim>
<claim id="CLM-00067" num="00067">
<claim-text>67. A program product as defined in <claim-ref idref="CLM-00054">claim 54</claim-ref>, wherein a computer communicates by passing a group membership protocol word to the other computers along the subnet.</claim-text>
</claim>
<claim id="CLM-00068" num="00068">
<claim-text>68. A program product as defined in <claim-ref idref="CLM-00067">claim 67</claim-ref>, wherein the group membership protocol word includes node map configuration data indicating traffic assignments for each one of the computers in the distributed gateway cluster.</claim-text>
</claim>
<claim id="CLM-00069" num="00069">
<claim-text>69. A program product as defined in <claim-ref idref="CLM-00067">claim 67</claim-ref>, wherein the group membership protocol word includes data that indicates the traffic load being carried by each computer in the distributed gateway cluster.</claim-text>
</claim>
<claim id="CLM-00070" num="00070">
<claim-text>70. A program product as defined in <claim-ref idref="CLM-00054">claim 54</claim-ref>, wherein a computer can receive a user input that specifies a configuration or monitoring change for another computer, and can receive the user input from a remote user.</claim-text>
</claim>
<claim id="CLM-00071" num="00071">
<claim-text>71. A program product as defined in <claim-ref idref="CLM-00055">claim 55</claim-ref>, wherein the data traffic controller performs the dynamic reconfiguration of address assignments through a graphical user interface (GUI).</claim-text>
</claim>
<claim id="CLM-00072" num="00072">
<claim-text>72. A program product as defined in <claim-ref idref="CLM-00071">claim 71</claim-ref>, wherein the subnet virtual network addresses and traffic address assignments are graphically represented, and the reconfiguration of address assignments can be performed by a drag and drop action of traffic address assignments onto subnet virtual network addresses.</claim-text>
</claim>
<claim id="CLM-00073" num="00073">
<claim-text>73. A program product as defined in <claim-ref idref="CLM-00071">claim 71</claim-ref>, wherein the GUI includes a local status monitor indicator for the network interface.</claim-text>
</claim>
<claim id="CLM-00074" num="00074">
<claim-text>74. A program product as defined in <claim-ref idref="CLM-00071">claim 71</claim-ref>, wherein the GUI includes a local condition monitor indicator for the application program of the data traffic controller.</claim-text>
</claim>
<claim id="CLM-00075" num="00075">
<claim-text>75. A program product as defined in <claim-ref idref="CLM-00071">claim 71</claim-ref>, wherein the GUI includes a local condition monitor indicator for a ping communication utility.</claim-text>
</claim>
</claims>
</us-patent-grant>
