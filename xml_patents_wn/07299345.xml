<us-patent-grant lang="EN" dtd-version="v4.2 2006-08-23" file="US07299345-20071120.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20071106" date-publ="20071120">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>07299345</doc-number>
<kind>B2</kind>
<date>20071120</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>09966064</doc-number>
<date>20010928</date>
</document-id>
</application-reference>
<us-application-series-code>09</us-application-series-code>
<us-term-of-grant>
<us-term-extension>1146</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>15</main-group>
<subgroup>177</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>713  2</main-classification>
<further-classification>711102</further-classification>
</classification-national>
<invention-title id="d0e53">Reserved ROM space for storage of operating system drivers</invention-title>
<references-cited>
<citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5546585</doc-number>
<kind>A</kind>
<name>Soga</name>
<date>19960800</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5590288</doc-number>
<kind>A</kind>
<name>Castor et al.</name>
<date>19961200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6106396</doc-number>
<kind>A</kind>
<name>Alcorn et al.</name>
<date>20000800</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>6178503</doc-number>
<kind>B1</kind>
<name>Madden et al.</name>
<date>20010100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>6324627</doc-number>
<kind>B1</kind>
<name>Kricheff et al.</name>
<date>20011100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>6367074</doc-number>
<kind>B1</kind>
<name>Bates et al.</name>
<date>20020400</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>6385721</doc-number>
<kind>B1</kind>
<name>Puckette</name>
<date>20020500</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>6434695</doc-number>
<kind>B1</kind>
<name>Esfahani et al.</name>
<date>20020800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713  2</main-classification></classification-national>
</citation>
<citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>6442628</doc-number>
<kind>B1</kind>
<name>Bastiani et al.</name>
<date>20020800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>710 60</main-classification></classification-national>
</citation>
<citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>6606669</doc-number>
<kind>B1</kind>
<name>Nakagiri</name>
<date>20030800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>719327</main-classification></classification-national>
</citation>
<citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>6633905</doc-number>
<kind>B1</kind>
<name>Anderson et al.</name>
<date>20031000</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>6651165</doc-number>
<kind>B1</kind>
<name>Johnson</name>
<date>20031100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713  2</main-classification></classification-national>
</citation>
</references-cited>
<number-of-claims>16</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>713  1</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>713  2</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>713100</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>710  8</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>710 10</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>710300</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>710104</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>710306</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>711102</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>711103</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>711153</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>711173</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>719321</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>719327</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>3</number-of-drawing-sheets>
<number-of-figures>7</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20030065875</doc-number>
<kind>A1</kind>
<date>20030403</date>
</document-id>
</related-publication>
</us-related-documents>
<parties>
<applicants>
<applicant sequence="001" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Van Cleve</last-name>
<first-name>Robert E.</first-name>
<address>
<city>The Woodlands</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="002" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Dupree</last-name>
<first-name>Steven R.</first-name>
<address>
<city>The Woodlands</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="003" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Jones</last-name>
<first-name>Curtis R.</first-name>
<address>
<city>Cypress</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="004" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Cepulis</last-name>
<first-name>Darren J.</first-name>
<address>
<city>The Woodlands</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
</applicants>
</parties>
<assignees>
<assignee>
<addressbook>
<orgname>Hewlett-Packard Development Company, L.P.</orgname>
<role>02</role>
<address>
<city>Houston</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Du</last-name>
<first-name>Thuan</first-name>
<department>2116</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Disclosed is a system and related method for providing operating system drivers during installation of an operating system. In particular, the operating system drivers, that are not available with the operating system itself, are stored in unreserved ROM space. At an appropriate time during installation of the operating system, any needed or necessary drivers are copied from the ROM.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="161.54mm" wi="96.35mm" file="US07299345-20071120-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="244.69mm" wi="174.41mm" file="US07299345-20071120-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="239.44mm" wi="165.27mm" file="US07299345-20071120-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="181.36mm" wi="163.15mm" file="US07299345-20071120-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading>
<p id="p-0002" num="0001">This application is related to application Ser. No. 09/965,998 entitled “Semi-Persistent, Relocatable RAM-Based Virtual Floppy Disk for Providing Operating System Drivers,” filed concurrently herewith.</p>
<heading id="h-0002" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0003" num="0002">1. Field of the Invention</p>
<p id="p-0004" num="0003">The present invention relates generally to loading operating systems on computer or server systems. More particularly, the preferred embodiments of the present invention are directed to ensuring the availability of operating system drivers during the operating system installation process. More particularly still, the preferred embodiments of the present invention are directed to storing operating system drivers in unreserved ROM and making those drivers available during the installation of the operating system.</p>
<p id="p-0005" num="0004">2. Background of the Invention</p>
<p id="p-0006" num="0005">One of the first functions that must be performed before a computer or server system is ready for operation is installation of the operating system. In early computer systems, this involved loading the Disk Operating System (DOS) to make available the then-familiar “C:&gt;” prompt. For many years, DOS was the predominant operating system, even if another form of Graphical User Interface (GUI) was used. In recent years, however, software companies such as Microsoft, Inc. have created and are disseminating software that is not DOS-based. For example, Windows NT is an operating system and GUI in one package. Likewise, Windows 2000 is an operating system and GUI. These new systems communicate with hardware within the computer system by way of operating system or hardware drivers, rather than through traditional basic input/output system (BIOS) routines. During the process of installing these operating systems/user interfaces, it is required that proper drivers are installed for the hardware resident in the computer system.</p>
<p id="p-0007" num="0006">Although several software manufacturers make operating systems, e.g., Linux, Novell, and Windows, the problem of installing correct operating system drivers is inherent in each package. In particular, software manufacturers typically bundle, along with the programs that make up their operating system, every operating system driver available as of the release date. However, there may be many months or even years between the release of the operating system and manufacture of the hardware devices within the computer system. Thus, it is inevitable the drivers are needed that are not included with the operating system. Installing an operating system driver other than one of the drivers included with the operating system software typically involves finding the appropriate driver, either on the internet or on a CD ROM included with the computer system. This driver is then typically copied or “punched-out” to a floppy drive (on a second computer as the CD ROM on the computer involved in the installation process is most likely not operational). The floppy disk drive including the required operating system driver is then inserted into the floppy drive unit of the affected computer at the appropriate time during the installation process.</p>
<p id="p-0008" num="0007">While it is possible to install the correct operating system driver in this manner, it is seen from the above discussion that this is a complicated procedure. In the context of installing the operating system onto a server in a rack of servers, the situation gets more complex as each individual server may not have its own floppy drive; but rather, keyboard, video and floppy drive access may only be available across a communication bus.</p>
<p id="p-0009" num="0008">Thus, what is needed in the art is a way to provide, during the operating system installation, operating system drivers without requiring the user to punch-out floppy disk drives or search the internet via other computer devices to find the necessary drivers.</p>
<heading id="h-0003" level="1">BRIEF SUMMARY OF THE INVENTION</heading>
<p id="p-0010" num="0009">The problems noted above are solved in large part by a system and related method where operating system drivers necessary or needed for installation of the operating system, yet not provided with the operating system (possibly because the driver was developed after release of the operating system software) are preferably stored in unreserved ROM space in the computer system along with the basic input/output system (BIOS) routines. Operating system drivers provided in this manner are thus copied from the ROM at the appropriate time during the operating system installation procedure.</p>
<p id="p-0011" num="0010">Storing the operating system drivers in the unreserved ROM space has several facets in the preferred embodiments. In one implementation, the operating system drivers are appended to the end of the BIOS routines within each redundant portion of the ROM. In this way, there are two sets of duplicate operating system drivers. In a second aspect of storing the operating system drivers, the ROM is divided into redundant and non-redundant portions. The BIOS programs are stored, in a redundant fashion, in the redundant portion of the ROM, and the operating system drivers are stored in the non-redundant portion of the ROM. In a third aspect of how to store these operating system drivers, a single ROM is provided having a single copy of the BIOS, and a single copy of all provided operating system drivers. Once the necessary operating system drivers have been provided, a utility program preferably overwrites the operating system drivers on the ROM with a second copy of the BIOS program, thereby providing redundancy of the BIOS firmware.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0012" num="0011">For a detailed description of the preferred embodiments of the invention, reference will now be made to the accompanying drawings in which:</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 1</figref> shows a computer system of the preferred embodiment;</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 2</figref> shows, in block diagram form, the contents of a ROM of the prior art;</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 3</figref> shows, in block diagram form, the contents of a ROM of one of the embodiments of the present invention;</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 4</figref> shows, in block diagram form, the contents of a ROM of one embodiment of the present invention;</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 5</figref> shows, in block diagram form, the contents of a ROM of one embodiment of the invention, both before and after copying of the operating system drivers;</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 6</figref> shows, in block diagram form, the contents of a ROM of one embodiment of the invention having multiple floppy images contained thereon; and</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 7</figref> shows a virtual memory map of the preferred embodiments.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">NOTATION AND NOMENCLATURE</heading>
<p id="p-0020" num="0019">Certain terms are used throughout the following description and claims to refer to particular system components. As one skilled in the art will appreciate, computer companies may refer to a component by different names. This document does not intend to distinguish between components that differ in name but not function.</p>
<p id="p-0021" num="0020">In the following discussion and in the claims, the terms “including” and “comprising” are used in an open-ended fashion, and thus should be interpreted to mean “including, but not limited to . . . ”. Also, the term “couple” or “couples” is intended to mean either an indirect or direct electrical connection. Thus, if a first device couples to a second device, that connection may be through a direct electrical connection, or through an indirect electrical connection via other devices and connections.</p>
<p id="p-0022" num="0021">Throughout the specification and claims, the term read only memory (ROM) refers to integrated circuit memory devices. If other types of read only memory devices are the focus of the discussion, those will be referred to directly, e.g., compact disk ROM (CDROM) and the like. Thus, the term ROM, unless specifically limited, may be programmable read only memory (PROM), erasable programmable read only memory (EPROM), and the variants of EPROM such as ultra-violet erasable programmable read only memory (UVPROM) and electrically erasable programmable read only memory (EEPROM).</p>
<heading id="h-0006" level="1">DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS</heading>
<p id="p-0023" num="0022">Referring now to <figref idref="DRAWINGS">FIG. 1</figref>, computer system <b>100</b> in accordance with the preferred embodiment comprises at least one CPU <b>10</b>. Inasmuch as computer system <b>100</b> is preferably a server system, the computer system <b>100</b> may comprise multiple CPUs <b>10</b>A, <b>10</b>B, <b>10</b>C, <b>10</b>D arranged in a configuration where parallel computing may take place. The CPU array <b>10</b> couples to a main memory array <b>12</b> and a variety of other peripheral computer system components through an integrated host bridge logic device <b>14</b>. The CPU array <b>10</b> may comprise, for example, a plurality of Pentium® III microprocessors. It should be understood, however, that computer system <b>100</b> could include other alternative types and numbers of microprocessors. Additionally, other architectures could be used if desired. Thus, the computer system may implement other bus configurations and bus bridges in addition to, or in place of, those shown in <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0024" num="0023">The main memory array <b>12</b> preferably couples to the host bridge logic <b>14</b> through a memory bus <b>16</b>, and the host bridge logic <b>14</b> preferably includes a memory control unit (not shown) that controls transactions to the main memory <b>12</b> by asserting the necessary control signals during memory accesses. The main memory <b>12</b> functions as the working memory for the CPUs <b>10</b> and generally includes a conventional memory device or array of memory devices in which program instructions and data are stored. The main memory array <b>12</b> may comprise any suitable type of memory such as Dynamic Random Access Memory (DRAM) or any of the various types of DRAM devices such as Synchronous DRAM (SDRAM), Extended Data Output DRAM (EDO DRAM), or Rambus™ DRAM (RDRAM).</p>
<p id="p-0025" num="0024">Inasmuch as computer system <b>100</b> is preferably a server system, the computer system <b>100</b> may not have a dedicated display device. If the computer system has a dedicated display device, such a system could be implemented by coupling a video driver card to the host bridge <b>14</b> by way of an Advanced Graphics Port bus or other suitable type of bus. Alternatively, the video driver card could couple to the primary expansion bus <b>18</b> or one of the secondary expansion buses, for example, the PCI bus <b>20</b>. If the computer system has a dedicated display device, the video driver or graphic controller would couple to a display device. That display may comprise any suitable electronic display device upon which any image or text can be represented.</p>
<p id="p-0026" num="0025">The computer system <b>100</b> preferably comprises a second bridge logic device <b>22</b> that bridges the primary expansion bus <b>18</b> to various secondary buses including a low pin count (LPC) bus <b>24</b> and a peripheral component interconnect (PCI) bus <b>20</b>. In accordance with the preferred embodiment, the bridge device <b>36</b> is an Input/Output Controller Hub (ICH) manufactured by Intel Corporation. Although the ICH <b>22</b> of <figref idref="DRAWINGS">FIG. 1</figref> is shown only to support the LPC bus <b>24</b> and the PCI bus <b>20</b>, various other secondary buses may be supported by the ICH <b>22</b>. In the preferred embodiment shown in <figref idref="DRAWINGS">FIG. 1</figref>, the primary expansion bus <b>18</b> comprises a Hub-link bus which is a proprietary bus of the Intel Corporation. However, computer system <b>100</b> is not limited to any particular type of primary expansion bus, and thus other suitable buses may be used.</p>
<p id="p-0027" num="0026">Referring still to <figref idref="DRAWINGS">FIG. 1</figref>, a firmware hub <b>26</b> couples to the ICH <b>22</b> by way of the LPC bus <b>24</b>. The firmware hub <b>26</b> preferably comprises Read Only Memory (ROM) which contains software programs executable by the CPU array <b>10</b>. The software programs preferably include programs to implement basic input/output system (BIOS) commands, and instructions executed during and just after Power On Self Test (POST) procedures.</p>
<p id="p-0028" num="0027">A Super Input/Output controller <b>28</b> couples to the ICH <b>22</b> and controls many system functions including interfacing with various input and output devices such as keyboard <b>30</b>. The Super I/O controller <b>28</b> may further interface, for example, with a system pointing device such as a mouse <b>32</b>, various serial ports (not shown) and floppy drives (not shown). The Super I/O controller is often referred to as “super” because of the many I/O functions it may perform.</p>
<p id="p-0029" num="0028">Also shown in the computer system <b>100</b> of <figref idref="DRAWINGS">FIG. 1</figref> are three array controllers <b>50</b>A, <b>50</b>B, <b>50</b>C coupled to the ICH <b>22</b> by way of the PCI bus <b>20</b>. Each array controller <b>50</b> couples to a plurality of hard drives <b>52</b>A, <b>52</b>B, <b>52</b>C. Thus, the array controller <b>50</b> preferably performs data reads, data writes and other necessary data manipulation to implement a redundant array of independent devices (RAID) system. It will be understood that while <figref idref="DRAWINGS">FIG. 1</figref> shows only three array controllers <b>50</b>, computer system <b>100</b> may support any number of these controllers. It must be understood however that the invention is not limited to computer systems having multiple CPUs or implementing RAID systems; rather, the preferred embodiments apply equally to all types of computer systems.</p>
<p id="p-0030" num="0029">The preferred embodiments of the present invention address how to provide operating system drivers during the operating system installation process. In particular, the preferred embodiments of the present invention provide necessary operating system drivers by placing or storing those drivers in the ROM or firmware hub <b>26</b>. Preferably, required or needed operating system drivers may simply be copied from those versions resident in the system ROM <b>26</b> during the operating system installation procedure.</p>
<p id="p-0031" num="0030">In computer systems requiring high availability and reliability, e.g., server systems, it is common to have multiple copies of the BIOS firmware or programs stored in the system ROM <b>26</b>. <figref idref="DRAWINGS">FIG. 2</figref> shows a prior art technique for having multiple copies that simply involves burning two copies of the BIOS programs onto the ROM <b>26</b>. In particular, <figref idref="DRAWINGS">FIG. 2</figref> shows two copies of the BIOS, with the first copy occupying the first 512 kilobytes of the ROM, and the second copy occupying the second 512 kilobytes of the one megabyte ROM. As one of ordinary skill in the art is aware, most computer and server systems have a smaller ROM known as a “boot-block” ROM (not shown) that is responsible for selecting which of the multiple copies of the BIOS will be loaded during the POST procedure.</p>
<p id="p-0032" num="0031">Placing operating system drivers in the ROM <b>26</b> may take many forms. <figref idref="DRAWINGS">FIG. 3</figref> shows one embodiment in which the operating system drivers (labeled OSD in the drawing) are placed within each redundant section of the ROM <b>26</b>. At the appropriate time during the operating system installation procedure, either or both of the drivers stored on the ROM <b>26</b> would be made available for copying and use by the operating system. A preferred embodiment for making those operating system drivers available is discussed more fully below.</p>
<p id="p-0033" num="0032">Operating system drivers range in complexity, and therefore range in size, with some drivers approaching 100 kilobytes or more. In a situation where the drivers are large, the implementation shown in <figref idref="DRAWINGS">FIG. 3</figref> would not be desirable inasmuch as the operating system drivers would occupy significant space in the ROM (especially given the duplication). Conversely, if the operating system drivers to be provided on the ROM <b>26</b> are relative small, the implementation exemplified in <figref idref="DRAWINGS">FIG. 3</figref> may be acceptable.</p>
<p id="p-0034" num="0033">Where the operating system drivers are large, or a number of drivers must be provided, the preferred embodiments provide for storing those operating system drivers in a non-redundant area of the ROM <b>26</b>. <figref idref="DRAWINGS">FIG. 4</figref> shows an implementation where a larger, preferably two megabyte, ROM is used. Preferably, the ROM is divided up into redundant <b>30</b> and non-redundant <b>32</b> space. In <figref idref="DRAWINGS">FIG. 4</figref>, the redundant space is shown to occupy the first one megabyte of the ROM <b>26</b>, and the non-redundant space, containing the operating system drivers, is shown to occupy the second one megabyte. It must be understood, however, that division of the ROM <b>26</b> of <figref idref="DRAWINGS">FIG. 4</figref> is only exemplary, and the storage space of the ROM <b>26</b> may be divided in any convenient way. Using the implementation exemplified in <figref idref="DRAWINGS">FIG. 4</figref>, a boot-block program stored on a boot-block ROM (not shown), selects one of the two BIOS firmware copies stored in the redundant area <b>30</b> of the ROM <b>26</b>. Thereafter, and at the appropriate time during the operating system installation procedure, the operating system drivers located in the non-redundant area <b>32</b> of the ROM are made available.</p>
<p id="p-0035" num="0034">In the exemplary implementation of storing operating system drivers on the ROM <b>26</b> as shown in <figref idref="DRAWINGS">FIG. 4</figref>, the size of the ROM <b>26</b> was increased from one megabyte to two megabytes, such that the duplicate copies of the BIOS and the operating system drivers could reside on a single ROM device. However, increasing the size of the ROM <b>26</b> also increases system cost. For this reason, some manufacturers may not want to spend the additional money to provide the larger ROMs, but still may want to provide redundant copies of the BIOS and also provide copies of the operating system drivers on the ROM.</p>
<p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. 5</figref> shows one possible implementation for providing both the redundant BIOS and the operating system drivers on the ROM. In particular, the upper ROM <b>26</b> is shown to have a single copy of the BIOS programs, as well as a copy of the operating system drivers. Preferably, the ROM <b>26</b> has this configuration as it leaves the factory and during the operating system installation procedure. The program stored in the boot block ROM (not shown) determines whether the ROM contents are BIOS programs or operating system drivers by use of signatures in the BIOS firmware that identify the programs. Preferably, once the operating system drivers have been provided during installation of the operating system, a utility program copies the BIOS, provided only in non-redundant fashion initially, to the second half of the ROM <b>26</b>. By copying the BIOS over the operating system drivers, a redundant BIOS system is provided, as shown in the lower ROM <b>26</b> of <figref idref="DRAWINGS">FIG. 5</figref>. While this implementation provides both the redundant BIOS, after operating system installation, and also provides operating system drivers on the ROM, the operating system drivers are overwritten and thus will not be available if the operating system must be installed again.</p>
<p id="p-0037" num="0036">While there may be many ways to implement making the operating system drivers stored on the ROM <b>26</b> available during the operating system installation procedure, the Applicants now endeavor to describe the preferred method. Making the operating system drivers available has three aspects in the preferred embodiment: 1) providing the latest drivers for each major operating system; 2) making those drivers available to the user during installation of the operating system by use of a virtual disk drive; and 3) providing those operating system drivers in a virtual drive scheme with the system drivers residing in RAM.</p>
<p id="p-0038" num="0037">As discussed in the Background section, there are many available operating systems for computers in the marketplace, e.g., Linux (manufactured by Red Hat Software), Novell (manufactured by Novell Incorporated), Windows 2000 (manufactured by Microsoft Inc.). For a particular piece of hardware in the system, e.g., an array controller <b>50</b> (<figref idref="DRAWINGS">FIG. 1</figref>), each operating system may require a different driver. This may be due in part to differences in protocols with regard to interfacing with the operating system, but may also be caused merely by differences in file structures between operating systems. Stated otherwise, a driver for operating an array controller <b>50</b> in a Windows 2000 environment (FAT file system) may not be suitable for use in a Linux environment (2×72 file system). Thus, in the preferred embodiment, if drivers need to be included on the system ROM <b>26</b>, preferably drivers for each of the major operating systems are provided. Considering that there may be an array of devices for which the latest operating system driver may be provided, it is easily seen that the amount of space on the ROM <b>26</b> required to store each driver for each hardware system may become rather large. In this regard, the implementation shown in <figref idref="DRAWINGS">FIG. 4</figref> for dividing the ROM <b>26</b> into a redundant <b>30</b> and non-redundant <b>32</b> portion is the preferred implementation.</p>
<p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. 6</figref> exemplifies the situation where multiple sets of operating system drivers are provided. In particular, <figref idref="DRAWINGS">FIG. 6</figref> shows that the non-redundant <b>32</b> space of the ROM <b>26</b> contains several sets of drivers, in the exemplary system, a set of Linux drivers <b>34</b>, Novell drivers <b>36</b> and Windows drivers <b>38</b>. It must be understood that providing these particular drivers is only exemplary, and any number of drivers for any number of operating systems may be provided and still be within the contemplation of this invention. Further, <figref idref="DRAWINGS">FIG. 6</figref> implies that the operating system drivers occupy the entire non-redundant <b>32</b> space of the ROM <b>26</b>; however, this need not necessarily be the case, and any or all of the non-redundant <b>32</b> space may be used to store the operating system drivers.</p>
<p id="p-0040" num="0039">In the preferred embodiment described above, a set of operating system drivers (<b>34</b>, <b>36</b>, <b>38</b> of <figref idref="DRAWINGS">FIG. 6</figref>), which may alternatively be referred to as floppy images, are provided in the ROM <b>26</b>. These multiple sets of operating system drivers are provided to account for the fact that a manufacturer may not know at the time of building the computer system what operating system will be installed thereon. Since multiple sets of operating system drivers are preferably provided, there should be a method of providing the correct drivers for the particular operating system. In the preferred embodiments, making available the correct operating system drivers for the operating system is preferably accomplished by a BIOS setup parameter and a modification to the standard disk access routine known as Interrupt <b>13</b><i>h. </i></p>
<p id="p-0041" num="0040">In the preferred embodiment the BIOS setup routines are modified to contain a field where a user, when making an initial setup of the BIOS, selects which operating system is to be installed on the computer or server. It must be understood that this selection in the BIOS is not a part of the operating system installation procedure; but rather, is merely a mechanism to inform the BIOS which operating system is to be installed. Preferably, the BIOS uses this information to select an appropriate floppy image having a set of operating system drivers from the images stored in the non-redundant <b>32</b> space of the ROM <b>26</b>. For example, if a user selects from the BIOS setup screen that Windows 2000 will be the operating system for the computer, the BIOS then makes available, in a manner described more fully below, the floppy image containing Windows operating system drivers <b>38</b> (see <figref idref="DRAWINGS">FIG. 6</figref>).</p>
<p id="p-0042" num="0041">While there may be many ways to make the particular operating system drivers available during the operating system installation process, in the preferred embodiments, those drivers are made available to the user and to the operating system installation procedure by having them reside on a virtual floppy drive or virtual disk drive. More particular, in the preferred embodiment, the Interrupt <b>13</b><i>h </i>BIOS calls for performing disk drive activities are preferably implemented such that the operating system drivers (either all of them or just the appropriate drivers for the particular operating system) stored on the ROM <b>26</b> appear to reside on a disk drive. Because the files are not actually stored on a floppy disk, this is known as creating a virtual drive. As mentioned above, the user preferably selects in a BIOS setup screen which operating system is to be installed on the computer system, and based on that selection, preferably only the drivers appropriate for the selected operating system are made available in this virtual drive method.</p>
<p id="p-0043" num="0042">More particularly still, in the preferred embodiment, selecting a particular operating system to be installed preferably sets an environment variable in a non-volatile memory. This non-volatile memory could be non-volatile RAM (NVRAM), or may be written directly to the ROM <b>26</b>, which in the preferred embodiment is electrically erasable programmable read only memory (EEPROM). Regardless of the location of the environment variables, by selecting an operating system, the environment variables preferably point to a floppy image having operating system drivers appropriate for that operating system. During the installation process, before the operating system is installed, disk services are provided by the BIOS. Thus, during installation, the Interrupt <b>13</b><i>h </i>services preferably are adapted to show the appropriate operating system drivers, indicated by the environment variables, as residing on a disk drive. Thus, drivers needed for correct setup during the operating system installation process are then available as if they had been copied to a floppy and Inserted in a disk drive in the system. Using the preferred embodiment alone, it is then possible to provide the operating system drivers during the operation system installation process by informing the Installation program of the need to use drivers different than those provided with the operating system, and pointing that operating system software to the virtual drive. However, now understanding how to make available software drivers in the manner of the preferred embodiment, one of ordinary skill in the art could easily modfly the installation program to automatically search for and use drivers resident on virtual drives with little or no user input.</p>
<p id="p-0044" num="0043">Referring now to <figref idref="DRAWINGS">FIG. 7</figref>, there is shown an exemplary virtual address space or virtual memory map for the computer or server system of the preferred embodiment. As one of ordinary skill in the art is aware, the ROM <b>26</b> contents are typically mapped in the virtual address space to a location having addresses just below the four gigabyte addressable space. In this way, the system devices wishing to access the ROM contents need only know the addresses of those ROM contents in the virtual address space. As exemplified in <figref idref="DRAWINGS">FIG. 7</figref>, the virtual address space includes not only the floppy images having the operating system drivers <b>34</b>, <b>36</b> and <b>38</b>, but also includes all the addressable space for the random access memory (RAM), the RAM area. Thus, in the preferred embodiment, when the user selects the particular operating system to be installed in the BIOS setup screens, the BIOS preferably updates an environment variable which points, in the virtual address space, to the operating system drivers appropriate for that operating system to be installed. Sometime thereafter, when performing disk accesses using the BIOS subroutines, the installation process requests an operating system driver from a virtual drive. The Interrupt <b>13</b><i>h </i>services provide the operating system drivers available at the location indicated by the environment variables as if those drivers were provided on an actual floppy drive.</p>
<p id="p-0045" num="0044">It is noted, however, that the mapping of the possible operating system drivers <b>34</b>, <b>36</b> and <b>38</b> are within the same virtual address space as the random access memory (<figref idref="DRAWINGS">FIG. 7</figref>). In another aspect of the invention, information and data may be provided to the operating system by use of a virtual disk drive, where the contents of that virtual disk drive resides in the RAM area <b>62</b> portion of the virtual memory rather than one of the operating system drivers, again within the virtual address space. Data and programs placed in a virtual drive with its contents stored in RAM would be semi-persistent, meaning that the data would survive and be available after a warm boot, for example an warm boot initiated by an Interrupt <b>19</b><i>h. </i></p>
<p id="p-0046" num="0045">While creating a virtual disk drive resident in RAM and accessible through BIOS interrupts was developed in the context of providing operating system drivers during operating system installation procedures, any data or programs which need to be made available in a semi-persistent manner may be provided in this way, and still be within the contemplation of the invention.</p>
<p id="p-0047" num="0046">The above discussion is meant to be illustrative of the principles and various embodiments of the present invention. Numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. For example, the preferred embodiments have been described with regard to placing the operating system drivers on the same ROM as the BIOS programs; however, the ROM provided in the computer system could be a ROM array comprising several individual ROM devices, and the operating system software could reside on any or all of the ROM devices, and still be within the contemplation of this invention. Further, providing operating system drivers in the manner described herein was developed in the context of server systems having multiple microprocessors and multiple hard drives implementing RAID systems; however, one of ordinary skill in the art, now understanding how to implement and use the preferred embodiments, could easily apply the preferred embodiments to stand alone computer systems having only a single microprocessor and single hard drive. Further, the systems and methods described herein are equally applicable to most computing devices such as hand-held computing devices, portable computers, process control systems, and the like. It is intended that the following claims be interpreted to embrace all such variations and modifications.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A computer system comprising:
<claim-text>a CPU;</claim-text>
<claim-text>a main memory array coupled to the CPU;</claim-text>
<claim-text>a read only memory (ROM) coupled to the CPU, wherein the ROM further comprises:
<claim-text>a first set of BIOS programs associated with a first set of operating system drivers; and</claim-text>
<claim-text>a second set of BIOS programs associated with a second set of operating system drivers;</claim-text>
</claim-text>
<claim-text>wherein at least one operating system driver of the first set of operating system drivers is read from the ROM during installation of an operating system for the computer system.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The computer system as defined in <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the first and second sets of BIOS programs are substantially identical.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The computer system as defined in <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the first and second sets of operating system drivers are substantially identical.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The computer system as defined in <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the ROM further comprises an electrically erasable programmable read only memory.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. A computer system comprising:
<claim-text>a CPU;</claim-text>
<claim-text>a main memory array coupled to the CPU;</claim-text>
<claim-text>a read only memory (ROM) coupled to the CPU, wherein the ROM further comprises:
<claim-text>a redundant portion; and</claim-text>
<claim-text>a non-redundant portion;</claim-text>
<claim-text>wherein the redundant portion of the ROM stores a first set of BIOS programs and a second set of BIOS programs; and</claim-text>
<claim-text>wherein the non-redundant portion of the ROM stores a first set of operating system drivers; and</claim-text>
</claim-text>
<claim-text>wherein at least one operating system driver of the first set of operating system drivers is read from the ROM during installation of an operating system for the computer system.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The computer system as defined in <claim-ref idref="CLM-00005">claim 5</claim-ref> wherein the first and second set of BIOS programs are substantially identical.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The computer system as defined in <claim-ref idref="CLM-00005">claim 5</claim-ref> wherein the ROM further comprises an electrically erasable programmable read only memory.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The computer system as defined in <claim-ref idref="CLM-00005">claim 5</claim-ref> further comprising:
<claim-text>wherein the ROM further comprises an electrically erasable programmable read only memory (EEPROM); and</claim-text>
<claim-text>wherein the EEPROM stores two substantially identical copies of the BIOS programs after installation of the operating system.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. A method comprising:
<claim-text>storing a first copy of a basic input output system (BIOS) program in a ROM device of a computer system;</claim-text>
<claim-text>storing a first copy hardware drivers in the ROM associated with the first copy of the BIOS program;</claim-text>
<claim-text>storing a second copy of the BIOS program in the ROM; and</claim-text>
<claim-text>storing a second copy of the hardware drivers in the ROM associated with the second copy of the BIOS program.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. A method comprising:
<claim-text>storing a basic input output system (BIOS) program being a first BIOS program in an electrically erasable programmable read only memory (EEPROM) of a computer system;</claim-text>
<claim-text>storing hardware drivers in the EEPROM;</claim-text>
<claim-text>copying one or more hardware drivers from the EEPROM;</claim-text>
<claim-text>erasing the hardware drivers from the EEPROM after the one or more hardware drivers have been copied; and</claim-text>
<claim-text>flashing a second BIOS program to the EEPROM in place of the hardware drivers.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method as defined in <claim-ref idref="CLM-00010">claim 10</claim-ref> wherein the second BIOS program is substantially the same as the first BIOS program.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. A computer system comprising:
<claim-text>a microprocessor,</claim-text>
<claim-text>a main memory array coupled to the microprocessor,</claim-text>
<claim-text>a read only memory (ROM) coupled to the microprocessor,and</claim-text>
<claim-text>wherein the ROM further comprises:
<claim-text>a redundant portion; and</claim-text>
<claim-text>a non-redundant portion;</claim-text>
<claim-text>wherein the redundant portion of the ROM stores a first set and a second set of BIOS programs; and</claim-text>
<claim-text>wherein the non-redundant portion of the ROM stores operating system drivers for a plurality of different operating systems;</claim-text>
</claim-text>
<claim-text>wherein at least one of the operating system drivers is read from the ROM during installation of an operating system for the computer system.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The computer system as defined in <claim-ref idref="CLM-00012">claim 12</claim-ref> wherein the first and second sets of BIOS programs are substantially the same.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The computer system as defined in <claim-ref idref="CLM-00013">claim 13</claim-ref> wherein the ROM further comprises an electrically erasable programmable read only memory.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. A method comprising:
<claim-text>dividing an electrically erasable programmable read only memory (EEPROM) into a redundant and non-redundant portions;</claim-text>
<claim-text>storing in the redundant portion of the EEPROM a first set of basic input output system (BIOS) programs and a second set of BIOS programs; and</claim-text>
<claim-text>storing in the non-redundant portion of the EEPROM operating system drivers.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The method as defined in <claim-ref idref="CLM-00015">claim 15</claim-ref> wherein the first set of BIOS programs and the second set of BIOS programs are substantially the same.</claim-text>
</claim>
</claims>
</us-patent-grant>
