<us-patent-grant lang="EN" dtd-version="v4.2 2006-08-23" file="US07299487-20071120.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20071106" date-publ="20071120">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>07299487</doc-number>
<kind>B1</kind>
<date>20071120</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>10010923</doc-number>
<date>20011204</date>
</document-id>
</application-reference>
<us-application-series-code>10</us-application-series-code>
<us-term-of-grant>
<us-term-extension>1613</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>H</section>
<class>04</class>
<subclass>N</subclass>
<main-group>7</main-group>
<subgroup>173</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>725 93</main-classification>
<further-classification>725 87</further-classification>
<further-classification>725 91</further-classification>
<further-classification>725 92</further-classification>
<further-classification>725 94</further-classification>
<further-classification>725 95</further-classification>
<further-classification>725 96</further-classification>
<further-classification>725 97</further-classification>
<further-classification>725114</further-classification>
<further-classification>725115</further-classification>
<further-classification>725116</further-classification>
<further-classification>725117</further-classification>
<further-classification>725138</further-classification>
<further-classification>725144</further-classification>
<further-classification>725145</further-classification>
<further-classification>725146</further-classification>
<further-classification>725147</further-classification>
<further-classification>370486</further-classification>
<further-classification>370487</further-classification>
<further-classification>370488</further-classification>
<further-classification>370489</further-classification>
<further-classification>370490</further-classification>
<further-classification>370535</further-classification>
<further-classification>370442</further-classification>
<further-classification>709227</further-classification>
<further-classification>709228</further-classification>
<further-classification>709229</further-classification>
<further-classification>709230</further-classification>
<further-classification>709231</further-classification>
<further-classification>709232</further-classification>
<further-classification>709233</further-classification>
<further-classification>709234</further-classification>
<further-classification>709235</further-classification>
<further-classification>709236</further-classification>
<further-classification>709237</further-classification>
<further-classification>709238</further-classification>
<further-classification>709239</further-classification>
<further-classification>709240</further-classification>
<further-classification>709241</further-classification>
<further-classification>709242</further-classification>
<further-classification>709243</further-classification>
<further-classification>709244</further-classification>
<further-classification>709245</further-classification>
</classification-national>
<invention-title id="d0e53">Control program, for a co-processor in a video-on-demand system, which uses transmission control lists to send video data packets with respective subgroups of internet protocol headers</invention-title>
<references-cited>
<citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5687275</doc-number>
<kind>A</kind>
<name>Lane et al.</name>
<date>19971100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>386 68</main-classification></classification-national>
</citation>
<citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5864557</doc-number>
<kind>A</kind>
<name>Lyons</name>
<date>19990100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370444</main-classification></classification-national>
</citation>
<citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6167445</doc-number>
<kind>A</kind>
<name>Gai et al.</name>
<date>20001200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709223</main-classification></classification-national>
</citation>
<citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>6381746</doc-number>
<kind>B1</kind>
<name>Urry</name>
<date>20020400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>725 87</main-classification></classification-national>
</citation>
<citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>6760917</doc-number>
<kind>B2</kind>
<name>De Vos et al.</name>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>725 94</main-classification></classification-national>
</citation>
</references-cited>
<number-of-claims>11</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>725 87</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>725 91- 97</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>725114-117</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>725138</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>725144-147</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>370486-490</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>370535</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>370442</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709227-245</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>10</number-of-drawing-sheets>
<number-of-figures>10</number-of-figures>
</figures>
<parties>
<applicants>
<applicant sequence="001" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Campbell</last-name>
<first-name>Kent M.</first-name>
<address>
<city>Salt Lake City</city>
<state>UT</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="002" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Jacobs</last-name>
<first-name>Robert Louis</first-name>
<address>
<city>Sandy</city>
<state>UT</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="003" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Ulis</last-name>
<first-name>John Waldimars</first-name>
<address>
<city>Sandy</city>
<state>UT</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="004" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Bates</last-name>
<first-name>Stephen Ralph</first-name>
<address>
<city>Salt Lake City</city>
<state>UT</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="005" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Harsch</last-name>
<first-name>Thomas Charles</first-name>
<address>
<city>Salt Lake City</city>
<state>UT</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
</applicants>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<last-name>Johnson</last-name>
<first-name>Charles A.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="02" rep-type="attorney">
<addressbook>
<last-name>Marley</last-name>
<first-name>Robert</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="03" rep-type="attorney">
<addressbook>
<last-name>Fassbender</last-name>
<first-name>Cahrles</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</parties>
<assignees>
<assignee>
<addressbook>
<orgname>Unisys Corporation</orgname>
<role>02</role>
<address>
<city>Blue Bell</city>
<state>PA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Salce</last-name>
<first-name>Jason</first-name>
<department>2623</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A control program for a co-processor in a video-on-demand system directs the co-processor to perform the steps of: a) obtain a transmission control list, from an external source, which identifies a group of several video data packets and a respective subgroup of internet protocol headers for each video data packet in the group; b) partition into pieces, each video data packet and its respective subgroup of internet protocol headers as identified by the transmission control list; and, c) send the partitioned pieces, along with an additional header for each piece, to an output port during a series of spaced apart time intervals.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="175.68mm" wi="255.69mm" file="US07299487-20071120-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="257.39mm" wi="176.19mm" orientation="landscape" file="US07299487-20071120-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="236.98mm" wi="168.99mm" file="US07299487-20071120-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="249.51mm" wi="174.07mm" orientation="landscape" file="US07299487-20071120-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="236.56mm" wi="158.41mm" orientation="landscape" file="US07299487-20071120-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="247.14mm" wi="150.45mm" orientation="landscape" file="US07299487-20071120-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="227.25mm" wi="163.75mm" file="US07299487-20071120-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="256.37mm" wi="163.49mm" file="US07299487-20071120-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="197.10mm" wi="156.63mm" file="US07299487-20071120-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="244.18mm" wi="169.84mm" orientation="landscape" file="US07299487-20071120-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="264.58mm" wi="177.38mm" orientation="landscape" file="US07299487-20071120-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">RELATED CASES</heading>
<p id="p-0002" num="0001">The present invention, as identified by the above docket number and title, is related to two other inventions, which are described herein with one common Detailed Description. These two related inventions are identified as entitled “VIDEO-ON-DEMAND SYSTEM WHICH BUILDS TRANSMISSION CONTROL LISTS AND USES SUCH LISTS TO SEND VIDEO DATA PACKETS WITH RESPECTIVE SUBGROUPS OF INTERNET PROTOCOL HEADERS”, having U.S. Ser. No. 10/010,909; and entitled “CONTROL PROGRAM, FOR A SUPERVISOR PROCESSOR IN A VIDEO-ON-DEMAND SYSTEM, WHICH BUILDS SUBGROUPS OF INTERNET PROTOCOL HEADERS AND TRANSMISSION CONTROL LISTS”, having U.S. Ser. No. 10/010,899. Patent applications on all three inventions were filed concurrently in the U.S. Patent Office on Dec. 4, 2001.</p>
<heading id="h-0002" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0003" num="0002">This invention relates to video-on-demand systems which send multiple streams of video data to respective viewers. In the prior art, one such video-on-demand system is described in U.S. patent application Ser. No. 09/318,987 by Urry which is entitled “Scaleable Video System Having Shared Control Circuits For Sending Multiple Video Streams To Respective Sets of Viewers” (hereafter the Urry video-on-demand system).</p>
<p id="p-0004" num="0003">Included in the Urry video-on-demand system are the following components: a) a single supervisor processor, and multiple co-processors which are selectable in number and are coupled via a bus to the single supervisor processor; b) a supervisor memory which is coupled to the supervisor processor and which stores a respective portion of each of several video streams; c) a control program for each co-processor which selectively reads the stored video stream portions from the supervisor memory and sends each video stream portion that is read to a different viewer; and d) a control program for the single supervisor processor, which dynamically updates the stored portion of each video stream in the supervisor memory and which services external requests to change the respective viewers of each video stream.</p>
<p id="p-0005" num="0004">One particular feature of the Urry video-on-demand system is that it is highly scaleable and economical. This feature is achieved because the number of co-processors is selectable; the number of video streams which are sent by each co-processor is selectable; and, the number of viewers per steam is selectable. By making these selections, the Urry video-on-demand system can be increased or decreased in size to meet the different requirements of many customers. Further, since the Urry video-on-demand system includes only a single supervisor processor and a single supervisor memory which operate in a shared fashion with all of the co-processors, the cost of those items is incurred only once.</p>
<p id="p-0006" num="0005">However, a drawback of the Urry video-on-demand system is that to receive and show a video at the display device of any one viewer, that display device must be coupled to a transmission network thru a particular type of set-top box which has an ATM interface (asynchronous transfer mode interface) to the network. This is evident from Urry's <figref idref="DRAWINGS">FIG. 4</figref> which shows that each video stream to the transmission network is sent during a series a spaced-apart time slots, with “K” bytes of video data and a network address of the viewer being sent in each time slot. A video stream with such a transmission format can only be received by a set-top box which has an ATM input interface. However, several other types of set-top boxes do exist; and a potential viewer who would like to connect to the Urry video-on-demand system might have one of those other types of set-top boxes. For example, one other type of set-top box has an “ethernet” interface to a transmission network; another type of set-top box has a “DSL” interface to a transmission network; and still another type of set-top box has a “fiber channel” interface to a transmission network.</p>
<p id="p-0007" num="0006">Also, another drawback of the Urry video-on-demand system is that the transmission network, which carries the video streams from the output of the co-processors to all of the set-top boxes, must be an ATM switching network. This is because only an ATM switching network is designed to carry video streams with the above described format that is generated by Urry's <figref idref="DRAWINGS">FIG. 4</figref>. However, in certain locations where a potential viewer would like to connect to the Urry video-on-demand system, an ATM switching network may not be available.</p>
<p id="p-0008" num="0007">Accordingly, a primary object of the present invention is to provide an improved video-on-demand system which avoids both of the above drawbacks.</p>
<heading id="h-0003" level="1">BRIEF SUMMARY OF THE INVENTION</heading>
<p id="p-0009" num="0008">The present invention, as claimed, is a control program for a co-processor in a video-on-demand system. This control program is embodied in a program storage device that is readable by the co-processor, and it directs the co-processor to perform the steps of: a) obtain a transmission control list, from an external source, which identifies a group of several video data packets and a respective subgroup of internet protocol headers for each video data packet in the group; b) partition into pieces, each video data packet and its respective subgroup of internet protocol headers as identified by the transmission control list; and, c) send the partitioned pieces, along with an additional header for each piece, to an output port during a series of spaced apart time intervals. In one embodiment, the additional header is an ATM header.</p>
<p id="p-0010" num="0009">The above co-processor control program has use in a video-on-demand system in which the co-processor is coupled via a bus to a supervisor processor; and, each processor has a respective memory. In such a system, the co-processor performs the above steps a), b), and c); and the supervisor processor a) transfers a group of video data packets, from an externally stored complete video into the supervisor memory; b) builds, in the supervisor memory, a respective subgroup of internet protocol headers for each video data packet in the group; and, c) constructs, in the co-processor memory, the transmission control list which indicates how each video data packet in the group, and its respective subgroup of internet protocol headers, can be accessed from the supervisor memory by the co-processor.</p>
<p id="p-0011" num="0010">A major feature of the above video-on-demand system is the ease with which the system can be connected to by any potential viewer. This ease in connectivity is achieved by coupling the output port of the co-processor to the internet thru an internet router which has an ATM input interface, and coupling the display device of each viewer to the internet thru a respective set-top box. Each set-top box can have any type of interface to the internet. For example, one set-top box can have an DSL interface; another set-top box can have an Ethernet interface; another set-top box can have a fiber channel interface, and another set-top box can have an ATM interface. These different types of set-top boxes will all work because the internet router with its ATM interface will strip off the ATM header that it receives with each partitioned piece from the co-processor, and will use the respective subgroups of internet protocol headers to deliver the corresponding video data packets to the set-top boxes.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 1</figref> shows an overview of a video-on-demand system that is one preferred embodiment of the present invention.</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 2</figref> shows additional details of a co-processor, a scheduler, and a co-processor memory that are in the <figref idref="DRAWINGS">FIG. 1</figref> video-on-demand system.</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 3</figref> shows additional details of a transmission control list, video data packets, and subgroups of internet protocol headers that are in the <figref idref="DRAWINGS">FIG. 1</figref> video-on-demand system.</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 4</figref> shows the format in which the video data packets of <figref idref="DRAWINGS">FIG. 3</figref> and one subgroup of internet protocol headers are sent by the co-processor of <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 5</figref> shows the complete internal make-up of one subgroup of internet protocol headers in <figref idref="DRAWINGS">FIG. 4</figref>.</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 6</figref> shows the details of a control program for the co-processor that is in the video-on-demand system of <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 7</figref> shows the details of a control program for a supervisor processor that is in the video-in-demand system of <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 8</figref> shows the details of a control program for a host processor that is in the video-on-demand system of <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 9</figref> shows an alternative embodiment for the transmission control list of <figref idref="DRAWINGS">FIG. 3</figref>.</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 10</figref> shows three alternative embodiments for the headers in <figref idref="DRAWINGS">FIGS. 4 and 5</figref>.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0022" num="0021">With reference now to <figref idref="DRAWINGS">FIGS. 1-8</figref>, one preferred embodiment of the present invention will be described. Beginning with <figref idref="DRAWINGS">FIG. 1</figref>, it shows a video-on-demand system which includes a host processor <b>1</b>, a supervisor processor <b>10</b>, and a selectable number of co-processors. Only one co-processor <b>20</b>-<b>1</b> is shown in <figref idref="DRAWINGS">FIG. 1</figref> as an example. The host processor <b>1</b> is coupled to the supervisor processor <b>10</b> by a time-shared bus <b>2</b>, and the supervisor processor <b>10</b> is coupled to each co-processor by another time-shared bus <b>11</b>.</p>
<p id="p-0023" num="0022">Coupled to the host processor <b>1</b>, via the bus <b>2</b>, is a digital random access memory <b>3</b>; and stored within that memory <b>3</b> are several items <b>4</b>, <b>5</b>A, <b>5</b>B, and <b>6</b>. Item <b>4</b> is a control program for the host processor <b>1</b>. This control program <b>4</b> directs the host processor <b>1</b> to perform various steps that will be described in detail later in conjunction with <figref idref="DRAWINGS">FIG. 8</figref>.</p>
<p id="p-0024" num="0023">Item <b>5</b>A is one complete video (called video-A) which any viewer V(i) can request to see on his display device TV(i). Item <b>5</b>B is another complete video (called video-B) that can be requested by any viewer V(i). Additional complete videos, that can be requested by any viewer, may also be stored within the memory <b>3</b>; and this is indicated by the three dots after video-B.</p>
<p id="p-0025" num="0024">Item <b>6</b> is a queue that is used by the host processor <b>1</b> to receive various requests from any viewer V(i) and from the supervisor processor <b>10</b>. The requests from a viewer include a request to start being sent a particular video, and a request to stop being sent that same video. Each of these requests is processed by the host control program <b>4</b>.</p>
<p id="p-0026" num="0025">Coupled to the supervisor processor <b>10</b>, via the bus <b>2</b> and the bus <b>11</b>, is a digital random access memory <b>12</b>; and stored with that memory <b>12</b> are several items <b>13</b>, <b>14</b>, <b>15</b> and <b>16</b>. Item <b>13</b> is a control program which directs the supervisor processor <b>10</b> to perform various steps that will be described in detail later in conjunction with <figref idref="DRAWINGS">FIG. 7</figref>.</p>
<p id="p-0027" num="0026">Item <b>14</b> is a two-by-N set of video packet groups. Here, N is the total number of display devices to which the videos <b>5</b>A, <b>5</b>B, etc. are being sent. Two groups of video packets are provided in the set <b>14</b> for each display device. The two video packet groups for the i-th display device TV(i) are herein called VPG(iA) and VPG(iB). The number of video packets in each group is a selectable variable that ranges from forty to four-hundred.</p>
<p id="p-0028" num="0027">Item <b>15</b> is a two-by-N set of internet protocol header groups. One group of internet protocol headers is provided in the set <b>15</b> for each group of video packets in the set <b>14</b>. The group of internet protocol headers which is provided for the video packet group VPG(iA) is herein called IPHG(iA). Similarly, the group of internet protocol headers which is provided for the video packet group VPG(iB) is herein called IPHG(iB).</p>
<p id="p-0029" num="0028">Also, for each video packet in any one particular group, the corresponding group of internet protocol headers includes a respective subgroup of the internet protocol headers. The first video packet in the video packet group VPG(iA) is herein called VP(iA)-1; and, the respective subgroup of internet protocol headers for that first video packet is herein called IPHSG(iA)-1. Similarly, the second video packet is the video packet group VPG(iA) is herein called VP(iA)-2; and, the respective subgroup of internet protocol headers for that second video packet is herein called IPHSG(iA)-2.</p>
<p id="p-0030" num="0029">Item <b>16</b> is a queue that is used by the supervisor processor <b>10</b> to receive messages from the host processor <b>1</b>, and the co-processor <b>20</b>-<b>1</b>. Each received message is processed by the supervisor control program <b>13</b>.</p>
<p id="p-0031" num="0030">Coupled to the co-processor <b>20</b>-<b>1</b>, via the bus <b>11</b>, is a digital random access memory <b>21</b>; and stored within that memory <b>21</b> are items <b>22</b>, <b>23</b> and <b>24</b>. Item <b>22</b> is a control program for the compressor <b>20</b>-<b>1</b>. This control program <b>22</b> directs the co-processor <b>20</b>-<b>1</b> to perform various steps which will be described in detail later in conjunction with <figref idref="DRAWINGS">FIG. 6</figref>.</p>
<p id="p-0032" num="0031">Item <b>23</b> is a two-by-N set of transmissions control lists. One transmission control list is provided in the set <b>23</b> for each group of video packets in the set <b>14</b>. The transmission control list which is provided for the video packet group VPG(iA) is herein called TCL(iA). Likewise, the transmission control list which is provided for the video packet group VPG(iB) is herein called TCL(iB).</p>
<p id="p-0033" num="0032">Item <b>24</b> is a viewer set-up table. In this table <b>24</b>, a separate row is provided for each display device to which one of the videos <b>5</b>A, <b>5</b>B, etc. is being sent. Thus, the viewer set-up table has a total of N rows. The details of the i-th row in table <b>24</b> are shown in <figref idref="DRAWINGS">FIG. 2</figref>.</p>
<p id="p-0034" num="0033">Also, coupled to the co-processor <b>20</b>-<b>1</b> is a scheduler <b>25</b>. This scheduler <b>25</b> assigns a series of spaced-apart time periods to each display device that is being sent one of the videos <b>5</b>A, <b>5</b>B, etc. Additional details of the scheduler <b>25</b> are shown in <figref idref="DRAWINGS">FIG. 2</figref>.</p>
<p id="p-0035" num="0034">Further, coupled to an output port on the co-processor <b>20</b>-<b>1</b> are items <b>30</b>, <b>31</b>, <b>32</b>, <b>33</b>(<b>1</b>)-<b>33</b>(N), <b>34</b>(<i>i</i>), and TV(i). Item <b>30</b> is an asynchronous transfer mode (ATM) interface. Item <b>31</b> is an internet router which has an ATM internet interface. Item <b>32</b> is the internet. Each of the items <b>33</b>(<b>1</b>)-<b>33</b>(N) is an output port from the internet <b>32</b> to which a set-top box can be connected. Item <b>34</b>(<i>i</i>) is the i-th set top-box which is connected to the internet output port <b>33</b>(<i>i</i>). Item TV(i) is the i-th display device which is connected to the i-th set top-box <b>34</b>(<i>i</i>).</p>
<p id="p-0036" num="0035">An overview of how all of the above identified components, in the <figref idref="DRAWINGS">FIG. 1</figref> video-on-demand system, interact is as follows. Initially, a person who wants to see a particular video at the i-th display device TV(i) sends a request for that video to the host processor <b>1</b>. This request can be sent by any means, such as a telephone (not shown) for example.</p>
<p id="p-0037" num="0036">In response to the above request, the host processor <b>1</b> sends an “add viewer request” to one of the queues <b>16</b> for supervisor processor <b>10</b>. This request identifies—a) the starting address in the memory <b>3</b> of the first two groups of video packets in the requested video; b) the number of bytes in each video packet group; and c) certain routing information that is needed to send the requested video from the output port of the co-processor <b>20</b>-<b>1</b>, thru the internet router <b>31</b> and thru the internet <b>32</b> to one particular set-top box <b>34</b>(<i>i</i>).</p>
<p id="p-0038" num="0037">Thereafter, in response to the add viewer request in the queue <b>16</b>, the supervisor processor <b>10</b> performs the following tasks. First, the supervisor processor <b>10</b> uses the starting addresses that it received from the host processor <b>1</b> to read the first two video packet groups into item <b>14</b> of the memory <b>12</b>. The reading of these video packet groups is indicated in <figref idref="DRAWINGS">FIG. 1</figref> by the dashed arrow <b>41</b>.</p>
<p id="p-0039" num="0038">Next, the supervisor processor <b>10</b> uses the routing information that it received from the host processor <b>1</b> to build a corresponding group of internet protocol headers for each group of video packets that it read. These two groups of internet protocol headers are stored in item <b>15</b> of the memory <b>12</b>.</p>
<p id="p-0040" num="0039">Next, the supervisor processor <b>10</b> constructs a respective transmission control list for each of the two groups of video packets that it read. These two transmission control lists are stored in item <b>23</b> of the memory <b>21</b>.</p>
<p id="p-0041" num="0040">Lastly, the supervisor processor <b>10</b> adds a row for the set-top box <b>34</b>(<i>i</i>) into the viewer set-up table <b>24</b>, and it identifies the set-top box <b>34</b>(<i>i</i>) to the scheduler <b>25</b>.</p>
<p id="p-0042" num="0041">Once the set-top box <b>34</b>(<i>i</i>) is identified to the scheduler <b>25</b>, that scheduler assigns a series of spaced-apart time periods to the set-top box <b>34</b>(<i>i</i>). In each such time period, the co-processor <b>20</b>-<b>1</b> uses the transmission control lists to read and partition a piece of a video data packet and its respective subgroup of internet protocol headers for transmission to the set-top box <b>34</b>(<i>i</i>). This reading and partitioning is indicated in <figref idref="DRAWINGS">FIG. 1</figref> by the dashed arrow <b>42</b>.</p>
<p id="p-0043" num="0042">To each partitioned piece of the video data packet and its respective subgroup of internet protocol headers, the co-processor <b>20</b>-<b>1</b> adds an ATM header; and the result is sent by the co-processor <b>20</b>-<b>1</b> to the internet router <b>31</b>. This sending is indicated in <figref idref="DRAWINGS">FIG. 1</figref> by the dashed arrow <b>43</b>. Then in the internet router <b>31</b>, the ATM header is stripped away and the subgroup of internet protocol headers is used to transmit the video data packet thru the internet <b>32</b> to the set-top box <b>34</b>(<i>i</i>). This transmission is indicated in <figref idref="DRAWINGS">FIG. 1</figref> by the dashed arrow <b>44</b>.</p>
<p id="p-0044" num="0043">In the video-on-demand system of <figref idref="DRAWINGS">FIG. 1</figref>, each set-top box <b>34</b>(<i>i</i>) can have any type of interface to the internet <b>32</b>. For example, one set-top box can have a DSL interface; another set-top box can have an Ethernet interface; another set-top box can have a fiber channel interface, and another set-top box can have an ATM interface. These different types of set-top boxes will all work because the internet router <b>31</b> with its ATM interface will strip off each ATM header that it receives from the co-processor <b>20</b>-<b>1</b> and will use the respective subgroups of internet protocol headers to deliver the corresponding video data packets to the set-top boxes.</p>
<p id="p-0045" num="0044">Also, by partitioning the video data packets with their respective internet protocol headers into pieces, and sending each piece with an ATM header in spaced apart time slots to the internet router <b>31</b>, the rate at which the video data packets are sent thru the internet <b>32</b> is precisely timed. This timing insures that any buffers for the video data in the set-top boxes <b>34</b>(<i>i</i>) do not overflow or underflow.</p>
<p id="p-0046" num="0045">Turning now to <figref idref="DRAWINGS">FIG. 2</figref>, additional details on the transmission control lists <b>23</b>, and the viewer set-up table <b>24</b>, will be described. In <figref idref="DRAWINGS">FIG. 2</figref>, item <b>24</b>-<i>i </i>illustrates the internal structure of the i-th row of the viewer set-up table <b>24</b>. Each of the N rows in the viewer set-up table <b>2</b> have a similar structure.</p>
<p id="p-0047" num="0046">Included in the i-th row <b>24</b>-<i>i </i>is an internal reference number V(i) for the i-th viewer, an asynchronous transfer made header ATMH(i) for the i-th viewer, and a pair of transmissions control list pointers TCLP(iA) and TCLP(iB). Pointer TCLP(iA) holds the address of the transmissions control list TCL(iA) in the co-processor's memory <b>21</b>, and pointer TCLP(iB) holds the address of the transmission control list TCL(iB) in the co-processor's memory <b>21</b>.</p>
<p id="p-0048" num="0047">Initially, the co-processor <b>20</b>-<b>1</b> uses pointer TCLP(iA) as the “current” pointer for the viewer V(i). The current pointer, together with the corresponding transmission control list, identify the video data packets and respective subgroups of internal protocol headers which the co-processor <b>20</b>-<b>1</b> is currently sending to the set-top box <b>34</b>(<i>i</i>). Pointer TCLP(iA) continues to be the current pointer until all video data packets that are identified by the transmission control list TCL(iA) have been sent. Then, pointer TCLP(iB) becomes the current pointer.</p>
<p id="p-0049" num="0048">The above alternating use of pointer TCLP(iA) and pointer TCLP(iB) as the current pointer continues over and over in a repetitive sequence. Also, while pointer TCLP(iB) is the current pointer, the transmission control list TCL(iA) is updated by the supervisor processor <b>10</b><i>a</i>. Similarly, while pointer TCLA(iA) is the current pointer, the transmission control list (TCL(iB) is updated by the supervisor processor <b>10</b>.</p>
<p id="p-0050" num="0049">Also shown in <figref idref="DRAWINGS">FIG. 2</figref> are additional details on the structure of the scheduler <b>25</b>. This scheduler <b>25</b> is comprised of an array of storage cells <b>25</b><i>a </i>and a pointer <b>25</b><i>b</i>. All the cells <b>25</b><i>a </i>are sequentially scanned at a predetermined constant rate by the pointer <b>25</b><i>b</i>, and the time that is spent in any one cell is called a time slot.</p>
<p id="p-0051" num="0050">In <figref idref="DRAWINGS">FIG. 2</figref>, the cells <b>25</b><i>a </i>are arranged in thirty rows of forty cells per row, as an example. All of the <figref idref="DRAWINGS">FIG. 2</figref> cells are scanned from left-to-right by the pointer <b>25</b><i>b</i>, one row at a time. <figref idref="DRAWINGS">FIG. 2</figref> shows the pointer <b>25</b><i>b </i>at one particular time instant when it points to the third cell in the first row of the scheduler <b>25</b>.</p>
<p id="p-0052" num="0051">Each cell <b>25</b><i>a </i>stores either the identity of a particular viewer V(i) in the viewer set-up table <b>24</b>, or an indicator that the cell is not used. For example, in <figref idref="DRAWINGS">FIG. 2</figref> the left-most cell of each row identifies a viewer V<b>1</b>; the next cell in each row indicates that the cell is not used; the next cell in each row identifies a viewer V<b>5</b>; etc.</p>
<p id="p-0053" num="0052">When the pointer <b>25</b><i>b </i>points to a cell which identifies a particular viewer V(i), the co-processor <b>20</b>-<b>1</b> uses the i-th row of the viewer set-up table <b>24</b> to a) partition one piece from the video data packets and their respective subgroup of internet protocol headers for that viewer, and b) send that partitioned piece with an additional ATM header to the internet protocol router <b>31</b>. Conversely, when the pointer <b>25</b><i>b </i>points to a cell in the scheduler <b>25</b> which is not used, then the co-processor <b>20</b>-<b>1</b> simply waits for the pointer <b>25</b><i>b </i>to move to the next cell.</p>
<p id="p-0054" num="0053">Next, with reference to <figref idref="DRAWINGS">FIG. 3</figref>, additional details on the internal structure of the transmission control list TCL(iA) will be described. In <figref idref="DRAWINGS">FIG. 3</figref>, the first entry in the list TCL(iA) consists of three header items HP(iA)-1, HBC(iA)-1, and HF(iA)-1; the second entry consists of three data items DP(iA)-1, DBC(iA)-1, and DF(iA)-1; etc.</p>
<p id="p-0055" num="0054">Item HP(iA)-1 is a “header pointer” which points to the first subgroup of internet protocol headers IPHSG(iA)-1. Item HBC(iA)-1 is a “header byte count” which indicates the number of bytes that are in the first subgroup of internet protocol headers IPHSG(iA)-1. Item HF(iA)-1 in a set of “header flags” which indicate certain information about the first subgroup of internet protocol headers IPHSG(iA)-1.</p>
<p id="p-0056" num="0055">Similarly, item DP(iA) is a “data pointer” which points to the first packet of video data VP(iA)-1. Item DBC(iA)-1 is a “data byte count” which indicates the number of bytes that in the first packet of video data VP(iA)-1. Item DF(iA)-1 is a set of “data flags” which indicate certain information about the first packet of video data VP(iA)-1.</p>
<p id="p-0057" num="0056">Each of the entries in the transmission control list TCL(iA) are used by the co-processor <b>20</b>-<b>1</b> in a sequential fashion. Thus, the co-processor <b>20</b>-<b>1</b> first uses the items HP(iA)-1, HBC(iA)-1, and HF(iA)-1; next it uses the items DP(iA)-1, DBC(iA)-1, and DF(iA)-1; next it uses HP(iA)-2, HBC (iA)-2, and HF(iA)-2; etc. To sequentially address these entries, the co-processor <b>20</b>-<b>1</b> simply increments the transmission control list pointer TCLP(iA).</p>
<p id="p-0058" num="0057">The internal structure of the transmission control list TCL(iB) is very similar to the structure that is shown in <figref idref="DRAWINGS">FIG. 3</figref>. In particular, to obtain the structure of the transmission control list TCL(iB), simply replace each occurrence of “(iA)” in <figref idref="DRAWINGS">FIG. 3</figref> with “(iB)”.</p>
<p id="p-0059" num="0058">Referring now to <figref idref="DRAWINGS">FIG. 4</figref>, additional details will be described on how the co-processor <b>20</b>-<b>1</b> a) partitions into pieces, each video data packet and its respective subgroup of internet protocol headers, and b) attaches an ATM header to each partitioned piece. In <figref idref="DRAWINGS">FIG. 4</figref>, the above partitioning and attaching occurs for a single video data packet, and its subgroup of internet protocol headers, during a series of nine spaced-apart time slots TS<b>1</b>-TS<b>9</b>.</p>
<p id="p-0060" num="0059">Each partitioned piece in <figref idref="DRAWINGS">FIG. 4</figref> is forty-eight bytes long. The first piece consists of one entire subgroup of internet protocol headers, that are called LLC SNAP, IP, and UDP; and twelve bytes of video data (VD) from one video data packet. The second piece thru the eighth piece each consist of forty-eight bytes of video data from the same video data packet. The ninth piece consists of twenty-eight bytes of video data from the same video data packet, plus twelve bytes that are not used, plus an eight byte trailer.</p>
<p id="p-0061" num="0060">By adding the video data bytes in each piece in <figref idref="DRAWINGS">FIG. 4</figref>, it is seen that the single video data packet is three-hundred-seventy-six byes long. Also in <figref idref="DRAWINGS">FIG. 4</figref>, the ATM header which is attached to each partitioned piece is five bytes long.</p>
<p id="p-0062" num="0061">Next, with reference to <figref idref="DRAWINGS">FIG. 5</figref>, the internal structure of the ATM header, the LLC SNAP header, the IP header, the UDP header, and the trailer will be described. Considering first the ATM header, if consists of a “virtual path indicator” (VPI), a “virtual channel identifier” (VCI), a “payload type indicator” (PTI), a “cell loss priority” (CLP), and a “cyclic redundancy check” (CRC). VPI is twelve bits long, and the VCI is twelve bits long. These are unique identifiers to subsequent ATM switches. A telephone number can be considered analogous to the VCI/VPI pair where the VPI is the area code and the VCI is the local exchange number. PTI is three bits long. The first bit is used to indicate a user data packet; the second bit is used to indicate congestion on the path; and the third bit is used to indicate the last cell of a frame (which contains the trailer). CLP is one bit long, and indicates the priority of the cell for discard during congestion. CRC is eight bits long, and provides protection across the five byte ATM header.</p>
<p id="p-0063" num="0062">The LLC SNAP header consists of eight bytes which are all fixed. Each of those bytes is shown in <figref idref="DRAWINGS">FIG. 5</figref> in a hexidecimal form.</p>
<p id="p-0064" num="0063">The IP header consists of twenty bytes, six of which are fixed and twelve of which are variables. Variable L<b>1</b> is the length in bytes of the entire IP datagram starting with the IP header and including the data payload. Variable PID is the Packet ID which is used to uniquely identify the IP datagram. This value must be unique for each datagram. Variable CS is the IP Header checksum, and it is calculated over the twenty byte IP Header. Variable SRC-IP-A is the IP address (a four byte value) identifying the source of the IP datagram. Variable DEST-IP-A is the destination IP address. This value identifies the destination of the datagram and is used by IP routers to determine the correct path to the destination.</p>
<p id="p-0065" num="0064">The UDP header consists of eight bytes, two of which are fixed and six of which are variables. Variable SRC-P is the source port number, and it is used to send any response data. Variable DEST-P is the destination port number, and it is used to deliver data to the correct UDP application at the destination IP address. Variable L<b>2</b> is the length of the UDP data and header.</p>
<p id="p-0066" num="0065">The trailer consists of eight bytes which are all variables. Variable CPCS is the Common Part Convergence Sub-layer user data and is currently unused (set to 0). Variable CPI is the Common Part Indicator and is currently unused (set to 0). Variable L<b>3</b> is the length in bytes of the datagram including the LLC, IP, and UDP headers, and the data. Variable CRC is the Cyclical Redundancy Checksum and is computed over the length (Variable L<b>3</b>) of the datagram.</p>
<p id="p-0067" num="0066">Turning now to <figref idref="DRAWINGS">FIG. 6</figref>, the internal structure of the control program <b>22</b> for the co-processor <b>20</b>-<b>1</b> will be described. This control program <b>22</b> consists of a plurality of computer instructions which direct the co-processor <b>20</b>-<b>1</b> to perform the steps S<b>1</b>-S<b>18</b> that are shown in <figref idref="DRAWINGS">FIG. 6</figref>.</p>
<p id="p-0068" num="0067">In step S<b>1</b>, the co-processor <b>20</b>-<b>1</b> waits for the start of a new time period for a viewer V(i). This occurs when the pointer <b>25</b><i>b </i>in the scheduler <b>25</b> moves from one call <b>25</b><i>a </i>to another call that stores the identify of the viewer V(i). If the pointer <b>25</b><i>b </i>moves to a cell that is not used, then the co-processor <b>20</b>-<b>1</b> simply continues to wait in step S<b>1</b>.</p>
<p id="p-0069" num="0068">When the new time period for viewer V(i) begins, the co-processor <b>20</b>-<b>1</b> first performs step S<b>2</b>. There, the co-processor <b>20</b>-<b>1</b> reads the current transmission control list pointer TCLP(iA) or TCLP(iB) from the i-th row of the viewer set-up table <b>24</b>.</p>
<p id="p-0070" num="0069">Next, the co-processor <b>20</b>-<b>1</b> performs step S<b>3</b>. There, the co-processor <b>20</b>-<b>1</b> reads the asynchronous transfer mode header ATMH(i) from the i-th row of the viewer set-up table <b>24</b> and sends that header to the ATM interface <b>30</b>.</p>
<p id="p-0071" num="0070">Next, the co-processor <b>20</b>-<b>1</b> performs step S<b>4</b>. There, the co-processor <b>20</b>-<b>1</b> sets a count “K” within the co-processor to the number of bytes per piece into which each video data packet and its respective subgroup of internet protocol headers are to be partitioned. In the previously described <figref idref="DRAWINGS">FIG. 4</figref>, the number of bytes per piece into which video data packet and its respective subgroup of internet protocol headers were partitioned was forty-eight. That is achieved by setting K equal to forty-eight in step S<b>4</b> of <figref idref="DRAWINGS">FIG. 6</figref>.</p>
<p id="p-0072" num="0071">Next, the co-processor <b>20</b>-<b>1</b> performs step S<b>5</b>. In that step, the co-processor <b>20</b>-<b>1</b> compares K to a byte count BC. Here, BC is the header byte count HBC, or the data byte count DBC, that is pointed to by the current transmission control list pointer TCLP(iA) or TCLP(iB). If the byte count BC is larger or equal to K, then step S<b>11</b> is performed; otherwise, step S<b>6</b> is performed.</p>
<p id="p-0073" num="0072">Suppose now that the current transmission control list pointer points to a header byte count HBC, in the transmission control list. In that case, the header byte count HBC will equal thirty-six bytes, as can be seen from <figref idref="DRAWINGS">FIGS. 4 and 5</figref>; and thus step S<b>6</b> will be performed after step S<b>5</b>.</p>
<p id="p-0074" num="0073">In step S<b>6</b>, the co-processor <b>20</b>-<b>1</b> reads a total of BC bytes, from the supervisor memory <b>12</b>, that are addressed by the pointers HP or DP. HP is a header pointer, and DP is a data pointer, that is pointed to by the current transmission control list pointer TCLP(iA) or TCLP(iB).</p>
<p id="p-0075" num="0074">Next, in step S<b>7</b>, the co-processor <b>20</b>-<b>1</b> sends all of the bytes that it read in step S<b>6</b> to the ATM interface <b>30</b>. Then, in step S<b>8</b>, the co-processor <b>20</b>-<b>1</b> subtracts the byte count BC from the internal count K. The result of this subtraction becomes the new internal count K.</p>
<p id="p-0076" num="0075">Next, in step S<b>9</b>, the co-processor <b>20</b>-<b>1</b> tests a flag that is pointed to by the current transmission control list pointer TCLP (iA) or TCLP (iA). This flag is in each set of the header flags HF and the data flags DF in the transmission control list. If the tested flag indicates that the current transmission control list pointer is pointing to three header items, then a branch is taken to step S<b>10</b>. Otherwise, a branch is taken to step S<b>14</b>.</p>
<p id="p-0077" num="0076">Assume now that the branch is taken to step S<b>10</b>. There, the current transmission control list pointer TCLP(iA) or TCLP(iB) is incremented such that it points to the next three items in the transmission control list. These three items will be a data pointer DP, a data byte count DBC, and a set of data flags DF.</p>
<p id="p-0078" num="0077">After step S<b>10</b> is performed, a branch is taken back to step S<b>5</b>. There, the co-processor <b>20</b>-<b>1</b> compares K to the byte count BC. Initially, the byte count BC within any three data items will be set to three-hundred-seventy-six, as was previously described in conjunction with <figref idref="DRAWINGS">FIG. 4</figref>. Thus, since the byte count BC is larger than K, a branch is taken to step S<b>11</b>.</p>
<p id="p-0079" num="0078">In step S<b>1</b>, the co-processor <b>20</b>-<b>1</b> reads a total of K bytes, from the supervisor memory <b>12</b>, that are addressed by the pointer DP. Here, DP is the data pointer that is pointed to by the current transmission control list pointer TCLP(iA) or TCLP(iB).</p>
<p id="p-0080" num="0079">Next, in step S<b>12</b>, the co-processor <b>20</b>-<b>1</b> sends all of the bytes that it reads in step S<b>11</b> to the ATM interface <b>30</b>. Then, in step S<b>13</b>, the co-processor <b>20</b>-<b>1</b> subtracts K from the byte count BC, and adds K to the data pointer DP. The byte count BC and data pointer DP as modified, are stored back into the portion of the transmission control list that is pointed to by the current transmission control list pointer TCLP (iA) or TCLP(iB). Then a branch is taken back to step S<b>1</b>.</p>
<p id="p-0081" num="0080">Suppose now that back in step S<b>9</b>, the tested flag indicates that the current transmissions control list pointer is pointing to three data items. Then, a branch is taken to step <b>14</b>.</p>
<p id="p-0082" num="0081">In step S<b>14</b>, the co-processor <b>20</b>-<b>1</b> sends the “not used” bytes and the “trailer” bytes that occur in <figref idref="DRAWINGS">FIG. 4</figref> during the time slot TS<b>9</b>. Then, in step S<b>15</b>, the co-processor <b>20</b>-<b>1</b> tests a flag that is pointed to by the current transmission control list pointer TCLP(iA) or TCLP(iB). This flag is in each set of the data flags DF in the transmission control list, and it identifies the last video data packet in a video packet group.</p>
<p id="p-0083" num="0082">If the video data packet that is pointed to by the current transmission control list pointer is not the last packet of a group, then a branch is taken to step S<b>16</b>. There, the co-processor <b>20</b>-<b>1</b> increments the current transmission control list pointer such that it points to the next three header items HP, HBC, and HF in the transmission control list. Then a branch is taken back to step S<b>1</b>.</p>
<p id="p-0084" num="0083">Conversely, if the video data packet that is pointed to by the current transmission control list pointer is the last packet of a group, then a branch is taken to step S<b>17</b>. There, the co-processor <b>20</b>-<b>1</b> switches the current transmission control list pointer from TCLP(iA) to TCLP(iB), or vice-versa. Then, in step S<b>18</b>, the co-processor <b>20</b>-<b>1</b> sends a “completion message” to the supervisor processor <b>10</b> and branches back to step S<b>1</b>.</p>
<p id="p-0085" num="0084">How the above steps of <figref idref="DRAWINGS">FIG. 6</figref> apply to the time slots TS<b>1</b>-TS<b>9</b> of <figref idref="DRAWINGS">FIG. 4</figref> is as follows. During time slot TS<b>1</b>, the co-processor <b>20</b>-<b>1</b> perform steps S<b>1</b>, S<b>2</b>, S<b>3</b>, S<b>4</b>, S<b>5</b>, S<b>6</b>, S<b>7</b>, S<b>8</b>, S<b>9</b>, S<b>10</b>, S<b>5</b>, S<b>11</b>, S<b>12</b>, and S<b>13</b>. During each of the time slots TS<b>2</b>-TS<b>8</b>, the co-processor <b>20</b>-<b>1</b> performs steps S<b>1</b>, S<b>2</b>, S<b>3</b>, S<b>4</b>, S<b>5</b>, S<b>11</b>, S<b>12</b>, and S<b>13</b>. And, during time slot TS<b>9</b>, the co-processor <b>20</b>-<b>1</b> performs steps S<b>1</b>, S<b>2</b>, S<b>3</b>, S<b>4</b>, S<b>5</b>, S<b>6</b>, S<b>7</b>, S<b>8</b>, S<b>9</b>, S<b>14</b> and S<b>15</b>. Following step <b>15</b>, either step S<b>16</b>, or steps S<b>17</b> and S<b>18</b> are performed.</p>
<p id="p-0086" num="0085">Referring next to <figref idref="DRAWINGS">FIG. 7</figref>, the internal structure of the control program <b>13</b> for the supervisor processor <b>10</b> will be described. This control program <b>13</b> consists of a plurality of computer instructions which direct the supervisor processor to perform the steps S<b>21</b>-S<b>36</b> that are shown in <figref idref="DRAWINGS">FIG. 7</figref>.</p>
<p id="p-0087" num="0086">In step S<b>21</b>, the supervisor processor <b>10</b> examines the queue <b>16</b> to see if the queue holds an “add viewer V(i) message” from the host processor <b>1</b>. If such a message is present in the queue <b>16</b>, then the supervisor processor <b>10</b> performs steps S<b>22</b>-S<b>25</b>. Otherwise, a branch is taken to step S<b>26</b>.</p>
<p id="p-0088" num="0087">Assume now that a message to add viewer V(i) is in the queue <b>16</b>. That message includes the beginning address of the video packet group VPG(iA) in the host memory <b>3</b>, and the beginning address of the video packet group VPG(iB) in the host memory <b>3</b>. Those two addresses are used by supervisor processor <b>10</b> in step S<b>22</b> to transfer the video packet groups VPG(iA) and VPG(iB) from the host memory <b>3</b> into item <b>14</b> in the supervisor memory <b>12</b>.</p>
<p id="p-0089" num="0088">Next, in stop S<b>23</b>, the supervisor processor <b>10</b> builds the group of internet protocol headers IPHG(iA) for the video packet group VPG(iA); and it builds the group of internet protocol headers IPHG(iB) for the video packet group VPG(iB). These two groups of internet protocol headers IPHG(iA) and IPHG(iB) are stored into item <b>15</b> in the supervisor memory <b>12</b>.</p>
<p id="p-0090" num="0089">Next, in step S<b>24</b>, the supervisor processor <b>10</b> constructs the transmission control list TCL(iA) for the group of internet protocol headers IPHG(iA) and the video packet group VPG(iA); and it constructs the transmission control list TCL(iB) for the group of internet protocol headers IPHG(iB) and the video packet group VPG(iB). These two transmission control lists are stored by the supervisor processor <b>10</b> into item <b>23</b> in the co-processor memory <b>21</b>.</p>
<p id="p-0091" num="0090">Next, in step S<b>25</b>, the supervisor processor <b>10</b> adds one row <b>24</b>-<b>1</b> to the viewer set-up table <b>24</b>; and it assigns particular cells <b>25</b><i>a </i>in the scheduler <b>25</b> to the viewer v(i). Thereafter, each time the pointer <b>25</b><i>b </i>in the scheduler <b>25</b> moves to one of the above assigned cells, the co-processor <b>20</b>-<b>1</b> performs the previously described steps of <figref idref="DRAWINGS">FIG. 6</figref> for the viewer V(i).</p>
<p id="p-0092" num="0091">Following step S<b>25</b> in <figref idref="DRAWINGS">FIG. 7</figref>, the supervisor processor <b>10</b> branches to step S<b>26</b>. There, the supervisor processor <b>10</b> examines the queue <b>16</b> to see if the queue holds a “completion message” from the co-processor <b>20</b>-<b>1</b>. If such a message is present, then the supervisor processor <b>10</b> performs step S<b>27</b>; otherwise a branch is taken to step S<b>28</b>.</p>
<p id="p-0093" num="0092">Recall from <figref idref="DRAWINGS">FIG. 6</figref>, that the completion message is sent by the co-processor <b>20</b>-<b>1</b> when all of the video data packets of one group have been sent to the ATM interface <b>30</b>. This occurs in <figref idref="DRAWINGS">FIG. 6</figref> in step S<b>18</b>. In response to the completion message, the supervisor processor <b>10</b> sends a request to the host processor <b>1</b> for the starting address of the next video packet group in the host memory <b>3</b>. This request is sent in step S<b>27</b>.</p>
<p id="p-0094" num="0093">Following step S<b>27</b> in <figref idref="DRAWINGS">FIG. 7</figref>, the supervisor processor <b>10</b> branches to step S<b>28</b>. There, the supervisor processor <b>10</b> examines the queue <b>16</b> to see if the queue holds a “received requested address message” from the host processor <b>1</b>. This message is sent by the host processor <b>1</b> in response to the request that is sent by the supervisor processor <b>10</b> in step S<b>27</b>. If the “received requested address message” is present in the queue <b>16</b>, then the supervisor processor <b>10</b> performs steps S<b>29</b>-S<b>31</b>; otherwise a branch is taken to step S<b>32</b>.</p>
<p id="p-0095" num="0094">Included in the “received requested address message” in the starting address in the host memory <b>3</b>, of the next group of video data packets for the viewer V(i). That address is used by the supervisor processor <b>10</b>, in step S<b>29</b>, to transfer the next group of video data packets VPG(iA) or VPG(iB) from a video in the host memory <b>3</b> into item <b>14</b> in the supervisor memory <b>12</b>.</p>
<p id="p-0096" num="0095">Next, in step S<b>30</b>, the supervisor processor <b>10</b> builds a respective group of internet protocol headers for the group of video data packets that was transferred in step S<b>28</b>. This group, an internet protocol header IPHG(iA) or IPHG(iB) is stored into item <b>15</b> of the supervisor memory <b>12</b>.</p>
<p id="p-0097" num="0096">Next, in step S<b>31</b>, the supervisor processor <b>10</b> constructs a transmission control list for the group of video data packets that was transferred in step S<b>29</b> and the group of internet protocol headers that was built in step S<b>30</b>. This transmission control list TCL(iA) or TCL (iB) is stored into item <b>23</b> of the co-processor memory <b>21</b>.</p>
<p id="p-0098" num="0097">Following step S<b>31</b>, the supervisor processor <b>10</b> branches to step S<b>32</b>. Then, the supervisor processor <b>10</b> examines the queue <b>16</b> to see if the queue holds a “remove viewer V(i) message” from the host processor <b>1</b>. If such a message is present in the queue <b>16</b>, then the supervisor processor <b>10</b> performs steps S<b>33</b>-S<b>36</b>. Otherwise, a branch is taken back to step S<b>21</b>.</p>
<p id="p-0099" num="0098">Assume now that a message to remove viewer V(i) is in the queue <b>16</b>. Then, in step S<b>33</b>, the supervisor processor <b>10</b> deletes row <b>24</b>-<i>i </i>from the viewer set-up table <b>24</b>, and it removes viewer V(i) from the cells <b>25</b><i>a </i>in the scheduler <b>25</b>.</p>
<p id="p-0100" num="0099">Next, in step S<b>34</b>, the supervisor processor <b>10</b> marks as unused, the portion of item <b>14</b> in the supervisor memory <b>12</b> which stores the video packet groups VPG(iA) and VPG(iB) for the viewer V(i). That portion of item <b>14</b> then becomes available to store two video packet groups for another viewer.</p>
<p id="p-0101" num="0100">Next, in step S<b>35</b>, the supervisor processor <b>10</b> marks as unused, the portion of item <b>15</b> in the supervisor memory <b>12</b> which stores the internet protocol header groups IPHG(iA) and IPHG(iB) for the viewer V(i). That portion of item <b>15</b> then becomes available to store two internet protocol header groups for another viewer.</p>
<p id="p-0102" num="0101">Lastly, in step S<b>36</b>, the supervisor processor <b>10</b> marks as unused, the portion of item <b>23</b> in the co-processor memory <b>21</b> which stores the transmission control lists TCL(iA) and TCL(iB). That portion of item <b>23</b> then becomes available to store two transmission control lists for another viewer. Then, from step S<b>36</b>, a branch is taken back to step S<b>21</b>.</p>
<p id="p-0103" num="0102">Next with reference to <figref idref="DRAWINGS">FIG. 8</figref>, the internal structure of the control program <b>4</b> for the host processor <b>1</b> will be described. This control program <b>4</b> consists of a plurality of computer instructions which direct the host processor <b>1</b> to perform steps S<b>41</b>-S<b>48</b> that are shown in <figref idref="DRAWINGS">FIG. 8</figref>.</p>
<p id="p-0104" num="0103">In step S<b>41</b>, the host processor <b>1</b> examines the queue <b>6</b> to see if the queue holds a request from a viewer V(i) to start sending one of the videos <b>5</b>A, <b>5</b>B, etc. to one particular set-top box <b>34</b>(<i>i</i>). If such a request is present in the queue <b>6</b>, then the host processor <b>1</b> performs step S<b>42</b>. Otherwise, a branch is taken to step S<b>43</b>.</p>
<p id="p-0105" num="0104">In step S<b>42</b>, the host processor <b>1</b> sends an “add viewer V(i) message” to the queue <b>16</b> for the supervisor processor <b>10</b>. This message includes all of the information which the supervisor processor <b>10</b> will need to perform the previously described steps S<b>22</b>-S<b>25</b> of <figref idref="DRAWINGS">FIG. 6</figref>. Then, a branch is taken back to step S<b>41</b>.</p>
<p id="p-0106" num="0105">In step S<b>43</b>, the host processor <b>1</b> examines the queue <b>6</b> to see if the queue holds a request from a viewer V(i) to stop sending one of the videos <b>5</b>A, <b>5</b>B, etc. to one particular set-top box <b>34</b>(<i>i</i>). If such a request is present in the queue <b>6</b>, then the host processor <b>1</b> performs step S<b>44</b>. Otherwise, a branch is taken to step S<b>45</b>.</p>
<p id="p-0107" num="0106">In step S<b>44</b>, the host processor <b>1</b> sends a “remove viewer V(i) message” to the queue <b>16</b> for the supervisor processor <b>10</b>. This message includes all of the information which the supervisor processor <b>10</b> will need to perform the previously described steps S<b>33</b>-S<b>38</b> of <figref idref="DRAWINGS">FIG. 7</figref>. Then, a branch is taken back to step S<b>41</b>.</p>
<p id="p-0108" num="0107">In step S<b>45</b>, the host processor <b>1</b> examines the queue <b>6</b> to see if the queue holds a request, from the supervisor processor <b>10</b>, for the address in the host memory <b>3</b> of the next group of video packets for viewer V(i). If such a request is present in the queue <b>6</b>, the host processor <b>1</b> performs step S<b>46</b>; otherwise a branch is taken back to step S<b>41</b>.</p>
<p id="p-0109" num="0108">In step S<b>46</b>, the host processor <b>1</b> checks to see if the video that is being sent to the viewer V(i) has reached its end. If the entire video has not been sent to the viewer V(i), then the host processor <b>1</b> performs step S<b>48</b> wherein it sends a “received requested address message” to the queue <b>16</b> for the supervisor processor <b>10</b>. That message includes the starting address, in the host memory <b>3</b>, of the next group of video data packets for the viewer V(i). Then a branch is taken back to step S<b>41</b>.</p>
<p id="p-0110" num="0109">Conversely, if the entire video has been sent to the viewer V(i), then the host processor <b>1</b> performs step S<b>47</b>. There, the host processor <b>1</b> sends the “remove viewer V(i) message” to the queue <b>16</b> for the supervisor processor <b>10</b>. Then, a branch is taken back to step S<b>41</b>.</p>
<p id="p-0111" num="0110">One preferred embodiment of the present invention has now been described in detail. In addition, however, various changes and modifications can be made to the details of this particular embodiment without departing from the essential features of the invention.</p>
<p id="p-0112" num="0111">For example, as one such modification, the structure of the video packet groups, the internet protocol header groups, and the transmission control lists can be changed from the structure that is shown in <figref idref="DRAWINGS">FIG. 3</figref> to the structure that is shown in <figref idref="DRAWINGS">FIG. 9</figref>. In <figref idref="DRAWINGS">FIG. 9</figref>, each of the video data packets VP(iA)-1, VP(iA)-2, etc. in the group VPG(iA) contain the same number of bytes, and they are stored in consecutive order in item <b>14</b> of the memory <b>12</b>. Likewise, in <figref idref="DRAWINGS">FIG. 9</figref>, each of the subgroups of internet protocol headers IPHSG(iA)-1, IPHSG(iB)-2, etc. in the group IPHG(iA) contain the same number of bytes, and they are stored in consecutive order in item <b>15</b> of the memory <b>12</b>.</p>
<p id="p-0113" num="0112">Due to the <figref idref="DRAWINGS">FIG. 9</figref> structure of video packet group VPG(iA) and internet protocol header group IPHG(iA), the structure of the corresponding transmission control list TCL(iA) is simplified. In <figref idref="DRAWINGS">FIG. 9</figref>, the first entry in the list TCL(iA) consists of the same three header items HP(iA)-1, HBC(iA)-1, and HF(iA)-1 that occur in <figref idref="DRAWINGS">FIG. 3</figref>; and, the second entry in the list TCL(iA) consists of the same three header items DP(iA)-1, DBC(iA)-1, and DF(iA)-1 that occur in <figref idref="DRAWINGS">FIG. 3</figref>. But then, each entry in the list TCL(iA) after the second entry consists of only the flags that occur in <figref idref="DRAWINGS">FIG. 3</figref>.</p>
<p id="p-0114" num="0113">In <figref idref="DRAWINGS">FIG. 9</figref>, the header pointer HP(iA)-1 initially contains the starting address of the first subgroup of internet protocol headers IPHSG(iA)-1. Then, after that starting address is incremented by the header byte count HBC(iA)-1, the header pointer HP(iA)-1 contains the starting address of the second subgroup of internet protocol headers IPHSG(iA)-2.</p>
<p id="p-0115" num="0114">Similarly in <figref idref="DRAWINGS">FIG. 9</figref>, the data pointer DP(iA)-1 initially contains the starting address of the first packet of video data VP(iA)-1. Then, after that starting address is incremented by the data byte count DBC(iA)-1, the data printer DP(iA)-1 contains the starting address of the second packet of video data VP(iA)-2.</p>
<p id="p-0116" num="0115">As another modification, the videos in the <figref idref="DRAWINGS">FIG. 1</figref> system, which are stored as items <b>5</b>A, <b>5</b>B, etc., in the host memory <b>3</b>, can instead be removed from the memory <b>3</b> and stored on any other type of storage media that is readable by the host processor <b>1</b>. For example, those videos can be stored on an optical disk, or a magnetic disk, or an integrated circuit memory that is separate from the host memory <b>3</b>.</p>
<p id="p-0117" num="0116">Similarly, the control programs <b>4</b>, <b>13</b>, and <b>22</b> which are stored in the <figref idref="DRAWINGS">FIG. 1</figref> system in the memories <b>3</b>, <b>12</b> and <b>21</b> respectively, can be removed from those memories and stored for sale to customers on any other storage media that is readable by a computer. Here again, the storage media can be an optical disk, or a magnetic disk, or an integrated circuit memory that is separate from the memories <b>3</b>, <b>12</b>, and <b>21</b>.</p>
<p id="p-0118" num="0117">As another modification, the host processor <b>1</b> in the <figref idref="DRAWINGS">FIG. 1</figref> system can be eliminated, and the steps which the host processor <b>1</b> performs can instead be performed by the supervisor processor <b>10</b>. With this modification, the steps of <figref idref="DRAWINGS">FIG. 7</figref> and <figref idref="DRAWINGS">FIG. 8</figref> would be performed by the supervisor processor <b>10</b>.</p>
<p id="p-0119" num="0118">As another modification, any of the various items which are in the headers and trailer that are shown in <figref idref="DRAWINGS">FIGS. 4 and 5</figref>, can be changed. One specific example is that the last two bytes of the LLC SNAP header can be changed from “0800” as shown in <figref idref="DRAWINGS">FIG. 5</figref> to “8137”; and when that change is made, the IP header and UDP header of <figref idref="DRAWINGS">FIGS. 4 and 15</figref> need to be replaced with another header that is called the IPX header. The internal structure of this IPX header is shown in <figref idref="DRAWINGS">FIG. 10</figref>.</p>
<p id="p-0120" num="0119">Another specific example is that immediately after the UDP header in <figref idref="DRAWINGS">FIGS. 4 and 5</figref>, an additional header, called the RTP header, can be inserted. The internal structure of this RTP header is also shown in <figref idref="DRAWINGS">FIG. 10</figref>.</p>
<p id="p-0121" num="0120">As another modification, the co-processor control program <b>22</b> in <figref idref="DRAWINGS">FIGS. 1 and 6</figref> can partition each video data packet and its respective subgroup of internet protocol headers, into any number of bytes K, as desired. <figref idref="DRAWINGS">FIG. 4</figref> illustrates just one example of where K equals forty-eight bytes. As K decreases, the number of time-slots that is needed to send a single video data packet, and its respective subgroup of internet protocol headers increases; and vice-versa. For example, if K is set equal to thirty-six plus three-hundred-seventy-six, then one entire video data packet from <figref idref="DRAWINGS">FIG. 4</figref> and its respective subgroup of internet protocol headers from <figref idref="DRAWINGS">FIG. 4</figref> can be sent, together with a single additional header, in a single time slot. Such a large partitioned piece is not permitted by the ATM transmission standards; but, it is allowed by the transmission standards for other types of networks. For example, if the ATM header in the first time slot TS<b>1</b> of <figref idref="DRAWINGS">FIG. 4</figref> is replaced with the ethernet header as shown in <figref idref="DRAWINGS">FIG. 10</figref>, then the thirty-six byte internet protocol headers of <figref idref="DRAWINGS">FIG. 4</figref> and the three-=hundred-seventy-six byte video data packet of <figref idref="DRAWINGS">FIG. 4</figref> can be sent by the co-processor <b>20</b>-<b>1</b> in a single time slot.</p>
<p id="p-0122" num="0121">Accordingly, it is to be understood that the scope of the present invention is not limited to just the details of the described preferred embodiment, but is defined by the appended claims.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A control program for a computer in a video-on-demand system, which is embodied in a program storage device that is readable by a computer and which directs said computer to perform the steps of:
<claim-text>obtain a transmission control list, from an external source, which identities a group of several video data packets and a respective subgroup of internet protocol headers for each video data packet in said group;</claim-text>
<claim-text>partition into pieces, each video data packet and its respective subgroup of internet protocol headers as identified by said transmission control list; and,</claim-text>
<claim-text>send said pieces, along with an additional header for each piece, to an output port during a series of spaced apart time intervals.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. A control program according to <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein said partition step and said send step are implemented by a single set of instructions which partition and send any selected item from said transmission control list regardless of whether said selected item is one subgroup of internet protocol headers or one video data packet.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. A control program according to <claim-ref idref="CLM-00001">claim 1</claim-ref> which also directs said computer to perform the stop of—first select one subgroup of internet protocol headers from said transmission control list for said partition and send steps, and then select the corresponding video data packet from said transmission control list for said partition and send steps, with the above steps continuing in a repetitive fashion.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. A control program according to <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein said obtain step includes the substeps of a) store a pair of pointers that each point to a different transmission control list, b) alternately use one pointer of said pair to select said video data packets with respective subgroups of internet protocol headers for said partition and send steps, and c) request said external source to update said one pointer of said pair after its use is completed.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. A control program according to <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein said partition step partitions each video data packet and its respective subgroup of internet protocol headers into a single piece of a first type, multiple pieces of a second type, and a single piece of a third type, where said single piece of said first type includes said respective subgroup of internet protocol headers plus an initial portion of said video data packet, each piece of said second type includes an intermediate portion of said video data packet, and said single piece of said third type includes a remaining portion of said video data packet plus a trailer.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. A control program according to <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein said additional header is an asynchronous transfer mode header.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. A control program according to <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein said partition step includes the substep of determining how many bytes need to be partitioned in each video data packet and each subgroup of internet protocol headers by reading, from said transmission control list, a respective count for each video data packet and each subgroup of internet protocol headers.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. A control program according to <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein said partition step includes the substep of determining how to access each video data packet and each subgroup of internet protocol headers by reading, from said transmission control list, a respective starting address in a memory for each video data packet and each subgroup of internet protocol headers.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. A control program according to <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein said program storage device is an optical storage media.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. A control program according to <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein said program storage device is a magnetic storage media.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. A control program according to <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein said program storage device is an integrated circuit.</claim-text>
</claim>
</claims>
</us-patent-grant>
