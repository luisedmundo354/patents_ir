<us-patent-grant lang="EN" dtd-version="v4.2 2006-08-23" file="US07299155-20071120.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20071106" date-publ="20071120">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>07299155</doc-number>
<kind>B2</kind>
<date>20071120</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>11118044</doc-number>
<date>20050429</date>
</document-id>
</application-reference>
<us-application-series-code>11</us-application-series-code>
<us-term-of-grant>
<us-term-extension>277</us-term-extension>
<disclaimer>
<text>This patent is subject to a terminal disclaimer.</text>
</disclaimer>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>11</main-group>
<subgroup>30</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>702182</main-classification>
<further-classification>702 57</further-classification>
<further-classification>702 87</further-classification>
</classification-national>
<invention-title id="d0e55">Method and apparatus for decomposing and verifying configurable hardware</invention-title>
<references-cited>
<citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5801956</doc-number>
<kind>A</kind>
<name>Kawamura et al.</name>
<date>19980900</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>6701474</doc-number>
<kind>B2</kind>
<name>Cooke et al.</name>
<date>20040300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714724</main-classification></classification-national>
</citation>
<citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6816814</doc-number>
<kind>B2</kind>
<name>Ebert et al.</name>
<date>20041100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>2002/0091979</doc-number>
<kind>A1</kind>
<name>Cooke et al.</name>
<date>20020700</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2002/0161568</doc-number>
<kind>A1</kind>
<name>Sample et al.</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2002/0171449</doc-number>
<kind>A1</kind>
<name>Shimizu et al.</name>
<date>20021100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2003/0067319</doc-number>
<kind>A1</kind>
<name>Cho</name>
<date>20030400</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00008">
<othercit>Thaker et al., “Register-Transfer Level Fault Modeling and Test Evaluation Techniques for VLSI Circuits”, ITC International Test Conference, 2000 IEEE, Paper 35.3, pp. 941-949.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00009">
<othercit>VSI Alliance reference, “An Overview of VSIA” from http://www.vsi.org/aboutVSIA/index.htm, 2004, pp. 1 total.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00010">
<othercit>Lin et al., “A Functional Test Planning System for Validation of DSP Circuits Modeled in VHDL”, 1998 International Verilog, pp. 172-177.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00011">
<othercit>Evans et al., “Honey I Shrunk the SOC Verification Proablem”, Sonics, Inc., SNUG San Jose, 2001, 2001 pp. 11 total.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00012">
<othercit>ALDEC, “What is TCL/TK Scripting?”, Jan. 2002, ALDEC Support, pp. 1-9.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00013">
<othercit>PCT Notification of Transmittal of International Preliminary Examination Report for Int'l. Application No. PCT/US03/35336, Int'l Filing Date Nov. 5, 2003, mailed May 31, 2005, 5 pgs.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
</references-cited>
<number-of-claims>22</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>702 57- 59</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>702 85</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>702117-123</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>702182</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>702189</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>714733</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>714738</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>703 23</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>703 25</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>716  4</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>716  5</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>716  7</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>716 12</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>324763</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>324765</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>7</number-of-drawing-sheets>
<number-of-figures>7</number-of-figures>
</figures>
<us-related-documents>
<continuation-in-part>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>10976456</doc-number>
<kind>00</kind>
<date>20041029</date>
</document-id>
<parent-status>PENDING</parent-status>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>11118044</doc-number>
</document-id>
</child-doc>
</relation>
</continuation-in-part>
<continuation>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>10293734</doc-number>
<kind>00</kind>
<date>20021112</date>
</document-id>
<parent-grant-document>
<document-id>
<country>US</country>
<doc-number>6816814</doc-number>
<kind>A </kind>
<date>20041109</date>
</document-id>
</parent-grant-document>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>10976456</doc-number>
</document-id>
</child-doc>
</relation>
</continuation>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20050198611</doc-number>
<kind>A1</kind>
<date>20050908</date>
</document-id>
</related-publication>
</us-related-documents>
<parties>
<applicants>
<applicant sequence="001" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Ebert</last-name>
<first-name>Jeffrey Allen</first-name>
<address>
<city>Half Moon Bay</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="002" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Venugopalan</last-name>
<first-name>Ravi</first-name>
<address>
<city>Santa Clara</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="003" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Evans</last-name>
<first-name>Scott Carlton</first-name>
<address>
<city>Santa Clara</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
</applicants>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Blakely Sokoloff Taylor &amp; Zafman LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</parties>
<assignees>
<assignee>
<addressbook>
<orgname>Sonics, Incorporated</orgname>
<role>02</role>
<address>
<city>Mountain View</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Ramos-Feliciano</last-name>
<first-name>Eliseo</first-name>
<department>2857</department>
</primary-examiner>
<assistant-examiner>
<last-name>Desta</last-name>
<first-name>Elias</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">The present invention includes a method and apparatus for decomposing and verifying configurable hardware. In one embodiment, the method includes automatically decomposing a set of one or more units at a first level of a configurable hardware system design hierarchy into a set of two or more units of a lower level of the hardware system design hierarchy. The set of one or more units at a first level includes one or more units dynamically instantiated at design creation time as well as at least a first unit composed of a previously instantiated hardware system composed with two or more levels of units within the hardware system design hierarchy of the previously instantiated hardware system.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="163.07mm" wi="168.99mm" file="US07299155-20071120-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="167.13mm" wi="169.33mm" file="US07299155-20071120-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="202.27mm" wi="99.31mm" file="US07299155-20071120-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="209.89mm" wi="142.41mm" file="US07299155-20071120-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="116.08mm" wi="146.98mm" file="US07299155-20071120-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="240.79mm" wi="131.91mm" file="US07299155-20071120-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="134.87mm" wi="113.28mm" file="US07299155-20071120-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="231.39mm" wi="174.24mm" file="US07299155-20071120-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">RELATED APPLICATIONS</heading>
<p id="p-0002" num="0001">The present patent application is a Continuation in part of prior application Ser. No. 10/976,456, filed Oct. 29, 2004, which was a Continuation of prior application Ser. No. 10/293,734, filed Nov. 12, 2002, entitled “A METHOD AND AN APPARTUS FOR DECOMPOSING AND VERIFYING CONFIGURABLE HARDWARE,” and issued on Nov. 9, 2004 as U.S. Pat. No. 6,816,814.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0002" level="1">FIELD</heading>
<p id="p-0003" num="0002">The present invention pertains to hardware verification. More particularly, the present invention relates to verifying configurable hardware.</p>
<heading id="h-0003" level="1">BACKGROUND</heading>
<p id="p-0004" num="0003">“Configurable hardware” or “parameterized hardware” describes hardware systems that are customized automatically at design creation time by using specified values for a set of parameters or attributes. Such hardware may also support changes at run-time depending on parameter settings. Configurable hardware systems typically provide better performance than software running on a general-purpose computer system and greater flexibility than conventional application specific integrated circuits (ASICs) without increasing circuit size and cost.</p>
<p id="p-0005" num="0004">In conventional hardware systems, it is necessary to verify a system's functionality by testing the system and its components. Typically, the complexity of verifying a system's functionality increases with the number of components that make up the system. Therefore, the conventional approach is to manually verify each unit individually and then to assemble the “known good units” into a system. If hardware is hierarchically arranged, verification must be performed for each level in the hierarchy. If each individual unit has been verified before assembling the system, verifying system functionality can focus on potential problems with interactions between components rather than on each component's capabilities.</p>
<p id="p-0006" num="0005">Configurable hardware systems can be verified using this type of conventional hierarchical decomposition. However, because each instance of a configurable hardware system is different, each time a configuration parameter is modified, the system and its components must be manually verified. The cost of repeatedly manually verifying a system and its components often offsets the advantages of configurable hardware.</p>
<heading id="h-0004" level="1">SUMMARY</heading>
<p id="p-0007" num="0006">The present invention includes a method and apparatus for decomposing and verifying configurable hardware. In one embodiment, the method includes automatically decomposing a set of one or more units at a first level of a configurable hardware system design hierarchy into a set of two or more units of a lower level of the hardware system design hierarchy, wherein the set of one or more units at a first level includes one or more units dynamically instantiated at design creation time as well as at least a first unit composed of a previously instantiated hardware system composed with two or more levels of units within the hardware system design hierarchy of the previously instantiated hardware system.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0008" num="0007">Some embodiments of the invention are illustrated by way of example and not limitation in the Figures of the accompanying drawings, in which like references indicate similar elements and in which:</p>
<p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram for decomposing and verifying configurable hardware according to one embodiment of the invention;</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. 2</figref> is a block diagram illustrating a system for creating and verifying configurable hardware according to one embodiment of the invention;</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 3</figref> is a flow diagram illustrating the creation of a system, according to embodiments of the invention;</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 4</figref> is a conceptual block diagram of a system design according to embodiments of the invention;</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 5</figref> is a flow diagram illustrating operations for decomposing and verifying a configurable hardware system according to embodiments of the invention;</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 6</figref> is a block diagram illustrating a testbench for verifying a unit according to embodiments of the invention; and</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 7</figref> illustrates an exemplary system for decomposing and verifying configurable hardware, according to embodiments of the invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0006" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0016" num="0015">In general, a method and apparatus for decomposing and verifying configurable hardware are described. Note, separate references to “one embodiment” in this description do not necessarily refer to the same embodiment; however, neither are such embodiments mutually exclusive, unless so stated and except as will be readily apparent to those skilled in the art. Further specific numeric references such as first memory, may be made. In general, the specific numeric reference should not be interpreted as a literal sequential order but rather interpreted that the first unit is different than a second unit. Thus, the specific details and implementations set forth are merely exemplary. Likewise, the present invention can include any variety of combinations and/or integrations of the example but not inclusive embodiments described herein.</p>
<p id="p-0017" num="0016">Herein, block diagrams illustrate exemplary embodiments of the invention. Also herein, flow diagrams illustrate operations of the exemplary embodiments of the invention. The operations of the flow diagrams will be described with reference to the exemplary embodiments shown in the block diagrams. However, it should be understood that the operations of the flow diagrams could be performed by embodiments of the invention other than those discussed with reference to the block diagrams, and embodiments discussed with references to the block diagrams could perform operations different than those discussed with reference to the flow diagrams.</p>
<p id="h-0007" num="0000">Overview</p>
<p id="p-0018" num="0017">In one embodiment of the invention, a generation and verification unit generates a configurable hardware system based on configuration data and a configurable hardware library. The configurable hardware system is made up of a number of units. In one embodiment of the invention, the generation and verification unit hierarchically decomposes a configurable hardware system into units that make up the system design. Configuration data is applied to each unit so that it can be removed and verified or analyzed outside of the system without changing the unit itself. The generation and verification unit creates a testbench, tests, and controlling scripts for each unit.</p>
<p id="p-0019" num="0018">Likewise, the generation and verification unit may automatically decompose a set of one or more units at a top level of a configurable hardware system design hierarchy into a set of two or more units of a lower level of the hardware system design hierarchy. The set of one or more units at a first lower level may include one or more units dynamically instantiated at design creation time. The set of one or more units at the first lower level may also include at least a first unit composed of a previously instantiated hardware system composed with two or more levels of units within the hardware system design hierarchy of the previously instantiated hardware system. Thus, the previous instantiated hardware system may be a completely functional system with all of its models and verification tests already generated. The previous instantiated hardware system may be being integrated into a new configurable hardware system as one part of that new system.</p>
<p id="p-0020" num="0019">The generation and verification unit may individually verify units of each hierarchy level of the new configurable hardware system design hierarchy successively from the lower levels to the first level with testbenches. The testbenches being the units under test and the corresponding models. However beneficially, the sequences of test inputs for the previously instantiated hardware system may be reused when testing that previously instantiated hardware system in the new configurable hardware system.</p>
<p id="h-0008" num="0000">Exemplary Architecture</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram for decomposing and verifying configurable hardware according to one embodiment of the invention. <figref idref="DRAWINGS">FIG. 1</figref> includes a generation and verification unit <b>103</b>, which further includes a generation module <b>107</b>, decomposition module <b>109</b>, and verification module <b>111</b>. The generation and verification unit <b>103</b> is connected to a configurable hardware library <b>101</b>, and a configuration data storage unit <b>105</b>. The configuration data storage unit <b>105</b> includes configuration data <b>113</b>. The generation and verification unit <b>103</b> generates a configurable hardware system <b>104</b> and its constituent units (illustrated as units <b>1</b>-N). One or more of the units stored in the configurable hardware library <b>101</b> may be a previously instantiated entire hardware system.</p>
<p id="p-0022" num="0021">In a configurable hardware system design hierarchy, the term “system” refers to the composition of units at a particular hierarchy level, where details of the units are hidden. Therefore, at a particular level in a configurable hardware system design hierarchy, units are indivisible components. However, at lower hierarchy levels, the units from a higher level have their details and internal components exposed. For example, referring to <figref idref="DRAWINGS">FIG. 1</figref>, at one design hierarchy level, the system <b>104</b> is viewed as a “black box” unit of a larger system, where the details about units <b>1</b>-N are concealed. However, at a lower design hierarchy level, the system <b>104</b> is viewed as including units <b>1</b>-N, where the unit connection details are exposed. At even lower levels of the configurable hardware system design hierarchy, the internal details of units <b>1</b>-N are exposed. At the lowest hierarchy level, a unit cannot be decomposed. The generation of system <b>104</b> and units <b>1</b>-N will be described in more detail below in <figref idref="DRAWINGS">FIG. 4</figref>.</p>
<p id="p-0023" num="0022">The configuration data storage unit <b>105</b> includes configuration data <b>113</b>, which hierarchically describes a configurable hardware system. For example, the configuration data <b>113</b> specifies the system and unit parameters at all relevant hierarchy levels. While the end user sets most parameters in the configuration data <b>113</b>, the generation and verification unit <b>103</b> sets some parameters during the hardware integration and/or decomposition process. The configuration data <b>113</b> for specific units may be supplied by a user through a text file, through input supplied by a user through a graphic user interface, or through a random configuration data generator. The configuration data <b>113</b> may be represented by any suitable electronic design automation scripting language, according to embodiments of the invention. In one embodiment of the invention, the configuration data <b>113</b> is represented in the tool control language (TCL) scripting language. In particular, the configuration data <b>113</b> may include a TCL text file defining a system design name, system-level parameters, unit-level names and parameters, unit-level connection parameters (e.g., number of wires in a signal bundle, handshaking protocols, pipelining behavior, etc.), and interface statements for binding unit instances to particular connections. In an alternative embodiment of the invention, this system information could be represented in the extensible markup language (XML) format or in a relational database.</p>
<p id="p-0024" num="0023">Because multiple instances of any particular hardware unit can be included in a hardware system, each unit instance is uniquely named in the configuration data <b>113</b>. Moreover, different instances of the same unit can be configured differently. For example, one instance of a FIFO may be configured to have a depth of 10 bytes, while another instance of a FIFO may be configured to have a depth of 100 bytes.</p>
<p id="p-0025" num="0024">The configurable hardware library <b>101</b> describes all possible configurations of the system's hardware components. For example, the configuration hardware library <b>101</b> may describe all possible configurations of a FIFO, including its depth, width, and other configurable parameters. In one embodiment of the invention, the configurable hardware library includes hardware description language (HDL) code (e.g. Verilog or VHDL) embedded with preprocessing statements that describe how to interpret the configuration data <b>113</b>.</p>
<p id="p-0026" num="0025">The configurable hardware library <b>101</b> contains the code for an instance of each potential unit. Thus, the Hardware Description Language Code describing a particular unit's design is exactly the same as that used in the system (top) level. The code for an instance of that unit is obtained from the configurable hardware library <b>101</b> rather than having an existing unit regenerate itself. During verification merely, the testbench components remain to be generated for each unit. In this way the actual system generated from code in the library will have been tested and verified rather than instances of similar units being tested and verified. In an embodiment, the code for units may come from the configurable hardware library <b>101</b> and/or by having an existing unit regenerate itself.</p>
<p id="p-0027" num="0026">Overall, the generation and verification unit <b>111</b> may automatically generate, decompose, and verify a configurable hardware system. A first instance of the configurable hardware system may be different in function than a second instance of the configurable hardware system. The generation and verification unit <b>111</b> may create code for each unique instance of a unit from configurable parameters based on configuration provided at design creation time.</p>
<p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. 2</figref> is a flow diagram illustrating the creation, decomposition, and verification of a configurable hardware system, according to embodiments of the invention. The operations of the flow diagram <b>200</b> will be described with reference to the block diagram of <figref idref="DRAWINGS">FIG. 1</figref>. At process block <b>202</b>, the configuration data is read. For example, according to the embodiment of the invention illustrated in <figref idref="DRAWINGS">FIG. 1</figref>, the generation module <b>107</b> of the generation and verification unit <b>103</b> reads the configuration data <b>113</b> from the configuration data storage unit <b>105</b>. As noted above, the configuration data <b>113</b> may be a TCL file that hierarchically defines a configurable hardware system. Control continues at block <b>204</b>.</p>
<p id="p-0029" num="0028">At block <b>204</b>, the configurable hardware library is analyzed. For example, the generation module <b>107</b> analyzes the configurable hardware library <b>101</b> to determine the possible configurations of the hardware components necessary for generating the hardware system defined by the configuration data <b>113</b>. Control continues at block <b>206</b>.</p>
<p id="p-0030" num="0029">As shown in block <b>206</b>, a configurable hardware system is created. For example, the generation module <b>107</b> creates a configurable hardware system based on the configuration data <b>113</b> and the configurable hardware library <b>101</b>. The operation of block <b>206</b> is further described below with reference to <figref idref="DRAWINGS">FIG. 3</figref>. Control continues at block <b>208</b>.</p>
<p id="p-0031" num="0030">At block <b>208</b>, the system is decomposed and the system and its components are verified. For example, the decomposition module <b>109</b> and the verification module <b>111</b> decompose and verify the system components. The operation in block <b>208</b> will be described in more detail below in the discussion of <figref idref="DRAWINGS">FIG. 5</figref>.</p>
<p id="p-0032" num="0031">It should be evident to one of ordinary skill in the art that the operations described in the flow diagram <b>200</b> could be repeated for generating and verifying hardware at any level in the hierarchical system design. For example, to verify a system at a particular hierarchy level, all of the system's components must be verified. This may require verifying lower level systems, which may in turn require verifying even lower level systems. Once the lowest level system is verified, the higher level systems may in turn be verified. Hence, the operations set forth in the flow diagram <b>200</b> can be repeated for creating and verifying systems and/or components at any design hierarchy level.</p>
<p id="p-0033" num="0032">Thus, the generation and verification unit <b>111</b> may automatically decompose a set of one or more units at a top level of a configurable hardware system design hierarchy into a set of two or more units of a lower level of the hardware system design hierarchy. The set of one or more units, such as Unit <b>1</b>-Unit N, at a first lower level may include one or more units dynamically instantiated at design creation time. The set of one or more units, such as Unit <b>1</b>-Unit N, at the first lower level may also include at least a first unit composed of a previously instantiated hardware system composed with two or more levels of units within the hardware system design hierarchy of the previously instantiated hardware system. Thus, the previous instantiated hardware system may be a completely functional system with all of its models and verification tests already generated. The previous instantiated hardware system may be being integrated into a new configurable hardware system as one part of that new system.</p>
<p id="p-0034" num="0033">The generation and verification unit <b>111</b> may individually verify units of each hierarchy level of the new configurable hardware system design hierarchy successively from the lower levels to the first level with testbenches. However beneficially, the sequences of test inputs for the previously instantiated hardware system may be reused when testing that previously instantiated hardware system in the new configurable hardware system.</p>
<p id="p-0035" num="0034">The generation and verification unit <b>111</b> can integrate that existing design into a new system with additional units. The generation and verification unit <b>111</b> treats the existing configurable hardware system design as a single unit in the new system. The generation and verification unit <b>111</b> may reuse the sequences of test inputs previously constructed for the existing design when testing that single unit in the new system.</p>
<p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. 3</figref> is a flow diagram illustrating the creation of a system, according to embodiments of the invention. The operations of the flow diagram <b>300</b> will be described with reference to the exemplary embodiment illustrated in <figref idref="DRAWINGS">FIG. 1</figref>. At decision block <b>302</b>, it is determined whether the configuration data conforms to rules for syntax and semantics. For example, the verification module <b>111</b> determines whether configuration data <b>113</b> from the configuration data storage unit <b>105</b> conforms to rules for syntax and semantics. As a more specific example, in an embodiment where the configuration data <b>113</b> is represented by a TCL text file, the verification module <b>111</b> verification module <b>111</b> determines whether the TCL file conforms to the syntax and semantics rules of the HDL used by the configurable hardware library <b>101</b>. In one embodiment, the verification module <b>111</b> verification module <b>111</b> employs a high-level language program (e.g., a C++, Python, or Java program) to analyze a TCL file for syntax and semantics. If the configuration data file conforms to the syntax and semantics rules, control continues at block <b>304</b>. Otherwise, the flow ends with an error report. Control continues at block <b>304</b>. Note, the verification module <b>111</b> may stipulate configuration data for a first unit to verify a specific set of parameters to cause a legal result for that set of parameters. The verification module <b>111</b> may stipulate configuration data for the first unit to verify a specific set of parameters intentionally causes a rule violation for that set of parameters prior to the first unit being part of a composed system or when the first unit is part of the composed system. Thus, the configuration data may be checked for errors at one or more points in the process.</p>
<p id="p-0037" num="0036">At block <b>304</b>, a set of parameters is derived for that unit. For example, the verification module <b>111</b> derives system parameters from the configuration data <b>113</b>. As a more specific example, in one embodiment, the verification module <b>111</b> derives the system's parameters by analyzing a TCL file, which defines a configurable hardware system. For example, a system parameter may specify the minimum bandwidth required for an internal communications path. From this setting, parameters for specifying the number of wires used at various connection points in the system are derived according to the rules in the configuration data. Control continues at block <b>306</b>.</p>
<p id="p-0038" num="0037">As shown in block <b>306</b>, the preprocessing statements are configured in code of a programming language based on the derived parameters. For example, in one embodiment of the invention, the verification module <b>111</b> configures HDL code preprocessing statements (stored in the configurable hardware library <b>101</b>) that are affected by the specified and derived parameters. In doing this, the verification module <b>111</b> may impart particular values or control structures to preprocessor statements embedded in the HDL code. Control continues at block <b>308</b>.</p>
<p id="p-0039" num="0038">As shown in block <b>308</b>, the HDL source code is preprocessed. For example, the verification module <b>111</b> preprocesses the HDL source code that was configured according to the derived parameters. In one embodiment of the invention, the verification module <b>111</b> includes a macro language preprocessor (e.g., a C preprocessor, an M4 preprocessor, or a SIMPLE preprocessor) for preprocessing the embedded HDL source code. Control continues at block <b>310</b>. At block <b>310</b>, the HDL code for the configurable hardware system specified in the configuration data is generated. For example, the verification module <b>111</b> generates the HDL code for the system specified in the configuration data <b>113</b> using HDL code from the configurable hardware library <b>101</b>. The configured code in the programming language is processed to emit a hardware description of the unique instance of the unit. From block <b>310</b>, control ends.</p>
<p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. 4</figref> is a conceptual block diagram of a system design according to embodiments of the invention. As described above, according to an embodiment of the invention, the operations of <figref idref="DRAWINGS">FIG. 3</figref> produce a system design represented in HDL code. <figref idref="DRAWINGS">FIG. 4</figref> provides a graphical representation of such a system. <figref idref="DRAWINGS">FIG. 4</figref> includes system <b>400</b>, which includes unit <b>1</b>, unit <b>2</b>, unit <b>3</b>, and unit <b>4</b>. In system <b>400</b>, unit <b>1</b> communicates to systems outside of the system <b>400</b> over a communication path <b>410</b>. Unit <b>1</b> is coupled to unit <b>2</b> and unit <b>3</b> with communication paths <b>401</b> and <b>403</b>, respectively. Unit <b>2</b> communicates with systems outside of system <b>400</b> through communication path <b>411</b>. Unit <b>3</b> is coupled to unit <b>4</b> with communication paths <b>405</b> and <b>408</b>. Unit <b>3</b> is also coupled to unit <b>2</b> with a communication path <b>409</b>.</p>
<p id="p-0041" num="0040">Unit <b>2</b>, illustrated with broken lines, is an optional unit in the system <b>400</b>. Connection paths <b>401</b> and <b>409</b> are also optional. For a given level of the system design hierarchy, a unit (or connection path) is optional when it is unknown whether factors external to the system will require the optional unit's functionality (e.g., a system at a higher level in the design hierarchy). For example, if system <b>400</b> could be configured to operate in two different modes, unit <b>2</b> would be optional if it's functionality were required by the first mode, but not by the second mode.</p>
<p id="p-0042" num="0041">Accordingly, the topology of units in the first instance of the configurable hardware system can be modified at design creation time. The topology of units in a system includes, for example, the number of units and which other units connect to a particular unit. Such modification allows the topology of units in the first instance of the configurable hardware system to be different from the topology of units in the second instance of the configurable hardware system. Thus, the arrangement of units in a system including number of units, the size of the units, which other units connect to a particular unit, etc. can be modified at the design creation time.</p>
<p id="p-0043" num="0042">The design creation time may be the design phase of an electronic system, such as a System on a Chip, which occurs before the fabrication of the electronic system. An electronic system design is typically functionally verified prior to the actual fabrication of the electronic system containing the design. Generally, as will be discussed in more detail later, in computer aided electronic system creation there exist two major stages: front-end processing and back-end processing.</p>
<p id="p-0044" num="0043"><figref idref="DRAWINGS">FIGS. 5 and 6</figref> illustrate how system <b>400</b> is decomposed and verified according to embodiments of the invention. <figref idref="DRAWINGS">FIG. 5</figref> is a flow diagram illustrating operations for decomposing and verifying a configurable hardware system according to embodiments of the invention. <figref idref="DRAWINGS">FIG. 6</figref> is a block diagram illustrating a testbench for verifying a unit according to embodiments of the invention. <figref idref="DRAWINGS">FIGS. 5 and 6</figref> will be described with reference to the exemplary system of <figref idref="DRAWINGS">FIG. 4</figref> and the exemplary embodiment of <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0045" num="0044">Referring to the flow diagram of <figref idref="DRAWINGS">FIG. 5</figref>, at block <b>502</b>, the configuration data <b>113</b> is mapped onto a selected unit's parameters. For example, the decomposition module <b>109</b> maps the configuration data <b>113</b> defining system <b>400</b> onto the parameters of a unit of system <b>400</b> (e.g., unit <b>1</b>). As a more specific example, the decomposition module <b>109</b> analyzes the configuration data <b>113</b> to determine how unit <b>1</b>'s parameters should be configured to meet the requirements of system <b>400</b>. Control continues at block <b>504</b>.</p>
<p id="p-0046" num="0045">At block <b>504</b>, for each connection to other units, interface models, monitors, and/or protocol checkers are added to the unit. For example, the verification module <b>111</b> analyzes the configuration data <b>113</b> to determine the connections for the selected unit (e.g., unit <b>1</b>). For each connection (e.g., communication path), the decomposition module <b>109</b> couples a model to the unit, which may include an interface driver model, an interface monitor, and/or a protocol checker. This operation is conceptually illustrated in <figref idref="DRAWINGS">FIG. 6</figref>. In FIG. <b>6</b>, model A is connected to unit <b>1</b> through communication path <b>403</b>, while model B is connected to unit <b>1</b> through communication path <b>401</b>. Model C is connected to unit <b>1</b> through communication path <b>410</b>. The test stimulus and response checking unit <b>415</b> is connected to models A, B, and C. The test stimulus and response checking unit <b>415</b> monitors and facilitates testing operations. In the testbench, models are used for sending and receiving information to the unit being verified. For example, models A and B will receive streams of data from unit <b>1</b> according to unit <b>1</b>'s parameters (e.g., according to the particular communication protocol defined for the particular communication path). Similarly, model C will transmit data to unit <b>1</b> according to unit <b>1</b>'s parameters. The particular data to be transmitted to and from the unit will be determined by the tests used for verifying the unit. These tests will be discussed in more detail below. From block <b>504</b>, control continues at block <b>506</b>.</p>
<p id="p-0047" num="0046">At block <b>506</b>, the configuration data is generated. For example, decomposition module <b>109</b> generates configuration data <b>113</b> specifying the selected unit's parameters. According to one embodiment of the invention, the decomposition module <b>109</b> generates configuration data <b>113</b> in the form of a TCL file, as described above in the discussion of <figref idref="DRAWINGS">FIG. 1</figref>. According to an alternative embodiment, the decomposition module <b>109</b> generates configuration data <b>113</b> in the form of an XML file.</p>
<p id="p-0048" num="0047">At block <b>508</b>, a design based on the configuration data <b>113</b> is generated. For example, the generation module <b>107</b> uses the configurable hardware library <b>101</b> to generate a configurable hardware system design based on the configuration data <b>113</b>. This operation is described in more detail above, in the discussion of <figref idref="DRAWINGS">FIG. 3</figref>. In one embodiment, the design is represented by HDL code. Control continues at block <b>510</b>.</p>
<p id="p-0049" num="0048">At block <b>510</b>, tests and scripts and/or inputs to an analysis tool are generated. For example, the verification module <b>111</b> generates tests and scripts for running the tests and/or inputs to analysis tools. From block <b>510</b>, control continues at block <b>512</b>. In generating the tests, the verification module <b>111</b> may use pre-existing tests that are known to verify the functionality of a particular unit or it may generate customized tests based on an analysis of the unit configuration. These tests will exercise and verify the functionality of the configured unit being tested. According to an embodiment of the invention, the verification module <b>111</b> generates tests that are capable of verifying any configuration of the unit. In this embodiment, the tests read the configuration data <b>113</b> and modify their stimulus accordingly while the test is running, rather than before testing begins. Accordingly, the sequences of test inputs for the one or more units dynamically instantiated at design creation time may be dynamically built at run time. The test generation may occur with run-time adaptation. Components and test sequences may be generated at run time rather than at compile time. Thus one program file determines what type and number of units are being tested and then another program generates the test sequences appropriate for those units. The verification module <b>111</b> can also generate scripts for automatically performing the tests.</p>
<p id="p-0050" num="0049">As noted above, the verification module <b>111</b> may use pre-existing tests or it may generate customized tests based on an analysis of the unit configuration. Thus, the verification module <b>111</b> during verification can use an existing collection of test components including the unit and its associated models while replacing a previously generated set of test input sequences with an entirely new set of test input sequences. The verification module <b>111</b> may reuse old test components with new sequences of inputs other then the original series of test input sequences to the circuit formed from those test components.</p>
<p id="p-0051" num="0050">Tests can be customized or replaced after testbenches are generated. In other words, the tests may be manipulated independently after the testbench is constructed.</p>
<p id="p-0052" num="0051">As an additional or alternative form of testing, the verification module <b>111</b> provides the design to an analysis tool, which performs a static analysis of the design. For example, according to one embodiment of the invention, the verification module <b>111</b> provides the unit design represented by HDL code to a static verification tool that analyzes the HDL code for errors. In one embodiment, the static verification tool generates warnings and or error messages based on its analysis of the HDL code.</p>
<p id="p-0053" num="0052">Thus, the generation and verification unit <b>103</b> may automatically decompose the configurable hardware system into the set of one or more units. The verification module <b>111</b> may create inputs into the static verification analysis tool that does not require an executing of a stimulus through the set of one or more units to verify the results of the static test. The static verification analysis may be performed as part of functional logic verification in a phase of electronic system and circuit design, which includes System on Chip design, to ensure that a configured logic design correctly implements the product specification for that logic design. The configurable hardware system may be customized at design creation time by using specified values for a set of parameters. Each instance of the configurable hardware system may be different in function than another instance of the configurable hardware system.</p>
<p id="p-0054" num="0053">An embodiment of an IP analysis tool can run other analysis tools such as code coverage (particularly merging results from bottom up), lint, formal verification, power analysis, gate-level simulation (as opposed to RTL simulation). The static verification analysis tool may be the lint test that performs rule checking, the formal verification test that performs a mathematical proof, or similar tool that does not require an executing of a stimulus, such as test input sequences, through the hardware model to verify the results of the static test.</p>
<p id="p-0055" num="0054">As shown in block <b>512</b>, the scripts are executed. For example, the verification module <b>111</b> executes the scripts, which automatically test and verify the selected unit.</p>
<p id="p-0056" num="0055">It should be apparent to one of ordinary skill in the art that the operations described in the flow diagram of <figref idref="DRAWINGS">FIG. 5</figref> can be repeated to verify any unit/system at any level in a design hierarchy.</p>
<p id="p-0057" num="0056">Referring to <figref idref="DRAWINGS">FIG. 1</figref>, the generation and verification unit <b>103</b>, configurable hardware library <b>101</b>, and configuration data storage unit <b>105</b> may be implemented in the form of a conventional computing platform, including one or more processors, application specific integrated circuits (ASICs), memories, and/or machine readable media whereon instructions are stored for performing operations according to embodiments of the invention. Machine-readable media includes any mechanism that provides (i.e., stores and/or transmits) information in a form readable by a machine (e.g., a computer). For example, a machine-readable medium includes read only memory (ROM); random access memory (RAM); magnetic disk storage media; optical storage media; flash memory devices; electrical, optical, acoustical or other form of propagated signals (e.g., carrier waves, infrared signals, digital signals, etc.); etc. In one embodiment, the units shown in <figref idref="DRAWINGS">FIG. 1</figref> are machine readable media executing on a processor to carryout the operations described herein. However, in alternative embodiments, the units of <figref idref="DRAWINGS">FIG. 1</figref> are other types of logic (e.g., digital logic) for executing the operations described herein. Alternatively, according to one embodiment of the invention, the generation and verification unit <b>103</b>, configurable hardware library <b>101</b>, and configuration data storage unit <b>105</b> can include one or more separate computer systems. It should also be understood that, according to embodiments of the invention, the components illustrated in <figref idref="DRAWINGS">FIG. 1</figref> could be distributed over a number of networked computers, wherein they could be remotely controlled and operated.</p>
<p id="p-0058" num="0057"><figref idref="DRAWINGS">FIG. 7</figref> illustrates an exemplary system for decomposing and verifying configurable hardware, according to embodiments of the invention. As illustrated in <figref idref="DRAWINGS">FIG. 7</figref>, computer system <b>700</b> comprises processor(s) <b>702</b>. Computer system <b>700</b> also includes a memory <b>732</b>, processor bus <b>710</b> and input/output controller hub (ICH) <b>740</b>. The processor(s) <b>702</b>, memory <b>732</b> and ICH <b>740</b> are coupled to the processor bus <b>710</b>. The processor(s) <b>702</b> may comprise any suitable processor architecture. For other embodiments of the invention, computer system <b>700</b> may comprise one, two, three, or more processors, any of which may execute a set of instructions that are in accordance with embodiments of the present invention.</p>
<p id="p-0059" num="0058">The memory <b>732</b> stores data and/or instructions, and may comprise any suitable memory, such as a dynamic random access memory (DRAM), for example. In one embodiment of the invention, the configuration hardware library <b>101</b>, generation and verification unit <b>103</b>, and configuration data storage unit <b>105</b> are stored in memory <b>732</b>. However, they may be stored in any or all IDE drive(s) <b>742</b>, memory <b>732</b>, and/or other suitable storage devices. A graphics controller <b>734</b> controls the display of information on a display device <b>737</b>, according to embodiments of the invention.</p>
<p id="p-0060" num="0059">The input/output controller hub (ICH) <b>740</b> provides an interface to I/O devices or peripheral components for computer system <b>700</b>. The ICH <b>740</b> may comprise any suitable interface controllers to provide for any suitable communication link to the processor(s) <b>702</b>, memory <b>732</b> and/or to any suitable device or component in communication with the ICH <b>740</b>. For one embodiment of the invention, the ICH <b>740</b> provides suitable arbitration and buffering for each interface.</p>
<p id="p-0061" num="0060">For one embodiment of the invention, the ICH <b>740</b> provides an interface to one or more suitable integrated drive electronics (IDE) drives <b>742</b>, such as a hard disk drive (HDD) or compact disc read only memory (CD ROM) drive for example, to store data and/or instructions for example, one or more suitable universal serial bus (USB) devices through one or more USB ports <b>744</b>. For one embodiment of the invention, the ICH <b>740</b> also provides an interface to a keyboard <b>751</b>, a mouse <b>752</b>, a floppy disk drive <b>755</b>, one or more suitable devices through one or more parallel ports <b>753</b> (e.g., a printer), and one or more suitable devices through one or more serial ports <b>754</b>. For one embodiment of the invention, the ICH <b>740</b> also provides a network interface <b>756</b> though which the computer system <b>700</b> can communicate with other computer and/or devices.</p>
<p id="p-0062" num="0061">Accordingly, computer system <b>700</b> includes a machine-readable medium on which is stored a set of instructions (i.e., software) embodying any one, or all, of the methodologies described herein. For example, software can reside, completely or at least partially, within memory <b>732</b> and/or within processor(s) <b>702</b>.</p>
<p id="p-0063" num="0062">As discussed, the software used to facilitate aspects of an electronic circuit and system design process can be embodied onto a machine-readable medium. A machine-readable medium includes any mechanism that provides (e.g., stores and/or transmits) information in a form readable by a machine (e.g., a computer). The information representing the apparatuses and/or methods stored on the machine-readable medium may be used in the process of creating the apparatuses and/or methods described herein. For example, the information representing the apparatuses and/or methods may be contained in an Instance, soft instructions in an IP generator, soft instructions in a testbench tool, or similar machine-readable medium storing this information.</p>
<p id="p-0064" num="0063">The IP generator may be used for making highly configurable hardware systems. In an embodiment, an example intellectual property generator may comprise the following: a graphic user interface; a common set of processing elements; and a library of files containing design elements such as circuits, control logic, and cell arrays that define the intellectual property generator. In an embodiment, a designer chooses the specifics of the configurable hardware system to produce a set of files defining the requested configurable hardware system instance. The configurable hardware system instance may include front-end views and back-end files.</p>
<p id="p-0065" num="0064">Front-end processing consists of the design and architecture stages, which includes design of the SOC schematic. The front-end views support documentation, simulation, debugging, and testing. The front-end processing may include connecting models, configuration of the design, simulating and tuning during the architectural exploration. The design is simulated and tested. Front-end processing traditionally includes simulation of the circuits within the SOC and verification that they work correctly. The integration of the electronic circuit design may include packing the cores, verifying the cores, simulation and debugging.</p>
<p id="p-0066" num="0065">Back-end processing traditionally includes programming of the physical layout of the SOC such as placing and routing, or floor planning, of the circuit elements on the chip layout, as well as the routing of all interconnects between components. The back-end files, such as a layout, physical LEF, etc are for layout and fabrication. Thus, the floor plan may be generated imported and edited. After this, the design may be outputted into a Netlist of one or more hardware design languages (HDL) such as Verilog, VHDL or Spice. A Netlist describes the connectivity of an electronic design such as the components included in the design, the attributes of each component and the interconnectivity amongst the components. After the Netlist is generated synthesizing may occur. Accordingly, back-end processing further comprises the physical verification of the layout to verify that it is physically manufacturable and the resulting SOC will not have any function-preventing physical defects. If there are defects, the placement of circuit elements and interconnect routing is revisited, which requires one or more revisions to the Netlist. Such a process can lead to increased design time, since the physical placement of the components happens much later in the design stages.</p>
<p id="p-0067" num="0066">While the invention has been described in terms of several embodiments, those skilled in the art will recognize that the invention is not limited to the embodiments described. For example, units in a configurable hardware system may be expressed in a general programming language instead of a hardware description language. The configurable hardware code may be represented in the general-purpose programming language. Such configurable hardware code emits a hardware description when executed. Scripts written in the general purpose programming language may be used to generate the code to create units in the configurable hardware system and to create tests to functionally verify those units. C++, Java, Python, natively or derivations of, may all be examples of general programming languages. Similarly, SystemC may be used for hardware modeling and testing rather then a hardware description language. The functions of one module may be combined with another module or spread out into two or more discrete modules. The method and apparatus of the invention can be practiced with modification and alteration within the spirit and scope of the appended claims. The description is thus to be regarded as illustrative instead of limiting on the invention.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>We claim:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method, comprising:
<claim-text>automatically decomposing a set of one or more units at a first level of a configurable hardware system design hierarchy into a set of two or more units of a lower level of the hardware system design hierarchy, wherein the set of one or more units at a first level includes one or more units dynamically instantiated at design creation time as well as at least a first unit composed of a previously instantiated hardware system composed with two or more levels of units within the hardware system design hierarchy of the previously instantiated hardware system; and</claim-text>
<claim-text>individually verifying units of each hierarchy level of the hardware system design hierarchy successively from the lower levels to the first level with testbenches, wherein the sequences of test inputs for the previously instantiated hardware system are reused when testing that previously instantiated hardware system in the configurable hardware system.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>using a general purpose programming language to create units in the configurable hardware system and to create tests to functionally verify those units.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein a first unit in a configurable hardware system is expressed in a general programming language instead of a hardware description language.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>dynamically building at run time, sequences of test inputs for the one or more units dynamically instantiated at design creation time.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. An apparatus generated by the method of <claim-ref idref="CLM-00001">claim 1</claim-ref>.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. A machine readable medium that contains instructions, which when executed by the machine to cause the machine to perform the operations of <claim-ref idref="CLM-00001">claim 1</claim-ref>.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>using a SystemC programming language to create units in the configurable hardware system and to create tests to functionally verify those units.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>using a Hardware Description Language to create units in the configurable hardware system and to create tests to functionally verify those units.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. An apparatus, comprising:
<claim-text>a generation and verification unit to automatically generate, decompose, and verify a configurable hardware system; wherein a first instance of the configurable hardware system is different in function than a second instance of the configurable hardware system, and the generation and verification unit to create code for a unique instance of a unit from configurable parameters based on configuration data provided at design creation time.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The apparatus of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the generation and verification unit creates code for the unique instance of the unit from configurable parameters based on configuration data using a verification module that determines:
<claim-text>whether the configuration data conforms to rules for syntax and semantics;</claim-text>
<claim-text>what a set of derived parameters should be for that unit; and</claim-text>
<claim-text>processes configured code in a programming language to emit a hardware description of the unique instance of the unit.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The apparatus of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the generation and verification unit creates code for the unique instance of the unit from configurable parameters based on configuration data using the verification module that determines:
<claim-text>whether the configuration data conforms to rules for syntax and semantics;</claim-text>
<claim-text>what a set of derived parameters should be for that unit; and</claim-text>
<claim-text>configures code in a programming language with preprocessing statements based on the set of derived parameters.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The apparatus of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the generation and verification unit has a generation module to determine at design creation time a topology of units in a first instance of the configurable hardware system, and the topology of units in the first instance of the configurable hardware system is different from the topology of units in a second instance of the configurable hardware system.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The apparatus of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the generation and verification unit includes
<claim-text>a hardware library to store a previously instantiated collection of test components including a first unit and its associated models; and</claim-text>
<claim-text>a verification module to replace a first set of test input sequences with a second set of test input sequences to execute on the test components.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The apparatus of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the generation and verification unit has a decomposition module to determine at run time what type and number of units are being tested to allow test sequences appropriate for those units to be generated.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The apparatus of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the configurable hardware system is for a System on a Chip.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The apparatus of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the generation and verification unit has a verification module to obtain configuration data for a first unit to verify if a specific set of parameters causes a legal result or a rule violation for the specific set of parameters prior to the first unit being part of a composed system.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The apparatus of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the generation and verification unit has a generation module to receive configuration data for a first unit supplied by a user through a text file, supplied by a user through a graphic user interface, or supplied through a random configuration data generator.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The apparatus of <claim-ref idref="CLM-00009">claim 9</claim-ref>, further comprising
<claim-text>a library to store code in a programming language for an instance of a unit, wherein the generation and verification unit to obtain the code for a first instance of the unit from the library.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. A method, comprising:
<claim-text>automatically decomposing a configurable hardware system into a set of one or more units;</claim-text>
<claim-text>creating inputs into a static verification analysis tool that does not require an executing of a stimulus through the set of one or more units to verify the results of the static test; and</claim-text>
<claim-text>performing the static verification analysis as part of functional logic verification in a phase of electronic system and circuit design to ensure that a configured logic design correctly implements a product specification for that logic design, wherein the configurable hardware system is customized at design creation time by using specified values for a set of parameters and a first instance of the configurable hardware system is different in function than a second instance of the configurable hardware system.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The method of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the electronic system and circuit design is for a System on a Chip.</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. An apparatus generated by the method of <claim-ref idref="CLM-00019">claim 19</claim-ref>.</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. A machine readable medium that contains instructions, which when executed by the machine to cause the machine to perform the operations of <claim-ref idref="CLM-00019">claim 19</claim-ref>.</claim-text>
</claim>
</claims>
</us-patent-grant>
