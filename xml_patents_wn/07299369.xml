<us-patent-grant lang="EN" dtd-version="v4.2 2006-08-23" file="US07299369-20071120.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20071106" date-publ="20071120">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>07299369</doc-number>
<kind>B2</kind>
<date>20071120</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>10486301</doc-number>
<date>20020808</date>
</document-id>
</application-reference>
<us-application-series-code>10</us-application-series-code>
<priority-claims>
<priority-claim sequence="01" kind="national">
<country>GB</country>
<doc-number>0119501.5</doc-number>
<date>20010810</date>
</priority-claim>
</priority-claims>
<rule-47-flag/>
<us-term-of-grant>
<us-term-extension>204</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>1</main-group>
<subgroup>32</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>713320</main-classification>
<further-classification>712233</further-classification>
</classification-national>
<invention-title id="d0e73">Power reduction in microprocessor systems</invention-title>
<references-cited>
<citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5790874</doc-number>
<kind>A</kind>
<name>Takano et al.</name>
<date>19980800</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5854935</doc-number>
<kind>A</kind>
<name>Enomoto</name>
<date>19981200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00003">
<document-id>
<country>EP</country>
<doc-number>0 926 596</doc-number>
<kind>A</kind>
<date>19990600</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00004">
<document-id>
<country>EP</country>
<doc-number>1 065 591</doc-number>
<kind>A</kind>
<date>20010100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
</references-cited>
<number-of-claims>12</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>713300</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>713320</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>712233</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>1</number-of-drawing-sheets>
<number-of-figures>2</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20050229017</doc-number>
<kind>A1</kind>
<date>20051013</date>
</document-id>
</related-publication>
</us-related-documents>
<parties>
<applicants>
<applicant sequence="001" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Webster</last-name>
<first-name>Paul</first-name>
<address>
<city>Cambridge</city>
<country>GB</country>
</address>
</addressbook>
<nationality>
<country>GB</country>
</nationality>
<residence>
<country>GB</country>
</residence>
</applicant>
<applicant sequence="002" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Endecott</last-name>
<first-name>Phil</first-name>
<address>
<city>Cambridge</city>
<country>GB</country>
</address>
</addressbook>
<nationality>
<country>GB</country>
</nationality>
<residence>
<country>GB</country>
</residence>
</applicant>
<applicant sequence="003" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Mycroft</last-name>
<first-name>Alan</first-name>
<address>
<city>Cambridge</city>
<country>GB</country>
</address>
</addressbook>
<nationality>
<country>GB</country>
</nationality>
<residence>
<country>GB</country>
</residence>
</applicant>
</applicants>
</parties>
<assignees>
<assignee>
<addressbook>
<orgname>AT&amp;T Corp.</orgname>
<role>02</role>
<address>
<city>New York</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Treat</last-name>
<first-name>William M.</first-name>
<department>2181</department>
</primary-examiner>
</examiners>
<pct-or-regional-filing-data>
<document-id>
<country>WO</country>
<doc-number>PCT/GB02/03637</doc-number>
<kind>00</kind>
<date>20020808</date>
</document-id>
<us-371c124-date>
<date>20050216</date>
</us-371c124-date>
</pct-or-regional-filing-data>
<pct-or-regional-publishing-data>
<document-id>
<country>WO</country>
<doc-number>WO03/014919</doc-number>
<kind>A </kind>
<date>20030220</date>
</document-id>
</pct-or-regional-publishing-data>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">method of preventing an electronic file containing a computer virus from infecting a computer system using the Symbian™ operating system, the method comprising the steps of scanning files using an anti-virus application, and if an infected file is identified, maintaining the file in an open non-sharing state, whereby other applications running on the computer system may not operate on an infected file.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="143.59mm" wi="148.34mm" file="US07299369-20071120-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="219.37mm" wi="147.83mm" file="US07299369-20071120-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<p id="p-0002" num="0001">This application claims the benefit of International Patent Application Number PCT/GB02/03637, filed Aug. 8, 2002, which claims priority to Great Britain Patent Application No. 0119501.5, filed Aug. 10, 2001.</p>
<p id="p-0003" num="0002">The invention relates to power reduction in microprocessor systems comprising a microprocessor and a memory connected by at least one bus.</p>
<p id="p-0004" num="0003">The methods described in this specification aim to improve the processor's average inter-instruction Hamming distance. The next few paragraphs describe this metric and explain its relation to power efficiency.</p>
<p id="p-0005" num="0004">The Hamming distance between two binary numbers is the count of the number of bits that differ between them. For example:</p>
<p id="p-0006" num="0005">
<tables id="TABLE-US-00001" num="00001">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="1" colwidth="77pt" align="center"/>
<colspec colname="2" colwidth="63pt" align="center"/>
<colspec colname="3" colwidth="77pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="3" align="center" rowsep="1"/>
</row>
<row>
<entry>Numbers in</entry>
<entry>Numbers in binary</entry>
<entry>Hamming</entry>
</row>
<row>
<entry>decimal</entry>
<entry>(inc. leading zeros)</entry>
<entry>distance</entry>
</row>
<row>
<entry namest="1" nameend="3" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>4 and 5 </entry>
<entry>0100 and 0101</entry>
<entry>1</entry>
</row>
<row>
<entry>7 and 10</entry>
<entry>0111 and 1010</entry>
<entry>3</entry>
</row>
<row>
<entry>0 and 15</entry>
<entry>0000 and 1111</entry>
<entry>4</entry>
</row>
<row>
<entry namest="1" nameend="3" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0007" num="0006">Hamming distance is related to power efficiency because of the way that binary numbers are represented by electrical signals. Typically a steady low voltage on a wire represents a binary 0 bit and a steady high voltage represents a binary 1 bit. A number will be represented using these voltage levels on a group of wires, with one wire per bit. Such a group of wires is called a bus. Energy is used when the voltage on a wire is changed. The amount of energy depends on the magnitude of the voltage change and the capacitance of the wire. The capacitance depends to a large extent on the physical dimensions of the wire. So when the number represented by a bus changes, the energy consumed depends on the number of bits that have changed—the Hamming distance—between the old and new values, and on the capacitance of the wires.</p>
<p id="p-0008" num="0007">If one can reduce the average Hamming distance between successive values on a high-capacitance bus, keeping all other aspects of the system the same, the system's power efficiency will have been increased.</p>
<p id="p-0009" num="0008">The capacitance of wires internal to an integrated circuit is small compared to the capacitance of wires fabricated on a printed circuit board due to the larger physical dimensions of the latter. Many systems have memory and microprocessor in distinct integrated circuits, interconnected by a printed circuit board. Therefore we aim to reduce the average Hamming distance between successive values on the microprocessor-memory interface bus, as this will have a particularly significant influence on power efficiency.</p>
<p id="p-0010" num="0009">Even in systems where microprocessor and memory are incorporated into the same integrated circuit the capacitance of the wires connecting them will be larger than average, so even in this case reduction of average Hamming distance on the microprocessor-memory interface is worthwhile.</p>
<p id="p-0011" num="0010">Processor-memory communications perform two tasks. Firstly, the processor fetches its program from the memory, one instruction at a time. Secondly, the data that the program is operating on is transferred back and forth. Instruction fetch makes up the majority of the processor-memory communications.</p>
<p id="p-0012" num="0011">The instruction fetch bus is the bus on which instructions are communicated from the memory to the processor. We aim to reduce the average Hamming distance on this bus, i.e. to reduce the average Hamming distance from one instruction to the next.</p>
<p id="p-0013" num="0012">In a non-pipelined processor, each instruction is executed completely before the processor begins to execute the next one.</p>
<p id="p-0014" num="0013">When a processor is pipelined, it will have a number of instructions in various states of simultaneous execution. Depending on the depth of the pipeline, one or more instructions will have been fetched from program memory before the current instruction is executed. For example, in a typical four-stage pipeline:</p>
<p id="p-0015" num="0014">
<tables id="TABLE-US-00002" num="00002">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="126pt" align="left"/>
<colspec colname="1" colwidth="91pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>→ Time</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="8">
<colspec colname="1" colwidth="28pt" align="left"/>
<colspec colname="2" colwidth="21pt" align="left"/>
<colspec colname="3" colwidth="28pt" align="left"/>
<colspec colname="4" colwidth="28pt" align="left"/>
<colspec colname="5" colwidth="28pt" align="left"/>
<colspec colname="6" colwidth="28pt" align="left"/>
<colspec colname="7" colwidth="28pt" align="left"/>
<colspec colname="8" colwidth="28pt" align="left"/>
<tbody valign="top">
<row>
<entry>Instr #1</entry>
<entry>Fetch</entry>
<entry>Decode</entry>
<entry>Execute</entry>
<entry>Write</entry>
<entry/>
<entry/>
<entry/>
</row>
<row>
<entry>Instr #2</entry>
<entry/>
<entry>Fetch</entry>
<entry>Decode</entry>
<entry>Execute</entry>
<entry>Write</entry>
</row>
<row>
<entry>Instr #3</entry>
<entry/>
<entry/>
<entry>Fetch</entry>
<entry>Decode</entry>
<entry>Execute</entry>
<entry>Write</entry>
</row>
<row>
<entry>Instr #4</entry>
<entry/>
<entry/>
<entry/>
<entry>Fetch</entry>
<entry>Decode</entry>
<entry>Execute</entry>
<entry>Write</entry>
</row>
<row>
<entry namest="1" nameend="8" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0016" num="0015">By the time instruction #<b>1</b> reaches the execute stage, instruction #<b>2</b> has already been fetched.</p>
<p id="p-0017" num="0016">For sequential program execution, this parallelism helps increase the instruction throughput of the processor, as one instruction completes execution on every clock cycle. However, when the executed instruction causes a change in the flow of execution (such as a branch or a jump), there is an unwanted instruction from the location after the branch that will have been fetched prior to the time the branch instruction is executed. Some processors may simply execute this instruction; this is called a delayed branch.</p>
<p id="p-0018" num="0017">This invention applies to those processors that choose to discard this instruction instead. When the branch is taken, the fetched instruction is cancelled, for example by internally converting it into a no-operation instruction.</p>
<p id="p-0019" num="0018">
<tables id="TABLE-US-00003" num="00003">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="133pt" align="left"/>
<colspec colname="1" colwidth="84pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>→ Time</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="8">
<colspec colname="1" colwidth="35pt" align="left"/>
<colspec colname="2" colwidth="21pt" align="left"/>
<colspec colname="3" colwidth="28pt" align="left"/>
<colspec colname="4" colwidth="28pt" align="left"/>
<colspec colname="5" colwidth="28pt" align="left"/>
<colspec colname="6" colwidth="28pt" align="left"/>
<colspec colname="7" colwidth="28pt" align="left"/>
<colspec colname="8" colwidth="21pt" align="left"/>
<tbody valign="top">
<row>
<entry>Branch:</entry>
<entry>Fetch</entry>
<entry>Decode</entry>
<entry>Execute</entry>
<entry>Write</entry>
<entry/>
<entry/>
<entry/>
</row>
<row>
<entry>Cancelled:</entry>
<entry/>
<entry>Fetch</entry>
<entry><img id="CUSTOM-CHARACTER-00001" he="2.46mm" wi="7.79mm" file="US07299369-20071120-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/> </entry>
<entry><img id="CUSTOM-CHARACTER-00002" he="2.46mm" wi="8.47mm" file="US07299369-20071120-P00002.TIF" alt="custom character" img-content="character" img-format="tif"/> </entry>
<entry><img id="CUSTOM-CHARACTER-00003" he="2.79mm" wi="6.01mm" file="US07299369-20071120-P00003.TIF" alt="custom character" img-content="character" img-format="tif"/> </entry>
</row>
<row>
<entry>Branch</entry>
<entry/>
<entry/>
<entry>Fetch</entry>
<entry>Decode</entry>
<entry>Execute</entry>
<entry>Write</entry>
</row>
<row>
<entry>Target:</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry/>
<entry>Fetch</entry>
<entry>Decode</entry>
<entry>Execute</entry>
<entry>Write</entry>
</row>
<row>
<entry namest="1" nameend="8" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0020" num="0019">In a deeper pipeline, more than one instruction may be in the process of being decoded for execution, so more than one instruction may need to be cancelled.</p>
<p id="p-0021" num="0020">According to the invention there is provided a method of reducing the power of a microprocessor system, a program, and a reduced power microprocessor system as set out in the accompanying claims.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0001" level="1">Embodiments of the invention will now be described, by way of example only, with reference to the accompanying figures:</heading>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 1</figref> is a schematic diagram of a micropressor and memory in accordance with the invention.</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 2</figref> is a block diagram showing a method according to one embodiment of the invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<p id="p-0024" num="0023">The accompanying figure shows a microprocessor system <b>2</b> suitable for implementation of the invention. The microprocessor system <b>2</b> comprises a microprocessor <b>4</b> connected to a memory <b>6</b> by a bus <b>8</b>. The microprocessor <b>4</b> and memory <b>6</b> may of course be incorporated into the same integrated circuit.</p>
<p id="p-0025" num="0024">Consider the activity on the instruction bus for the branch example given above. When the second instruction is fetched, there will be a number of bit transitions, T<sub>1</sub>. Similarly, when the target of the branch is fetched, there will be a second set of transitions T<sub>2</sub>. When the branch is taken, the second instruction is thrown away, so no useful work is obtained for the bit transitions. We would like to eliminate the number of transitions ‘wasted’ when fetching the second instruction. We conclude that, in the cases when a branch is taken, it is better to fill the subsequent instruction in the program with a replicate copy of the branch instruction.</p>
<p id="p-0026" num="0025">The second instruction will never be executed, as it will be cancelled internally. By duplicating the previous branch, the bit pattern will be identical to the previous one, so there will be no transitions on the instruction bus.</p>
<p id="p-0027" num="0026">As well as these unconditional branches, there are also branches that are conditional on the result of a previous operation. In this case duplication is still possible, but the decision whether or not to replicate the branch depends on the relative frequency of when the branch is taken.</p>
<p id="p-0028" num="0027">Both of these cases will now be considered in more detail, as described with reference to a method <b>200</b> shown in <figref idref="DRAWINGS">FIG. 2</figref>, which considers both conditional and unconditional branch instructions (step <b>210</b>).</p>
<p id="p-0029" num="0028">The unconditional branches that can be replicated (step <b>220</b>) include the early exit portion of a loop, or the jump back to a saved return address from a function call. It does not include jumps to subroutines, as subroutines return to the point from which they were called and any duplication would cause them to be called multiple times.</p>
<p id="p-0030" num="0029">Unconditional branches are always taken, so they should always be replicated (step <b>250</b>) to minimise power. When generating the code, each instruction can be output ‘n’ times, where ‘n’ is the depth of the pre-fetch, or branch shadow, in the instruction pipeline. Care must be taken that the address or offset contained in the immediate field of the jump is the same in all cases.</p>
<p id="p-0031" num="0030">Consider the following code fragment, complete with assembled bit patterns:</p>
<p id="p-0032" num="0031">
<tables id="TABLE-US-00004" num="00004">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="4">
<colspec colname="1" colwidth="21pt" align="left"/>
<colspec colname="2" colwidth="28pt" align="left"/>
<colspec colname="3" colwidth="49pt" align="left"/>
<colspec colname="4" colwidth="119pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="4" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>movi</entry>
<entry>%0, #0</entry>
<entry>00001000000000000000000000000000</entry>
</row>
<row>
<entry/>
<entry>movi</entry>
<entry>%1, #1</entry>
<entry>00001000000000010000000000000001</entry>
</row>
<row>
<entry>L1:</entry>
<entry>st.b</entry>
<entry>(%2), %1</entry>
<entry>01000100010000010000000000000000</entry>
</row>
<row>
<entry/>
<entry>st.b</entry>
<entry>(%2), %0</entry>
<entry>01000100010000000000000000000000</entry>
</row>
<row>
<entry/>
<entry>jmp</entry>
<entry>L1</entry>
<entry>01111011111111111111111111110100</entry>
</row>
<row>
<entry>L2:</entry>
<entry>addi</entry>
<entry>%0, %0, #−10</entry>
<entry>00010000000000001111111111110110</entry>
</row>
<row>
<entry namest="1" nameend="4" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0033" num="0032">For every iteration of the loop, the instruction at L<b>2</b> will be fetched following the unconditional ‘JMP’ jump instruction. However, it will never be executed. Fetching the shadow instruction causes 15 transitions. This will then be followed by a further 19 transitions when the instruction at L<b>1</b> is fetched.</p>
<p id="p-0034" num="0033">Duplicating the JMP into the branch shadow produces the following code:</p>
<p id="p-0035" num="0034">
<tables id="TABLE-US-00005" num="00005">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="4">
<colspec colname="1" colwidth="21pt" align="left"/>
<colspec colname="2" colwidth="28pt" align="left"/>
<colspec colname="3" colwidth="49pt" align="left"/>
<colspec colname="4" colwidth="119pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="4" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>movi</entry>
<entry>%0, #0</entry>
<entry>00001000000000000000000000000000</entry>
</row>
<row>
<entry/>
<entry>movi</entry>
<entry>%1, #1</entry>
<entry>00001000000000010000000000000001</entry>
</row>
<row>
<entry>L1:</entry>
<entry>st.b</entry>
<entry>(%2), %1</entry>
<entry>01000100010000010000000000000000</entry>
</row>
<row>
<entry/>
<entry>st.b</entry>
<entry>(%2), %0</entry>
<entry>01000100010000000000000000000000</entry>
</row>
<row>
<entry/>
<entry>jmp</entry>
<entry>L1</entry>
<entry>01111011111111111111111111110100</entry>
</row>
<row>
<entry/>
<entry>jmp</entry>
<entry>(L1 + 4)</entry>
<entry><i>01111011111111111111111111110100</i></entry>
</row>
<row>
<entry>L2:</entry>
<entry>addi</entry>
<entry>%0, %0, #−10</entry>
<entry>00010000000000001111111111110110</entry>
</row>
<row>
<entry namest="1" nameend="4" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0036" num="0035">Because branch targets are specified as offsets relative to the current instruction address, the destination of the replicated branch is no longer L<b>1</b> but is rather the instruction following L<b>1</b> to ensure the branch offset is the same. This reduces the number of transitions by 9.</p>
<p id="p-0037" num="0036">A conditional branch is not always taken, so deciding when to replicate it is harder. Conditional branches can always be replicated without affecting the overall program behaviour. If the conditional branch is taken, then the replicate instructions in the branch shadow will not be executed; if the branch is not taken, then the condition will be the same for all of the replicates and none of them will be taken. However, in this second case, every branch that is not taken will still pass through the pipeline, thereby reducing total instruction throughput.</p>
<p id="p-0038" num="0037">Duplicating conditional branches will always reduce the number of transitions, albeit at the possible expense of instruction throughput.</p>
<p id="p-0039" num="0038">Consider the following code:</p>
<p id="p-0040" num="0039">
<tables id="TABLE-US-00006" num="00006">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="4">
<colspec colname="1" colwidth="21pt" align="left"/>
<colspec colname="2" colwidth="28pt" align="left"/>
<colspec colname="3" colwidth="49pt" align="left"/>
<colspec colname="4" colwidth="119pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="4" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>L1:</entry>
<entry>ld.bu</entry>
<entry>%0, (%1)</entry>
<entry>01000000001000000000000000000000</entry>
</row>
<row>
<entry/>
<entry>st.b</entry>
<entry>(%1), %0</entry>
<entry>01000100001000000000000000000000</entry>
</row>
<row>
<entry/>
<entry>bnz</entry>
<entry>%0, L1</entry>
<entry>01101100000000001111111111110100</entry>
</row>
<row>
<entry>L2:</entry>
<entry>addi</entry>
<entry>%0, %0, #−10</entry>
<entry>00010000000000001111111111110110</entry>
</row>
<row>
<entry namest="1" nameend="4" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0041" num="0040">The ‘BNZ’ instruction is a conditional branch that jumps to the destination label if the value in the source register (in this assembler notation, %0 represents register zero) contains a non-zero value. Hence the mnemonic BNZ—Branch if Non-Zero.</p>
<p id="p-0042" num="0041">When we take the branch, the number of ‘wasted’ transitions is 6, followed by a further 17 transitions to reach the target instruction. If we replicate the branch, then we would end up with the following code:</p>
<p id="p-0043" num="0042">
<tables id="TABLE-US-00007" num="00007">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="4">
<colspec colname="1" colwidth="21pt" align="left"/>
<colspec colname="2" colwidth="28pt" align="left"/>
<colspec colname="3" colwidth="49pt" align="left"/>
<colspec colname="4" colwidth="119pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="4" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>L1:</entry>
<entry>ld.bu</entry>
<entry>%0, (%1)</entry>
<entry>01000000001000000000000000000000</entry>
</row>
<row>
<entry/>
<entry>st.b</entry>
<entry>(%1), %0</entry>
<entry>01000100001000000000000000000000</entry>
</row>
<row>
<entry/>
<entry>bnz</entry>
<entry>%0, L1</entry>
<entry>01101100000000001111111111110100</entry>
</row>
<row>
<entry/>
<entry>bnz</entry>
<entry>%0, (L1 + 4)</entry>
<entry><i>01101100000000001111111111110100</i></entry>
</row>
<row>
<entry>L2:</entry>
<entry>addi</entry>
<entry>%0, %0, #−10</entry>
<entry>00010000000000001111111111110110</entry>
</row>
<row>
<entry namest="1" nameend="4" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0044" num="0043">In the cases where the branch is taken, the number of transitions is reduced by 6 transitions. When the branch is not taken, the number of transitions is identical to the original non-replicated program. However, the replicate branch is effectively a no-operation, so the ‘exit’ case of the loop will take an additional cycle to execute.</p>
<p id="p-0045" num="0044">Depending on the relative frequency of the branch being taken compared to the branch not being taken, this additional execution overhead may be insignificant.</p>
<p id="p-0046" num="0045">Given that duplicating infrequently taken branches will reduce instruction throughput for little power-saving benefit, some additional analysis to identify which branches should be replicated is beneficial (step <b>230</b>). One way of achieving this is through the use of code profiling. Another is through the use of simple branch characteristic heuristics.</p>
<p id="p-0047" num="0046">Code profiling will be discussed first.</p>
<p id="p-0048" num="0047">Initially, the application is run without any branch duplication. For each conditional branch, a count is kept of the number of times the branch is taken verses when it is not taken. The code is then recompiled, but this time using the statistics from the profiler. Only the conditional branches that are taken more frequently than a threshold selected by the user can be replicated. This threshold value represents a trade-off between power saving and instruction throughput.</p>
<p id="p-0049" num="0048">Branch heuristics will now be discussed.</p>
<p id="p-0050" num="0049">Consider the following C code fragment:</p>
<p id="p-0051" num="0050">
<tables id="TABLE-US-00008" num="00008">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="offset" colwidth="35pt" align="left"/>
<colspec colname="1" colwidth="14pt" align="right"/>
<colspec colname="2" colwidth="168pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="2" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry/>
<entry>int example(int size, int *flags, int *value) {</entry>
</row>
<row>
<entry/>
<entry/>
<entry> int loop, result;</entry>
</row>
<row>
<entry/>
<entry>1</entry>
<entry> size= (size&lt;0) ? −size : size;</entry>
</row>
<row>
<entry/>
<entry>2</entry>
<entry> for (loop= 0; loop&lt;size; loop++) {</entry>
</row>
<row>
<entry/>
<entry>3</entry>
<entry>  if(*(flags++)) {</entry>
</row>
<row>
<entry/>
<entry>4</entry>
<entry>   result += *(values++);</entry>
</row>
<row>
<entry/>
<entry/>
<entry>  }</entry>
</row>
<row>
<entry/>
<entry/>
<entry> }</entry>
</row>
<row>
<entry/>
<entry>5</entry>
<entry> return result;</entry>
</row>
<row>
<entry/>
<entry/>
<entry>}</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0052" num="0051">Compiling this code for our example instruction set produces the following assembly code:</p>
<p id="p-0053" num="0052">
<tables id="TABLE-US-00009" num="00009">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="35pt" align="center"/>
<colspec colname="2" colwidth="182pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>example:</entry>
<entry/>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="5">
<colspec colname="1" colwidth="14pt" align="right"/>
<colspec colname="2" colwidth="21pt" align="left"/>
<colspec colname="3" colwidth="28pt" align="left"/>
<colspec colname="4" colwidth="35pt" align="left"/>
<colspec colname="5" colwidth="119pt" align="left"/>
<tbody valign="top">
<row>
<entry>1</entry>
<entry/>
<entry>bnn</entry>
<entry>%0, L3</entry>
<entry>01110100000000000000000000000100</entry>
</row>
<row>
<entry/>
<entry/>
<entry>rsubi</entry>
<entry>%0, %0,</entry>
<entry>01100100000000000000000000000000</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>#0</entry>
</row>
<row>
<entry/>
<entry>L3:</entry>
<entry>cmplti</entry>
<entry>%7, %0,</entry>
<entry>00011000000001110000000000000001</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>#1</entry>
</row>
<row>
<entry>2</entry>
<entry/>
<entry>bnz</entry>
<entry>%7, L5</entry>
<entry>01101000111000000000000000100000</entry>
</row>
<row>
<entry/>
<entry>L7:</entry>
<entry>ld.w</entry>
<entry>%7, (%1)</entry>
<entry>01010100001001110000000000000000</entry>
</row>
<row>
<entry/>
<entry/>
<entry>addi</entry>
<entry>%1, %1,</entry>
<entry>00010000001000010000000000000100</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>#4</entry>
</row>
<row>
<entry>3</entry>
<entry/>
<entry>bz</entry>
<entry>%7, L6</entry>
<entry>01101000111000000000000000001100</entry>
</row>
<row>
<entry/>
<entry/>
<entry>ld.w</entry>
<entry>%7, (%2)</entry>
<entry>01010100010001110000000000000000</entry>
</row>
<row>
<entry/>
<entry/>
<entry>add</entry>
<entry>%6, %6,</entry>
<entry>00000000110001110000000010000110</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>%7</entry>
</row>
<row>
<entry/>
<entry/>
<entry>addi</entry>
<entry>%2, %2,</entry>
<entry>00010000010000100000000000000100</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>#4</entry>
</row>
<row>
<entry/>
<entry>L6:</entry>
<entry>addi</entry>
<entry>%0, %0,</entry>
<entry>00010000000000001111111111111111</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>#−1</entry>
</row>
<row>
<entry>4</entry>
<entry/>
<entry>bnz</entry>
<entry>%0, L7</entry>
<entry>0110110000000000<i>1111111111100000</i></entry>
</row>
<row>
<entry/>
<entry>L5:</entry>
<entry>mov</entry>
<entry>%0, %6</entry>
<entry>00010000110000000000000000000000</entry>
</row>
<row>
<entry>6</entry>
<entry/>
<entry>jmpr</entry>
<entry>(% lr)</entry>
<entry>00000011111000000000001111000000</entry>
</row>
<row>
<entry namest="1" nameend="5" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0054" num="0053">All of the conditional and unconditional branch instructions have been numbered. The first branch, labelled #<b>1</b>, is a conditional branch that is taken when there is a non-negative value in its source register. Branches #<b>2</b> and #<b>4</b> are also conditional branches, but this time are taken when the value in the source register is non-zero. Branch #<b>3</b> is another type of conditional branch, and is taken when the value in the source register is equal to zero. Finally, branch #<b>6</b> is an unconditonal branch that always jumps to the destination address as specified in the source register.</p>
<p id="p-0055" num="0054">The first heuristic is that branch #<b>6</b> is unconditional, so it should always be replicated to save power.</p>
<p id="p-0056" num="0055">A common compiler heuristic is that backward branches tend to be taken. Backward branches are branches that branch to an earlier instruction. Backward branch instructions occur in places such as the end of a loop, which is why they are often taken. This would imply branch #<b>4</b> should be replicated. For an array of size ‘n’, branch #<b>4</b> will be taken ‘n-1’ times. Therefore, the overhead of this optimisation is 1 wasted instruction in ‘n’. However, each time the branch is taken, there will be around 18 transitions saved by not pre-fetching the instruction that will not be executed.</p>
<p id="p-0057" num="0056">Branch #<b>3</b> is used to check a flag. Without knowledge of the data, it is not possible to predict when this branch will be taken. Again, a common compiler heuristic is that forward branches are taken less frequently. Therefore, it would be better not to replicate this branch. This heuristic also applies to branch #<b>1</b> and #<b>2</b>.</p>
<p id="p-0058" num="0057">With code profile information, the choice of which branches to replicate would be tailored for the particular execution pattern of the test data cases. Therefore, test data must be carefully chosen to reflect the typical behaviour expected when deployed.</p>
<p id="p-0059" num="0058">Adding additional instructions that will never be executed will clearly result in an increase in code size. This can be a problem when compiling code for an embedded system that typically has more limited storage resources. The impact on code size can be minimised by identifying the critical path of the program (that is, the routines that are executed the most frequently) and then only applying the branch duplications to the routines on this path.</p>
<p id="p-0060" num="0059">Once again, code profiling is a powerful tool. If the basic blocks making up a function are annotated with execution counts then only those branches that are executed more than a fixed threshold would be replicated. As these routines represent the bulk of the instruction fetches, the power saved will approach the maximal amount. Any code that is not executed as frequently will not be expanded, thereby keeping the total code size down.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>The invention claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method of reducing the power consumption of a microprocessor system which comprises a microprocessor and a memory connected by at least one bus, the microprocessor being arranged to execute a program stored in said memory, wherein:
<claim-text>a) said processor is pipelined in the sense that at least one subsequent instruction is fetched before the current instruction has been completely executed, and</claim-text>
<claim-text>b) said program comprises at least one branch instruction, the execution of which can result in a non-consecutive instruction being fetched, and results in an instruction fetched immediately after the branch instruction being discarded;</claim-text>
<claim-text>the method comprising replicating the binary representation of at least one branch instruction, the replica to be fetched immediately after the branch instruction being duplicated so as to reduce the number of transitions on said bus when the program is executed.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. A method as claimed in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein conditional branch instructions are only replicated if the number of times which the branch is taken, or is likely to be taken, during operation of the program exceeds a predetermined threshold.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. A method as claimed in <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the number of times which a conditional branch instruction is taken, or is likely to be taken, during operation of the program is determined by code profiling.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. A method as claimed in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein conditional branch instructions are replicated only if they satisfy one or more heuristic rules.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. A method as claimed in <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein one of said heuristic rules is that backwards conditional branch instructions are replicated.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. A method as claimed in <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein one of said heuristic rules is that forwards conditional branch instructions are not replicated.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. A method as claimed in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein all conditional branch instructions are replicated.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. A method as claimed in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein unconditional branch instructions are replicated if they satisfy one or more unconditional branch rules.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. A method as claimed in <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein one of said unconditional branch rules is that an unconditional branch instruction is replicated if it forms an early exit instruction of a loop.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. A method as claimed in <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein one of said unconditional branch rules is that an unconditional branch instruction is replicated if it forms the jump back to a saved return address from a function call.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. A method as claimed in <claim-ref idref="CLM-00001">claim 1</claim-ref>, which further includes:
<claim-text>determining which branch instructions, whether conditional or unconditional, are executed, or likely to be executed, more than a predetermined number of times during operation of the program, and can therefore be considered to lie on a “critical path” through the program, and</claim-text>
<claim-text>when carrying out the steps of the method, not allowing replication of any branch instructions which do not lie on said “critical path”, so as to minimize the overall size of the program while at the same time achieving a reduction in power consumption by allowing replication of branch instructions on said “critical path”.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. A computer readable medium containing instructions that, when executed by a computer, perform a method of reducing power consumption of a microprocessor system which compromises a microprocessor and a memory connected by at least one bus, the microprocessor being arranged to execute a program stored in said memory, wherein:
<claim-text>a) said processor is pipelined in the sense that at least one subsequent instruction is fetched before the current instruction has been completely executed, and</claim-text>
<claim-text>b) said program comprises at least one branch instruction, the execution of which can result in a non-consecutive instruction being fetched, and results in an instruction fetched immediately after the branch instruction being discarded;
<claim-text>the method comprising replicating the binary representation of at least one branch instruction, the replica to be fetched immediately after the branch instruction being duplicated so as to reduce the number of transitions on said bus when the program is executed.</claim-text>
</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>
