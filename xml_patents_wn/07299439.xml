<us-patent-grant lang="EN" dtd-version="v4.2 2006-08-23" file="US07299439-20071120.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20071106" date-publ="20071120">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>07299439</doc-number>
<kind>B1</kind>
<date>20071120</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>11135980</doc-number>
<date>20050524</date>
</document-id>
</application-reference>
<us-application-series-code>11</us-application-series-code>
<us-term-of-grant>
<us-term-extension>271</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>17</main-group>
<subgroup>50</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>716 10</main-classification>
<further-classification>716 16</further-classification>
</classification-national>
<invention-title id="d0e53">Assignment of I/O objects with multiple I/O standards to virtual I/O banks using integer linear programming</invention-title>
<references-cited>
<citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>6868374</doc-number>
<kind>B1</kind>
<name>Ditlow et al.</name>
<date>20050300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>703 18</main-classification></classification-national>
</citation>
<citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>7111265</doc-number>
<kind>B1</kind>
<name>Tan et al.</name>
<date>20060900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>716 10</main-classification></classification-national>
</citation>
<citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>7203916</doc-number>
<kind>B2</kind>
<name>Dotson et al.</name>
<date>20070400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>716  5</main-classification></classification-national>
</citation>
<citation>
<nplcit num="00004">
<othercit>Xilinx, Inc.; <i>Virtex-4 User Guide</i>; Chapter 6 “SelectIO Resources”; v.1.3, Apr. 11, 2005; available from Xilinx, Inc., 2100 Logic Drive, San Jose, California 95124; pp. 215-230.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00005">
<othercit>Xilinx, Inc.; <i>Virtex-4 User Guide</i>; Chapter 6 “SelectIO Resources”; v.1.1, Sep. 10. 2004; available from Xilinx, Inc., 2100 Logic Drive, San Jose, California 95124; pp. 207-220.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00006">
<othercit>Jason Anderson et al.; “A Placement Algorithm for FPGA Designs with Multiple I/O Standards”; Springer Verlag, Berlin, 2000; Proceedings of the 10th International Conference on Field-Programmable Logic and Applications; Lecture Notes in Computer Science 1896 (R.W. Hartenstein and H. Grunbacher, eds.); pp. 211-220.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00007">
<othercit>Wai-Kei Mak; “Optimal I/O Placement for FPGAs with Multiple I/O Standards”; Feb. 2004; IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems; vol. 23(2); pp. 1-12.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
</references-cited>
<number-of-claims>20</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>703 18- 19</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>716  5</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>716  7- 11</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>716 16- 18</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>1</number-of-drawing-sheets>
<number-of-figures>1</number-of-figures>
</figures>
<parties>
<applicants>
<applicant sequence="001" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Slonim</last-name>
<first-name>Victor Z.</first-name>
<address>
<city>Broomfield</city>
<state>CO</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="002" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Abid</last-name>
<first-name>Salim</first-name>
<address>
<city>Lafayette</city>
<state>CO</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
</applicants>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<last-name>Cuenot</last-name>
<first-name>Kevin T.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="02" rep-type="attorney">
<addressbook>
<last-name>Hardaway</last-name>
<first-name>Michael R.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</parties>
<assignees>
<assignee>
<addressbook>
<orgname>Xilinx, Inc.</orgname>
<role>02</role>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Dinh</last-name>
<first-name>Paul</first-name>
<department>2825</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A method of input/output (I/O) assignment for a circuit design for a programmable logic device (PLD) can include determining I/O types for I/O objects specified by the circuit design, defining a plurality of virtual I/O bank-groups, wherein each virtual I/O bank-group includes at least one virtual I/O bank, and binding I/O objects of the circuit design into I/O groups according to the I/O types. A binary compatibility matrix can be created. The binary compatibility matrix can indicate the compatibility between the virtual I/O bank-groups and the I/O groups based upon the I/O types of I/O objects within each I/O group. A determination can be made as to whether a feasible solution exists for I/O assignment of the I/O objects of the circuit design according to a plurality of constraints and the binary compatibility matrix.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="203.96mm" wi="150.37mm" file="US07299439-20071120-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="229.45mm" wi="155.87mm" file="US07299439-20071120-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND</heading>
<p id="p-0002" num="0001">1. Field of the Invention</p>
<p id="p-0003" num="0002">This invention relates to the field of integrated circuits and, more particularly, to the assignment of input/output objects to input/output banks of an integrated circuit.</p>
<p id="p-0004" num="0003">2. Description of the Related Art</p>
<p id="p-0005" num="0004">Modern programmable logic devices (PLDs), such as field programmable gate arrays (FPGAs), are capable of supporting a variety of different input/output (I/O) standards. Examples of I/O standards can include, but are not limited to, different varieties of Gunning Transceiver Logic (GTL) signaling such as GTL, GTL_DCI, and GTLP_DCI, Low Voltage Differential Signaling LVDS25, LVCMOS25, and the like. Each of these I/O standards specifies a set of attributes such as whether a reference voltage V<sub>REF </sub>is necessary, the value of any required V<sub>REF</sub>, whether a voltage supply V<sub>CC </sub>is needed for input (V<sub>CCI</sub>) or output (V<sub>CCO</sub>), and/or the value of any required V<sub>CCI </sub>or V<sub>CCO</sub>. This listing of I/O standards and attributes is not intended to be exhaustive, but rather illustrative of the many varieties of I/O standards and corresponding attributes.</p>
<p id="p-0006" num="0005">Most modern PLDs organize I/O objects of a circuit design into a limited number of physical I/O banks on the PLD. A PLD can include approximately 8 I/O banks, although this number is not definitive of every type of PLD as different PLDs can include varying numbers of I/O banks. In any case, each I/O bank can be associated with a plurality of different I/O objects. The I/O objects that are assigned to a given I/O bank must be configured according to compatible I/O standards. As such, the placement of I/O objects into a given I/O bank can be said to be constrained by the organization of that I/O bank.</p>
<p id="p-0007" num="0006">In illustration, some I/O standards require a specific V<sub>CCI </sub>or V<sub>CCO</sub>. An I/O bank typically has a single V<sub>CC </sub>supply. Accordingly, only I/O objects configured according to I/O standards that have compatible V<sub>CC </sub>requirements can be assigned to the same I/O bank. Other attributes of I/O standards serve to further restrict the field of I/O banks to which a given I/O object can be assigned.</p>
<p id="p-0008" num="0007">The task of assigning I/O objects to I/O banks is commonly referred to as the “Select I/O placement problem”. Conventional solutions for Select I/O placement divide the problem into two different phases. The first phase attempts to find a non-optimal, legal solution that satisfies all non-Select I/O related constraints concerning I/O placement. The second phase seeks to improve the solution to achieve placement legality with regard to the Select I/O constraints.</p>
<p id="p-0009" num="0008">Past techniques for solving the select I/O placement problem have relied upon heuristics to automate I/O placement. One heuristic-based approach utilizes a combination of simulated annealing, bipartite matching, and constructive bin-packing to find a solution. Heuristic-based techniques, however, do have disadvantages. In particular, heuristic-driven techniques are not guaranteed to determine a feasible I/O placement solution despite the existence of a solution. Further, heuristic techniques are not capable of identifying an inherently infeasible circuit design.</p>
<p id="p-0010" num="0009">Another proposed solution for the I/O placement problem relies upon an Integer Linear Programming (ILP) formulation of the problem. This solution seeks to overcome the uncertainties inherent to heuristic approaches discussed above. The ILP model includes provisions for addressing voltage constraints when assigning I/O objects to physical I/O banks. Other attributes of I/O standards, however, are not addressed. Specifically, the ILP model lacks any mechanism for dealing with special termination types. Reformulating, or expanding, the ILP model to accommodate such additional attributes is extremely difficult.</p>
<p id="p-0011" num="0010">It would be beneficial to perform I/O placement in a manner which overcomes the limitations described above.</p>
<heading id="h-0002" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0012" num="0011">The present invention provides a solution for evaluating the feasibility of a circuit design with respect to input/output (I/O) assignment. One embodiment of the present invention can include a method of I/O assignment for a circuit design for a programmable logic device (PLD). The method can include determining I/O types for I/O objects specified by the circuit design and defining a plurality of virtual I/O bank-groups, where each virtual I/O bank-group comprises at least one virtual I/O bank. I/O objects of the circuit design can be bound into I/O groups according to the I/O types. The method further can include creating a binary compatibility matrix indicating compatibility between the virtual I/O bank-groups and the I/O groups based upon the I/O types.</p>
<p id="p-0013" num="0012">The method also can include determining whether a feasible solution exists for assignment of the I/O objects of the circuit design according to a plurality of constraints and the binary compatibility matrix. The step of determining whether a feasible solution exists can include calculating the number of virtual I/O banks needed for the solution and, if the number of virtual I/O banks does not exceed the number of physical I/O banks of the PLD, determining that the solution is feasible. An objective function can be formulated which minimizes the total number of virtual I/O banks needed by the circuit design.</p>
<p id="p-0014" num="0013">The step of determining whether a feasible solution exists also can include calculating a number of virtual I/O banks needed by the circuit design based upon a plurality of constraints using an Integer Linear Programming technique. The I/O type can depend upon a standard I/O type and a maximum capacity of a physical I/O bank having the standard I/O type. The I/O type also can specify an I/O standard having a particular termination type, such that the binary compatibility matrix indicates compatibility among different I/O standards.</p>
<p id="p-0015" num="0014">The plurality of constraints can include a resource constraint indicating that a sum of all I/O objects of a selected I/O type assigned to all virtual I/O bank-groups is equal to a total number of I/O objects in the I/O group of the selected I/O type. The plurality of constraints further can include a capacity constraint indicating that for a virtual I/O bank-group of a particular I/O type, a capacity of the virtual I/O bank-group is not less than a total number of I/O objects assigned to the virtual I/O bank-group.</p>
<p id="p-0016" num="0015">Another embodiment of the present invention can include a method of determining a solution for I/O assignment for a circuit design for a PLD. The method can include identifying a set of relationships among a plurality of I/O objects of the circuit design. The set of relationships can be dependent upon an I/O standard of each of the plurality of I/O objects. The set of relationships further can include at least one capacity constraint which indicates a number of I/O objects that can be assigned to a selected, physical I/O bank of the PLD based upon pin requirements of I/O standards of the I/O objects assigned thereto.</p>
<p id="p-0017" num="0016">A binary compatibility matrix can be created based upon the set of relationships. The binary compatibility matrix can indicate the compatibility among different ones of the plurality of I/O objects of the circuit design that correspond to different I/O standards.</p>
<p id="p-0018" num="0017">The method further can include determining an assignment of I/O objects of the circuit design to a plurality of virtual I/O bank-groups. Each virtual I/O bank-group can include one or more virtual I/O banks. Each virtual I/O bank can be mapped to a physical I/O bank of the PLD. The determining step can include first solving an Integer Linear Programming problem defined by the set of relationships. The number of virtual I/O banks used can be calculated. If the number of virtual I/O banks exceeds the number of physical I/O banks of the PLD, a determination can be made that the I/O assignment solution is not feasible.</p>
<p id="p-0019" num="0018">Another embodiment of the present invention can include a method of assigning I/O objects of a circuit design to physical I/O banks of a PLD. The method can include formulating a plurality of constraints regulating placement of I/O objects of varying I/O standards to physical I/O banks of the PLD.</p>
<p id="p-0020" num="0019">In one embodiment, the plurality of constraints can depend upon I/O types. The I/O types, denoted as Tk, can be defined as Tk={Sk, Ck}, where Sk represents an I/O standard of type k, and where Ck represents a maximum capacity of a physical I/O bank of the programmable logic device that is assigned I/O objects of type Sk. The plurality of constraints also can depend upon virtual I/O bank-groups. Each virtual I/O bank-group can be denoted as B of type k and can be defined as Bk={Yk, Tk}, where Yk represents a total number of virtual I/O banks that support a same I/O type Tk. The plurality of constraints also can depend upon I/O groups. I/O groups can be denoted as Gi and can be defined as Gi={Ni, Ti}, where Ni is the total number of I/O objects that have the same I/O type Ti, and i=1 to M, where M is the total number of I/O types specified by the circuit design.</p>
<p id="p-0021" num="0020">The method further can include creating a binary compatibility matrix which indicates compatibility among the I/O objects of varying I/O standards. An Integer Linear Programming problem can be defined which depends upon the plurality of constraints and the binary compatibility matrix. The defining step can include specifying a resource constraint as</p>
<p id="p-0022" num="0021">
<maths id="MATH-US-00001" num="00001">
<math overflow="scroll">
<mrow>
  <mrow>
    <mrow>
      <munderover>
        <mo>∑</mo>
        <mrow>
          <mi>k</mi>
          <mo>=</mo>
          <mn>1</mn>
        </mrow>
        <mi>M</mi>
      </munderover>
      <mo>⁢</mo>
      <mstyle>
        <mspace width="0.3em" height="0.3ex"/>
      </mstyle>
      <mo>⁢</mo>
      <mi>Xik</mi>
    </mrow>
    <mo>=</mo>
    <mi>Ni</mi>
  </mrow>
  <mo>,</mo>
</mrow>
</math>
</maths>
<br/>
where Xik is a number of I/O objects from an I/O group Gi that is assigned to a virtual I/O bank-group Bk, and Ni is a total number of I/O objects of the I/O group Gi. A capacity constraint also can be specified. The capacity constraint can be specified as
</p>
<p id="p-0023" num="0022">
<maths id="MATH-US-00002" num="00002">
<math overflow="scroll">
<mrow>
  <mrow>
    <mrow>
      <munderover>
        <mo>∑</mo>
        <mrow>
          <mi>i</mi>
          <mo>=</mo>
          <mn>1</mn>
        </mrow>
        <mi>M</mi>
      </munderover>
      <mo>⁢</mo>
      <mstyle>
        <mspace width="0.3em" height="0.3ex"/>
      </mstyle>
      <mo>⁢</mo>
      <mi>AikXik</mi>
    </mrow>
    <mo>≤</mo>
    <mi>CkYk</mi>
  </mrow>
  <mo>,</mo>
</mrow>
</math>
</maths>
<br/>
where Aik is an element of the binary compatibility matrix and is a binary value indicating compatibility between an I/O group Gi and a virtual I/O bank-group Bk.
</p>
<p id="p-0024" num="0023">The total number of virtual I/O banks can be denoted as Nvb and can be defined as</p>
<p id="p-0025" num="0024">
<maths id="MATH-US-00003" num="00003">
<math overflow="scroll">
<mrow>
  <mi>Nvb</mi>
  <mo>=</mo>
  <mrow>
    <munderover>
      <mo>∑</mo>
      <mrow>
        <mi>k</mi>
        <mo>=</mo>
        <mn>1</mn>
      </mrow>
      <mi>M</mi>
    </munderover>
    <mo>⁢</mo>
    <mstyle>
      <mspace width="0.3em" height="0.3ex"/>
    </mstyle>
    <mo>⁢</mo>
    <mrow>
      <mi>Yk</mi>
      <mo>.</mo>
    </mrow>
  </mrow>
</mrow>
</math>
</maths>
<br/>
Accordingly, the Integer Linear Programming problem can include an objective function denoted as F, where F=min(Nvb). The Integer Linear Programming problem can be solved to determine whether a feasible solution exists for assignment of the I/O objects of the circuit design. One or more values for Yk can be calculated.
</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0026" num="0025">There are shown in the drawings, embodiments which are presently preferred, it being understood, however, that the invention is not limited to the precise arrangements and instrumentalities shown.</p>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. 1</figref> is a flow chart illustrating a method of determining the feasibility of I/O placement in relation to a circuit design for a PLD in accordance with the inventive arrangements disclosed herein.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION OF THE INVENTION</heading>
<p id="p-0028" num="0027">The present invention provides a technique for assigning input/output (I/O) objects to I/O banks of an integrated circuit (IC), such as a programmable logic device (PLD) or other IC having programmable logic, while observing constraints relating to I/O standards of the I/O objects assigned to each I/O bank. More particularly, the present invention can determine whether a problem instance, in reference to a circuit design for a PLD, is feasible with respect to the Select I/O placement problem. If so, a feasible I/O placement can be determined.</p>
<p id="p-0029" num="0028">In determining the feasibility of a given design and/or I/O placement solution, attributes of the various I/O objects, as defined by the I/O standard of each I/O object, can be taken into consideration. Compatibility rules, or constraints, relating to the placement of I/O objects can be observed. These constraints can relate to the placement of I/O objects within a same I/O bank given differences in voltage requirements, I/O object termination types, and I/O bank capacities.</p>
<p id="p-0030" num="0029">In accordance with the inventive arrangements disclosed herein, I/O objects can be organized into groups based upon the I/O standard of each I/O object. Virtual I/O bank-group constructs are used to which I/O objects also can be assigned. The use of I/O groups and virtual I/O bank-groups serves to reduce the complexity of the select I/O problem from one that depends upon the number of I/O blocks in a design to one that depends upon the number of I/O standards. The present invention provides a solution that virtually is independent of the number of I/O objects within a design.</p>
<p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. 1</figref> is a flow chart illustrating a method of determining the feasibility of I/O placement in relation to a design for a PLD in accordance with the inventive arrangements disclosed herein. In one embodiment, the steps described herein can be implemented within a software-based design tool executing within a suitable information processing system. As known, such design tools can operate upon netlists or other software-based representations of circuit designs. Thus, in step <b>105</b>, a design for an integrated circuit, or a portion thereof, can be loaded into a design tool. While the design can be for any of a variety of different PLDs, in one embodiment, the design can be for a field programmable gate array (FPGA).</p>
<p id="p-0032" num="0031">In step <b>110</b>, the properties of any I/O objects specified by the design can be identified. As used herein, an I/O object can refer to an I/O instance, such as an I/O block (IOB) in a given design. The attributes of an I/O object can refer to those parameters that are dictated by the particular I/O standard to which the I/O object is to conform. Examples of common I/O standards can include, but are not limited to, LVCMOS25, LVDS25, PCI33<sub>—</sub>3, GTL, GTL_DCI, GTLP_DCI, HSTL_I_D, LVDCI<sub>—</sub>18, and LVDCI<sub>—</sub>33. This listing is not intended to be exhaustive, but rather serve as an illustration of the many different I/O standards that are available.</p>
<p id="p-0033" num="0032">Each of the aforementioned I/O standards specifies a variety of different attributes. An I/O object configured in accordance with one of the I/O standards must posses the attributes associated with that I/O standard. In illustration, some I/O standards require the use of a differential amplifier, which in turn requires an external voltage reference of V<sub>REF</sub>. Typically, a voltage of V<sub>REF </sub>is needed for the input objects of such standards but not for the output objects. Other I/O standards require a specific supply voltage, V<sub>CC</sub>, to power the input blocks and/or output blocks. Often an input supply voltage V<sub>CCI </sub>and an output supply voltage V<sub>CCO </sub>are specified separately as some standards require a V<sub>CCO </sub>for output blocks but no V<sub>CCI </sub>for input blocks. Bi-directional I/O objects of an I/O standard have the combined requirements of the input objects and the output objects for that standard. Typically, I/O objects can be configured as input, output, or bi-directional type. Some newer I/O standards have special source termination types such as driver, split, and single.</p>
<p id="p-0034" num="0033">When assigning I/O objects to an I/O bank, the I/O standards to which each I/O object within the I/O bank is configured must not conflict with one another. In illustration, two I/O blocks, each requiring a different supply voltage, would not be compatible with one another. As such, the two I/O objects could not be assigned to a same I/O bank. To do so would violate design constraints.</p>
<p id="p-0035" num="0034">In step <b>115</b>, the device architecture of the PLD to be loaded with the design is identified. The specification relating to the physical I/O banks of the device can be identified. Any features of the device relating to the physical I/O banks can be noted. These features can include, but are not limited to, the number of physical I/O banks on the device, the number of IOBs per physical I/O bank, as well as whether the I/O banks have any specialized, or reserved, pins. Reserved pins can include any pins which can be used to accommodate special I/O standards. Oftentimes, if not needed, reserved pins can be used to accommodate regular user I/O objects. Other features of physical I/O banks can include the number of voltage sources available per bank, the number of voltage references available per bank, as well as the value of the voltage sources and references available to each bank. Some I/O banks, however, do not include special pins for accommodating I/O objects of particular types. The capacity of such I/O banks would be 0 for I/O objects of those types.</p>
<p id="p-0036" num="0035">In step <b>120</b>, the select I/O standard compatibility rules specific to the hardware device architecture can be identified. These compatibility rules can specify how particular I/O pins of an I/O bank function and, further, alter the number of I/O pins available for use by the design in the I/O banks. In illustration, an I/O bank can include a predetermined number of I/O pins that are available to the user as inputs or outputs, i.e. regular user I/O pins, and other pins that are reserved for special uses as noted above. These pins can be referred to as V<sub>R </sub>pins. Examples of V<sub>R </sub>pins can include I/O pins reserved for voltage references or I/O objects having particular termination types. If none of the I/O objects assigned to a particular I/O bank require a voltage reference, I/O pins reserved for use with a voltage reference can be made available, or used, as regular user I/O pins. Similarly, if none of the I/O objects assigned to an I/O bank utilize a special termination type needing a dedicated V<sub>R </sub>pin, the V<sub>R </sub>pins also can be made available, or used, as regular user I/O pins. Accordingly, the rules for determining when the V<sub>R </sub>pins are needed in their reserved capacity or can function as regular user I/O objects can be determined. These rules can vary from one device architecture to another and can be defined in a device specification.</p>
<p id="p-0037" num="0036">In step <b>125</b>, different I/O types can be classified. The I/O types, denoted as Tk, can be dependent upon two parameters. The I/O types can be defined as Tk={Sk, Ck}, where Sk represents the I/O standard having type k and Ck represents the physical I/O bank maximum capacity determined by Sk. The physical I/O bank maximum capacity Ck can be assumed to be the same for all I/O banks with respect to I/O objects of I/O standard Sk. The physical I/O bank maximum capacity can be determined from a review of the PLD specification. Generally, U can be defined as the default minimum I/O bank capacity which is equal to the total number of regular user I/O pins. Here, V<sub>REF </sub>can refer to the number of dedicated V<sub>REF </sub>pins per I/O bank and V<sub>R </sub>can refer to the number of dedicated pins for a particular termination type within a given physical I/O bank.</p>
<p id="p-0038" num="0037">With these parameters in mind, bank capacity Ck can be defined based upon the PLD specification and the following observations. If an I/O bank of type k supports an I/O standard of type k that has a definitive V<sub>REF </sub>voltage and special termination type, the capacity of the I/O bank can be defined as Ck=U. If the I/O bank supports an I/O standard of type k that does not require V<sub>REF </sub>voltage, but requires a special termination type, then all dedicated V<sub>REF </sub>pins can be used as regular user I/O pins and the total I/O bank capacity can be defined as Ck=U+V<sub>REF</sub>. If an I/O bank of type k supports an I/O standard of type k that requires V<sub>REF </sub>voltage, but does not require special termination types, all dedicated V<sub>R </sub>pins can be used as regular user I/O pins and the total bank capacity is Ck=U+V<sub>R</sub>. If an I/O bank of type k supports an I/O standard of type k that does not require a V<sub>REF </sub>voltage or special termination type, all dedicated V<sub>REF </sub>and V<sub>R </sub>pins can be used as regular user I/O pins. In that case, the total bank capacity can be defined as Ck=U+V<sub>REF</sub>+V<sub>R</sub>.</p>
<p id="p-0039" num="0038">Table 1 below provides a listing of different attributes specified for various I/O standards as well as the capacity Ck of each. The letters “NR”, as used herein, stand for “not relevant” and indicate the ability of a given I/O standard to accommodate a variety of different values for a specified attribute.</p>
<p id="p-0040" num="0039">
<tables id="TABLE-US-00001" num="00001">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="6">
<colspec colname="1" colwidth="42pt" align="center"/>
<colspec colname="2" colwidth="28pt" align="center"/>
<colspec colname="3" colwidth="28pt" align="center"/>
<colspec colname="4" colwidth="28pt" align="center"/>
<colspec colname="5" colwidth="42pt" align="center"/>
<colspec colname="6" colwidth="49pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="6" rowsep="1">TABLE 1</entry>
</row>
<row>
<entry namest="1" nameend="6" align="center" rowsep="1"/>
</row>
<row>
<entry>I/O Standard</entry>
<entry>V<sub>REF</sub></entry>
<entry>V<sub>CCO</sub></entry>
<entry>V<sub>CCO</sub></entry>
<entry>Termination</entry>
<entry/>
</row>
<row>
<entry>Name</entry>
<entry>(Volts)</entry>
<entry>(Volts)</entry>
<entry>(Volts)</entry>
<entry>Type</entry>
<entry>Capacity</entry>
</row>
<row>
<entry namest="1" nameend="6" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>LVCMOS25</entry>
<entry>NR</entry>
<entry>2.5</entry>
<entry>2.5</entry>
<entry>NR</entry>
<entry>U + V<sub>REF </sub>+ V<sub>R</sub></entry>
</row>
<row>
<entry>LVDS25</entry>
<entry>NR</entry>
<entry>NR</entry>
<entry>2.5</entry>
<entry>NR</entry>
<entry>U + V<sub>REF </sub>+ V<sub>R</sub></entry>
</row>
<row>
<entry>PCI33_3</entry>
<entry>NR</entry>
<entry>3.3</entry>
<entry>3.3</entry>
<entry>NR</entry>
<entry>U + V<sub>REF </sub>+ V<sub>R</sub></entry>
</row>
<row>
<entry>GTL</entry>
<entry>0.8</entry>
<entry>NR</entry>
<entry>NR</entry>
<entry>NR</entry>
<entry>U + V<sub>R</sub></entry>
</row>
<row>
<entry>GTL_DCI</entry>
<entry>0.8</entry>
<entry>1.2</entry>
<entry>1.2</entry>
<entry>Single</entry>
<entry>U</entry>
</row>
<row>
<entry>GTLP_DCI</entry>
<entry>1.0</entry>
<entry>1.5</entry>
<entry>1.5</entry>
<entry>Single</entry>
<entry>U</entry>
</row>
<row>
<entry>HSTL_I_D</entry>
<entry> 0.75</entry>
<entry>1.5</entry>
<entry>1.5</entry>
<entry>Split</entry>
<entry>U</entry>
</row>
<row>
<entry>LVDCI_18</entry>
<entry>NR</entry>
<entry>NR</entry>
<entry>1.8</entry>
<entry>Driver</entry>
<entry>U + V<sub>REF</sub></entry>
</row>
<row>
<entry>LVDCI_33</entry>
<entry>NR</entry>
<entry>NR</entry>
<entry>3.3</entry>
<entry>Driver</entry>
<entry>U + V<sub>REF</sub></entry>
</row>
<row>
<entry namest="1" nameend="6" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0041" num="0040">To better illustrate, consider a design having 5 IOBs of I/O standard GTL_DCI, denoted as Sa, 40 IOBs of I/O standard GTLP_DCI, denoted as Sb, and 3 IOBs of I/O standard GTL, denoted as Sc. The device can include 4 physical I/O banks with a total capacity of 80 IOB sites. Each I/O bank can have a total capacity of 20 pins, with 17 regular pins, 2 pins reserved as V<sub>REF </sub>pins, and 1 pin reserved as a V<sub>R </sub>pin. While this example will be used throughout the specification to illustrate various aspects of the present invention, it should not be considered limiting as other examples could be used.</p>
<p id="p-0042" num="0041">The I/O types would be defined as follows: Ta={Sa, Ca}, Tb={Sb, Cb}, and Tc={Sc, Cc}. As noted, Ck indicates the physical bank maximum capacity as determined by the I/O standard Sk. Thus, Ck can be determined as follows:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>Ca=</i>20−1−2=17<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>Cb=</i>20−1−2=17<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>Cc=</i>20−2=18<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
This results in the following I/O types:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>Ta={GTL_DCI, 17}<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>Tb={GTLP_DCI, 17}<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>Tc={GTL, 18}<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0043" num="0042">In step <b>130</b>, virtual I/O bank-groups can be defined based upon the I/O types of step <b>125</b>. I/O objects can be assigned to the virtual I/O bank-groups. A virtual I/O bank is software construct representing an I/O bank. A virtual I/O bank can share the same characteristics as a physical bank, but need not be mapped to a physical bank. Each virtual I/O bank-group, denoted as Bk, can be classified according to two parameters. The virtual I/O bank-groups can be defined as Bk={Yk, Tk}, where Yk, is the total number of virtual I/O banks that have the same I/O type Tk. Yk is an unknown and an independent variable to be found as described herein using Integer Linear Programming (ILP).</p>
<p id="p-0044" num="0043">The virtual I/O bank-group constructs reduce the complexity of the Select I/O problem. To solve the Select I/O problem, the total number of all virtual I/O banks Yk defined by Tk and Bk can be larger than the actual I/O, or physical, banks of the PLD. Upon resolution of the select I/O problem, each virtual I/O bank can, but need not, have a corresponding physical I/O bank. Whether a virtual I/O bank has a corresponding physical bank depends upon the feasibility of the Select I/O problem. That is, a feasible solution has a number of virtual I/O banks that is less than or equal to the number of physical I/O banks of the PLD.</p>
<p id="p-0045" num="0044">Continuing with the previous example, the virtual I/O bank-groups can be defined as follows:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>Ba={Ya, Ta}<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>Bb={Yb, Tb}<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>Bc={Yc, Tc}<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
As noted, Yk represents the number of virtual I/O banks configured to support I/O objects of a given I/O type Tk.
</p>
<p id="p-0046" num="0045">In step <b>135</b>, all of the I/O objects can be bound into I/O groups according to the I/O type associated with each I/O object. Each I/O group G of type i, where i=1, . . . , M, can be classified as a set of 2 parameters. In particular, I/O groups can be defined as Gi={Ni, Ti}, where Ni is the total number of I/O objects that have the same I/O type Ti and M is the total number of I/O types presented within the design. Each original I/O object is assigned to some I/O group Gi and the sum of all Ni gives the total number of I/O objects in the design.</p>
<p id="p-0047" num="0046">With reference to the previous example, the groups can be defined as follows:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>Ga={Na, Ta}, where Na=5 and Ta={Sa, Ca}={GTL_DCI, 17}<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>Gb={Nb, Tb}, where Nb=40 and Tb={Sb, Cb}={GTLP_DCI, 17}<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>Gc={Nc, Tc}, where Nc=3 and Tc={Sc, Cc}={GTL, 18}<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
Thus,
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>Ga={5, GTL_DCI, 17}<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>Gb={40, GTLP_DCI, 17}<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>Gc={3, GTL, 18}<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
As can be seen from the above relationships, Ni represents the total number of I/O objects of the same type Ti.
</p>
<p id="p-0048" num="0047">Using the relationships defined above, a Select I/O problem with reduced complexity can be formulated in step <b>140</b>. The reduced complexity assignment problem can be formulated as a mapping between I/O groups and virtual I/O bank-groups. This formulation includes an objective function and a set of inequalities which describe a complete set of constraints for the reduced complexity problem. Each of the constraints can be linear and all of the independent variables can be represented by non-negative integers. Accordingly, if the objective function is formulated in linear form, the problem can be formulated as an ILP problem that can be resolved using any of a variety of commercially available, software-based, ILP solvers.</p>
<p id="p-0049" num="0048">The reduced complexity problem formulation is based upon several different qualitative constraints, which are as follows. All I/O objects of each I/O group can be distributed between compatible I/O banks. The number of I/O objects from an I/O group Gi that can be assigned to a virtual I/O bank Bk can be defined as Xik. Each Xik can represent one of the independent variables of the ILP formulation to be solved. The compatibility between I/O group Gi and I/O bank Bk is determined by a value of an element Aik that can be 1 or 0. All of the elements Aik, taken together, form a Binary Compatibility Matrix (BCM) to be described herein in greater detail. The BCM elements Aik can be computed according to compatibility rules between I/O types T. The elements Aik of the BCM are set equal to 1 for compatible types and 0 for incompatible types.</p>
<p id="p-0050" num="0049">Additional constraints can specify that a sum of all I/O objects of a selected I/O type assigned to all virtual I/O bank-groups is equal to a total number of I/O objects in an I/O group of the selected I/O type. Each virtual I/O bank-group can accept I/O objects from different I/O groups in such a way that the total number of I/O objects in the virtual I/O bank-group is no larger than the virtual I/O bank-group capacity. While the assignment problem is always solvable given a large enough number of virtual I/O banks, a solution is feasible only if the total number of virtual I/O banks is less than or equal to the total number of physical I/O banks available within the PLD architecture being used.</p>
<p id="p-0051" num="0050">Given these constraints, the assignment placement problem can be summarized quantitatively using resource, capacity, and compatibility constraints. Regarding resource constraints, of each I/O group of type i, where i=1, . . . , M, the total number of I/O objects assigned to all virtual I/O banks can be determined from the design and can be denoted as Ni, where</p>
<p id="p-0052" num="0051">
<maths id="MATH-US-00004" num="00004">
<math overflow="scroll">
<mrow>
  <mrow>
    <munderover>
      <mo>∑</mo>
      <mrow>
        <mi>k</mi>
        <mo>=</mo>
        <mn>1</mn>
      </mrow>
      <mi>M</mi>
    </munderover>
    <mo>⁢</mo>
    <mstyle>
      <mspace width="0.3em" height="0.3ex"/>
    </mstyle>
    <mo>⁢</mo>
    <mi>Xik</mi>
  </mrow>
  <mo>=</mo>
  <mrow>
    <mi>Ni</mi>
    <mo>.</mo>
  </mrow>
</mrow>
</math>
</maths>
<br/>
Continuing with the previous example, the following resource constraints can be determined:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>Xaa+Xab+Xac=Na=</i>5<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>Xba+Xbb+Xbc=Nb=</i>40<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>Xca+Xcb+Xcc=Nc=</i>3<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0053" num="0052">Regarding capacity constraints, for each I/O bank of type k, where k=1, . . . , M, the total capacity must not be less than the total number of all I/O objects assigned to the virtual I/O bank-group. The total virtual I/O bank-group capacity can be determined as a product of the number of virtual I/O banks with I/O type Tk to the maximum capacity of the physical I/O bank, assuming identical physical I/O banks, and can be represented as</p>
<p id="p-0054" num="0053">
<maths id="MATH-US-00005" num="00005">
<math overflow="scroll">
<mrow>
  <mrow>
    <munderover>
      <mo>∑</mo>
      <mrow>
        <mi>i</mi>
        <mo>=</mo>
        <mn>1</mn>
      </mrow>
      <mi>M</mi>
    </munderover>
    <mo>⁢</mo>
    <mstyle>
      <mspace width="0.3em" height="0.3ex"/>
    </mstyle>
    <mo>⁢</mo>
    <mi>AikXik</mi>
  </mrow>
  <mo>≤</mo>
  <mrow>
    <mi>CkYk</mi>
    <mo>.</mo>
  </mrow>
</mrow>
</math>
</maths>
<br/>
Referring again the example, the following capacity constraints can be defined:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>AaaXaa+AbaXba+AcaXca≦YaCa=</i>17*<i>Ya </i><?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>AabXab+AbbXbb+AcbXcb≦YbCb=</i>17*<i>Yb </i><?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>AacXac+AbcXbc+AccXcc≦YcCc=</i>18*<i>Yc</i><?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0055" num="0054">Regarding compatibility constraints, I/O objects of an I/O standard type i can be assigned to a bank of type k only if the I/O types of the objects are compatible. In other words, only if Aik=1. This constraint significantly reduces the problem complexity as all variables Xik can be considered to be equal to 0 whenever the BCM element Aik is equal to 0. Finally, regarding integer and non-negativity constraints, Xik, where i=1, . . . , M; k=1, . . . , M, and Yk, where k=1, . . . , M, should have non-negative integer values.</p>
<p id="p-0056" num="0055">In step <b>145</b>, the BCM can be created. The BCM can be formulated by observing the following rules pertaining to I/O standard compatibility. The voltages needed for V<sub>REF </sub>and V<sub>CC </sub>required by a given I/O standard must be compatible within the I/O bank. That is, all I/O objects assigned to a same I/O bank, must correspond to an I/O standard having the same fixed V<sub>REF </sub>and V<sub>CC </sub>requirements or to an I/O standard that has an undefined value, denoted as “NR” in Table 1.</p>
<p id="p-0057" num="0056">In addition to V<sub>REF </sub>and V<sub>CC </sub>compatibility, the terminate type also must be compatible within the same I/O bank. The programming of an IOB, with respect to the input or output buffer, determines which terminate type to use with an I/O standard. IOBs programmed bi-directionally, which use both input and output buffers, use an I/O standard which allows for bi-directional programming. Only one I/O standard having a terminate type of single can be programmed per I/O bank. Only one I/O standard having a terminate type of split can be programmed per I/O bank. Terminate types of single and split can co-exist in a same I/O bank. Terminate types none and driver are not restricted to being the only terminate type within a given I/O bank. Thus, terminate types none and driver can co-exist with types split and single.</p>
<p id="p-0058" num="0057">From the above-listed hardware constraints, it can be seen that the compatibility between I/O groups and virtual I/O bank-groups, as represented by the BCM elements, can be simplified if based upon the compatibility between the I/O types Ti and Tk. In general, two I/O types will be compatible if the I/O standard of each I/O type, Si and Sk, is the same. In other words, the two I/O types are compatible if index i is equal to index k. Alternatively, Ti and Tk are compatible if Si and Sk are compatible.</p>
<p id="p-0059" num="0058">Using these rules, it can be seen that the group Gi is not compatible with the bank Bk if the following constraints are met. In other words, Aik=0, in the following cases. If I/O types Ti and Tk require different definite values for V<sub>REF </sub>and/or V<sub>CC</sub>, then Aik=0. If I/O types Ti and Tk have different I/O standards and both require special termination types of single or split, then Aik=0.</p>
<p id="p-0060" num="0059">For purposes of illustration, Table 2 below is an example of a BCM that has been derived based upon Table 1 in accordance with the inventive arrangements disclosed herein.</p>
<p id="p-0061" num="0060">
<tables id="TABLE-US-00002" num="00002">
<table frame="none" colsep="0" rowsep="0" pgwide="1">
<tgroup align="left" colsep="0" rowsep="0" cols="10">
<colspec colname="1" colwidth="42pt" align="left"/>
<colspec colname="2" colwidth="42pt" align="center"/>
<colspec colname="3" colwidth="35pt" align="center"/>
<colspec colname="4" colwidth="35pt" align="center"/>
<colspec colname="5" colwidth="21pt" align="center"/>
<colspec colname="6" colwidth="42pt" align="center"/>
<colspec colname="7" colwidth="42pt" align="center"/>
<colspec colname="8" colwidth="42pt" align="center"/>
<colspec colname="9" colwidth="42pt" align="center"/>
<colspec colname="10" colwidth="42pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="10" rowsep="1">TABLE 2</entry>
</row>
<row>
<entry namest="1" nameend="10" align="center" rowsep="1"/>
</row>
<row>
<entry/>
<entry>LVCMOS25</entry>
<entry>LVDS25</entry>
<entry>PCI33_3</entry>
<entry>GTL</entry>
<entry>GTL_DCI</entry>
<entry>GTLP_DCI</entry>
<entry>HSTL_I_D</entry>
<entry>LVDCI_18</entry>
<entry>LVDCI_33</entry>
</row>
<row>
<entry namest="1" nameend="10" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>LVCMOS25</entry>
<entry>1</entry>
<entry>1</entry>
<entry>0</entry>
<entry>1</entry>
<entry>0</entry>
<entry>0</entry>
<entry>0</entry>
<entry>0</entry>
<entry>0</entry>
</row>
<row>
<entry>LVDS25</entry>
<entry>1</entry>
<entry>1</entry>
<entry>0</entry>
<entry>1</entry>
<entry>0</entry>
<entry>0</entry>
<entry>0</entry>
<entry>0</entry>
<entry>0</entry>
</row>
<row>
<entry>PCI33_3</entry>
<entry>0</entry>
<entry>0</entry>
<entry>1</entry>
<entry>1</entry>
<entry>0</entry>
<entry>0</entry>
<entry>0</entry>
<entry>0</entry>
<entry>1</entry>
</row>
<row>
<entry>GTL</entry>
<entry>1</entry>
<entry>1</entry>
<entry>1</entry>
<entry>1</entry>
<entry>1</entry>
<entry>0</entry>
<entry>0</entry>
<entry>0</entry>
<entry>1</entry>
</row>
<row>
<entry>GTL_DCI</entry>
<entry>0</entry>
<entry>0</entry>
<entry>0</entry>
<entry>1</entry>
<entry>1</entry>
<entry>0</entry>
<entry>0</entry>
<entry>0</entry>
<entry>0</entry>
</row>
<row>
<entry>GTLP_DCI</entry>
<entry>0</entry>
<entry>0</entry>
<entry>0</entry>
<entry>0</entry>
<entry>0</entry>
<entry>1</entry>
<entry>0</entry>
<entry>0</entry>
<entry>0</entry>
</row>
<row>
<entry>HSTL_I_D</entry>
<entry>0</entry>
<entry>0</entry>
<entry>0</entry>
<entry>0</entry>
<entry>0</entry>
<entry>0</entry>
<entry>1</entry>
<entry>0</entry>
<entry>0</entry>
</row>
<row>
<entry>LVDCI_18</entry>
<entry>0</entry>
<entry>0</entry>
<entry>0</entry>
<entry>0</entry>
<entry>0</entry>
<entry>0</entry>
<entry>0</entry>
<entry>1</entry>
<entry>0</entry>
</row>
<row>
<entry>LVDCI_33</entry>
<entry>0</entry>
<entry>0</entry>
<entry>1</entry>
<entry>1</entry>
<entry>0</entry>
<entry>0</entry>
<entry>0</entry>
<entry>0</entry>
<entry>1</entry>
</row>
<row>
<entry namest="1" nameend="10" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0062" num="0061">Continuing with the example where a design has 5 IOBs of I/O standard GTL_DCI, 40 IOBs of I/O standard GTLP_DCI, and 3 IOBs of I/O standard GTL, Table 3 below illustrates the corresponding BCM.</p>
<p id="p-0063" num="0062">
<tables id="TABLE-US-00003" num="00003">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="4">
<colspec colname="offset" colwidth="49pt" align="left"/>
<colspec colname="1" colwidth="77pt" align="center"/>
<colspec colname="2" colwidth="14pt" align="center"/>
<colspec colname="3" colwidth="77pt" align="center"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="3" rowsep="1">TABLE 3</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="3" align="center" rowsep="1"/>
</row>
<row>
<entry/>
<entry>Ga</entry>
<entry>Gb</entry>
<entry>Gc</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="3" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="5">
<colspec colname="offset" colwidth="35pt" align="left"/>
<colspec colname="1" colwidth="14pt" align="center"/>
<colspec colname="2" colwidth="77pt" align="center"/>
<colspec colname="3" colwidth="14pt" align="center"/>
<colspec colname="4" colwidth="77pt" align="center"/>
<tbody valign="top">
<row>
<entry/>
<entry>Ga</entry>
<entry>1</entry>
<entry>0</entry>
<entry>1</entry>
</row>
<row>
<entry/>
<entry>Gb</entry>
<entry>0</entry>
<entry>1</entry>
<entry>0</entry>
</row>
<row>
<entry/>
<entry>Gc</entry>
<entry>1</entry>
<entry>0</entry>
<entry>1</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="4" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0064" num="0063">For purposes of illustration, and continuing with the example, the following compatibility constraints can be determined. From the BCM of Table 3, the following relationships can be determined: Aab=Aba=Abc=Aca=Acb=0, and accordingly, Xab=Xba=Xbc=Xcb=0. The prior discussed resource and capacity constraints can be rewritten and simplified using the relationships obtained from the BCM of Table 3.</p>
<p id="p-0065" num="0064">In step <b>150</b>, the objective function for solving the I/O assignment problem using ILP can be defined. The objective function is defined based upon the PLD specifications and, particularly, the number of physical I/O banks of the device. As noted, to achieve a feasible solution, the total number of virtual I/O banks must not exceed the number of physical I/O banks. The total number of virtual I/O banks can be defined as</p>
<p id="p-0066" num="0065">
<maths id="MATH-US-00006" num="00006">
<math overflow="scroll">
<mrow>
  <mi>Nvb</mi>
  <mo>=</mo>
  <mrow>
    <munderover>
      <mo>∑</mo>
      <mrow>
        <mi>k</mi>
        <mo>=</mo>
        <mn>1</mn>
      </mrow>
      <mi>M</mi>
    </munderover>
    <mo>⁢</mo>
    <mstyle>
      <mspace width="0.3em" height="0.3ex"/>
    </mstyle>
    <mo>⁢</mo>
    <mrow>
      <mi>Yk</mi>
      <mo>.</mo>
    </mrow>
  </mrow>
</mrow>
</math>
</maths>
<br/>
Accordingly, the objective function, denoted as F, being defined as the minimization of the total number of virtual I/O banks, can be represented as F=min(Nvb).
</p>
<p id="p-0067" num="0066">In terms of solving the select I/O problem, all constraints can be satisfied if a sufficient number of virtual I/O banks is used. In illustration, one virtual I/O bank for each I/O standard can be used as well as multiple virtual I/O banks of type k which are necessary to accommodate objects of group type k. The solution of the select I/O problem, however is only feasible if the minimum number of virtual I/O banks does not exceed the number N of physical I/O banks available for a given PLD. Thus, continuing with the previous example, the following relationship for N can be defined:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>Min(<i>Ya+Yb+Yc</i>)≦<i>N.</i><?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0068" num="0067">In step <b>155</b>, the ILP problem can be solved. As noted, the ILP problem can be solved through the use of an ILP solver. Available ILP solvers can include, but are not limited to, LP_Solve, which is a free solver, and the solver available under the GNU Scientific Library. Other commercial solvers also are available. Again, referring to the example, the solver, or an analysis of the constraints set forth herein, can yield a unique, feasible solution where Ya=0, Yb=3, and Yc=1.</p>
<p id="p-0069" num="0068">In step <b>160</b>, a determination can be made as to whether a feasible solution was determined using the ILP solver. If so, the method can proceed to step <b>165</b>. If not, the method can continue to step <b>170</b>, where a report is provided which explains why the solution is infeasible. In step <b>165</b>, where a feasible solution was determined, each virtual bank can be mapped to a physical bank following the assignment solution. Continuing with the example, it can be determined that:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>Ga={5, Ta}, where Xaa=5, Xab=0, Xac=0, and Ba={1, Ta}<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>Gb={40, Tb}, where Xba=0, Xbb=40, Xbc=0, and Bb={3, Tb}<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>Gc={3, Tc}, where Xca=3, Xcb=0, Xcc=0, and Bc={0, Tc}<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
From the above relationships, it further can be determined that a solution is feasible where Gc is assigned to virtual I/O bank-group Ba, Gb is assigned to a virtual I/O bank-group Bb that includes 3 physical I/O banks, and Ga is merged with Gc to the virtual bank-group Ba. Subsequently, during the design process, the solution can be enforced as a set of one or more design constraints which can be observed by a placer.
</p>
<p id="p-0070" num="0069">The present invention can be realized in hardware, software, or a combination of hardware and software. The present invention can be realized in a centralized fashion in one computer system, or in a distributed fashion where different elements are spread across several interconnected computer systems. Any kind of computer system or other apparatus adapted for carrying out the methods described herein is suited. A typical combination of hardware and software can be a general purpose computer system with a computer program that, when being loaded and executed, controls the computer system such that it carries out the methods described herein.</p>
<p id="p-0071" num="0070">The present invention also can be embedded in a computer program product, which comprises all the features enabling the implementation of the methods described herein, and which when loaded in a computer system is able to carry out these methods. Computer program, software, application, or any variant thereof, in the present context, means any expression, in any language, code or notation, of a set of instructions intended to cause a system having an information processing capability to perform a particular function either directly or after either or both of the following: a) conversion to another language, code, or notation; b) reproduction in a different material form.</p>
<p id="p-0072" num="0071">This invention can be embodied in other forms without departing from the spirit or essential attributes thereof. Accordingly, reference should be made to the following claims, rather than to the foregoing specification, as indicating the scope of the invention.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-math idrefs="MATH-US-00001" nb-file="US07299439-20071120-M00001.NB">
<img id="EMI-M00001" he="8.81mm" wi="76.20mm" file="US07299439-20071120-M00001.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00002" nb-file="US07299439-20071120-M00002.NB">
<img id="EMI-M00002" he="8.81mm" wi="76.20mm" file="US07299439-20071120-M00002.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00003" nb-file="US07299439-20071120-M00003.NB">
<img id="EMI-M00003" he="8.81mm" wi="76.20mm" file="US07299439-20071120-M00003.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00004" nb-file="US07299439-20071120-M00004.NB">
<img id="EMI-M00004" he="8.81mm" wi="76.20mm" file="US07299439-20071120-M00004.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00005" nb-file="US07299439-20071120-M00005.NB">
<img id="EMI-M00005" he="8.81mm" wi="76.20mm" file="US07299439-20071120-M00005.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00006" nb-file="US07299439-20071120-M00006.NB">
<img id="EMI-M00006" he="8.81mm" wi="76.20mm" file="US07299439-20071120-M00006.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00007" nb-file="US07299439-20071120-M00007.NB">
<img id="EMI-M00007" he="8.81mm" wi="76.20mm" file="US07299439-20071120-M00007.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00008" nb-file="US07299439-20071120-M00008.NB">
<img id="EMI-M00008" he="8.81mm" wi="76.20mm" file="US07299439-20071120-M00008.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00009" nb-file="US07299439-20071120-M00009.NB">
<img id="EMI-M00009" he="8.81mm" wi="76.20mm" file="US07299439-20071120-M00009.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method of input/output (I/O) assignment for a circuit design comprising:
<claim-text>determining an I/O type for each I/O object specified by the circuit design;</claim-text>
<claim-text>defining a plurality of virtual I/O bank-groups, wherein each virtual I/O bank-group comprises at least one virtual I/O bank;</claim-text>
<claim-text>binding each I/O object of the circuit design into an I/O group according to the I/O type associated with the I/O object;</claim-text>
<claim-text>creating a binary compatibility matrix indicting compatibility between the virtual I/O bank-groups and the I/O groups based upon the I/O type of each I/O object; and</claim-text>
<claim-text>determining whether a feasible solution exists for assignment of the I/O object according to a plurality of constraints and the binary compatibility matrix.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, said step of determining whether a feasible solution exists further comprising:
<claim-text>calculating the number of virtual I/O banks needed for the solution; and</claim-text>
<claim-text>if the number of virtual I/O banks does not exceed the number of physical I/O banks of a programmable logic device, determining that the solution is feasible.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, said step of determining whether a feasible solution exists further comprising formulating an objective function which minimizes the total number of virtual I/O banks needed by the circuit design.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the I/O type depends upon a standard I/O type and a maximum capacity of a physical I/O bank having the standard I/O type.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, said step of determining whether a feasible solution exists further comprising calculating a number of virtual I/O banks needed by the circuit design, based upon a plurality of constraints, using an Integer Linear Programming technique.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the plurality of constraints comprise a resource constraint indicating that a sum of all I/O objects of a selected I/O type assigned to all virtual I/O bank-groups is equal to a total number of I/O objects in an I/O group of the selected I/O type.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the plurality of constraints comprise a capacity constraint indicating that for a virtual I/O bank-group of a particular I/O type, a capacity of the virtual I/O bank-group is not less than a total number of I/O objects assigned to the virtual I/O bank-group.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein each I/O type specifies an I/O standard having a particular termination type, such that the binary compatibility matrix indicates compatibility among different I/O standards.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. A method of determining a solution for input/output (I/O) assignment for a circuit design for a programmable logic device comprising:
<claim-text>identifying a set of relationships among a plurality of I/O objects of the circuit design, wherein the set of relationships is dependent upon an I/O standard of each of the plurality of I/O objects;</claim-text>
<claim-text>creating a binary compatibility matrix based upon the set of relationships, wherein the binary compatibility matrix indicates compatibility among different ones of the plurality of I/O objects of the circuit design that correspond to different I/O standards;</claim-text>
<claim-text>determining an assignment of I/O objects of the circuit design to a plurality of virtual I/O bank-groups, wherein each virtual I/O bank-group comprises at least one virtual I/O bank; and</claim-text>
<claim-text>mapping each virtual I/O bank to a physical I/O bank of the programmable logic device.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, further comprising:
<claim-text>calculating a number of virtual I/O banks used; and</claim-text>
<claim-text>if the number of virtual I/O banks exceeds a number of physical I/O banks of the programmable logic device, determining that the I/O assignment solution is not feasible.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the set of relationships comprises at least one capacity constraint which indicates a number of I/O objects that can be assigned to a selected, physical I/O bank of the programmable logic device based upon pin requirements of I/O standards of the I/O objects assigned thereto.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, said determining step comprising first solving an Integer Linear Programming problem defined by the set of relationships.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. A method of assigning input/output (I/O) objects of a circuit design to physical I/O banks of a programmable logic device comprising:
<claim-text>formulating a plurality of constraints regulating placement of I/O objects to physical I/O banks of the programmable logic device;</claim-text>
<claim-text>creating a binary compatibility matrix indicating compatibility among the I/O objects;</claim-text>
<claim-text>defining an Integer Linear Programming problem which depends upon the plurality of constraints and the binary compatibility matrix; and</claim-text>
<claim-text>solving the Integer Linear Programming problem to determine whether a feasible solution exists for assignment of the I/O objects of the circuit design.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The method of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the plurality of constraints depend upon I/O types, wherein the I/O types, denoted as Tk, are defined as Tk={Sk, Ck}, where Sk represents an I/O standard of type k, and where Ck represents a maximum capacity of a physical I/O bank of the programmable logic device that is assigned I/O objects of type Sk.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The method of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the plurality of constraints depend upon virtual I/O bank-groups, wherein the virtual I/O bank-groups, denoted as B of type k, are defined as Bk={Yk, Tk}, where Yk represents a total number of virtual I/O banks that have a same I/O type Tk.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The method of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the plurality of constraints depend upon I/O groups, wherein the I/O groups, denoted as Gi, are defined as Gi={Ni, Ti}, where Ni is the total number of I/O objects that have the same I/O type Ti, and i=1 to M, where M is the total number of I/O types specified by the circuit design.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The method of <claim-ref idref="CLM-00016">claim 16</claim-ref>, said defining step further comprising specifying a resource constraint as</claim-text>
<claim-text>
<maths id="MATH-US-00007" num="00007">
<math overflow="scroll">
<mrow>
  <mrow>
    <mrow>
      <munderover>
        <mo>∑</mo>
        <mrow>
          <mi>k</mi>
          <mo>=</mo>
          <mn>1</mn>
        </mrow>
        <mi>M</mi>
      </munderover>
      <mo>⁢</mo>
      <mstyle>
        <mspace width="0.3em" height="0.3ex"/>
      </mstyle>
      <mo>⁢</mo>
      <mi>Xik</mi>
    </mrow>
    <mo>=</mo>
    <mi>Ni</mi>
  </mrow>
  <mo>,</mo>
</mrow>
</math>
</maths>
</claim-text>
<claim-text>where Xik is a number of I/O objects from an I/O group Gi that is assigned to a virtual I/O bank-group Bk, and Ni is a total number of I/O objects of group Gi.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The method of <claim-ref idref="CLM-00017">claim 17</claim-ref>, said defining step further comprising specifying a capacity constraint as</claim-text>
<claim-text>
<maths id="MATH-US-00008" num="00008">
<math overflow="scroll">
<mrow>
  <mrow>
    <mrow>
      <munderover>
        <mo>∑</mo>
        <mrow>
          <mi>i</mi>
          <mo>=</mo>
          <mn>1</mn>
        </mrow>
        <mi>M</mi>
      </munderover>
      <mo>⁢</mo>
      <mstyle>
        <mspace width="0.3em" height="0.3ex"/>
      </mstyle>
      <mo>⁢</mo>
      <mi>AikXik</mi>
    </mrow>
    <mo>≤</mo>
    <mi>CkYk</mi>
  </mrow>
  <mo>,</mo>
</mrow>
</math>
</maths>
</claim-text>
<claim-text>where Aik is an element of the binary compatibility matrix and is a binary value indicating compatibility between an I/O group Gi and a virtual I/O bank-group Bk.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The method of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein the total number of virtual I/O banks, denoted as Nvb, is defined as</claim-text>
<claim-text>
<maths id="MATH-US-00009" num="00009">
<math overflow="scroll">
<mrow>
  <mrow>
    <mi>Nvb</mi>
    <mo>=</mo>
    <mrow>
      <munderover>
        <mo>∑</mo>
        <mrow>
          <mi>k</mi>
          <mo>=</mo>
          <mn>1</mn>
        </mrow>
        <mi>M</mi>
      </munderover>
      <mo>⁢</mo>
      <mstyle>
        <mspace width="0.3em" height="0.3ex"/>
      </mstyle>
      <mo>⁢</mo>
      <mi>Yk</mi>
    </mrow>
  </mrow>
  <mo>,</mo>
</mrow>
</math>
</maths>
</claim-text>
<claim-text>and the Integer Linear Programming problem comprises an objective function, denoted as F, defined as F=min(Nvb).</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The method of <claim-ref idref="CLM-00019">claim 19</claim-ref>, said solving step comprising calculating at least one value for Yk.</claim-text>
</claim>
</claims>
</us-patent-grant>
