<us-patent-grant lang="EN" dtd-version="v4.2 2006-08-23" file="US07299201-20071120.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20071106" date-publ="20071120">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>07299201</doc-number>
<kind>B2</kind>
<date>20071120</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>11279550</doc-number>
<date>20060412</date>
</document-id>
</application-reference>
<us-application-series-code>11</us-application-series-code>
<us-term-of-grant>
<disclaimer>
<text>This patent is subject to a terminal disclaimer.</text>
</disclaimer>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>Q</subclass>
<main-group>30</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>3</main-group>
<subgroup>00</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>705 26</main-classification>
<further-classification>705 27</further-classification>
<further-classification>715748</further-classification>
</classification-national>
<invention-title id="d0e51">System and method for designing and operating an electronic store</invention-title>
<references-cited>
<citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5491795</doc-number>
<kind>A</kind>
<name>Beaudet et al.</name>
<date>19960200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5528490</doc-number>
<kind>A</kind>
<name>Hill</name>
<date>19960600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717168</main-classification></classification-national>
</citation>
<citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>5715314</doc-number>
<kind>A</kind>
<name>Payne et al.</name>
<date>19980200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>5745681</doc-number>
<kind>A</kind>
<name>Levine et al.</name>
<date>19980400</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>5757917</doc-number>
<kind>A</kind>
<name>Rose et al.</name>
<date>19980500</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>5790116</doc-number>
<kind>A</kind>
<name>Malone et al.</name>
<date>19980800</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>5848399</doc-number>
<kind>A</kind>
<name>Burke</name>
<date>19981200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>5855015</doc-number>
<kind>A</kind>
<name>Shoham</name>
<date>19981200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>5897622</doc-number>
<kind>A</kind>
<name>Blinn et al.</name>
<date>19990400</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>5956487</doc-number>
<kind>A</kind>
<name>Venkatraman et al.</name>
<date>19990900</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>5970471</doc-number>
<kind>A</kind>
<name>Hill</name>
<date>19991000</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>6014638</doc-number>
<kind>A</kind>
<name>Burge et al.</name>
<date>20000100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>6262729</doc-number>
<kind>B1</kind>
<name>Marcos et al.</name>
<date>20010700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>715744</main-classification></classification-national>
</citation>
<citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>6339439</doc-number>
<kind>B1</kind>
<name>Takahashi et al.</name>
<date>20020100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>715853</main-classification></classification-national>
</citation>
<citation>
<patcit num="00015">
<document-id>
<country>EP</country>
<doc-number>0123456</doc-number>
<date>19841000</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00016">
<document-id>
<country>EP</country>
<doc-number>1074923</doc-number>
<date>20010200</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00017">
<document-id>
<country>WO</country>
<doc-number>WO9526004</doc-number>
<date>19950900</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00018">
<othercit>Anon, “Farallon Implements World Wide Web Server for Internet”, Worldwide Databases, vol. 6, No. 7, Jul. 1994.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00019">
<othercit>Sama, D.E., “Blindsided by the Internet”, Datamation, vol. 42, pp. 24-25, Mar. 1, 1996.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00020">
<othercit>Wasserman, E., “Xerox Unit Develops a Way of Cutting through the Web Tape . . . ”, Philadelphia Inquirer, SF edition, Tech Life section, p. F02, Jan. 30, 1997.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
</references-cited>
<number-of-claims>11</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>705 26</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>705 27</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>705 28</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715748</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715762</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715763</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715789</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>27</number-of-drawing-sheets>
<number-of-figures>33</number-of-figures>
</figures>
<us-related-documents>
<continuation>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>10166233</doc-number>
<kind>00</kind>
<date>20020604</date>
</document-id>
<parent-grant-document>
<document-id>
<country>US</country>
<doc-number>7076453</doc-number>
<kind>A </kind>
</document-id>
</parent-grant-document>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>11279550</doc-number>
</document-id>
</child-doc>
</relation>
</continuation>
<continuation>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>08948453</doc-number>
<kind>00</kind>
<date>19971010</date>
</document-id>
<parent-grant-document>
<document-id>
<country>US</country>
<doc-number>6484149</doc-number>
<kind>A </kind>
</document-id>
</parent-grant-document>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>10166233</doc-number>
</document-id>
</child-doc>
</relation>
</continuation>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20060190355</doc-number>
<kind>A1</kind>
<date>20060824</date>
</document-id>
</related-publication>
</us-related-documents>
<parties>
<applicants>
<applicant sequence="001" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Jammes</last-name>
<first-name>Pierre J.</first-name>
<address>
<city>Bellevue</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="002" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Franklin</last-name>
<first-name>D. Chase</first-name>
<address>
<city>Seattle</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="003" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Remington</last-name>
<first-name>Darren B.</first-name>
<address>
<city>Issaquah</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
</applicants>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Lee &amp; Hayes, PLLC</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</parties>
<assignees>
<assignee>
<addressbook>
<orgname>Microsoft Corporation</orgname>
<role>02</role>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Rosen</last-name>
<first-name>Nicholas D.</first-name>
<department>3625</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Systems and methods for designing and operating an electronic store are described. Various embodiments describe receiving a request for an electronic store web a e from a web browser. In response to the request, a database query is performed, and product information describing a hierarchical relationship between groups of products is extracted from the database. The extracted product information is related to a first group of products whose previous selection by a user initiated the database query. A web page which includes information describing the relationship between the first group of products and the extracted product information is sent to the requesting web browser, and is configured to enable the web browser to generate a user interface displaying icons arranged to visually represent the relationship.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="135.21mm" wi="245.45mm" file="US07299201-20071120-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="246.63mm" wi="166.20mm" orientation="landscape" file="US07299201-20071120-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="244.35mm" wi="133.60mm" orientation="landscape" file="US07299201-20071120-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="249.68mm" wi="166.62mm" orientation="landscape" file="US07299201-20071120-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="224.96mm" wi="163.07mm" orientation="landscape" file="US07299201-20071120-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="247.40mm" wi="158.50mm" file="US07299201-20071120-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="248.84mm" wi="160.70mm" file="US07299201-20071120-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="249.26mm" wi="148.51mm" orientation="landscape" file="US07299201-20071120-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="220.64mm" wi="133.69mm" file="US07299201-20071120-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="197.70mm" wi="148.08mm" file="US07299201-20071120-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="226.57mm" wi="175.18mm" orientation="landscape" file="US07299201-20071120-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="249.68mm" wi="172.13mm" file="US07299201-20071120-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="234.70mm" wi="150.03mm" file="US07299201-20071120-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00013" num="00013">
<img id="EMI-D00013" he="207.86mm" wi="164.68mm" orientation="landscape" file="US07299201-20071120-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00014" num="00014">
<img id="EMI-D00014" he="236.39mm" wi="166.96mm" file="US07299201-20071120-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00015" num="00015">
<img id="EMI-D00015" he="252.81mm" wi="179.49mm" file="US07299201-20071120-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00016" num="00016">
<img id="EMI-D00016" he="246.55mm" wi="181.86mm" file="US07299201-20071120-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00017" num="00017">
<img id="EMI-D00017" he="185.84mm" wi="136.57mm" file="US07299201-20071120-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00018" num="00018">
<img id="EMI-D00018" he="227.25mm" wi="174.50mm" orientation="landscape" file="US07299201-20071120-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00019" num="00019">
<img id="EMI-D00019" he="246.97mm" wi="177.12mm" file="US07299201-20071120-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00020" num="00020">
<img id="EMI-D00020" he="247.65mm" wi="160.78mm" file="US07299201-20071120-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00021" num="00021">
<img id="EMI-D00021" he="241.47mm" wi="138.01mm" file="US07299201-20071120-D00021.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00022" num="00022">
<img id="EMI-D00022" he="249.68mm" wi="156.80mm" file="US07299201-20071120-D00022.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00023" num="00023">
<img id="EMI-D00023" he="254.85mm" wi="170.52mm" orientation="landscape" file="US07299201-20071120-D00023.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00024" num="00024">
<img id="EMI-D00024" he="255.52mm" wi="174.41mm" orientation="landscape" file="US07299201-20071120-D00024.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00025" num="00025">
<img id="EMI-D00025" he="243.08mm" wi="184.83mm" file="US07299201-20071120-D00025.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00026" num="00026">
<img id="EMI-D00026" he="254.76mm" wi="173.65mm" file="US07299201-20071120-D00026.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00027" num="00027">
<img id="EMI-D00027" he="250.87mm" wi="182.20mm" orientation="landscape" file="US07299201-20071120-D00027.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">RELATED APPLICATION</heading>
<p id="p-0002" num="0001">This application is a continuation of and claims priority to U.S. patent application Ser. No. 10/166,233 filed on Jun. 4, 2002 now U.S Pat. No. 7,076,453, which, in turn, is a continuation of and claims priority to U.S. patent application Ser. No. 08/948,453 filed on Oct. 10, 1997 now U.S. Pat. No. 6,484,149, the disclosures of which are incorporated by reference herein.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0002" level="1">TECHNICAL FIELD</heading>
<p id="p-0003" num="0002">This invention relates to computer-based shopping. More specifically, the present invention relates to software tools for developing and operating Web sites.</p>
<heading id="h-0003" level="1">BACKGROUND</heading>
<p id="p-0004" num="0003">Electronic shopping systems currently exist which permit merchants to sell inventory to consumers over a computer network. Merchants now use computers to publish information about their products on one or more electronic pages (e.g., text and graphics displayable on a computer screen) and to elicit product orders from consumers. Likewise, consumers use computers to access information describing products and to communicate orders to a merchant.</p>
<p id="p-0005" num="0004">With the increasing popularity and accessibility of the Internet, and particularly the World Wide Web, the number of merchants using and desiring to use the World Wide Web to advertise and sell products is growing rapidly. The World Wide Web is a global information system in which information is exchanged over the Internet using a set of standard protocols. An existing Web-based electronic store typically comprises a collection of Web pages which describe inventory and which include online forms allowing consumers to place orders. Consumers use Web browsers to access the Web pages of electronic stores to examine information about available products and to submit product orders.</p>
<p id="p-0006" num="0005">As described in more detail below, existing Web site development tools are not well suited to the task of developing and managing the content of an electronic store, and do not provide the functionality and flexibility needed by developers to efficiently generate and control a dynamic store environment of the type needed in the electronic marketplace. Existing systems and methods for designing and maintaining electronic stores are burdensome or require a high level of technical knowledge or both. The present invention seeks to solve these and other problems.</p>
<heading id="h-0004" level="1">SUMMARY</heading>
<p id="p-0007" num="0006">According to one existing method of designing and managing an electronic store, the electronic store is generated by manually assembling and compiling a collection of fixed Web pages. This method generally requires the store designer to have an intimate knowledge of HTML (HyperText Markup Language) to update the content or format of any page. As required by this method, a store designer must learn numerous HTML tags as well as specific parameters for each tag. The store designer uses a standard text editor to edit Web pages by embedding tags, parameters and informational content in text files representing the Web pages.</p>
<p id="p-0008" num="0007">The burden of altering the content or format of individual Web pages has been eased somewhat by HTML authoring systems which permit Web page designers to work in a WYSIWYG (What You See Is What You Get) manner. Users of existing HTML authoring systems do not need to learn HTML and, instead, use visually oriented commands such as ‘bold,’ ‘italic’ or ‘center justify” to emphasize or position informational content. A user sees only the visual effect of the command, while the HTML authoring system embeds HTML tags in an underlying text file.</p>
<p id="p-0009" num="0008">However, a merchant's inventory typically fluctuates greatly, and electronic catalogs require frequent updating due, for example, to changes in product availability and price, the introduction of new products or product lines, upcoming promotions, or product discontinuances. Many merchants use an inventory control system to manage their ever-changing inventory. Yet, it is highly inefficient for a merchant to have to both update inventory through an inventory control system and also use an HTML authoring system to ensure that the same set of changes are accurately reflected in a collection of Web pages.</p>
<p id="p-0010" num="0009">Moreover, the different inventory control systems commonly use very different types of databases to host the inventory data and use different hardware and software platforms. Very few, if any, of these inventory control systems make information accessible via the World Wide Web, and many merchants do not have the time, skill or resources to design or develop software extensions that would make their inventory control systems compatible with the World Wide Web.</p>
<p id="p-0011" num="0010">Many merchants now operating electronic stores simply lease Web server resources from a Web service provider and hire skilled technicians to periodically update store Web pages. These merchants thus have no direct control over their electronic stores and have no automated way of taking information from an existing inventory control system and moving that information into a collection of Web pages. What is needed is a way of providing merchants full control over the design and content of their electronic stores and a way to automatically transfer current information from inventory control systems into Web pages.</p>
<p id="p-0012" num="0011">Another problem encountered by merchants attempting to operate electronic stores is the tedious job of periodically adding or deleting categories of products and reorganizing products into different categories. Many on-line catalogs presenting inventories of electronic stores use a top-down menu approach wherein an initial catalog page appearing on a consumer's computer screen lists general product categories. If a user selects one of the general categories, another page appears on the computer screen presenting a narrower subordinate menu of product lines. Thus, a user navigates from high level menus to lower level menus, eventually reaching a page that describes an individual product. This type of menu navigation is popular on the Internet and on other networks, because it is easy for consumers to understand, and allows consumers to reach a particular product in a convenient and timely manner. However, top-down menu style catalogs are difficult to design and maintain. This is because each of the pages of such a catalog typically includes multiple hyperlinks, each hyperlink providing a precise reference to another page. As a result, a change to one page may require changes to many other pages, creating a complicated and tedious editing job.</p>
<p id="p-0013" num="0012">More specifically, to effectively use the World Wide Web for advertising and selling products, merchants must create and edit not only the categories and products presented on a page, but also the hyperlinks tying a set of Web pages together such that a user can navigate the pages conveniently. This process is tedious, time consuming, and highly susceptible of introducing errors, especially when altering hyperlinks of a large set of Web pages.</p>
<p id="p-0014" num="0013">The present invention overcomes these and other problems by providing a software architecture for allowing merchants to design and efficiently manage computer network-based electronic stores. In one embodiment of the present invention, a software system is provided which includes software tools permitting a store designer to use an enhanced Web browser to design and manage an electronic store. The software system is referred to herein as the Merchant Workbench. Using the Merchant Workbench, the store designer uses a graphical user interface to create and edit product information, establish categories of products, and organize a navigable hierarchy of products and categories. The Merchant Workbench allows a merchant having little or no knowledge of HTML coding or database queries to design an electronic store wherein a collection of template Web pages is integrated with a product information database (or inventory control system) such that information is extracted on-demand from the database, merged with the Web page templates, and presented to consumers.</p>
<p id="p-0015" num="0014">In a preferred embodiment, the Merchant Workbench includes an enhanced Web browser that accesses an electronic store design application via the Internet. Thus, even though an Web site is hosted by a stationary computer—even one leased from a Web service provider—the user (e.g., a merchant) can design and modify the organization and inventory of the store from almost anywhere in the world (i.e., any geographic location having standard telephone lines).</p>
<p id="p-0016" num="0015">In operation, the enhanced Web browser accesses Web pages of an electronic store design application (hosted by a store Web site) to generate a graphical user interface. This graphical user interface displays information about the products and groups of products offered by the electronic store. Specifically, the graphical user interface displays icons, each of which represents either a group (i.e., category) of products or an individual product. The graphical user interface arranges the icons to visually illustrate hierarchical relationships between the groups and products sold by the electronic store (e.g., an ‘Automotive’ group contains a ‘Sedans’ group, and the ‘Sedans’ group contains a ‘Toyota Camry’ product, a ‘Honda Accord’ product, and a ‘Mercury Sable’ product).</p>
<p id="p-0017" num="0016">The flexibility provided by the Merchant Workbench in designing a store structure advantageously permits a merchant to design an electronic store having a navigational layout which resembles an actual store. For example, the hierarchy comprising products and product groups may be conveniently based on the product categorization for an actual store, such as floors, departments, subdepartments, aisles, shelves, and individual products. Thus, even consumers new to the Internet experience friendly and familiar shopping elements.</p>
<p id="p-0018" num="0017">In one implementation of the Merchant Workbench, the graphical user interface of the enhanced Web browser displays the hierarchy of an electronic store using the same model utilized by many personal computer operating systems to graphically display the file structure hierarchy of a computer storage medium, such as a floppy disk, hard disk, or CD-ROM. Such hierarchical displays are generated, for example, by the File Manager program of Windows® version 3.1 and by the Microsoft Explorer program of Windows® 95. These hierarchical displays show a subordinate file directory level as an icon positioned below and to the right of an icon representing a parent directory.</p>
<p id="p-0019" num="0018">Using an hierarchical display model familiar to millions of personal computer users reduces the need for merchants to learn a new interface. In one embodiment of the present invention, an icon representing a store is related to subordinate icons representing departments of the store which, in turn, are related to further subordinate icons representing subdepartments of the store, each of which may be related to a collection of icons (or other screen elements) representing individual products.</p>
<p id="p-0020" num="0019">To modify information about a product or a group using the enhanced Web browser, a merchant selects a representative icon, enters or modifies product or group information, and stores the data in the product information database. The merchant can also perform simple drag-and-drop operations on icons to modify relationships between products, groups, or both (e.g., an icon representing a ‘Geo Prism’ product is dragged from a location hierarchically subordinate to a ‘Sedans’ group icon and dropped at a location hierarchically subordinate to an ‘Economy Car’ group icon, thereby creating a relationship between the ‘Geo Prism’ product and the ‘Economy Car’ group and deleting the relationship between the ‘Geo Prism’ product and the ‘Sedans’ group).</p>
<p id="p-0021" num="0020">Data records of a product information database store information comprising an inventory of an electronic store, including information about products and groups and the relationships between them. Software tools of the Merchant Workbench create and update the data records of the product information database in response to user manipulation of the graphical user interface.</p>
<p id="p-0022" num="0021">The Merchant Workbench provides a further advantage over present electronic store systems by monitoring the shopping behavior of consumers to gather traffic analysis data, and by using the traffic analysis data to customize the navigable store hierarchy presented to each consumer. The store hierarchy presented to each consumer is customized according to recorded shopping habits of the particular consumer to make the on-line shopping experience more convenient and expedient as well as more pleasant.</p>
<p id="p-0023" num="0022">In another advantage over present electronic store systems, the Merchant Workbench stores information indicating that particular products (cross-sale products) are often sold together. Consumers ordering one of such products are automatically presented with links to web pages describing related products.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0024" num="0023">A preferred embodiment (“Merchant Workbench”) of the present invention will be described below in connection with the accompanying drawing figures in which:</p>
<p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. 1</figref> illustrates components of a Merchant Workbench in accordance with the present invention for designing and operating an electronic store over the Internet;</p>
<p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. 2</figref> illustrates components of the Merchant Workbench used to design an electronic store;</p>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. 3</figref> illustrates components of the Merchant Workbench which generate a hierarchal user interface enabling a user to access and update data describing inventory of an electronic store;</p>
<p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. 4</figref> illustrates components of an example of a store design user interface of the Merchant Workbench;</p>
<p id="p-0029" num="0028"><figref idref="DRAWINGS">FIGS. 5A and 5B</figref> illustrate the steps required to generate initial left pane and right pane displays of a store design user interface;</p>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. 6</figref> illustrates a portion of an example product tree structure;</p>
<p id="p-0031" num="0030"><figref idref="DRAWINGS">FIGS. 7A</figref>, <b>7</b>B, <b>7</b>C, and <b>7</b>D illustrate successive representations of a store design user interface;</p>
<p id="p-0032" num="0031"><figref idref="DRAWINGS">FIGS. 8A and 8B</figref> illustrate steps performed to update the store design user interface upon recognition of an expand event;</p>
<p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. 9</figref> illustrates a process of dragging and dropping elements of a left pane and of a right pane of a store design user interface;</p>
<p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. 10A</figref> illustrates steps performed when a drag event occurs in the left pane of a store design user interface;</p>
<p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. 10B</figref> illustrates steps performed when a drag event occurs in the right pane of a store design user interface;</p>
<p id="p-0036" num="0035"><figref idref="DRAWINGS">FIGS. 11A and 11B</figref> illustrate steps performed to modify relationships between groups or products when a drop event is recognized in either the left pane or the right pane of a store design user interface;</p>
<p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. 12</figref> illustrates an updated hierarchical structure of icons associated with groups following a drag-and-drop event operation;</p>
<p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. 13</figref> illustrates a command area of a store design user interface, commands within the command area, fields and command of a new group dialogue box, and fields and command buttons comprising a new product dialogue box;</p>
<p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. 14</figref> illustrates steps performed to add a new group data record to a group table;</p>
<p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. 15</figref> illustrates steps performed to update information about a group or a product;</p>
<p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. 16</figref> illustrates high-level steps performed to integrate inventory information data with web pages of an electronic store;</p>
<p id="p-0042" num="0041"><figref idref="DRAWINGS">FIG. 17</figref> illustrates steps performed by an Web server to retrieve, construct, and transmit a requested web page to a Web browser;</p>
<p id="p-0043" num="0042"><figref idref="DRAWINGS">FIG. 18</figref> illustrates an example of steps performed according to the present invention to construct a Web page requested by a consumer;</p>
<p id="p-0044" num="0043"><figref idref="DRAWINGS">FIG. 19</figref> illustrates a further example of steps performed to construct a Web page requested by a consumer;</p>
<p id="p-0045" num="0044"><figref idref="DRAWINGS">FIGS. 20A and 20B</figref> illustrate steps performed to assign a consumer identifier to a consumer and to record an access to a Web page or to record an order for a product; and</p>
<p id="p-0046" num="0045"><figref idref="DRAWINGS">FIG. 21</figref> illustrates an example of steps performed according to the present invention to customize a Web page of an electronic store for a particular consumer.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0006" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0047" num="0046">1. Glossary of Terms and Acronyms</p>
<p id="p-0048" num="0047">The following terms, definitions and explanations are intended to facilitate an understanding of the detailed description, and should also be considered when evaluating the scope of the claims. Additional definitions are provided throughout the detailed description.</p>
<p id="p-0049" num="0048">Internet. The Internet is a collection of interconnected public and private computer networks that are linked together by a set of standard protocols (such as TCP/IP, HTTP, FTM and Gopher) to form a global, distributed network.</p>
<p id="p-0050" num="0049">Document. Generally, a collection of data that can be viewed using an application program, and that appears or is treated as a self-contained entity. An “HTML document” is a special type of document which includes HTML (HyperText Markup Language) codes to permit the document to be viewed using a Web browser program. An HTML document that is accessible on a World Wide Web site is commonly referred to as a “Web document” or “Web page.” Web documents commonly include embedded components, such as GIF (Graphics Interchange Format) files, which are represented within the HTML coding as links to URLs. (See “HTML” and “URL” below.)</p>
<p id="p-0051" num="0050">Hyperlink. A navigational link from one document to another, or from one portion (or component) of a document to another. Typically, a hyperlink is displayed as a highlighted word or phrase that can be clicked on using the mouse to jump to the associated document or document portion.</p>
<p id="p-0052" num="0051">Hypertext System. A computer-based informational system in which documents (and possibly other types of data entities) are linked together via hyperlinks to form a user-navigable “web.” Although the term “text” appears within “hypertext,” the documents and hyperlinks of a hypertext system may (and typically do) include other forms of media. For example, a hyperlink to a sound file may be represented within a document by a graphic image of an audio speaker.</p>
<p id="p-0053" num="0052">World Wide Web. A distributed, global hypertext system, based on an set of standard protocols and conventions (such as HTTP and HTML, discussed below), which uses the Internet as a transport mechanism. A software program which allows users to request and view World Wide Web (“Web”) documents is commonly referred to as a “Web browser,” and a program which responds to such requests by returning (“serving”) Web documents is commonly referred to as a “Web server.”</p>
<p id="p-0054" num="0053">Web Site. As used herein, “web site” refers generally to a database or other collection of inter-linked hypertextual documents (and associated data entities) which is accessible via a computer network, and which forms part of a larger, distributed informational system. Depending upon its context, the term may also refer to the associated hardware and/or software server components used to provide access to such documents. When used herein with initial capitalization (i.e., “Web site”), the term refers more specifically to a web site of the World Wide Web. (In general, a Web site corresponds to a particular Internet domain name, such as “merc-int.com,” and includes information content associated with a is particular organization.) Other types of web sites may include, for example, a hypertextual database of a corporate “intranet” (i.e., an internal network which uses standard Internet protocols), or a site of a hypertext system that uses document retrieval protocols other than those of the World Wide Web.</p>
<p id="p-0055" num="0054">Web Browser. As used herein, “web browser” refers generally to a data retrieval tool capable of navigating and accessing inter-linked hypertextual documents over a computer network and displaying information from an accessed document on a computer screen. Depending upon its context, the term may also refer to the associated hardware and/or software server components used to navigate and access such documents. When used herein with initial capitalization (i.e., “Web browser”), the term refers more specifically to a web browser of the World Wide Web which navigates and accesses Web pages. Other types of web browser may include, for example, a tool for accessing a hypertextual database of a corporate “intranet” (i.e., an internal network which uses standard Internet protocols), or a tool to access documents of a hypertext system that uses document retrieval protocols other than those of the World Wide Web. A web browser may be implemented as a collection of instructions stored on computer storage media (e.g., disk drive media, CD-ROM, ROM, EPROM, etc.), the instructions executable by a computer as an application program, as part of the operating system, as a dedicated function of network computer, or a combination of these or other forms for loading and executing instructions.</p>
<p id="p-0056" num="0055">Content Object. As used herein, a data entity (document, document component, etc.) that can be selectively retrieved from a web site. In the context of the World Wide Web, common types of content objects include HTML documents, GIF files, sound files, video files, Java applets, and downloadable applications. Each object has a unique identifier (referred to as the “URL”) which is specifies the location of the object. (See “URL” below.)</p>
<p id="p-0057" num="0056">URL (Uniform Resource Locator). A unique address which fully specifies the location of a content object on the Internet. The general format of a URL is protocol://machine-address/path/filename. (As will be apparent from the context in which it is used, the term “URL” is also used herein to refer to the corresponding content object itself.)</p>
<p id="p-0058" num="0057">HTML (HyperText Markup Language). A standard coding convention and set of codes for attaching presentation and linking attributes to informational content within documents. During a document authoring stage, the HTML codes (referred to as “tags”) are embedded within the informational content of the document. When the Web document (or “HTML document”) is subsequently transmitted by a Web server to a Web browser, the codes are interpreted by the browser and used to parse and display the document. In addition to specifying how the Web browser is to display the document, HTML tags can be used create hyperlinks to other Web documents. For more information on HTML, see Ian S. Graham, <i>The HTML Source Book</i>, John Wiley and Sons, Inc., 1995 (ISBN 0471-11894-4).</p>
<p id="p-0059" num="0058">HTTP (Hypertext Transfer Protocol). The standard World Wide Web client-server protocol used for the exchange of information (such as HTML documents, and client requests for such documents) between a Web browser and a Web server. HTTP includes several different types of messages which can be sent from the client to the server to request different types of server actions. For example, a “GET” message, which has the format GET &lt;URL&gt;, causes the server to return the content object located at the specified URL.</p>
<p id="p-0060" num="0059">CGI (Common Gateway Interface). A standard interface which specifies how a Web server (or possibly another information server) launches and interacts with external programs (such as a database search engine) in response to requests from clients. With CGI, the Web server can serve information which is stored in a format that is not readable by the client, and present such information in the form of a client-readable Web page. A CGI program (called a “CGI script”) may be invoked, for example, when a Web user fills out an on-screen form which specifies a database query. For more information on CGI, see Ian S. Graham, <i>The HTML Source Book</i>, John Wiley and Sons, Inc., 1995 (ISBN 0471-11894-4), pp. 231-278.</p>
<p id="p-0061" num="0060">ISAPI (Internet Server Application Program Interface). Microsoft's interface for allowing a Web server (or other information server) to launch and interact with external programs in response to requests from clients. ISAPI programs are in the form of dynamic link libraries (DLLs) which run in the same process space as the Web server. Thus, ISAPI performs a similar function to that of CGI, but without requiring the launching of a separate process. Documentation on ISAPI is available from Microsoft Corporation as part of the Microsoft Internet Information Server Software Development Kit.</p>
<p id="p-0062" num="0061">The present invention is directed to software tools and associated methods for designing and operating an electronic store via a distributed network such as the Internet. In the preferred embodiment these software tools and associated methods are embodied within a software system referred to as the Merchant Workbench. In accordance with the invention, a consumer uses a standard Web browser to access an electronic store, and a store designer uses an enhanced Web browser (a component of the Merchant Workbench) to establish and manage inventory information for the electronic store and to organize the presentation of that inventory through a collection of linked Web pages.</p>
<p id="p-0063" num="0062"><figref idref="DRAWINGS">FIG. 1</figref> illustrates components of the Merchant Workbench for designing and operating an electronic store over the Internet. A Web browser <b>102</b> sends and receives data over the World Wide Web <b>104</b>. An Web server <b>106</b> also sends and receives data over with the World Wide Web <b>104</b>. The Web server <b>106</b> accesses HTML template files <b>108</b> stored on accessible computer storage media. An HTML authoring system <b>110</b> is used to create and modify HTML template files <b>108</b>.</p>
<p id="p-0064" num="0063">Many HTML authoring systems exist which can be used with the present invention to create HTML template files <b>108</b>. Each HTML template file <b>108</b> provides a background for one or more Web pages of an electronic store. The background may consist of a solid color or multi-colored pattern, fixed text displayed in various fonts, sizes, and colors, or one or more graphic illustrations, or a combination of all of these. Moreover, each HTML template file may also contain SQL queries used to designate data to be merged with the template when a shopper requests a page of the electronic store. Such queries will be further described herein. Additionally, the template may contain HTML commands (HTML tags) to format the result set generated by the SQL queries.</p>
<p id="p-0065" num="0064">The enhanced Web browser <b>112</b> communicates directly or indirectly with a Web server <b>106</b>. The communication between the enhanced Web browser <b>112</b> and the Web server <b>106</b> can take place across the World Wide Web <b>104</b>, or over a local area network comprising at least two computers wherein the enhanced Web browser <b>112</b> runs on a first computer and the Web server <b>106</b> runs on a second computer. Also, the enhanced Web browser <b>112</b> and the Web server <b>106</b> could operate at the same time on a single computer running a multi-tasking operating system such as Microsoft Windows™, Microsoft Windows 95™, or Microsoft Windows NT™.</p>
<p id="p-0066" num="0065">The enhanced Web browser <b>112</b> initiates data transactions with the product information database <b>116</b>. The enhanced Web browser <b>112</b> issues database transaction commands to the Web server <b>106</b>, which in turn issues those transaction commands to a relational database server <b>114</b>. In a preferred embodiment, the relational database server <b>114</b> utilizes open database connectivity (ODBC).</p>
<p id="p-0067" num="0066">Relational database servers <b>114</b> utilizing ODBC are known in the art. One function of such relational database servers is to provide to application programs a common query interface to interact with multiple database systems having different query interfaces. Methods for providing such common query interfaces are not within the scope of this invention and will not be further discussed.</p>
<p id="p-0068" num="0067">The Web server <b>106</b> passes generic database transaction commands (or queries) received from the enhanced Web browser <b>112</b> to the relational database server <b>114</b>; The relational database server <b>114</b> formats the generic database transaction commands <b>118</b> received from the Web server <b>106</b> as necessary to generate specific database transaction commands required to retrieve, store, or modify information stored in the product information database <b>116</b>.</p>
<p id="p-0069" num="0068">The Web server <b>106</b> receives requests generated by a standard Web browser <b>102</b> on a consumer computer. The standard Web browser <b>102</b> provides general capability to request data pages over the World Wide Web by including a URL value in an HTTP-coded request and transmitting that request. Known Web browsers such as Netscape Navigator™ 2.2 or Microsoft Explorer™ 3.0 are examples of standard Web browsers.</p>
<p id="p-0070" num="0069">In response to a request for a page, an HTML page engine <b>126</b> of the Web server <b>106</b> assembles an HTML page. Pages requested by a consumer running a Web browser <b>102</b> do not, in many cases, exist prior to the request. The HTML page engine <b>126</b> processes the information stored in the HTML template file <b>108</b>, extracts SQL queries from the template, and issues these generic product or category queries <b>122</b> to the relational database server <b>114</b>, which in turn issues a specific product or group (i.e., category of products) query <b>124</b> to the product information database <b>116</b>. The HTML page engine <b>126</b> receives the results of a product or group query and merges data from the query with a template file <b>108</b> to generate an HTML page.</p>
<p id="p-0071" num="0070">The HTML page engine also accesses a traffic analysis database <b>128</b> to examine prior interactions between a consumer and an electronic store to determine whether Web pages are customized for the consumer. To customize a Web page, the HTML page engine generates additional HTML hyperlinks for the Web page, enabling the consumer to more conveniently access preferred products or preferred Web pages. The HTML page is then routed via the Worldwide Web <b>104</b> to the Web browser <b>102</b> to satisfy the consumer's request.</p>
<p id="p-0072" num="0071">The components described in <figref idref="DRAWINGS">FIG. 1</figref> are used both to design an electronic store and also to operate an electronic store. Specifically, the HTML authoring system <b>110</b> and the enhanced Web browser <b>112</b> provide functionality for designing and maintaining an electronic store. Many HTML authoring systems <b>110</b> exist which can be used in connection with the Merchant Workbench, such as Microsoft FrontPage™, or Microsoft Visual Interdev™. Methods used by HTML authoring systems to produce HTML-coded information are well known in the art and will not be discussed further. However, aspects of the enhanced Web browser <b>112</b> permitting design of the structure of an electronic store are included in the present invention.</p>
<p id="p-0073" num="0072">The Web server <b>106</b>, having access to HTML template files <b>108</b> and also having access to data from the product information database <b>116</b> via the relational database server <b>114</b>, provides functionality for operating an electronic store. Neither the enhanced Web browser <b>112</b> nor the HTML authoring system <b>110</b> are needed to operate an electronic store.</p>
<p id="p-0074" num="0073">A. Design and Modification of an Electronic Store</p>
<p id="p-0075" num="0074"><figref idref="DRAWINGS">FIG. 2</figref> illustrates software components of the Merchant Workbench used to design an electronic store. An enhanced Web browser <b>112</b> communicates via the World Wide Web <b>104</b> with a Web server <b>106</b>. The Web server <b>106</b> accesses HTML template files <b>108</b>, as well as product information from a product information database <b>116</b>.</p>
<p id="p-0076" num="0075">The enhanced Web browser <b>112</b> permits a merchant to design an electronic store over the Internet. A merchant using the enhanced Web browser <b>112</b> creates data records which represent products and groups (i.e., product categories) and also relationships between them. These data records are stored in the product information database <b>116</b>.</p>
<p id="p-0077" num="0076">The product information database <b>116</b> can be hosted by a number of different relational database systems. For example, existing database products such as Oracle™ or Microsoft SQL Server™ could each be used to store and manage product information. Even though each such database product may accept a different set of commands for performing similar transactions, the relational database server <b>114</b> allows the Web server <b>106</b> to communicate with any of these database products using a uniform command interface.</p>
<p id="p-0078" num="0077">A user of the Merchant Workbench organizes the structure of an electronic store by establishing and maintaining relationships between products and groups of products. A products table <b>204</b> maintains information about products offered for sale. Table 1 describes the fields of each data record of the products table. A groups table <b>206</b> maintains information about groups of products offered for sale. The fields of each data record of the groups table <b>206</b> are described below in Table 2. The relationships between products and groups are stored in a relationships table <b>202</b>. Table 3 describes the fields of each record of the relationships table <b>202</b>. Note, that the names of the fields are descriptive of the information stored in each.</p>
<p id="p-0079" num="0078">
<tables id="TABLE-US-00001" num="00001">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" rowsep="1">TABLE 1</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>Products Table</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="70pt" align="left"/>
<colspec colname="1" colwidth="147pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>Merchant_ID</entry>
</row>
<row>
<entry/>
<entry>Product_ID</entry>
</row>
<row>
<entry/>
<entry>Name</entry>
</row>
<row>
<entry/>
<entry>Short_Description</entry>
</row>
<row>
<entry/>
<entry>Template_File_Name</entry>
</row>
<row>
<entry/>
<entry>Small_Image_File_Name</entry>
</row>
<row>
<entry/>
<entry>Large_Image_File_Name</entry>
</row>
<row>
<entry/>
<entry>Manufacturer_ID</entry>
</row>
<row>
<entry/>
<entry>No_Sale_Before_Date</entry>
</row>
<row>
<entry/>
<entry>No_Sale_After_Date</entry>
</row>
<row>
<entry/>
<entry>Unit_Measure</entry>
</row>
<row>
<entry/>
<entry>Currency</entry>
</row>
<row>
<entry/>
<entry>Price</entry>
</row>
<row>
<entry/>
<entry>Weight</entry>
</row>
<row>
<entry/>
<entry>Height</entry>
</row>
<row>
<entry/>
<entry>Width</entry>
</row>
<row>
<entry/>
<entry>Length</entry>
</row>
<row>
<entry/>
<entry>Shipping_Restriction_Flag</entry>
</row>
<row>
<entry/>
<entry>Shipping_Cost</entry>
</row>
<row>
<entry/>
<entry>Handling_Cost</entry>
</row>
<row>
<entry/>
<entry>Tax_Code</entry>
</row>
<row>
<entry/>
<entry>Status</entry>
</row>
<row>
<entry/>
<entry>Attribute_1</entry>
</row>
<row>
<entry/>
<entry>Attribute_2</entry>
</row>
<row>
<entry/>
<entry>Attribute_3</entry>
</row>
<row>
<entry/>
<entry>Attribute_4</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0080" num="0079">
<tables id="TABLE-US-00002" num="00002">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" rowsep="1">TABLE 2</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>Groups Table</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="70pt" align="left"/>
<colspec colname="1" colwidth="147pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>Merchant_ID</entry>
</row>
<row>
<entry/>
<entry>Group_ID</entry>
</row>
<row>
<entry/>
<entry>Group_Name</entry>
</row>
<row>
<entry/>
<entry>Parent</entry>
</row>
<row>
<entry/>
<entry>Short_Description</entry>
</row>
<row>
<entry/>
<entry>Template_File_Name</entry>
</row>
<row>
<entry/>
<entry>Small_Image_File_Name</entry>
</row>
<row>
<entry/>
<entry>Reference</entry>
</row>
<row>
<entry/>
<entry>No_Sale_Before_Date</entry>
</row>
<row>
<entry/>
<entry>No_Sale_After_Date</entry>
</row>
<row>
<entry/>
<entry>Attribute_1</entry>
</row>
<row>
<entry/>
<entry>Attribute_2</entry>
</row>
<row>
<entry/>
<entry>Attribute_3</entry>
</row>
<row>
<entry/>
<entry>Attribute_4</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0081" num="0080">
<tables id="TABLE-US-00003" num="00003">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" rowsep="1">TABLE 3</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>Relationships Table</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="77pt" align="left"/>
<colspec colname="1" colwidth="140pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>Merchant_ID</entry>
</row>
<row>
<entry/>
<entry>ID</entry>
</row>
<row>
<entry/>
<entry>ID_Type</entry>
</row>
<row>
<entry/>
<entry>Relationship</entry>
</row>
<row>
<entry/>
<entry>Related_ID</entry>
</row>
<row>
<entry/>
<entry>Related_ID_Type</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0082" num="0081"><figref idref="DRAWINGS">FIG. 3</figref> illustrates software components of the Merchant Workbench which generate a convenient, hierarchal user interface enabling a user to access and update data records holding information about products and groups of products of an electronic store. The enhanced Web browser includes a tree structure control <b>304</b> and a store management control <b>306</b>. As used here, a control refers to a software component that runs within the process space of the Web browser that is displayed within the window of the browser and that adds capabilities to the browser. Computer instructions of the tree structure control <b>304</b> and the store management control <b>306</b> execute in the same process space as the enhanced Web browser <b>112</b>.</p>
<p id="p-0083" num="0082">The tree structure control <b>304</b> includes a refresh method which generates, and repaints as needed, a left pane <b>308</b> of a store design user interface <b>310</b>. A refresh method of the store management control <b>306</b> generates, and updates a right pane <b>309</b> of the store design user interface <b>310</b>. The left pane <b>308</b> and the right pane <b>309</b> comprise separate paint regions of the store design user interface <b>310</b>. The store design user interface <b>310</b> is displayed within the two-dimensional space of the graphical user interface of the enhanced Web browser <b>112</b>.</p>
<p id="p-0084" num="0083">The hierarchical display of elements (e.g., icons, text labels, and lines) of the left pane <b>308</b> of the store design user interface <b>310</b> represents relationships between products and groups of products advertised and sold by an electronic store. The store management control <b>306</b> correlates the visual arrangement of elements displayed by the store design user interface <b>310</b> with the relationships between products and groups stored in the relationships table <b>202</b>.</p>
<p id="p-0085" num="0084">In a preferred embodiment, computer instructions included in the store management control <b>306</b> cause relationship data to be extracted from the product information database <b>116</b>. The store management control uses the relationship data to direct the tree structure control <b>304</b> to construct a local data structure representing the hierarchy of groups of an electronic store, thus enabling the tree structure control <b>304</b> to render (i.e., draw graphical and textual elements of) the left pane <b>308</b> of the store design user interface <b>310</b>. The store management control <b>306</b> also uses extracted relationship information to construct a local data structure associating information about individual products with groups containing them.</p>
<p id="p-0086" num="0085">When a user selects a group to examine its contents (i.e., subordinate products or groups contained in the group), the store management control determines what products are contained in the group and renders the right pane <b>309</b> to display a list of those products.</p>
<p id="p-0087" num="0086">The tree structure control <b>304</b> and the store management control <b>306</b> of the enhanced Web browser <b>112</b> are implemented using the ActiveX control specification. The ActiveX control specification is known in the art. See Kraig Brockschmidt, “Inside OLE,” 2nd ed., Microsoft Press; David Chappell, “Understanding ActiveX and OLE,” Microsoft Press. The method of implementing ActiveX control technology is beyond the scope of this invention and will not be described in detail.</p>
<p id="p-0088" num="0087">A store designer initiates the store design application by using the enhanced Web browser <b>112</b> to establish a communication link to the Internet. The enhanced Web browser <b>112</b> accesses a Web server <b>106</b> hosting an electronic store by transmitting, in part, a URL (Uniform Resource Locator) value (e.g., “http://mystore.design.com”) to the Internet which uniquely identifies the Web server hosting the electronic store design application. The Web server <b>106</b> responds by transmitting initial HTTP data <b>302</b> to the enhanced Web browser <b>112</b>.</p>
<p id="p-0089" num="0088">Embedded in the initial HTTP data are references to the tree structure control <b>304</b> and the store management control <b>306</b>, as well as control setup instructions for the two controls. Also embedded in the HTTP data <b>302</b> are Internet locations (i.e., additional URL's) from which executable instructions of the respective controls can be downloaded to the enhanced Web browser <b>112</b>. The following is an example of the format of a control reference located in HTTP data:</p>
<p id="p-0090" num="0089">
<tables id="TABLE-US-00004" num="00004">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>&lt;OBJECT</entry>
</row>
<row>
<entry>  id=ControlName</entry>
</row>
<row>
<entry>  type= “application/x-oleobject”</entry>
</row>
<row>
<entry>  classid=“clsid:CEC3ED35-903F-11d0-BEEA-AAAAAAAAAAAAA”</entry>
</row>
<row>
<entry>  codebase= “http://www.server.com/location/</entry>
</row>
<row>
<entry>     control.cab#version=1,00,00,0000”</entry>
</row>
<row>
<entry>  width=96%</entry>
</row>
<row>
<entry>  height=90%&gt;</entry>
</row>
<row>
<entry>&lt;OBJECT&gt;</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0091" num="0090">After receiving the initial HTTP data and recognizing the references to the tree structure control <b>304</b> and the store management control <b>306</b>, the enhanced Web browser <b>112</b> scans local computer storage media to determine whether executable computer instructions of the tree structure control <b>304</b> or the store management control <b>306</b> are accessible (directly readable from local computer storage media). If computer instructions of the tree structure control <b>304</b> or the store management control <b>306</b> are not accessible, the enhanced Web browser <b>112</b> accesses the Internet locations embedded in the HTTP-coded data and requests that data files comprising the respective controls be transmitted to the enhanced Web browser <b>112</b>. Requesting data files from Internet sites is well known in the art, as is storing files transmitted via the Internet on computer storage media accessible by a Web browser.</p>
<p id="p-0092" num="0091">Once the instructions of the tree structure control <b>304</b> and the store management control <b>306</b> are downloaded from specified Internet locations, those instructions are stored on computer storage media accessible to the enhanced Web browser <b>112</b>. The instructions of the tree structure control <b>304</b> and the store management control <b>306</b> then persist on computer storage media accessible by the enhanced Web browser <b>112</b>, remaining on the computer storage media even after the enhanced Web browser disconnects from the Worldwide Web <b>104</b>. The tree structure control <b>304</b> and the store management control <b>306</b> thus do not need to be downloaded at the beginning of each store design session.</p>
<p id="p-0093" num="0092">The enhanced Web browser <b>112</b> recognizes each control reference embedded in HTTP data and interprets each as a request to load the referenced control. To load a control, the Web browser <b>112</b> requests that the computer operating system, such as Windows, load the control. If the load fails, the Web browser <b>112</b> assumes the control has not yet been installed on the local computer and generates a message asking the user or store designer whether to install the control. If the user indicates a desire to install the control, the Web browser <b>112</b> requests that the control be downloaded from the server and it then installs the control on the local computer. The process of loading referenced controls is well known in the art, and the invention is not limited by any process of loading a referenced control.</p>
<p id="p-0094" num="0093">Once the tree structure control <b>304</b> and the store management control <b>306</b> are stored on local computer storage media, the enhanced Web browser <b>112</b> installs the two controls within its own address space. By installing the two controls within its own address space, the enhanced Web browser <b>112</b> is able to respond to an additional set of events. Known Web browsers, such as Microsoft Internet Explorer version 3.0 (or later) use controls which respond to events (e.g., user interface command button controls which cause instructions to be executed when a mouse click event is recognized).</p>
<p id="p-0095" num="0094">After installing the tree structure control <b>304</b> and the store management control <b>306</b>, the enhanced Web browser <b>112</b> executes control setup instructions embedded in the HTTP data of the initial Web page. The control setup instructions set properties of the two controls and also register event-handling routines to respond to certain predefined events recognizable by the tree structure control <b>304</b> and the store management control. Event-handling routines, or event handlers, are collections of executable computer instructions designed to be executed in response to an event (i.e., a particular condition or state of a computer system). Instructions of an event handler are executed when an associated event occurs.</p>
<p id="p-0096" num="0095">Event-driven computer applications are well-known in the art, as are application program controls which recognize certain predefined events. It will be appreciated by one of ordinary skill in the art, that it is common to set properties of such controls, as well as to register an event handler (i.e., a collection of executable computer instructions designed to respond to an event) with a predefined event.</p>
<p id="p-0097" num="0096">For example, many computer programs having graphical user interfaces utilize a dialogue box control which displays a rectangular window and permits text to be displayed within the rectangular window. Properties of a dialogue box control include width, height, font, font size, forecolor, and backcolor. These properties are set to determine, respectively, the width of the dialogue box window (in units such as pixels), the height of the dialogue box window, the font (or typeface) to use when displaying text characters within the dialogue box window, the size (usually in points) of text characters displayed in the dialogue box window, the color of the text characters displayed, and the color of the background area behind text characters.</p>
<p id="p-0098" num="0097">Events recognized by a dialogue box window include a keystroke event and a mouse click event. The keystroke event occurs whenever a key from the keyboard is typed. A mouse click event occurs whenever the mouse pointer is located over the dialogue box and the user presses one of the buttons of the mouse. Event handlers are typically registered for both the keystroke event and the mouse click event.</p>
<p id="p-0099" num="0098">A typical keystroke event handler for a dialogue box control causes a character to be displayed in the dialogue box. A mouse click event handler causes a new field of the dialogue box to become enabled thus allowing the user to enter information in different fields of the dialogue box.</p>
<p id="p-0100" num="0099">1. Store Design and Modification Events</p>
<p id="p-0101" num="0100">Generally, the store management control <b>306</b> recognizes events caused by a user manipulating an element of the right pane <b>309</b>, and the tree structure control <b>304</b> recognizes events caused by a user manipulating an icon (or other element) of the left pane <b>308</b>. The store management control <b>306</b> includes executable routines, each associated with an event recognized by the store management control <b>306</b>. Because each such routine is part of the store management control <b>306</b> and each responds to an event recognized by that control, each such routine is an internal event handler. The store management control <b>306</b> also includes additional routines comprising external event handlers, each designed to respond to an event recognized by the tree structure control <b>304</b>. In a preferred embodiment, the tree structure control <b>304</b> includes at least one internal event handler.</p>
<p id="p-0102" num="0101">In an alternative embodiment, external event handlers are embedded in HTML-coded data of a Web page and are associated with events recognized by the store management control <b>306</b> and the tree structure control <b>304</b>, and the controls themselves include no event handlers, internal or external. Thus, control setup instructions embedded in a Web page extract routines from a Web page and register them as event handlers whose instructions are executed upon the occurrence of respective events recognized by the store management control <b>306</b> and the tree structure control <b>304</b>. One of ordinary skill in the art will understand that the practice of the present invention is not appreciably affected by the manner in which event handlers are delivered to the enhanced Web browser <b>112</b> or by using event handlers which are not included in controls.</p>
<p id="p-0103" num="0102">In a preferred embodiment, the tree structure control <b>304</b> recognizes an initialize event, an expand event, a contract event, a drag event, and a drop event. Tree structure controls recognizing such events are known in the art. See Microsoft Visual Basic Professional Features 453, Microsoft Corporation, 1995. Table 4 lists and describes each event recognized by the tree structure control <b>304</b>. The store management control <b>306</b> recognizes an initialize event, a double-click event, a drag event, and a drop event. Table 5 lists and describes each event recognized by the store management control <b>306</b>.</p>
<p id="p-0104" num="0103">
<tables id="TABLE-US-00005" num="00005">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="42pt" align="left"/>
<colspec colname="2" colwidth="175pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="2" rowsep="1">TABLE 4</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
<row>
<entry>Tree</entry>
<entry/>
</row>
<row>
<entry>Structure</entry>
</row>
<row>
<entry>Control</entry>
</row>
<row>
<entry>Event</entry>
<entry>Description</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>Initialize</entry>
<entry>Event recognized just prior to the initial display of the left</entry>
</row>
<row>
<entry/>
<entry>pane of store design user interface.</entry>
</row>
<row>
<entry>Expand</entry>
<entry>Event recognized when user enters a request (e.g., by</entry>
</row>
<row>
<entry/>
<entry>clicking on an expand icon) to examine groups or products</entry>
</row>
<row>
<entry/>
<entry>subordinate to a group.</entry>
</row>
<row>
<entry>Contract</entry>
<entry>Event recognized when user requests (e.g., by clicking a</entry>
</row>
<row>
<entry/>
<entry>contract icon) that groups and products subordinate to a</entry>
</row>
<row>
<entry/>
<entry>group be hidden from display.</entry>
</row>
<row>
<entry>Drag</entry>
<entry>Event recognized when user uses a mouse to point to an</entry>
</row>
<row>
<entry/>
<entry>element of the left pane of the store design user interface,</entry>
</row>
<row>
<entry/>
<entry>holds down a mouse button, and moves the mouse to</entry>
</row>
<row>
<entry/>
<entry>thereby move the element.</entry>
</row>
<row>
<entry>Drop</entry>
<entry>Event recognized when user has initiated a drag event and</entry>
</row>
<row>
<entry/>
<entry>releases the depressed mouse button to drop an element at</entry>
</row>
<row>
<entry/>
<entry>a new location in the left pane of the store design user</entry>
</row>
<row>
<entry/>
<entry>interface.</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0105" num="0104">
<tables id="TABLE-US-00006" num="00006">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="42pt" align="left"/>
<colspec colname="2" colwidth="175pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="2" rowsep="1">TABLE 5</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
<row>
<entry>Store</entry>
<entry/>
</row>
<row>
<entry>Management</entry>
</row>
<row>
<entry>Control</entry>
</row>
<row>
<entry>Event</entry>
<entry>Description</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>Initialize</entry>
<entry>Event recognized just prior to the initial display of the</entry>
</row>
<row>
<entry/>
<entry>right pane of store design user interface.</entry>
</row>
<row>
<entry>Double Click</entry>
<entry>Event recognized when user positions mouse pointer over</entry>
</row>
<row>
<entry/>
<entry>an element of the right pane of the store design user</entry>
</row>
<row>
<entry/>
<entry>interface and clicks a mouse button twice in rapid</entry>
</row>
<row>
<entry/>
<entry>succession.</entry>
</row>
<row>
<entry>Drag</entry>
<entry>Event recognized when user uses a mouse to point to an</entry>
</row>
<row>
<entry/>
<entry>element of the right pane of the store design user interface,</entry>
</row>
<row>
<entry/>
<entry>holds down a mouse button, and moves the mouse to</entry>
</row>
<row>
<entry/>
<entry>thereby move the element.</entry>
</row>
<row>
<entry>Drop</entry>
<entry>Event recognized when user has initiated a drag event and</entry>
</row>
<row>
<entry/>
<entry>releases the depressed mouse button to drop an element at</entry>
</row>
<row>
<entry/>
<entry>a new location in the right pane of the store design user</entry>
</row>
<row>
<entry/>
<entry>interface.</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0106" num="0105"><figref idref="DRAWINGS">FIG. 4</figref> illustrates components of the store design user interface <b>310</b>, including a left pane <b>308</b> and right pane <b>309</b>. A user causes recognizable events to occur by selecting and manipulating elements (e.g., icons and text strings) of the left pane <b>308</b> and the right pane <b>309</b>. Initialize events, however, typically occur when instructions of a control (such as the tree structure control <b>304</b> or the store management control <b>306</b>) are loaded for execution.</p>
<p id="p-0107" num="0106">The initialize event recognized by the tree structure control <b>304</b> occurs as the first step in displaying the left pane <b>308</b> of the store design user interface <b>310</b>. The initialize event recognized by the store management control <b>306</b> occurs as the first step of displaying the right pane <b>309</b> of the store design user interface <b>310</b>. In a preferred embodiment of the present invention, an internal event handler of the store management control <b>306</b> executes when the initialize event of the store management control <b>306</b> is recognized.</p>
<p id="p-0108" num="0107">The expand event recognized by the tree structure control <b>304</b> occurs when a user positions a mouse pointer over an expand icon <b>402</b> and presses the left mouse button. Expand icons, typically represented by a plus sign located inside of a small square box, are known in the art and, when selected, permit a user to examine subordinate elements of some hierarchical structure by causing icons representing the subordinate elements to be displayed on a graphical user interface. In the preferred embodiment of the present invention, an external expand event handler of the store management control <b>306</b> is registered to execute when an expand event occurs.</p>
<p id="p-0109" num="0108">The contract event recognized by the tree structure control <b>304</b> occurs when a user positions a mouse pointer over a contract icon <b>404</b> and presses the left mouse button. Contract icons are known in the art and are usually represented by a minus sign located within a small square box. Selection of a contract icon typically causes subordinate elements of a hierarchical structure to be hidden from view in a user interface. An internal contract event handler is included in the tree structure control <b>304</b>, and the contract event handler executes when a contract event occurs. Such contract event handlers are known in the art.</p>
<p id="p-0110" num="0109">The drag event recognized by the tree structure control <b>304</b> occurs when a user positions a mouse pointer over a group icon, such as the sports car group icon <b>406</b> illustrated in <figref idref="DRAWINGS">FIG. 4</figref>, depresses a mouse button and then moves the mouse pointer to reposition the group icon. Likewise, the drag event recognized by the store management control <b>306</b> occurs when a user positions the mouse pointer over a group icon, such as the more sedans group icon <b>410</b>, depresses a mouse button and then moves the mouse pointer to move the group icon to a different location. The drag event recognized by the store management control also occurs when a user positions the mouse pointer over text corresponding to a product, such as the product ID <b>412</b> associated with the Toyota Camry product as illustrated in <figref idref="DRAWINGS">FIG. 4</figref>, depresses a mouse button and then moves the mouse pointer to reposition the text.</p>
<p id="p-0111" num="0110">The drop event recognized by the tree structure control <b>304</b> occurs when a drag event has been initiated and the user releases a mouse button to reposition a dragged element over a valid drop target within the left pane <b>308</b>. Valid drop targets are usually group icons such as the sedans group icon <b>408</b>. Similarly, the drop event recognized by the store management control <b>306</b> occurs when a drag event has been initiated and the user releases the mouse button to relocate the dragged element on top of a valid drop target of the right pane <b>309</b>. Valid drop targets of the right pane <b>309</b> are generally limited to group icons, such as the more sedans group icon <b>410</b>. In a preferred embodiment, a drag event can be initiated in either the left pane <b>308</b> or the right pane <b>309</b> and a drop event can occur in either the left pane <b>308</b> or the right pane <b>309</b>. Thus, an element may be dragged from the left pane <b>308</b> and dropped in the right pane <b>309</b> or vice-versa.</p>
<p id="p-0112" num="0111">The double click event recognized by the store management control <b>306</b> occurs when a user positions the mouse pointer over an element of the right pane <b>309</b> and presses the mouse button twice in quick succession.</p>
<p id="p-0113" num="0112">It will be appreciated by those of ordinary skill in the art that the expand and contract, drag and drop, and double click events recognized by the tree structure control <b>304</b> and the store management control <b>306</b> may occur as a result of a series of key strokes typed on a keyboard rather than by use of a mouse pointer. For example, an element of either the left pane <b>308</b> or the right pane <b>309</b> may be selected by pressing the tab key repeatedly until a desired item is highlighted (usually by rendering it in a different color) indicating that it is selected. A double click event may occur by pressing the enter key when an element has been selected using the tab key. Also, drag and drop events may occur by using the tab key to select an element using keyboard keystrokes to activate a pulldown menu, to select a cut option, and to select a paste option. It will be understood that the present invention is not limited by a user interface method such as a mouse, keyboard, or voice control input.</p>
<p id="p-0114" num="0113">2. Event Handlers</p>
<p id="p-0115" num="0114">Many of the events recognized by the store management control <b>306</b> and the tree structure control <b>304</b> occur as a result of a user's request to examine or modify the relationships between products and groups of an electronic store (e.g., a store designer wants to know which groups or products are currently contained within a ‘Sedans’ group). In a preferred embodiment of the present invention, a product information database <b>116</b> stores relationships between products and groups of an electronic store. To satisfy a user's request to examine or modify relationships between products or groups, event handlers associated with the corresponding events may conduct transactions with the product information database <b>116</b> either to retrieve information about subordinate groups or products or to modify relationship information.</p>
<p id="p-0116" num="0115">In a preferred embodiment, event handlers of the store management control <b>306</b> (both internal and external) conduct transactions with the product information database <b>116</b> by submitting queries <b>312</b> (<figref idref="DRAWINGS">FIG. 3</figref>) and receiving query results. The enhanced Web browser <b>112</b> and the Web server <b>106</b> communicate the queries and query results to and from the store management control <b>306</b> and the product information database <b>116</b>.</p>
<p id="p-0117" num="0116">a. Generating the Initial User Interface Display</p>
<p id="p-0118" num="0117"><figref idref="DRAWINGS">FIGS. 5A and 5B</figref> illustrate steps performed to generate an initial left pane display <b>308</b> and an initial right pane display <b>309</b> of the electronic store design application. In a first step <b>502</b>, the initialize event of the store management control <b>306</b> is recognized. In a next step <b>504</b>, an internal event handler of the store management control <b>306</b> called, for example, Initial_Event_Handler, begins running after the initialize event is recognized. Then, in a step <b>506</b>, the Initial_Event_Handler formulates a query <b>312</b> designed to retrieve data representing all groups and products contained in (i.e., subordinate to) the root level group My Store <b>320</b>.</p>
<p id="p-0119" num="0118">The Initial_Event_Handler generates a query in the form of a name/value pair. A name/value pair is generated by combining three data elements: (1) the name of a data value, (2) an ‘=’ character, and (3) data representing a value. Some examples of name value pairs are “population=15,300,25O,” “temperature=28C.,” “ForeColorBlue” and “Baseball_Team=Yankees.” One of ordinary skill in the art will appreciate that it is common to communicate data values over the Internet in the form of name/value pairs. The following is one example of a name/value pair representing a query generated by the Initial_Event_Handler:
<ul id="ul0001" list-style="none">
    <li id="ul0001-0001" num="0000">
    <ul id="ul0002" list-style="none">
        <li id="ul0002-0001" num="0119">Query=Select Group_ID, Parent From Relationships,</li>
        <li id="ul0002-0002" num="0120">Groups Where ID_Type=‘G’ And ID=1000 And</li>
        <li id="ul0002-0003" num="0121">Relationship=‘Contains’ And Related_ID_Type=‘G’ And</li>
        <li id="ul0002-0004" num="0122">Related_ID=Group_ID </li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0120" num="0123">In the above example, the name of the data value is “Query”, followed by an “=”, and the remainder constitutes data representing a value. One of ordinary skill will understand that the above query can be generated by a simple reference to a character string constant, or by concatenating one or more character string constants and one or more character string variables. The query associates a value of “G” with the parameter “ID_Type”, the value “1000” with the parameter “ID”, and the value “Contains” with the parameter “Relationship”. If the root level group My Store <b>320</b> is represented in the group table <b>206</b> by a data record of type “G” (group) having a unique ID) value of “1000”, it will thus be appreciated that the above query may be used to retrieve data from all data records related to the root level group My Store <b>320</b> by a “Contains” (i.e., contained within) relationship.</p>
<p id="p-0121" num="0124">b. Communicating a Query from Web Browser to Database</p>
<p id="p-0122" num="0125">After generating a query in name/value pair format, at least one executing thread of the Initial_Event_Handler issues a post request <b>314</b> (i.e., a request to post an Internet message) in a further step <b>508</b> by synchronously calling a Send_Message routine of the enhanced Web browser <b>112</b>. It is well known in the art that Web browsers include routines similar to the present Send_Message routine, which accept as parameters data in name/value pair format as well as data representing a message type (e.g., a Post message), embed the parameter data in a message, and transmit the message to the Internet in a form compliant with the message type. A post message is one of a number of message types included in the Hypertext Transport Protocol (HTTP) used by Web servers and Web browsers.</p>
<p id="p-0123" num="0126">In the step <b>508</b>, the Initial_Event_Handler passes the query in name/value pair format to the Send_Message routine and also passes a parameter indicating that the type of message to send is ‘Post.’ Post messages in accordance with the HTTP protocol are well known in the art and will not be further discussed. Because the Send_Message routine of the enhanced Web browser <b>112</b> is called synchronously, no further instructions of the calling thread of the Initial_Event_Handler execute until the Send_Message routine returns a result. Synchronous procedure calls (or function calls) are well understood in the art.</p>
<p id="p-0124" num="0127">The Send_Message routine of the enhanced Web browser <b>112</b> then embeds the query within an HTTP Post message and transmits the HTTP data <b>302</b> via the World Wide Web <b>104</b> to the Web server <b>106</b>. A Parse_HTTP routine <b>350</b> (<figref idref="DRAWINGS">FIG. 3</figref>) of the Web server <b>106</b> scans the URL of the HTTP Post message and recognizes that an ISAPI query application <b>354</b> is identified by the URL.</p>
<p id="p-0125" num="0128">The Parse_HTTP routine <b>350</b> launches (i.e., causes a computer to begin executing the instructions of) the ISAPI query application <b>354</b> if it is not already running. Also, the Parse_HTTP routine <b>350</b> extracts the query from the HTTP Post message in name/value pair format and passes the extracted query to the ISAPI query application <b>354</b>. One of ordinary skill in the art will understand that Web servers possess parsing routines to extract data parameters from HTTP Post messages in name/value pair format and that applications, such as the ISAPI query application, may be identified by a portion of a URL.</p>
<p id="p-0126" num="0129">The ISAPI query application <b>354</b> identified in the URL is associated with a single electronic store. Thus, the ISAPI query application <b>354</b> conducts transactions with a single, product information database <b>116</b> associated with the electronic store. It will be appreciated that an ISAPI query application, dedicated to perform database operations on product data of a single electronic store, includes a constant (i.e., a predetermined value included in a computer program that does not change when the program is executing) representing the name and location of a product information database.</p>
<p id="p-0127" num="0130">In another embodiment of the present invention, the ISAPI query application is associated with multiple electronic stores and thus conducts transactions with multiple product information databases. In the case where a single ISAPI query application <b>354</b> is associated with multiple stores, a user of the enhanced Web browser <b>112</b> selects an electronic store from a list of electronic stores. In this embodiment the user of the enhanced Web browser <b>112</b> is first presented with a display generated from an initial HTML page that lists the available electronic stores. When the user clicks on the name of one of the electronic stores, the Web browser <b>112</b> sends a request to the Web server for the store management HTML page for that particular store. The name of the electronic store is sent along with the request as part of the URL. For example, when the store name “BiltRite Hardware” appears in the list of electronic stores, then, if the user clicks on that name, a URL having a store identifier parameter is generated. One example of such a URL is:
<ul id="ul0003" list-style="none">
    <li id="ul0003-0001" num="0000">
    <ul id="ul0004" list-style="none">
        <li id="ul0004-0001" num="0131">http::/www.server.com/StoreManager.dll?Store=“BiltRite Hardware”</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0128" num="0132">Thus, the URL contains information identifying the ISAPI application to call (StoreManager.dll), as well as the parameter Name/Value pair to pass to the ISAPI application (Store=“BiltRite Hardware”). The ISAPI query application <b>354</b> (e.g., StoreManager.dll) uses the parameter to determine which electronic store to administer.</p>
<p id="p-0129" num="0133">The Parse_HTTP routine <b>350</b> passes the store identifier parameter to the ISAPI query application <b>354</b>. The ISAPI query application <b>354</b> uses the store identifier parameter to determine which product information database <b>116</b> to access.</p>
<p id="p-0130" num="0134">One of ordinary skill in the art will appreciate that a two-dimensional array associates store name values with database identifiers (e.g., DB_Array[<b>1</b>,<b>1</b>] “BiltRite Hardware,” DB_Array[<b>1</b>,<b>2</b>]=“BR_Hdwr.db,” DB_Array[<b>2</b>,<b>1</b>]=“Underdog Used CD's,” and DB_Array[<b>2</b>,<b>2</b>]=“Under_Dog.db”), and will further appreciate that the ISAPI query application <b>354</b> performs a look up (e.g., sequential name comparison) operation to obtain a database identifier associated with the store identifier value “BiltRite Hardware.” It will also be appreciated that a simple database table associating database identifiers with store identifier values could be used in place of a two-dimensional array to identify a database when given a store identifier value. Furthermore, an operating system registry, such as, for example, the Windows NT registry could also be used to associate database names with store identifiers. The present invention is not limited by any method for associating a store name with a database.</p>
<p id="p-0131" num="0135">When the appropriate database is identified, a Translate_Query routine <b>356</b> of the ISAPI query application <b>354</b> translates the query parameter from name/value pair format into a format suitable for submission to the relational database server <b>114</b>. Those skilled in the art will appreciate that different relational database products require differing query commands. Thus, the translation required may be sophisticated or may be simple depending on the relational database server used. The present invention is not limited by a relational database product or a particular query language.</p>
<p id="p-0132" num="0136">In a preferred embodiment, the ISAPI query application <b>354</b> establishes an ODBC link to a computer hosting the product information database and communicates an SQL-compliant query <b>323</b> to a relational database server <b>114</b> running on the computer. Those of ordinary skill in the art will appreciate that an ODBC link identifies a specific computer operating in a LAN (Local Area Network) to receive a transmitted SQL command. Thus, a relational database server <b>114</b> running on the computer identified by the ODBC link receives the SQL command, queries the product information database <b>116</b>, and generates a result set <b>324</b>.</p>
<p id="p-0133" num="0137">To extract all groups and all products contained in the root level group Mystore <b>320</b>, the SQL query <b>323</b> causes the group table <b>206</b> and the relationship table <b>202</b> to be joined. Once the group table <b>206</b> and the relationships table <b>202</b> are joined, data is extracted from data records representing groups contained in (i.e., having a ‘contains’ relationship with) the group Mystore <b>320</b>. The following are example portions of both the group table <b>206</b> and the relationship table <b>202</b> of the product information database <b>116</b> from which data is extracted by the initial query generated by the Initial_Event_Handler:</p>
<p id="p-0134" num="0138">
<tables id="TABLE-US-00007" num="00007">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" rowsep="1">TABLE 6</entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>Group Table</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="1" colwidth="77pt" align="center"/>
<colspec colname="2" colwidth="70pt" align="left"/>
<colspec colname="3" colwidth="70pt" align="center"/>
<tbody valign="top">
<row>
<entry>Group-ID</entry>
<entry>Group-Name</entry>
<entry>Parent</entry>
</row>
<row>
<entry namest="1" nameend="3" align="center" rowsep="1"/>
</row>
<row>
<entry>2000</entry>
<entry>DEPARTMENTS</entry>
<entry>Y</entry>
</row>
<row>
<entry>3000</entry>
<entry>STAGING AREA</entry>
<entry>Y</entry>
</row>
<row>
<entry>4000</entry>
<entry>ALL PRODUCTS</entry>
<entry>Y</entry>
</row>
<row>
<entry>5000</entry>
<entry>ALL GROUPS</entry>
<entry>Y</entry>
</row>
<row>
<entry>6000</entry>
<entry>SEARCH RESULTS</entry>
<entry>N</entry>
</row>
<row>
<entry>7000</entry>
<entry>SALE PRODUCTS</entry>
<entry>N</entry>
</row>
<row>
<entry namest="1" nameend="3" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0135" num="0139">
<tables id="TABLE-US-00008" num="00008">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" rowsep="1">TABLE 7</entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>Relationship Table</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="1" colwidth="77pt" align="center"/>
<colspec colname="2" colwidth="42pt" align="center"/>
<colspec colname="3" colwidth="98pt" align="center"/>
<tbody valign="top">
<row>
<entry>ID</entry>
<entry>Relationship</entry>
<entry>Related-ID</entry>
</row>
<row>
<entry namest="1" nameend="3" align="center" rowsep="1"/>
</row>
<row>
<entry>1000</entry>
<entry>C</entry>
<entry>2000</entry>
</row>
<row>
<entry>1000</entry>
<entry>C</entry>
<entry>3000</entry>
</row>
<row>
<entry>1000</entry>
<entry>C</entry>
<entry>4000</entry>
</row>
<row>
<entry>1000</entry>
<entry>C</entry>
<entry>5000</entry>
</row>
<row>
<entry>1000</entry>
<entry>C</entry>
<entry>6000</entry>
</row>
<row>
<entry>1000</entry>
<entry>C</entry>
<entry>7000</entry>
</row>
<row>
<entry namest="1" nameend="3" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0136" num="0140">The result set <b>325</b> generally comprises data from one or more rows of the group table <b>206</b> or the products table <b>204</b> which satisfy a query. Each row of a result set <b>324</b> typically includes three columns: (1) a name value, (2) an ID value, and (3) a parent status value. After the relational database server <b>114</b> generates the result set <b>325</b>, it passes the result set to the ISAPI query application <b>354</b>. A Format_Result_Set routine <b>358</b> of the ISAPI query application <b>354</b> translates the result set <b>325</b> into name/value pair format as described above. The following is an example of a result set in name/value pair format:
<ul id="ul0005" list-style="none">
    <li id="ul0005-0001" num="0000">
    <ul id="ul0006" list-style="none">
        <li id="ul0006-0001" num="0141">Group_Name=DEPARTMENTS, Group_ID=2000, Parent=Y,</li>
        <li id="ul0006-0002" num="0142">Group_Name=STAGING AREA, Group_ID=3000, Parent=Y,</li>
        <li id="ul0006-0003" num="0143">Group_Name=ALL PRODUCTS, Group_ID=4000, Parent=Y,</li>
        <li id="ul0006-0004" num="0144">Group_Name=ALL GROUPS, Group_ID=5000, ParentY,</li>
        <li id="ul0006-0005" num="0145">Group_Name=SEARCH RESULTS, Group_ID=6000, Parent=N,</li>
        <li id="ul0006-0006" num="0146">Group_Name=SALE PRODUCTS, Group_ID=7000, Parent=N,</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0137" num="0147">One of ordinary skill understands that the data values included in the above result set may be extracted from the database tables shown in Table 6 and Table 7 by a query requesting all group data records having a relationship of ‘C’ (i.e., ‘contained in’) with the group data record having an ID value of 1000. In the example result set above, each Group_Name value (e.g., DEPARTMENTS) comprises descriptive text which may later be formatted and displayed as a label associated with group icons <b>330</b>, <b>332</b>, <b>334</b>, <b>336</b>, <b>338</b>, <b>340</b> displayed on the store design user interface <b>310</b>. Each Group_ID value (e.g., 2000) uniquely identifies a group data record in the group table <b>206</b> of the product information database <b>116</b>. The Parent parameter of each group in the result set indicates the existence of any groups or products subordinate to (contained in) the respective group (e.g., whether a group is a parent and thus has subordinate or child groups or products). Thus, a group having a Parent parameter of ‘Y’ contains at least one subordinate group or product, and a group having a Parent parameter of ‘N’ contains no subordinate groups or products.</p>
<p id="p-0138" num="0148">If there is some error condition created by the query, then the result set data includes an error code representing the specific error, rather than a collection of rows from the products table <b>204</b> or the groups table <b>206</b>. It will be appreciated that numerous error conditions could prevent the success of a database query ranging from a syntax error in the query to a disk volume being off-line and that a unique code is associated with each such error condition. The following are examples of an error condition in name/value pair format: Error=32 or ErrorDisk Volume Not Ready. When an error condition prevents completion of a query, a result set comprises a representation of the error condition in name/value pair format.</p>
<p id="p-0139" num="0149">c. Communicating Query Result from Database to Web Browser</p>
<p id="p-0140" num="0150">The ISAPI query application <b>354</b> passes the result set data in name/value pair format to a Generate_HTTP_Response routine <b>352</b> of the Web server <b>106</b>. The Generate_HTTP_Response routine <b>352</b> generates a response message by combining the result set data in name/value pair format with other data which identifies the enhanced Web browser <b>112</b> as the target of an Internet message and which ensures compliance with the HTTP protocol. The Web server <b>106</b> transmits the response message to the World Wide Web <b>104</b>.</p>
<p id="p-0141" num="0151">The enhanced Web browser <b>112</b> receives the response message, extracts the result set data, and returns the result set data in name/value pair format to the Initial_Event_Handler which, in a step <b>510</b>, receives the result set data as a return value of the Send_Message routine. The Send_Message routine then terminates. A thread of the Initial_Event_Handler expects to receive the result set data as a response to post <b>316</b> (e.g., a response to its earlier post request <b>314</b>).</p>
<p id="p-0142" num="0152">If, in a next step <b>512</b>, the Initial_Event_Handler determines that the result set is not empty (i.e., at least one group data record is subordinate to the root level group), then, in a further step <b>514</b>, the Initial_Event_Handler calls an Add_Branch routine of the tree structure control <b>304</b>.</p>
<p id="p-0143" num="0153">Routines of the tree structure control <b>304</b> create, maintain, and manage a tree type data structure called, for example, a Group Tree Structure, comprising hierarchically related nodes (i.e., collections of data). In one embodiment of the present invention, the tree structure control <b>304</b> is used to create, maintain, and manage a Group Tree Structure comprising nodes which represent a root level group, groups immediately below or subordinate to the root level group, groups below those groups, and additional groups at further subordinate levels as needed to represent the product grouping structure of an electronic store. Tree type data structures maintained by tree structure controls are known in the art and will not be described in detail herein.</p>
<p id="p-0144" num="0154">The Add_Branch routine of the tree structure control <b>304</b> adds a new node to the Group Tree Structure. In the step <b>514</b>, the Initial_Event_Handler passes four parameters to the Add_Branch routine: (1) the ID value of the root level group, (2) a Group_Name value, (3) a Group_ID value, and (4) a Parent value (e.g., 1000, ‘DEPARTMENTS’, 2000, and ‘Y’). The ID value of the root level group identifies a node that already exists in the Group Tree Structure, and the Add_Branch routine adds a new node subordinate to the identified existing node.</p>
<p id="p-0145" num="0155">The Add_Branch routine allocates memory for the new node and creates pointers from an existing node (which in the step <b>514</b> represents the root level group) to the new node and from the new node to the existing root level node. One of ordinary skill in the art understands how to create and add nodes to tree data structures. After being added to the Group Tree Structure, a node includes, at least, a Group_Name property (e.g., ‘DEPARTMENTS’), a Group_ID property (e.g., 2000), and a Parent property (e.g., ‘Y’).</p>
<p id="p-0146" num="0156">In a next step <b>516</b>, the Initial_Event_Handler determines if all group data items of the result set have been added as new nodes to the Group Tree Structure. If not, then the step <b>514</b> is repeated to add another node representing a group which has not yet been added to the Group Tree Structure. If all group data items have been added as new nodes of the Group Tree Structure or if the result set was determined to be empty in the step <b>512</b>, then, in a step <b>518</b>, the Initial_Event_Handler generates a query to extract product data from the product information database <b>116</b>.</p>
<p id="p-0147" num="0157">The Merchant Workbench permits a store designer to design an electronic store having not only groups associated with the root level group, but also products. Thus, a store may have a root level group called, for example, ‘My Store.’ Two subordinate groups called, for example, ‘Automobiles’ and ‘Computers’ may be contained in the ‘My Store’ group. Such a structure may suit the needs of an organization engaged in the sale of both automobiles and computers. The store designer may then cause the groups ‘Sedans,’ ‘Sports Cars,’ and ‘Sport Utility Vehicles’ to be contained in the ‘Automobiles’ group, and the groups ‘IBM’ and ‘Macintosh’ to be contained in the ‘Computers’ group. If consumers visit such a store via the Internet, they would encounter an initial Web page containing links to an ‘Automobiles” page and a ‘Computers’ page, and could easily navigate the hierarchical structure of the store to find products of interest.</p>
<p id="p-0148" num="0158">However, if such a store also had very popular t-shirts in its inventory but did not generally sell clothing, the store designer may want to advertise the t-shirts on the initial page of the electronic store. Accordingly, the Merchant Workbench permits a store designer to associate not only groups, but also products with the initial Web page. To do this, a store designer may specify that one or more products are contained in the root level group.</p>
<p id="p-0149" num="0159">It will thus be appreciated that, to provide an initial user interface screen which accurately shows a store structure to a store designer, both group data and product data must be examined to visually present to a store designer the groups and products contained in the root level group. Accordingly, the Initial_Event_Handler generates two queries.</p>
<p id="p-0150" num="0160">While the query generated in the earlier step <b>506</b> is designed to extract group data, the query generated in the step <b>518</b> is designed to extract product data representing each product contained in the root level group. In the step <b>518</b>, as in the step <b>506</b>, the Initial_Event_Handler formats the query in name/value pair format. The following is one example of a name/value pair representing a query generated by the Initial_Event_Handler to extract product data related to the root level group:
<ul id="ul0007" list-style="none">
    <li id="ul0007-0001" num="0000">
    <ul id="ul0008" list-style="none">
        <li id="ul0008-0001" num="0161">Query=Select product_Name, Product_ID From Relationships, Groups</li>
        <li id="ul0008-0002" num="0162">Where ID_Type=‘G’ And ID=1000 And Relationship=‘Contains’ And</li>
        <li id="ul0008-0003" num="0163">Related_Type=‘P’ And Related_ID=Product_ID</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0151" num="0164">The query to extract product data is communicated to the product information database in the same manner as the query to extract group data. Thus, in a next step <b>520</b>, the Initial_Event_Handler makes a post request <b>314</b> by calling the Send_Message routine and passing to it, as a parameter, the generated query in name/value pair format, as well as a parameter indicating that the message type is ‘Post.’ The Send_Message routine then formats the message in HTTP format, including a URL in the message which identifies both the Web server <b>106</b> and an ISAPI query application <b>354</b>. Next, the Send_Message routine transmits the message via the World Wide Web <b>104</b> to the Web server <b>106</b>. The Parse_HTTP routine <b>350</b> of the Web server <b>106</b> recognizes the reference to the ISAPI query application <b>354</b> embedded in the message, launches the ISAPI query application <b>354</b>, and passes to the ISAPI query application <b>354</b> the query in name/value pair format.</p>
<p id="p-0152" num="0165">The Translate_Query routine <b>356</b> of the ISAPI query application <b>354</b> translates the query from name/value pair format into a format useful to the relational database server <b>114</b>. The Translate_Query routine <b>356</b> transmits the translated query to the relational database server <b>114</b>. The relational database server <b>114</b> receives the query and queries the product information database <b>116</b>. One of ordinary skill in the art will appreciate that the query generated by the Initial_Event_Handler in the step <b>518</b> causes the products table <b>204</b> and the relationship table <b>202</b> to be joined.</p>
<p id="p-0153" num="0166">The following are example portions of the product table <b>204</b> and the relationship table <b>202</b> from which data is extracted.</p>
<p id="p-0154" num="0167">
<tables id="TABLE-US-00009" num="00009">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" rowsep="1">TABLE 8</entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>Product Table</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="112pt" align="center"/>
<colspec colname="2" colwidth="105pt" align="left"/>
<tbody valign="top">
<row>
<entry>Product_ID</entry>
<entry>Product_Name</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
<row>
<entry>0543</entry>
<entry>Pit Crew T-Shirt</entry>
</row>
<row>
<entry>0544</entry>
<entry>Propeller Head T-Shirt</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0155" num="0168">
<tables id="TABLE-US-00010" num="00010">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" rowsep="1">TABLE 9</entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>Relationship Table</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="1" colwidth="77pt" align="center"/>
<colspec colname="2" colwidth="42pt" align="center"/>
<colspec colname="3" colwidth="98pt" align="center"/>
<tbody valign="top">
<row>
<entry>ID</entry>
<entry>Relationship</entry>
<entry>Related_ID</entry>
</row>
<row>
<entry namest="1" nameend="3" align="center" rowsep="1"/>
</row>
<row>
<entry>1000</entry>
<entry>C</entry>
<entry>0543</entry>
</row>
<row>
<entry>1000</entry>
<entry>C</entry>
<entry>0544</entry>
</row>
<row>
<entry namest="1" nameend="3" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0156" num="0169">The relational database server <b>114</b> generates a result set from the query, and the Format_Result_Set routine <b>358</b> translates the result set into name/value pair format. The following is an example of a result set <b>325</b> generated by the relational database server <b>114</b> and translated into name/value pair format by the Format_Result_Set routine <b>358</b>:
<ul id="ul0009" list-style="none">
    <li id="ul0009-0001" num="0000">
    <ul id="ul0010" list-style="none">
        <li id="ul0010-0001" num="0170">Product_Name=Pit Crew T-Shirt, Product_ID=0543,</li>
        <li id="ul0010-0002" num="0171">Product_Name=Propeller Head T-Shirt, Product_ID=0544,</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0157" num="0172">The result set generated by the query is communicated to the enhanced Web browser <b>112</b>. Thus, the ISAPI query application <b>354</b> passes the result set to the Generate_HTTP_Response routine <b>352</b>. The Generate_HTTP_Response routine <b>352</b> generates a response message by combining the result set data in name/value pair format with additional data which ensures compliance with the HTTP protocol and identifies the enhanced Web browser <b>112</b> as a destination. The Web server <b>106</b> transmits the response message to the enhanced Web browser <b>122</b> via the World Wide Web <b>104</b>.</p>
<p id="p-0158" num="0173">The enhanced Web browser <b>112</b> receives the response message and passes the result set data in name/value pair format to the Initial_Event_Handler as a result of the Send_Message routine. The Send_Message routine terminates and, in a further step <b>522</b>, the Initial_Event_Handler receives the result set data. A thread of the Initial_Event_Handler receives the result set data as a response to its post message <b>316</b> transmitted to the Web server <b>106</b> in the step <b>520</b>.</p>
<p id="p-0159" num="0174">If, in a next step <b>524</b>, the Initial_Event_Handler determines that the result set is not empty (e.g., at least one product is subordinate to the root level group), then, in a step <b>526</b>, the Initial_Event_Handler calls an Add_Product routine of the store management control <b>306</b>. The Add_Product routine adds a product data item from the product data <b>342</b> of the result set to a binary tree structure.</p>
<p id="p-0160" num="0175">Routines of the store management control <b>306</b> create, manage, and maintain a binary tree type data structure called, for example, a Product Tree Structure. The Product Tree Structure comprises nodes (e.g., collections of data) each of which includes left and right node pointers to other nodes. Each node also includes data about a group (i.e., a Group_Name value and a Group_ID value), and a pointer to a product data structure. Each product data structure includes information (i.e., a Product_Name value and a Product_ID value) about a product advertised or offered for sale by an electronic store. Each product data structure also includes a pointer which may point to another product data structure.</p>
<p id="p-0161" num="0176"><figref idref="DRAWINGS">FIG. 6</figref> illustrates a portion of an example Product Tree Structure. A node <b>602</b> includes information about a group having a Group_Name value of ‘Sedans’ and a Group_ID value of 60011. The node <b>602</b> also has a left node pointer <b>604</b> to a node <b>606</b> and a right node pointer <b>608</b> to a node <b>610</b>. The node <b>602</b> also has a pointer <b>612</b> to a product data structure <b>614</b>. The product data structure <b>614</b> has a Product_Name value of ‘Honda Accord’ and a Product_ID value of 0121, as well as a pointer <b>616</b> to a product data structure <b>618</b>. The product data structure <b>618</b> has a Product_Name value of ‘Toyota Camry’ and a Product_ID value of 0122. The product data structure <b>618</b> also has a pointer <b>620</b> to a product data structure. The pointer <b>620</b> is null.</p>
<p id="p-0162" num="0177">The node <b>606</b> has a Group_Name value of ‘Sports Cars’ and a Group_ID value of 60007. Also, the node <b>606</b> includes a left node pointer <b>622</b> and a right node pointer <b>624</b> which are null. A pointer <b>626</b> of the node <b>606</b> points to a product data structure <b>628</b> which has a Product_Name value of ‘Mazda Miata’ and a Product_ID value of 0091. The product data structure <b>628</b> has a pointer <b>630</b> to a product data structure. The pointer <b>630</b> is null.</p>
<p id="p-0163" num="0178">The node <b>610</b> has a Group_Name value of ‘More Sedans’ and a Group_ID value of 60033. Further, the node <b>610</b> includes a left node pointer <b>632</b> and a right node pointer <b>634</b> which are null. A pointer <b>636</b> of the node <b>610</b> points to a product data structure <b>638</b> which has a Product_Name value of ‘Mercury Sable’ and a Product_ID value of 0154. The product data structure <b>638</b> also includes a pointer <b>640</b> which points to a product data structure <b>642</b>. The product data structure <b>642</b> has a Product_Name value of ‘Olds Aurora’ and a Product_ID of 0155. Also, the product data structure <b>642</b> has a pointer <b>644</b> that is null.</p>
<p id="p-0164" num="0179">Binary tree data structures are well known in the art and one of ordinary skill will appreciate that binary tree search routines may navigate the nodes <b>602</b>, <b>606</b>, and <b>610</b> of the example Product Tree Structure illustrated in <figref idref="DRAWINGS">FIG. 6</figref>. In particular, one of ordinary skill will understand that recursion may be efficiently employed to navigate a binary tree structure such as that exemplified in <figref idref="DRAWINGS">FIG. 6</figref>.</p>
<p id="p-0165" num="0180">A navigation routine employing recursion receives a parameter identifying a node of a binary tree, examines data values of the node, determines whether data values of the node satisfy search criteria, and, if not, issues a call to itself, passing as a parameter a node pointed to by the left node pointer of the current node. On return from that call, the navigation routine makes another call to itself passing as a parameter a node pointed to by the right node pointer of the current node.</p>
<p id="p-0166" num="0181">Such a binary tree navigation routine may be applied to the nodes of the binary tree data structure illustrated in <figref idref="DRAWINGS">FIG. 6</figref>. To search the binary tree for a node whose Group_ID value is 60033, a navigation routine is called and receives as a parameter the node <b>602</b>. In a first iteration of execution, the navigation routine checks the Group_ID value of the node <b>602</b>, determines that value to be 60011, and concludes that 60011 is not equivalent to 60033. The navigation routine then calls itself, passing as a parameter the node <b>606</b> (whose address is accessible from the left node pointer <b>604</b> of the node <b>602</b>). A second iteration of the navigation routine thus checks the Group_ID value of the node <b>606</b>, determines the value to be 60007, and concludes that 60007 is not equivalent to 60033. Before the second iteration of the navigation routine attempts to call itself it checks the left node pointer <b>622</b>, determines the left node pointer <b>622</b> is null (e.g., no nodes exist to the left of the current node) and, thus, does not call itself.</p>
<p id="p-0167" num="0182">Next, the second iteration of the navigation routine attempts to call itself again using as a parameter a node pointed to by the right node pointer of node <b>606</b>. Because the right node pointer of node <b>606</b> is null, the second iteration of the navigation routine again avoids calling itself, and the second iteration of the navigation routine terminates, returning control to the first iteration of the navigation routine.</p>
<p id="p-0168" num="0183">The first iteration of the navigation routine then continues executing and calls itself, passing as a parameter a node <b>610</b> pointed to by the right node pointer <b>608</b>. A third iteration of the navigation routine begins running and checks the Group_ID value of the node <b>610</b>, determines that the value is 60033, and concludes that 60033 is equivalent to the search value 60033. Thus, a recursive navigation routine successfully traverses the nodes of the binary tree illustrated in <figref idref="DRAWINGS">FIG. 6</figref> to locate a node having a particular ID value.</p>
<p id="p-0169" num="0184">One of ordinary skill in the art will understand that searching a binary tree structure for a node having a particular numeric value is improved if the binary tree is constructed such that for any given node, its left node pointer points to a node having a numeric value less than its own, and its right node pointer points to a node having a numeric value greater than its own. The present invention is in no way limited by any method of constructing or searching a binary tree structure. Furthermore, the invention is not limited by a data structure associating product data with particular groups.</p>
<p id="p-0170" num="0185">The Initial_Event_Handler, in the step <b>526</b>, calls the Add_Product routine and passes to it three parameters: (1) the Group_ID value of the root level group, (2) a Product_Name value, and (3) a Product_ID value. The Add_Product routine navigates the Product Tree Structure to search for a node whose Group_ID value matches that of the Group_ID parameter. If no matching node is located, the Add_Product routine creates such a node and links it to the Product Tree Structure. The Add_Product routine then establishes a current node (i.e., the matched node if the search succeeded, the created node if the search failed). The Add_Product routine then determines whether the current node points to any product data structures. If so, the Add_Product routine navigates to the end of the linked list of product data structures (i.e., finds the first product data structure whose pointer is null). Next, the Add_Product routine allocates memory for a new product data structure and sets its Product_Name value equal to the Product_Name parameter and its Product_ID value equal to the Product_ID parameter. Finally, the Add_Product routine links the new product data structure to the end of the linked list of product data structures, or, if the current node does not point to any product data structures, the Add_Product routine links the new product data structure to the current node.</p>
<p id="p-0171" num="0186">In an additional step <b>528</b>, the Initial_Event_Handler determines whether all product data items represented in the product data <b>342</b> have been added to the Product Tree Structure. If not, then the step <b>526</b> is repeated. If so, then, in a next step <b>530</b>, the left pane <b>308</b> of the store design interface <b>310</b> is displayed. A refresh method (i.e., routine) associated with the tree structure control <b>304</b> updates the display of the left pane <b>308</b>.</p>
<p id="p-0172" num="0187">The refreshed left pane <b>308</b> displays icons and text labels associated with groups subordinate to the root level group represented by the My Store icon <b>320</b>. As illustrated in <figref idref="DRAWINGS">FIG. 3</figref>, the groups subordinate to the root level group My Store <b>320</b> are a departments group <b>330</b>, a staging area group <b>332</b>, an all products group <b>334</b>, an all groups group <b>336</b>, a search results group <b>338</b>, and a sale products group <b>340</b>. In addition, the refresh method of the tree structure control <b>304</b> places an expand icon adjacent to group icons representing groups whose Parent parameter is ‘Y’ (i.e., groups which have further subordinate groups or products below them). Such a refresh method for tree structure controls is known in the art. See Microsoft Visual Basic Professional Features 455, Microsoft Corporation, 1995. Expand icons are also known in the art.</p>
<p id="p-0173" num="0188">The departments group <b>330</b> corresponds to a store structure modelled after an actual store having numerous departments, each department offering a collection of related products. Thus, additional subgroups may exist subordinate to the departments group <b>330</b>.</p>
<p id="p-0174" num="0189">In a preferred embodiment, additional special groups are subordinate to a root level group:</p>
<p id="p-0175" num="0190">The staging area group <b>332</b> comprises any number of groups or products whose relationships or properties are being modified by a merchant or store designer.</p>
<p id="p-0176" num="0191">The all products group <b>334</b> comprises an enumeration of all products stored in the products table <b>204</b>. Thus, the all products group <b>334</b> provides a merchant or store designer convenient access to a list of all products, regardless of their relationship to any group or to each other. Likewise, the all groups group <b>336</b> enumerates all groups included in the group table <b>206</b>, and thus provides convenient access to all groups of an electronic store. Those of ordinary skill appreciate that database commands, such as SQL commands, are easily constructed to retrieve all records of a database table, and further that such a command would facilitate retrieving all data records from the products table <b>204</b> to generate a result set. It will be understood that data fields of the result set facilitate creation of data structures underlying an all products group <b>334</b> using techniques disclosed herein.</p>
<p id="p-0177" num="0192">The search results group <b>338</b> comprises a collection of groups or products resulting from a search request issued by a user. The search results group <b>338</b> represents products and groups identified by the most recently performed search. Thus, groups and products identified in each new search replace existing groups and products within the search results group. Those of ordinary skill appreciate that database commands, such as SQL commands, are easily constructed to search the records of a database table, to retrieve the records matching particular query parameters, and to generate a corresponding result set. It will further be understood that many types of interfaces are available to elicit from a user a text or numeric pattern which may contain wildcard (or variable) pattern matching specifications. The Merchant Workbench invokes such an interface when a user clicks on the search command <b>776</b> (see <figref idref="DRAWINGS">FIG. 7D</figref>). The user responds by entering search criteria from which the Merchant Workbench generates an SQL query. Finally, it will be understood that a result set generated by a database search command employing pattern matching on particular fields of data records facilitates construction of data structures underlying a search results group <b>338</b> using techniques disclosed herein.</p>
<p id="p-0178" num="0193">The sale products group <b>340</b> comprises all products currently marked for inclusion in a promotion or sale. Thus, a store designer or a merchant can conveniently access each and every product marked for sale in an electronic store. One of ordinary skill will appreciate that a status field of each data record in the products table <b>204</b> may be set to a particular value indicating that the product represented by the data record has been designated for inclusion sale by a merchant. It will be understood that database query commands, such as SQL commands, can easily be formulated to search for and retrieve data records whose status fields match a predetermined status value and that a corresponding result set would be generated. It will be further understood that such a result set facilitate creation of data structures underlying a sale products group <b>340</b> using techniques disclosed herein.</p>
<p id="p-0179" num="0194">In a step <b>532</b> (<figref idref="DRAWINGS">FIG. 5</figref>), the right pane <b>309</b> of the store design user interface <b>310</b> is displayed by a refresh method of the store management control <b>306</b>. The refresh method of the store management control <b>306</b> displays information about products subordinate to a current group (i.e., a group represented by an icon in the left pane <b>308</b> that is selected by a user) and also displays information about groups subordinate to the current group.</p>
<p id="p-0180" num="0195">To display information about subordinate products, the refresh method is passed the value of the Group_ID associated with the current group. At the time the initialize event of the store management control <b>306</b> is recognized, the root level group (e.g., My Store) is the current group, and the refresh method will search for any products contained in (i.e., directly subordinate to) the root level group. Whether any products are contained in the root level group is a decision made by the designer of the electronic store, and that decision may be dictated by whether the store designer wants any products advertised on an initial Web page of the Web site.</p>
<p id="p-0181" num="0196">The refresh method of the store management control <b>306</b> navigates (i.e., searches) the Product Tree Structure for a node whose Group_ID value matches that of the current group. When the refresh method of the store management control <b>306</b> is called by the Initial_Event_Handler, the root level is the current selected group, and if its Group_ID value is 1000, then the refresh method navigates the Product Tree Structure to find a node whose Group_ID value is 1000. Once the matching node is found, the refresh method examines the node's pointer to a product data structure. If the pointer is null, then there is no product data to display, and the refresh method terminates.</p>
<p id="p-0182" num="0197">If, however, the matched node points to a product data structure (e.g., representing a first popular t-shirt), then the Product_ID value (e.g., 0543) and the Product_Name value (e.g., ‘Pit Crew T-Shirt’) are accessed and displayed as a first product entry <b>360</b> in the right pane <b>309</b>. The refresh method uses standard text display routines known in the art (e.g., such as those commonly used by a refresh method to display entries of a standard list box control) to display Product_ID and Product_Name values. See Microsoft Visual Basic Language Reference 772, Microsoft Corporation, 1995.</p>
<p id="p-0183" num="0198">The refresh method then examines the pointer of that product data structure which may point to another product data structure. If that pointer is null, then the refresh method terminates. If the pointer points to another product data structure (e.g., representing a second popular t-shirt), then the Product_ID value (e.g., 0544) and the Product_Name value (e.g., ‘Propeller Head T-Shirt’) of that product data structure are displayed as a second product entry <b>362</b>. The refresh method continues thus to navigate a linked list of product data structures until a null pointer is encountered and the refresh method terminates.</p>
<p id="p-0184" num="0199">After displaying information about subordinate products, the refresh method of the store management control <b>306</b> displays information about subordinate groups. The refresh method of the store management control <b>306</b> invokes a Get_Subordinate_Groups routine of the tree structure control <b>304</b> and passes as a parameter the Group_ID associated with the root level group. Tree structure control routines which retrieve subordinate elements of a selected element are known in the art and will not be further discussed. See Microsoft Visual Basic Professional Features 463, Microsoft Corporation, 1995.</p>
<p id="p-0185" num="0200">The Get_Subordinate_Groups routine returns, in one embodiment of the present invention, a pointer to a linked list of group structures. Each group structure in the linked list contains information about a group, including Group_ID value and Group_Name value, and also includes a pointer to another group structure. The refresh method of the store management control receives the pointer to this linked list of structures and sequentially navigates the group structures. Navigation of the linked list terminates when a pointer of a group structure is null.</p>
<p id="p-0186" num="0201">As each group structure is encountered during navigation, the refresh method outputs information to the right pane display <b>309</b>. For each group encountered, the refresh method outputs one row of information in the right pane, including an icon and text characters representing a Group_Name. One of ordinary skill in the art will understand that other arrangements and displays of group information in a right pane are possible, and the present invention is not limited by a particular arrangement of elements in the right pane display <b>309</b>.</p>
<p id="p-0187" num="0202">The refresh method thus outputs to the right pane display <b>309</b> elements representing both products and groups. All products and groups illustrated in a single right pane display are contained in (subordinate to) a certain group selected by a user. In a preferred embodiment, each product included in the right pane display is represented by one row of text elements and each group included in the right pane display is represented by one row comprising an icon and a text label.</p>
<p id="p-0188" num="0203">After the refresh method of the store management control <b>306</b> completes its output to the right pane display <b>309</b>, the refresh method terminates, and returns control to the Initial_Event_Handler. Then, in a next step <b>534</b>, the Initial_Event_Handler terminates.</p>
<p id="p-0189" num="0204">The store design user interface <b>310</b> thus displays an hierarchical model of an electronic store, including icons and labels arranged to represent parent-child and sibling relationships established between groups and products.</p>
<p id="p-0190" num="0205">d. Examining Subordinate Groups</p>
<p id="p-0191" num="0206"><figref idref="DRAWINGS">FIG. 7A</figref> illustrates one embodiment of a left pane <b>308</b> of a store design user interface <b>310</b> which displays the hierarchy of an electronic store. The user interface illustrated in <figref idref="DRAWINGS">FIG. 7A</figref> displays a store icon <b>702</b> at the root level and, at the next subordinate level, displays a departments icon <b>704</b>, a staging area icon <b>706</b>, an all products icon <b>708</b>, an all groups icon <b>710</b>, a search results icon <b>712</b>, and a sale products icon <b>714</b>.</p>
<p id="p-0192" num="0207">An expand icon <b>716</b>, represented by a plus sign inside a small box, is located to the left of the departments icon <b>704</b>. A similar expand icon <b>718</b> is located to the left of the staging area icon <b>706</b>. Expand icons and other command options presented by a user interface are generally activated by using a pointing device, such as a mouse, in combination with depressing a key or button such as a mouse button.</p>
<p id="p-0193" num="0208">Accordingly, a merchant can position the mouse pointer over the expand icon <b>716</b> and depress a mouse button to activate the expand option associated with the departments icon <b>704</b>. Such activation of the expand option associated with the departments icon <b>704</b> causes an expand event to occur. An expand event is the first step in updating the store design user interface <b>310</b> to display the next subordinate level of groups or products associated with the departments group.</p>
<p id="p-0194" num="0209"><figref idref="DRAWINGS">FIGS. 8A and 8B</figref> illustrate steps involved in updating the store design user interface <b>310</b> upon recognition of an expand event. In a first step <b>802</b>, an expand event is recognized. In a next step <b>804</b>, an internal Expand_Event_Handler of the tree structure control <b>304</b> begins running. The Expand_Event_Handler of the tree structure control <b>304</b> determines, in a farther step <b>806</b>, the Group_ID of the group to be expanded. Expand_Event_Handlers of tree structure controls which return values identifying an element of an hierarchical structure to be expanded are known in the art.</p>
<p id="p-0195" num="0210">In a further step <b>808</b>, the Expand_Event_Handler invokes an ExpandGroup_Event_Handler of the store management control <b>306</b>. The Expand_Event_Handler passes the Group_ID value of the group to be expanded as a parameter to the ExpandGroup_Event_Handler.</p>
<p id="p-0196" num="0211">In a next step <b>810</b>, the ExpandGroup_Event_Handler generates a query designed to retrieve data representing all groups that are contained in the group to be expanded. In a preferred embodiment, the query is constructed by concatenating a character string constant, a character string variable including digit characters representing the Group_ID value, and another character string constant. The following is an example of a query generated by the ExpandGroup_Event_Handler:
<ul id="ul0011" list-style="none">
    <li id="ul0011-0001" num="0000">
    <ul id="ul0012" list-style="none">
        <li id="ul0012-0001" num="0212">Select Group_Name, Group_ID, Parent From Relationship, Groups</li>
        <li id="ul0012-0002" num="0213">Where Relationship.ID_Type=“G” and
        <ul id="ul0013" list-style="none">
            <li id="ul0013-0001" num="0214">Relationship.ID=Parent_Group_ID and</li>
            <li id="ul0013-0002" num="0215">Relationship.Relationship=“Contains” and</li>
            <li id="ul0013-0003" num="0216">Relationship.Related_ID_Type=“G” and</li>
            <li id="ul0013-0004" num="0217">Relationship.Related_ID_Groups.Group_ID</li>
        </ul>
        </li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0197" num="0218">In a next step <b>812</b>, the ExpandGroup_Event_Handler calls the Send_Message routine to transmit the query via the Internet. As described in relation to <figref idref="DRAWINGS">FIG. 5</figref>, the Send_Message routine receives the query as a parameter, as well as a message-type of ‘Post’ as a second parameter. Communication of the query to the product information database <b>116</b> occurs as was described in relation to <figref idref="DRAWINGS">FIG. 5</figref>.</p>
<p id="p-0198" num="0219">The relational database server <b>114</b> receives the query and queries the product information database <b>116</b>. The relational database server generates a result set including data retrieved from data records having a ‘contained in’ relationship with the data record corresponding to the group to be expanded. The ISAPI query application <b>354</b> of the Web server <b>106</b> formats the result set in name/value pair format. The Web server <b>106</b> communicates the result set in name/value pair format to the enhanced Web browser <b>112</b> in the manner described in relation to <figref idref="DRAWINGS">FIG. 5</figref>.</p>
<p id="p-0199" num="0220">In an additional step <b>814</b>, the ExpandGroup_Event_Handler receives the result set comprising data representing groups contained in the group to be expanded. Next, in a step <b>816</b>, the ExpandGroup_Event_Handler determines whether the result set is empty. If the result set is not empty (i.e., the group to be expanded contains at least one group), then, in a next step <b>818</b>, the ExpandGroup_Event_Handler calls the Add_Branch routine to add a new node to the group tree structure.</p>
<p id="p-0200" num="0221">The ExpandGroup_Event_Handler passes four parameters to the Add_Branch routine: (1) the Group_ID value corresponding to the group to be expanded, (2) a Group_Name value, (3) a Group_ID) value; and (4) a Parent value. The Add_Branch routine then creates a new node and adds that node to the Group Tree Structure in the manner described in relation to <figref idref="DRAWINGS">FIG. 5</figref>.</p>
<p id="p-0201" num="0222">In a farther step <b>820</b>, the ExpandGroup_Event_Handler determines whether all groups included in the result set have been added as new nodes to the Group Tree Structure. If not, then the step <b>818</b> is repeated as necessary. If all of the groups included in the result set have been added as new nodes to the Group Tree Structure or if the result set in the step <b>816</b> was determined to be empty, then, in a next step <b>822</b>, the ExpandGroup_Event_Handler generates a query designed to retrieve data from product data records representing products contained in the group to be expanded. The following is an example of a query is so designed:
<ul id="ul0014" list-style="none">
    <li id="ul0014-0001" num="0000">
    <ul id="ul0015" list-style="none">
        <li id="ul0015-0001" num="0223">Select Name, Product_From Relationship, Products</li>
        <li id="ul0015-0002" num="0224">Where Relationship.ID_Type=“G”</li>
        <li id="ul0015-0003" num="0225">and Relationship.ID=Parent_Group_ID</li>
        <li id="ul0015-0004" num="0226">and Relationship.Relationship=“Contains”</li>
        <li id="ul0015-0005" num="0227">and Relationship.Related_ID_Type=“P”</li>
        <li id="ul0015-0006" num="0228">and Relationship.Related_ID=Products.Product_ID</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0202" num="0229">In a further step <b>824</b>, the ExpandGroup_Event_Handler calls the Send_Message routine to transmit the query via the Internet. As previously described in connection with <figref idref="DRAWINGS">FIG. 5</figref>, a result set is generated from the query and formatted in name/value pair format and communicated from the Web server <b>106</b> to the enhanced Web browser <b>112</b>.</p>
<p id="p-0203" num="0230">In a next step <b>826</b>, the ExpandGroup_Event_Handler receives the result set comprising data retrieved from product data records and formatted in name/value pair format. In a next step <b>828</b>, the ExpandGroup_Event_Handler determines whether the result set is empty. If not, then, in a further step <b>830</b>, the ExpandGroup_Event_Handler calls the Add_Product routine to add data representing each product in the result set to the Product Tree Structure in the manner described in connection with <figref idref="DRAWINGS">FIG. 5</figref>.</p>
<p id="p-0204" num="0231">In an additional step <b>832</b>, the ExpandGroup_Event_Handler determines whether all product data items included in the result set have been added to the Product Tree Structure. If not, the step <b>830</b> is repeated as necessary. When all product data items have been added as product data structures to the Product Tree Structure, or, if in the step <b>828</b>, it was determined that the result set was empty, then, in a next step <b>834</b>, the ExpandGroup_Event_Handler calls the refresh method of the tree structure control <b>304</b> to display an updated left pane <b>308</b> of the store design user interface <b>310</b>.</p>
<p id="p-0205" num="0232">In a next step <b>836</b>, the ExpandGroup_Event_Handler calls the refresh method of the store management control <b>306</b> which navigates the Product Tree Structure to locate a node corresponding to the group that was selected to be expanded. When that node is located in the Product Tree Structure, the refresh method navigates the linked list of product data structures and outputs one row (e.g., text strings representing a Product_ID value and a Product_Name value) to the right pane display <b>309</b> for each product data structure encountered until a null pointer is reached.</p>
<p id="p-0206" num="0233">The refresh method of the store management control <b>306</b> then calls the Get_Subordinate_Groups routine of the tree structure control <b>304</b>. The Get_Subordinate_Groups routine constructs a linked list of group structures subordinate to the group to be expanded, and returns a pointer to that linked list upon termination. The refresh method of the store management control <b>304</b> receives a pointer to the linked list of group structures as a result returned by the Get_Subordinate_Groups routine.</p>
<p id="p-0207" num="0234">The refresh method of the store management control <b>306</b> then navigates the group structures of the linked list and outputs one row (e.g., an icon and a text string representing the Group_Name) to the right pane display <b>309</b> for each group structure encountered. The refresh method terminates when a null pointer is encountered at the end of the linked list. After an updated right pane <b>309</b> is displayed, then, in a further step <b>838</b>, the ExpandGroup_Event_Handler terminates.</p>
<p id="p-0208" num="0235">e. Hiding Subordinate Groups from View</p>
<p id="p-0209" num="0236">A user of the store design user interface <b>310</b> selects a contract icon <b>404</b> to eliminate (i.e., hide from view) subordinate groups from the left pane display <b>308</b> and the right pane display <b>309</b>. Tree structure controls known in the art provide contract routines which hide subordinate elements from view. When a contract event occurs from a user selecting a contract icon associated with a particular group, a Contract_Group routine of the tree structure control <b>304</b> hides from view all icons representing subordinate groups of the particular group. The Contract_Group routine then calls a Contract_Event_Handler of the store management control <b>306</b>. The Contract_Event_Handler removes all elements (e.g., text strings and icons) from the right pane <b>309</b> display. One of ordinary skill understands that rectangular areas of a computer screen are easily blanked or cleared.</p>
<p id="p-0210" num="0237"><figref idref="DRAWINGS">FIG. 7B</figref> illustrates a left pane display <b>308</b> of a hierarchy of groups of an electronic store generated by selecting the expand icon <b>716</b> of the user interface illustrated in <figref idref="DRAWINGS">FIG. 7A</figref>. <figref idref="DRAWINGS">FIG. 7B</figref> illustrates a next subordinate level of icons—an automotive icon <b>720</b>, a computer icon <b>722</b>, and a clothing icon <b>724</b>—immediately below the departments icon <b>704</b>. Expand icons <b>726</b>, <b>728</b>, and <b>730</b> are located to the left of the automotive <b>720</b>, computer <b>722</b>, and clothing <b>724</b> icons. The expand icon <b>716</b> to the left of the departments icon <b>704</b> is changed from a plus sign in <figref idref="DRAWINGS">FIG. 7A</figref> to a minus sign in <figref idref="DRAWINGS">FIG. 7B</figref>, indicating that a next selection of that expand icon <b>716</b> will contract or close the departments group and eliminate from the left pane display <b>308</b> the automotive <b>720</b>, computer <b>722</b>, and clothing <b>724</b> icons. The expand icons <b>726</b>, <b>728</b>, <b>730</b> displayed at the left of the automotive group icon <b>720</b>, the computer group icon <b>722</b>, and the clothing group icon <b>724</b> indicate that further subordinate groups or products are contained in groups represented by these icons.</p>
<p id="p-0211" num="0238"><figref idref="DRAWINGS">FIG. 7C</figref> illustrates a further subordinate level of group icons—a sedans icon <b>732</b>, a sports cars icon <b>734</b>, and a sport utility vehicles icon <b>736</b>—immediately below the automotive icon <b>720</b>. The left pane display <b>308</b> of <figref idref="DRAWINGS">FIG. 7C</figref> is generated, for example, by clicking the expand icon <b>726</b> (represented by a ‘+’ sign) illustrated in <figref idref="DRAWINGS">FIG. 7B</figref>. The sedans icon <b>732</b>, the sports cars icon <b>734</b>, and the sport utility vehicles icon <b>736</b> represent groups contained within the automotive group represented by the automotive icon <b>720</b>. As illustrated in <figref idref="DRAWINGS">FIG. 7C</figref>, the icon <b>726</b> is a contract icon (represented by a “−” sign), indicating that the automotive group has been expanded and that it may be contracted by clicking the contract icon <b>726</b>.</p>
<p id="p-0212" num="0239"><figref idref="DRAWINGS">FIG. 7D</figref> illustrates an embodiment of a store design user interface <b>760</b> comprising a command area <b>770</b>, as well as a left pane display <b>740</b> and a right pane display <b>742</b>. The command area <b>770</b> includes a new group command <b>772</b>, a new product command <b>774</b>, a search command <b>776</b>, and a preferred rules command <b>778</b>.</p>
<p id="p-0213" num="0240">The left pane display <b>740</b> and right pane display <b>742</b> represent a hierarchical view of an electronic store generated in response to selecting the expand icon <b>733</b> associated with the sedans icon <b>732</b> of <figref idref="DRAWINGS">FIG. 7C</figref>. A more sedans icon <b>738</b> is displayed at a level subordinate to (e.g., to the right of and below) the sedans icon <b>732</b>. Thus, the left pane <b>740</b> illustrated in <figref idref="DRAWINGS">FIG. 7D</figref> displays the hierarchal structure of groups of an electronic store. The right pane <b>742</b>, however, illustrates both products and groups contained in or related to the sedans group represented by the sedans icon <b>732</b>.</p>
<p id="p-0214" num="0241">The right pane <b>742</b> displays the products and groups contained in the sedans group in a two-column format. Each column is designated by a column heading a Product_ID heading <b>744</b>, and a Name heading <b>746</b>. A first product <b>750</b> contained in the sedans group is represented in <figref idref="DRAWINGS">FIG. 7D</figref> as having a Product_ID “P0121,” and a name “Honda Accord.” A second product <b>752</b> contained in the sedans group is represented as having a Product_ID “P0122,” and a name “Toyota Camry.” A more sedans group is represented as being contained within the sedans group by an icon <b>754</b> labeled “More Sedans.” Also, a luxury sport utility group is represented as being contained within the sedans group by an icon <b>756</b> labeled “Luxury Sport Utility.”</p>
<p id="p-0215" num="0242">The store design user interface <b>760</b> thus conveniently and concisely conveys to a merchant relationships between groups and products forming the structure of an electronic store. Using the enhanced Web browser, a merchant also establishes and modifies those relationships. Advantageously, the Merchant Workbench modifies relationships between products or groups based on single drag-and-drop operations.</p>
<p id="p-0216" num="0243">f. Modifying Store Structure by Drag-and-Drop Operations</p>
<p id="p-0217" num="0244"><figref idref="DRAWINGS">FIG. 9</figref> illustrates a left pane <b>902</b> and a right pane <b>904</b> of a store design user interface. Elements appearing in the left pane <b>902</b> or the right pane <b>904</b>, such as an icon <b>906</b> or a text item <b>910</b>, are selected using a mouse pointer. A user selects the icon <b>906</b> by positioning a mouse pointer over the icon <b>906</b> and depressing a mouse button. The user drags the icon <b>906</b> by moving the mouse pointer to a different screen location while continuing to depress the mouse button.</p>
<p id="p-0218" num="0245">Each element (e.g., text string or icon), whether associated with a group or a product, is enabled as a valid drag source. Thus, each element representing a product (e.g., text string representing a Product_ID value or Product_Name value) can be selected by a mouse and ‘dragged’ to a different position in the store design user interface <b>310</b>. Furthermore, each such element is associated with information about the respective product it represents and that information is available to event_handler routines when such element is dragged.</p>
<p id="p-0219" num="0246">Each element of the left pane <b>902</b> or the right pane <b>904</b> associated with a group (e.g., an icon or a text string representing a Group_Name) can also be selected with a mouse and dragged to a different location in the store design user interface. When a group element is dragged, information about the group (e.g., Group_ID value and Group_Name value) is accessible by event handlers.</p>
<p id="p-0220" num="0247">One of ordinary skill in the art knows how to create bitmaps (i.e., collections of adjacent pixels on a computer screen) comprising icons and text strings, such that the bitmaps may be dragged by a mouse to different locations in a graphical user interface. Further, it is also well known to associate information with a bitmap such that the information is accessible when the bitmap is dragged.</p>
<p id="p-0221" num="0248"><figref idref="DRAWINGS">FIG. 10A</figref> illustrates steps performed when a drag event occurs in the left pane <b>902</b>. In a first step <b>1002</b>, a left pane drag event is recognized. In a next step <b>1004</b>, an event handler called, for example L_Drag_Event_Handler, of the Tree Structure Control <b>304</b>, begins running. In a further step <b>1006</b> the L_Drag_Event_Handler determines the Group_ID value of the group associated with the icon being dragged. Also, in the step <b>1006</b>, the L_Drag_Event_Handler determines the Group_Name value and the Parent value of the group associated with the icon being dragged. In a next step <b>1008</b>, the L_Drag_Event_Handler terminates.</p>
<p id="p-0222" num="0249">A drag event occurs in the right pane <b>904</b> when the user selects an element of the right pane <b>904</b> using the mouse and proceeds to position the element to a new location within the store design user interface <b>905</b>. For example, the drag event in the right pane <b>904</b> is recognized when a user positions a mouse pointer over the text element <b>910</b> representing a product, depresses a mouse button, and moves the mouse pointer to a new location <b>912</b> while continuing to depress the mouse button.</p>
<p id="p-0223" num="0250"><figref idref="DRAWINGS">FIG. 10B</figref> illustrates steps performed when a drag event is recognized in the right pane <b>904</b>. In a first step <b>1010</b>, a drag event in the right pane is recognized. An event handler called, for example, R_Drag_Event_Handler, of the store management control <b>306</b> begins running in a further step <b>1012</b>, following the recognition of the drag event in the right pane <b>902</b>. In a next step <b>1014</b>, the R_Drag_Event_Handler determines whether the element in the right pane being dragged represents a group or a product. To determine whether a dragged element represents a group or product, the R_Drag_Event_Handler accesses the drag source information made available by the drag source object. If a dragged element represents a group, then the R_Drag_Event_Handler accesses drag source information including Group_ID value, Group_Name value, Parent value, and a Type value. A Type value of ‘G’ indicates, for example, that the dragged element represents a group. If a dragged element represents a product, however, then the R_Drag_Event_Handler accesses drag source information including Product_ID value, Product_Name value, and a Type value of ‘P’ (indicating that the dragged element represents a product). In a next step <b>1016</b>, the R_Drag_Event_Handler determines the ID value of the product or group being dragged. Also, in the step <b>1016</b>, the R_Drag_Event_Handler determines the group name or the product name of the element being dragged, as well as the Parent value if the element is a group. In a further step <b>1018</b>, the R_Drag_Event_Handler terminates.</p>
<p id="p-0224" num="0251">A drop event is recognized in the left pane <b>902</b> when an element in the process of being dragged is dropped in the left pane <b>902</b>. For example, the icon <b>906</b> is selected and dragged to a new location <b>908</b> and is further dragged to the position occupied by the icon <b>916</b> whereupon the mouse button is released. The drop event occurs when a drag event terminates with the release of a mouse button and when the dragged element is positioned on top of a valid drop target. According to one embodiment of the present invention, icons representing groups in the left pane <b>902</b> or the right pane <b>904</b> of the store design user interface are valid drop targets.</p>
<p id="p-0225" num="0252">In response to simple drag and drop operations, the Merchant Workbench updates relationship information in a product information database <b>116</b> (or inventory control system) and also updates relationship information in data structures local to the enhanced Web browser <b>112</b>. Accordingly, any changes to the hierarchical structure of an electronic store initiated by a merchant using the enhanced Web browser cause modifications to a remote product information database, and those modifications are then represented to the merchant by altering as needed the subordinate relationships of icons displayed by the store design user interface. Thus, a merchant receives intuitive visual feedback that requested structural changes were successfully accomplished.</p>
<p id="p-0226" num="0253"><figref idref="DRAWINGS">FIGS. 11A and 11B</figref> illustrate steps performed to modify relationships between groups or products when a drop event is recognized in either the left pane <b>902</b> or the right pane <b>904</b>. In a first step <b>1102</b>, a drop event is recognized in the left pane upon the release of a mouse button that was depressed to begin a drag operation. In a next step <b>1104</b>, an event handler called, for example, Drop_Event_Handler, of the store management control <b>306</b> begins running. In a further step <b>1106</b> the Drop_Event_Handler determines the Group_ID value of the group associated with the dropped target icon.</p>
<p id="p-0227" num="0254">Then, in a next step <b>1108</b>, the Drop_Event_Handler generates a database command to add a new data record to the relationship table <b>202</b>. The database command adds a record having an ID field equal to the Group_ID associated with the drop target icon, and a Related_ID equal to the Group_ID value or the Product_ID value corresponding to the drag source element (the element dragged by the user). The new data record will also specify a ‘contained in’ relationship because the command to add a new data record specifies that the value of the Relationship field be set to ‘C.’</p>
<p id="p-0228" num="0255">In a next step <b>1110</b>, the Drop_Event_Handler calls the Send_Message routine of the store management control <b>306</b> to communicate the database command to the product information database <b>116</b> via the Internet. Communication of the database command to the product information database <b>116</b> is performed in the manner described in connection with <figref idref="DRAWINGS">FIG. 5</figref>.</p>
<p id="p-0229" num="0256">In a further step <b>1112</b>, the Drop_Event_Handler determines whether a data record was successfully added to the relationship table <b>202</b> of the product information database <b>116</b> by examining a value of a result code embedded in a message transmitted by the Web server <b>106</b> to the enhanced Web browser <b>112</b>. The Drop_Event_Handler receives a result code of, for example, “Result=Success” if a data record was successfully added; a result code of, for example, “Result=Non-Fatal Error” if a non-fatal error prevented the addition of a new data record; or a result code of, for example, “Result=Fatal Error” if a fatal error prevented the addition of a new data record.</p>
<p id="p-0230" num="0257">If, in the step <b>1112</b>, the Drop_Event_Handler determines that a data record was not successfully added to the relationship table <b>202</b>, then, in a next step <b>1114</b>, the Drop_Event_Handler determines whether an error preventing a data record from being added to the relationship table <b>202</b> was fatal. If, in the step <b>1114</b>, the Drop_Event_Handler determines that a fatal error prevented a data record from being added to the relationship table <b>202</b>, or if three consecutive non-fatal errors occurred, then, in a next step <b>1116</b>, the Drop_Event_Handler terminates If, however, in the step <b>1114</b>, the Drop_Event_Handler determines that a non-fatal error prevented a data record from being added to the relationship table <b>202</b>, and if no more than two consecutive non-fatal errors have occurred, then the Drop_Event_Handler repeats the step <b>1110</b>.</p>
<p id="p-0231" num="0258">Then, in a next step <b>1118</b>, the Drop_Event_Handler generates a database command to remove a data record from the relationship table <b>202</b>. The database command is designed to remove a data record having a Related_ID field equal to the Group_ID value associated with the dragged icon. The SQL command to remove the data record from the relationship table <b>202</b> requires certain parameters: the ID of the object to move (passed as a parameter called Moved_Object_ID), the Group_ID of the parent group (group where the group is moved FROM, passed as a parameter called From_Group_ID). The following is an example of such a database command:
<ul id="ul0016" list-style="none">
    <li id="ul0016-0001" num="0000">
    <ul id="ul0017" list-style="none">
        <li id="ul0017-0001" num="0259">Delete Relationship</li>
        <li id="ul0017-0002" num="0260">Where Relationship.ID_Type=“G”</li>
        <li id="ul0017-0003" num="0261">And Relationship.ID=From_Group_ID</li>
        <li id="ul0017-0004" num="0262">And Relationship.Relationship= “Contains”</li>
        <li id="ul0017-0005" num="0263">And Relationship.Related_ID=Moved_Object_ID   </li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0232" num="0264">In one embodiment of the present invention, no Product_ID value is the same as any Group_ID value. One skilled in the art will understand that, in this embodiment, the database command required to remove a data record from the relationship table <b>202</b> need not specify whether the Related_ID field of the data record to remove comprises a Product_ID value or a Group_ID value.</p>
<p id="p-0233" num="0265">Next, in a further step <b>1120</b>, The Drop_Event_Handler of the store management control <b>306</b> calls the Send_Message routine to transmit the database command to the product information database <b>116</b> via the Internet. Communication of the database command to the product information database <b>116</b> is performed in the manner described in connection with <figref idref="DRAWINGS">FIG. 5</figref>.</p>
<p id="p-0234" num="0266">In a further step <b>1122</b>, the Web server <b>106</b> transmits a result message to the enhanced Web browser indicating whether the database command successfully removed a data record from the product information database <b>116</b>. The result message includes a result code in name/value pair format. When a data record is successfully removed, the result code is, for example, “Result=Success.” When a data record is not removed due to a non-fatal error, the result code is, for example, “Result=Non-Fatal Error.” When a fatal error prevents a data record from being removed, the result code is, for example, “Result=Fatal Error.”</p>
<p id="p-0235" num="0267">In the step <b>1122</b>, the Drop_Event_Handler examines the result code, and, if the result code indicates that a data record was not successfully removed, then in a next step <b>1124</b>, the Drop_Event_Handler determines whether the error was fatal or non-fatal. If the error was fatal or if three consecutive non-fatal errors occurred, then, in an additional step <b>1126</b>, the Drop_Event_Handler terminates. If the error was non-fatal and no more than two consecutive non-fatal errors occurred, then, the Drop_Event_Handler records an additional non-fatal error and repeats step <b>1120</b>.</p>
<p id="p-0236" num="0268">If, in the step <b>1122</b>, the Drop_Event_Handler determines that a data record was removed successfully, then in a next step <b>1128</b>, the Drop_Event_Handler accesses the drag source information to determine whether the user dragged an element representing a group. If so, then, in a next step <b>1130</b>, the Drop_Event_Handler calls a Remove_Branch routine of the tree structure control <b>304</b>.</p>
<p id="p-0237" num="0269">The Drop_Event_Handler passes the Group_ID associated with the dragged element (e.g., an icon representing a group) as a parameter to the Remove_Branch routine. The Remove_Branch routine removes a node from the Group Tree Structure whose Group ID value matches that associated with the dragged icon.</p>
<p id="p-0238" num="0270">In a next step <b>1132</b>, the Drop_Event_Handler calls the Add_Branch routine of the tree structure control <b>304</b>. The Add_Branch routine receives as parameters (1) the Group_ID value associated with the drop target icon, (2) the Group_Name associated with the drag source element, (3) the Group_ID value associated with the drag source element, and (4) the Parent Value associated with the drag source element. The Add_Branch routine then adds a new node to the Group Tree Structure, the new node having a Group_Name, Group_ID, and Parent Value equal to that of the group represented by the drag source element.</p>
<p id="p-0239" num="0271">Then, in a further step <b>1134</b>, the Drop_Event_Handler calls the refresh method of the tree structure control <b>304</b> which updates and refreshes the left pane display <b>902</b>. In a next step <b>1136</b>, the Drop_Event_Handler calls the refresh method of the store management control <b>306</b>. The refresh method of the store management control <b>306</b> updates and refreshes the right pane display <b>904</b>. Then, in a further step <b>1138</b>, the Drop_Event_Handler terminates.</p>
<p id="p-0240" num="0272">If in the step <b>1128</b>, the Drop_Event_Handler determines that the dragged element represents a product, then, in a next step <b>1140</b>, the Drop_Event_Handler calls the Remove_Product routine of the store management control <b>306</b>. The Drop_Event_Handler passes to the Remove_Product routine the Group_ID value associated with drop target icon as a first parameter and the Product_ID value associated with the drag source element as a second parameter. The Remove_Product routine navigates the Product Tree Structure, locates a node whose Group_ID value matches that associated with the drop target icon, and establishes that node as a current a node. Then, the Remove_Product routine accesses a pointer of the current node which points to a linked list of product data structures. The Remove_Product routine navigates the linked list of product data structures until it encounters a product data structure having a Product_ID that matches the Product_ID associated with the drag source element. The Remove_Product routine then removes that product data structure from the linked list of product data structures and terminates. One of ordinary skill in the art understands how to remove a data structure from a linked list of such data structures.</p>
<p id="p-0241" num="0273">In a next step <b>1142</b>, the Drop_Event_Handler calls the Add_Product routine of the store management control <b>306</b> and passes three parameters: (1) the Group_ID value associated with the drop target icon, (2) a Product_Name value associated with the dragged element, and (3) a Product_ID value associated with the dragged element. The Add_Product routine navigates the nodes of the Product Tree Structure and locates the node whose Group_ID matches that associated with the drop target icon. If no such node exists, the Add_Product routine adds such a node to the Product Tree Structure. The Add_Product routine then establishes the located (or created) node as a current node. Next, the Add_Product routine accesses a pointer of the current node which points to a linked list of product data structures, navigates that linked list to its end, allocates memory for a new product data structure, and adds the new product data structure to the linked list. The Add_Product routine sets the Product_ID value and Product_Name value of the new product data structure to the values as passed in the second and third parameters, which correspond to values associated with the dragged element. The Add_Product routine then terminates.</p>
<p id="p-0242" num="0274">In a next step <b>1144</b>, the Drop_Event_Handler updates the Parent value of a node in the Group Tree Structure whose Group_ID matches that of the drop target icon. Updating this Parent value ensures that the Group Tree Structure represents that a group associated with the drop target icon has at least one subordinate group or product. Thus, when the left pane display is updated, an expand icon is associated with the drop target icon, indicating that groups or products subordinate to the drop target icon exist and may be examined.</p>
<p id="p-0243" num="0275">Next, additional steps <b>1134</b>, <b>1136</b>, and <b>1138</b> are performed, whereupon the left display <b>902</b> and the right display <b>904</b> are updated and refreshed, and the Drop_Event_Handler terminates.</p>
<p id="p-0244" num="0276">Tables 10, 11, and 12 below illustrate respectively data in the group table <b>206</b>, the products table <b>204</b>, and the relationship table <b>202</b> before any updating caused by the drag and drop move actions <b>908</b>, <b>912</b> illustrated in <figref idref="DRAWINGS">FIG. 9</figref> (for readability, only relevant subsets of data are represented).</p>
<p id="p-0245" num="0277">
<tables id="TABLE-US-00011" num="00011">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" rowsep="1">TABLE 10</entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>Group Table Before Move Actions 908, 912</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="1" colwidth="84pt" align="center"/>
<colspec colname="2" colwidth="56pt" align="left"/>
<colspec colname="3" colwidth="77pt" align="center"/>
<tbody valign="top">
<row>
<entry>GROUP I.D.</entry>
<entry>GROUP NAME</entry>
<entry>PARENT</entry>
</row>
<row>
<entry namest="1" nameend="3" align="center" rowsep="1"/>
</row>
<row>
<entry>100</entry>
<entry>Clothing</entry>
<entry>Y</entry>
</row>
<row>
<entry>110</entry>
<entry>Blouses</entry>
<entry>Y</entry>
</row>
<row>
<entry>120</entry>
<entry>Dresses</entry>
<entry>Y</entry>
</row>
<row>
<entry>200</entry>
<entry>Accessories</entry>
<entry>Y</entry>
</row>
<row>
<entry>220</entry>
<entry>Purses</entry>
<entry>Y</entry>
</row>
<row>
<entry>230</entry>
<entry>Shoes</entry>
<entry>Y</entry>
</row>
<row>
<entry namest="1" nameend="3" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0246" num="0278">
<tables id="TABLE-US-00012" num="00012">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" rowsep="1">TABLE 11</entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>Product Table Before Move Actions 908, 912</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="126pt" align="center"/>
<colspec colname="2" colwidth="91pt" align="left"/>
<tbody valign="top">
<row>
<entry>PRODUCT I.D.</entry>
<entry>PRODUCT NAME</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
<row>
<entry>0891</entry>
<entry>Cotton Pullover</entry>
</row>
<row>
<entry>0896</entry>
<entry>Silk Buttondown</entry>
</row>
<row>
<entry>0911</entry>
<entry>Terrycloth Bathrobe</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0247" num="0279">
<tables id="TABLE-US-00013" num="00013">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" rowsep="1">TABLE 12</entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>Relationship Table Before Move Actions 908, 912</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="5">
<colspec colname="1" colwidth="28pt" align="center"/>
<colspec colname="2" colwidth="35pt" align="center"/>
<colspec colname="3" colwidth="56pt" align="center"/>
<colspec colname="4" colwidth="56pt" align="center"/>
<colspec colname="5" colwidth="42pt" align="center"/>
<tbody valign="top">
<row>
<entry/>
<entry/>
<entry/>
<entry/>
<entry>RELATED</entry>
</row>
<row>
<entry>I.D.</entry>
<entry>I.D. TYPE</entry>
<entry>RELATIONSHIP</entry>
<entry>RELATED I.D.</entry>
<entry>I.D. TYPE</entry>
</row>
<row>
<entry namest="1" nameend="5" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="5">
<colspec colname="1" colwidth="28pt" align="center"/>
<colspec colname="2" colwidth="35pt" align="center"/>
<colspec colname="3" colwidth="56pt" align="center"/>
<colspec colname="4" colwidth="56pt" align="char" char="."/>
<colspec colname="5" colwidth="42pt" align="center"/>
<tbody valign="top">
<row>
<entry>100</entry>
<entry>G</entry>
<entry>C</entry>
<entry>110</entry>
<entry>G</entry>
</row>
<row>
<entry>100</entry>
<entry>G</entry>
<entry>C</entry>
<entry>120</entry>
<entry>G</entry>
</row>
<row>
<entry>100</entry>
<entry>G</entry>
<entry>C</entry>
<entry>230</entry>
<entry>G</entry>
</row>
<row>
<entry>110</entry>
<entry>G</entry>
<entry>C</entry>
<entry>0891</entry>
<entry>P</entry>
</row>
<row>
<entry>110</entry>
<entry>G</entry>
<entry>C</entry>
<entry>0896</entry>
<entry>P</entry>
</row>
<row>
<entry>110</entry>
<entry>G</entry>
<entry>C</entry>
<entry>0911</entry>
<entry>P</entry>
</row>
<row>
<entry>200</entry>
<entry>G</entry>
<entry>C</entry>
<entry>220</entry>
<entry>G</entry>
</row>
<row>
<entry namest="1" nameend="5" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0248" num="0280">Table 13 below represents data in the relationship table <b>202</b> after the group move action <b>908</b>.</p>
<p id="p-0249" num="0281">
<tables id="TABLE-US-00014" num="00014">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" rowsep="1">TABLE 13</entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>Relationship Table After Group Move Actions 908</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="5">
<colspec colname="1" colwidth="28pt" align="center"/>
<colspec colname="2" colwidth="35pt" align="center"/>
<colspec colname="3" colwidth="56pt" align="center"/>
<colspec colname="4" colwidth="56pt" align="center"/>
<colspec colname="5" colwidth="42pt" align="center"/>
<tbody valign="top">
<row>
<entry/>
<entry/>
<entry/>
<entry/>
<entry>RELATED</entry>
</row>
<row>
<entry>I.D.</entry>
<entry>I.D. TYPE</entry>
<entry>RELATIONSHIP</entry>
<entry>RELATED I.D.</entry>
<entry>I.D. TYPE</entry>
</row>
<row>
<entry namest="1" nameend="5" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="5">
<colspec colname="1" colwidth="28pt" align="center"/>
<colspec colname="2" colwidth="35pt" align="center"/>
<colspec colname="3" colwidth="56pt" align="center"/>
<colspec colname="4" colwidth="56pt" align="char" char="."/>
<colspec colname="5" colwidth="42pt" align="center"/>
<tbody valign="top">
<row>
<entry>100</entry>
<entry>G</entry>
<entry>C</entry>
<entry>110</entry>
<entry>G</entry>
</row>
<row>
<entry>100</entry>
<entry>G</entry>
<entry>C</entry>
<entry>120</entry>
<entry>G</entry>
</row>
<row>
<entry>110</entry>
<entry>G</entry>
<entry>C</entry>
<entry>0891</entry>
<entry>P</entry>
</row>
<row>
<entry>110</entry>
<entry>G</entry>
<entry>C</entry>
<entry>0896</entry>
<entry>P</entry>
</row>
<row>
<entry>110</entry>
<entry>G</entry>
<entry>C</entry>
<entry>0911</entry>
<entry>P</entry>
</row>
<row>
<entry>200</entry>
<entry>G</entry>
<entry>C</entry>
<entry>220</entry>
<entry>G</entry>
</row>
<row>
<entry>200</entry>
<entry>G</entry>
<entry>C</entry>
<entry>230</entry>
<entry>G</entry>
</row>
<row>
<entry namest="1" nameend="5" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0250" num="0282">Table 14 below represents data in the relationship table <b>202</b> following the product move action <b>912</b>.</p>
<p id="p-0251" num="0283">
<tables id="TABLE-US-00015" num="00015">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" rowsep="1">TABLE 14</entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>Relationship Table After Product Move Action 912</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="5">
<colspec colname="1" colwidth="28pt" align="center"/>
<colspec colname="2" colwidth="35pt" align="center"/>
<colspec colname="3" colwidth="56pt" align="center"/>
<colspec colname="4" colwidth="56pt" align="center"/>
<colspec colname="5" colwidth="42pt" align="center"/>
<tbody valign="top">
<row>
<entry/>
<entry/>
<entry/>
<entry/>
<entry>RELATED</entry>
</row>
<row>
<entry>I.D.</entry>
<entry>I.D. TYPE</entry>
<entry>RELATIONSHIP</entry>
<entry>RELATED I.D.</entry>
<entry>I.D. TYPE</entry>
</row>
<row>
<entry namest="1" nameend="5" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="5">
<colspec colname="1" colwidth="28pt" align="center"/>
<colspec colname="2" colwidth="35pt" align="center"/>
<colspec colname="3" colwidth="56pt" align="center"/>
<colspec colname="4" colwidth="56pt" align="char" char="."/>
<colspec colname="5" colwidth="42pt" align="center"/>
<tbody valign="top">
<row>
<entry>100</entry>
<entry>G</entry>
<entry>C</entry>
<entry>110</entry>
<entry>G</entry>
</row>
<row>
<entry>100</entry>
<entry>G</entry>
<entry>C</entry>
<entry>120</entry>
<entry>G</entry>
</row>
<row>
<entry>110</entry>
<entry>G</entry>
<entry>C</entry>
<entry>0891</entry>
<entry>P</entry>
</row>
<row>
<entry>110</entry>
<entry>G</entry>
<entry>C</entry>
<entry>0896</entry>
<entry>P</entry>
</row>
<row>
<entry>200</entry>
<entry>G</entry>
<entry>C</entry>
<entry>220</entry>
<entry>G</entry>
</row>
<row>
<entry>200</entry>
<entry>G</entry>
<entry>C</entry>
<entry>230</entry>
<entry>G</entry>
</row>
<row>
<entry>120</entry>
<entry>G</entry>
<entry>C</entry>
<entry>0911</entry>
<entry>P</entry>
</row>
<row>
<entry namest="1" nameend="5" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0252" num="0284"><figref idref="DRAWINGS">FIG. 12</figref> illustrates an updated hierarchial structure of icons associated with groups after a user performs a drag-and-drop operation as illustrated in <figref idref="DRAWINGS">FIG. 9</figref>. In <figref idref="DRAWINGS">FIG. 9</figref>, the icon <b>906</b> labeled ‘shoes’ is illustrated as being subordinate to an icon <b>922</b> labeled ‘clothing.’ Dragging the icon <b>906</b> to a new location <b>916</b> and releasing the mouse button terminates the relationship between the shoes group and the clothing group and, creates a new relationship between the shoes group and the accessories group. Thus, <figref idref="DRAWINGS">FIG. 12</figref> illustrates the resulting relationship wherein an icon <b>1202</b> labeled ‘shoes’ is subordinate to an icon <b>916</b> labeled “accessories.”</p>
<p id="p-0253" num="0285">g. Adding New Groups and New Products</p>
<p id="p-0254" num="0286"><figref idref="DRAWINGS">FIG. 13</figref> illustrates portions of the store design user interface <b>760</b>, including a command area <b>770</b>, a new group dialogue box <b>1301</b>, and a new product dialogue box <b>1320</b>. The command area <b>770</b> includes a new group command <b>772</b> and a new product command <b>774</b>. A user invokes the new group command <b>772</b> to enter information about a new group and invokes the new product command <b>774</b> to enter information about a new product.</p>
<p id="p-0255" num="0287"><figref idref="DRAWINGS">FIG. 13</figref> illustrates fields and command buttons of a new group dialogue box <b>1301</b> which prompts a user for information about a new group. The new group dialogue box <b>1301</b> includes a merchant ID field <b>1302</b>, a Group_ID field <b>1304</b>, a Group_Name field <b>1306</b>, a template file field <b>1308</b>, a description field <b>1310</b>, and a small image field <b>1312</b>. Also included in the new group dialogue box <b>1301</b> are a ‘Cancel’ button <b>1314</b> and an ‘Okay’ button <b>1316</b>.</p>
<p id="p-0256" num="0288">The new group dialogue box <b>1301</b> is displayed in response to selection of the new group command <b>772</b>. A merchant or store designer enters information into the fields of the new group dialogue box, except for the merchant ID field <b>1302</b> and the Group_ID field <b>1304</b>, for which the Merchant Workbench generates field values automatically. The value of the merchant ID field <b>1302</b> is held constant for all groups offered by one merchant. The value generated for the Group_ID field <b>1304</b>, however, is a unique value (i.e., no two groups of products offered by a merchant have the same Group_ID value).</p>
<p id="p-0257" num="0289">A user (such as a merchant operating an electronic store) enters a group name value in the Group_Name field <b>1306</b>, and enters the name of an HTML template file in the template file field <b>1308</b>. The HTML template file is thereby associated with the group being created. A merchant describes the new group by entering description text in the description field <b>1310</b>. Also, a merchant can associate a graphical image with the new group by entering the name of a graphic file in the small image field <b>1312</b>.</p>
<p id="p-0258" num="0290">A user selects the cancel button <b>1314</b> to abort the creation of a new group after invoking the new group command <b>772</b> or entering information into the new group dialogue box <b>1301</b>.</p>
<p id="p-0259" num="0291">A user selects the okay button <b>1316</b> to finalize entry of values in the group name field <b>1306</b>, template file field <b>1308</b>, description field <b>1310</b>, and large image field <b>1312</b>. When the okay button <b>1316</b> is selected, computer instructions associated with the okay button <b>1316</b> perform steps to create a new data record in the group table <b>206</b>.</p>
<p id="p-0260" num="0292"><figref idref="DRAWINGS">FIG. 14</figref> illustrates steps performed to add a new data record to the group table <b>206</b>. In a step <b>1402</b>, the data values entered in the new group dialogue box <b>1301</b> are organized and formatted as parameter values to be included in a database command. In a next step <b>1404</b>, a database command is generated which is designed to create a new data record in the group table <b>206</b>. Information required to add a new record to the group table <b>206</b> includes a current merchant ID, a new group ID, a new group name, a group description, a template file name, and a small image name. The following is one example of an SQL command to add a record to the group table <b>206</b>:
<ul id="ul0018" list-style="none">
    <li id="ul0018-0001" num="0000">
    <ul id="ul0019" list-style="none">
        <li id="ul0019-0001" num="0293">Insert into Groups</li>
        <li id="ul0019-0002" num="0294">Values(CurrentMerchantID, NEWGROUPID, NewGroupName, ‘N’,
        <ul id="ul0020" list-style="none">
            <li id="ul0020-0001" num="0295">Description, Today'sDate, Today'sDate, “, “, “, “,</li>
            <li id="ul0020-0002" num="0296">TemplateFileName, SmallImageName)</li>
        </ul>
        </li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0261" num="0297">In a further step <b>1406</b>, the Send_Message routine is called to transmit the database command to the product information database <b>116</b>.</p>
<p id="p-0262" num="0298">In a next step <b>1408</b>, a result message is received from the Web server <b>106</b> indicating the success or failure of the database command. The result message is passed as a parameter to a Message_Box routine which, in the step <b>1408</b>, displays the result message in a read only dialogue box on the user's computer screen. Such Message_Box routines are known in the art. In a further step <b>1410</b>, instructions associated with the okay button <b>1316</b> examine the result message to determine whether a data record was successfully added to the group table <b>206</b>. If not, then, in a further step <b>1412</b>, the instructions terminate. If so, then, in a next step <b>1414</b>, the instructions of the okay command <b>1316</b> determine whether the user selected a parent group.</p>
<p id="p-0263" num="0299">For convenience in organizing the hierarchy of groups of products of an electronic store, a user selects an existing group before invoking the new group command <b>772</b> to create a parent/child relationship between the selected group and the new group respectively. An existing group is selected, for example, by positioning a mouse pointer over an icon associated with a group and clicking a mouse button once. Thus, when creating a new group, a selected existing group becomes a parent group to the new group.</p>
<p id="p-0264" num="0300">If, in the step <b>1414</b>, it is determined that a parent group was not selected, the instructions of the okay button <b>1316</b> terminate in the step <b>1412</b>. If, however, a parent group was selected, then, in a next step <b>1416</b>, a database command is generated that is designed to add a new record to the relationship table <b>202</b>. The database command specifies, for example, a Related_ID field equal to the ID value generated for the new group, a Relationship field equal to ‘C’ (e.g., ‘contained in’), and an ID field equal to the Group_ID of the parent group.</p>
<p id="p-0265" num="0301">Next, in a further step <b>1418</b>, the Send_Message routine is called to transmit the database command to the product information database <b>116</b>. If, in a next step <b>1420</b>, it is determined by examining a result message that a record was successfully added to the relationship table <b>202</b>, then the instructions of the okay button <b>1316</b> terminate in a further step <b>1422</b>. If, however, the record was not successfully added, then in a next step <b>1424</b>, it is determined whether a fatal error occurred or whether three consecutive non-fatal errors occurred. If so, then the instructions of the okay button <b>1316</b> terminate in the step <b>1422</b>. If not, then the step <b>1418</b> is repeated as necessary.</p>
<p id="p-0266" num="0302"><figref idref="DRAWINGS">FIG. 13</figref> illustrates fields and command buttons of a new product dialogue box <b>1320</b> which prompts a user for information about a new product. The new product dialogue box <b>1320</b> is displayed in response to selection of the new product command <b>774</b>. The new product dialogue box <b>1320</b> includes a merchant ID field <b>1322</b>, a Product_ID field <b>1324</b>, a Product_Name field <b>1326</b>, as well as fields for unit price <b>1328</b>, unit size <b>1330</b>, effective date <b>1332</b>, expiration date <b>1334</b>, template file <b>1336</b>, description <b>1338</b> and short description <b>1340</b> fields, a detail field <b>1342</b>, and a large image field <b>1344</b> and a small image field <b>1346</b>. The new product dialogue box <b>1320</b> also includes a cancel button <b>1348</b> and an okay button <b>1350</b>.</p>
<p id="p-0267" num="0303">The Merchant Workbench automatically generates a value for the merchant ID field <b>1322</b> which is constant for every product offered by a particular merchant. A merchant enters a Product_ID value <b>1324</b> and a Product_Name value <b>1326</b>. The merchant also enters a unit price <b>1328</b> and a unit size value <b>1330</b>. The merchant determines the effective time period for the product by entering a value in the effective date field <b>1332</b> and determine when a product will expire by entering a date in the expiration date field <b>1334</b>.</p>
<p id="p-0268" num="0304">A merchant associates an HTML template file with the new product by entering the name of such a template file in the template file field <b>1336</b>. A merchant describes a new product by entering a description in the description field <b>1338</b> and by entering a shorter description in the short description field <b>1340</b>. A merchant enters detail information about a new product by entering a value in the detail field <b>1342</b>. Also, by entering the name of a graphic file in the large image field <b>1344</b>, a merchant associates a picture of a product with the other information about the new product. Also, a merchant associates a small picture or thumbnail-size picture of a product with the new product by typing the name of a graphic file comprising a small illustration in the small image field <b>1346</b>.</p>
<p id="p-0269" num="0305">A merchant aborts the creation of a data record for a new product by selecting the cancel button <b>1348</b>. When a merchant is satisfied that the fields accurately reflect the information to associate with a new product, the merchant finalizes the entries by selecting the okay button <b>1350</b>. Computer instructions associated with the okay button <b>1350</b> cause a data record representing a new product to be added to the products table <b>204</b> of the product information database <b>116</b>.</p>
<p id="p-0270" num="0306">The steps performed by the computer instructions of the okay button <b>1350</b> are nearly identical to the steps performed by the computer instructions of the okay button <b>1316</b> as illustrated in <figref idref="DRAWINGS">FIG. 14</figref>, and only two steps differ. The step <b>1404</b> differs when instructions of the okay button <b>1350</b> are invoked in that a generated database command is designed to add a new data record to the product table <b>204</b>, rather than the group table <b>206</b>. The data record added to the product table <b>204</b> includes the information entered into a new product dialogue box. Also, the step <b>1416</b> differs in that the database command is designed to associate a new product with a parent group, rather than associating a new group with a parent group. Thus, a new record added to the relationship table <b>202</b> includes a Related_ID field equal to the Product_ID of the new product, a Relationship field of ‘C’ (i.e., contains) and an ID field equal to the Group_ID of the parent group.</p>
<p id="p-0271" num="0307">Another type of relationship can be created to support cross sales. A cross sale occurs when a consumer buys a product of one type and also decides to buy a different, but related product (e.g., a consumer buying a pair of shoes also buys socks, or a consumer buying toothpaste also buys a toothbrush, or a consumer buys french fries along with a hamburger). To facilitate such cross sales, a merchant entering information about a new product can select a cross-sales option, resulting in the presentation of a list of existing products. The merchant can then select one or more related products from a list of existing products. Once one or more related products have been selected and the merchant clicks the okay button <b>1350</b>, a new record is added to the relationship table for each product selected. Each such record has a Related_ID field equal to the Product_ID of the new product, a Relationship field value of ‘CS’ (i.e., cross sale) and an ID field equal to the related product selected. Techniques for using such cross sale relationships include automatically generating a message to a consumer who has just ordered a particular product, such message displaying a list of related products and asking the consumer if the consumer would like to order one of the listed products.</p>
<p id="p-0272" num="0308">One of ordinary skill will appreciate that validation is performed on the fields entered into either a new group dialogue box <b>1301</b> or a new product dialogue box <b>1320</b>. Such validation includes determining, for example, whether values entered to represent HTML template files correspond with existing files, whether entered graphic files exist, and whether date or price values are properly formatted. Furthermore, one of ordinary skill understands that Merchant_ID values, Group_ID values, and Product_ID values may be generated automatically or entered by a user.</p>
<p id="p-0273" num="0309">h. Updating Information about Groups and Products</p>
<p id="p-0274" num="0310">To update information about groups or products, a user double-clicks an element (e.g., an icon or text string) displayed in the right pane <b>742</b> (<figref idref="DRAWINGS">FIG. 7</figref>). To update information about a group, a user double-clicks an icon or text string associated with a group, and to update information about a product, a user double-clicks an icon or text string representing a product.</p>
<p id="p-0275" num="0311"><figref idref="DRAWINGS">FIG. 15</figref> illustrates steps performed to update information about a group or a product. In a first step <b>1502</b>, a double-click event is recognized in the right pane <b>742</b>. In a next step <b>1504</b>, a DblClk_Event_Handler begins running in response to the double-click event. In a further step <b>1506</b>, the DblClk_Event_Handler accesses the Group_ID value or the Product_ID value associated with the element that was double-clicked by the user. It is known in the art to access a data structure associated with an icon when a user clicks the icon using a mouse pointer. One of ordinary skill will appreciate that such a data structure contains a value, such as a Group_ID or Product_ID, by which the data structure is distinguished from other such structures.</p>
<p id="p-0276" num="0312">In a step <b>1508</b>, the DblClk_Event_Handler generates a database command designed to retrieve all fields of the data record having an ID value equal to the Group_ID value or Product_ID value associated with the double-clicked element. An example of a command to retrieve all fields of a group record is “Select * from Groups where Groups.Group_ID=SelectedGroupID”, and an example of a command to retrieve all fields of a product record is “Select * from Products where Products.Product_ID=SelectedProductID”. In a next step <b>1510</b>, the DblClk_Event_Handler calls the Send_Message routine to transmit the database command to the product information database <b>116</b>.</p>
<p id="p-0277" num="0313">In a further step <b>1512</b>, the DblClk_Event_Handler receives a result set in name/value pair format in the manner described in relation to <figref idref="DRAWINGS">FIG. 5</figref>. The result set includes values for all the fields of a product data record or a group data record, depending on whether the user clicked an element representing a product or an element representing a group.</p>
<p id="p-0278" num="0314">In the step <b>1512</b>, the field values of the result set are used to fill in fields of a dialogue box. Again, the dialogue box includes all the fields of a product data record if a user double-clicked a product element, or the dialogue box contains all the fields of a group data record if the user double-clicked a group element. In a next step <b>1514</b>, the DblClk_Event_Handler displays the dialogue box on the graphical user interface of the enhanced web browser <b>112</b>.</p>
<p id="p-0279" num="0315">In a next step <b>1516</b>, a user edits the fields of the displayed dialogue box. In a further step <b>1518</b>, the DblClk_Event_Handler determines whether the user selects the ‘okay’ button or the ‘cancel’ button. If the user selects the cancel button, then in a next step <b>1520</b> the DblClk_Event_Handler terminates. If, however, in the step <b>1518</b>, the DblClk_Event_Handler determines that the user selects the okay button, then, in a farther step <b>1522</b>, the DblClk_Event_Handler generates a database command to store the updated field values of the dialogue box as modified by the user. Then, in a further step <b>1524</b>, the database command to store the updated field values is transmitted to the product information database <b>116</b>. One of ordinary skill in the art will appreciate that error checking is performed to verify the successful result of the step <b>1510</b> and the step <b>1524</b>.</p>
<p id="p-0280" num="0316">In a step <b>1526</b>, the DblClk_Event_Handler terminates. It will be thus understood that the elements of the right pane <b>742</b> act as hyperlinks which, when double-clicked, enable store designers to examine and modify fielded data values associated with any product or group.</p>
<p id="p-0281" num="0317">i. General Steps to Construct Electronic Store</p>
<p id="p-0282" num="0318"><figref idref="DRAWINGS">FIG. 16</figref> illustrates high-level steps performed to integrate inventory information in a computer database with web pages of an electronic store. In a first step <b>1602</b>, a user creates data records representing groups (e.g., categories of products). A user creates a group data record by filling in the fields of a new group dialogue box <b>1301</b>. In a next step <b>1604</b>, a user creates data records representing products. To create a new product data record a user fills in the fields of a new product dialogue box <b>1320</b>.</p>
<p id="p-0283" num="0319">In an additional step <b>1606</b>, a user organizes the hierarchy of groups and products. To organize the hierarchy of groups and products, a user manipulates elements, such as icons or text strings, of the left pane <b>740</b> or right pane <b>742</b> of the store design user interface <b>760</b>, as described in relation to <figref idref="DRAWINGS">FIG. 9</figref>.</p>
<p id="p-0284" num="0320">In a further step <b>1608</b>, the user uses an HTML authoring tool to prepare HTML template pages that will ultimately display information about groups or products to a consumer. The present invention is not limited by any particular HTML authoring tool. A template page typically includes a background color or pattern and a textual title and may include additional fixed information such as a logo or a description of a group of products.</p>
<p id="p-0285" num="0321">The HTML authoring tool produces a template file (i.e., a simple ASCII text file), representing a template page. Each such template file includes HTML formatting codes (or tags), text content, and references to the product information database <b>116</b> which can be resolved to extract information about a group or product.</p>
<p id="p-0286" num="0322">In a further step <b>1610</b>, a user embeds database references within template files. Each such database reference accomplishes two tasks: (1) extracts information about a product or group from the product information database <b>116</b>, including the name of the product or group and the name of a template file associated with the product or group, and (2) translates the result set into HTML coded text. One of ordinary skill will understand that many alternative methods exist to embed such references within template files and that the present invention is not limited by a method of embedding a database reference in a template file.</p>
<p id="p-0287" num="0323">According to one embodiment of the present invention, the user embeds a script of commands which specifies both a database query to perform, and a translation process to convert the query result into HTML code. The following is an example of such a script:</p>
<p id="p-0288" num="0324">
<tables id="TABLE-US-00016" num="00016">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>&lt;% Set list = CreateObject(“Recordset”)</entry>
</row>
<row>
<entry/>
<entry>  list.GedData “SELECT * FROM Products” %&gt;</entry>
</row>
<row>
<entry/>
<entry>  &lt;TABLE BORDER=0 CELLPADDING=2&gt;</entry>
</row>
<row>
<entry/>
<entry>  &lt;% If Not EmptyRecordset Then</entry>
</row>
<row>
<entry/>
<entry>   Do</entry>
</row>
<row>
<entry/>
<entry>     If EmptyRecordset Then Exit Do</entry>
</row>
<row>
<entry/>
<entry>     If Not FirstPass Then</entry>
</row>
<row>
<entry/>
<entry>       list.Movenext</entry>
</row>
<row>
<entry/>
<entry>   Else</entry>
</row>
<row>
<entry/>
<entry>       FirstPass = False</entry>
</row>
<row>
<entry/>
<entry>   End If</entry>
</row>
<row>
<entry/>
<entry>   If list.EOF Then Exit Do</entry>
</row>
<row>
<entry/>
<entry>   RecordsProcessed = RecordsProcessed + 1</entry>
</row>
<row>
<entry/>
<entry>   %&gt;</entry>
</row>
<row>
<entry/>
<entry>  &lt;TR&gt;</entry>
</row>
<row>
<entry/>
<entry>   &lt;TD VALIGN=TOP&gt; &lt;% = RowCount %&gt; &lt;/TD&gt;</entry>
</row>
<row>
<entry/>
<entry>   &lt;TD VALIGN=TOP&gt;</entry>
</row>
<row>
<entry/>
<entry>      &lt;A  HREF=&lt;%  SURL(listElemTemplate,</entry>
</row>
<row>
<entry/>
<entry>      “product_id”,</entry>
</row>
<row>
<entry/>
<entry>       Cstr(list(“product_id”)) ) %&gt;”&gt;&lt;% list(“name”)</entry>
</row>
<row>
<entry/>
<entry>      %&gt;</entry>
</row>
<row>
<entry/>
<entry>      &lt;/A&gt;</entry>
</row>
<row>
<entry/>
<entry>   &lt;/TD&gt;</entry>
</row>
<row>
<entry/>
<entry>   &lt;TD VALIGN=TOP&gt; &lt;% list(”name”) %&gt; &lt;[/TD&gt;</entry>
</row>
<row>
<entry/>
<entry>   &lt;TD  VALIGN=TOP  ALIGN=RIGHT&gt;  &lt;%</entry>
</row>
<row>
<entry/>
<entry>(CLng(list(”price”))) %&gt;</entry>
</row>
<row>
<entry/>
<entry>   &lt;/TD&gt;</entry>
</row>
<row>
<entry/>
<entry>  &lt;/TR&gt;</entry>
</row>
<row>
<entry/>
<entry>    &lt;%</entry>
</row>
<row>
<entry/>
<entry>   Loop</entry>
</row>
<row>
<entry/>
<entry>  End If %&gt;</entry>
</row>
<row>
<entry/>
<entry>  &lt;TABLE&gt;</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0289" num="0325">Thus, a script embedded in a template file is accessed and executed each time a consumer requests a Web page based on that template file. The Web server processes the script to extract information from the product information database and merges the extracted information with the template file to construct the finished Web page that is sent to the requesting consumer.</p>
<p id="p-0290" num="0326">In an additional step <b>1611</b>, a user places customize references in template files. Placement of customize references in template files facilitates automatic adjustment of Web page content based on shopping behavior of particular consumers. Thus, for example, if a consumer routinely browses a certain favorite area (i.e., a particular Web page) of an electronic store, the electronic store can automatically modify its structure by including a hyperlink to the consumer's favorite area on all Web pages requested by that consumer.</p>
<p id="p-0291" num="0327">A store designer uses an HTML authoring tool in the step <b>1611</b> to embed a customize reference in a template file associated with that Web page. A customize reference represents one or more queries to perform against a traffic database. The traffic database stores information about particular consumers, including, for example, the date and time each Web page of an electronic store was visited, and the date, time, and content of product orders.</p>
<p id="p-0292" num="0328">A variety of methods exist for embedding a customize reference in a template file. According to one embodiment of the present invention, a script of commands is embedded in a template file specifying at least one query to perform on the traffic database, comparison of the query result against preferred customization rules, and, if customization is warranted, a translation to perform on the query result to convert the result to HTML format. The following is an example of a script which places on a page a link to the last product viewed by the particular consumer:</p>
<p id="p-0293" num="0329">
<tables id="TABLE-US-00017" num="00017">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>  &lt;% Set list = CreateObject(“Recordset”)</entry>
</row>
<row>
<entry>  list.GetData  “SELECT  Product_ID,  Product_Name,</entry>
</row>
<row>
<entry>DateLastViewed</entry>
</row>
<row>
<entry>  FROM Traffic, Products where Shopper_ID=CurrentShopperID</entry>
</row>
<row>
<entry>and</entry>
</row>
<row>
<entry>  Traffic.Product_ID=Products.Product_ID ORDER BY</entry>
</row>
<row>
<entry>  Traffic.DateLastViewed”</entry>
</row>
<row>
<entry>  If Not EmptyRecordset Then %&gt;</entry>
</row>
<row>
<entry>      &lt;A  HREF=  “&lt;%  =SURL(listElemTemplate,</entry>
</row>
<row>
<entry>    “product_id”,</entry>
</row>
<row>
<entry>        Cstr(list(“product_id”)))    %&gt;”&lt;%</entry>
</row>
<row>
<entry>      list(”Product_Name”) %&gt;</entry>
</row>
<row>
<entry>      &lt;/A&gt;</entry>
</row>
<row>
<entry>  &lt;% End If %&gt;</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0294" num="0330">Thus, whenever a consumer requests a Web page based on a template file, the Merchant Workbench processes any customize command scripts to extract stored shopping patterns for the particular consumer, matches the stored patterns against customization rules (i.e., rules for determining which pages or products are preferred by a particular consumer), and, if a customization threshold is met, adjusts the content of the Web page to make shopping more convenient to the particular consumer.</p>
<p id="p-0295" num="0331">In an additional step <b>1612</b>, a store designer enters rules for determining which pages and which products are preferred by a particular consumer. In the step <b>1612</b>, the store designer selects the preferred rules command <b>778</b> of the store design user interface <b>760</b>. A Preferred_Rules routine accesses a preferred rules file. The preferred rules file includes two records: the first record comprises a collection of paired values representing preferred page rules, the second record comprises a collection of paired values representing preferred product rules. One of ordinary skill appreciates that there are many methods for storing paired values in a record of a file and the present invention is not limited by any such method.</p>
<p id="p-0296" num="0332">Each paired value of the preferred page rules includes a first value representing a minimum number of accesses to a particular page by a particular consumer and a second value representing a period of time. A preferred page rule is satisfied when a consumer accesses a particular page at least as many times as specified by the first value within the time period specified by the second value. It will be appreciated by one of ordinary skill that a consumer's preference for a Web page may be shown by criteria other than a number of accesses over a period of time. For example, a consumer's preference for a Web page may be shown by the length of time (e.g., in minutes or hours) the consumer has spent accessing a Web page. This length of time may be monitored both during a single shopping session at an electronic store as well as across all shopping sessions by the consumer.</p>
<p id="p-0297" num="0333">Each paired value of the preferred product rules includes a first value representing a minimum number of products ordered and a second value representing a period of time. A preferred product rule is satisfied when a consumer orders a number of units of a product as least as large as the first value within the time period specified by the second value. It will be understood that a consumer's orders for products may show a preference not only for products, but also for groups (or categories) of products. Thus, a preferred group rule may include, for example, a first value representing a minimum number of products ordered from a group and a second value representing a period of time.</p>
<p id="p-0298" num="0334">The Preferred_Rules routine generates a preferred rules dialogue box and displays the dialogue box on the store design user interface <b>760</b>. The preferred rules dialogue box displays a preferred page list box comprising a list of entries. Each entry includes two values of a preferred page rule. The preferred rules dialogue box also displays a preferred product list box comprising a list of entries. Each entry includes two values of a preferred product rule. The entries in the preferred page and preferred product list boxes are extracted from the preferred rules file. It is known in the art to access values in a file and generate a list box of entries where each entry corresponds to a value from the file.</p>
<p id="p-0299" num="0335">The store designer, in the step <b>1612</b>, modifies entries of or adds entries to the preferred page and preferred product list boxes as desired. When the store designer selects an ‘okay’ button of the preferred rules dialogue box, the Preferred_Rules routine saves the entries of the preferred page list box as paired values in the first record of the preferred rules file and saves the entries of the preferred product list box as paired values in the second record of the preferred rules file.</p>
<p id="p-0300" num="0336">One of ordinary skill will understand that many alternative methods exist for updating values stored in a file, and therefore that the present invention is not limited by any method of modifying the paired values of preferred rules.</p>
<p id="p-0301" num="0337">In a next step <b>1613</b>, a user associates template files with products and groups. A user associates a template file with a product by entering the name of the template file in a template file field of either the new product dialogue box or the edit product dialogue box and then selecting the ‘okay’ button. A user associates a template file with a group by entering the name of the template file into the template field of the new group dialogue box or the edit group dialogue box and then selecting the ‘okay’ button. In a further step <b>1614</b>, a user repeats any of the steps <b>1602</b>-<b>1612</b> as needed to specify the inventory of an electronic store and to organize its presentation.</p>
<p id="p-0302" num="0338">B. Operation of an Electronic Store</p>
<p id="p-0303" num="0339">An Internet-based electronic store operates by receiving and servicing requests for Web pages from consumers using standard Web browsers. Information content of a requested Web page is extracted from a product information database <b>116</b> immediately after the Web server <b>106</b> receives the request for the page. The extracted content is formatted into HTML-coded text and merged with a template file to create an HTML page. The Web server <b>106</b> then transmits the page to the requesting consumer.</p>
<p id="p-0304" num="0340"><figref idref="DRAWINGS">FIG. 17</figref> illustrates steps performed by the Web server <b>106</b> to retrieve, construct, and transmit a requested web page to a consumer. In a first step <b>1702</b>, a consumer using a standard Web browser <b>102</b> accesses an electronic store by requesting a Web page of the electronic store. In a next step <b>1704</b>, the Web server <b>106</b> receives the consumer's request and examines the URL of the request. In the step <b>1704</b>, the Web server determines that the URL specifies the name of a template file. One of ordinary skill in the art understands that a URL commonly specifies the name of a file.</p>
<p id="p-0305" num="0341">In a further step <b>1706</b>, the Web server <b>106</b> invokes an HTML page engine <b>126</b>. In a next step <b>1708</b>, the HTML page engine <b>126</b> opens the template file specified in the URL, and scans the template file for query scripts. It will be understood that a query script is one of many possible database references that can be included in a template file. One of ordinary skill in the art understands scanning a text file for a text string such as “&lt;QUERY” (i.e., or other unique character string designating the beginning of a query script). In an additional step <b>1710</b>, the HTML page engine <b>126</b> determines whether a query script exists in the template file. If so, then in a further step <b>1712</b>, the HTML page engine <b>126</b> uses a database query in the query script to query the product information database <b>116</b>. Generally, such a query extracts one or more group or product data records that are subordinate to a group represented by a hyperlink selected by a consumer. An example of such a database query is:
<ul id="ul0021" list-style="none">
    <li id="ul0021-0001" num="0000">
    <ul id="ul0022" list-style="none">
        <li id="ul0022-0001" num="0342">list.GetData “SELECT*FROM Products”</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0306" num="0343">In a preferred embodiment, the HTML page engine <b>126</b> passes the query in a generic form to a relational database server <b>114</b>, which translates the query into a specific form and queries the product information database <b>116</b>.</p>
<p id="p-0307" num="0344">In a next step <b>1714</b>, the HTML page engine <b>126</b> receives a result set generated by the query and translates the result set into HTML-coded results. Those of ordinary skill are familiar with such result sets. The HTML page engine <b>126</b> translates each data record represented in the result set into HTML code which, for example, generates a hyperlink when processed by a Web browser <b>102</b>. The following is an example of such HTML coding:
<ul id="ul0023" list-style="none">
    <li id="ul0023-0001" num="0000">
    <ul id="ul0024" list-style="none">
        <li id="ul0024-0001" num="0345">&lt;A HREF=“http:://www.server.com/commerce/store/Product.html?group_id=2 3”&lt; Sedans&lt;/A&gt;</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0308" num="0346">In a further step <b>1716</b>, the HTML page engine <b>126</b> makes a working copy of the template file, removes the query script from the working copy, and replaces the query script with the HTML coded results. In an additional step <b>1718</b>, the HTML page engine <b>126</b> loops back to the prior step <b>1710</b> to determine whether a next query script exists in the template file. If in the step <b>1710</b>, the HTML page engine <b>126</b> determines that no additional query scripts exist in the template file, then in a step <b>1720</b>, the HTML page engine <b>126</b> passes the working copy of the template file, which is now fully HTML compliant, to the Web server <b>106</b>, and the HTML page engine <b>126</b> then terminates. In a further step <b>1722</b>, the Web server <b>106</b> transmits the HTML compliant file to the Web browser <b>102</b> over the World Wide Web <b>104</b>.</p>
<p id="p-0309" num="0347"><figref idref="DRAWINGS">FIG. 18</figref> represents an example of steps performed to construct a Web page <b>20</b> requested by a consumer. A computer <b>1802</b> running a standard Web browser <b>102</b> displays a Web page <b>1804</b> at a time t<b>1</b>. The Web page <b>1804</b> includes a hyperlink <b>1806</b> labelled “Automotive”. A consumer selects the hyperlink <b>1806</b> labelled “Automotive,” and the Web browser <b>102</b> generates a message requesting a Web page related to the “Automotive” hyperlink <b>1806</b>. The request message is transmitted via the World Wide Web <b>1807</b> to the Web server <b>106</b>.</p>
<p id="p-0310" num="0348">The Web server <b>106</b> receives the request message and examines a URL <b>1808</b> embedded in the request message. The Web server <b>106</b> scans the URL <b>1808</b> and recognizes that a template file <b>1810</b> named “Auto.html” is requested. The Web server <b>106</b> then invokes an HTML page engine process.</p>
<p id="p-0311" num="0349">The HTML page engine opens the template file <b>1810</b> named “Auto.html”. The template file <b>1810</b> is a text file <b>1812</b>. The text file <b>1812</b> includes ASCII text, HTML tags, and query scripts. The HTML page engine scans the text file <b>1812</b>, searching for query scripts. The HTML page engine finds a query script <b>1814</b>. The query script <b>1814</b> specifies that a query be performed against the product information database <b>116</b> to determine all groups or products related to (e.g., contained in) an automotive group having a Group_ID <b>1816</b> of 60004.</p>
<p id="p-0312" num="0350">The query is then posed against the relationship table <b>202</b> of the product information database <b>116</b>. As illustrated in <figref idref="DRAWINGS">FIG. 18</figref>, three rows <b>1818</b>, <b>1820</b>, <b>1822</b> of the relationship table <b>202</b> have a “contains” relationship with a group having the ID 60004. Each of the rows <b>1818</b>, <b>1820</b>, <b>1822</b> satisfying the query respectively includes a Rel_ID value <b>1824</b>, <b>1826</b>, <b>1828</b> (e.g., related ID value) identifying a group related to the automotive group.</p>
<p id="p-0313" num="0351">To generate a result set from the query, the Rel _ID values <b>1824</b>, <b>1826</b>, <b>1828</b> are used to locate data records in the group table <b>206</b>. A name and a template file name are extracted from each located data record in the group table <b>206</b>. Thus, as illustrated in <figref idref="DRAWINGS">FIG. 18</figref>, a name of “Sedans” and a template file name of “Sedans.html” are extracted from a data record <b>1830</b> having an ID value 60011. Likewise, the names “Sports Car” and “Sport Utility” and template file names “Sportsc.html” and “Sportu.html” are extracted from data records <b>1832</b>, <b>1834</b> having ID values 60012 and 60013 respectively. An example result set is the following:
<ul id="ul0025" list-style="none">
    <li id="ul0025-0001" num="0352">Sedans, sedans.html</li>
    <li id="ul0025-0002" num="0353">Sport car, sportsc.html</li>
    <li id="ul0025-0003" num="0354">Sport Utility, Sportu.html</li>
</ul>
</p>
<p id="p-0314" num="0355">The HTML page engine formats the result set into an HTML coded result set. The following is an example of an HTML coded result set:
<ul id="ul0026" list-style="none">
    <li id="ul0026-0001" num="0356">&lt;A HREF=“/web/sedans.html”&gt;Sedans&lt;/A&gt;</li>
    <li id="ul0026-0002" num="0357">&lt;A HREF=“/web/sportsc.html”&gt;Sports Car&lt;/A&gt;</li>
    <li id="ul0026-0003" num="0358">&lt;A HREF=“/web/sportu.html”&gt;Sport Utility&lt;/A&gt;</li>
</ul>
</p>
<p id="p-0315" num="0359">The HTML page engine then removes the query script <b>1814</b> from the text file <b>1812</b> and replaces it with the HTML coded result set <b>1836</b>. After the replacement, the text file is an HTML text file <b>1838</b>, compliant with the HTML coding standard.</p>
<p id="p-0316" num="0360">Then the HTML text file <b>1838</b> is transmitted by the Web server <b>106</b> to the computer <b>1802</b>. The HTML text file is interpreted by the Web browser <b>102</b> to generate a Web page <b>1840</b> displayed at a time t<b>2</b> after time t<b>1</b>. The HTML coded result set is interpreted by the Web browser <b>102</b> as three hyperlinks <b>1842</b>, <b>1844</b>, <b>1846</b> on the displayed Web page <b>1840</b>.</p>
<p id="p-0317" num="0361"><figref idref="DRAWINGS">FIG. 19</figref> represents a further example of steps performed to construct a Web page requested by a consumer. The Web page <b>1840</b> is displayed by the computer <b>1802</b> at a time t<b>2</b>. The consumer selects a hyperlink <b>1902</b> labelled “Sedans”, and the Web browser <b>102</b> running on the computer <b>1802</b> transmits a message requesting a Web page to the Web server <b>106</b>. The Web server <b>106</b> receives the request message and recognizes that a template file <b>1904</b> named “sedans.html” is specified in a URL <b>1906</b> of the request message.</p>
<p id="p-0318" num="0362">The Web server <b>106</b> invokes the HTML page engine which opens the template file <b>1904</b>. The referenced template file <b>1904</b> is a text file <b>1908</b>. The HTML page engine searches the text file <b>1908</b> for query scripts. The HTML page engine finds a query script <b>1910</b> specifying a query for products or groups related to an ID) of 60011.</p>
<p id="p-0319" num="0363">The query is then posed against the relationship table <b>202</b> of the product information database <b>116</b>. Three data records <b>1912</b>, <b>1914</b>, <b>1916</b> are retrieved which have a “contains” (i.e., contained in) relationship to the group having an ID) of 60011 (e.g., the sedans group). The data record <b>1912</b> specifies a Rel_ID) of 60033 representing another group. Thus, the group table <b>206</b> is searched to locate a data record <b>1918</b> having an ID of 60033 and, when the data record <b>1918</b> is located, the name “more sedans” and the template file name “msedans.html” are extracted and stored in a result set.</p>
<p id="p-0320" num="0364">The two other data records <b>1914</b>, <b>1916</b> have Rel_ID values P0121 and P0122 both identifying data records of the product table <b>204</b>. Accordingly, two data records <b>1920</b>, <b>1922</b> are retrieved from the product table <b>204</b> having respective ID values P0121 and P0122. The name “Honda Accord” and the template file name “sedancarha.html” are extracted from one data record <b>1920</b> of the product table <b>204</b>, and the name “Toyota Camry” and the template file name “sedancartc.html” are extracted from another data record <b>1922</b>. The following is an example result set:
<ul id="ul0027" list-style="none">
    <li id="ul0027-0001" num="0365">More Sedans, msedans.html</li>
    <li id="ul0027-0002" num="0366">Honda Accord, sedancarha.html</li>
    <li id="ul0027-0003" num="0367">Toyota Camry, sedancartc.html</li>
</ul>
</p>
<p id="p-0321" num="0368">The HTML page engine receives the result set and translates it into an HTML coded result set. The following is an example of such an HTML coded result set:
<ul id="ul0028" list-style="none">
    <li id="ul0028-0001" num="0369">&lt;A HREF=“/web/msedans.html”&gt;More Sedans&lt;/A&gt;</li>
    <li id="ul0028-0002" num="0370">&lt;A HREF=“/web/sedancarha.html”&gt;Honda Accord&lt;/A&gt;</li>
    <li id="ul0028-0003" num="0371">&lt;A HREF=“/web/sedancartc.html”&gt;Toyota Camry&lt;/A&gt;</li>
</ul>
</p>
<p id="p-0322" num="0372">The HTML page engine creates an HTML text file <b>1924</b> by removing the query script <b>1910</b> from the text file <b>1908</b> and replacing the query script <b>1910</b> with the HTML coded result set <b>1926</b>. Accordingly, one of ordinary skill understands that selectable hypertext links of a Web page are extracted from the product information database <b>116</b>. It will be understood that various embodiments of the present invention extract differing elements associated with groups or products, such as graphic files comprising illustrations of a product or text files comprising detailed or summary descriptions of groups or products or numeric values representing available units or prices. Parameters of query scripts embedded in template files determine what information is extracted from a product information database. These extracted elements are translated into HTML coded result sets and merged with a template file to create an HTML compliant file which is transmitted for presentation to a consumer.</p>
<p id="p-0323" num="0373">In one implementation of the Merchant Workbench, before transmitting the HTML text file <b>1924</b> to the Web browser, the Web server queries the product information database to examine the availability status of each product. One of ordinary skill will understand that a product ID) value may be used to query an availability status field associated with each product. If it is determined that a product is not available, then the hyperlink associated with the unavailable product is removed from the HTML text file. It will thus be appreciated that a product availability query permits a single product information database to support both electronic store product sales and physical store sales.</p>
<p id="p-0324" num="0374">For example, a physical store sells barcoded products which are passed by a barcode reader when sold. The reading of the barcode results in removing the unit product sold from the inventory on hand as indicated in the product information database (or inventory control system). By checking inventory on hand as indicated in the product information database, an electronic store implemented with the Merchant Workbench recognizes inventory fluctuation resulting from sales made by a physical store. A physical store, as used herein, refers to a store from which consumers place orders for products by voice over the telephone, by a delivery service such as U.S. mail, while physically present at the physical store, or other means not utilizing a computer network. Once hyperlink tags are added to the HTML text file <b>1924</b>, the Web server <b>106</b> then transmits the HTML text file <b>1924</b> to the Web browser <b>102</b>. The Web browser <b>102</b> interprets the HTML text file and generates and displays a Web page <b>1928</b> at a time t3.</p>
<p id="p-0325" num="0375">1. Automatic Customization of Web Pages for Particular Consumers</p>
<p id="p-0326" num="0376">The Merchant Workbench learns shopping behaviors of individual consumers and automatically adjusts the structure and content of Web pages to allow consumers to more efficiently access their favorite products or product categories. To learn shopping behaviors of individual consumers, the Merchant Workbench compiles an historical log detailing each consumer's use of an electronic store, such as which pages each consumer accesses and which products each consumer orders.</p>
<p id="p-0327" num="0377">A traffic analysis database logs (i.e., stores information about) an individual consumer's access to each Web page and also logs each consumer's order for any product. The traffic analysis database thus, in one embodiment, comprises a ‘browse’ table and a ‘product orders’ table.</p>
<p id="p-0328" num="0378">The browse table comprises data records having at least the following fields:</p>
<p id="p-0329" num="0379">
<tables id="TABLE-US-00018" num="00018">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="49pt" align="left"/>
<colspec colname="2" colwidth="168pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>Consumer_ID</entry>
<entry>(value uniquely identifying a consumer)</entry>
</row>
<row>
<entry>Template_File</entry>
<entry>(representing a Web page accessed by a consumer)</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="42pt" align="left"/>
<colspec colname="2" colwidth="175pt" align="left"/>
<tbody valign="top">
<row>
<entry>Product_ID</entry>
<entry>(value identifying product ordered)</entry>
</row>
<row>
<entry>Group_ID</entry>
<entry>(value identifying product category for ordered product)</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="21pt" align="left"/>
<colspec colname="2" colwidth="196pt" align="left"/>
<tbody valign="top">
<row>
<entry>Date</entry>
<entry>(date Web page was accessed)</entry>
</row>
<row>
<entry>Time</entry>
<entry>(time Web page was accessed)</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0330" num="0380">Each time a consumer accesses any Web page of an electronic store, a software tool of the present invention creates a new data record in the browse table to log information identifying the consumer, the page accessed, and the date and time of the access. It will be understood that a timestamp which indicates some instance in time can be stored and would suffice to determine when the consumer accessed a Web page.</p>
<p id="p-0331" num="0381">Each time a consumer submits an order for products of an electronic store, a software tool of the present invention adds a new data record to the product orders table. Data records of the product orders table include the following fields:</p>
<p id="p-0332" num="0382">
<tables id="TABLE-US-00019" num="00019">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="49pt" align="left"/>
<colspec colname="2" colwidth="140pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="2" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>Consumer_ID</entry>
<entry>(value uniquely identifying a consumer)</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="42pt" align="left"/>
<colspec colname="2" colwidth="147pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>Product_ID</entry>
<entry>(value uniquely identifying a product)</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="35pt" align="left"/>
<colspec colname="2" colwidth="154pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>Quantity</entry>
<entry>(number of units ordered)</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="21pt" align="left"/>
<colspec colname="2" colwidth="168pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>Date</entry>
<entry>(date order was placed)</entry>
</row>
<row>
<entry/>
<entry>Time</entry>
<entry>(time order was placed)</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0333" num="0383">To recognize individual consumers and distinguish between them, the software tool generates a unique ID value for each consumer. Thus, a unique consumer ID value is assigned to each individual consumer.</p>
<p id="p-0334" num="0384">To effect such assignments, the Web server <b>106</b> constructs a persistent client state cookie (‘cookie’) and sends the cookie to a consumer's Web browser <b>102</b>. The cookie comprises a name/value pair, such as “Consumer_ID=00333714.” After a Web browser <b>102</b> receives such a cookie, the Web browser <b>102</b> transmits the particular name/value pair (e.g., Consumer_ID)=00333714) to the Web server <b>106</b> with every Web page request. Thus, when any page of an electronic store is accessed, the Web server <b>106</b> identifies the requesting consumer. Persistent client state cookies are known in the art. The present invention is not limited, however, by any method for identifying a consumer. For example, in another embodiment of the invention, a Web page of an electronic store prompts a consumer to supply a name, password, or other identification information upon each access to the electronic store. The present invention uses the supplied identification information to identify each consumer accessing the electronic store.</p>
<p id="p-0335" num="0385"><figref idref="DRAWINGS">FIGS. 20A and 20B</figref> illustrate steps performed to assign a consumer ID to a consumer and to log a consumer's access to a Web page or a consumer's order for a product. In a first step <b>2002</b>, the Web server <b>106</b> receives a request from a Web browser <b>102</b> for a Web page and scans the request message for a cookie identifier. In a preferred embodiment, a cookie identifier for a consumer is a name/value pair beginning with the name, “Consumer_ID=” followed by a value assigned to the consumer.</p>
<p id="p-0336" num="0386">In a next step <b>2004</b>, the Web server <b>106</b> determines whether a cookie identifier exists in the request message. If not, then a farther step <b>2006</b>, the Web server <b>106</b> generates a consumer ID value to uniquely identifying the consumer. It is well known in the art to successively generate values uniquely identifying each of a set of elements. One such method is to store an initial value on non-volatile storage media, read the value and increment it to generate a unique value, and then replace the stored value on the non-volatile storage media with the incremented value.</p>
<p id="p-0337" num="0387">Next, in an additional step <b>2008</b>, the Web server <b>106</b> generates a set-cookie command. A set-cookie command comprises a keyword, “Set-Cookie:” followed by a number of possible parameters. The set-cookie command uses a first parameter comprising a name/value pair. To generate a name/value pair, the Web server <b>106</b> combines an identifier constant (e.g., “Consumer_ID=”) with the unique value (e.g., “00333714”) generated in the step <b>2006</b>. In the step <b>2008</b>, the Web server combines the “Set-Cookie:” keyword with the name/value pair to generate the set-cookie command (e.g., “Set-Cookie: Consumer_ID=00333714”).</p>
<p id="p-0338" num="0388">In a further step <b>2010</b>, the Web server <b>106</b> combines the set-cookie command with data, such as an HTML file, to be sent to the Web browser. It is known in the art to combine set-cookie commands with HTML files to create a message to be transmitted to a Web browser.</p>
<p id="p-0339" num="0389">In a next step <b>2012</b>, the Web server determines whether the consumer requested the first Web page (or “welcome” page) of an electronic store. This step <b>2012</b> follows the prior step <b>2004</b> if the Web server locates a cookie identifier in the request message. It will be understood that consumers browsing an electronic store routinely access the welcome page at the beginning of each shopping session. Accessing a welcome page is a shopping behavior common to virtually all consumers, and such access reveals no particular preference on the part of any consumer. Thus, one embodiment of the present invention does not compile information detailing each consumers' access to a welcome page. To determine whether a consumer is accessing a welcome page, the Web server <b>106</b> scans the URL of the request message for the presence of a file name that matches the file name of the welcome page. It will be appreciated that a file name for a welcome page may be “mystore.htm” and that a request message having a URL value of “http:\\www.elecstore.com\mystore.htm” comprises a request for a welcome page of an electronic store.</p>
<p id="p-0340" num="0390">If, in the step <b>2012</b>, the Web server <b>106</b> determines that the consumer requested a welcome page, then, in a next step <b>2020</b>, the Web server <b>106</b> scans the URL of the request message for the name of a template file. If, however, in the step <b>2012</b>, the Web server <b>106</b> determines that the consumer did not request a welcome page, then, in a further step <b>2014</b>, the Web server <b>106</b> determines whether the consumer placed an order for a product. Methods by which consumers order products from electronic stores over the Internet are well known, and the present invention is not limited by any such method.</p>
<p id="p-0341" num="0391">Generally, to order a product from a Web-based electronic store, a consumer enters purchase information into an order form Web page which includes text entry fields prompting a consumer, for example, for number of units, payment method (e.g., credit card number), and shipping address. A Web server <b>106</b> determines that a consumer has ordered a product by (1) scanning the URL of a request message for the presence of a file name corresponding to an order form Web page, and (2) validating the purchase information (e.g., credit card number, whether inventory includes at least the number of units ordered, etc.) entered by the consumer which is included in the request message. It will be understood that a file name of an order form Web page may be “order.asp” (in one embodiment of the present invention, the file extension “.asp” designates a template file having an embedded script that can be processed) and that a URL value of “http:\\www.elecstore.com\order.asp” indicates that a consumer has accessed an order form Web page. It will be further understood that, if insufficient inventory is available, a Web page may be transmitted to the consumer describing that the consumer's order could not be processed for insufficient inventory, or displaying some other explanatory message.</p>
<p id="p-0342" num="0392">If, in the step <b>2014</b>, the Web server <b>106</b> determines that the consumer ordered a product, then, in an additional step <b>2016</b>, the Web server creates a new data record for the product order table of the traffic analysis database. The Web server scans the consumer's cookie identifier to determine the Consumer_ID uniquely identifying the consumer. The Web server <b>106</b> also accesses the purchase information entered by the consumer on the order form Web page which is included in the request message. The Web server <b>106</b> scans the request message for a product name, or product identifier value, and also for a quantity value (i.e., the number of units orders).</p>
<p id="p-0343" num="0393">The Web server, in the step <b>2016</b>, generates a database command designed to add a record to the product order table. One of ordinary skill understands that such a database command includes values for the fields of the new record. The Web server supplies values for each of the following fields:</p>
<p id="p-0344" num="0394">
<tables id="TABLE-US-00020" num="00020">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="49pt" align="left"/>
<colspec colname="2" colwidth="168pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>Consumer_ID</entry>
<entry>established by scanning the consumer's cookie identifier</entry>
</row>
<row>
<entry>Product_ID</entry>
<entry>established by scanning the request message generated</entry>
</row>
<row>
<entry/>
<entry>by a Web browser to order a product; the Product_ID</entry>
</row>
<row>
<entry/>
<entry>is always specified in the request message URL</entry>
</row>
<row>
<entry>Quantity</entry>
<entry>established by scanning the request message generated</entry>
</row>
<row>
<entry/>
<entry>by a Web browser to order a product</entry>
</row>
<row>
<entry>Date</entry>
<entry>established by accessing a common calendar function</entry>
</row>
<row>
<entry/>
<entry>of the computer operating system under which the Web</entry>
</row>
<row>
<entry/>
<entry>server 106 operates</entry>
</row>
<row>
<entry>Time</entry>
<entry>established by accessing a time function of the computer</entry>
</row>
<row>
<entry/>
<entry>operating system under which the Web server 106</entry>
</row>
<row>
<entry/>
<entry>operates</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0345" num="0395">Then, in the step <b>2016</b>, the Web server <b>106</b> issues the database command to the traffic analysis database to create a new record in the product order table. In one embodiment, the Web server uses the Quantity value to generate a database transaction command which, when processed, decreases in the product information database the total number of units available with respect to the product ordered. A status field, units field, or other attribute field of a record in the products table <b>204</b> may represent the number of units available for a particular product. Also, in the step <b>2016</b>, the Web server <b>106</b> queries the relationships table <b>202</b> to retrieve any records having a “CS” or cross sales relationship with the products ordered by the consumer. The Web server <b>106</b> uses values from the Related_ID fields of any retrieved records to query the products table <b>204</b> for description information for any cross sale related products. The Web server then creates. an association between the information describing any cross sale related products and the consumer. Next, in the step <b>2020</b>, the Web server <b>106</b> scans the URL of the request message for the name of a template file.</p>
<p id="p-0346" num="0396">If, in the step <b>2014</b>, the Web server determines that the consumer did not order a product, then, in a next step <b>2018</b>, the Web server <b>106</b> generates a database command designed to add a new record to the browse table of the traffic analysis database. It will be understood that such a database command accepts parameters representing values for the fields of a new record of the browse table. To supply a value for the Consumer_ID field of the new record, the Web server <b>106</b> access the consumer's cookie identifier and extracts the unique Consumer_ID value. The Web server establishes a value for the Template File field of the new record by extracting a template file name from the URL of the request message. One of ordinary skill will appreciate that a URL of “http:\\www.elecstore.com\auto.htm” includes a template file “auto.htm” and that methods for extracting such a template file name are known. The Date and Time fields are established by accessing, respectively, a common calendar routine and a common clock routine of the operating system under which the Web server <b>106</b> operates.</p>
<p id="p-0347" num="0397">In the step <b>2018</b>, the Web server <b>106</b> issues the database command to the traffic analysis database to add a new record to the browse table identifying the consumer, the page accessed, and the date and time of the access. In the next step <b>2020</b>, the Web server scans the URL in the request message, and extracts the name of a template file.</p>
<p id="p-0348" num="0398">In a further step <b>2022</b>, the Web server <b>106</b> invokes an HTML page engine. The HTML page engine, in an additional step <b>2024</b>, opens the template file and scans for customize references. A customize reference comprises data which references a series of commands to construct a Web page customized for a particular consumer. One of ordinary skill will appreciate that a customize reference may include a command script or may comprise an identifier used to reference a command script. In a preferred embodiment, the customize reference is an identifier such as “&lt;&lt;customize&gt;&gt;” (i.e., a unique character string), and the HTML page engine includes computer instructions that are performed when the HTML page engine finds a customize reference in a template file.</p>
<p id="p-0349" num="0399">Next, in an additional step <b>2026</b>, the HTML page engine scans the template file and determines whether there is a customize reference in the template file. If not, then, in a next step <b>2027</b>, the HTML page engine determines whether any cross sale related product information is associated with the consumer and, if so, generates HTML hyperlink tags to Web pages describing the cross sale products. After adding these cross sale product hyperlink tags to the requested HTML file or template file, the HTML page engine deletes any association between cross sale product information and the consumer. In a further step <b>2028</b>, the Web server <b>106</b> transmits the template file (a compliant HTML file) to the Web browser <b>102</b>.</p>
<p id="p-0350" num="0400">If, however, in the step <b>2026</b>, the HTML page engine determines that a customize reference exists in the template file, then, in a further step <b>2030</b>, the HTML page engine queries the browse table of the traffic analysis database for all records having a Consumer_ID field matching the Consumer_ID value of the consumer's cookie. The resulting set of data records describes all prior accesses by the consumer to any of the Web pages of the electronic store.</p>
<p id="p-0351" num="0401">In a next step <b>2032</b>, the HTML page engine examines the resulting set of data records to determine whether the consumer accessed any Web page with sufficient frequency to create additional hyperlinks to the page for the benefit of the consumer. Threshold access frequencies are stored as a set of preferred page rules. One of ordinary skill will understand that Web page access frequencies may be expressed as a certain minimum number of accesses within a certain time period. Thus, a Web page access frequency may comprise two values: (1) an access total (i.e., an integer representing the number of times a consumer accessed a particular Web page), and (2) a time period (e.g., an integer representing a number of days). Accordingly, a set of preferred page rules comprises one or more paired values, and each particular preferred page rule comprises one pair of values.</p>
<p id="p-0352" num="0402">One of ordinary skill will appreciate that many methods exist whereby a store designer enters preferred page rules. According to one method, a store designer selects a preferred rules command <b>778</b> of the store design user interface <b>760</b>, and enters new rules or modifies or deletes existing rules by interacting with a dialogue box which displays a list of existing rules, as well as fields to enter new rules. The present invention is not limited by any method of entering preferred page rules.</p>
<p id="p-0353" num="0403">The following is an example set of three preferred page rules: (3, 10), (4, 20), (5, 30). The first preferred page rule, (3, 10), is satisfied if a consumer accessed a particular page three or more times within ten days. The second preferred page rule, (4, 20), is satisfied if a consumer accessed a certain page four or more different times in a twenty-day period. Likewise, the third preferred page rule, (5, 30), is satisfied whenever a consumer accesses a particular page five or more times within thirty days.
<ul id="ul0029" list-style="none">
    <li id="ul0029-0001" num="0000">
    <ul id="ul0030" list-style="none">
        <li id="ul0030-0001" num="0404">By sequentially examining each data record resulting from the query, the HTML page engine creates a list of each Web page the consumer accessed. Starting with the first Web page in the list, the HTML page engine determines whether any of the preferred page rules is satisfied by any subset of data records describing accesses to that Web page. Then, the HTML page engine determines whether any of the preferred page rules is satisfied by any subset of data records describing accesses to the second Web page in the list. In this manner, the HTML page engine determines whether, for any Web page in the list, any of the preferred page rules is satisfied.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0354" num="0405">In an alternative embodiment, preferred page rules include duration thresholds (each indicating a length of time a consumer views a Web page). In this embodiment, the HTML page engine determines, whether, for any Web page accessed by the consumer, the length of time spent by the consumer accessing the Web page is equal to or exceeds the duration threshold.</p>
<p id="p-0355" num="0406">If, in the step <b>2032</b>, the HTML page engine locates at least one preferred page (a page accessed with sufficient frequency to satisfy a preferred page rule), then, in a further step <b>2034</b>, the HTML page engine extracts from browse table data records the Template_ID of each preferred page. In a next step <b>2036</b>, the HTML page engine uses the Template_ID value of each preferred page to query the group table <b>206</b> or the product table <b>204</b> for a Group_Name value or a Product_Name value, respectively, associated with the Template_ID.</p>
<p id="p-0356" num="0407">Then, in an additional step <b>2038</b>, the HTML page engine combines the Template_ID value and either a Group_Name value or a Product_Name value to create HTML hyperlink tags referencing preferred pages. For example, if a Template_ID is ‘sedans.html’ and an associated Group_Name is ‘Sedans’, the HTML page engine creates the HTML hyperlink tag:
<ul id="ul0031" list-style="none">
    <li id="ul0031-0001" num="0408">&lt;A HREF=“/web/sedans.html”&gt;Sedans&lt;/A&gt;</li>
</ul>
</p>
<p id="p-0357" num="0409">Thus, the HTML page engine creates an HTML hyperlink tag for each preferred page.</p>
<p id="p-0358" num="0410">After the HTML page engine creates HTML hyperlink tags, or if, in the step <b>2032</b>, the HTML page engine located no preferred pages, then, in a next step <b>2040</b>, the HTML page engine queries the product order database for all records having a Consumer_ID value that matches the Consumer_ID of the consumer's cookie. After extracting all data records from the product order table describing product orders by the consumer, then, in a further step <b>2042</b>, the HTML page engine determines whether any preferred product rules are satisfied.</p>
<p id="p-0359" num="0411">It will be understood that a preferred product rule, like a preferred page rule described above, comprises a pair of values: the first value representing a number of times a particular product was ordered by the consumer, and the second value representing a period of time. Thus, a preferred product rule is expressed as a pair of numbers. For example, the preferred product rule (3, 10) is satisfied when a consumer orders at least three units of a particular product within a ten-day period. It will be understood that preferred product rules may be entered, under one method, by selecting the preferred rules command <b>778</b> of the store design user interface <b>760</b>, whereupon a dialogue box is displayed on the store design user interface <b>760</b>. The dialogue box allows a store designer to delete or alter existing preferred product rules or add new ones. The present invention is not limited by any method of entering preferred product rules.</p>
<p id="p-0360" num="0412">The HTML page engine, in the step <b>2042</b>, scans all the data records describing product orders by the consumer and creates a list of Product_ID values, each Product_ID representing a product the consumer has ordered. Beginning with the first Product_ID in the list, the HTML page engine determines whether the product was ordered with sufficient frequency to satisfy a preferred product rule, thus making the product a preferred product of the consumer. One of ordinary skill will appreciate that the HTML page engine examines the Quantity field value of each data record when determining how many units of a particular product were ordered in a particular time period.</p>
<p id="p-0361" num="0413">In an alternative embodiment, preferred group rules are used. In this embodiment the HTML page engine combines the quantities of products within each group to generate a value for each product group indicating the number of products from each group that the consumer has ordered. It will be understood that each such value generated may represent the number of products of each group ordered on each day by the consumer. The HTML page engine determines whether products of any group were ordered with sufficient frequency to satisfy a preferred group rule.</p>
<p id="p-0362" num="0414">If, in the step <b>2042</b>, the HTML page engine determines that at least one product is a preferred product of the consumer, then, in a further step <b>2044</b>, the HTML page engine extracts a Product_ID value from a product order table data record for each preferred product. The HTML page engine then uses each Product_ID value to query the product table <b>204</b> for an associated Template_ID value and an associated Product_Name value.</p>
<p id="p-0363" num="0415">In a next step <b>2046</b>, the HTML page engine combines the Template_ID value and Product_Name value associated with each preferred product to create an HTML hyperlink tag for each preferred product. For example, if a Template_ID value is “hacksawb.html” and a Product_Name value is “Hacksaw Blade”, then the HTML page engine creates the HTML hyperlink tag:
<ul id="ul0032" list-style="none">
    <li id="ul0032-0001" num="0416">&lt;A HREF=“/web/hacksawb.html”&gt;Hacksaw Blade&lt;/A&gt;</li>
</ul>
</p>
<p id="p-0364" num="0417">Thus, the HTML page engine creates an HTML hyperlink tag for each preferred product. One of ordinary skill in the art will appreciate that, when preferred group rules are used, a similar hyperlink tag may be generated in the same manner to associate a Template_ID value with a Group_Name value.</p>
<p id="p-0365" num="0418">After constructing any HTML hyperlink tags for preferred products, or if, in the step <b>2042</b>, the HTML page engine determines there are no preferred products, then, in an additional step <b>2048</b>, the HTML page engine removes the customize reference from the template file. In a next step <b>2050</b>, the HTML page engine replaces the customize reference with any HTML hyperlink tags created. After the step <b>2050</b>, the template file is an HTML compliant file. Then, in the step <b>2027</b>, the HTML page engine adds to the HTML file hyperlink tags to Web pages describing cross sale related products if any such product information has been associated with the consumer. The HTML page engine then deletes any association between cross sale related product information and the consumer. Then, in the step <b>2028</b>, the HTML page engine terminates and the Web server <b>106</b> transmits the HTML file to the Web browser <b>102</b>.</p>
<p id="p-0366" num="0419"><figref idref="DRAWINGS">FIG. 21</figref> illustrates an example of steps performed to customize a Web page of an electronic store for a particular consumer. A Web browser <b>102</b> running on a computer <b>1802</b> displays a Web page <b>1840</b> at a time t<b>2</b>. The Web page <b>1840</b> includes a hyperlink <b>1902</b> labelled “Sedans”. A consumer selects the “Sedans” hyperlink <b>1902</b>, and the Web browser <b>102</b> generates a message <b>2102</b> requesting a Web page related to the “Sedans” hyperlink <b>1902</b> and transmits the message over the World Wide Web to the Web server <b>106</b>.</p>
<p id="p-0367" num="0420">The Web server <b>106</b> scans the request message <b>2102</b> for a URL <b>2104</b> and a cookie identifier <b>2106</b>. The Web server <b>106</b> then scans the URL <b>2104</b> for the name of a template file (e.g., “sedan.html”) and also scans the cookie identifier <b>2106</b> for a Consumer_ID value (e.g., “55714”) uniquely identifying the consumer.</p>
<p id="p-0368" num="0421">The Web server then invokes the HTML page engine. The HTML page engine uses the template file name found in the URL <b>2104</b> to open a template file <b>2108</b> having the same name. The template file <b>2108</b> includes ASCII text, HTML tags, and customize references. The HTML page engine scans the opened template file <b>2110</b> for a customize reference, and locates a customize reference <b>2112</b> comprising a character string, “&lt;&lt;CUSTOMIZE&gt;&gt;”.</p>
<p id="p-0369" num="0422">The HTML page engine then uses the Consumer_ID value of the cookie identifier <b>2106</b> to query data records from both the browse table and the product order table of the traffic analysis database. A set of data records describing all page accesses by the consumer is extracted from the browse table, and a set of data records describing all product orders placed by the consumer is extracted from the product order table.</p>
<p id="p-0370" num="0423">Four data records extracted from the browse table <b>2114</b>, <b>2115</b>, <b>211</b>, <b>2117</b> describe accesses to a Web page associated with a template file “tools.html”. Note, data records describing accesses to other pages are not illustrated in <figref idref="DRAWINGS">FIG. 21</figref>. The HTML page engine then determines whether the Web page associated with the “tools.html” template file is a preferred page. Thus, the HTML page engine accesses preferred page rules <b>2118</b>, then examines the data records to determine whether any set of the four records <b>2114</b>, <b>2115</b>, <b>2116</b>, <b>2117</b> satisfies one of the preferred page rules. If there are two preferred page rules, for example (4, 30) and (3, 10), then the HTML page engine determines that the first preferred page rule, (4, 30), is not satisfied because the Web page associated with the template file “tools.html” was not accessed four times within thirty days. However, the second preferred page rule, (3, 10), is satisfied because, as indicated by three of the browse table data records, <b>2115</b>, <b>2116</b>, <b>2117</b>, the page was accessed three times within ten days.</p>
<p id="p-0371" num="0424">After determining that the Web page associated with the “tools.html” template file is a preferred page, the HTML page engine then creates an HTML hyperlink tag <b>2120</b> which references that Web page. The HTML page engine locates the Group_Name “Tools” by using the template file name “tools.html” to query the group table <b>206</b> for an associated Group_Name.</p>
<p id="p-0372" num="0425">Next, the HTML page engine examines the data records extracted from the product order table to determine whether, for this consumer, there are any preferred products. Four data records <b>2122</b>, <b>2123</b>, <b>2124</b>, <b>2125</b> of the product order table describe orders placed by the consumer for a particular product (e.g., a hacksaw blade). The HTML page engine accesses preferred product rules <b>2126</b> and finds two such rules: (20, 60) and (10, 30). The HTML page engine determines that the first rule is not satisfied because the consumer did not order 20 units of the product within 60 days. However, the second rule is satisfied because, the sum of the value of the quantity fields of the four records <b>2122</b>, <b>2123</b>, <b>2124</b>, <b>2125</b> is 10 and all of the four orders were placed within a 30-day period.</p>
<p id="p-0373" num="0426">After finding a preferred product for the consumer, the HTML page engine constructs an HTML hyperlink tag <b>2128</b> for the product. The HTML page engine uses the Product_ID value for the preferred product to query the product table <b>204</b> for a Template_ID value (e.g., “hacksawb.html”) and a Product_Name value (e.g., “Hacksaw Blade”).</p>
<p id="p-0374" num="0427">The HTML page engine then constructs an HTML file <b>2130</b> by replacing the customize reference <b>2112</b> with the constructed HTML hyperlink tags <b>2120</b>, <b>2128</b>. The HTML page engine then terminates, and the Web server <b>106</b> transmits the HTML file <b>2130</b> to the Web browser <b>102</b>. The Web browser <b>102</b> interprets the HTML file <b>2130</b> into a Web page display <b>2132</b> having a hyperlink <b>2132</b> labeled “Tools” and a hyperlink <b>2136</b> labeled “Hacksaw Blade”.</p>
<p id="p-0375" num="0428">In the manner described above, the Merchant Workbench permits a designer of an electronic store to construct the Web pages of the store in such a way that the electronic store can automatically adjust the navigable links between pages as well as the content on pages to better suit the needs of individual consumers. One of ordinary skill in the art will appreciate that the mechanisms described above also permit a store designer to customize for a particular consumer any promotional information, sale information, or other content on particular Web pages.</p>
<p id="p-0376" num="0429">This invention may be embodied in other specific forms without departing from the essential characteristics as described herein. The embodiments described above are to be considered in all respects as illustrative only and not restrictive in any manner. The scope of the invention is indicated by the following claims rather than by the foregoing description. Any and all changes which come within the meaning and range of equivalency of the claims are to be considered within their scope.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A computer-implemented method comprising:
<claim-text>using a web server to operate an electronic store by:
<claim-text>receiving a request for an electronic store web page from a web browser, wherein said web page is based on a script of commands in a template file wherein the commands specify both a database query to perform and a translation process to convert the query to HTML code;</claim-text>
<claim-text>processing the query script of commands to extract product information from said database, wherein the database includes product information describing a hierarchical relationship between groups of products, and wherein said extracted product information is related to a first group of products whose previous selection by a user initiated said web server database query;</claim-text>
<claim-text>merging the extracted product information with the template file;</claim-text>
<claim-text>constructing a web page from the combined product information and template file; and</claim-text>
<claim-text>sending the web page to the requesting web browser, wherein the web page includes information describing said relationship between the first group of products and the extracted product information, and is configured to enable the web browser to generate a user interface displaying icons arranged to visually represent said relationship.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising after receiving the request for said electronic store web page, examining a URL of the web page and determines the URL specifies the name of a template file.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the web server is configured to invoke an HTML page engine process for opening the template file specified in the URL, scanning the template file for query scripts, and utilizing a database query in the query script for querying the product information database.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the web server is configured to transmit the converted query scripts as HTML-coded text files to the web browser.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the web sewer is configured to query the product information database to examine the availability status of each product.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. A computer-implemented method, comprising:
<claim-text>receiving a request from a web browser for an electronic store web page;</claim-text>
<claim-text>sending data to the web browser sufficient to enable the web browser to generate a user interface displaying icons representing groups of products, said icons being arranged to visually represent a relationship between said groups of products;</claim-text>
<claim-text>receiving, responsive to selection of one of said icons representing a first of the groups of products, a network message that includes a database query command specifying a query of a product information database for groups of products related to the first group of products;</claim-text>
<claim-text>submitting said query to the product information database; and</claim-text>
<claim-text>returning to said web browser a web page that includes results of the query and returned information describing said related groups of products, wherein the returned information is extractable to describe said related groups of products and to display second icons representing said related groups of products.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein said network message is received over the Internet.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein an arrangement of said second icons displayed by said user interface represents the relationship between the first group and said related groups.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. A computer-implemented method, comprising:
<claim-text>embedding a database reference within a template web page for use by a sewer, said database reference representing a database query, said template web page including fixed content data compatible with a network protocol;</claim-text>
<claim-text>monitoring web page requests;</claim-text>
<claim-text>responding to a request for a web page by scanning said template web page for said database reference;</claim-text>
<claim-text>extracting variable content data from said database by querying said database using said database query;</claim-text>
<claim-text>combining said variable content data with said fixed content data to create a web page; and</claim-text>
<claim-text>transmitting said web page over a network.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The computer-implemented method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein said network is the Internet and wherein said web page complies with an Internet protocol.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The computer-implemented method of <claim-ref idref="CLM-00010">claim 10</claim-ref> wherein said variable content data and said fixed content data describe inventory of an electronic store.</claim-text>
</claim>
</claims>
</us-patent-grant>
