<us-patent-grant lang="EN" dtd-version="v4.2 2006-08-23" file="US07299230-20071120.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20071106" date-publ="20071120">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>07299230</doc-number>
<kind>B2</kind>
<date>20071120</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>10211448</doc-number>
<date>20020802</date>
</document-id>
</application-reference>
<us-application-series-code>10</us-application-series-code>
<us-term-of-grant>
<us-term-extension>829</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>17</main-group>
<subgroup>30</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>707 10</main-classification>
<further-classification>707101</further-classification>
<further-classification>707102</further-classification>
<further-classification>707201</further-classification>
<further-classification>709201</further-classification>
<further-classification>709230</further-classification>
<further-classification>709246</further-classification>
</classification-national>
<invention-title id="d0e53">Method, apparatus and system for transforming, converting and processing messages between multiple systems</invention-title>
<references-cited>
<citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5649195</doc-number>
<kind>A</kind>
<name>Scott et al.</name>
<date>19970700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707201</main-classification></classification-national>
</citation>
<citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5813009</doc-number>
<kind>A</kind>
<name>Johnson et al.</name>
<date>19980900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707100</main-classification></classification-national>
</citation>
<citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>5835757</doc-number>
<kind>A</kind>
<name>Oulid-Aissa et al.</name>
<date>19981100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707 10</main-classification></classification-national>
</citation>
<citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>5956721</doc-number>
<kind>A</kind>
<name>Douceur et al.</name>
<date>19990900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707 10</main-classification></classification-national>
</citation>
<citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>5995980</doc-number>
<kind>A</kind>
<name>Olson et al.</name>
<date>19991100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707201</main-classification></classification-national>
</citation>
<citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>6052685</doc-number>
<kind>A</kind>
<name>Eastwick et al.</name>
<date>20000400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707 10</main-classification></classification-national>
</citation>
<citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>6167405</doc-number>
<kind>A</kind>
<name>Rosensteel et al.</name>
<date>20001200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707102</main-classification></classification-national>
</citation>
<citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>6219694</doc-number>
<kind>B1</kind>
<name>Lazaridis et al.</name>
<date>20010400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709206</main-classification></classification-national>
</citation>
<citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>6240417</doc-number>
<kind>B1</kind>
<name>Eastwick et al.</name>
<date>20010500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707 10</main-classification></classification-national>
</citation>
<citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>6359630</doc-number>
<kind>B1</kind>
<name>Morse et al.</name>
<date>20020300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>345620</main-classification></classification-national>
</citation>
<citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>6487558</doc-number>
<kind>B1</kind>
<name>Hitchcock</name>
<date>20021100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707200</main-classification></classification-national>
</citation>
<citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>6615223</doc-number>
<kind>B1</kind>
<name>Shih et al.</name>
<date>20030900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707201</main-classification></classification-national>
</citation>
<citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>6711592</doc-number>
<kind>B2</kind>
<name>Ono</name>
<date>20040300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707204</main-classification></classification-national>
</citation>
<citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>6981041</doc-number>
<kind>B2</kind>
<name>Araujo et al.</name>
<date>20051200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709224</main-classification></classification-national>
</citation>
<citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>2001/0034733</doc-number>
<kind>A1</kind>
<name>Prompt et al.</name>
<date>20011000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707102</main-classification></classification-national>
</citation>
<citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>2002/0023113</doc-number>
<kind>A1</kind>
<name>Hsing et al.</name>
<date>20020200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707513</main-classification></classification-national>
</citation>
<citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>2002/0059299</doc-number>
<kind>A1</kind>
<name>Spaey</name>
<date>20020500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>7071041</main-classification></classification-national>
</citation>
<citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>2002/0087573</doc-number>
<kind>A1</kind>
<name>Reuning et al.</name>
<date>20020700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707102</main-classification></classification-national>
</citation>
<citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>2002/0103854</doc-number>
<kind>A1</kind>
<name>Okita</name>
<date>20020800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709203</main-classification></classification-national>
</citation>
<citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>2003/0023759</doc-number>
<kind>A1</kind>
<name>Littleton et al.</name>
<date>20030100</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>709248</main-classification></classification-national>
</citation>
<citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>2004/0024795</doc-number>
<kind>A1</kind>
<name>Hind et al.</name>
<date>20040200</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>707204</main-classification></classification-national>
</citation>
<citation>
<nplcit num="00022">
<othercit>Ming-Tao Liou et al., “Method, Apparatus and System for Dispatching Messages Within a System,” U.S. Appl. No. 10/256,682, filed Sep. 26, 2002.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00023">
<othercit>Ming-Tao Liou et al., “Method, Apparatus, and System for Transforming, Converting and Processing Messages Between Multiple Systems,” U.S. Appl. No. 10/211,442, filed Aug. 2, 2002.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
</references-cited>
<number-of-claims>25</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>707  1- 10</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>707100-1041</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>707200-205</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>4555501</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709201</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709230</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709238</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709242</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709245</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709246</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709248</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>705  4</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>22</number-of-drawing-sheets>
<number-of-figures>22</number-of-figures>
</figures>
<us-related-documents>
<us-provisional-application>
<document-id>
<country>US</country>
<doc-number>60341943</doc-number>
<kind>00</kind>
<date>20011218</date>
</document-id>
</us-provisional-application>
<us-provisional-application>
<document-id>
<country>US</country>
<doc-number>60316385</doc-number>
<kind>00</kind>
<date>20010830</date>
</document-id>
</us-provisional-application>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20070226263</doc-number>
<kind>A1</kind>
<date>20070927</date>
</document-id>
</related-publication>
</us-related-documents>
<parties>
<applicants>
<applicant sequence="001" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Liou</last-name>
<first-name>Ming-Tao</first-name>
<address>
<city>Fremont</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="002" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Yeap</last-name>
<first-name>Hwee Har</first-name>
<address>
<city>San Mateo</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="003" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Hsiao</last-name>
<first-name>Chiun-Feng</first-name>
<address>
<city>Belmont</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
</applicants>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Campbell Stephenson LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</parties>
<assignees>
<assignee>
<addressbook>
<orgname>Siebel Systems, Inc.</orgname>
<role>02</role>
<address>
<city>San Mateo</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Alam</last-name>
<first-name>Shahid Al</first-name>
<department>2162</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">In one embodiment, the present invention is a method of sending change information from a first database to a second database. The method includes managing a set of transactions to produce a first message. The method also includes transforming the first message into a second message. The method further includes converting the second message into a transmittable message.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="207.60mm" wi="114.55mm" file="US07299230-20071120-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="212.26mm" wi="125.98mm" file="US07299230-20071120-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="214.46mm" wi="153.25mm" file="US07299230-20071120-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="217.68mm" wi="153.59mm" file="US07299230-20071120-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="238.25mm" wi="172.21mm" file="US07299230-20071120-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="227.84mm" wi="158.07mm" file="US07299230-20071120-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="210.65mm" wi="149.44mm" file="US07299230-20071120-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="219.71mm" wi="177.38mm" file="US07299230-20071120-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="138.26mm" wi="66.46mm" file="US07299230-20071120-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="180.93mm" wi="86.78mm" file="US07299230-20071120-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="113.03mm" wi="137.84mm" file="US07299230-20071120-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="118.96mm" wi="211.24mm" file="US07299230-20071120-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="102.87mm" wi="125.90mm" file="US07299230-20071120-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00013" num="00013">
<img id="EMI-D00013" he="114.47mm" wi="149.78mm" file="US07299230-20071120-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00014" num="00014">
<img id="EMI-D00014" he="144.53mm" wi="98.98mm" file="US07299230-20071120-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00015" num="00015">
<img id="EMI-D00015" he="131.15mm" wi="93.05mm" file="US07299230-20071120-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00016" num="00016">
<img id="EMI-D00016" he="208.87mm" wi="124.54mm" file="US07299230-20071120-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00017" num="00017">
<img id="EMI-D00017" he="220.05mm" wi="164.08mm" file="US07299230-20071120-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00018" num="00018">
<img id="EMI-D00018" he="222.17mm" wi="155.02mm" file="US07299230-20071120-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00019" num="00019">
<img id="EMI-D00019" he="237.91mm" wi="171.11mm" file="US07299230-20071120-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00020" num="00020">
<img id="EMI-D00020" he="221.83mm" wi="156.04mm" file="US07299230-20071120-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00021" num="00021">
<img id="EMI-D00021" he="207.43mm" wi="145.88mm" file="US07299230-20071120-D00021.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00022" num="00022">
<img id="EMI-D00022" he="219.37mm" wi="174.58mm" file="US07299230-20071120-D00022.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">CLAIM OF DOMESTIC PRIORITY</heading>
<p id="p-0002" num="0001">This application claims priority to previously filed provisional applications having Ser. No. 60/316,385, entitled “METHOD, APPARATUS AND SYSTEM FOR DISPATCHING, TRANSFORMING, CONVERTING AND PROCESSING MESSAGES BETWEEN MULTIPLE SYSTEMS” and filed on Aug. 30, 2001 and having Ser. No. 60/341,943, entitled “METHOD, APPARATUS AND SYSTEM FOR DISPATCHING, TRANSFORMING, CONVERTING AND PROCESSING MESSAGES BETWEEN MULTIPLE SYSTEMS WITH OPTIONAL CUSTOMIZATION” and filed on Dec. 18, 2001.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0002" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0003" num="0002">1. Field of the Invention</p>
<p id="p-0004" num="0003">The invention relates to database technology generally and more specifically to synchronization and transfer of information between multiple databases of varying form.</p>
<p id="p-0005" num="0004">2. Description of the Related Art</p>
<p id="p-0006" num="0005">As will be understood, it has long been known that multiple databases may include different versions of the same information. Furthermore, databases may be structured such that it is expected that the database will have outdated information relative to another database, the second database may be expected to own the information and provide updates to the first database.</p>
<p id="p-0007" num="0006">Transferring such information and updates may be problematic when the first and second database do not share the same schema or are managed by different systems. Therefore, it would be valuable to be able to provide a method or apparatus for transferring information between databases without depending on identical internal structures for example.</p>
<p id="p-0008" num="0007">Furthermore, systems may be expected to receive a variety of types of information, bound for a variety of distinct destinations within the system. However, determining where the information is bound is not necessarily transparent, and providing a method or system to make such determinations may be useful.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0009" num="0008">The present invention is illustrated by way of example and not limitation in the accompanying figures.</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. 1</figref> illustrates an embodiment of transaction processing.</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 2</figref> illustrates an embodiment of data transformation engine processing.</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 3</figref> illustrates an embodiment of converter processing.</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 4</figref> illustrates an alternate embodiment of converter processing.</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 5</figref> illustrates an alternate embodiment of data transformation engine processing.</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 6</figref> illustrates an alternate embodiment of transaction processing.</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 7</figref> illustrates an embodiment of message dispatch.</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 8</figref> illustrates an embodiment of message origination.</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 9</figref> illustrates an embodiment of processing received message(s).</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 10</figref> illustrates an embodiment of a dispatch system or medium.</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 11</figref> illustrates an embodiment of two systems linked together.</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 12</figref> illustrates an embodiment of a medium.</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 13</figref> illustrates an alternate embodiment of a dispatch system or medium.</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 14</figref> illustrates another alternate embodiment of a dispatch system or medium.</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 15</figref> illustrates yet another alternate embodiment of a dispatch system or medium.</p>
<p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. 16</figref> illustrates another alternate embodiment of transaction processing.</p>
<p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. 17</figref> illustrates another alternate embodiment of data transformation engine processing.</p>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. 18</figref> illustrates another alternate embodiment of converter processing.</p>
<p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. 19</figref> illustrates yet another alternate embodiment of converter processing.</p>
<p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. 20</figref> illustrates yet another alternate embodiment of data transformation engine processing.</p>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. 21</figref> illustrates yet another alternate embodiment of transaction processing.</p>
<p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. 22</figref> illustrates another embodiment of message dispatch.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0032" num="0031">A method, apparatus and system for dispatching, transforming, converting and processing messages between multiple systems with optional customization is described. In the following description, for purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the invention. It will be apparent, however, to one skilled in the art that the invention can be practiced without these specific details. In other instances, structures and devices are shown in block diagram form in order to avoid obscuring the invention. Where reference numbers are utilized, like reference numbers refer to similar or identical components.</p>
<p id="p-0033" num="0032">Reference in the specification to “one embodiment” or “an embodiment” means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the invention. The appearances of the phrase “in one embodiment” in various places in the specification are not necessarily all referring to the same embodiment, nor are separate or alternative embodiments mutually exclusive of other embodiments.</p>
<p id="p-0034" num="0033">In one embodiment, the present invention is a method of sending change information from a first database to a second database. The method includes managing a set of transactions to produce a first message. The method also includes transforming the first message into a second message. The method further includes converting the second message into a transmittable message.</p>
<p id="p-0035" num="0034">In an alternate embodiment, the present invention is a method of receiving change information for a second database from a first database. The method includes converting a received message into a second message. The method further includes transforming the second message into a third message. The method also includes processing the third message to form a set of transactions. The method may further include effecting changes in the second database with the set of transactions.</p>
<p id="p-0036" num="0035">In another alternate embodiment, a process for sending messages incorporating changes or updates to a database is described. The process includes processing transactions in a database to create a message. The process further includes processing the message to conform to data transformation engine specifications. The process also includes processing the message to convert the message into a transmittable form. The process may also include transmitting the message.</p>
<p id="p-0037" num="0036">In still another alternate embodiment, a process for receiving messages incorporating changes or updates to a database is described. The process includes processing the message to convert the message from a transmittable form to an internally usable form. The process further includes processing the message based on data transformation engine specifications. The process also includes processing transactions in a database from data included in the message. The process may also include receiving the message.</p>
<p id="p-0038" num="0037">In yet another alternative embodiment, a process for dispatching received messages within a system is described. The process includes receiving a message, identifying a type of the message, and dispatching the message to a destination based on the type of the message. The process may include consultation of a set of rules to determine the type of the message and/or to determine a proper or desired destination for the message.</p>
<p id="p-0039" num="0038">In yet another alternate embodiment, an optionally customizable process for sending messages incorporating changes or updates to a database is described. The process includes processing transactions in a database to create a message. The process further includes processing the message to conform to data transformation engine specifications. The process also includes processing the message to convert the message into a transmittable form. The process may also include transmitting the message. Each portion of the process may be either customized or achieved in a default manner.</p>
<p id="p-0040" num="0039">In an alternate embodiment, an optionally customizable process for receiving messages incorporating changes or updates to a database is described. The process includes processing the message to convert the message from a transmittable form to an internally usable form. The process further includes processing the message based on data transformation engine specifications. The process also includes processing transactions in a database from data included in the message. The process may also include receiving the message. Again, each portion of the process may be either customized or may proceed without customization.</p>
<p id="p-0041" num="0040">Note that reference is made to transformation and reformatting of messages. Typically this refers to massaging the message based on pre-defined rules which may be customized according to the use of the methods. The messages may include data which represents transactions or changes within a database, and may have that data wrapped in other data making the message suitable for transfer or transmission for example.</p>
<p id="p-0042" num="0041">One embodiment of a method of assembling a message involves transforming a set of transactions from a database into an XML format message. As will be appreciated, tags may be embedded in the message which would not be appropriate for processing in a database system but which may facilitate identification of the message and/or its transaction contents. Moreover, the transactions may need values substituted in based on a new database, or placeholders for values specific to an old database, such as foreign key values which may vary from system to system or database to database. Thus, transforming the message may include both substitution between values and placeholders on each end and embedding or stripping of tags, headers, envelopes, and other artifacts associated with processing or transmission of a message.</p>
<p id="p-0043" num="0042">In an alternate embodiment, customization overrides may allow for assembly into a generally non-supported or proprietary format for the resulting message. Such customization will replace, rather than supplement, default processing which results in the message in question. Furthermore, as will be appreciated, alternate embodiments may relate to processing or transforming a message into transactions which may be used to replicate changes to a first database in a second database.</p>
<p id="p-0044" num="0043"><figref idref="DRAWINGS">FIG. 1</figref> illustrates an embodiment of transaction processing. At block <b>110</b>, changes, such as those in a database, are found for processing purposes. These changes may encompass all changes since a previous transaction processing event, or may be defined in some other way appropriate to capturing information deemed desirable by a system designer or manager. At block <b>120</b>, all of the changes found are translated into commands and tags are attached as needed for each command. The tags attached may be useful in future processing of the message by providing formatting cues and either providing pointers to or encoding in the tag conversion rule sets for the commands.</p>
<p id="p-0045" num="0044">At block <b>130</b>, a record ID associated with each command is found—a records which was changed (or would change) as a result of the command in question. At block <b>140</b>, the method for each command is invoked with respect to a set of objects relative to the record found at block <b>130</b>. Thus, the commands corresponding to transactions are effectively executed on a record changed in the transactions. The objects in question are those within the database in which the transactions occurred. At block <b>150</b>, the results of the commands are packaged into a message, with some massaging or transformation as may be available in the process of capturing the results.</p>
<p id="p-0046" num="0045">At block <b>160</b>, a determination is made as to whether another record ID exists which was affected by the transactions in question. If so, that record ID is found at block <b>130</b> as before. If not, a determination is made as to whether another message needs to be generated at block <b>170</b>. If so, the process returns to block <b>110</b> to find changes in the database. If not, the process terminates at block <b>180</b>.</p>
<p id="p-0047" num="0046"><figref idref="DRAWINGS">FIG. 2</figref> illustrates an embodiment of data transformation engine processing. At block <b>210</b>, a next (or first) part of an old (untransformed) message is found. At block <b>220</b>, a determination is made as to whether this is the end of the message. If so, at block <b>280</b>, the process terminates with pass-through of the end of the message or a suitable end for the transformed message.</p>
<p id="p-0048" num="0047">If not, at block <b>230</b>, the sub-message part found at block <b>210</b> is identified as either being a body part, a header part, or an unknown part. If the sub-message part is either a header or unknown part, it is processed at block <b>235</b>, typically by passing through the information from the untransformed to the transformed message, although other processing (even discard of the data) may be specified.</p>
<p id="p-0049" num="0048">If the sub-message part is the body of the message, at block <b>237</b>, the body is traversed until a first sub-part of the body is found. Typically, this sub-part will correspond either to a command or to an end of the body, although it may correspond to some unrecognized portion of the body, too. At block <b>240</b>, a determination is made as to whether the end of the body has been reached. If so, the process returns to block <b>210</b> to find the next part of the message.</p>
<p id="p-0050" num="0049">If not, a determination is made as to whether a command has been found at block <b>250</b>. If so, the command is transformed based on pre-defined rules at block <b>260</b>. If not, the non-command portion is passed through untouched at block <b>265</b>. At block <b>270</b>, the either transformed command or untransformed non-command portion are packaged into the transformed message, and the process then returns to continue traversing to the next sub-part of the body.</p>
<p id="p-0051" num="0050"><figref idref="DRAWINGS">FIG. 3</figref> illustrates an embodiment of converter processing. At block <b>310</b>, the next (or first) message to be converted is found. At block <b>315</b>, a determination is made as to whether an envelope is required. This determination may be based on the format of the message found, or based on requirements of the destination for the message for example. At block <b>320</b>, if an envelope is necessary, the envelope and any associated headers are generated for the message. If no envelope is necessary, or after the envelope is generated, custom pre-processing of the message may occur at block <b>325</b>. This is an optional part of the process, allowing for customization by a system manager for example through specification of rules or formats for messages, and need not be implemented to achieve the desired result in all cases.</p>
<p id="p-0052" num="0051">At block <b>330</b>, a transaction within the message is processed according to pre-defined rules to make it ready for transmission. At block <b>335</b>, the data objects associated with the transaction are similarly processed according to pre-defined rules. As will be appreciated, this processing may be specified in a variety of ways. However, it will be appreciated that the processing in question will typically involve processing material made available from a data transformation engine process for purposes of transmission through a transmission apparatus such as a message queue or other transport mechanism.</p>
<p id="p-0053" num="0052">At block <b>340</b>, a determination is made as to whether another transaction remains unprocessed. If so, the process returns to block <b>330</b>. If not, a determination is made as to whether an envelope is present, such as an envelope generated at block <b>320</b>. If so, the processed transactions are attached to the envelope at block <b>355</b>. After attaching the processed transactions to the envelope, or if no envelope is present, the message (consisting of either an envelope with transactions attached or a set of transactions) is provided with processing instructions to be used by a recipient of the message at block <b>360</b>. At block <b>370</b>, the message is assembled, including transactions, attached envelope if present, and any appropriate processing instructions, and the message is made available for transmission or transfer.</p>
<p id="p-0054" num="0053">At block <b>380</b>, a determination is made as to whether more messages need to be processed. If not, the process terminates at block <b>390</b>. If so, the process returns to block <b>310</b> to find the next message.</p>
<p id="p-0055" num="0054"><figref idref="DRAWINGS">FIG. 4</figref> illustrates an alternate embodiment of converter processing. At block <b>410</b>, the next (or first) message received is found. At block <b>415</b>, any custom message processing, such as that specified by a system manager for example, is performed. At block <b>420</b>, presence of an envelope is detected. If the envelope is present, at block <b>425</b>, the envelope and associated headers are processed. After processing the envelope, or if no envelope is present, at block <b>430</b>, further custom transaction processing may be specified by a system manager for example and then performed. Note that typically the custom processing would be specified prior to processing, and pre-defined rules within the specifications would determines whether such custom processing occurs.</p>
<p id="p-0056" num="0055">At block <b>435</b>, a next (or first) transaction within the message is found. At block <b>440</b>, the transaction is processed, transforming it from a format suitable for transmission or transfer into a format suitable, for example, for use in data transformation engine processing. At block <b>450</b>, a next (or first) object associated with the transaction is found. If an object is determined to have been found at block <b>460</b>, the process moves to block <b>465</b>, and the object is processed, such as by transforming it from a format suitable for transmission or transfer into a format suitable, for example, for use in data transformation engine processing.</p>
<p id="p-0057" num="0056">If no object was found, a determination is made at block <b>470</b> as to whether further transactions are to be found in the message. If yes, then the process returns to block <b>435</b> and the next transaction is found. If no, a determination is made as to whether an envelope is associated with the message at block <b>475</b>. If so, the processed objects and transactions are attached to the envelope as processed at block <b>425</b>. If not, or after attachment to the envelope, another opportunity for custom processing is allowed at block <b>485</b>. Finally, the processed message is assembled at block <b>490</b> and is made available to the rest of the system.</p>
<p id="p-0058" num="0057">At block <b>495</b>, a determination is made as to whether more messages are available for processing. If not, the process terminates at block <b>497</b>. If so, the process returns to block <b>410</b> and the next message to be processed is found.</p>
<p id="p-0059" num="0058"><figref idref="DRAWINGS">FIG. 5</figref> illustrates an alternate embodiment of data transformation engine processing. At block <b>510</b>, an envelope of a message is processed (transformed according to a pre-defined set of rules) if the envelope is present. At block <b>520</b>, the next portion of the message (following any attached envelope for example) is found. At block <b>525</b>, a determination is made as to whether the end of the message has been found. If so, at block <b>530</b>, the process terminates, and the message has been transformed to the extent expected based on the data transformation engine process.</p>
<p id="p-0060" num="0059">If the end of the message has not been found, at block <b>540</b>, the portion of the message found is identified. If the portion is found to be either a header portion or an unknown portion, then that portion is processed at block <b>545</b>. However, this processing at block <b>545</b>, in one embodiment, may simply include passing through the header or unknown portion. The process then proceeds to block <b>520</b> and the next portion of the message is found.</p>
<p id="p-0061" num="0060">If a body portion of the message is determined to be the portion found, then at block <b>555</b>, a determination is made as to whether the end of the body has been found. If so, the process proceeds to block <b>520</b> and the next portion of the message is found. If not (the end of the body has not been found), then at block <b>565</b> a determination is made as to whether the sub-part of the body found is a command. If so, the transaction related to the command is found and processed at block <b>575</b>. If not, the sub-part of the body is passed through at block <b>570</b>. All parts of the body are then packaged into a new format based on pre-defined rules for repackaging at block <b>580</b>. At block <b>585</b>, the next section of the body (the next sub-part) is found, and then the process proceeds to block <b>555</b>.</p>
<p id="p-0062" num="0061"><figref idref="DRAWINGS">FIG. 6</figref> illustrates an alternate embodiment of transaction processing. At block <b>610</b>, a next (or first) portion of a message is found. At block <b>620</b>, a determination is made as to whether commands within the message remain unprocessed. If all commands have been processed, the next portion of the message is the end of the message, so the process terminates at block <b>690</b>.</p>
<p id="p-0063" num="0062">If commands remain to be processed, then at block <b>630</b>, a determination is made as to whether the portion of the message found at block <b>610</b> is a command. If it is not, then the portion of the message is passed through at block <b>625</b>, and the process returns to block <b>610</b> to find the next portion of the message.</p>
<p id="p-0064" num="0063">If the portion of the message is a command, an opportunity for custom processing of commands based on a pre-defined set of rules is provided at block <b>640</b>. Such custom processing may be specified by a system manager for example. At block <b>650</b>, the command is processed against a receiving database, and at block <b>660</b>, a method of an object corresponding to the command is invoked for records in the receiving database, thereby effecting the change to be caused by the command. At block <b>670</b>, the return from the method (the result of the command) is packaged, and the process then flows to block <b>610</b> to find the next portion of the message. In capturing the returns from the method, the process may also invoke the execution method for the appropriate object, thereby generating a response message to the sending external system.</p>
<p id="p-0065" num="0064"><figref idref="DRAWINGS">FIG. 7</figref> illustrates an embodiment of message dispatch. The process illustrated can be described as follows. First, a message is received. Then, processing instructions within the message are identified and decoded. Next, an envelope is identified and decoded. In the process, headers for messages within the envelope are also decoded.</p>
<p id="p-0066" num="0065">The pre-defined rules for processing the message are parsed into tokens and placed into a hash tree or other suitable data structure. Separately, the transactions in the command hierarchy of the message are processed and accessed against the rule sets stored in the hash tree. The processed message is then sent to the appropriate part of the system for use therein.</p>
<p id="p-0067" num="0066">At block <b>710</b>, the next message received is found. At block <b>715</b>, processing instructions within the message are detected, and at block <b>720</b>, such processing instructions, if present, are tagged and identified for use by the receiver of the message. At block <b>725</b>, a determination is made as to whether an envelope is present in the message. If so, at block <b>730</b>, the envelope and any associated headers are tagged, allowing for ease of identification of these portions of the message in later processing. At block <b>740</b>, a rules data structure for processing the message is created, such as a hash tree of objects against which the contents of the message may be matched. The rules data structure may be based on a pre-defined set of rules which determine how messages, or expected messages, are to be processed.</p>
<p id="p-0068" num="0067">At block <b>750</b>, the next (or first) transaction (or portion) of the message is found. At block <b>760</b>, a determination is made as to whether the transaction matches a rule of the rules data structure, thus indicating that a known method for processing the transaction exists within the system in question. At block <b>765</b>, a known transaction has its structure of objects traversed, with tags or values inserted or substituted into the structure to facilitate processing based on the matched rule. At block <b>770</b>, a transaction or portion which does not match any known rules is tagged as an unknown portion.</p>
<p id="p-0069" num="0068">At block <b>780</b>, a determination is made as to whether transactions remain to be processed. If so, the process then proceeds to block <b>750</b>. If not, the process proceeds to block <b>790</b> where the message is assembled and transferred to its destination within the system. At block <b>795</b>, a determination is made as to whether more messages are present for processing. If so, the process returns to block <b>710</b> to find the next message. If not, the process terminates at block <b>797</b>.</p>
<p id="p-0070" num="0069">Note that with respect to <figref idref="DRAWINGS">FIGS. 1-7</figref>, custom processing has been discussed for various blocks. Such custom processing would depend on software or repository (database) configuration. As an illustrative example, a user-defined field may have a particular format which is not supported by normal processing and would thus tend to cause unpredictable or erroneous behavior in the normal processing of the messages. However, by configuring the software or database to properly handle the field, the processing for that field may be customized, such that a date field with an unusual format may be properly handled without losing information for example. Such configuration may be achieved without requiring the software to resort to external sources of information or code (scripts or libraries for example) beyond what would normally be accessed simply to process the data, namely the original code and configuration information of the software and the information in the database.</p>
<p id="p-0071" num="0070"><figref idref="DRAWINGS">FIG. 8</figref> illustrates an embodiment of message origination. At block <b>810</b>, transaction management, as may be illustrated in <figref idref="DRAWINGS">FIG. 1</figref> for example occurs, resulting in a set of components. At block <b>820</b>, processing for data transformation engine purposes occurs as may be illustrated in <figref idref="DRAWINGS">FIG. 2</figref> for example, resulting in a well-formed message. At block <b>830</b>, converter processing occurs, in which the well-formed message is transformed into a message suitable for transmission such as may be illustrated in <figref idref="DRAWINGS">FIG. 3</figref> for example. At block <b>840</b>, the message is provided to an external system (or systems) through a transport mechanism or module. A transport mechanism in this context may be implemented as some form of HTTP transport protocol mechanism or module, as a message queue such as an MQ available from IBM for example, or through other known methods and apparatuses.</p>
<p id="p-0072" num="0071"><figref idref="DRAWINGS">FIG. 9</figref> illustrates an embodiment of processing received message(s). At block <b>910</b>, the message is received from a transport mechanism or module. At block <b>920</b>, dispatch processing such as that described with respect to <figref idref="DRAWINGS">FIG. 7</figref> occurs. At block <b>930</b>, converter processing of the message, determining how to process the message occurs, such as that which may be illustrated in <figref idref="DRAWINGS">FIG. 4</figref> for example. At block <b>940</b>, transaction processing of the transactions in the message such as that which may be illustrated in <figref idref="DRAWINGS">FIG. 5</figref> occurs. At block <b>950</b>, changes in the receiving database are effected through processing such as that which may be illustrated in <figref idref="DRAWINGS">FIG. 6</figref> occurs.</p>
<p id="p-0073" num="0072"><figref idref="DRAWINGS">FIG. 10</figref> illustrates an embodiment of a dispatch system or medium. Block <b>1010</b> represents an input interface with an external system, such as an interface to a message queue, an HTTP socket, or other suitable input interface. Block <b>1020</b> is a dispatch module which receives messages from block <b>1010</b> and decodes the messages. Block <b>1020</b> may be expected to retrieve a source and destination from an incoming message. Based on this decoding, using rules in block <b>1030</b>, the dispatch module <b>1020</b> then provides the message to a first application <b>1040</b> or a second application <b>1050</b>. Thus, block <b>1020</b> may be expected to match the retrieved source and/or destination against rules of block <b>1030</b> to determine an appropriate destination within the system in question, such as first application <b>1040</b> or second application <b>1050</b> for example. Moreover, only one of the source and destination encoded in the message may be necessary to determine an appropriate destination within the system.</p>
<p id="p-0074" num="0073">As will be appreciated, this exemplary description may be generalized to a variety of different applications for example. For example, a layer <b>1035</b> may exist between dispatch module <b>1020</b> and the applications (<b>1040</b>, <b>1050</b>). The layer <b>1035</b> may automatically route messages to a destination based on flags or other signals set by dispatch module <b>1020</b> after processing of the message(s) in question. Implementation of the layer <b>1035</b> may occur through a variety of different well-known techniques. Furthermore, in one embodiment, the rules of block <b>1030</b> may be implemented as a fixed set of rules, compiled prior to use by block <b>1020</b>. It will be appreciated that various methods of handling these rules may be appropriate.</p>
<p id="p-0075" num="0074"><figref idref="DRAWINGS">FIG. 11</figref> illustrates an embodiment of two systems linked together. A first system <b>1105</b> includes a first database <b>1110</b>. A link <b>1125</b> links the first system <b>1105</b> to a second system <b>1115</b> including a second database <b>1120</b>. The link <b>1125</b> may be implemented at one level as an MQ message queue for example, and messages may be exchanged between the first database <b>1110</b> and the second database <b>1120</b> for purposes of communicating information or synchronizing information within the databases (<b>1110</b> and <b>1120</b>).</p>
<p id="p-0076" num="0075">In one embodiment, a dispatch system determines a destination within either the first system <b>1105</b> or the second system <b>1115</b> for messages received over the link <b>1125</b>. Furthermore, in one embodiment, a converter-transformation-transaction chain (such as that illustrated in <figref idref="DRAWINGS">FIGS. 4</figref>, <b>5</b>, and <b>6</b> respectively for example) may be used to transform a received message into changes within the database (either <b>1110</b> or <b>1120</b>) of the receiving system. Similarly, in one embodiment, a transaction-transformation-converter chain (such as that illustrated in <figref idref="DRAWINGS">FIGS. 1</figref>, <b>2</b>, and <b>3</b> respectively for example) may be used to transform a set of changes within the database (either <b>1110</b> or <b>1120</b>) into a message for the transmitting or transferring system.</p>
<p id="p-0077" num="0076"><figref idref="DRAWINGS">FIG. 12</figref> illustrates an embodiment of a medium. The medium <b>1200</b> includes a converter module <b>1210</b> (such as one corresponding to the converters of <figref idref="DRAWINGS">FIG. 3</figref> or <b>4</b> for example). The medium <b>1200</b> also includes a data transformation engine module <b>1220</b> (such as one corresponding to the data transformation engine modules of <figref idref="DRAWINGS">FIG. 2</figref> or <b>5</b> for example). The medium <b>1200</b> also includes a transaction manager <b>1230</b> (such as one corresponding to the transaction managers of <figref idref="DRAWINGS">FIG. 1</figref> or <b>6</b> for example). As described below, this may be a machine readable medium embodying instructions for execution on a processor, which, when executed by the processor, cause the processor and an associated system or machine to perform a method.</p>
<p id="p-0078" num="0077"><figref idref="DRAWINGS">FIG. 13</figref> illustrates an alternate embodiment of a dispatch system or medium. As illustrated, the embodiment of <figref idref="DRAWINGS">FIG. 13</figref> adds the administrative interface of block <b>1360</b> to the embodiment of <figref idref="DRAWINGS">FIG. 10</figref>. The administrative interface of block <b>1360</b> may be used to initially set or modify the rules of block <b>1030</b> which govern the dispatch module of block <b>1020</b>. Furthermore, it will be appreciated that modification of the rules of block <b>1030</b> may be achieved in a dynamic or real-time manner, allowing for changes in behavior of the system according to needs or preferences which similarly change.</p>
<p id="p-0079" num="0078"><figref idref="DRAWINGS">FIG. 14</figref> illustrates another alternate embodiment of a dispatch system or medium. At block <b>1410</b>, rules for processing messages are received. At block <b>1420</b>, a message is received, such as from a message queue or HTTP interface for example. At block <b>1430</b>, the message is processed and dispatched to an appropriate destination within the system. At block <b>1440</b>, a determination is made as to whether the rules received in block <b>1410</b> have been updated or otherwise changed. If so, the process returns to block <b>1410</b>, and new rules are received. If not, the process returns to block <b>1420</b>, and the next message is processed based on the current set of rules.</p>
<p id="p-0080" num="0079"><figref idref="DRAWINGS">FIG. 15</figref> illustrates yet another alternate embodiment of a dispatch system or medium. At block <b>1510</b>, a message is received. At block <b>1520</b>, the message address information, such as a source and or destination for the message for example, are processed. This processing may involve retrieving the information in question from the message (such as from predefined fields for example) or otherwise determining a source and/or destination. At block <b>1530</b>, the message destination within the system (which may or may not be identical to the destination retrieved from the message) is determined, based on the results of block <b>1520</b> and any processing rules which may be available for interpreting those results. Note that such processing rules may include a default destination within the system for messages which do not otherwise have an identifiable destination within the system. At block <b>1540</b>, the message is actually routed to the destination in question. This may or may not include any source and/or destination information, as that information may be stripped from the message during processing.</p>
<p id="p-0081" num="0080">The next section illustrates a variation on the embodiments presented with respect to <figref idref="DRAWINGS">FIGS. 1</figref>, <b>2</b>, <b>3</b>, <b>4</b>, <b>5</b>, <b>6</b> and <b>7</b>, which may be used with embodiments illustrated with respect to <figref idref="DRAWINGS">FIGS. 8</figref>, <b>9</b>, <b>10</b>, <b>11</b>, <b>12</b>, <b>13</b>, <b>14</b> and <b>15</b>, among other embodiments. Each of the embodiments illustrated in <figref idref="DRAWINGS">FIGS. 16</figref>, <b>17</b>, <b>18</b>, <b>19</b>, <b>20</b>, <b>21</b>, and <b>22</b> vary from the embodiments of <figref idref="DRAWINGS">FIGS. 1-7</figref> through the use of script customization which is exclusive of or additive to any default aspects of the embodiment.</p>
<p id="p-0082" num="0081">Generally, several aspects apply to customization. First, a basic or vanilla connector (set of transformation, converting and processing routines) is configured, much as any software may be initially configured. Next, the behavior of the connector is configured through user-definable properties, as discussed previously with respect to <figref idref="DRAWINGS">FIGS. 1-7</figref>. Then, custom scripts are provided to further configure (alter) the connector to process data in a manner generally different from default or preset processing methods. Finally, the connector is operated using the custom scripts. This may further involve additional specification of information, such as locations or other address information for the custom scripts, configuration of control information for the connector suitable to include the scripts, configuration of data transformation maps, configuration of workflow information for the connector, or compilation of information about custom scripts into the connector. Thus, while customization with respect to <figref idref="DRAWINGS">FIGS. 1-7</figref> involved configuration of software or databases for example, customization with respect to <figref idref="DRAWINGS">FIGS. 16-22</figref> involves custom scripts which may override default of configured processing.</p>
<p id="p-0083" num="0082"><figref idref="DRAWINGS">FIG. 16</figref> illustrates another alternate embodiment of transaction processing. As will be appreciated, most of the blocks in this illustration have already been described with respect to <figref idref="DRAWINGS">FIG. 1</figref>. However, blocks <b>1620</b> and <b>1650</b> illustrate variations peculiar to some embodiments. At block <b>1620</b>, changes are translated into commands and tags are attached as necessary. This may be achieved in a default manner, such as that corresponding to block <b>120</b>. However, it may also be customized through use of a script developed by someone using or controlling the system. The script in question may be provided with a name or location such that it may be located during processing of the commands, and the script may be expected to include suitable routines for translating changes into commands and attaching tags. Thus, the script may be used to customize the transaction processing to take into account proprietary formats, unusual data, and other issues not addressed by standard transaction processing. Similarly, at block <b>1650</b>, results of commands are packaged and massaged as necessary. Such a block may be effectively replaced by a custom script, thereby allowing for different behavior in the processing block. For both of these blocks (<b>1620</b>, <b>1650</b>), either a default process may occur, or a custom script may be used, with each being exclusive of the other. Note also that no provision is made for additional customized or user-defined processing.</p>
<p id="p-0084" num="0083"><figref idref="DRAWINGS">FIG. 17</figref> illustrates another alternate embodiment of data transformation engine processing. As will be appreciated, most of the blocks in this illustration have already been described with respect to <figref idref="DRAWINGS">FIG. 2</figref>. However, blocks <b>1755</b> and <b>1760</b> illustrate variations peculiar to some embodiments. At block <b>1755</b>, custom command transformation occurs, such as massaging of the command as with respect to block <b>260</b> of <figref idref="DRAWINGS">FIG. 2</figref>, or through use of a custom script in a manner similar to that with respect to block <b>1620</b>. At block <b>1760</b>, the command is transformed, in a manner similar to transformation with respect to block <b>260</b> of <figref idref="DRAWINGS">FIG. 2</figref>, but without any massaging. In some embodiments, this occurs as it would with block <b>260</b>, namely the process is predefined. In some alternate embodiments, a custom script is used in its place, in a manner similar to that in block <b>1620</b>. Thus, the custom scripts may be expected to handle command transformation and custom command transformation, but in a manner defined by a user or controller of the system, rather than the manner provided for through default processing. Furthermore, the custom scripts may be expected to be exclusionary to the default processing, and may be the only customization allowed.</p>
<p id="p-0085" num="0084"><figref idref="DRAWINGS">FIG. 18</figref> illustrates another alternate embodiment of converter processing. As will be appreciated, most of the blocks in this illustration have already been described with respect to <figref idref="DRAWINGS">FIG. 3</figref>. However, blocks <b>1820</b>, <b>1825</b>, <b>1832</b> and <b>1860</b> illustrate variations peculiar to some embodiments. At block <b>1820</b>, either the envelope and headers are generated in a default manner, or by a replacement custom script. At block <b>1825</b>, either the transaction is processed in a default manner based on the configuration of the software, or by a replacement custom script. Similarly, at blocks <b>1832</b> and <b>1860</b>, data objects are processed and processing instructions are generated in either a default manner (which may be influenced by configuration for block <b>1832</b>) or through use of a custom script. In this way, customization is allowed, but also limited to a predictable and controlled portion of the process.</p>
<p id="p-0086" num="0085"><figref idref="DRAWINGS">FIG. 19</figref> illustrates yet another alternate embodiment of converter processing. As will be appreciated, most of the blocks in this illustration have already been described with respect to <figref idref="DRAWINGS">FIG. 4</figref>. However, blocks <b>1915</b>, <b>1925</b>, <b>1930</b>, <b>1937</b>, <b>1962</b> and <b>1985</b> illustrate variations peculiar to some embodiments. At block <b>1915</b>, message processing occurs, either by default manner or by custom script. At block <b>1925</b>, envelopes and headers are found and processed, either by a default process or through use of a custom script. Similarly, at blocks <b>1930</b> and <b>1937</b>, transaction processing occurs either by default (with possible configuration overrides) or by custom script. This may use the same or two different custom scripts for example. At block <b>1962</b>, the object in question is either processed in a default manner (with configuration overrides if appropriate) or through use of a custom script. Finally, at block <b>1985</b>, the final processing is carried out either in a default manner or through use of a custom script. Note that the customization at block <b>1985</b> may be in the form of a NO-OP or non-operative script to eliminate this block, and similar opportunities exist for other blocks.</p>
<p id="p-0087" num="0086"><figref idref="DRAWINGS">FIG. 20</figref> illustrates yet another alternate embodiment of data transformation engine processing. As will be appreciated, most of the blocks in this illustration have already been described with respect to <figref idref="DRAWINGS">FIG. 5</figref>. However, blocks <b>2010</b>, <b>2067</b>, <b>2075</b> and <b>2080</b> illustrate variations peculiar to some embodiments. At each of blocks <b>2010</b>, <b>2067</b>, <b>2075</b>, and <b>2080</b>, the expected processing may be handled by either a default process or through use of a custom script. Similarly, <figref idref="DRAWINGS">FIG. 21</figref> illustrates yet another alternate embodiment of transaction processing. As will be appreciated, most of the blocks in this illustration have already been described with respect to <figref idref="DRAWINGS">FIG. 6</figref>. However, blocks <b>2140</b> and <b>2170</b> illustrate variations peculiar to some embodiments. As will be appreciated, each of blocks <b>2140</b> and <b>2170</b> may utilize either a default process or a custom script. Also, <figref idref="DRAWINGS">FIG. 22</figref> illustrates another alternate embodiment of message dispatch. As will be appreciated, most of the blocks in this illustration have already been described with respect to <figref idref="DRAWINGS">FIG. 7</figref>. However, blocks <b>2220</b>, <b>2230</b>, <b>2262</b> and <b>2265</b> illustrate variations peculiar to some embodiments. Each of these blocks may similarly involve either of a default process or a custom script.</p>
<p id="p-0088" num="0087">Some portions of the detailed description are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the art to most effectively convey the substance of their work to others skilled in the art. An algorithm as described here is generally conceived to be a self consistent sequence of acts or operations leading to a desired result. The acts are those requiring physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, data or the like.</p>
<p id="p-0089" num="0088">It should be borne in mind, however, that all of these in similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as “processing” or “computing” or “calculating” or “determining” or “displaying” or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical (electronic) quantities within the computer systems registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices. The present invention can be implemented by an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a machine such as a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a machine readable storage medium such as but not limited to any type of disk including floppy disks, optical disks, CD roms and magnetic optical disks, read only memories, random access memories, EPROMS, EEPROMS, magnetic or optical cards or any type of media suitable for storing electronic constructions and each coupled to a computer system bus. Each of these media may be coupled to a computer system bus through use of an appropriate device for reading and or writing the media in question. Specialty apparatus may include a collection of readily available pieces or an application specific integrated circuit including a series of logic blocks for example. The blocks of <figref idref="DRAWINGS">FIGS. 7</figref>, <b>8</b>, <b>9</b> or <b>12</b> may be suitable for implementation as logic blocks, as may other configurations of the method, system and apparatus described herein.</p>
<p id="p-0090" num="0089">The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the required method. For example, any of the methods according to the present invention can be implemented in hard wired circuitry by programming a general purpose processor or by any combination of hardware and software. One of skill in the art will immediately appreciate that the invention can be practiced with computer system configuration. Configurations other than those described below including hand held devices, multi processor systems, microprocessor based or programmable consumer electronics, network PCs, mini computers, main frame computers and the like. The invention may also be practiced in distributed computing environments or tasks or performed by remote processing devices that are linked through a communications network. The required structure for a variety of these systems will appear from the description below.</p>
<p id="p-0091" num="0090">The methods of the invention may be implemented using computer software. If written in a programming language conforming to a recognized standard sequences of instructions designed to implement the methods can be compiled for execution on a variety of hardware platforms or machines and for interface to a variety of operating systems. In addition the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of invention as described herein. Furthermore, it is common in the art to speak of software in one form or another (for example program procedure application etc. . . . ) as taken in action or causing a result. Such expressions are merely a shorthand way of saying that execution of the software by a computer causes the processor of the computer to perform an action or produce a result.</p>
<p id="p-0092" num="0091">In the foregoing detailed description, the method and apparatus of the present invention has been described with reference to specific exemplary embodiments thereof. It will, however, be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the present invention. In particular, the separate blocks of the various block diagrams represent functional blocks of methods or apparatuses and are not necessarily indicative of physical or logical separations or of an order of operation inherent in the spirit and scope of the present invention. For example, the various blocks of <figref idref="DRAWINGS">FIG. 12</figref> may be integrated into components, or may be subdivided into components. Similarly, the blocks of <figref idref="DRAWINGS">FIG. 8</figref> (for example) represent portions of a method which, in some embodiments, may be reordered or may be organized in parallel rather than in a linear or step-wise fashion. The present specification and figures are accordingly to be regarded as illustrative rather than restrictive.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method comprising:
<claim-text>sending change information from a first database to a second database, wherein
<claim-text>said sending change information comprises</claim-text>
<claim-text>processing a set of transactions to the first database to produce a first message, wherein said processing the set of transactions comprises
<claim-text>invoking a method, and</claim-text>
<claim-text>producing the first message using a result of said invoking,</claim-text>
</claim-text>
<claim-text>transforming the first message into a second message, and</claim-text>
<claim-text>converting the second message into a transmittable message; and</claim-text>
</claim-text>
<claim-text>wherein said converting the second message into the transmittable message comprises
<claim-text>processing a transaction of the second message in preparation for transmission of the transaction,</claim-text>
<claim-text>processing a data object associated with the transaction of the second message in preparation for transmission of the transaction, and</claim-text>
<claim-text>if an envelope is required for the transmittable message,
<claim-text>generating an envelope and headers,</claim-text>
<claim-text>attaching the processed transaction and the processed data objects to the envelope, and</claim-text>
<claim-text>including the envelope in the transmittable message.</claim-text>
</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein said processing the set of transactions comprises:
<claim-text>finding a change to the first database since a specified time or event;</claim-text>
<claim-text>translating the change into the first command;</claim-text>
<claim-text>finding a record identifier related to the change; and</claim-text>
<claim-text>performing the invoking the method for the first command and a record associated with the record identifier.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref> wherein processing the set of transactions to form the first message further comprises:
<claim-text>transforming the result of said invoking during a process of capturing the result.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein said transforming the first message into the second message comprises:
<claim-text>finding a command in the body of the first message, wherein
<claim-text>said finding the command comprises
<claim-text>finding a part of the first message,</claim-text>
<claim-text>identifying the part of the first message, and</claim-text>
<claim-text>traversing the part of the first message, if the part is identified as a body of the first message;</claim-text>
</claim-text>
</claim-text>
<claim-text>transforming the command in the body of the first message into newly formatted material; and</claim-text>
<claim-text>packaging the newly formatted material into the second message.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref> wherein said transforming the first message into the second message further comprises:
<claim-text>processing a header portion of the first message; and</claim-text>
<claim-text>passing through non-commands of the body portion of the first message.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein said converting the second message into the transmittable message further comprises:
<claim-text>generating processing instructions for the transaction; and</claim-text>
<claim-text>assembling the processed transaction, processed data objects, and processing instructions into the transmittable message.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref> wherein said processing the transaction of the second message comprises:
<claim-text>customized pre-processing of the transactions of the second message; and</claim-text>
<claim-text>default processing of the transactions.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. A method comprising:
<claim-text>finding a change to a first set of data since a specified time or event;</claim-text>
<claim-text>translating the change into a first command;</claim-text>
<claim-text>finding a record identifier related to the change;</claim-text>
<claim-text>invoking a method for the first command and a record associated with the record identifier;</claim-text>
<claim-text>producing a first message using a result of said invoking;</claim-text>
<claim-text>finding a second command in the first message, wherein
<claim-text>said finding the second command comprises
<claim-text>finding a part of the first message,</claim-text>
<claim-text>identifying the part of the first message, and</claim-text>
<claim-text>traversing the part of the first message, if the part is identified as a body of the first message;</claim-text>
</claim-text>
</claim-text>
<claim-text>transforming the second command using a first predefined rule;</claim-text>
<claim-text>packaging a transformed second command into a second message;</claim-text>
<claim-text>processing a transaction of the second message in preparation for transmission of the transaction;</claim-text>
<claim-text>processing a data object associated with the transaction in preparation for transmission of the transaction;</claim-text>
<claim-text>generating processing instructions for the transaction; and</claim-text>
<claim-text>assembling the processed transaction, processed data objects, and processing instructions into a transmittable message.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref> further comprising:
<claim-text>determining whether an envelope is required for the transmittable message;</claim-text>
<claim-text>generating an envelope and headers if said determining indicates that the envelope is required; and</claim-text>
<claim-text>attaching the processed transaction and the processed data objects to the envelope if the envelope is present; and</claim-text>
<claim-text>including the envelope in the transmittable message.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref> further comprising:
<claim-text>processing a header portion of the first message; and</claim-text>
<claim-text>passing through non-commands of the body portion of the first message.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref> wherein producing the first message comprises:
<claim-text>transforming the result of said invoking during a process of capturing the result.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref> wherein processing the transaction of the second message comprises:
<claim-text>customized pre-processing of the transaction of the second message; and</claim-text>
<claim-text>default processing of the transaction of the second message.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. A machine-readable storage medium embodying instructions, which, when executed by a processor, cause the processor to perform a method of sending change information from a first database to a second database, the method comprising:
<claim-text>processing a set of transactions to the first database to produce a first message;</claim-text>
<claim-text>transforming the first message into a second message;</claim-text>
<claim-text>converting the second message into a transmittable message; and</claim-text>
<claim-text>wherein said converting the second message into the transmittable message comprises
<claim-text>processing a transaction of the second message in preparation for transmission of the transaction,</claim-text>
<claim-text>processing a data object associated with the transaction of the second message in preparation for transmission of the transaction, and</claim-text>
<claim-text>if an envelope is required for the transmittable message,
<claim-text>generating an envelope and headers,</claim-text>
<claim-text>attaching the processed transaction and the processed data objects to the envelope, and</claim-text>
<claim-text>including the envelope in the transmittable message.</claim-text>
</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The machine-readable storage medium of <claim-ref idref="CLM-00013">claim 13</claim-ref> further embodying instructions which, when executed by the processor, cause the processor to perform the method further comprising:
<claim-text>finding a change to the first database since a specified time or event;</claim-text>
<claim-text>translating the change into a first command;</claim-text>
<claim-text>finding a record identifier related to the change;</claim-text>
<claim-text>invoking a method for the first command and a record associated with the record identifier; and</claim-text>
<claim-text>producing a first message using a result of said invoking.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The machine-readable storage medium of <claim-ref idref="CLM-00014">claim 14</claim-ref> further embodying instructions which, when executed by the processor, further cause the processor to perform processing the set of transactions to form the first message the method further comprising:
<claim-text>transforming the result of said invoking during a process of capturing the result.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The machine-readable storage medium of <claim-ref idref="CLM-00013">claim 13</claim-ref> further embodying instructions which, when executed by the processor, cause the processor to perform transforming the first message into the second message, the method further comprising:
<claim-text>finding a command in the body of the first message, wherein
<claim-text>said finding the command comprises
<claim-text>finding a part of the first message,</claim-text>
<claim-text>identifying the part of the first message, and</claim-text>
<claim-text>traversing the part of the first message, if the part is identified as a body of the first message;</claim-text>
</claim-text>
</claim-text>
<claim-text>transforming the command in the body of the first message into newly formatted material; and</claim-text>
<claim-text>packaging die newly formatted material into the second message.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The machine-readable storage medium of <claim-ref idref="CLM-00016">claim 16</claim-ref> further embodying instructions which, when executed by the processor, further cause the processor to perform said transforming the first message into the second message the method further comprising:
<claim-text>processing a header portion of the first message; and</claim-text>
<claim-text>passing through non-commands of the body portion of the first message.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The machine-readable storage medium of <claim-ref idref="CLM-00013">claim 13</claim-ref> further embodying instructions which, when executed by the processor, cause the processor to perform said converting the second message into the transmittable message, the method further comprising:
<claim-text>generating processing instructions for the transaction; and</claim-text>
<claim-text>assembling the processed transaction, processed data objects, and processing instructions into the transmittable message.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The machine-readable storage medium of <claim-ref idref="CLM-00018">claim 18</claim-ref> further embodying instructions which, when executed by the processor, further cause the processor to perform said processing the transaction of the second message the method further comprising:
<claim-text>customized pre-processing of the transactions of the second message; and</claim-text>
<claim-text>default processing of the transactions.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. An apparatus comprising:
<claim-text>a manager module configured to process a set of transactions to a first set of data to produce a first message;</claim-text>
<claim-text>a transformer module configured to transform the first message into a second message;</claim-text>
<claim-text>a converter module configured to
<claim-text>convert the second message into a transmittable message,</claim-text>
<claim-text>process a transaction of the second message in preparation for transmission of the transaction,</claim-text>
<claim-text>process a data object associated with the transaction of the second message in preparation for transmission of the transaction, and</claim-text>
<claim-text>if an envelope is required for the transmittable message,
<claim-text>generate an envelope and headers,</claim-text>
<claim-text>attach the processed transaction and the processed data objects to the envelope, and</claim-text>
<claim-text>include the envelope in the transmittable message;</claim-text>
</claim-text>
</claim-text>
<claim-text>a processor, wherein the Processor is configured to execute at least one of the manager module, the transformer module and the converter module; and</claim-text>
<claim-text>a memory, wherein
<claim-text>the memory and the processor are coupled to one another, and</claim-text>
<claim-text>the memory is configured to store at least one of the selecting module, the determining module, the comparing module and the generating module.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. The apparatus of <claim-ref idref="CLM-00020">claim 20</claim-ref> wherein the manager module is further configured to:
<claim-text>find a change to the first set of data since a specified time or event;</claim-text>
<claim-text>translate the change into a first command,</claim-text>
<claim-text>find a record identifier related to the change,</claim-text>
<claim-text>invoke a method for the first command and the record associated with the record identifier, and</claim-text>
<claim-text>produce the first message using a result of said invoking the method.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. The apparatus of <claim-ref idref="CLM-00021">claim 21</claim-ref> wherein the manager module is further configured to:
<claim-text>transform the result of said invoking during a process of capturing the result.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. The apparatus of <claim-ref idref="CLM-00020">claim 20</claim-ref> wherein said transformer module is further configured to:
<claim-text>find a command in the body of the first message, wherein
<claim-text>to find the command comprises
<claim-text>finding a part of the first message,</claim-text>
<claim-text>identifying the part of the first message, and</claim-text>
<claim-text>traversing the part of the first message, if the part is identified as a body of the first message;</claim-text>
</claim-text>
</claim-text>
<claim-text>transform the command in the body of the first message into newly formatted material; and</claim-text>
<claim-text>package the newly formatted material into the second message.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00024" num="00024">
<claim-text>24. The apparatus of <claim-ref idref="CLM-00023">claim 23</claim-ref> wherein said transformer module is further configured to:
<claim-text>process a header portion of the first message; and</claim-text>
<claim-text>pass through non-commands of the body portion of the first message.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00025" num="00025">
<claim-text>25. The apparatus of <claim-ref idref="CLM-00020">claim 20</claim-ref> wherein the converter module is further configured to:
<claim-text>generate processing instructions for the transaction; and</claim-text>
<claim-text>assemble the processed transaction, processed data objects, and processing instructions into the transmittable message.</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>
