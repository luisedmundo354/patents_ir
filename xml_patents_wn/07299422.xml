<us-patent-grant lang="EN" dtd-version="v4.2 2006-08-23" file="US07299422-20071120.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20071106" date-publ="20071120">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>07299422</doc-number>
<kind>B2</kind>
<date>20071120</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>10435070</doc-number>
<date>20030508</date>
</document-id>
</application-reference>
<us-application-series-code>10</us-application-series-code>
<us-term-of-grant>
<us-term-extension>825</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>3</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>9</main-group>
<subgroup>00</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>17</main-group>
<subgroup>00</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>715789</main-classification>
<further-classification>715864</further-classification>
<further-classification>715733</further-classification>
<further-classification>715734</further-classification>
<further-classification>715737</further-classification>
<further-classification>715764</further-classification>
<further-classification>715781</further-classification>
<further-classification>715788</further-classification>
</classification-national>
<invention-title id="d0e53">System and method for transferring personalization information among computer systems</invention-title>
<references-cited>
<citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5737560</doc-number>
<kind>A</kind>
<name>Yohanan</name>
<date>19980400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>715847</main-classification></classification-national>
</citation>
<citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5982520</doc-number>
<kind>A</kind>
<name>Weiser et al.</name>
<date>19991100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6178443</doc-number>
<kind>B1</kind>
<name>Lin</name>
<date>20010100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>6256378</doc-number>
<kind>B1</kind>
<name>Iggulden et al.</name>
<date>20010700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>37910203</main-classification></classification-national>
</citation>
<citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>6269369</doc-number>
<kind>B1</kind>
<name>Robertson</name>
<date>20010700</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>6393462</doc-number>
<kind>B1</kind>
<name>Mullen-Schultz</name>
<date>20020500</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>6651095</doc-number>
<kind>B2</kind>
<name>Barlock et al.</name>
<date>20031100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>6980175</doc-number>
<kind>B1</kind>
<name>Narayanaswami</name>
<date>20051200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>345  23</main-classification></classification-national>
</citation>
<citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2002/0010755</doc-number>
<kind>A1</kind>
<name>Rankin</name>
<date>20020100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>2002/0078367</doc-number>
<kind>A1</kind>
<name>Lang et al.</name>
<date>20020600</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>2002/0111972</doc-number>
<kind>A1</kind>
<name>Lynch et al.</name>
<date>20020800</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>2002/0122076</doc-number>
<kind>A1</kind>
<name>Nakaki</name>
<date>20020900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>345847</main-classification></classification-national>
</citation>
<citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>2002/0143637</doc-number>
<kind>A1</kind>
<name>Shmueli et al.</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>2002/0145632</doc-number>
<kind>A1</kind>
<name>Shmueli et al.</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>2002/0147653</doc-number>
<kind>A1</kind>
<name>Shmueli et al.</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>2002/0147912</doc-number>
<kind>A1</kind>
<name>Shmueli et al.</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>2002/0162009</doc-number>
<kind>A1</kind>
<name>Shmueli et al.</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>2003/0110371</doc-number>
<kind>A1</kind>
<name>Yang et al.</name>
<date>20030600</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>2003/0120750</doc-number>
<kind>A1</kind>
<name>Gaxiola et al.</name>
<date>20030600</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>2003/0169283</doc-number>
<kind>A1</kind>
<name>Rosenberg</name>
<date>20030900</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>2004/0001088</doc-number>
<kind>A1</kind>
<name>Stancil et al.</name>
<date>20040100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>2004/0073787</doc-number>
<kind>A1</kind>
<name>Ban et al.</name>
<date>20040400</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>2004/0107208</doc-number>
<kind>A1</kind>
<name>Seet et al.</name>
<date>20040600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707102</main-classification></classification-national>
</citation>
<citation>
<patcit num="00024">
<document-id>
<country>US</country>
<doc-number>2004/0128389</doc-number>
<kind>A1</kind>
<name>Kopchik</name>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00025">
<document-id>
<country>GB</country>
<doc-number>2387682</doc-number>
<kind>A</kind>
<date>20031000</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00026">
<othercit>PCT, International Preliminary Report On Patentability, Nov. 24, 2005, Wipo.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00027">
<othercit>Written Opinion of the International Searching Authority, Oct. 8, 2004.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
</references-cited>
<number-of-claims>8</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>715864</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715733</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715734</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715737</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715769</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715764</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715781</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715788</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715789</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>3</number-of-drawing-sheets>
<number-of-figures>3</number-of-figures>
</figures>
<us-related-documents>
<us-provisional-application>
<document-id>
<country>US</country>
<doc-number>60379123</doc-number>
<kind>00</kind>
<date>20020508</date>
</document-id>
</us-provisional-application>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20040165008</doc-number>
<kind>A1</kind>
<date>20040826</date>
</document-id>
</related-publication>
</us-related-documents>
<parties>
<applicants>
<applicant sequence="001" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Levine</last-name>
<first-name>David Brett</first-name>
<address>
<city>San Francisco</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="002" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Neumann</last-name>
<first-name>Christopher Jason</first-name>
<address>
<city>San Francisco</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
</applicants>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Fliesler Meyer LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</parties>
<assignees>
<assignee>
<addressbook>
<orgname>Migo Software, Inc.</orgname>
<role>02</role>
<address>
<city>Redwood City</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Hailu</last-name>
<first-name>Tadesse</first-name>
<department>2173</department>
</primary-examiner>
<assistant-examiner>
<last-name>Greene</last-name>
<first-name>Sabrina</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A system and method transfers personalization information to a portable storage device from a first computer system, and then adds personalization information to a second computer system from the portable storage device.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="210.65mm" wi="161.12mm" file="US07299422-20071120-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="149.86mm" wi="157.90mm" file="US07299422-20071120-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="212.77mm" wi="161.97mm" file="US07299422-20071120-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="213.70mm" wi="168.40mm" file="US07299422-20071120-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">RELATED APPLICATIONS</heading>
<p id="p-0002" num="0001">This application claims the benefit of U.S. Provisional Patent Application Number 60/397,123 entitled, “User Interface Personalization Using an External Computer Readable Medium” filed on May 8, 2002 by David Brett Levine and Christopher Jason Neumann, having the same assignee as this application and such application is incorporated herein by reference in its entirety.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0002" level="1">FIELD OF THE INVENTION</heading>
<p id="p-0003" num="0002">The present invention is related to computer software and more specifically to computer application software.</p>
<heading id="h-0003" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0004" num="0003">Computer systems store files and allow users to process those files. The display of the names and other information about files stored on a computer system may be made via a user interface provided by an operating system. Because the number of files stored on a computer system can be significant, various ways of organizing the files stored on a computer system have been employed to make it easier for a user to locate file.</p>
<p id="p-0005" num="0004">For example, the conventional Windows XP operating system employs a hierarchy of folders containing files assigned by users or application programs to one of the folders. This allows files to be logically grouped in a manner that facilitates locating any such file.</p>
<p id="p-0006" num="0005">Although this approach facilitates the location of files from the many files that are stored on the computer system, the user must locate the files in the hierarchy, a cumbersome task. To simplify the task of locating the most used files, some operating systems such as Windows XP, allow users to define shortcuts or other desktop icons that will remain on the operating system “desktop”, which is the main screen displayed by the operating system from which files may be located. Because the shortcuts are on the desktop, they may be accessed by clicking on them, without searching through any hierarchy, an arrangement users find far more convenient than searching for files through layers of a hierarchy and then accessing the file by clicking on it. When a user clicks on the shortcut to the file, the operating system will then start the application program associated with that file and cause the application program to open the file. Although some shortcuts have to be set up by the user in advance of their use, if the file will be used a number of times by the user, it can be worth the overhead of arranging the shortcuts onto the desktop.</p>
<p id="p-0007" num="0006">Although the number of shortcuts that can be displayed on the desktop is limited by the size of the desktop, a user can place onto the desktop a shortcut to his or her most-used files, simplifying the process of accessing the most used files, while allowing the user to use the more-cumbersome hierarchical search method for other files.</p>
<p id="p-0008" num="0007">Another way of making the most-often-used files and other files easily accessible to users is to employ a certain folder that can be used as storage for documents not already categorized into another folder. For example, the conventional “My Documents” folder can be used as a storage area of files that the user uses most often or to which easy accessibility is desired. When the file will no longer be used as often or easy accessibility is no longer needed, the file may be stored in a different folder. This allows files most often used and other files to be stored in a central location, freeing the user from having to remember various locations of the most frequently used documents and other documents to which easy accessibility is desired. However, users may wish to employ the hierarchical structure of folders to store even frequently used documents, or the use of such hierarchical structure may be needed for other purposes, such as a result of the use of a server or to allow others to easily access the files.</p>
<p id="p-0009" num="0008">Files to be processed by a computer system may reside on another computer system accessible via the world wide web. Here again, it can be helpful to allow a user to store the name and URL of web sites most frequently used, or those which may not be frequently used, but web sites the user would like to store for future reference. Thus, a folder of files that describe the name and URL of websites, known as the Favorites folder, may be maintained by the user using a conventional browser by using the browser to visit the site and then storing a name for the site and the URL into a Favorites folder using a command or button on the browser.</p>
<p id="p-0010" num="0009">There have been developed certain devices to allow files to be transferred from one computer system to another. Conventional disks allow the transfer of files from one computer system to another. USB tokens, which are key chain-sized nonvolatile solid state devices that store significant amounts of files, have made it possible to transfer significant amounts of data through a small device that plugs into a conventional USB port and appears to the user as another disk drive, have made it easy for a user to transfer files from computer to computer in a physically secure fashion without having to transmit potentially sensitive files over a network such as the Internet.</p>
<p id="p-0011" num="0010">However, the transfer of files to such devices can be a cumbersome task, requiring the user to manually locate needed files in the hierarchy of files, or give up the organizational benefits of the hierarchy and manage all needed files in a My Documents folder to allow the entire folder to be transferred, both of which are time consuming, cumbersome processes that must be repeated each time files are to be transferred to the device.</p>
<p id="p-0012" num="0011">This cumbersome approach has kept such devices from realizing their full potential for reasons other than the transfer of files containing documents and other information a user may process. For example, conventional browsers store the URL and name of favorite web sites into files, which could be transferred from the computer system to a device and transferred to another computer system for use thereon, allowing access to the user's favorite web sites no matter which computer that user was using. But such transfer is cumbersome. If the user wishes to copy such files to such a device, the user must locate them in the hierarchy and copy them onto the device, then copy them into the proper folder of the other computer system, adding more time and another task to the use of such device.</p>
<p id="p-0013" num="0012">Once the user copies the files to the device, the user's problems are only beginning. The use of the files on the device on a different computer system remain cumbersome. The organizational structure of the files that were transferred is lost, unless the user takes the time to reproduce it in the device, something users do not wish to take the time to do. Even then, the nomenclature of the file structure may be unfamiliar to the user unless the user reproduces the file structure exactly as it is arranged on the computer system from which the files were copied. Even then, the user will lose access to the all of the shortcuts, unless the user arranges them on the computer system to which the device has been transferred, a time consuming, cumbersome task that users will not perform, especially if the use of the device on the second computer system is expected to be temporary.</p>
<p id="p-0014" num="0013">Another problem with a user who visits a computer system setting up shortcuts or favorite web sites on the computer system being visited using a portable storage device is that any existing shortcuts or favorite web sites that existed on the computer system before the user arranges them can interfere with the number of shortcuts that can be placed on the desktop without excessive clutter, or favorite web sites that can be displayed in a manner that can be easily located.</p>
<p id="p-0015" num="0014">Furthermore, once the shortcuts and favorite web sites are set up on the computer system, they must be removed or they will remain on the desktop or list of favorite web sites. A user who only briefly visits a computer system would also have to remove all shortcuts added to the computer system and remove favorite web sites from the list of favorite web sites to show consideration for any other user of the visited computer system and optionally, to protect the security of the names of the shortcuts and the favorite web sites the user had installed. If the user manually attempts to install and then remove shortcuts and favorite web sites, the user may accidentally remove any of these that had existed on the computer system before the user installed his or her own, interfering with the operation of the computer system by the user who had installed the original shortcuts and favorite web sites that may be accidentally removed. For all of these reasons, potable storage devices are inconvenient to use.</p>
<p id="p-0016" num="0015">The conventional MyCompanion product commercially available from the Web site of mycompanion net, which appears to have been announced on May 24, 2002, attempted to solve these problems by creating for the user of a portable storage device a temporary account on a Windows XP machine, and recreating the user's desktop, favorites and MyDocument settings onto that temporary account, and then switching to that account. Favorites and MyDocuments can be copied from a regular computer system and installed with shortcuts so that the user can use the computer system in a manner that is similar to that from which the favorites and MyDocuments were copied. However, the MyCompanion approach works only on operating systems that allow multiple accounts to be set up, excluding Windows ME or Windows 98, for example, and only then on computer systems that have enabled the administrative privileges that allow the initiation of new accounts. This can severely limit the number of computer systems on which MyCompanion can be used. Because a user would not know in advance whether the computer system which he or she may be visiting will have the capabilities needed to use the MyCompanion system, the user would not have any confidence that the system will be available when that user needs it, eliminating much of the value of the system.</p>
<p id="p-0017" num="0016">What is needed is a system and method that can allow certain files stored on a portable storage device to be installed as desktop icons such as shortcuts on a computer system without interference from other desktop icons already on the computer system, can make it easy to find files transferred on the portable storage device, can allow the use of favorite web sites from one computer system by another, without requiring a user to manually set up the desktop icons for the files, without requiring the user to manually arrange the files, without requiring the user to manually transfer favorite web sites to the device from the user's computer system and then transfer them from the device to the computer system being visited and that can easily allow the user to remove the desktop icons and list of favorite web sites that had been installed and restore the desktop and list of favorites to their appearances prior to the installation of the desktop icons and favorite web sites from the portable storage device.</p>
<heading id="h-0004" level="1">SUMMARY OF INVENTION</heading>
<p id="p-0018" num="0017">A system and method transfers personalization information from a first computer system to a portable storage device, and transfers it from the portable storage device to a second computer system, at least attempts to at least suppress the display of one or more existing favorite web sites and then causes desktop icons to one or more files on the portable storage device to be displayed on the second computer system. The transfer may be performed without the creation of a user account for the purpose of transfer or the display of the at least one desktop icon. The system and method may install a hook into a portion of a computer program that manages desktop icons. The portable storage device may communicate via a serial communication interface, such as a USB port. The personalization information transferred may include all of the files in a folder, and the name of the folder from which they are retrieved from the first computer system and the name of the folder into which they are transferred on the portable storage device may be the same. The personalization information may include web site URLs stored as browser favorites.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 1</figref> is a block schematic diagram of a conventional computer system.</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 2</figref> is a block schematic diagram of a system for personalizing a computer system using information from another computer system and a portable storage device according to one embodiment of the present invention.</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 3</figref> is a flowchart illustrating a method of personalizing a computer system using information from another computer system and a portable storage device according to one embodiment of the present invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0006" level="1">DETAILED DESCRIPTION OF A PREFERRED EMBODIMENT</heading>
<p id="p-0022" num="0021">The present invention may be implemented as computer software on a conventional computer system. Referring now to <figref idref="DRAWINGS">FIG. 1</figref>, a conventional computer system <b>150</b> for practicing the present invention is shown. Processor <b>160</b> retrieves and executes software instructions stored in storage <b>162</b> such as memory, which may be Random Access Memory (RAM) and may control other components to perform the present invention. Storage <b>162</b> may be used to store program instructions or data or both. Storage <b>164</b>, such as a computer disk drive or other nonvolatile storage, may provide storage of data or program instructions. In one embodiment, storage <b>164</b> provides longer term storage of instructions and data, with storage <b>162</b> providing storage for data or instructions that may only be required for a shorter time than that of storage <b>164</b>. Input device <b>166</b> such as a computer keyboard or mouse or both allows user input to the system <b>150</b>. Output <b>168</b>, such as a display or printer, allows the system to provide information such as instructions, data or other information to the user of the system <b>150</b>. Storage input device <b>170</b> such as a conventional floppy disk drive or CD-ROM drive accepts via input <b>172</b> computer program products <b>174</b> such as a conventional floppy disk or CD-ROM or other nonvolatile storage media that may be used to transport computer instructions or data to the system <b>150</b>. Computer program product <b>174</b> has encoded thereon computer readable program code devices <b>176</b>, such as magnetic charges in the case of a floppy disk or optical encodings in the case of a CD-ROM which are encoded as program instructions, data or both to configure the computer system <b>150</b> to operate as described below.</p>
<p id="p-0023" num="0022">In one embodiment, each computer system <b>150</b> is a conventional SUN MICROSYSTEMS ULTRA 10 workstation running the SOLARIS operating system commercially available from SUN MICROSYSTEMS, Inc. of Mountain View, Calif., a PENTIUM-compatible personal computer system such as are available from DELL COMPUTER CORPORATION of Round Rock, Texas running a version of the WINDOWS operating system (such as 95, 98, Me, XP, NT or 2000) commercially available from MICROSOFT Corporation of Redmond Washington or a Macintosh computer system running the MACOS or OPENSTEP operating system commercially available from APPLE COMPUTER CORPORATION of Cupertino, Calif. and the NETSCAPE browser commercially available from NETSCAPE COMMUNICATIONS CORPORATION of Mountain View, Calif. or INTERNET EXPLORER browser commercially available from MICROSOFT above, although other systems may be used.</p>
<heading id="h-0007" level="1">System Overview</heading>
<p id="p-0024" num="0023">Referring now to <figref idref="DRAWINGS">FIG. 2</figref>, a system <b>200</b> for using information from a computer system <b>201</b>A and a portable storage device <b>202</b> to personalize another computer system <b>201</b>B is shown according to one embodiment of the present invention. Computer systems <b>201</b>A and <b>201</b>B may be computer systems that are not coupled via a network, or to which access to personalization information on computer system <b>201</b>A is not available from computer system <b>201</b>B, either because there is not physical connection, or because the user does not have access to the personalization information on computer system <b>201</b>A when the user uses computer system <b>201</b>B.</p>
<p id="p-0025" num="0024">Personalization information includes information regarding the appearance, operation of, or organization of some or all of the files available on, a computer system that may be altered by the user and persists from session to session, in between which, the computer can be turned off and then restarted. Some or all of the personalization information may be displayed differently from one user to another if the computer supports multiple user accounts. The personalization information described herein includes desktop icons such as shortcuts on the desktop , the arrangement of files on the desktop and in folders and means of accessing them, and Web site names and URLs used by a conventional browser, such as those described above, to display favorite web sites. However, in other embodiments, personalization information can include other information, such as the applications used to control e-mail, web access and printing capabilities, for example.</p>
<p id="p-0026" num="0025">System <b>200</b> includes a portable storage device <b>202</b>, such as a disk, a USB storage token (e.g. a device containing nonvolatile memory coupled to a USB port, such as the USB Memory Key commercially available from Dell Computer Systems of Round Rock, Tex., or any other device that may be coupled to a computer, and then removed from that computer in a short amount of time, such as ten seconds, relative to the removal of a permanent storage device, such as the main disk drive in a computer system. In one embodiment, the portable storage device <b>202</b> is a device that stores computer files, but is not wired to the power supply either directly, or via a single connector accessible only inside the case of the computer system to which it is attached, such as a disk drive. However, the portable storage device <b>202</b> can use the power supply of a computer system while it is connected to one, such as a USB storage token, drawing power from a power supply through a connector accessible without removing the case of the computer system.</p>
<p id="p-0027" num="0026">In one embodiment, portable storage device <b>202</b> contains a communication interface <b>210</b>, which includes a conventional USB hardware interface, as well as software that allows communication interface <b>210</b> to be recognized by, and communicate with, a computer system <b>201</b>A or <b>201</b>B, to which it is connected at the time. Communication interface <b>210</b> includes input/output <b>209</b>, which may be a conventional USB connector. If portable storage device <b>202</b> contains a computer disk, communication interface <b>210</b> may not contain such hardware component or may not be present at all.</p>
<p id="p-0028" num="0027">In one embodiment, when the portable storage device <b>202</b> is inserted into a computer system <b>201</b>A, communication interface <b>210</b> communicates with communication interface <b>206</b>A (which may be a conventional USB interface, disk drive, or other conventional communication interface) and causes the operating system <b>204</b>A of the computer system <b>201</b>A to recognize the portable storage device <b>202</b> as if it were a conventional disk drive coupled to computer system <b>201</b>A. The user can then use conventional operating system commands to direct operating system <b>204</b>A to transfer files from the file storage (not shown) of computer system <b>201</b>A to file storage <b>214</b> of portable storage device <b>202</b>. In one embodiment, file storage <b>214</b> is a portion of flash memory or other storage of portable storage device <b>202</b>.</p>
<p id="p-0029" num="0028">In one embodiment, when operating system <b>204</b>A recognizes the portable storage device <b>202</b>, it requests from communication interface <b>210</b> the name of a program to run and then runs that program, which resides in portable storage device <b>202</b>. In such embodiment, user interface manager <b>212</b> has registered itself to communication interface <b>210</b> as the program that should be run, and operating system <b>204</b>A runs user interface manager <b>212</b> when communication interface <b>210</b> so instructs. Otherwise, a user can use the operating system <b>204</b>A to operate user interface manager <b>212</b> using conventional operating system commands, such as by typing to operating system <b>202</b>A the drive designator used for the portable storage device <b>202</b> and the name of user interface manager <b>212</b> or using a graphical user interface that is part of operating system <b>202</b>A such as the conventional WINDOWS EXPLORER program to start the program that corresponds to user interface manager <b>212</b>.</p>
<heading id="h-0008" level="1">Transferring Personalization Information and Other Files to the Portable Storage Device</heading>
<p id="p-0030" num="0029">User interface manager <b>212</b> then displays a user interface via a conventional keyboard/monitor/mouse input/output <b>211</b> of communication interface <b>210</b> to allow the user to do any of the following: manage the transfer of files, copy personalization information from the computer system <b>201</b>A or <b>201</b>B with which it is in communication, provide personalization information to such computer and change or suppress the display of certain prior personalization information on that computer system, restore personalization information to the way it was before personalization information was provided to such computer system as described herein, or terminate the operation of user interface manager <b>212</b>. In the description herein, the computer system from which the personalization information will be retrieved is computer system <b>201</b>A and the computer system to which the personalization information will be provided is computer system <b>201</b>B, however, files and the like may be transferred to portable storage device <b>202</b> from several other computer systems (not shown), and personalization information may be provided to several other computer systems (not shown).</p>
<heading id="h-0009" level="1">Manage the Transfer of Files</heading>
<p id="p-0031" num="0030">If the user selects the option to manage the transfer of files, user interface manager <b>212</b> signals file transfer manager <b>222</b>. File transfer manager <b>222</b> provides a user interface to the user via input/output <b>211</b> to allow the user to identify the files that are to be transferred to the portable storage device <b>202</b> when the user requests the transfer of personalization information from the computer system <b>201</b>A to the portable storage device <b>202</b>.</p>
<p id="p-0032" num="0031">In one embodiment, a user can identify files using any conventional file identification method, such as specifying files that meet any of any number of criteria. Criteria may include the folder in which a file resides, a parent folder of such a folder, the name or extension of a file, the date a file was last accessed or modified, or any other criteria.</p>
<p id="p-0033" num="0032">In one embodiment, the user can also use file transfer manager <b>222</b> to specify how desktop icons such as shortcuts will be handled for files. In one embodiment, a user can instruct file transfer manager <b>222</b> to restrict or allow the installation of desktop icons onto the desktop for files that are transferred to portable storage device <b>202</b> as described above. In one embodiment, a user can instruct file transfer manager <b>222</b> to include or exclude files corresponding to desktop icons (e.g. the shortcut files themselves) from being transferred with other files when the file that is the target of the desktop icon matches the criteria specified for the transfer of files as described above.</p>
<p id="p-0034" num="0033">In one embodiment, certain prespecified criteria are stored by file transfer manager <b>222</b>. For example, files changed in the last 30 days that are stored in the Desktop (and not sub folders) and files and folders in the Favorites folder may each be prespecified criteria so that all documents meeting those criteria will be retrieved by file transfer manager <b>222</b> as described below.</p>
<p id="p-0035" num="0034">File transfer manager <b>222</b> internally stores the criteria and other instructions described herein. When the user has completed specifying the criteria and instructions for the transfer of files, the user indicates to file transfer manager <b>222</b>, file transfer manager <b>222</b> signals user interface manager <b>212</b> to provide the user interface described above.</p>
<heading id="h-0010" level="1">Copy Personalization Information</heading>
<p id="p-0036" num="0035">If the user selects the option to copy personalization information from computer system <b>201</b>A to portable storage device <b>202</b>, user interface manager <b>212</b> signals personalization information retriever <b>220</b>. Personalization information retriever <b>220</b> signals file transfer manager <b>222</b>.</p>
<heading id="h-0011" level="1">Transfer Files</heading>
<p id="p-0037" num="0036">File transfer manager <b>222</b> identifies files accessible to computer system <b>201</b>A that match the criteria and instructions specified by the user as described above and copies the files into removable storage device <b>214</b>.</p>
<p id="p-0038" num="0037">Files accessible to computer system <b>201</b>A may reside on computer system <b>201</b>A or on a different computer system such as a server (not shown) coupled to computer system <b>201</b>A. File transfer manager <b>222</b> requests from operating system <b>204</b>A all files that meet the criteria and match the instructions it has internally stored as described above and stores them in file storage <b>214</b> via communication interface <b>210</b>.</p>
<p id="p-0039" num="0038">Before file transfer manager <b>222</b> stores files, it may build folders that do not already exist in file storage <b>214</b> that match the entire source UNC and/or path names of the files as they are retrieved from computer system <b>201</b>A. To identify whether a folder should be built, file transfer manager <b>222</b> compares the source path, optionally including a UNC name, of the file it retrieves with the folders that exist in file storage and identifies any portion or all of the path that does not exist in file storage, and then creates that portion or all of the path. For example, if a file meeting the criteria and instructions is retrieved from c:\games\hopscotch\ and a folder named “c” with a subfolder of “games” exists in file storage <b>214</b>, file transfer manager adds as a subfolder of the “games” folder in file storage <b>214</b> a folder named “hopscotch” and stores the files retrieved from c:\games\hopscotch into the c\games\hopscotch folder in file storage <b>214</b>. In one embodiment, the “c” folder is itself stored as a folder having a name that identifies the computer from which the files were transferred, which is stored as a subfolder to a folder named “Synchronized Computers”, which is a folder on the drive letter corresponding to the portable storage device <b>202</b>.</p>
<p id="p-0040" num="0039">When file transfer manager <b>222</b> has completed transferring all of the files that match the criteria and instructions, file transfer manager <b>222</b> signals personalization information retriever.</p>
<p id="p-0041" num="0040">When signaled, personalization information retriever <b>220</b> copies into a c:\windows\favorites folder in file storage <b>214</b> the contents of the “Favorites” folder, “Favorites”, (a subfolder of the computer name folder as described above) containing the name and URL of favorite web sites used by the browser (not shown) on computer system <b>201</b>A to display and obtain the URL of the user's favorite web sites. The description herein applies to MICROSOFT WINDOWS 95/98/ME/XP/2000 systems, however, other similar approaches may be used for other operating systems. Using WINDOWS or any other operating system, another folder may be designated by the user using user interface manager <b>212</b> in place of the folder described above and user interface manager <b>212</b> internally stores such designation for subsequent use, providing such names as required to transfer the files, or the folder containing favorite Web sites may be retrieved (e.g. from a registry) by personalization information retriever <b>220</b>.</p>
<p id="p-0042" num="0041">When personalization information retriever <b>220</b> has completed retrieving the personalization information as described above, it signals user interface manager <b>212</b>, which displays the user interface described above and informs the user that portable storage device <b>202</b> may be safely removed from computer system <b>201</b>A.</p>
<p id="p-0043" num="0042">The user may then use the user interface provided by user interface manager <b>212</b> to terminate the operation of user interface manager <b>212</b>. The user may optionally transfer additional files to, or perform other conventional file or folder operations on the folders in, file storage <b>214</b> of portable storage device <b>202</b> using operating system (for example, WINDOWS EXPLORER) <b>201</b>A as described above, and the user may remove the portable storage device <b>202</b> to physically move it and to cause it to terminate its communication with computer system <b>201</b>A.</p>
<p id="p-0044" num="0043">The user may then transfer portable storage device <b>202</b> to another computer system <b>202</b>B which also contains communication interface <b>206</b>B (not shown, but similar to communication interface <b>206</b>A) and operating system <b>204</b>B (also not shown, but a conventional operating system similar to operating system <b>204</b>A). In one embodiment, the user connects portable storage device <b>202</b> to computer system <b>201</b>B by coupling input/output <b>209</b> of communication interface <b>210</b> to input/output <b>205</b>B of communication interface <b>206</b>B and operating system <b>204</b>B recognizes the portable storage device <b>202</b> in the same manner as operating system <b>204</b>A described above.</p>
<heading id="h-0012" level="1">Providing Personalization Information—Overview</heading>
<p id="p-0045" num="0044">The user then starts user interface manager <b>212</b> (or user interface manager <b>212</b> is “autorun”ed by operating system <b>204</b>B when it recognizes portable storage device <b>202</b>) as described above and user interface manager <b>212</b> provides the user interface as described above. If the user selects the option to provide personalization information to the computer system <b>201</b>B, user interface manager <b>212</b> signals ID finder <b>232</b> of DLL injector <b>230</b> to inject at least a part of DLL injector <b>230</b> into the application that manages the desktop and file system.</p>
<heading id="h-0013" level="1">Inject the DLL</heading>
<p id="p-0046" num="0045">To inject itself as a hook to the application managing the desktop and file system, when signaled by user interface manager <b>212</b>, DLL injector <b>230</b> adds a hook from that application to a portion of itself as described in more detail below. The process of installing a Windows hook is described in Richter, <i>Programming Applications for Microsoft Windows</i>, (Microsoft Press, 1999) (including Chapter 22) and that book is hereby incorporated by reference in its entirety. DLL injector <b>230</b> is made up of various components <b>232</b>-<b>238</b>, each of which will now be described.</p>
<heading id="h-0014" level="1">Find the Desktop Listview Window and Thread ID</heading>
<p id="p-0047" num="0046">ID finder <b>232</b> finds the thread identifier of the application that installed the desktop listview window control, then calls hook manager <b>234</b> to install a Windows hook as described in more detail below and provides this thread identifier. Hook manager <b>234</b> will set in motion the installation of a windows hook, and the creation of a hidden window. ID finder <b>232</b> will then test whether the hidden window has been created and stores the handle to this hidden window, all of which will now be described.</p>
<p id="p-0048" num="0047">To find the thread identifier of the application that installed the desktop listview window control, ID finder <b>232</b> first identifies the window handle of the child of the child of the window having a class of “ProgMan” in some operating systems, or the child of the child of the Window having the class of “WorkerW” for other operating systems. In one embodiment, to find the handle to such a window, ID finder <b>232</b> requests the handle of a window with the class “ProgMan” by calling the FindWindow Win32 function call (unless otherwise noted herein, all Win32 procedures and function calls are made to operating system <b>204</b>B) and if the function call returns a value of “null”, requests the handle to the window with the class “WorkerW”, using NULL as the other parameter. Once the handle to the ProgMan or WorkerW window is obtained, ID finder <b>232</b> uses the conventional Win32 function GetFirstChild with the handle to the ProgMan or WorkerW window to obtain a handle to the first child window and then calls the GetFirstChild function again with the child window it receives to obtain the child of the child of either the ProgMan or WorkerW window, which ID finder <b>232</b> verifies is of the class “SysListView32”.</p>
<p id="p-0049" num="0048">Using the handle to the child of the child window so located, ID finder <b>232</b> identifies the thread identifier to that window by passing the handle to the window as a parameter to the conventional Win32 function GetWindowThreadProcessID and receives the thread identifier of the process that created the desktop listview window control.</p>
<p id="p-0050" num="0049">ID finder <b>232</b> provides the thread identifier of the process that created the desktop listview window control to hook manager <b>234</b>, with a parameter to instruct it to install a hook, and hook manager <b>234</b> receives and stores these items, and performs certain functions described below and sets in motion the creation of a hidden window as described below.</p>
<p id="p-0051" num="0050">ID finder <b>232</b> sleeps via operating system <b>204</b>B for one second and then performs the Win32 FindWindow function using the expected name of the hidden window. If the function returns null, ID finder repeats the process of sleeping and calling the Win32 FindWindow function until it locates the handle to the window or the number of attempts reaches a threshold, such as ten tries, at which time an error message is provided by ID finder <b>232</b>. If the handle to the hidden window is returned, ID finder <b>232</b> retains the handle to the hidden window and checks the value of the variable that describes whether the server is available as described below. In one embodiment, this check is made via a call to a portion of hidden window creator <b>236</b> that checks the variable and reports its status. If the server is available, ID finder <b>232</b> provides the handle of the hidden window to user interface manager <b>212</b>.</p>
<heading id="h-0015" level="1">Install Hook to Application That Created the Desktop Listview Window Control</heading>
<p id="p-0052" num="0051">In one embodiment, hook manager <b>234</b> is arranged as a conventional DLL and stores the thread identifier of the application that created the desktop listview window control it receives. Hook manager <b>234</b> receives from operating system <b>204</b>B the thread identifier of itself.</p>
<p id="p-0053" num="0052">Hook manager <b>234</b> then sends the conventional SetWindowsHookEx Win32 function to operating system <b>204</b>B and includes the WH_GETMESSAGE constant parameter, the address of hidden window creator <b>236</b>, the handle to its own instance and the thread to the application that created the desktop listview window control it received as described above. Hook manager <b>234</b> receives a handle to the hook in response to the function and stores the handle.</p>
<p id="p-0054" num="0053">Hook manager <b>234</b> sets a variable, that indicates whether the hook has not been used, to true (or such variable is initialized to true when hook manager is called or at another time). Hook manager <b>234</b> then uses the conventional Win32 PostThreadMessage <b>222</b> to post a WM_NULL message to the thread identifier of the application that created the desktop listview window control, repeatedly, up to ten times, until it receives a true return value <b>224</b>. Hook manager <b>234</b> provides a true value to desktop icon manager <b>240</b> if the true return value is received in response to the PostThreadMessage <b>226</b>.</p>
<heading id="h-0016" level="1">Create the Hidden Window Upon the First Call</heading>
<p id="p-0055" num="0054">Operating system <b>204</b>B will call hidden window creator <b>236</b> as a result of the PostThreadMessage described above. Hidden window creator <b>236</b> may be a part of the DLL that is also part of hook manager <b>234</b>, and therefore has access to the variables stored by hook manager <b>234</b> or otherwise has access to them. Hidden window creator <b>236</b> retrieves the handle to the hook stored by hook manager <b>234</b> and also retrieves the variable indicating whether the hook has been used that was initialized as described above.</p>
<p id="p-0056" num="0055">If the hook has not been used and a handle to the hook has been stored, hidden window creator <b>236</b> sets the variable indicating that the hook has not been used to a value of false to prevent subsequent instantiation of a hidden window as described herein. Hidden window creator <b>236</b> then checks to make sure that a hidden window that is used as described below does not exist. To make this determination, hidden window creator <b>236</b> calls the conventional Win32 FindWindow function with the name of the hidden window and null for the class. If no such window exists, the FindWindow function will return a null value.</p>
<p id="p-0057" num="0056">If no such window with the name or the hidden window exists as described above, hidden window creator <b>236</b> creates the window using the Win32 function CreateDialog with parameters of the handle to the instance of the DLL retrieved and stored by hook manager <b>234</b>, and a dialog resource id for a hidden dialog (which includes the name of the hidden window that will be used to locate the hidden window as described herein), null as the parent window parameter, and a callback function pointer to hidden window callback manager <b>238</b>, described below. Hidden window creator <b>236</b> then repeats the FindWindow procedure described above to find the handle of the hidden window.</p>
<p id="p-0058" num="0057">Hidden window creator <b>236</b> internally stores the handle to the hidden window and calls the Win32 PostThreadMessage function, with the thread identifier of hook manager <b>234</b> stored by hook manager <b>234</b> as described above, WM_NULL as the message parameter, and zeros as the wparam and lparam parameters. A “server available” variable, initialized to false at the time hidden window creator <b>236</b> is run or at some other time, is then set to true that may be tested by user interface manager <b>212</b> and hidden window creator <b>236</b> returns to operating system <b>204</b>B the value returned by calling the CallNextHookEx using the handle to the hook obtained as described above, and the nCode, wParam and lparam parameters received by hidden window creator <b>236</b> from the operating system.</p>
<heading id="h-0017" level="1">Overview of the Operation of Hidden Window Callback Manager</heading>
<p id="p-0059" num="0058">Hidden window callback manager <b>238</b> is part of the DLL containing hook manager <b>234</b> and message handler <b>236</b> and therefore has access to their internally stored variables. Hidden window callback manager <b>238</b> responds to WM_CLOSE messages by closing the hidden window using the conventional Win32 DestroyWindow function. Hidden window callback manager <b>238</b> responds to WM_APP messages with an lparam value greater than zero by calling desktop icon saver <b>242</b> and providing the handle of the desktop listview window control obtained as described above. Hidden window callback manager <b>238</b> responds to WM_APP messages with an lparam value equal to zero by calling desktop icon position restorer <b>270</b> and providing the handle of the desktop listview window control obtained as described above, each described in more detail below.</p>
<heading id="h-0018" level="1">Initiate Transfer of Personalization Information</heading>
<p id="p-0060" num="0059">When DLL injector <b>230</b> has injected at least the part of itself as a hook as described above, desktop icon manager <b>240</b> is signaled as described above. Desktop icon manager then performs the transfer of personalization information as will now be described.</p>
<heading id="h-0019" level="1">Hide Existing Desktop Icons</heading>
<p id="p-0061" num="0060">When signaled as described above, desktop icon manager <b>240</b> calls hidden window callback manager <b>238</b> using a WM_APP message with a parameter greater than zero, such as 1, which causes hidden window callback manager <b>238</b> to call desktop icon saver <b>242</b> to save the location of each icon on the desktop and suppress the display of each such icon.</p>
<p id="p-0062" num="0061">Desktop icon saver <b>242</b> receives the handle of the desktop listview window control from hidden window callback manager <b>238</b> as described above. Desktop icon saver <b>242</b> requests the screen width and height via the conventional Win32 GetDeviceCaps function using the desktop device context and uses the Horzres and Vertres parameters to obtain the width and height of the screen in pixels. Desktop icon saver <b>242</b> defines two new work area rectangles, which are specified as a 2 element array of conventional Windows RECT structures. The first rectangle of type RECT represents pixels on the screen, using the same coordinate system (top left is 0,0) as is the convention, and the second rectangle of type RECT represents an alternate screen, with the top left coordinate one pixel greater than the screen width and bottom right coordinate 100 pixels greater than the screen width and equal to the screen height. Desktop icon saver <b>242</b> sets the work areas as areas to be used for the display by using the conventional Win32 ListView_SetWorkAreas function with parameters, the window handle of the listview control, 2 (to indicate the two work areas) and a pointer to the array of two RECTs.</p>
<p id="p-0063" num="0062">Desktop icon saver <b>242</b> then obtains a count of items in the desktop listview window control using the conventional Win32 function ListView_GetItemCount with the handle to the desktop listview window control received by desktop icon saver <b>242</b> as described above and stores this count (if the count is zero, desktop icon saver <b>242</b> displays an error message and terminates).</p>
<p id="p-0064" num="0063">Desktop icon saver <b>242</b> then deletes the registry locations that may have been previously used to store the desktop icon locations by calling the conventional Win32 RegDeleteKey function with HKEY_CURRENT_USER and variable containing the registry location, which in one embodiment, is</p>
<p id="h-0020" num="0000">“Software\FirstPersonSoftware\PocketLogin\local\Prefs\Dips”</p>
<p id="p-0065" num="0064">Desktop icon saver <b>242</b> then obtains the text and position of each item in the desktop listview window control and stores them in the registry. For each listview item (which desktop icon saver identifies using different item numbers, from 0 to the number of items in the desktop listview window control less 1), to obtain the listview text, desktop icon saver <b>242</b> calls the conventional Win32 function ListView_GetItemText and to obtain the position, desktop icon saver <b>242</b> calls the conventional Win32 function, ListView_GetItemPosition. To create a registry key and value, desktop icon saver calls the conventional Win32 function RegCreateKeyEx and stores the name of the item as the value and the position of the item as the value data, or stores the name and position using other combinations of one or more keys, values or both.</p>
<p id="p-0066" num="0065">For each item, desktop icon saver <b>242</b> compares whether certain characteristics of the desktop icon (e.g. the name, or the extension of the target) correspond to a list of characteristics of icons that should remain on the desktop (e.g. icons named Internet Explorer, Network Neighborhood, etc. should remain.). If the characteristics of the desktop icon do not correspond to characteristics of those that should remain on the desktop, desktop icon saver <b>242</b> calls the conventional Win32 ListView_SetItemPosition function with a vertical coordinate equal to the vertical coordinate of the item, but uses a horizontal coordinate that is 64 pixels to the right of the screen, thus removing such desktop icons while preserving the others on the screen.</p>
<p id="p-0067" num="0066">Desktop icon saver <b>242</b> then closes the registry key by calling the conventional Win32 function RegCloseKey and returns control to desktop icon manager <b>240</b>.</p>
<heading id="h-0021" level="1">Remove the Hook</heading>
<p id="p-0068" num="0067">In one embodiment, desktop icon manager <b>240</b> then signals hook manager <b>234</b> to remove the Windows hook. When so signaled, hook manager checks the variable storing the handle to the hook, and if it does not exist (e.g. has a zero value), returns control to desktop icon manager <b>240</b>. If the handle to the hook exists, hook manager <b>234</b> finds the hidden window as described above and destroys it. Hook manager then calls the conventional Win32 function, UnhookWindowsHookEx, and reinitializes the variables that store the handle to the hook, the variable indicating whether the hook has been used, and the variable indicating the server is available.</p>
<p id="p-0069" num="0068">In another embodiment, desktop icon manager <b>240</b> does not remove the Windows hook. Instead, each time operating system <b>204</b>B receives any sort of message that causes it to redraw some or all of the screen, such messages are received by hidden window creator <b>236</b>, which signals desktop icon manager <b>240</b>, which signals desktop icon saver <b>242</b> to repeat the process of moving off-screen the originally-displayed desktop icons from the desktop (as described above but does not repeat the process of saving them to the registry) to ensure that they do not reappear when the screen is refreshed.</p>
<p id="p-0070" num="0069">Desktop icon manager <b>240</b> then obtains the drive designator of the portable storage device <b>202</b> using the conventional Win32 function GetModuleFileName, and signals desktop icon inserter <b>244</b> with the drive designator of portable storage device <b>202</b>.</p>
<heading id="h-0022" level="1">Insert Desktop Icons</heading>
<p id="p-0071" num="0070">When signaled by desktop icon manager <b>240</b>, desktop icon inserter <b>244</b> builds and inserts onto the desktop of the computer system <b>201</b>B a desktop icon (e.g. a shortcut) to each user file that is stored in the My Computer folder of file storage <b>214</b>. In addition, desktop icons that were placed on the desktop of computer system <b>201</b>A that pointed to a file that was transferred into file storage <b>214</b> as described above are built and added to the desktop of computer system <b>201</b>B by desktop icon inserter <b>244</b>, but such desktop icons have a target of the file in file storage <b>214</b>. To add an icon to the desktop, desktop icon inserter <b>244</b> requests an instance of a COM object implementing the IShellLink of operating system <b>204</b>B to add it to the desktop.</p>
<p id="p-0072" num="0071">In one embodiment, desktop icon inserter <b>244</b> also adds to the desktop a desktop icon titled “My Computer”, with a target as the My Computer folder of removable storage device <b>202</b> that holds files transferred by file transfer manager <b>222</b>.</p>
<p id="p-0073" num="0072">When desktop icon inserter <b>244</b> has completed building and inserting a desktop icon for each of the files described above onto the desktop of computer system <b>201</b>B, desktop icon inserter <b>244</b> signals desktop icon manager <b>240</b>, which signals favorites hider/mover <b>260</b> and provides the drive designator of the portable storage device <b>202</b>.</p>
<heading id="h-0023" level="1">Hide/Move Favorites</heading>
<p id="p-0074" num="0073">When signaled by my documents adder <b>252</b>, favorites hider/mover <b>260</b> saves the value data from the entry in the registry corresponding to the Favorites directory and adjusts that value data to point to the Favorites directory in file storage <b>214</b> into which the favorites files from computer system <b>201</b>A were stored as described above.</p>
<heading id="h-0024" level="1">Restoring the Computer System</heading>
<p id="p-0075" num="0074">The user may then use computer system <b>201</b>B with the personalization information installed as described above. When the user is ready to remove the portable storage device from computer system <b>201</b>B, the user signals user interface manager <b>212</b> to remove the personalization information. When signaled by the user to remove personalization information, user interface manager <b>212</b> signals desktop icon manager <b>240</b> with an indication to restore the desktop and Favorites folder. Desktop icon manager <b>240</b> calls hook manager <b>234</b> to reinstall the hook as described above, and then calls hidden window callback manager <b>238</b> using a WM_APP message with a parameter equal to zero. Hidden window callback manager <b>238</b> calls desktop icon position restorer <b>270</b> and provides the handle of the desktop listview window control obtained as described above.</p>
<heading id="h-0025" level="1">Restore Desktop Icons</heading>
<p id="p-0076" num="0075">When called by hidden window callback manager <b>238</b>, desktop icon position restorer <b>270</b> receives the handle to the desktop listview window control from hidden window callback manager <b>238</b>, obtains the drive designator of the portable storage device <b>202</b> as described above, and requests, (via the Win32 DeleteFile function) the operating system <b>204</b>B to remove the shortcut or other similar files corresponding to the desktop icons installed by desktop icon inserter <b>244</b> (which desktop icon position restorer <b>270</b> can identify as such because they point to files having the drive designator of the portable storage device <b>202</b>, and in another embodiment, desktop icon restorer uses a list of icons that were inserted by desktop icon inserter <b>244</b> that desktop icon inserter <b>244</b> builds and stores into file storage <b>214</b> as it builds the desktop icons as described above) and then calls the conventional Win32 function ListView_SetWorkAreas using as parameters, the handle to the desktop listview window control it receives, 0 and null so as to restore the work areas to their state before they were altered as described above. Desktop icon position restorer <b>270</b> then opens the registry key via the conventional Win32 function RegOpenKeyEx. Desktop icon position restorer <b>270</b> retrieves the existing window style using the conventional Win32 function GetWindowStyle, using the desktop listview window control handle as a parameter, stores the existing window style, and then disables the desktop listview's auto arrange functionality via the conventional Win32 function call SetWindowLong with the existing window style bitwise anded with the conventional Win32 constant value ˜LVS_Autoarrange as a parameter to that function.</p>
<p id="p-0077" num="0076">For each desktop listview item, desktop icon position restorer <b>270</b> retrieves the name of the item using the conventional Win32 function ListView_GetItemText and uses the item text to retrieve the corresponding position from the registry and the position for that item is returned in the desktop listview window control to its value from the registry using the conventional Win32 setListViewItemPosition function, and the coordinates from the registry.</p>
<p id="p-0078" num="0077">Desktop icon position restorer <b>270</b> then restores the style to the desktop listview window control using the conventional Win32 function, SetWindowLong and the original style it retrieved as described above. Desktop icon position restorer <b>270</b> then calls the conventional Win32 function, SaveListViewItemPositions and returns control to Desktop icon manager <b>240</b> via hidden window callback manager <b>238</b>.</p>
<p id="p-0079" num="0078">Desktop icon manager <b>240</b> destroys the hidden window by sending a WM_CLOSE message to hidden window callback manager <b>238</b> as described above. Desktop icon manager <b>240</b> then signals user interface manager <b>212</b>, which signals favorites restorer <b>272</b>.</p>
<heading id="h-0026" level="1">Restore Favorites</heading>
<p id="p-0080" num="0079">When signaled by user interface manager <b>212</b>, favorites restorer <b>272</b> resets the favorites folder to point to the folder stored by favorites adjustor <b>260</b>, and then signals user interface manager <b>212</b>, which indicates that the removable storage device <b>202</b> may be removed from the computer system <b>201</b>B.</p>
<heading id="h-0027" level="1">Synchronize Files</heading>
<p id="p-0081" num="0080">In one embodiment, the user may then return the portable storage device <b>202</b> to computer system <b>201</b>A and select an option provided by user interface manager <b>212</b> to restore the files changed on file storage <b>214</b> to the file storage area from which the file was retrieved as described above. To perform such restoration, in one embodiment, user interface manager <b>212</b> signals file transfer manager to restore files <b>222</b>. File transfer manager <b>222</b> requests operating system <b>204</b>A to copy all files from their locations in file storage <b>202</b> to the corresponding locations in the file storage locations accessible to computer system <b>201</b>A. In another embodiment, file transfer manager <b>222</b> transfers only those files from file storage <b>214</b> that have properties (e.g. modification date and time, size, etc) different from their corresponding files on storage locations accessible to computer system <b>201</b>A.</p>
<p id="p-0082" num="0081">File transfer manager <b>222</b> then synchronizes the files in the favorites folder in file storage <b>214</b> with the folder used for favorites on computer system <b>201</b>A by deleting files in the favorites folder used for favorites on computer system <b>201</b>A that are not in the favorites folder in file storage <b>214</b> and copying to the folder used for favorites by computer system <b>201</b>A files that are in the favorites folder in file storage <b>214</b> but not in the folder used for favorites by computer system <b>201</b>A or files in both locations that have different properties.</p>
<p id="p-0083" num="0082">When file transfer manager <b>222</b> completes synchronizing the files and favorites, file transfer manager <b>222</b> signals user interface manager <b>212</b>, which provides the user interface described above.</p>
<p id="p-0084" num="0083">Referring now to <figref idref="DRAWINGS">FIG. 3</figref>, a method of personalizing a computer system using personalization information from another computer system and information on a portable storage device is shown according to one embodiment of the present invention. One or more file criteria and instructions may be received <b>310</b> to identify which files should be transferred for storage on a portable storage device. A command to retrieve personalization information may be received <b>312</b> as described above. In response to the command received in step <b>312</b>, steps <b>314</b>-<b>322</b> are performed.</p>
<p id="p-0085" num="0084">Files may be retrieved <b>314</b> from a computer to which the portable storage device is in communication and stored <b>316</b> on the portable storage device. Step <b>316</b> may include reproducing the folder structure from which the files were retrieved, including all parent folders. One or more favorites files may be retrieved <b>318</b> from a computer to which the portable storage device is in communication and stored <b>320</b> on the portable storage device. The user may be instructed <b>322</b> that it is safe to remove the portable storage device.</p>
<p id="p-0086" num="0085">The user may then disconnect the portable storage device from the computer system to which it is connected, transfer the portable storage device, and then connect it to a different computer system <b>324</b>. A request is received <b>326</b> to transfer personalization information to the computer system to which the portable storage device has been installed. Steps <b>328</b>-<b>344</b> are performed in response to this command.</p>
<p id="p-0087" num="0086">A DLL may be injected <b>328</b> as a windows hook into the operating system as described above. Some or all of the existing desktop icons are hidden, moved, or both as described above <b>340</b>. Shortcuts or other desktop icons for files in the My Documents folder on the portable storage device and are installed <b>342</b> as described above and other desktop icons may be installed as described above, such as icons corresponding to icons on the desktop on the first computer system that point to files that meet the file criteria specified above. An icon representing the portable storage device may be installed as part of step <b>342</b>.</p>
<p id="p-0088" num="0087">The registry value data corresponding to the browser favorites folder is saved and then adjusted to point to the folder to which the favorites were stored on the portable storage device <b>344</b>.</p>
<p id="p-0089" num="0088">A command is received <b>346</b> to restore the personalization information of the computer system to which the portable storage device is in communication, and steps <b>348</b>-<b>352</b> are performed in response. Desktop icons added in step <b>332</b> are deleted <b>348</b> and desktop icons hidden, moved or both in step <b>330</b> are un-hidden, moved back to their original locations, or both <b>350</b>.</p>
<p id="p-0090" num="0089">The registry entry for the folder holding the favorites files adjusted in step <b>344</b> is restored <b>352</b> to point to the folder that it pointed to prior to step <b>344</b>.</p>
<p id="p-0091" num="0090">The user may then return the portable storage device to the computer from which the files were copied. A command may be received <b>354</b> to synchronize the files. Files and favorites are synchronized <b>356</b>, <b>358</b> as described above.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method of personalizing a computer system, comprising:
<claim-text>transferring from a first computer system to a portable storage device, personalization information comprising at least one of (1) a web site designated by a user, (2) a file stored at the first computer system, (3) a folder defined at the first computer system, and (4) an email retrieved at the first computer system;</claim-text>
<claim-text>transferring at least a portion of the personalization information from the portable storage device to a second computer system;</claim-text>
<claim-text>suppressing display of a user interface at a second computer system upon connecting the portable storage device to the second computer system, wherein suppressing said display includes hiding at least one existing desktop icon that would normally have been displayed on the second computer had the portable storage device not been connected to the second computer, and instead displaying at least one icon associated with the personalization information retrieved from the portable storage device, wherein suppressing the display further includes:
<claim-text>defining a first area rectangle and a second area rectangle, wherein the first area rectangle represents pixels on a screen using a same coordinate system as said screen and wherein the second area rectangle represents an alternate screen; and</claim-text>
</claim-text>
<claim-text>causing the second computer system to use the personalization information retrieved from the portable storage device in place of information that otherwise would be provided on the second computer had the portable storage device not been connected to the second computer.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the causing step includes transfer of the personalization information from the portable storage device to the second computer system without creating a user account.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising installing a hook into a computer program that manages desktop icons on the second computer system.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the portable storage device communicates with the first computer system and the second computer system via a serial communication interface.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the personalization information comprises all files in at least one first folder.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref> wherein the files are transferred to at least one second folder on the portable storage device having at least one name corresponding to at least one name of the at least one first folder.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the at least one web site designated by a user comprises at least one of a plurality of web site URLs stored as browser favorites.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>disconnecting said portable storage device from the second computer system; and</claim-text>
<claim-text>restoring the second computer system such that the personalization information is removed from said second computer system.</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>
