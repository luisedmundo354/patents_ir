<us-patent-grant lang="EN" dtd-version="v4.2 2006-08-23" file="US07299469-20071120.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20071106" date-publ="20071120">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>07299469</doc-number>
<kind>B2</kind>
<date>20071120</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>10427100</doc-number>
<date>20030430</date>
</document-id>
</application-reference>
<us-application-series-code>10</us-application-series-code>
<us-term-of-grant>
<us-term-extension>921</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>9</main-group>
<subgroup>46</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>718104</main-classification>
</classification-national>
<invention-title id="d0e53">Hierarchical weighting of donor and recipient pools for optimal reallocation in logically partitioned computer systems</invention-title>
<references-cited>
<citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>4603382</doc-number>
<kind>A</kind>
<name>Cole et al.</name>
<date>19860700</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>364200</main-classification></classification-national>
</citation>
<citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5504670</doc-number>
<kind>A</kind>
<name>Barth et al.</name>
<date>19960400</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>364134</main-classification></classification-national>
</citation>
<citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>5875464</doc-number>
<kind>A</kind>
<name>Kirk</name>
<date>19990200</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>711129</main-classification></classification-national>
</citation>
<citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>5889989</doc-number>
<kind>A</kind>
<name>Robertazzi et al.</name>
<date>19990300</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>395675</main-classification></classification-national>
</citation>
<citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>5978583</doc-number>
<kind>A</kind>
<name>Ekanadham et al.</name>
<date>19991100</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>395703</main-classification></classification-national>
</citation>
<citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>6199075</doc-number>
<kind>B1</kind>
<name>Ungar et al.</name>
<date>20010300</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>707206</main-classification></classification-national>
</citation>
<citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>6321373</doc-number>
<kind>B1</kind>
<name>Ekanadham et al.</name>
<date>20011100</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>717  1</main-classification></classification-national>
</citation>
<citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>6327587</doc-number>
<kind>B1</kind>
<name>Forster</name>
<date>20011200</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>707  2</main-classification></classification-national>
</citation>
<citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>6366945</doc-number>
<kind>B1</kind>
<name>Fong et al.</name>
<date>20020400</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>709104</main-classification></classification-national>
</citation>
<citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>6378039</doc-number>
<kind>B1</kind>
<name>Obara et al.</name>
<date>20020400</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>711114</main-classification></classification-national>
</citation>
<citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>6694419</doc-number>
<kind>B1</kind>
<name>Schnee et al.</name>
<date>20040200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711173</main-classification></classification-national>
</citation>
<citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>6968441</doc-number>
<kind>B1</kind>
<name>Schnee</name>
<date>20051100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711173</main-classification></classification-national>
</citation>
<citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>7003597</doc-number>
<kind>B2</kind>
<name>Georgiou et al.</name>
<date>20060200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>710 56</main-classification></classification-national>
</citation>
<citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>2002/0178337</doc-number>
<kind>A1</kind>
<name>Wilson et al.</name>
<date>20021100</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>711173</main-classification></classification-national>
</citation>
<citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>2003/0005215</doc-number>
<kind>A1</kind>
<name>Arimilli et al.</name>
<date>20030100</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>711105</main-classification></classification-national>
</citation>
<citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>2004/0078541</doc-number>
<kind>A1</kind>
<name>Lightstone et al.</name>
<date>20040400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711171</main-classification></classification-national>
</citation>
</references-cited>
<number-of-claims>35</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>718104</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>711171</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>711173</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>710 56</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>5</number-of-drawing-sheets>
<number-of-figures>9</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20040230974</doc-number>
<kind>A1</kind>
<date>20041118</date>
</document-id>
</related-publication>
</us-related-documents>
<parties>
<applicants>
<applicant sequence="001" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Hamilton, II</last-name>
<first-name>Rick Allen</first-name>
<address>
<city>Charlottesville</city>
<state>VA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="002" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Seaman</last-name>
<first-name>James Wesley</first-name>
<address>
<city>Falls Church</city>
<state>VA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
</applicants>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<last-name>Mims, Jr.</last-name>
<first-name>David A.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="02" rep-type="attorney">
<addressbook>
<last-name>Siegesmund</last-name>
<first-name>Rudolf O.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="03" rep-type="attorney">
<addressbook>
<orgname>Gordon &amp; Rees, LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</parties>
<assignees>
<assignee>
<addressbook>
<orgname>International Business Machines Corporation</orgname>
<role>02</role>
<address>
<city>Armonk</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>An</last-name>
<first-name>Meng-Al T.</first-name>
<department>2195</department>
</primary-examiner>
<assistant-examiner>
<last-name>Wai</last-name>
<first-name>Eric C</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A method and system for reallocating resources in a logically partitioned environment using hierarchical weighting comprising a Performance Enhancement Program (PEP), a Reallocation Program (RP), and a Hierarchical Weighting Program (HWP). The PEP allows an administrator to designate several performance parameters and rank the priority of the resources. The RP compiles the performance data for the resources and calculates a composite parameter, a recipient workload ratio, and a donor workload ratio. The RP determines the donors and recipients. RP allocates the resources from the donors to the recipients using the HWP. The HWP evaluates and ranks the equivalency of donors and recipients based on the noise factor. HWP then reallocates the resource in each class and subclass from the highest ranked donor to the highest ranked recipient. The RP continues to monitor and update the workload statistics based on either a moving window or a discrete window sampling system.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="234.53mm" wi="161.97mm" file="US07299469-20071120-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="241.13mm" wi="164.59mm" file="US07299469-20071120-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="238.76mm" wi="163.49mm" file="US07299469-20071120-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="237.07mm" wi="171.62mm" file="US07299469-20071120-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="202.18mm" wi="158.24mm" file="US07299469-20071120-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="198.20mm" wi="166.03mm" file="US07299469-20071120-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">FIELD OF THE INVENTION</heading>
<p id="p-0002" num="0001">The present invention is related generally to a method for increasing computer system efficiency and specifically to a computer program for reallocating resources amongst virtual systems.</p>
<heading id="h-0002" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0003" num="0002">A computer system is a collection of computer resources, such as processors, adapters, memory and the like, which work together to perform a specific task, and is well known in the art. The computer systems may be located in a single computer, such as a server, or in a plurality of computers, such as computer network. System administrators (hereinafter, administrators) are people who setup and manage computer systems. One of the tools used by administrators to increase the performance of a computer system is physical partitioning. Administrators physically partition a managed system by dedicating buses and predefined physical modules within the system to assist in creating the smaller partitioned systems, referred to as virtual systems. Each virtual system in a managed system appears to the end user as a completely separate system. In addition, virtual systems improve administrative flexibility and application performance.</p>
<p id="p-0004" num="0003">Another method used by administrators to increase system performance is logical partitioning. Logical partitioning is a process which creates logical partitions within the managed system. Logical partitioning is distinct from physical partitioning in that there are no physically separated buses, memory, or processors in a logically partitioned system. Instead, the virtual systems are separated only by the system software. Similar to the physically partitioned system, each individual virtual system created by logical partitioning appears to the end user as a completely separate system. One advantage of logical partitioning is that logical partitioning permits much finer granularity in virtual system creation, such that any processor, memory, or adapter may be easily added or removed from a virtual system. Logical partitioning is generally controlled by a hardware management console outside of the managed system. The hardware management console controls the division of the managed system into the virtual systems and, if necessary, the reallocation of resources amongst the various virtual systems.</p>
<p id="p-0005" num="0004">Recently, administrators have been able to move system hardware resources within the managed system with increased flexibility. When the reallocation occurs without having to reboot the managed system, the logical partitioning is known as dynamic logical partitioning. The prior art methods of dynamic reallocation require the system administrator to recognize the need for reallocation, and then manually reallocate the resources. For example, in a system comprising a first logical partition having eight central processing units (CPUs) and a second logical partition having eight CPUs, the system administrator may observe that during a peak processing period, the first logical partition is running at 100% CPU utilization and the second logical partition is running at 20% CPU utilization. Upon observing the disparity in CPU utilization, the administrator may manually move one or more resources from the second logical partition to the first logical partition to improve system performance during the peak processing period. Therefore, a need exists for a system and method to automate the control and movement of resources in a dynamic logical partitioning environment.</p>
<p id="p-0006" num="0005">Another problem encountered by administrators is deciding which donors to take resources from and which recipients to give resources to. This is particularly a problem when there is only one donor and a plurality of recipients or there is only one recipient and a plurality of donors. Therefore, a need exists for a method of determining which logical partition to remove resources from, and which logical partition to reallocate resources to.</p>
<p id="p-0007" num="0006">The need for automation within the reallocation process has been addressed by the prior art. U.S. Pat. No. 4,603,382 (the '382 patent) entitled “Dynamic Buffer Reallocation” discloses a method for dynamically reallocating data storage segments within a storage device. The '382 patent monitors the properties of the data storage device and reallocates the buffer segments when they exceed a predefined threshold. U.S. Pat. No. 5,875,464 (the '464 patent) entitled “Computer System with Private and Shared Partitions in Cache” discloses a partitioned cache memory buffer which monitors the allocation of tasks. The memory buffer of the '464 patent reallocates the tasks when necessary. U.S. Pat. No. 5,978,583 (the '583 patent) discloses a method of reallocating applications during the course of their execution. The method disclosed in the '583 patent monitors the applications and redistributes the applications when necessary based on various criteria. U.S. Pat. No. 6,366,945 (the '945 patent) entitled “Flexible Dynamic Partitioning of Resources in a Cluster Computing Environment” discloses a method for dynamic partitioning of a computer network. The method of the '945 patent monitors the resources within the virtual networks and moves resources among networks when required. However, the '945 patent is limited in that it does not disclose a method for dynamic logical partitioning of a managed network. Consequently, what is needed beyond the '382, '464, '583, and '945 patents is a method and system for dynamic logical partitioning of a managed system. Furthermore, a need exists for a method and system for reallocating resources among the computers within a virtual system. Finally, a need exists for an efficient method of allocating resources based on the ability of the donor systems to donate resources and the need of the recipient system to receive resources.</p>
<heading id="h-0003" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0008" num="0007">The present invention, which meets the needs stated above, is a method and system for reallocating resources in a logically partitioned environment using hierarchical weighting. The software embodiment of the present invention comprises a Performance Enhancement Program (PEP), a Reallocation Program (RP), and a Hierarchical Weighting Program (HWP). The PEP allows an administrator to designate a performance parameter, a capture interval, a sampling interval, a donor candidate pool, a recipient candidate pool, a donor load threshold, a recipient load threshold, a noise ratio, and rank the priority of the resources. The RP compiles the performance data for the resources and calculates a composite parameter, a recipient workload ratio, and a donor workload ratio. For each resource in the donor candidate pool, the RP marks the resource as a donor if the donor workload ratio is less than one. For each resource in the recipient candidate pool, the RP marks the resource as a recipient if the recipient workload ratio is greater than one. RP then determines if resource reallocation is necessary. If reallocation is necessary, RP allocates the resources from the donors to the recipients using the HWP. The HWP evaluates the equivalency of donors and recipients based on the noise factor. Donors and recipients that are not equivalent are ranked according to their workload ratios. Equivalent donors and recipients are ranked according to the priority of their resources. HWP then reallocates the resource in each class and subclass from the highest ranked donor to the highest ranked recipient. The RP continues to monitor and update the workload statistics based on either a moving window or a discrete window sampling system. The partitioned system of the present invention does not require a reboot to reallocate resources.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0009" num="0008">The novel features believed characteristic of the invention are set forth in the appended claims. The invention itself, however, as well as a preferred mode of use, further objectives and advantages thereof, will best be understood by reference to the following detailed description of an illustrative embodiment when read in conjunction with the accompanying drawings, wherein:</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. 1</figref> is an illustration of a computer network used to implement the present invention;</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 2</figref> is an illustration of the memory used to implement the present invention;</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 3</figref> is an illustration of the logic of the Performance Enhancement Program (PEP) of the present invention;</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 4</figref> is an illustration of the logic of the Reallocation Program (RP) of the present invention;</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 5</figref> is an illustration of the logic of the Hierarchical Weighting Program (HWP) of the present invention;</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 6</figref> is an illustration of a logically partitioned system in a single computer before application of the present invention;</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 7</figref> is an illustration of a logically partitioned system in a single computer after application of the present invention;</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 8</figref> is an illustration of a logically partitioned virtual system before application of the present invention; and</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 9</figref> is an illustration of a logically partitioned virtual system after application of the present invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT</heading>
<p id="p-0019" num="0018">As used herein the term “computer” shall mean a machine having a processor, a memory, and an operating system, capable of interaction with a user or other computer, and shall include without limitation desktop computers, notebook computers, personal digital assistants (PDAs), servers, handheld computers, and similar devices.</p>
<p id="p-0020" num="0019">As used herein, the term “managed system” means a collection of hardware resources which work together to accomplish a specific task. The resources may be located in a single computer or in a plurality of networked computers.</p>
<p id="p-0021" num="0020">As used herein, the term “resource” means a hardware component of a computer. Examples of resources are processors, adapters, and memory.</p>
<p id="p-0022" num="0021">As used herein, the term “performance parameter” means one or more parameters used to measure the workload on a resource. Performance parameters may include a combination of several individual performance parameters.</p>
<p id="p-0023" num="0022">As used herein, the term “donor candidate” means a system which is designated by a user as eligible to donate a resource to another system. The group of all donor candidates is referred to as the donor candidate pool. A donor candidate will become a donor if the system's composite parameter is less than the donor load threshold.</p>
<p id="p-0024" num="0023">As used herein, the term “donor” means a system which has a composite parameter less than the donor load threshold. The group of all donors is referred to as a donor pool.</p>
<p id="p-0025" num="0024">As used herein, the term “recipient candidate” means a system which is designated by a user as eligible to receive a resource from another system. The group of all recipient candidates is referred to as the recipient candidate pool. A recipient candidate will become a recipient if the system's composite parameter is greater than the recipient load threshold.</p>
<p id="p-0026" num="0025">As used herein, the term “recipient” means a system which has a composite parameter greater than the recipient load threshold. The group of all recipients is referred to as a recipient pool.</p>
<p id="p-0027" num="0026">As used herein, the term “donor load threshold” means a specific performance parameter level below which a donor may provide a resource to a recipient.</p>
<p id="p-0028" num="0027">As used herein, the term “recipient load threshold” means a specific performance parameter level above which a recipient may receive a resource from a donor.</p>
<p id="p-0029" num="0028">As used herein, the term “conditioning interval” means the period during which no resource reallocation will transpire. Sampling statistics may or may not be collected during this period, but no action will be taken upon these statistics until completion of the conditioning interval.</p>
<p id="p-0030" num="0029">As used herein, the term “capture interval” means the interval at which statistics are collected on resource performance for various systems. The capture interval is any interval shorter than or equal to the sampling interval.</p>
<p id="p-0031" num="0030">As used herein, the term “sampling interval” means the window of time over which sample statistics are captured. The sampling interval is equal to or greater than the capture interval. For example, statistics might be captured every five seconds for a five minute sampling interval. In that case, sixty statistical samples would be available at the end of the sampling interval. The sampling interval can be implemented as either a moving window or a discrete window.</p>
<p id="p-0032" num="0031">As used herein, the term “moving window” means that, for each new performance parameter value which is added to the collection of samples, the oldest performance parameter value, formerly within the sampling interval, falls out of consideration. The advantage of using a moving window, vis-à-vis a discrete window, is that the moving window provides greater responsiveness in providing resources when and where they are needed. The use of a moving window normally requires computation of the composite parameter once for each sample taken.</p>
<p id="p-0033" num="0032">As used herein, the term “discrete window” means that the sampling window is reset on a regular basis and those samples are considered in individual, non-overlapping time periods. The advantage of using a discrete window, vis-à-vis a moving window, is that the discrete window requires fewer processing resources because the composite parameter is only calculated once per sampling interval.</p>
<p id="p-0034" num="0033">As used herein, the term “composite parameter” means the average of the resource data accumulated over the sampling interval. The average used to calculate the composite parameter may be the mean, median, mode, or norm. Smoothing criteria may optionally be used to determine the composite parameter. An example of smoothing would be removing the high and low values of the data collected during the sampling interval.</p>
<p id="p-0035" num="0034">As used herein, the term “donor workload ratio” is equal to the composite parameter divided by the donor load threshold. The donor workload ratio measures the extent to which the composite parameter exceeds or falls below the donor load threshold.</p>
<p id="p-0036" num="0035">As used herein, the term “recipient workload ratio” is equal to the composite parameter divided by the recipient load threshold. The recipient workload ratio measures the extent to which the composite parameter exceeds or falls below the recipient load threshold.</p>
<p id="p-0037" num="0036">As used herein, the term “numerical application ranking” means a mechanism used to decide the more prioritized of two systems when the two systems' other parameters are considered equivalent.</p>
<p id="p-0038" num="0037">As used herein, the term “noise factor” means a value used to determine the equivalency of two donors or recipients. If the difference between the donor workload ratios of any two donors is less than the noise factor, then the two donors are considered equivalent donors. Similarly, if the difference between the recipient workload ratios of any two recipients is less than the noise factor, then the recipients are considered equivalent recipients. A high noise factor will make the resource ranking the governing criteria in reallocating resources. A low noise factor will make the donor and recipient workload ratios the governing criteria in reallocating resources.</p>
<p id="p-0039" num="0038">As used herein, the term “resource class” means a specific type of resource. Examples of resource classes are processors, memory, and adapters. Persons skilled in the art are aware of other resource classes.</p>
<p id="p-0040" num="0039">As used herein, the term “resource subclass” means a specific category of resource class. If the resource class is adapters, then examples of the resource subclasses would include: gigabit ethernet, 10/100 ethernet, fibre channel, ATM, and FDDI. Persons skilled in the art are aware of other resource subclasses.</p>
<p id="p-0041" num="0040">As used herein, the term “controlling entity” means the computational device, either internal or external to the managed system, which manages the reallocation of resources. In a UNIX environment, this is known as the Hardware Management Console.</p>
<p id="p-0042" num="0041"><figref idref="DRAWINGS">FIG. 1</figref> is an illustration of computer network <b>90</b> associated with the present invention. Computer network <b>90</b> comprises local machine <b>95</b> electrically coupled to network <b>96</b>. Local machine <b>95</b> is electrically coupled to remote machine <b>94</b> and remote machine <b>93</b> via network <b>96</b>. Local machine <b>95</b> is also electrically coupled to server <b>91</b> and database <b>92</b> via network <b>96</b>. Network <b>96</b> may be a simplified network connection such as a local area network (LAN) or may be a larger network such as a wide area network (WAN) or the Internet. Furthermore, computer network <b>90</b> depicted in <figref idref="DRAWINGS">FIG. 1</figref> is intended as a representation of a possible operating network that may contain the present invention and is not meant as an architectural limitation.</p>
<p id="p-0043" num="0042">The internal configuration of a computer, including connection and orientation of the processor, memory, and input/output devices, is well known in the art. The present invention is a methodology that can be embodied in a computer program. Referring to <figref idref="DRAWINGS">FIG. 2</figref>, the methodology of the present invention is implemented on software by Performance Enhancement Program (PEP) <b>200</b>. PEP <b>200</b> includes Reallocation Program (RP) <b>300</b> and Hierarchical Weighting Program (HWP) <b>400</b>. PEP <b>200</b>, RP <b>300</b>, and HWP <b>400</b> described herein can be stored within the memory of any computer depicted in <figref idref="DRAWINGS">FIG. 1</figref>. Alternatively, PEP <b>200</b>, RP <b>300</b>, and HWP <b>400</b> can be stored in an external storage device such as a removable disk or a CD-ROM. Memory <b>100</b> is illustrative of the memory within one of the computers of <figref idref="DRAWINGS">FIG. 1</figref>. Memory <b>100</b> also contains resource data <b>102</b>. The present invention may interface with resource data <b>102</b> through memory <b>100</b>. As part of the present invention, the memory <b>100</b> can be configured with PEP <b>200</b>, RP <b>300</b>, and/or HWP <b>400</b>.</p>
<p id="p-0044" num="0043">In alternative embodiments, PEP <b>200</b>, RP <b>300</b>, and/or HWP <b>400</b> can be stored in the memory of other computers. Storing PEP <b>200</b>, RP <b>300</b>, and/or HWP <b>400</b> in the memory of other computers allows the processor workload to be distributed across a plurality of processors instead of a single processor. Further configurations of PEP <b>200</b>, RP <b>300</b>, and/or HWP <b>400</b> across various memories are known by persons skilled in the art.</p>
<p id="p-0045" num="0044">Turning to <figref idref="DRAWINGS">FIG. 3</figref>, a flowchart of the logic of PEP <b>200</b> is illustrated. PEP <b>200</b> is a program which allows the user to designate performance enhancement criteria. The user described herein may be, for example, a system administrator. PEP <b>200</b> starts (<b>202</b>) and the user selects at least one performance parameter (<b>204</b>). The performance parameter is used by RP <b>300</b> to measure the workload on the resources. The user then defines the capture interval and the sampling interval (<b>206</b>). The capture interval and the sampling interval are used by RP <b>300</b> to develop resource data for resource reallocation. The user then designates the donor candidate pool (<b>208</b>). In designating the donor candidate pool, the user selects the resources which are eligible to be donors. Donor candidates are generally computers or systems whose performance is of relatively low importance when compared to other computers or systems. Donor candidates may be either test or development computers or systems, or they could be applications of secondary criticality when compared with the criticality of the recipient candidates. Generally, all of the resources would be selected as potential donors unless the user wants to specifically exclude certain resources. The user then designates the recipient candidate pool (<b>210</b>). In designating the recipient candidate pool, the user selects the resources which are eligible to be recipients. Recipient candidates are computers or systems with relatively high priority or importance. Generally, all of the resources would be selected as potential recipients unless the user wants to specifically exclude certain resources.</p>
<p id="p-0046" num="0045">The user then defines the donor load threshold (<b>212</b>). The donor load threshold is used by RP <b>300</b> to determine when a donor candidate becomes a donor. A heavily loaded donor will not donate resources unless its threshold value is set very high. The load threshold increases as system performance goes down, so that only a donor with a low load (i.e. relatively strong performance) may donate resources. The threshold may be set to provide whatever degree of flexibility is desired by the user. For example, if the resource is a processor, and the performance parameter is the run queue, the performance parameter limit might be set at three waiting items in the run queue. Thus, when a processor has less than three items in the run queue, the processor will be identified as a potential donor.</p>
<p id="p-0047" num="0046">The user then defines the recipient load threshold (<b>214</b>). The recipient load threshold is used by RP <b>300</b> to determine when a recipient candidate becomes a recipient. A lightly loaded recipient will not receive resources unless its threshold value is set very low. As the load on the recipient system increases, the performance of the recipient system goes down, thus making the slow-running recipient candidate ripe for a resource addition. For example, if the resource is a processor, and the performance parameter is the run queue, the performance parameter limit might be set at four waiting items in the run queue. Thus, when a processor has more than four items in the run queue, the processor will be identified as a potential recipient. The user then defines the noise ratio (<b>216</b>). The noise ratio is used by HWP <b>400</b> to determine the equivalence of two donors or two recipients. The user then ranks the resources (<b>218</b>). In ranking the resources, the user looks at each class, and if necessary subclass, of resources and ranks the resources based on their importance. High priority resources receive a high ranking while low priority resources receive a low ranking. HWP <b>400</b> uses the resource ranking to rank the donors and recipients when two donors or two recipients are considered equivalent.</p>
<p id="p-0048" num="0047">PEP <b>200</b> then enters into a conditioning level (<b>220</b>). During the conditioning level, the resource reallocation is temporarily suspended between the donors and the recipients. During the conditional period, PEP <b>200</b> optionally compiles the workload statistics for the resources in the donor pool and in the recipient pool (<b>222</b>). If the workload statistics are compiled, then there may be some overlap between the data in the workload statistics and the data in the sampling interval. PEP <b>200</b> then runs RP <b>300</b> (<b>224</b>). PEP <b>200</b> then makes a determination whether to continue the resource reallocation (<b>226</b>). If the user wants to continue resource reallocation, PEP <b>200</b> returns to step <b>220</b>. If the user does not want to continue resource reallocation, PEP <b>200</b> ends (<b>228</b>).</p>
<p id="p-0049" num="0048">Turning to <figref idref="DRAWINGS">FIG. 4</figref>, a flowchart of the logic of RP <b>300</b> is illustrated. RP <b>300</b> is a program which reallocates the resources. RP <b>300</b> starts (<b>302</b>) when prompted by PEP <b>200</b>. RP <b>300</b> collects samples of the resource data at the capture intervals over the sampling interval (<b>304</b>), saving the resource data to a cache memory or hard disk. For example, if the resource is a processor, the performance parameter is the run queue, the capture interval is five seconds, and the sampling interval is five minutes, then RP <b>300</b> records the number of items waiting in the run queue for each processor at the end of every fifth second for a total of five minutes. After the sampling interval has elapsed, RP <b>300</b> then calculates the composite parameter (<b>306</b>). RP <b>300</b> calculates the composite parameter by averaging the resource data.</p>
<p id="p-0050" num="0049">RP <b>300</b> then calculates the recipient workload ratio for each recipient candidate (<b>308</b>). The recipient workload ratio is equal to the recipient candidate's composite parameter divided by the recipient load threshold. RP <b>300</b> then determines if the recipient workload ratio is greater than one (<b>310</b>). If the recipient workload ratio is not greater than one, then RP <b>300</b> proceeds to step <b>314</b>. If the recipient workload ratio is greater than one, then RP <b>300</b> designates that resource as a recipient (<b>312</b>) and proceeds to step <b>314</b>.</p>
<p id="p-0051" num="0050">RP <b>300</b> then calculates the donor workload ratio for each donor candidate (<b>314</b>). The donor workload ratio is equal to the donor candidate's composite parameter divided by the donor load threshold. RP <b>300</b> then determines if the donor workload ratio is less than one (<b>316</b>). If the donor workload ratio is not less than one, then RP <b>300</b> proceeds to step <b>320</b>. If the donor workload ratio is less than one, then RP <b>300</b> designates that resource as a donor (<b>318</b>) and proceeds to step <b>320</b>.</p>
<p id="p-0052" num="0051">RP <b>300</b> then makes a determination whether resource reallocation is necessary (<b>320</b>). RP <b>300</b> can optionally send the composite parameter to the controlling entity for the determination whether reallocation is necessary. Reallocation will be necessary if there is at least one donor and at least one recipient. If reallocation is not necessary, RP <b>300</b> proceeds to step <b>324</b>. If reallocation is necessary, RP <b>300</b> runs HWP <b>400</b> (<b>322</b>). RP <b>300</b> then proceeds to step <b>324</b>.</p>
<p id="p-0053" num="0052">At step <b>324</b>, RP <b>300</b> then makes a determination whether the sampling window is a moving window or a discrete window (<b>324</b>). If the sampling window is a moving window, RP <b>300</b> discards the oldest data sample and replaces the oldest data sample with the newest data sample (<b>326</b>). RP <b>300</b> then ends (<b>330</b>). If at step <b>324</b> the sampling window is a discrete window, RP <b>300</b> discards all of the data samples and collects new data samples (<b>328</b>). RP <b>300</b> then ends (<b>330</b>).</p>
<p id="p-0054" num="0053">Turning to <figref idref="DRAWINGS">FIG. 5</figref>, a flowchart of the logic of HWP <b>400</b> is illustrated. HWP <b>400</b> is a program which weighs and ranks the ability for donors to donate resources and the need recipients have for resources. HWP <b>400</b> starts (<b>402</b>) when prompted by RP <b>300</b>. HWP <b>400</b> then calculates the difference between the donor workload ratios for two donors (<b>404</b>). HWP <b>400</b> then determines if the difference between the donor workload ratios between the two donors is greater than the noise factor (<b>406</b>). If the difference between the donor workload ratios is greater than the noise factor, HWP <b>400</b> ranks the donor with the lower workload ratio above the donor with the higher workload ratio (<b>408</b>) and proceeds to step <b>412</b>. If at step <b>406</b> the difference between the donor workload ratios is not greater than the noise factor, then HWP <b>400</b> ranks the donor with the lower priority resource above the donor with the higher priority resource (<b>410</b>) and proceeds to step <b>412</b>. Resource priority was specified by the user in step <b>218</b> of PEP <b>200</b>. HWP <b>400</b> can repeat steps <b>404</b> through <b>412</b> as many times as necessary to create a ranked list of donors within each resource class, and if necessary, subclass within the managed system.</p>
<p id="p-0055" num="0054">HWP <b>400</b> then calculates the difference between the recipient workload ratios for two recipients (<b>412</b>). HWP <b>400</b> then determines if the difference between the recipient workload ratios between the two recipients is greater than the noise factor (<b>414</b>). If the difference between the recipient workload ratios is greater than the noise factor, HWP <b>400</b> ranks the recipient with the higher workload ratio above the recipient with the lower workload ratio (<b>416</b>) and proceeds to step <b>420</b>. If at step <b>414</b> the difference between the recipient workload ratios is not greater than the noise factor, then HWP <b>400</b> ranks the recipient with the lower priority resource above the recipient with the higher priority resource (<b>418</b>) and proceeds to step <b>420</b>. Resource priority was specified by the user in step <b>218</b> of PEP <b>200</b>. HWP <b>400</b> can repeat steps <b>412</b> through <b>420</b> as many times as necessary to create a ranked list of recipients within each resource class, and if necessary, subclass within the managed system.</p>
<p id="p-0056" num="0055">HWP <b>400</b> then reallocates the resource from the highest ranked donor to the highest ranked recipient (<b>420</b>). When the resource has been reallocated, HWP <b>400</b> removes the donor from the donor ranking list and removes the recipient from the recipient ranking list. HWP <b>400</b> performs step <b>420</b> for each resource class, and if necessary subclass, within the managed system. HWP <b>400</b> then determines if reallocation is still necessary (<b>422</b>). Reallocation will be necessary if there are both donors and recipients remaining in any resource class or subclass. If reallocation is necessary, HWP <b>400</b> returns to step <b>404</b>. If reallocation is not necessary, then HWP <b>400</b> ends (<b>424</b>).</p>
<p id="p-0057" num="0056">PEP <b>200</b> and/or RP <b>300</b> may be implemented on a managed system which is a single computer, such as a server with a plurality of resources. Turning to <figref idref="DRAWINGS">FIG. 6</figref>, server <b>500</b> comprises six resources electrically coupled to other computer components. Persons skilled in the art are aware of the composition of other computer components which may be, for example, processors, adapters, random access memory (RAM), read only memory (ROM), devices, device controllers, hard disk drives, floppy disk drives, CD-ROM drives, DVD drives, system connections, system controllers, I/O ports, monitors, user input devices, and the like. The other computer components are the computer resources which are not being reallocated.</p>
<p id="p-0058" num="0057">The resources of server <b>500</b> are divided by logical partitioning into first virtual system <b>502</b> and second virtual system <b>504</b>. If at least one of the resources of first virtual system <b>502</b> exceeds the recipient load threshold and at least one of the resources of second virtual system <b>504</b> is below the donor load threshold, then second virtual system <b>504</b> will be eligible to donate a resource to first virtual system <b>502</b>. By moving a resource such as resource <b>506</b> to first virtual system <b>502</b>, resource <b>506</b> can be donated to first virtual system <b>502</b>.</p>
<p id="p-0059" num="0058">Turning to <figref idref="DRAWINGS">FIG. 7</figref>, server <b>500</b> has been altered from the illustration in <figref idref="DRAWINGS">FIG. 6</figref>. In <figref idref="DRAWINGS">FIG. 7</figref>, resource <b>506</b> has been moved from second virtual system <b>504</b> to first virtual system <b>502</b> by PEP <b>200</b> of the present invention.</p>
<p id="p-0060" num="0059">The present invention is not limited in application to computer systems. PEP <b>200</b>, RP <b>300</b>, and/or HWP <b>400</b> may be implemented on a managed system which is a network of individual computers. Turning to <figref idref="DRAWINGS">FIG. 8</figref>, managed network <b>600</b> is divided by logical partitioning into first virtual network <b>602</b> and second virtual network <b>604</b>. If at least one of the computers of first virtual network <b>602</b> exceeds the recipient load threshold and at least one of the computers of second virtual network <b>604</b> is below the donor load threshold, then second virtual network <b>604</b> will be eligible to donate a computer, and therefore a resource, to first virtual network <b>602</b>. By moving a computer such as computer <b>606</b> to first virtual network <b>602</b>, the resource of computer <b>606</b> can be donated to first virtual network <b>602</b>.</p>
<p id="p-0061" num="0060">Turning to <figref idref="DRAWINGS">FIG. 9</figref>, managed network <b>600</b> has been altered from the illustration in <figref idref="DRAWINGS">FIG. 8</figref>. In <figref idref="DRAWINGS">FIG. 9</figref>, computer <b>606</b> has been moved from second virtual network <b>604</b> to first virtual network <b>602</b> by PEP <b>200</b> of the present invention.</p>
<p id="p-0062" num="0061">With respect to the above description, it is to be realized that the optimum dimensional relationships for the parts of the invention, to include variations in size, materials, shape, form, function and manner of operation, assembly and use, are deemed readily apparent and obvious to one skilled in the art, and all equivalent relationships to those illustrated in the drawings and described in the specification are intended to be encompassed by the present invention. The novel spirit of the present invention is still embodied by reordering or deleting some of the steps contained in this disclosure. The spirit of the invention is not meant to be limited in any way except by proper construction of the following claims.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method for automatically reallocating a resource in a plurality of computer systems, the plurality of computer systems having a most underutilized resource and a most burdened resource, comprising:
<claim-text>defining a donor load threshold as a specific performance parameter below which a donor may provide a resource;</claim-text>
<claim-text>defining a recipient load threshold as a specific performance parameter above which a recipient may receive a resource;</claim-text>
<claim-text>compiling a plurality of resource data for a plurality of donor candidates and a plurality of recipient candidates;</claim-text>
<claim-text>calculating a composite parameter by averaging the plurality of resource data over a sampling period;</claim-text>
<claim-text>defining a donor candidate as a computer system having a composite parameter less than the donor load threshold;</claim-text>
<claim-text>defining a recipient candidate as a computer system having a composite parameter greater than the recipient load threshold;</claim-text>
<claim-text>calculating a recipient workload ratio for each of the plurality of recipient candidates by dividing the composite parameter by the recipient load threshold;</claim-text>
<claim-text>calculating a donor workload ratio for each of the plurality of donor candidates by dividing the composite parameter by the donor load threshold;</claim-text>
<claim-text>ranking a plurality of donors based on the donor workload ratio;</claim-text>
<claim-text>ranking a plurality of recipients based on the recipient workload ratio; and</claim-text>
<claim-text>reallocating a highest ranked donor to a highest ranked recipient;</claim-text>
<claim-text>wherein when the recipient workload ratio is greater than one, a recipient candidate is designated a recipient;</claim-text>
<claim-text>wherein when a donor workload ratio is less than one, a donor candidate is designated a donor;</claim-text>
<claim-text>wherein the most underutilized resource is reallocated to assist the most burdened resource.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising:
<claim-text>comparing a plurality of donor workload ratios.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref> further comprising:
<claim-text>when the difference between two of the donor workload ratios is greater than a noise factor, ranking a donor with the lower workload ratio above a donor with the higher workload ratio.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref> further comprising:
<claim-text>when the difference between two of the donor workload ratios is not greater than a noise factor, ranking a donor with a lower priority resource above a donor with a higher priority resource.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising:
<claim-text>comparing a plurality of recipient workload ratios.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref> further comprising:
<claim-text>when a difference between two of the recipient workload ratios is greater than a noise factor, ranking a recipient with the higher workload ratio above a recipient with the lower workload ratio.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref> further comprising:
<claim-text>when the difference between two of the recipient workload ratios is not greater than a noise factor, ranking a recipient with a higher priority resource above a recipient with a lower priority resource.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising:
<claim-text>ranking at least one donor and at least one recipient based on the donor workload ratio and the recipient workload ratio; and</claim-text>
<claim-text>reallocating the resource from a highest ranked donor to a highest ranked recipient.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. A method for automatically reallocating a resource in a plurality of computer systems, the plurality of computer systems having a most underutilized resource and a most burdened resource comprising:
<claim-text>calculating a donor workload ratio;</claim-text>
<claim-text>calculating a recipient workload ratio;</claim-text>
<claim-text>determining that a sampling window is a moving window or a discrete window;</claim-text>
<claim-text>when a donor workload ratio is greater than one, designating the resource as a donor;</claim-text>
<claim-text>when a recipient workload ratio is greater than one, designating the resource as a recipient;</claim-text>
<claim-text>when a sampling window is a moving window, discarding an oldest data sample and adding a newest data sample;</claim-text>
<claim-text>when reallocation of the resource is necessary reallocating a highest ranked donor to a highest ranked recipient;</claim-text>
<claim-text>wherein the most underutilized resource is reallocated to assist the most burdened resource.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref> wherein said hierarchical ranking comprises:
<claim-text>ranking a plurality of resources based on the resource workload ratio; and</claim-text>
<claim-text>reallocating the resource from a donor to a recipient based on the resource ranking.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref> wherein said hierarchical ranking further comprises:
<claim-text>comparing a plurality of donor workload ratios.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref> further comprising:
<claim-text>when a difference between two of the donor workload ratios is greater than a noise factor, ranking a donor with a lower workload ratio above a donor with a higher workload ratio.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref> further comprising:
<claim-text>when the difference between two of the donor workload ratios is greater than a noise factor, ranking a donor with a lower priority resource above a donor with a higher priority resource.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref> wherein said hierarchical ranking further comprises:
<claim-text>comparing a plurality of recipient workload ratios.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The method of <claim-ref idref="CLM-00014">claim 14</claim-ref> further comprising:
<claim-text>when a difference between two of the recipient workload ratios is greater than a noise factor, ranking a recipient with a higher workload ratio above a recipient with a lower workload ratio.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The method of <claim-ref idref="CLM-00014">claim 14</claim-ref> further comprising:
<claim-text>when the difference between two of the recipient workload ratios is not greater than a noise factor, ranking a recipient with a higher priority resource above a recipient with a lower priority resource.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref> wherein said hierarchical ranking further comprises:
<claim-text>ranking at least one donor and at least one recipient based on the donor workload ratio and the recipient workload ratio; and</claim-text>
<claim-text>reallocating the resource from a highest ranked donor to a highest ranked recipient.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. A program product operable on a computer, the program product comprising:
<claim-text>a computer-usable medium;</claim-text>
<claim-text>wherein the computer usable medium comprises instructions for automatically reallocating a plurality of resources among a plurality of computer systems, the plurality of computer systems having a most underutilized resource and a most burdened resource, the instructions comprising:</claim-text>
<claim-text>instructions to define a donor load threshold as a specific performance parameter below which a donor may provide a resource;</claim-text>
<claim-text>instructions to define a recipient load threshold as a specific performance parameter above which a recipient may receive a resource;</claim-text>
<claim-text>instructions to compile a plurality of resource data for a plurality of donor candidates and a plurality of recipient candidates;</claim-text>
<claim-text>instructions to calculate a composite parameter by averaging the plurality of resource data over a sampling period;</claim-text>
<claim-text>instructions to define a donor candidate as a computer system having a composite parameter less than the donor load threshold;</claim-text>
<claim-text>instructions to define a recipient candidate as a computer system having a composite parameter greater than the recipient load threshold;</claim-text>
<claim-text>instructions to calculate a recipient workload ratio for each of the plurality of recipient candidates by dividing the composite parameter by the recipient load threshold;</claim-text>
<claim-text>instructions to calculate a donor workload ratio for each of the plurality of donor candidates by dividing the composite parameter by the donor load threshold;</claim-text>
<claim-text>instructions to rank a plurality of donors based on the donor workload ratio;</claim-text>
<claim-text>instructions to rank a plurality of recipients based on the recipient workload ratio;</claim-text>
<claim-text>instructions to reallocate a highest ranked donor to a highest ranked recipient;</claim-text>
<claim-text>wherein when the recipient workload ratio is greater than one, instructions to designate a recipient candidate as a recipient;</claim-text>
<claim-text>wherein when a donor workload ratio is less than one, instructions to designate a donor candidate as a donor; and</claim-text>
<claim-text>wherein the most underutilized resource is reallocated to assist the most burdened resource.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The program product of <claim-ref idref="CLM-00018">claim 18</claim-ref> further comprising:
<claim-text>instructions for comparing a plurality of donor workload ratios.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The program product of <claim-ref idref="CLM-00019">claim 19</claim-ref> further comprising:
<claim-text>instructions for determining when the difference between two of the donor workload ratios is greater than a noise factor; and</claim-text>
<claim-text>when the difference between two of the donor workload ratios is greater than the noise factor, instructions for ranking a donor with the lower workload ratio above a donor with the higher workload ratio.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. The program product of <claim-ref idref="CLM-00019">claim 19</claim-ref> further comprising:
<claim-text>instructions for determining when the difference between two of the donor workload ratios is not greater than a noise factor; and</claim-text>
<claim-text>when the difference between two of the donor workload ratios is not greater than the noise factor, instructions for ranking a donor with a lower priority resource above a donor with a higher priority resource.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. The program product of <claim-ref idref="CLM-00018">claim 18</claim-ref> further comprising:
<claim-text>instructions for comparing a plurality of recipient workload ratios.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. The program product of <claim-ref idref="CLM-00022">claim 22</claim-ref> further comprising:
<claim-text>instructions for determining when the difference between two of the recipient workload ratios is greater than a noise factor; and</claim-text>
<claim-text>when the difference between two of the recipient workload ratios is greater than the noise factor, instructions for ranking a recipient with the higher workload ratio above a recipient with the lower workload ratio.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00024" num="00024">
<claim-text>24. The program product of <claim-ref idref="CLM-00022">claim 22</claim-ref> further comprising:
<claim-text>instructions for determining when the difference between two of the recipient workload ratios is not greater than a noise factor; and</claim-text>
<claim-text>when the difference between two of the recipient workload ratios is not greater than the noise factor, instructions for ranking a recipient with a higher priority resource above a recipient with a lower priority resource.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00025" num="00025">
<claim-text>25. The program product of <claim-ref idref="CLM-00018">claim 18</claim-ref> further comprising:
<claim-text>ranking at least one donor and at least one recipient based on the donor workload ratio and the recipient workload ratio; and</claim-text>
<claim-text>reallocating the resource from a highest ranked donor to a highest ranked recipient.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00026" num="00026">
<claim-text>26. A program product operable on a computer, the program product comprising:
<claim-text>a computer-usable medium;</claim-text>
<claim-text>wherein the computer usable medium containing instructions to automatically reallocate resources among a plurality of computer systems, the plurality of computer systems having a most underutilized resource and a most burdened resource, the instructions comprising:</claim-text>
<claim-text>instructions for calculating a donor workload ratio;</claim-text>
<claim-text>instructions for determining when a donor workload ratio is greater than one;</claim-text>
<claim-text>instructions for calculating a recipient workload ratio;</claim-text>
<claim-text>instructions for determining when a recipient workload ratio is greater than one;</claim-text>
<claim-text>instructions for determining that a sampling window is a moving window or a discrete window; and</claim-text>
<claim-text>instructions for determining when reallocation of the resource is necessary;</claim-text>
<claim-text>wherein responsive to the determining that the donor workload ratio is greater than one, instructions for designating the resource as a donor;</claim-text>
<claim-text>wherein responsive to the determination that the recipient workload ratio is greater than one, instruction for designating the resource as a recipient;</claim-text>
<claim-text>wherein responsive to a determination that the sampling window is a moving window, instructions for discarding an oldest data sample and adding a newest data sample;</claim-text>
<claim-text>wherein responsive to the determination that reallocation is necessary, instructions for reallocating a highest ranked donor to a highest ranked recipient;</claim-text>
<claim-text>wherein the most underutilized resource is reallocated to assist the most burdened resource.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00027" num="00027">
<claim-text>27. The program product of <claim-ref idref="CLM-00026">claim 26</claim-ref> further comprising:
<claim-text>instructions for determining when a sampling window is a moving window or a discrete window; and</claim-text>
<claim-text>when the sampling window is a discrete window, instructions for discarding all the data samples and collecting new data samples.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00028" num="00028">
<claim-text>28. The program product of <claim-ref idref="CLM-00026">claim 26</claim-ref> wherein said hierarchical ranking comprises:
<claim-text>instructions for ranking a plurality of resources based on the resource workload ratio; and</claim-text>
<claim-text>instructions for reallocating the resource from a donor to a recipient based on the resource ranking.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00029" num="00029">
<claim-text>29. The program product of <claim-ref idref="CLM-00026">claim 26</claim-ref> wherein said hierarchical ranking comprises:
<claim-text>instructions for comparing a plurality of donor workload ratios.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00030" num="00030">
<claim-text>30. The program product of <claim-ref idref="CLM-00029">claim 29</claim-ref> further comprising:
<claim-text>instructions for determining when the difference between two of the donor workload ratios is greater than a noise factor; and</claim-text>
<claim-text>when the difference between two of the donor workload ratios is greater than the noise factor, instructions for ranking a donor with the lower workload ratio above a donor with the higher workload ratio.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00031" num="00031">
<claim-text>31. The program product of <claim-ref idref="CLM-00029">claim 29</claim-ref> further comprising:
<claim-text>instructions for determining when the difference between two of the donor workload ratios is not greater than a noise factor; and</claim-text>
<claim-text>when the difference between two of the donor workload ratios is not greater than the noise factor, instructions for ranking a donor with a lower priority resource above a donor with a higher priority resource.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00032" num="00032">
<claim-text>32. The program product of <claim-ref idref="CLM-00026">claim 26</claim-ref> wherein said hierarchical ranking comprises:
<claim-text>instructions for comparing a plurality of recipient workload ratios.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00033" num="00033">
<claim-text>33. The program product of <claim-ref idref="CLM-00032">claim 32</claim-ref> further comprising:
<claim-text>instructions for determining when the difference between two of the recipient workload ratios is greater than a noise factor; and</claim-text>
<claim-text>when the difference between two of the recipient workload ratios is greater than the noise factor, instructions for ranking a recipient with the higher workload ratio above a recipient with the lower workload ratio.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00034" num="00034">
<claim-text>34. The program product of <claim-ref idref="CLM-00032">claim 32</claim-ref> further comprising:
<claim-text>instructions for determining when the difference between two of the recipient workload ratios is not greater than a noise factor; and</claim-text>
<claim-text>when the difference between two of the recipient workload ratios is not greater than the noise factor, instructions for ranking a recipient with a higher priority resource above a recipient with a lower priority resource.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00035" num="00035">
<claim-text>35. The program product of <claim-ref idref="CLM-00026">claim 26</claim-ref> wherein said hierarchical ranking comprises:
<claim-text>instructions for ranking at least one donor and at least one recipient based on the donor workload ratio and the recipient workload ratio; and</claim-text>
<claim-text>instructions for reallocating the resource from a highest ranked donor to a highest ranked recipient.</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>
