<us-patent-grant lang="EN" dtd-version="v4.2 2006-08-23" file="US07299171-20071120.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20071106" date-publ="20071120">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>07299171</doc-number>
<kind>B2</kind>
<date>20071120</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>10919438</doc-number>
<date>20040817</date>
</document-id>
</application-reference>
<us-application-series-code>10</us-application-series-code>
<us-term-of-grant>
<us-term-extension>148</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>17</main-group>
<subgroup>21</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>704  9</main-classification>
</classification-national>
<invention-title id="d0e53">Method and system for processing grammar-based legality expressions</invention-title>
<references-cited>
<citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5629980</doc-number>
<kind>A</kind>
<name>Stefik et al.</name>
<date>19970500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>705 54</main-classification></classification-national>
</citation>
<citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5940504</doc-number>
<kind>A</kind>
<name>Griswold</name>
<date>19990800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>705 32</main-classification></classification-national>
</citation>
<citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6138119</doc-number>
<kind>A</kind>
<name>Hall et al.</name>
<date>20001000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707  4</main-classification></classification-national>
</citation>
<citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>6405199</doc-number>
<kind>B1</kind>
<name>Carter et al.</name>
<date>20020600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707  6</main-classification></classification-national>
</citation>
<citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2004/0049462</doc-number>
<kind>A1</kind>
<name>Wang</name>
<date>20040300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>705 50</main-classification></classification-national>
</citation>
<citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2004/0267552</doc-number>
<kind>A1</kind>
<name>Gilliam et al.</name>
<date>20041200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>705  1</main-classification></classification-national>
</citation>
<citation>
<patcit num="00007">
<document-id>
<country>WO</country>
<doc-number>WO 3094076</doc-number>
<kind>A1</kind>
<date>20031100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
</citation>
</references-cited>
<number-of-claims>103</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>704 10</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>704  4</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>704  1</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>704  9</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>12</number-of-drawing-sheets>
<number-of-figures>13</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20060041421</doc-number>
<kind>A1</kind>
<date>20060223</date>
</document-id>
</related-publication>
</us-related-documents>
<parties>
<applicants>
<applicant sequence="001" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Ta</last-name>
<first-name>Thanh</first-name>
<address>
<city>Huntington Beach</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="002" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Chen</last-name>
<first-name>Eddie</first-name>
<address>
<city>Rancho Palos Verdes</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="003" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Lao</last-name>
<first-name>Guillermo</first-name>
<address>
<city>Torrance</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="004" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Valenzuela</last-name>
<first-name>Edgardo</first-name>
<address>
<city>South Gate</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
</applicants>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<last-name>Kaufman</last-name>
<first-name>Marc S.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="02" rep-type="attorney">
<addressbook>
<last-name>Villamar</last-name>
<first-name>Carlos</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="03" rep-type="attorney">
<addressbook>
<orgname>Nixon Peabody LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</parties>
<assignees>
<assignee>
<addressbook>
<orgname>ContentGuard Holdings, Inc.</orgname>
<role>02</role>
<address>
<city>Wilmington</city>
<state>DE</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>{hacek over (S)}mits</last-name>
<first-name>Talivaldis Ivars</first-name>
<department>2626</department>
</primary-examiner>
<assistant-examiner>
<last-name>Shortledge</last-name>
<first-name>Thomas E.</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Legality expressions are systematically pre-processed, organized, and stored to achieve faster real-time response, improved predictability, and increased reliability for queries against a large volume of legality expressions. Exponential improvements in both the time to locate the set of legality expressions matching specified search criteria and the processing costs of evaluating the request against the matching legality expressions are achieved using the disclosed systems, devices, and methods. The systems, devices, and methods are unique to the optimization of legality expression processing, but they can also enable the use of other optimization techniques for processing large amounts of data.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="161.46mm" wi="247.06mm" file="US07299171-20071120-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="249.00mm" wi="172.64mm" file="US07299171-20071120-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="248.16mm" wi="175.77mm" orientation="landscape" file="US07299171-20071120-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="252.22mm" wi="128.27mm" file="US07299171-20071120-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="233.85mm" wi="155.11mm" orientation="landscape" file="US07299171-20071120-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="254.93mm" wi="172.72mm" file="US07299171-20071120-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="259.59mm" wi="189.48mm" file="US07299171-20071120-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="258.83mm" wi="179.75mm" file="US07299171-20071120-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="247.14mm" wi="167.64mm" orientation="landscape" file="US07299171-20071120-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="206.59mm" wi="137.67mm" file="US07299171-20071120-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="180.26mm" wi="166.29mm" file="US07299171-20071120-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="238.76mm" wi="172.30mm" file="US07299171-20071120-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="243.59mm" wi="163.66mm" file="US07299171-20071120-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">FIELD OF THE INVENTION</heading>
<p id="p-0002" num="0001">The invention relates to the field of processing grammar-based legality expressions. More particularly, it relates to systems and methods that optimize processing of legality expressions, enabling legality expression processing systems to respond to requests expeditiously and within a predicable time frame.</p>
<heading id="h-0002" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0003" num="0002">Declarative Meta languages have been promoted heavily in the information technology industry since the early 1990s by industry leaders such as Microsoft, IBM, and Sun Microsystems. Since that time, an increasing number of systems and applications have adopted the use of Meta languages. One of the Meta languages, XML, has become the de facto standard.</p>
<p id="p-0004" num="0003">One use for which Meta languages have been proposed is legality expressions. Legality expressions are syntactically and semantically correct constructs based on a defined grammar. Legality expressions are the manifestation of a legality statement in digital form. The semantics of legality expressions may include assertions, certifications, permissions, obligations, prohibitions, intentions, promises, exclusivities, declarations, rules, rights, conditions, and policies. Legality expression “semantics” refer to the meanings of the legality expression. The “syntax” of legality expressions is another key component and refers to the data types and the structure in which words or expressions are put together to form phrases or clauses.</p>
<p id="p-0005" num="0004">By themselves, Meta languages typically do not carry machine-interpretable semantics. However, there has been great industry demand for machine-interpretable semantics to automate business transactions and to facilitate interoperability across devices, platforms, and systems. Driven by this demand, enterprises and industry standard groups have developed legality expression grammars to overlay a Meta language. These grammars capture the semantics of legal expressions. Analogous to the relationship between a clause and the grammar in a natural language, a legality expression is a specific clause based on and compliant with the legality expression grammar.</p>
<p id="p-0006" num="0005">Examples of legality expression grammars include, but are not limited to, the eXtensible rights Markup Language (XrML), the ISO MPEG Rights Expression Language (MPEG REL), the Open Digital Rights Language (ODRL), the Open Mobile Alliance (OMA) REL, the Content Reference Forum Contract Expression Language (CRF CEL), the Security Assertion Markup Language (SAML), the XML Access Control Language (XACL), the eXtensible Access Control Markup Language (XACML), the Business Process Execution Language (BPEL), and the Process Specification Language (PSL). Examples of legality expressions include XrML licenses that govern the use of Microsoft RMS-enabled Office documents, XML licenses that govern the use of Digital Rights Management (DRM) enabled Windows Media content, SAML assertions in Web Services applications, CEL-based eContracts for CRF-targeted business scenarios, and the like. This list of legality expression grammars is not inclusive, but instead shows examples of legality expression grammars well known in the industry.</p>
<p id="p-0007" num="0006">Legality expressions may be used in a wide variety of systems and applications. Some examples include agreements between business entities, permissions granted by rights holders to distributors and consumers, policies and rules governing computer system behaviors, digital identification, digital certificates, tokens that assert an entity's identity and attributes, tokens that assert an entity's privileges in a government or enterprise security environment, and the like.</p>
<p id="p-0008" num="0007">The primary objectives of legality expressions are to facilitate human-to-machine and machine-to-machine communications, and to enable precise and unambiguous machine interpretation. In other words, the syntax and semantics of legality expression grammars are typically not designed for an optimal real-time processing response. Transformation of the original legality expression format into a machine-internal representation is often required to detect the intent of a user from the semantics (meaning) and syntax (arrangement) of the legality expression.</p>
<p id="p-0009" num="0008">In addition, it is conventional to impose digital signatures on legality expressions to authenticate their integrity. For privacy protection, legality expressions may be further protected by cryptographic means such as encryption. To mitigate size, bandwidth, and other constraints, legality expressions may be encoded in different formats. For example, a legality expression may be encoded in a binary format to reduce its size in the mobile communication environment. The transformation, digital signature, security protection, encoding, and other potential formatting all introduce additional overhead to the processing of legality expressions.</p>
<p id="p-0010" num="0009">As grammar-based legality expressions become the prevalent means for communicating and enforcing legality terms on machine-interpreted and enforced transactions, many systems and applications may need to process large volumes of legality expressions efficiently. For example, a consumer's personal computer may contain thousands of licenses, each of which governs the use of one specific digital work or a group of digital works. In another example, a rights clearance center may manage and process millions of electronic licenses and contracts in response to frequent queries. In a third example, a large retailer may implement an automated contract issuance and management system that stores the contractual agreements between itself and its hundreds or thousands of suppliers expressed in a CEL. This application would require a gigantic database of eContracts. In addition, there are many instances where a legality expression management system needs to satisfy a fixed response-time requirement. For example, it may need to deliver authorization tokens for viewing a streaming video to the consumption device every second. A lengthy search for the appropriate permissions and usage rights would not be a practical solution in this environment.</p>
<p id="p-0011" num="0010">In a conventional legality expression processing system, legality expressions are stored sequentially in a persistent repository. The stored legality expressions are captured in the original Meta language syntax. In certain cases, the legality expressions may be binary encoded, digitally signed, security protected, and formatted by other means.</p>
<p id="p-0012" num="0011">Triggered by a processing request, the system processes the legality expressions in a linear fashion, typically going through the following steps of first selecting the legality expressions relevant to the processing request. The processing request typically encompasses a specific context. For example, a request might impose the query, “Does music distributor X have the permission from record company Y to sell its content in territory Z?” In this case, “X”, “Y”, “Z”, and “sell” can all be used as filters to select the relevant legality expressions. In other words, this specific processing request is only interested in the legality expressions that satisfy these four filtering criteria. Depending on the type of processing request, the system may need to find the first legality expression that matches the query, a subset of legality expressions that match the query, or all legality expressions that match the query.</p>
<p id="p-0013" num="0012">Second, the legality expression is validated. The set of matching legality expressions from the “Select” step must be validated and verified. This may include reversing the binary encoding process, decrypting, verifying digital signature to confirm integrity, and validating the syntax of the legality expressions against the grammar.</p>
<p id="p-0014" num="0013">Third, the legality expression is interpreted. This step extracts the semantic meaning from the legality expressions to construct the information needed for a response to the processing request. This step may also involve retrieving and processing other related legality expressions needed for the response. For examples, a usage right may only be granted if the principal possesses another (prerequisite) right. A legality expression can have one or more other rights or legal obligations requiring interpreting many layers of authorization, authentication, and the like. In this case, the system must search for and verify that the principal does possess the required pre-requisite right before granting the usage right.</p>
<p id="p-0015" num="0014">Last, the system responds to the processing request. Once the initial steps have been completed, the system must determine that all conditions and obligations are satisfied in order to properly respond to the processing request.</p>
<p id="p-0016" num="0015">These operations can be computing-resource and processing intensive, especially when the legality expressions are complicated, lengthy, or dependant on other legality expressions. Without a systematic method to organize and manage high volumes of legality expressions, it will be very difficult, and in some instances impossible, to respond to query, event, authorization, or other processing requests within a reasonable time. If the legality expressions are stored sequentially in a conventional storage area, looking up the legality expressions via linear or binary search, and the subsequent processing, may result in a wide range of indeterminate response times, making it impossible to meet fixed response time requirements. Conventional processing of legality expressions is not practical nor efficient in a system managing thousands or millions of legality expressions.</p>
<p id="p-0017" num="0016">What is needed is a new type of system and method of efficiently processing legality expressions to meet communication requests expeditiously and in a predictable time frame.</p>
<heading id="h-0003" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0018" num="0017">The present invention relates to a system and method for efficiently storing and cataloging legality expressions to provide exceptional retrieval speed and integrity. The present invention provides a simple, powerful, and elegant manner in which legality expressions that match the context may be quickly retrieved and processing costs of evaluating a processing request may be reduced.</p>
<p id="p-0019" num="0018">The present invention provides a systematic method to pre-process, organize, and store legality expressions that achieves faster real-time response, improved predictability, and increased reliability for queries against a large volume of legality expressions. This invention improves both the time to locate the set of legality expressions matching the provided context and the processing costs of evaluating the request against the matching legality expressions.</p>
<p id="p-0020" num="0019">Additionally, the present invention introduces systems, devices, and methods unique to the optimization of legality expression storage and organization to facilitate the use of additional optimization techniques for processing large amounts of data. These techniques include, but are not limited to, caching the results of frequently-used queries, indexing the data for optimal search performance, storing and organizing the data in databases, distributing the processing and computing tasks to multiple processors, and predicting the queries based on user behaviors and histograms. The storage and organization optimization methods performed by the present invention are the pre-requisites that enable the use of further optimization techniques illustrated above.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0021" num="0020">The above-mentioned and other features of this invention and the manner of attaining them will become more apparent, and the invention itself will be better understood, by reference to the following description of embodiments of the invention taken in conjunction with the accompanying figures where:</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 1A</figref> illustrates a structural block diagram of a legality expression in accordance with the present invention.</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 1B</figref> illustrates an example of a structural block diagram of an MPEG REL legality expression in accordance with the present invention.</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 2</figref> illustrates a block diagram of the components of an exemplary system to process legality expressions in a method in accordance with the present invention.</p>
<p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. 3</figref> illustrates the basic processing steps of the pre-processor of an exemplary system in accordance with the present invention.</p>
<p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. 4</figref> illustrates example processing of atomic expressions with different semantic types typically found in digital rights management (DRM) applications.</p>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. 5</figref> illustrates the basic processing steps of the selector of an exemplary system in accordance with the present invention.</p>
<p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. 6</figref> illustrates the basic processing steps of the evaluator of an exemplary system in accordance with the present invention.</p>
<p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. 7</figref> illustrates an exemplary set of authorization options used to prove that a rights holder has the right to perform a particular task.</p>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. 8</figref> illustrates an exemplary embodiment of a data model for pre-processed legality expressions.</p>
<p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. 9A</figref> illustrates an example of a pseudo MPEG REL license.</p>
<p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. 9B</figref> illustrates an example of units of evaluation that comprise an MPEG REL license.</p>
<p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. 9C</figref> illustrates an example of atomic expressions that comprise units of evaluation in an MPEG REL license.</p>
<p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. 9D</figref> illustrates an example of indices of atomic expressions in an MPEG REL license.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DETAILED DESCRIPTION OF THE INVENTION</heading>
<p id="p-0035" num="0034">The invention is described in detail with particular reference to certain preferred embodiments, but within the spirit and scope of the invention, it is not limited to such embodiments. It will be apparent to those of skill in the art that various features, variations, and modifications can be included or excluded, within the limits defined by the claims and the requirements of a particular use.</p>
<p id="p-0036" num="0035">The present invention extends the functionality of current methods and systems used to process legality expressions by properly and consistently pre-processing, organizing, and storing legality expressions to achieve increased efficiency, predictability, and speed. The system and method of the present invention has many advantages over prior systems, because the legality expressions and their elemental structures provided by the present invention significantly reduce the locating times and processing costs required while providing improved consistency and reliability in optimizing retrieval methods.</p>
<p id="p-0037" num="0036">The present invention reduces processing costs during evaluation and efficiently stores legality expressions so that they can be retrieved quickly based on given search criteria. The present invention improves both the time to locate the set of legality expressions that match the search criteria and the processing costs of evaluating the request against the matching set of results.</p>
<p id="p-0038" num="0037">The present invention discloses an evaluation model that optimizes the structure of legality expressions for storage, retrieval, and evaluation. The system of the present invention is built on the disclosed evaluation model to pre-process legality expressions. An assessment of the performance improvements that this invention offers is further described, and the structure of an example rights database for an embodiment that supports XrML is disclosed.</p>
<p id="p-0039" num="0038">1. Evaluation Model</p>
<p id="p-0040" num="0039">The disclosed evaluation model describes an optimized structure for legality expressions, an optimized mechanism to profile expressions, and an optimized unification method for storage, retrieval, and evaluation of legality expressions.</p>
<p id="p-0041" num="0040">Legality expressions may be equated to specific clauses based upon a particular grammar. The optimized structure for machine processing of legality expressions in the disclosed evaluation model is called a unit of evaluation. A unit of evaluation represents a lowest level statement that can be evaluated and thereby result in a decision, such as an authorization or an authentication decision. <figref idref="DRAWINGS">FIG. 9A</figref> illustrates a legality expression using a MPEG REL pseudo license as the example. Pseudo license is not strictly conforming to the MPEG REL syntax. It expresses the key MPEG REL semantics in a simplified form. Section [A.1] in the Appendix describes the structure of the example pseudo license and how it is represented according to the evaluation model. <figref idref="DRAWINGS">FIG. 9B</figref> illustrates units of evaluation based on the example pseudo license illustrated in <figref idref="DRAWINGS">FIG. 9A</figref>. Also section [A.2] in the Appendix describes the optimization method to partition the example pseudo license into units of evaluation.</p>
<p id="p-0042" num="0041">Units of evaluation may be further broken down into their constituent parts called “atomic expressions,” denoting the most basic building block of a unit of evaluation. Continuing from the <figref idref="DRAWINGS">FIG. 9B</figref> example, <figref idref="DRAWINGS">FIG. 9C</figref> identifies the atomic expressions within the units of expressions. Also section [A.3] in the Appendix describes the atomic expressions within each of the unit of evaluation.</p>
<p id="p-0043" num="0042">Many legality expressions languages have their own optimized methods for representing the information stored in the expressions. For example, in the MPEG REL, grants with the same principal can be grouped together into a grant group so that the principal (i.e., right grantee) need not be declared repeatedly in each grant. Such optimization reduces the number of expressions needed to represent the required statements, but it is not the optimal way to store and retrieve the target statement for evaluation. The disclosed evaluation model therefore proposes an optimized structure to which all legality expressions can be transformed so that they can be efficiently stored and retrieved for evaluation.</p>
<p id="p-0044" num="0043">The optimized mechanism to profile legality expressions in the disclosed evaluation model is a profile consisting of a set of related expressions that are syntactically different but semantically the same. That is, a set of expressions that all say the same thing but in a different way. The same statement is made in a different fashion. Use of a profile ensures the evaluation of legality expressions against a (query) context. The context contains all the facts from which an expression is evaluated. When the context is constructed from a query, it is often called a query context. The context is a set of expressions representing the facts relating to the request. Section [A.4] in the Appendix describes some examples of query contexts.</p>
<p id="p-0045" num="0044">In the example shown below, a song context object can be identified by its title and by its unique ID assigned by the producer. All the different expressions that represent a specific song are called a profile. Thus, the retrieval of the expressions representing a specific song (query context object) is guaranteed to be complete if the search is performed over all expressions in the profile for that song.</p>
<p id="p-0046" num="0045">Object: The specific musical composition of words and notes.</p>
<p id="p-0047" num="0046">Expression 1: Beethoven, Ninth Symphony (Title)</p>
<p id="p-0048" num="0047">Expression 2: Deutsche Grammophon Catalog #429861 (Record Label ID)</p>
<p id="p-0049" num="0048">The profile function returns all the different expressions that represent the same object. In the above example, the profile function returns Expression 1 and Expression 2 as below:</p>
<p id="p-0050" num="0049">Beethoven Ninth Symphony; Deutsche Grammophon Catalog #429861</p>
<p id="p-0051" num="0050">The optimized unification method for legality expressions in the disclosed evaluation model evaluates whether a query context object, which is an expression (fact) specified in the context, can be used to substitute for a particular atomic expression. An example of the optimized unification method is illustrated below:</p>
<p id="p-0052" num="0051">[1] Legality Expression: Any Beethoven Symphonies</p>
<p id="p-0053" num="0052">[2] Expression In The Query Context: Beethoven, Ninth Symphony</p>
<p id="p-0054" num="0053">Then expression [2] can be used to substitute for [1].</p>
<p id="p-0055" num="0054">Another example of the unification is shown below when an expression may not be substituted:</p>
<p id="p-0056" num="0055">[1] Legality Expression: Any Beethoven Symphonies</p>
<p id="p-0057" num="0056">[2] Expression In The Query Context: Chopin, Nocturne In ‘A’ Minor</p>
<p id="p-0058" num="0057">In this case, the query context object is not the proper context, and expression [2] cannot be used to substitute for [1].</p>
<p id="p-0059" num="0058">The unification method evaluates an atomic expression against the context and resolves the conflict if one exists in the result from the evaluation. This method is also used in the retrieval of a set of legality expressions that match with the (query) context. Expressions that are retrieved using the disclosed unification method are matched with the (query) context, and therefore the returned expressions need not be evaluated.</p>
<p id="p-0060" num="0059">a. Optimized Legality Expression Structure</p>
<p id="p-0061" num="0060">As defined above, a legality expression is a specific clause based on, and in compliance with, a legality expression grammar. In grammar-based legality expression languages, the evaluation of the legality expressions against a request can be optimally carried out over a list of units of evaluation. For example, in MPEG REL, a unit of evaluation can be a grant specifying that a principal may exercise a right over a resource under certain conditions. Section [A.2] in the Appendix describes the units of evaluation of a pseudo MPEG REL license. In BPEL, a unit of evaluation can be an operation or business activity that can be invoked or performed.</p>
<p id="p-0062" num="0061">In some applications (such as those using the MPEG REL, CRF CEL, or XACL), evaluating a unit of evaluation usually results in an authorization or authentication decision. In other applications (such as those using BPEL or PSL), evaluation of a unit of evaluation results in an activity or operation being carried out. For example, evaluation of an MPEG REL grant against a requested principal, right, and resource returns an authorization decision stipulating whether the input principal is allowed to exercise the input right over the input resource. Evaluating an XACL document against the input subject, content, and access results in an authorization decision stipulating whether the input subject is allowed to access the input content.</p>
<p id="p-0063" num="0062">Although the physical representation of a legality expression and a unit of evaluation are different among different applications, the structures of these components are similar in terms of evaluation. As shown in <figref idref="DRAWINGS">FIG. 1A</figref>, legality expression <b>100</b> comprises units of evaluation <b>110</b>. Units of evaluation <b>110</b> are made up of atomic expressions <b>120</b><i>a</i>, <b>120</b><i>b</i>, <b>120</b><i>c</i>, <b>120</b><i>d</i>. Units of evaluation <b>110</b> are combinatorial expressions. Evaluation of a unit of evaluation <b>110</b> as a whole is a conjunction of the evaluation of all of the atomic expressions <b>120</b><i>a</i>, <b>120</b><i>b</i>, <b>120</b><i>c</i>, <b>120</b><i>d </i>that comprise it.</p>
<p id="p-0064" num="0063">As an example, in <figref idref="DRAWINGS">FIG. 1B</figref>, an MPEG REL legality expression <b>101</b> is pictured. The unit of evaluation comprises a grant <b>111</b>. Grant <b>111</b> is made up of atomic expressions including the principal <b>121</b><i>a </i>to whom the grant was made, the right <b>121</b><i>b </i>expressed in the grant, the resource <b>121</b><i>c</i>, and the condition <b>121</b><i>d </i>upon which the grant is made.</p>
<p id="p-0065" num="0064">For convenience and brevity, in <figref idref="DRAWINGS">FIG. 1A</figref>, a single exemplary unit of evaluation <b>110</b>, is shown with four example atomic expressions <b>120</b><i>a</i>, <b>120</b><i>b</i>, <b>120</b><i>c</i>, <b>120</b><i>d</i>, but an unlimited number of units of evaluation may comprise a legality expression. Likewise, each unit of evaluation may have an unlimited number of atomic expressions. While many more atomic expressions may be associated with each unit of evaluation, for illustrative purposes and for brevity, four atomic expressions are shown in <figref idref="DRAWINGS">FIG. 1A</figref> and in <figref idref="DRAWINGS">FIG. 1B</figref>, respectively.</p>
<p id="p-0066" num="0065">Referring again to <figref idref="DRAWINGS">FIG. 1A</figref>, based on the semantic meaning of each unit of evaluation <b>110</b>, the atomic expressions <b>120</b> that comprise it can be identified easily. Each atomic expression <b>120</b> is a conjunctive term of the unit of evaluation <b>110</b> and can be independently evaluated. The results of evaluating the atomic expression <b>120</b> in a unit of evaluation <b>110</b> are combined to make up the evaluation of the unit of evaluation <b>110</b>. Thus, the data model for a unit of evaluation <b>110</b> disclosed in this invention is called the “evaluation model.”</p>
<p id="p-0067" num="0066">To evaluate the representation, let e be an atomic expression that can be independently evaluated. For example e is an atomic expression [p2] of unit of evaluation 2 in <figref idref="DRAWINGS">FIG. 9C</figref>. Let a(e,c) be an evaluation function of expression e against the context c. Section A.4.1 of the Appendix provides an example of an evaluation context c. Let l be an expression that represents a unit of evaluation. <figref idref="DRAWINGS">FIG. 9B</figref> illustrates an example unit of evaluation. Then, the evaluation model for the unit of evaluation can be expressed as:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>l=combinatorial expression of (e<sub>i</sub>), where i=1 . . . n<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>a</i>(<i>l,c</i>)=<i>a</i>(<i>e</i><sub>1</sub><i>, c</i>)^ . . . ^ <i>a</i>(<i>e</i><sub>n</sub><i>, c</i>)<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0068" num="0067">Let t(e,l) be a function that returns the semantic type of the atomic expression e within the given unit of evaluation l. (For example, applying the function t(e,l) to [p2] in <figref idref="DRAWINGS">FIG. 9C</figref>, which has the semantic type of Principal, would evaluate t([P2]l) to Principal.) Let m(c, x) be a function that returns all expressions of the semantic type x in the context c. (For example, applying the example query context c described in section A.4.1 of the Appendix to, the function m(c, principal) will return a DSA key holder with specific values of p<b>1</b>, q<b>1</b>, and y<b>1</b>.) Then, the evaluation function is as follows:</p>
<p id="p-0069" num="0068">a(e, c) can be evaluated if and only if:</p>
<p id="p-0070" num="0069">x=t(e, l)</p>
<p id="p-0071" num="0070">m(c,x) return null or</p>
<p id="p-0072" num="0071">m(c,x) return [y<sub>i</sub>], i=1 . . . n, and there exists at least one i such that u(e, y<sub>i</sub>), where u is the unification method as described below.</p>
<p id="p-0073" num="0072">In other words, the algorithm can be described as:</p>
<p id="p-0074" num="0073">a(e, c) can be evaluated if and only if:</p>
<p id="p-0075" num="0074">c contains no expression that has the same semantic type as e. Thus the query context c does not care about this field;</p>
<p id="p-0076" num="0075">or, if c contains at least one expression that has the same semantic type as e, then at least one of those expressions must unify with e.</p>
<p id="p-0077" num="0076">The “pre-processor” described below with regard to the exemplary system provides detailed information on how an exemplary system can pre-process legality expressions into units of evaluation and atomic expressions prior to executing a query.</p>
<p id="p-0078" num="0077">b. Profile</p>
<p id="p-0079" num="0078">In many applications, different atomic expressions may represent the same object. A profile is a set of related expressions that are syntactically different but semantically the same—that is, a set of expressions that semantically represents the same statement. Use of a profile ensures that the evaluation of legality expressions against a (query) context is complete.</p>
<p id="p-0080" num="0079">For example, an expression can represent Joe as a Microsoft .NET Passport holder; another expression can represent Joe as a holder of a public/private key pair, and so on. Section [A.5] in the Appendix describes an example of a profile. To extend the evaluation function described above, let ƒ(y) be a profile function that returns all the different expressions that represent the same object that y represents. (For example, with the example profile of [p2] as described in the section [A.5] of the Appendix, ƒ([p2]) will return a set of Joe, a specific DSA key holder and a specific Microsoft .NET Passport.) Then, the evaluation function in the previous section can be redefined as follows:</p>
<p id="p-0081" num="0080">a(e, c) can be evaluated if and only if:</p>
<p id="p-0082" num="0081">x=t(e, l)</p>
<p id="p-0083" num="0082">m(c,x) return null or</p>
<p id="p-0084" num="0083">m(c,x) return [y<sub>i</sub>], i=1 . . . n, and there exists at least one y<sub>i </sub>such that there is at least one z<sub>ij </sub>such that u(e, z<sub>ij</sub>), where z<sub>ij </sub>in the set of [z<sub>ij</sub>] returned from ƒ(y<sub>i</sub>), and u is the unification method as described below.</p>
<p id="p-0085" num="0084">The “profiler” is further described below with regard to the exemplary system and provides detailed information on how an exemplary system can profile atomic expressions.</p>
<p id="p-0086" num="0085">c. Unification Method</p>
<p id="p-0087" num="0086">The unification method evaluates whether a query context object can be used to substitute for an atomic expression. The unification method evaluates an atomic expression against the context and resolves the conflict between the atomic expression and the result from the evaluation.</p>
<p id="p-0088" num="0087">In general, an expression may contain variables, and the variables may or may not be constrained. If an expression does not contain any variables, it is called a “primitive expression.” If the expression itself represents a variable, it is called a “variable expression.”</p>
<p id="p-0089" num="0088">If the units of evaluation returned by a query contain solely primitive atomic expressions, they usually do not need to be re-evaluated or validated, since they already serve as matches to the query specified in the context. If the query returns units of evaluation that are not primitive, they must be further evaluated.</p>
<p id="p-0090" num="0089">For example, suppose the query returns an expression containing a variable for a principal, x, that has been bound to two different primitive expressions for key values, y<sub>1 </sub>and y<sub>2</sub>, thus u(x, y<sub>1</sub>) and u(x, y<sub>2</sub>). In this case, the expression must be evaluated to determine whether y<sub>1 </sub>or y<sub>2 </sub>can be substituted for x. The evaluation determines if unification may take place, that is if u(y<sub>1</sub>, y<sub>2</sub>) or u(y<sub>2</sub>, y<sub>1</sub>). If u(y<sub>1</sub>, y<sub>2</sub>) occurs, then y<sub>2 </sub>can be substituted for x. If u(y<sub>2</sub>, y<sub>1</sub>) occurs, then y<sub>1 </sub>can be substituted for x. This algorithm is used to revolve the values to which a variable is bound. Otherwise, neither y<sub>1 </sub>nor y<sub>2 </sub>can be substituted for x, and the expression returned from the query is discarded.</p>
<p id="p-0091" num="0090">The unification function u(e, y) specifies that e can be unified with y in three different instances:</p>
<p id="p-0092" num="0091">First, if e is a variable expression, then it is either subject to constraints or it is not subject to constraints. If e is a variable expression with no constraints, then e can be unified with y for all y of the same semantic type. If e is a variable expression with some constraints, then e can only be unified with y if, when e is substituted by y, all the constraints are satisfied for ally of the same semantic type.</p>
<p id="p-0093" num="0092">Second, if e is an empty expression (i.e., returns no values upon execution), then e can be unified with any expression y. For example, MPEG-REL grant <b>1</b> contains a right v to view the book b. Thus the principle p in grant <b>1</b> is an empty expression. Therefore, p can be unified with any principal such as x. This will translate to x is granted the right v to view the book b. This is similar to the case where expression e is a variable with no constraint. However, they are different in implementation since variable expression e must be bound to a value while an empty expression is not.</p>
<p id="p-0094" num="0093">Third, otherwise, let g<sub>e </sub>be a graph that represents e. Let g<sub>y </sub>be a graph that represents y. Then, e can be unified with y if either graph g<sub>e </sub>is identical with graph g<sub>y</sub>, or if every node in g<sub>e </sub>can be unified with the a node of the same semantic type in g<sub>y</sub>. Also, the unification function can use a transform function that can create transformations of the given graph to attain semantically equivalent graphs. This generic algorithm will support a partial match between expressions. Section [A.7] in the Appendix illustrates examples of unification.</p>
<p id="p-0095" num="0094">When an expression e can be unified with an expression y, then e can be substituted with y. Thus if u(e, y), then e can be substituted with y.</p>
<p id="p-0096" num="0095">Importantly, the unification function u is a one-way function; that e can be unified with y does not mean that y can be unified with e. Since the unification function is applied to each atomic expression independently, cases may exist where the same variable expression is unified with different values in different atomic expressions. The conflict resolution is therefore defined as follows:</p>
<p id="p-0097" num="0096">If e is a variable expression with or without constraints, and y<sub>1</sub>, and y<sub>2 </sub>are atomic expressions such that u(e, y<sub>1</sub>) and u(e, y<sub>2</sub>), then</p>
<p id="p-0098" num="0097">e can only be substituted by y<sub>2 </sub>if u(y<sub>1</sub>, y<sub>2</sub>), or</p>
<p id="p-0099" num="0098">e can only be substituted by y<sub>1 </sub>if u(y<sub>2</sub>, y<sub>1</sub>). This is to resolve a variable which is bound to more than one value.</p>
<p id="p-0100" num="0099">Third and lastly, if variable expression e cannot be substituted, then there is no answer for e within the given context c such that the function of a(e, c) cannot be evaluated.</p>
<p id="p-0101" num="0100">The “evaluator” is further described below with regard to the exemplary system and illustrates how an exemplary system can evaluate legality expressions using this unification method.</p>
<p id="p-0102" num="0101">2. Exemplary System</p>
<p id="p-0103" num="0102">The disclosed evaluation model presents a system that performs exemplary processing steps for a rights expression language, XrML, as one possible embodiment of the invention. However, this invention is not limited to any particular legality expression language or to XrML. The invention may be applied to any legality expression language.</p>
<p id="p-0104" num="0103"><figref idref="DRAWINGS">FIG. 2</figref> illustrates an exemplary system that efficiently processes grammar-based legality expressions using the invented processes. This exemplary embodiment comprises a pre-processor <b>220</b>, a profiler <b>240</b>, a repository <b>260</b>, a selector <b>280</b>, and an evaluator <b>290</b>. Additionally, a legality expression input module <b>210</b> is used to initiate pre-processing of the legality expressions, query requestor <b>270</b> is utilized to initiate the selection and evaluation requestor <b>297</b> is utilized in the evaluation process of the atomic expressions, and context module <b>230</b> is used to construct the (query) context with which to select the matching atomic expressions, unit of evaluations, and processing instructions. Context module <b>230</b> may be a separate module or may be included in the query requestor <b>270</b>. The output module <b>295</b> may receive the result from processed units of evaluation.</p>
<p id="p-0105" num="0104">As shown again in <figref idref="DRAWINGS">FIG. 2</figref>, system <b>200</b> is comprised of modules that perform specific operations to carry out a method of efficiently processing grammar-based legality expressions in accordance with the present invention. The modules may be software sub-routines or program files called to perform specific operations to carry out the method of the present invention. While software modules are shown, it is to be understood that all or a portion of the exemplary embodiments can also be conveniently implemented by the preparation of application-specific integrated circuits or by interconnecting an appropriate network of component circuits. For simplicity and brevity, an exemplary embodiment utilizing software modules is shown in <figref idref="DRAWINGS">FIG. 2</figref>.</p>
<p id="p-0106" num="0105">Legality expression input module <b>210</b> submits a legality expression to pre-processor <b>220</b>. Pre-processor <b>220</b> partitions the legality expressions into units of evaluation as described above with regard to the evaluation model and as further described below with specific regard to the pre-processor. Each unit of evaluation is broken down into searchable independent expressions called “atomic expressions.” Pre-processor <b>220</b> further ensures that the partitioning process conforms to grammar <b>222</b> and specification <b>224</b>. Pre-processor <b>220</b> outputs units of evaluation, atomic expressions, and processing instructions to repository <b>260</b>, which may store these outputs. Repository <b>260</b> makes these outputs available to profiler <b>240</b>, which manages the profiles for all atomic expressions as proposed by the evaluation model. The units of evaluation and atomic expressions are indexed by the pre-processor <b>220</b> before being stored in repository <b>260</b> and made available to selector <b>280</b>.</p>
<p id="p-0107" num="0106">Query requestor <b>270</b> submits an input query request to the context module <b>230</b> to construct the (query) context and submits the (query) context to the selector <b>280</b> as the request. Selector <b>280</b> processes the input query request by locating the previously pre-processed units of evaluation and the associated atomic expressions in repository <b>260</b> that match the input query or utilizing those same outputs from profiler <b>240</b>.</p>
<p id="p-0108" num="0107">The selector <b>280</b> uses a matching mechanism based on a unification algorithm as described above with regard to the evaluation model.</p>
<p id="p-0109" num="0108">The evaluation requestor <b>297</b> submits an evaluation request to the evaluator <b>290</b>. The evaluator <b>290</b> first requests the context module <b>230</b> to construct the (query) context, then submits the (query) context to the selector <b>280</b> to retrieve the matching units of evaluation and the associated atomic expressions and processing instructions. The evaluator <b>280</b> evaluates the selected units of evaluation and the associated atomic expressions returned by the selector <b>280</b> against the given evaluation request and context <b>230</b> and determines if the match is satisfactory by evaluating the results against a prescribed evaluation criteria.</p>
<p id="p-0110" num="0109">The pre-processor <b>220</b> and the profiler <b>240</b> are the preparation means to organize and manage the legality expressions and associated information. The selector <b>280</b> and the evaluator <b>290</b> are engaged upon receipt of a processing request to generate specific results. In other words, the pre-processor <b>220</b> and the profiler <b>240</b> are typically offline operations, whereas the selector <b>280</b> and the evaluator <b>290</b> perform real-time operations.</p>
<p id="p-0111" num="0110">This example system represents one of many possible embodiments of this invention. Other embodiments may implement only some of these components or present themselves in different architectural structures that perform the same processing steps. Any system that incorporates the processing steps described above can efficiently process grammar-based legality expressions.</p>
<p id="p-0112" num="0111">a. Pre-Processor</p>
<p id="p-0113" num="0112"><figref idref="DRAWINGS">FIG. 3</figref> illustrates the basic processing steps of the pre-processor. The goal of pre-processing is to translate legality expressions into searchable independent expressions. Pre-processing involves validating the syntax of the legality expressions against the grammar, verifying the integrity of the legality expressions based on the application's trust model, normalizing legality expressions into a form suited for optimal machine processing, assessing the semantic meaning of the legality expressions, partitioning legality expressions into units of evaluation, atomizing units of evaluation into atomic expressions, indexing each unit of evaluation and atomic expression based on its semantic meaning, and storing the units of evaluation, their atomic expressions, and corresponding processing instructions into a searchable persistent repository.</p>
<p id="p-0114" num="0113">At <b>301</b> in the “Validate” step, the pre-processor validates and verifies the legality expression against the grammar and specification. For example, in many XML-based legality expression languages, this step usually involves checking the expression's syntax against its XML schema and checking the expression's semantics against its specification. Other legality expression languages may employ other means to validate the syntax and semantics of their input expressions.</p>
<p id="p-0115" num="0114">In the “Verify” step of <b>305</b>, the pre-processor checks the integrity of the legality expression to make sure that it has not been changed or tampered with. Many legality expression languages, such as XML-based legality expression languages, support digital signatures as a mechanism to protect the integrity of the expression and to indicate its source. Using a digital signature requires trust between the signer and the verifier. Therefore, the mechanism to verify the trust and the integrity of the legality expressions relies on the trust mechanism used by the system.</p>
<p id="p-0116" num="0115">In the “Normalize” step at <b>311</b>, the pre-processor converts the legality expression into a form suited for optimal machine processing. The incoming legality expressions may be encoded in various ways. They may be digitally signed, and they may be security protected (i.e., encrypted). In addition, they may be packaged together with a resource such as a digital work or packed inside a resource, requiring them to be extracted from the package. Moreover, many different legality expressions may actually represent the same object, requiring canonicalization to produce a consistent representation of the input legality expression based on predefined methods. Canonicalization captures the essential characteristics of the object in a highly deterministic fashion by conforming to accepted rules and standards. The normalizing process addresses these issues and takes all of the necessary steps to transform incoming legality expressions into a single, normalized form. The normalized form can be device, platform, and storage independent.</p>
<p id="p-0117" num="0116">The validate <b>301</b> and verify <b>305</b> and normalize <b>311</b> steps may be performed in either order with similar results. No constraints are imposed on the order in which the “Validate” and “Verify” and “Normalize” steps are performed on the input legality expressions.</p>
<p id="p-0118" num="0117">At <b>321</b> in the “Partition” step, the pre-processor breaks the input legality expressions into units of evaluation. Since the structure of a legality expression is application domain-specific, the method of partitioning a legality expression into units of evaluation depends upon its semantic specifications. If parts of the input legality expression were encrypted, the pre-processor will decrypt the encrypted parts before breaking the input legality expression into units of evaluation.</p>
<p id="p-0119" num="0118">According to the evaluation model, a unit of evaluation consists of a sequence of atomic expressions. The result of evaluating the unit of evaluation is the conjunction of the evaluation of the atomic expressions that comprise it. That is, the function is true only if all its arguments are true. Thus, the evaluation model proposes a method to convert the input expressions into a set of legality expressions by converting the input expression into a disjunctive normal form. An example disjunctive normal form is:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>(A OR B) AND C; which equates to (A AND C) OR (B AND C)<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0120" num="0119">This is represented symbolically by:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>(A V B)^C; which equates to (A^C)V(B^C)<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0121" num="0120">In general, a disjunctive normal form is represented mathematically as:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>(e<sub>l1</sub>^ . . . ^e<sub>ln</sub>) V . . . V (e<sub>m1</sub>^ . . . ^<sub>mk</sub>)<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0122" num="0121">Each term (e<sub>n1</sub>^ . . . ^e<sub>nm</sub>) in the disjunctive normal form is in conjunctive form, and therefore is considered a unit of evaluation. Section [A.2] in the Appendix illustrates how an MPEG REL legality expression as illustrated in <figref idref="DRAWINGS">FIG. 9A</figref> is partitioned into multiple units of evaluation.</p>
<p id="p-0123" num="0122">For example, an XACL document usually contains an expression for the subject content, c, and an expression for the subject policy. The content expression c, in turn, consists of an expression for user information and bid information, while the policy expression contains disjunctive expressions for access rules, r<sub>1 </sub>. . . r<sub>n</sub>. Thus, the XACL document can be modeled as:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>c^(r<sub>1 </sub>V . . . V r<sub>n</sub>)<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0124" num="0123">This expression can be converted to its disjunctive normal form as follows:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>(c ^ r<sub>1</sub>) V . . . V (c ^ r<sub>n</sub>)<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0125" num="0124">Then, each expression (c ^ r<sub>n</sub>) becomes a unit of evaluation. In some cases, for example, r<sub>n </sub>may contain disjunctive expressions of subject and access, as follows:</p>
<p id="p-0126" num="0125">
<tables id="TABLE-US-00001" num="00001">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="35pt" align="left"/>
<colspec colname="1" colwidth="182pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>&lt;rule id=”rule1”&gt;</entry>
</row>
<row>
<entry/>
<entry> &lt;acl&gt;</entry>
</row>
<row>
<entry/>
<entry>  &lt;subject&gt; &lt;uid&gt; Alice &lt;/uid&gt; &lt;/subject&gt;</entry>
</row>
<row>
<entry/>
<entry>  &lt;privilege type=”read” sign=”+”/&gt;</entry>
</row>
<row>
<entry/>
<entry>  &lt;privilege type=”write” sign=”+”/&gt;</entry>
</row>
<row>
<entry/>
<entry> &lt;/acl&gt;</entry>
</row>
<row>
<entry/>
<entry>&lt;/rule&gt;</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0127" num="0126">Thus, r<sub>n</sub>=s ^ (r V w), where s, r, and w are expressions for subject, privilege type “read”, and privilege type “write”.</p>
<p id="p-0128" num="0127">Then, r<sub>n </sub>can be converted to (s ^ r) V (r ^ w) and c ^ r<sub>n </sub>converted to (c^s^r)V(c^s^w). Finally, each (c^s^r) and (c^s^w) are units of evaluation instead of c^r<sub>n</sub>.</p>
<p id="p-0129" num="0128">In another example, an XrML license usually contains one or more grants. Each grant e<sub>g </sub>contains a conjunction of expressions for a principal e<sub>p</sub>, a right e<sub>a</sub>, a resource e<sub>r</sub>, and a condition e<sub>c</sub>. Therefore, an XrML license can be written in the following form:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>(e<sub>p1 </sub>^ e<sub>a1 </sub>^ e<sub>r1 </sub>^ e<sub>c1</sub>) V (e<sub>pn </sub>^ e<sub>an </sub>^ e<sub>rn </sub>^ e<sub>cn</sub>)<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0130" num="0129">Thus, each grant (e<sub>pn </sub>^ e<sub>an </sub>^ e<sub>rn </sub>^ e<sub>cn</sub>) of the input XrML license is a unit of evaluation.</p>
<p id="p-0131" num="0130">Further unit of evaluation examples in legality expressions include, but are not limited to, an agreement in a contract (such as obligation or prohibition clause), an activity (such as a business activity), an operation (such as a manufacturing operation), a rule in a policy, and a privilege or characteristic (such as a security token or a claim). The partitioning of the normalized legality expressions into their corresponding units of evaluation ensures all expressions are captured.</p>
<p id="p-0132" num="0131">In the “Atomize” step of <b>325</b>, the pre-processor breaks each unit of evaluation into searchable, independent atomic expressions. The atomize process includes resolving or cross-referencing interdependent atomic expressions. In the XrML example above, each grant e<sub>g </sub>is a unit of evaluation that contains atomic expressions for a principal e<sub>p</sub>, a right e<sub>a</sub>, a resource e<sub>r </sub>and a condition e<sub>c</sub>. Section [A.3] in the Appendix describes how units of evaluation as illustrated in <figref idref="DRAWINGS">FIG. 9B</figref> are atomized to a set of atomic expressions.</p>
<p id="p-0133" num="0132">At <b>331</b> in the “Index” step, the pre-processor organizes the units of evaluation, atomic expressions, processing instructions, and other data relevant for optimal query response time. For example, if an entity may be identified by different synonymous names such as a Microsoft .NET passport ID, email address, family name, nickname, and a frequent flyer number, an index can be created to associate the synonymous names together to facilitate fast search and response. Another example is creating a database table encompassing all of the atomic legality expressions associated with a frequently-queried entity to expedite all queries related to that entity.</p>
<p id="p-0134" num="0133">Since atomic expressions can be evaluated independently, their content and semantic meaning should be indexed so that they can be easily retrieved later in the evaluation process. For example, if an XrML principal is of type “DSA key holder,” the principal is also of the more generic type “key holder,” and is also of the more generic type “principal, then the principal should be indexed as type DSA key holder, as key holder, as principal, and the principal's key value should also be indexed so that the search on any key holder, any DSA, and any principal will also return this specific instance of DSA key. <figref idref="DRAWINGS">FIG. 9D</figref> illustrates the proposed indices for atomic expression and section [A.8] in the Appendix describes the different types of semantic meanings of atomic expressions.</p>
<p id="p-0135" num="0134">1) Different Organization Methods</p>
<p id="p-0136" num="0135">Association and indexes are not the only way to store units of evaluation and atomic expressions along with their processing instructions. Different applications may use different organization methods to ensure efficient storage and retrieval.</p>
<p id="p-0137" num="0136">a) Associate Sets of Key/Value Pairs with Legality Expressions</p>
<p id="p-0138" num="0137">A first alternative organization method employs the pre-processor to associate sets of key/value pairs with legality expressions (or fragments of legality expressions). The sets of key/value pairs can be extracted from the legality expression or passed in separately.</p>
<p id="p-0139" num="0138">Embodiments that provide key/value pairs to the pre-processor may generate them in a variety of ways. For example, the key/value pairs could be based on the context in which the legality expression was received. The context could provide information about possible intended use.</p>
<p id="p-0140" num="0139">The key/value pairs could provide a range of information, such as metadata associated with fragments of the legality expression, validity periods for the legality expression, or information used to categorize the legality expression so that search spaces may be partitioned. These key/value pairs could then be used to limit the legality expression search space when processing an evaluation request.</p>
<p id="p-0141" num="0140">For example, an online retailer may make special offers when the site has low traffic. To do this, they put in place dynamic offers that are considered to be in the search space when traffic is low. These offers are registered with a key (trafficLevel) and a value (low). When a consumer hits the retailer's web site, the server detects the traffic level and requests the offers registered with the trafficLevel key associated with a value equal to the current traffic level. If the current traffic level is low, the consumer receives all offers registered with a trafficLevel of low. Similarly, when the consumer buys an item, the web site server determines the trafficLevel and the special offers that apply to that trafficLevel. Those offers determine the price of the item, including any additional discounts that may apply at that time.</p>
<p id="p-0142" num="0141">Associating key/value pairs with legality expressions can limit the search space and the number of legality expressions that must be evaluated. In the example above, environment data at the time of the request can be used in conjunction with the registered key/value pairs to limit the search space and thus provide faster results. Similarly, data extracted from the request, data provided by the user, or data obtained through other means can be used in conjunction with key/value pairs to limit the search space.</p>
<p id="p-0143" num="0142">b) Assign Legality Expressions to Different Search Spaces</p>
<p id="p-0144" num="0143">Second, the pre-processor can assign legality expressions to different search spaces based on certain criteria. The criteria could be extracted or determined from the legality expression or passed in separately. Possible partitioning schemes include using different database tables, using different processors or processor territories, and using different partition structures, but other partitioning schemes may be used as well.</p>
<p id="p-0145" num="0144">If utilizing different database tables, complete legality expressions may be stored in different tables, analogous to a hash table. Each database table then represents one bucket in the hash table. Ideally, each incoming request would require a search space limited to one table. The number of tables to use would depend on a performance analysis and vary with each environment. In addition, legality expressions could be fragmented and stored in sub-tables.</p>
<p id="p-0146" num="0145">Also, if using different processors or servers or processor territories, complete legality expressions may be stored in separate, independent search spaces, each of which is managed by a processor, for example, a hardware processor or management software. This scheme is also similar to a hash table, but each processor represents one hash table bucket. In addition, several processors may receive the same request in parallel, and results could be accumulated.</p>
<p id="p-0147" num="0146">In a variation of this scheme, no pre-set association would exist between processors and search spaces. Instead, the processor that searches a specific search space is determined at request time. Several processors may search the available search spaces in parallel.</p>
<p id="p-0148" num="0147">Additionally, if using different partition structures, complete legality expressions may be stored in different search spaces defined by partition structures, such as file system directories. For example, all legality expressions created, retrieved by, or otherwise associated with a specific user could be placed in that user's “Secure Documents and Settings” directory. Whenever the user is logged in, any requests would be made against the legality expressions in the user's “Secure Documents and Settings” directory.</p>
<p id="p-0149" num="0148">c) Assign Expressions into Search Spaces of Different Priorities</p>
<p id="p-0150" num="0149">Lastly, the pre-processor can assign legality expressions into search spaces of different priorities. Legality expressions can be stored in any logical or physical storage, but each search space is assigned a priority. Requests can then be applied against search spaces in priority order—the highest priority first, followed by next highest priority, and so on. In this case, a mechanism will exist for promoting or demoting legality expressions in search spaces of different priorities, perhaps based on the number of times that a legality expression is used or based on some other statistic. Any combination of these above approaches can also be used.</p>
<p id="p-0151" num="0150">In the “Storage” step of <b>335</b>, the pre-processor stores the units of evaluation, atomic expressions, and processing instructions in a searchable, persistent repository so that they can be retrieved efficiently for evaluation or query. During this step, the association between the units of evaluation, the atomic expressions, and the processing instructions must be maintained so that, given one piece of information, the other information associated with it can be retrieved easily. For example, given an atomic expression, it should be fast and efficient to retrieve the unit of evaluation to which it belongs. Similarly, given a unit of evaluation, it should be fast and efficient to retrieve all atomic expressions that comprise it.</p>
<p id="p-0152" num="0151">Processing instructions may need to be associated with both the unit of evaluation and the atomic expression so that when they are retrieved for evaluation, the processing instructions will provide optimal means for evaluating them efficiently. Some processing instructions may be stored as separate data, while others may be part of the expressions. Although different applications may need different processing instructions, the most common processing instructions are the type of expression and the semantic type of the expression.</p>
<p id="p-0153" num="0152">The type of the expression indicates whether an expression is primitive expression or variable expression. If an expression is variable expression, processing instructions should stipulate whether any constraint is associated with it. This information is used during the evaluation process to determine whether a given expression needs evaluation.</p>
<p id="p-0154" num="0153">The semantic type of the expression is used during the evaluation process as described in the evaluation model disclosed above. An expression can be evaluated only against another expression of the same type.</p>
<p id="p-0155" num="0154"><figref idref="DRAWINGS">FIG. 4</figref> illustrates an example processing of atomic expressions with different semantic types typically found in digital rights management (DRM) applications. In DRM applications, atomic expressions are usually classified as authentication expressions or as authorization expressions. Atomic expression <b>433</b> is classified as an authentication expression <b>434</b> while atomic expression <b>466</b> is classified as an authorization expression <b>467</b>. When evaluated, authentication expression <b>434</b> results in an authentication decision <b>443</b>. Example authentication expressions include identification or certification of a user, a right, or a resource, such as a device. When evaluated, authorization expression <b>467</b> results in authorization decision <b>476</b>. An example authorization expression is a permission that allows a user to view an electronic book.</p>
<p id="p-0156" num="0155">Additional embodiments may vary in the storage mechanism and destination that they support. One example of a storage destination is a database. The process of storing the pre-processed results to a database could involve SQL INSERT commands. The “Example Rights Database” section provides an example of one possible database structure for storing pre-processed legality expressions in an embodiment that supports XrML.</p>
<p id="p-0157" num="0156">b. Profiler</p>
<p id="p-0158" num="0157">The profiler stores and manages the profiles within the system. A profile is a set of identifications assigned to or associated with an atomic expression. Each profile is uniquely identifiable by a profile ID. Profiling is the process of managing profiles for all atomic expressions.</p>
<p id="p-0159" num="0158">For example, a profile for a digital song may contain the song title, the unique identification of the song, the URL of the song, and so on. The profile can be used during the indexing process to create all equivalent indices for a given atomic expression. The profile can be used during the selection process to broaden the query for an atomic expression from that expression's specific identification to all other identifications for that atomic expression.</p>
<p id="p-0160" num="0159">In many cases, an atomic expression may have several identifications or the identification may be expressed in different ways syntactically. For example, a user named Joe can be identified by an XrML keyHolder, as follows:</p>
<p id="p-0161" num="0160">
<tables id="TABLE-US-00002" num="00002">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="21pt" align="left"/>
<colspec colname="1" colwidth="196pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>&lt;keyHolder licensePartId=”Joe”&gt;</entry>
</row>
<row>
<entry/>
<entry> &lt;info&gt;</entry>
</row>
<row>
<entry/>
<entry>  &lt;dsig:KeyValue&gt;</entry>
</row>
<row>
<entry/>
<entry>   &lt;dsig:RSAKeyValue&gt;</entry>
</row>
<row>
<entry/>
<entry>    &lt;dsig:Modulus&gt;KtdToQQyzA==&lt;/dsig:Modulus&gt;</entry>
</row>
<row>
<entry/>
<entry>    &lt;dsig:Exponent&gt;AQABAA==&lt;/dsig:Exponent&gt;</entry>
</row>
<row>
<entry/>
<entry>   &lt;/dsig:RSAKeyValue&gt;</entry>
</row>
<row>
<entry/>
<entry>  &lt;/dsig:KeyValue&gt;</entry>
</row>
<row>
<entry/>
<entry>  &lt;/info&gt;</entry>
</row>
<row>
<entry/>
<entry>&lt;/keyHolder&gt;</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0162" num="0161">Joe can also be identified using a Microsoft .NET passport, as follows:</p>
<p id="p-0163" num="0162">
<tables id="TABLE-US-00003" num="00003">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="49pt" align="left"/>
<colspec colname="1" colwidth="168pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>&lt;passport&gt;</entry>
</row>
<row>
<entry/>
<entry> &lt;userid&gt;joe@hotmail.com&lt;/userid&gt;</entry>
</row>
<row>
<entry/>
<entry>&lt;/passport&gt;</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0164" num="0163">Joe can also be identified as a person using the following three example representations:</p>
<p id="p-0165" num="0164">
<tables id="TABLE-US-00004" num="00004">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="35pt" align="left"/>
<colspec colname="1" colwidth="182pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>&lt;person&gt;</entry>
</row>
<row>
<entry/>
<entry> &lt;ssn&gt;123-45-6789&lt;/ssn&gt;</entry>
</row>
<row>
<entry/>
<entry> &lt;licenseNumber&gt;B7654321&lt;/licenseNumber&gt;</entry>
</row>
<row>
<entry/>
<entry>&lt;/person&gt;</entry>
</row>
<row>
<entry/>
<entry>&lt;person&gt;</entry>
</row>
<row>
<entry/>
<entry> &lt;ssn&gt;123-45-6789&lt;/ssn&gt;</entry>
</row>
<row>
<entry/>
<entry>&lt;/person&gt;</entry>
</row>
<row>
<entry/>
<entry>&lt;person&gt;</entry>
</row>
<row>
<entry/>
<entry> &lt;licenseNumber&gt;B7654321&lt;/licenseNumber&gt;</entry>
</row>
<row>
<entry/>
<entry>&lt;/person&gt;</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0166" num="0165">Since the atomic expression, Joe, has multiple identifications, a request to determine whether Joe has the right to view a video clip may not return any matches if only legality expressions that contain Joe as an XrML keyHolder are evaluated. To ensure completeness, all legality expressions that refer to Joe using any of his identifications must be evaluated.</p>
<p id="p-0167" num="0166">Some embodiments of the profiler may not produce and associate all permutations of the same atomic expression as seen with the &lt;person&gt; element described above. These embodiments may simply associate the different types of identifications that refer to the same atomic expression.</p>
<p id="p-0168" num="0167">One way to implement a profile is to structure the profile so that it contains any number of identifications, each with an identification type and an identification value.</p>
<p id="p-0169" num="0168">The identification type indicates the type of the identification value—either an expression or a constant. In the case of a constant, the identification type indicates the type of constant (such as a DSA key, an RSA key, a URI reference, a file reference, and the like).</p>
<p id="p-0170" num="0169">The identification value is the constant value (such as the RSAKeyValue, DSAKeyValue, URI reference, and the like) or the expression value (such as ContentGuard Employee).</p>
<p id="p-0171" num="0170">At an abstract level, a profile may look like this:</p>
<p id="p-0172" num="0171">
<tables id="TABLE-US-00005" num="00005">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>Profile (Profile ID)</entry>
</row>
<row>
<entry/>
<entry>[constant]Joe</entry>
</row>
<row>
<entry/>
<entry> [constant] Passport holder P1 (joe@hotmail.com)</entry>
</row>
<row>
<entry/>
<entry> [expression] ContentGuard employee</entry>
</row>
<row>
<entry/>
<entry> [constant] Key holder P2 (KtdToQQyzA==, AQABAA==)</entry>
</row>
<row>
<entry/>
<entry> [constant] Person P3 (123-45-6789, B7654321)</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0173" num="0172">In an exemplary embodiment, the profiler indexes identifications and stores them in a searchable profile table (described below in the “Example Rights Database” section) in the persistent repository. To manage the profile, the profiler consists of two major functions, the profile update, and the profile query.</p>
<p id="p-0174" num="0173">The profile update function is employed when creating a new profile or updating an existing profile. To speed up the query process, both Profile ID and Identification fields of the profile table are indexed.</p>
<p id="p-0175" num="0174">The profile query function is utilized when retrieving the profile that contains all the identifications for the given atomic expression. Generally, the profile query function is used by the selector (see the “Selector” section below) to retrieve all known identifications for a given atomic expression to construct the alternative query to retrieve the set of legality expressions for a given request. Input to the query is either the profile ID or the identification value. When input is an identification value, the profile ID is retrieved and then used to retrieve all the identifications with the same profile ID.</p>
<p id="p-0176" num="0175">c. Selector</p>
<p id="p-0177" num="0176"><figref idref="DRAWINGS">FIG. 5</figref> illustrates the basic processing steps of the selector. The selector locates the units of evaluation, the atomic expressions, and the processing instructions from the repository to match the query context.</p>
<p id="p-0178" num="0177">Since the selector queries against pre-processed legality expressions in the form of atomic expressions, the process of finding a match against many legality expressions is much faster than querying against legality expressions that have not been pre-processed. In addition, the time needed to process the matching expressions is reduced.</p>
<p id="p-0179" num="0178">In the example embodiment, the selector supports any query on authentication expressions, authorization expressions, and combinations of authentication and authorization expressions.</p>
<p id="p-0180" num="0179">As shown in <figref idref="DRAWINGS">FIG. 5</figref>, selecting involves planning for the queries from the input context objects in step <b>505</b>, constructing the initial search domain for the queries, executing each query, validating the result, and possibly refining the search domain and making a modified query.</p>
<p id="p-0181" num="0180">In the “Planning” step at <b>510</b>, the selector examines each expression in the (query) context and plans for the queries in an optimal way. Different embodiments may implement different search optimizations for this step. For example the user-friendly query, “Does the principal P have the right R on resource r?” is translated into the optimal query context required by the system, which consists of “principal P”, “right R”, “resource r”, and other information needed for the evaluation. Instead of translating or extracting key data from a user-friendly query to form an optimal query, some embodiments may simply take optimal inputs from the caller.</p>
<p id="p-0182" num="0181">Also in the planning step, the selector retrieves the profile for each atomic expression in the (query) context and uses the profiles, if any, to construct queries to search for all legality expressions in the searchable persistent repository. Using the example query above, if the profile of the “principal P” is found and contains the following identifications:</p>
<p id="p-0183" num="0182">
<tables id="TABLE-US-00006" num="00006">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="63pt" align="left"/>
<colspec colname="1" colwidth="154pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>Profile</entry>
</row>
<row>
<entry/>
<entry> Profile ID</entry>
</row>
<row>
<entry/>
<entry>  Principal P</entry>
</row>
<row>
<entry/>
<entry>  Passport holder P1</entry>
</row>
<row>
<entry/>
<entry>  ContentGuard employee</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0184" num="0183">Then, either one of the following independent queries is constructed:</p>
<p id="p-0185" num="0184">
<tables id="TABLE-US-00007" num="00007">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry> [Principal P or Passport holder P1 or ContentGuard</entry>
</row>
<row>
<entry/>
<entry>employee, Rights R, resource r]</entry>
</row>
<row>
<entry/>
<entry> Or</entry>
</row>
<row>
<entry/>
<entry> [Principal P, Rights R, resource r]</entry>
</row>
<row>
<entry/>
<entry> [Passport holder P1, Rights R, resource r]</entry>
</row>
<row>
<entry/>
<entry> [ContentGuard employee, Rights R, resource r]</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0186" num="0185">Context objects are the output of this planning step.</p>
<p id="p-0187" num="0186">At <b>515</b>, in the “Construct an Initial Search Domain” step, the selector constructs a search domain for the queries. The search domain is the subset of the searchable persistent repository that relates to the set of queries. Constructing the search domain limits the search scope. By reducing the search scope, performance is further improved. A query statement is the resulting output of the search domain construction step. Section [A.9] in the Appendix describes the query planning for each atomic expressions in the unit of evaluation.</p>
<p id="p-0188" num="0187">In the “Query” step at <b>520</b>, each query from the set of queries is executed. For each query, each atomic expression in the unit of evaluation is compared with the corresponding atomic expression in the query request. The query result is a set of atomic expressions that matched the expression specified in the query. In one example embodiment, the query results contain an expression ID that the selector uses to retrieve all atomic expressions that comprise each unit of evaluation identified by the query results.</p>
<p id="p-0189" num="0188">Some embodiments of the selector may examine a query to see if it contains specific identifications for any of the atomic expressions. For each atomic expression that has a specific identification, the selector interacts with the profiler to retrieve all the possible identifications for the atomic expression. Then, the selector reconstructs the query for all identifications of that atomic expression.</p>
<p id="p-0190" num="0189">Other embodiments of this invention implement the interaction with the profiler for creating queries for all the possible identifications of atomic expressions in some other component (such as the evaluator). An example embodiment is also possible in which the selector does not reconstruct queries based on the different identifications for a given atomic expression, but rather a user creates all possible queries based on the profiles for each atomic expression.</p>
<p id="p-0191" num="0190">In the “Validate” step at <b>525</b>, all the matching atomic expressions must be validated against the unification rules. The unification rules stipulate whether an atomic expression in a unit of evaluation can be unified with the corresponding atomic expression in the query request.</p>
<p id="p-0192" num="0191">For example, a query for a principal named “John Doe” should return all expressions of the type principal according to the unification rules. If the returned expression is a variable expression with constraints, the selector validates all the constraints of the returned variable expression against the principal “John Doe.”</p>
<p id="p-0193" num="0192">An embodiment of this invention can build a semantically-knowledgeable Mutating Matcher component that combines unification with some of the responsibilities of the profiler. This Mutating Matcher component matches an atomic expression in a request with the corresponding atomic expression in the unit of evaluation in question. As part of the matching process, this component performs the task of analyzing all variations of the atomic expression from the request by interchanging the positions of any children to find permutations that are consistent with the semantics of the specific expression type and translating the identification of an atomic expression into other identifications to try to find a match.</p>
<p id="p-0194" num="0193">For example, an XrML allPrincipals element is an atomic expression inside an XrML grant, which is a unit of evaluation. The allPrincipals element represents an entity that holds several identifications. When an allPrincipals is in a grant, at least all of the identities in the allPrincipals must be present in order for the grant to be exercised. If identities in addition to those specified in the allPrincipals element are present, the grant can still be exercised. An allPrincipals element can contain any number of identities, and the order of the identities is not significant. The following pseudo grant allows Fred and John to play a movie:</p>
<p id="p-0195" num="0194">
<tables id="TABLE-US-00008" num="00008">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>&lt;license&gt;</entry>
</row>
<row>
<entry> &lt;grant&gt;</entry>
</row>
<row>
<entry>  &lt;allPrincipals&gt;</entry>
</row>
<row>
<entry>   &lt;keyHolder&gt;...Fred...&lt;/keyHolder&gt;</entry>
</row>
<row>
<entry>   &lt;keyHolder&gt;...John...&lt;/keyHolder&gt;</entry>
</row>
<row>
<entry>  &lt;/allPrincipals&gt;</entry>
</row>
<row>
<entry>  &lt;play!&gt;</entry>
</row>
<row>
<entry> &lt;digitalResource&gt;...www.mymovies.com/movie...&lt;/digitalResource&gt;</entry>
</row>
<row>
<entry>  &lt;/grant&gt;</entry>
</row>
<row>
<entry>&lt;/license&gt;</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0196" num="0195">A request is made asking if Fred, John, and Mary can play the movie. In XrML, that request would be represented by the following principal, right, and resource:</p>
<p id="p-0197" num="0196">
<tables id="TABLE-US-00009" num="00009">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>&lt;allPrincipals&gt;</entry>
</row>
<row>
<entry> &lt;keyHolder&gt;...Fred...&lt;/keyHolder&gt;</entry>
</row>
<row>
<entry> &lt;keyHolder&gt;...John...&lt;/keyHolder&gt;</entry>
</row>
<row>
<entry> &lt;keyHolder&gt;...Mary...&lt;/keyHolder&gt;</entry>
</row>
<row>
<entry>&lt;/allPrincipals&gt;</entry>
</row>
<row>
<entry>&lt;play/&gt;</entry>
</row>
<row>
<entry>&lt;digitalResource&gt;...www.mymovies.com/movie...&lt;/digitalResource&gt;</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0198" num="0197">Determining whether the allPrincipals element in the request matches the one in the grant involves determining whether all the principals in the allPrincipals in the grant are in the set of principals in the request's allPrincipals element. An implementation of a Mutating Matcher component determines whether the two allPrincipals elements match according to the semantics of the allPrincipals element. Since the semantics of the allPrincipals element stipulate that all the identities must be present to exercise the grant, the Mutating Matcher component must check that Fred and John are both present in the request's allPrincipals element. Since the request's allPrincipals element includes a superset of the required identities (it includes Fred, John, and Mary), there is a match.</p>
<p id="p-0199" num="0198">An embodiment of this invention can create an extensible architecture that allows the addition of unification or profiler plug-in components that are knowledgeable about the semantics of the atomic expressions that are being unified or profiled. Assuming that many unification or a profiling plug-in components may be present, the unification or profiling components to be used could be determined by an isSupported method that could take two atomic expressions and any additional context as parameters and return a Boolean value indicating whether it supports matching of two expressions.</p>
<p id="p-0200" num="0199">After the “Validate” step of <b>525</b>, the selector determines if any irrelevant atomic expressions were returned at step <b>528</b>, and in step <b>530</b>, “Refine Search Domain,” irrelevant atomic expressions and their related units of evaluation are discarded from the search domain. The query can be made again against the refined search domain. Thus, the search domain is continuously refined after each query so that subsequent queries search more efficiently. With this mechanism, the performance of subsequent queries is dramatically improved until units of evaluation and their atomic expressions are successfully matched in step <b>550</b>.</p>
<p id="p-0201" num="0200">d. Evaluator</p>
<p id="p-0202" num="0201">Evaluating is the process of comparing units of evaluation in the persistent repository with the given evaluation request and context. Since legality expressions in the system of the present invention have already been pre-processed, only the atomic expressions and, in some embodiments, the units of evaluation associated with the matching parts, are needed for evaluation, rather than evaluating the entire set of legality expressions.</p>
<p id="p-0203" num="0202">Each atomic expression, such as a condition or obligation, is evaluated based on the current state of each legality expression. For efficiency, the evaluator may resolve conflict between units of evaluation, combine units of evaluation, or select particular units of evaluation from the selected set based on the application's policies.</p>
<p id="p-0204" num="0203">Given an evaluation request against a given input context, the evaluator can validate the input context for the request, profile the expressions in the input context, retrieve the matching expressions (units of evaluation, atomic expressions, and processing instructions) for evaluation from the searchable persistent repository, validate each atomic expression, and validate each unit of evaluation.</p>
<p id="p-0205" num="0204">Referring to <figref idref="DRAWINGS">FIG. 6</figref>, an input context is provided in step <b>610</b>. In the “Validate Input Context” step of <b>620</b>, the input context for the request is validated. For example, an evaluation request may ask the question, “Does Joe have the right to view a book?” That request supplies the facts about Joe, the view right, and the book as the input context for the request. Before evaluating the request, the input context must be validated against the requirements of the application. For example, in both XrML and MPEG REL authorization story, the context must contains expressions for the requesting principal, the requested right, and the requested resource. In a CRF CEL application, the context may contain any combination of the expressions for trigger events, principal, act, and resource. In XACL, the context must contain the expressions for the content, subject, and access. In step <b>625</b>, the evaluator determines if the input context contains all the required elements, and if the required elements are not present in the input context, an error occurs and the evaluation terminates at <b>680</b>.</p>
<p id="p-0206" num="0205">If the input context contains the required elements, at step <b>630</b> in the “Profile” step, the evaluator uses the profiler to profile each expression in the input context. As described in the “Profiler” section above, the profile contains all variations of the expression that the evaluator should take into account during evaluation. For example, the XrML keyholder representing Joe is the same as the passport holder with the ID joe@hotmail.com and the person with the social security number 123-45-6789. Thus, the profile of an expression that represents Joe returns all three expressions representing Joe. Constructing a profile for each context object is important to ensure that the evaluation is complete.</p>
<p id="p-0207" num="0206">In the “Locate” step at <b>640</b>, the evaluator uses the profiles and their semantic types to construct a query for the selector. The selector returns the set of first matching units of evaluation along with their associated atomic expressions and processing instructions. The first matching expressions are those that match the query, but that have not been validated yet.</p>
<p id="p-0208" num="0207">If the units of evaluation returned by the selector are primitive expressions, the evaluator does not need to re-evaluate or validate them, since they already serve as matches to the query specified in the input context, and at step <b>645</b> the primitive expressions are passed through and access to the input context is granted at <b>670</b>.</p>
<p id="p-0209" num="0208">If the selector returns units of evaluation that are not primitive, the evaluator needs to evaluate them. At step <b>650</b> the system “Validates the Unit of Evaluation,” and at <b>660</b> the system “Validates Each Atomic Expression.” In these steps, the evaluator determines whether the matching expressions returned by the selector can be validated according to the evaluation model described above with regard to the unification rules. For example, if one or more expressions in a unit of evaluation contain variables, the evaluator needs to validate the binding of those variables. During the two “Validate” steps at <b>650</b> and <b>660</b>, the evaluator follows any processing instruction that was associated to the returned units of evaluation and atomic expressions. Upon completion of the validating steps, access to the input context is granted at <b>670</b>, and the evaluation terminates at <b>680</b>.</p>
<p id="p-0210" num="0209">In some applications such as those using the MPEG REL, CRF CEL, or XACML, evaluating a unit of evaluation usually results in an authorization or authentication decision. In other applications such as those using BPEL or PSL, evaluation of a unit of evaluation results in an activity or operation being carried out. For example, evaluation of an XrML grant against the input principal, right, and resource returns an authorization decision stipulating whether the input principal is allowed to exercise the input right over the input resource. Evaluating an XACML document against the input subject, content, and access results in an authorization decision stipulating whether the input subject is allowed to access the input content.</p>
<p id="p-0211" num="0210">Beside the basic processing steps described above, embodiments of the evaluator may implement additional optimizations, such as caching requests and their corresponding results and pre-computing a set of expected common requests. Caching results may reduce costly computations due to common and frequent requests. The cache can be designed with a frequency for re-computing each cached request depending on the implementation. In addition, the cache may be implemented with self-destruct features. By pre-computing a set of expected common results, the evaluator could match incoming requests against the expected common set of requests, and, in the case of a match, return the pre-computed results. If the incoming request does not match any of the common set of requests, the evaluator would process the request as usual. The expected common results would be re-computed periodically, with the expiration time depending on the implementation. Re-computation may be triggered by a request that occurs after the pre-computed result expires.</p>
<p id="p-0212" num="0211">3. Performance Improvements</p>
<p id="p-0213" num="0212">The evaluation model of the present invention greatly improves the performance of systems that evaluate legality expressions. The following materials assess the performance improvements offered by the evaluation model and the exemplary processing steps disclosed by the present invention.</p>
<p id="p-0214" num="0213">Legality expressions can be more efficiently processed if they are pre-processed to partition them into units of evaluation that, when evaluated, result in authentication decisions or authorization decisions. Further breaking each unit of evaluation into a set of atomic expressions dramatically improves the response time of the evaluation system since it is easier and more efficient to organize and store atomic expressions rather than entire legality expressions, and it is more efficient to process atomic expressions, because they are in a form that is ready for evaluation. When an atomic expression has been matched against the context, in some cases it does not need to be re-evaluated.</p>
<p id="p-0215" num="0214">The improvement in processing time caused by implementing the pre-processor and selector functionality of this invention over a traditional method can be shown by mathematical means. Let N be the number of expressions in the searchable persistent repository. Let x be the time needed to process each legality expression using the traditional method, including the time needed to validate the syntax and semantics of the expression, verify its integrity, and interpret it. Let n be the number of matching expressions in the initial search domain N. Let y be the time needed to select each matching expression based on the proposed selection process. Then, the method as proposed in this invention will improve the response time when:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>(<i>N</i>)(<i>x</i>)&gt;(<i>n</i>)(<i>y</i>)<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>Or<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>N/n&gt;y/x</i><?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0216" num="0215">In the worst case scenario y=x, so the improvement ratio of this invention against the traditional approach is N/n, where N is the number of expressions for consideration (for instance, all those in the repository), and n is the number of expressions that match the query. Since n will always be less than or equal to N, the improvement ratio will never be less than one (that is, no performance loss).</p>
<p id="p-0217" num="0216">Taking this a step further, it is expected that N will be much larger than n. That is, the set of expressions is much larger than the subset of matches. The conclusion is that the higher the number of expressions that an application is expected to consider, the larger the performance gains. Such gains are obvious in cases where N is in the thousands or hundred of thousands. Performance gains can be further highlighted in applications that receive common requests and implement the optimization ideas proposed for the evaluator's processing, such as caching requests.</p>
<p id="p-0218" num="0217">An embodiment of this invention can provide exponential gains in performance compared to a conventional legality expression processing system. <figref idref="DRAWINGS">FIG. 7</figref> illustrates an example set of authorization options that can be used from a high level to better understand how exponential gains in efficiency are possible. For this example, consider a rights authorization request that asks, “Can Edgar view the book?” Answering this question could potentially require answering many sub-queries. In <figref idref="DRAWINGS">FIG. 7</figref>, the large circle represents the original authorization request query (Can Edgar print the book?). Each small circle represents a sub-query that is made. Each box represents a rights expression that authorizes a request (for example, &lt;Edgar&gt;, can &lt;print&gt;, &lt;book&gt; If &lt;Edgar&gt;, can &lt;sell&gt;, &lt;book&gt;). For this example, assume that these rights expressions are in a repository that contains 10,000 rights expressions. Without any pre-processing or caching, the system that produced this authorization forest (note that there are two trees that satisfy the original request) would need to process all 10,000 rights expressions for each of the 11 queries. However, using the processes proposed in this invention would enable time savings for each of queries processed, resulting in exponential performance gains.</p>
<p id="p-0219" num="0218">4. Example Rights Database</p>
<p id="p-0220" num="0219"><figref idref="DRAWINGS">FIG. 8</figref> illustrates an exemplary data model for an embodiment of the present invention that supports XrML. The example data model captures the output of the pre-processor and profiler. <figref idref="DRAWINGS">FIG. 8</figref> illustrates how an exemplary pre-processor implementation can partition XrML expressions into units of expression and atomic expressions. Additionally, the pre-processor implementation can store XrML expressions into a database and identify sets of expressions that are different syntactically but the same semantically and represent that information in a database.</p>
<p id="p-0221" num="0220">The profiler and the selector query against this data when requested by the evaluator.</p>
<p id="p-0222" num="0221">This data model consists of several database tables, each of which contains the specified fields to represent the output of the pre-processor and the profiler.
<ul id="ul0001" list-style="none">
    <li id="ul0001-0001" num="0000">
    <ul id="ul0002" list-style="none">
        <li id="ul0002-0001" num="0222">Profile Table—Contains profiles for atomic expressions.
        <ul id="ul0003" list-style="none">
            <li id="ul0003-0001" num="0223">Profile ID—The primary key to refer to a profile.</li>
            <li id="ul0003-0002" num="0224">Type—Type of the identification.</li>
            <li id="ul0003-0003" num="0225">Identification—Expression of the actual value of the resource.</li>
        </ul>
        </li>
        <li id="ul0002-0002" num="0226">License Table—Contains the licenses in the searchable persistent repository.
        <ul id="ul0004" list-style="none">
            <li id="ul0004-0001" num="0227">License ID—The primary key to refer to a license.</li>
            <li id="ul0004-0002" num="0228">Number of Simple Expressions—Total number of grants as units of evaluation in the license identified by the License ID.</li>
            <li id="ul0004-0003" num="0229">Number of issuers—Number of issuers of the license identified by the License ID.</li>
            <li id="ul0004-0004" num="0230">License in Canonical Form—The canonical form of the license.</li>
        </ul>
        </li>
        <li id="ul0002-0003" num="0231">Expression Table—Contains a mapping between each of the expressions and the corresponding license.
        <ul id="ul0005" list-style="none">
            <li id="ul0005-0001" num="0232">Expression ID—The primary key to refer to an expression.</li>
            <li id="ul0005-0002" num="0233">License ID—The primary key to refer to a license.</li>
            <li id="ul0005-0003" num="0234">Location Info—Location of this expression within the license. This information is used to verify the integrity of the expression against its license.</li>
        </ul>
        </li>
        <li id="ul0002-0004" num="0235">Authenticated Expression Table—Contains information about the authenticated expressions.
        <ul id="ul0006" list-style="none">
            <li id="ul0006-0001" num="0236">Expression ID—The primary key to refer to an expression</li>
            <li id="ul0006-0002" num="0237">License ID—The primary key to refer to a license</li>
            <li id="ul0006-0003" num="0238">Principal Expression—The actual value that represents the principal.</li>
            <li id="ul0006-0004" num="0239">Principal Type—The principal type, either expression or a type of value (such as DSA key, RSA key, and the like). This field is used as the search field if the query is based on the principal type instead of the specific value of the principal.</li>
            <li id="ul0006-0005" num="0240">Principal Location Info—Location of the principal expression within its atomic expression. This information is used to verify the integrity of the principal expression within its atomic expression and its license.</li>
            <li id="ul0006-0006" num="0241">Principal Profile ID—The principal's profile contains all identifications of the given principal.</li>
            <li id="ul0006-0007" num="0242">Rights—Expression for the right</li>
            <li id="ul0006-0008" num="0243">Rights Location Info—Location of the rights expression within its atomic expression This information is used to verify the integrity of the rights expression within its atomic expression and its license.</li>
            <li id="ul0006-0009" num="0244">Resource—Expression for the resource.</li>
            <li id="ul0006-0010" num="0245">Resource Profile ID—The resource's profile contains all identifications of the given resource.</li>
            <li id="ul0006-0011" num="0246">Resource Location Info—Location of the resource expression within its atomic expression This information is used to verify the integrity of the resource expression within its atomic expression and its license.</li>
        </ul>
        </li>
        <li id="ul0002-0005" num="0247">Authorized Expression Table—Usually authorized expressions operate on different sets of data. Therefore, each type of authorized expression or each group of authorized expressions is stored in a separated table. All authorized expression tables have the following fields:
        <ul id="ul0007" list-style="none">
            <li id="ul0007-0001" num="0248">Expression ID—The primary key to refer to an expression</li>
            <li id="ul0007-0002" num="0249">License ID—The primary key to refer to a license</li>
            <li id="ul0007-0003" num="0250">Authorize Type—Type of the authorized expression</li>
            <li id="ul0007-0004" num="0251">Location Info—Location of the authorized expression within its atomic expression. This information is used to verify the integrity of the resource expression within its atomic expression and its license.</li>
            <li id="ul0007-0005" num="0252">Authorize Expression—Name of the authorized expression</li>
        </ul>
        </li>
    </ul>
    </li>
</ul>
</p>
<heading id="h-0006" level="1">APPENDIX</heading>
<p id="p-0223" num="0253">A.1 Example of a Pseudo License in MPEG REL</p>
<p id="p-0224" num="0254"><figref idref="DRAWINGS">FIG. 9A</figref> illustrates a pseudo MPEG REL license <b>1</b> which consists of one grant [g<b>1</b>] and a grant group [G].</p>
<p id="p-0225" num="0255">The grant [g<b>1</b>] specifies that any DSA Key Holder [p<b>1</b>] is granted the right to play [a<b>1</b>] a song [r<b>1</b>], “Nocturne in A minor, Chopin.” According to the disclosed evaluation model, the grant [g<b>1</b>] can be represented as follows:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>g1=p1^a1^r1<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0226" num="0256">The grant group [G] specifies that a principal [p2], a specific DSA Key Holder, is granted the rights to play [a<b>2</b>] plus the rights to copy [a<b>3</b>] the songs [r<b>2</b>], [r<b>3</b>], “any symphony of Beethoven” as specified in the grants [g<b>2</b>] and[g<b>3</b>]. The right to copy [a<b>3</b>] is only valid if the condition [c<b>3</b>] is satisfied at the time that right [a<b>3</b>] is exercised. Thus, according to the disclosed evaluation model, the grant group [G] can be represented as follows:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>G=</i>(<i>p</i>2)^((<i>a</i>2^<i>r</i>2) <i>V </i>(<i>a</i>3^<i>r</i>3^<i>c</i>3))<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0227" num="0257">Thus, the license l in <figref idref="DRAWINGS">FIG. 9A</figref> can be represented as follows:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>License l=g<b>1</b> V G, or<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>License <i>l</i>=(<i>p</i>1^<i>a</i>1^<i>r</i>1) V (<i>p</i>2)^((<i>a</i>2^<i>r</i>2) <i>V </i>(<i>a</i>3^<i>r</i>3^<i>c</i>3))<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0228" num="0258">A.2 Unit of Evaluation—Optimized Legality Expression Structure</p>
<p id="p-0229" num="0259">The license l as illustrated in <figref idref="DRAWINGS">FIG. 9A</figref> is optimally represented according to the syntax of the MPEG REL grammar. Since expressions specified in license <b>1</b> contains a random combination of both conjunctive and disjunctive forms, it is not optimal to evaluate the license l in its current form. The disclosed evaluation model proposes the expression represented the license l is converted to a disjunctive normal form. Thus,
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>License <i>l=</i>(<i>p</i>1^<i>a</i>1^<i>r</i>1) <i>V </i>(<i>p</i>2)^((<i>a</i>2^<i>r</i>2) <i>V </i>(<i>a</i>3^<i>c</i>3))<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
can be mathematically converted to:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>License <i>l=</i>(<i>p</i>1^<i>a</i>1^<i>r</i>1) <i>V </i>((<i>p</i>2^<i>r</i>2 ^<i>a</i>2) <i>V </i>(<i>p</i>2^<i>r</i>3^<i>a</i>3^<i>c</i>3)), or<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>License <i>l=</i>(<i>p</i><b>1</b>^<i>a</i><b>1</b>^<i>r</i><b>1</b>) <i>V </i>(<i>p</i><b>2</b>^<i>a</i><b>2</b>^<i>r</i><b>2</b>) <i>V</i>(<i>p</i><b>2</b>^<i>a</i><b>3</b>^<i>r</i><b>3</b>^<i>c</i><b>3</b>)<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0230" num="0260">The reason for the second form is to be consistent with the order of terms defined in MPEG-REL. However, within a unit of evaluation, the order of the conjunctive terms (atomic expression) within each disjunctive term (unit of evaluation) is not critical.</p>
<p id="p-0231" num="0261">Each of the conjunctive expressions (p<b>1</b>^a<b>1</b>^r<b>1</b>), (p2^a<b>2</b>^r<b>2</b>), and (p2^a<b>3</b>^r<b>3</b>^c<b>3</b>) will be a unit of evaluation according to the disclosed evaluation model.</p>
<p id="p-0232" num="0262"><figref idref="DRAWINGS">FIG. 9B</figref> illustrates an expression that represents the license l in <figref idref="DRAWINGS">FIG. 9A</figref> partitioned into an optimized structure that consists of three independent units of evaluation.</p>
<p id="p-0233" num="0263">Unit of evaluation u<b>1</b>: (p<b>1</b> ^ a<b>1</b> ^ r<b>1</b>), in the context of the license l as illustrated in <figref idref="DRAWINGS">FIG. 9A</figref>. This unit of evaluation specifies that the principal [p<b>1</b>], any DSA Key Holder, is granted the right to play [a<b>1</b>] the song [r<b>1</b>], “Nocturne in A minor, Chopin.”</p>
<p id="p-0234" num="0264">Unit of evaluation u<b>2</b>: (p2 ^ a<b>2</b> ^ r<b>2</b>), in the context of the license l as illustrated in <figref idref="DRAWINGS">FIG. 9A</figref>. This unit of evaluation specifies that the principal [p2], a specific DSA Key Holder, is granted the right to play [a<b>2</b>] any song [r<b>2</b>], “Any Beethoven symphony.”</p>
<p id="p-0235" num="0265">Unit of evaluation u<b>3</b>: (p2 ^ a<b>3</b> ^ r<b>3</b> ^ c<b>3</b>), in the context of the license l as illustrated in <figref idref="DRAWINGS">FIG. 9A</figref>. This unit of evaluation specifies that the principal [p2], a specific DSA Key Holder, is granted the right to copy [a<b>3</b>] any song [r<b>3</b>], “Any Beethoven symphony” and the condition [c<b>3</b>] stipulates that only two copies are allowed.</p>
<p id="p-0236" num="0266">Each unit of evaluation that comprises the license l is an independent statement that, when evaluated, will result in a decision of whether or not to grant the requesting principal the requested right to use the requested resource.</p>
<p id="p-0237" num="0267">A.3 Atomic Expression</p>
<p id="p-0238" num="0268">Each unit of evaluation can be further atomized into atomic expressions for efficient indexing, storage, retrieval, and evaluation. Atomic expressions are expressions that made up a unit of evaluation and are independently evaluated. Independent evaluation means the result of the evaluation of an atomic expression is independent of the result of the evaluation of other atomic expression that make up the same unit of evaluation.</p>
<p id="p-0239" num="0269">Atomic expressions for unit of expression u<b>1</b>—consisting of 3 independent expressions:</p>
<p id="p-0240" num="0270">expression for principal [p<b>1</b>], any DSA Key Holder;”</p>
<p id="p-0241" num="0271">expression for play rights [a<b>1</b>]; and</p>
<p id="p-0242" num="0272">expression for resources [r<b>1</b>]: Nocturne in A minor, Chopin.</p>
<p id="p-0243" num="0273">Atomic expressions for unit of expression u<b>2</b>—consisting of 3 independent expressions:</p>
<p id="p-0244" num="0274">expression for principal [p2], a specific DSA Key Holder;”</p>
<p id="p-0245" num="0275">expression for play rights [a<b>2</b>]; and</p>
<p id="p-0246" num="0276">expression for resources [r<b>2</b>], Any Beethoven's symphonies.</p>
<p id="p-0247" num="0277">Atomic expressions for unit of expression u<b>3</b>—consisting of 4 independent expressions:</p>
<p id="p-0248" num="0278">expression for principal [p2], a specific DSA Key Holder;”</p>
<p id="p-0249" num="0279">expression for copy rights [a<b>3</b>];</p>
<p id="p-0250" num="0280">expression for resources [r<b>3</b>], Any Beethoven's symphonies; and</p>
<p id="p-0251" num="0281">expression for condition [c<b>3</b>], Exercise limit count=2.</p>
<p id="p-0252" num="0282">A.4—Example of Query Contexts</p>
<p id="p-0253" num="0283">A.4.1—The context for the request, “Can the DSA Key Holder with a specific p<b>1</b>, q<b>1</b>, y<b>1</b> play the song: Beethoven, Ninth Symphony?” can be represented as follows:</p>
<p id="p-0254" num="0284">
<tables id="TABLE-US-00010" num="00010">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>Query Context c</entry>
</row>
<row>
<entry/>
<entry>{</entry>
</row>
<row>
<entry/>
<entry> Principal = Specific DSA Key Holder with p1, q1, y1 key value</entry>
</row>
<row>
<entry/>
<entry> Right = Play</entry>
</row>
<row>
<entry/>
<entry> Resource = “Beethoven, Ninth Symphony”</entry>
</row>
<row>
<entry/>
<entry>}</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0255" num="0285">A.4.2—The context for the request, “Can the song Beethoven, Ninth Symphony be played?” can be represented as follows:</p>
<p id="p-0256" num="0286">
<tables id="TABLE-US-00011" num="00011">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>Query Context c</entry>
</row>
<row>
<entry/>
<entry>{</entry>
</row>
<row>
<entry/>
<entry>   Right = Play</entry>
</row>
<row>
<entry/>
<entry>   Resource = “Beethoven, Ninth Symphony”</entry>
</row>
<row>
<entry/>
<entry>}</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0257" num="0287">A.5—Examples of a Profile</p>
<p id="p-0258" num="0288">A principal [p2] in <figref idref="DRAWINGS">FIG. 9C</figref> with a specific DSA Key Holder with P, Q, Y key values is also known as Joe, and is also known as a specific Microsoft .NET Passport holder. Thus the profile for [p2] is as follows:</p>
<p id="p-0259" num="0289">
<tables id="TABLE-US-00012" num="00012">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>Profile f</entry>
</row>
<row>
<entry>{</entry>
</row>
<row>
<entry>    Joe</entry>
</row>
<row>
<entry>    Specific DSA Key Holder with p1, q1, y1 key value</entry>
</row>
<row>
<entry>    Specific Microsoft .NET Passport holder with passport value</entry>
</row>
<row>
<entry>}</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0260" num="0290">A.6—Example of Semantic Type</p>
<p id="p-0261" num="0291">The principal [p2] in <figref idref="DRAWINGS">FIG. 9C</figref> is an atomic expression of the unit of evaluation u<b>2</b> in <figref idref="DRAWINGS">FIG. 9B</figref>. Within the context of unit of evaluation u<b>2</b>, the primary semantic type of [p2] is a Principal within a Grant expressed in MPEG REL.</p>
<p id="p-0262" num="0292">However, within the context of MPEG REL, the semantic type of this particular Principal [p2] is a DSA Key Holder identified by the values of the DSA key.</p>
<p id="p-0263" num="0293">A.7—Example of Unification</p>
<p id="p-0264" num="0294">A definition of a DSA Key Holder principal in MPEG REL is as follows:</p>
<p id="p-0265" num="0295">
<tables id="TABLE-US-00013" num="00013">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="70pt" align="left"/>
<colspec colname="1" colwidth="147pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>Principal</entry>
</row>
<row>
<entry/>
<entry> keyHolder</entry>
</row>
<row>
<entry/>
<entry>  info</entry>
</row>
<row>
<entry/>
<entry>   KeyValue</entry>
</row>
<row>
<entry/>
<entry>    DSAKeyValue</entry>
</row>
<row>
<entry/>
<entry>      P</entry>
</row>
<row>
<entry/>
<entry>      Q</entry>
</row>
<row>
<entry/>
<entry>       Y</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0266" num="0296">A.7.1—Suppose that an atomic expression e is a specific DSA Key Value with p<b>1</b>, q<b>1</b>, y<b>1</b> and an expression x which has the same semantic type as e and also has a specific DSA Key Value with p<b>1</b>, q<b>1</b> and y<b>1</b>, then e is unified with x, and x can be used to substitute for e.</p>
<p id="p-0267" num="0297">
<tables id="TABLE-US-00014" num="00014">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="63pt" align="left"/>
<colspec colname="1" colwidth="154pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>e = keyHolder</entry>
</row>
<row>
<entry/>
<entry>   info</entry>
</row>
<row>
<entry/>
<entry>    KeyValue</entry>
</row>
<row>
<entry/>
<entry>     DSAKeyValue</entry>
</row>
<row>
<entry/>
<entry>      p1</entry>
</row>
<row>
<entry/>
<entry>      q1</entry>
</row>
<row>
<entry/>
<entry>      y1</entry>
</row>
<row>
<entry/>
<entry>x = keyHolder</entry>
</row>
<row>
<entry/>
<entry>    info</entry>
</row>
<row>
<entry/>
<entry>    KeyValue</entry>
</row>
<row>
<entry/>
<entry>     DSAKeyValue</entry>
</row>
<row>
<entry/>
<entry>      p1</entry>
</row>
<row>
<entry/>
<entry>      q1</entry>
</row>
<row>
<entry/>
<entry>      y1</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0268" num="0298">A.7.2—Suppose that an atomic expression e is a DSA Key Value with no specific P, Q, Y, and an expression x, which has the same semantic type as e and has a specific DSA Key Value with p<b>1</b>, q<b>1</b>, and y<b>1</b>, then e is unified with x, and x can be used to substitute for e.</p>
<p id="p-0269" num="0299">
<tables id="TABLE-US-00015" num="00015">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="56pt" align="left"/>
<colspec colname="1" colwidth="161pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>e = keyHolder</entry>
</row>
<row>
<entry/>
<entry>   info</entry>
</row>
<row>
<entry/>
<entry>    KeyValue</entry>
</row>
<row>
<entry/>
<entry>     Any DSAKeyValue</entry>
</row>
<row>
<entry/>
<entry>x = keyHolder</entry>
</row>
<row>
<entry/>
<entry>   info</entry>
</row>
<row>
<entry/>
<entry>    KeyValue</entry>
</row>
<row>
<entry/>
<entry>     DSAKeyValue</entry>
</row>
<row>
<entry/>
<entry>      p1</entry>
</row>
<row>
<entry/>
<entry>      q1</entry>
</row>
<row>
<entry/>
<entry>      y1</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0270" num="0300">A.7.3—Suppose that an atomic expression e is a Key Value with no specified key type, and x<b>1</b> is a DSA Key Value with no specific P, Q, Y, and an expression x<b>2</b>, which has the same semantic type as e and has a specific DSA Key Value with p<b>1</b>, q<b>1</b> and y<b>1</b>, then e is unified with both x<b>1</b> and x<b>2</b>, and either x<b>1</b> or x<b>2</b> can be used to substitute for e.</p>
<p id="p-0271" num="0301">
<tables id="TABLE-US-00016" num="00016">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="56pt" align="left"/>
<colspec colname="1" colwidth="161pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>e = keyHolder</entry>
</row>
<row>
<entry/>
<entry>   info</entry>
</row>
<row>
<entry/>
<entry>    KeyValue</entry>
</row>
<row>
<entry/>
<entry>x1 = keyHolder</entry>
</row>
<row>
<entry/>
<entry>   info</entry>
</row>
<row>
<entry/>
<entry>    KeyValue</entry>
</row>
<row>
<entry/>
<entry>     Any DSAKeyValue</entry>
</row>
<row>
<entry/>
<entry>x2 = keyHolder</entry>
</row>
<row>
<entry/>
<entry>   info</entry>
</row>
<row>
<entry/>
<entry>    KeyValue</entry>
</row>
<row>
<entry/>
<entry>     DSAKeyValue</entry>
</row>
<row>
<entry/>
<entry>      p1</entry>
</row>
<row>
<entry/>
<entry>      q1</entry>
</row>
<row>
<entry/>
<entry>      y1</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0272" num="0302">However, when e is unified with both x<b>1</b> and x<b>2</b> within the same unit of evaluation, then if x<b>1</b> is unified with x<b>2</b>, then e can only be substituted by x<b>2</b>, if x<b>2</b> is unified with x<b>1</b>, then e can only be substituted by x<b>1</b>. Otherwise, e cannot be substituted with either x<b>1</b> or x<b>2</b>. In the above example [A.7.3], e is unified with both x<b>1</b> and x<b>2</b>, and x<b>1</b> is unified with x<b>2</b>. Therefore, x<b>2</b> is used to substitute for e, NOT x<b>1</b>.</p>
<p id="p-0273" num="0303">A.8—Example of Indices</p>
<p id="p-0274" num="0304"><figref idref="DRAWINGS">FIG. 9C</figref> describes the unit of evaluation 2 with its atomic expressions as follows:</p>
<p id="p-0275" num="0305">Atomic expression [p2], a specific DS Key Holder with key value p<b>1</b>, q<b>1</b>, y<b>1</b>:
<ul id="ul0008" list-style="none">
    <li id="ul0008-0001" num="0000">
    <ul id="ul0009" list-style="none">
        <li id="ul0009-0001" num="0306">Primary semantic type in the context of the unit of expression u<b>2</b>: Principal</li>
        <li id="ul0009-0002" num="0307">Secondary semantic types in the context of the MPEG REL: DSAKeyValue, KeyValue, keyHolder</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0276" num="0308">Atomic expression [a<b>2</b>], a right to play
<ul id="ul0010" list-style="none">
    <li id="ul0010-0001" num="0000">
    <ul id="ul0011" list-style="none">
        <li id="ul0011-0001" num="0309">Primary semantic type in the context of the unit of expression u<b>2</b>: Rights</li>
        <li id="ul0011-0002" num="0310">Secondary semantic types in the context of the MPEG REL: not specified</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0277" num="0311">Atomic expression [r<b>2</b>], any Beethoven symphonies:
<ul id="ul0012" list-style="none">
    <li id="ul0012-0001" num="0000">
    <ul id="ul0013" list-style="none">
        <li id="ul0013-0001" num="0312">Primary semantic type in the context of the unit of expression u<b>2</b>: Resource</li>
        <li id="ul0013-0002" num="0313">Secondary semantic types in the context of the MPEG REL: Beethoven symphonies, any symphonies, classical music</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0278" num="0314"><figref idref="DRAWINGS">FIG. 9D</figref> describes the possible indices for any atomic expression. Indices for atomic expressions are based on their semantic meanings or types. There are two types of semantic meanings:
<ul id="ul0014" list-style="none">
    <li id="ul0014-0001" num="0000">
    <ul id="ul0015" list-style="none">
        <li id="ul0015-0001" num="0315">1. The semantic meaning or type in the context of the unit of evaluation. For MPEG REL, a semantic meaning or type of an atomic expression is one of principal, rights, resource, conditions expressions, etc.</li>
        <li id="ul0015-0002" num="0316">2. The semantic meanings or types in the context of the language. For example, in MPEG REL a specific DSA Key Holder principal is a KeyValue and also a keyHolder. The semantic meanings within the language are further classified into two types of indices. The main index is the actual type of the atomic expression, while the secondary indices are more generic types of the main index.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0279" num="0317">A.9—Example of Planning and Executing Queries</p>
<p id="p-0280" num="0318">Given Joe whose profile is specified in the example in section [A.5]</p>
<p id="p-0281" num="0319">A.7.1—Profile f</p>
<p id="p-0282" num="0320">
<tables id="TABLE-US-00017" num="00017">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>{</entry>
</row>
<row>
<entry>   Joe</entry>
</row>
<row>
<entry>   Specific DSA Key Holder with p1, q1, y1 key value</entry>
</row>
<row>
<entry>   Specific Microsoft .NET Passport holder with passport value</entry>
</row>
<row>
<entry>}</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0283" num="0321">A license l as specified in <figref idref="DRAWINGS">FIG. 9A</figref> and section [A.1] is partitioned into units of evaluations and atomic expressions as described in sections [A.2] and [A.3]. All the atomic expressions are indexed as described in section [A.8].</p>
<p id="p-0284" num="0322">Given that Joe requests authorization to play the Ninth Symphony, Beethoven, then the request consists of the following facts that made up a query context:</p>
<p id="p-0285" num="0323">
<tables id="TABLE-US-00018" num="00018">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="35pt" align="left"/>
<colspec colname="1" colwidth="182pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>Context{</entry>
</row>
<row>
<entry/>
<entry>   Principal = Joe</entry>
</row>
<row>
<entry/>
<entry>   Rights = Play</entry>
</row>
<row>
<entry/>
<entry>   Resource = Ninth Symphony, Beethoven.</entry>
</row>
<row>
<entry/>
<entry>}</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0286" num="0324">A.9.1—Planning Queries for the Context Object: Principal</p>
<p id="p-0287" num="0325">To plan for the query, first the profile for each context object is retrieved. For example, the profile for Joe includes the following object O:</p>
<p id="p-0288" num="0326">
<tables id="TABLE-US-00019" num="00019">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="63pt" align="left"/>
<colspec colname="1" colwidth="154pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>O: Principal</entry>
</row>
<row>
<entry/>
<entry>  keyHolder</entry>
</row>
<row>
<entry/>
<entry>    KeyValue</entry>
</row>
<row>
<entry/>
<entry>      DSAKeyValue</entry>
</row>
<row>
<entry/>
<entry>        p1, q1, y1</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0289" num="0327">Since O is a specific DSA Key Holder, the primary semantic meaning (or type) of O is a principal, the main index of O is DSAKeyValue, and the secondary indices of O are KeyValue and keyHolder. So, the planning queries include the following search:
<ul id="ul0016" list-style="none">
    <li id="ul0016-0001" num="0000">
    <ul id="ul0017" list-style="none">
        <li id="ul0017-0001" num="0328">1. Search on any principal with the main index is DSAKeyValue, and if P, Q, Y are specified, then P, Q, Y must match with p<b>1</b>, q<b>1</b>, y<b>1</b> respectively. Thus, the principal [p2] of the unit of evaluation 2, and [p2] of the unit of evaluation 3 in <figref idref="DRAWINGS">FIG. 9C</figref> will be a match of the query. However, [p<b>1</b>] in unit of evaluation 1 in <figref idref="DRAWINGS">FIG. 9C</figref> will not be a match since its main index is not DSAKeyHolder but KeyValue.</li>
        <li id="ul0017-0002" num="0329">2. Search on any principal with the main index is KeyValue. Thus, principal [p<b>1</b>] of the unit of evaluation 1 in <figref idref="DRAWINGS">FIG. 9C</figref> will be a match since its main index is KeyValue.</li>
        <li id="ul0017-0003" num="0330">3. Search on any principal with the main index is keyHolder.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0290" num="0331">Thus, the queries for the context object Principal once executed, will return the following atomic expressions:
<ul id="ul0018" list-style="none">
    <li id="ul0018-0001" num="0000">
    <ul id="ul0019" list-style="none">
        <li id="ul0019-0001" num="0332">[p<b>1</b>] of unit of evaluation u<b>1</b></li>
        <li id="ul0019-0002" num="0333">[p2] of unit of evaluation u<b>2</b></li>
        <li id="ul0019-0003" num="0334">[p2] of unit of evaluation u<b>3</b></li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0291" num="0335">And the search domain is now restricted to all atomic expressions of the units of evaluation u<b>1</b>, u<b>2</b> and u<b>3</b> instead of the entire database.</p>
<p id="p-0292" num="0336">A.9.2—Planning Queries for the Context Object: Rights</p>
<p id="p-0293" num="0337">Similar to the principal in the context, the profile for Play right is retrieved. If it is not found, that is there is no profile associated with this Play right, then only queries related to this Play right is planned. Also, there are no secondary indices associated with Play right as described in section [A.8], therefore the queries to retrieve all matching atomic expressions for the Play right against the search domain resulted from the previous query are as follows:
<ul id="ul0020" list-style="none">
    <li id="ul0020-0001" num="0000">
    <ul id="ul0021" list-style="none">
        <li id="ul0021-0001" num="0338">Search on any right where the main index is Play. Once again, this query will match with the atomic expression [a<b>1</b>] play of the unit of evaluation u<b>1</b> and [a<b>2</b>] play of the unit of evaluation u<b>2</b>. While [a<b>3</b>] copy of unit of evaluation u<b>3</b> is not matched.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0294" num="0339">Thus, the query for the context object Rights once executed, will return the following atomics expressions:
<ul id="ul0022" list-style="none">
    <li id="ul0022-0001" num="0000">
    <ul id="ul0023" list-style="none">
        <li id="ul0023-0001" num="0340">[a<b>1</b>] of unit of evaluation u<b>1</b></li>
        <li id="ul0023-0002" num="0341">[a<b>2</b>] of unit of evaluation u<b>2</b></li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0295" num="0342">No atomic expression of unit of evaluation u<b>3</b> matched, therefore u<b>3</b> is removed from the search domain. The search domain is now refined to atomic expressions of the units of expression u<b>1</b> and u<b>2</b> only.</p>
<p id="p-0296" num="0343">A.9.3—Planning Queries for the Context Object: Resources</p>
<p id="p-0297" num="0344">Similarly to the principal in the context, the primary semantic type of the Ninth Symphony, Beethoven in the context is resource, the main index is Beethoven Symphony, the secondary indices are Symphony, Classic Music. So the planning queries for the resource include:
<ul id="ul0024" list-style="none">
    <li id="ul0024-0001" num="0000">
    <ul id="ul0025" list-style="none">
        <li id="ul0025-0001" num="0345">1. Search on any resource with the main index is Beethoven Symphony, and its value if specified is Ninth Symphony. Thus the resource [r<b>2</b>] of the unit of evaluation u<b>2</b> is a match since the main index is Beethoven Symphony with no value specified. However, [r<b>1</b>] of the unit of evaluation 1 in <figref idref="DRAWINGS">FIG. 9C</figref> will not be a match. Notice that even though [r<b>3</b>] of the unit of evaluation u<b>3</b> in <figref idref="DRAWINGS">FIG. 9C</figref> could be a match of the query, since u<b>3</b> is no longer in the search domain, it is not a match.</li>
        <li id="ul0025-0002" num="0346">2. Search on any resource with main index is Symphony.</li>
        <li id="ul0025-0003" num="0347">3. Search on any resource with main index is Classic Music</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0298" num="0348">Thus, the queries for the context object Resource, once executed, will return the following atomic expression:
<ul id="ul0026" list-style="none">
    <li id="ul0026-0001" num="0000">
    <ul id="ul0027" list-style="none">
        <li id="ul0027-0001" num="0349">[r<b>2</b>] of the unit of evaluation u<b>2</b></li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0299" num="0350">No atomic expression of unit of evaluation u<b>1</b> matched, therefore all atomic expressions of unit of evaluation u<b>1</b> are removed from the search domain. The search domain now only contains unit of evaluation u<b>2</b> and its atomic expressions.</p>
<p id="p-0300" num="0351">A.10—Example of Evaluating</p>
<p id="p-0301" num="0352">Once all the planning queries have been executed, all the units of evaluation remaining in the search domain will be matched with the query context. Each unit of evaluation in the search domain will be further evaluated to resolve conflicts, if any, between its atomic expressions and any conflict between matched units of evaluation.</p>
<p id="p-0302" num="0353">The conflict between atomic expressions are defined as:
<ul id="ul0028" list-style="none">
    <li id="ul0028-0001" num="0000">
    <ul id="ul0029" list-style="none">
        <li id="ul0029-0001" num="0354">If a variable is bound to more than one type; or</li>
        <li id="ul0029-0002" num="0355">If a variable is bound to more than one value; or</li>
        <li id="ul0029-0003" num="0356">If a variable must be bound to some value but it is not.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0303" num="0357">In the query examples described in [A.9], the only matching unit of evaluation remaining in the search domain is u<b>2</b>. Since u<b>2</b> does not contains any variable, u<b>2</b> is the true match to the query context. Consequently, Joe's request for an authorization to play the Ninth Symphony, Beethoven will be granted. On the other hand, suppose that u<b>2</b> is a matching unit of evaluation, and u<b>2</b> contains variable x for the principal (thus p2) and also variable x for resource (thus r<b>2</b>). Let's substitute x for the context object (as defined in [A.9]) of the same type, then p2 is substituted by “Joe” while r<b>2</b> is substituted by “Ninth Symphony, Beethoven.” Since “Joe” and “Ninth Symphony, Beethoven” are two different things, they cannot be substituted for each other. In this case, the conflict cannot be resolved. Therefore, u<b>2</b> is rejected. As a result of this evaluation, Joe's request for an authorization to play the Ninth Symphony, Beethoven will not be granted.</p>
<p id="p-0304" num="0358">The present invention may be implemented by a general purpose computer programmed to accomplish the disclosed functions. Accordingly, the modules described herein can be implemented as computer hardware and/or computer software. Various devices may be used to provide the computer or computer system for effecting the invention.</p>
<p id="p-0305" num="0359">While the present invention has been described in connection with a number of exemplary embodiments and implementations, the present invention is not so limited but rather covers various modifications and equivalent arrangements which fall within the purview of the appended claims.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method of processing grammar-based legality expressions that are adapted to be used within a system for enforcing licenses, the method comprising:
<claim-text>partitioning at least one legality expression into one or more units of evaluation to assess the semantic meaning of the legality expression; and</claim-text>
<claim-text>indexing at least one of the units of evaluation and the atomic expressions for subsequent retrieval based on the semantic meaning of each unit of evaluation and each atomic expression , the atomic expressions denoting the constituent components of the units of evaluation for storage, retrieval, and evaluation of the legality expressions,</claim-text>
<claim-text>wherein the indexing step further comprises assigning legality expressions to separate search spaces based upon predetermined criteria, and associating sets of key values with legality expressions where the sets of key values provide additional information related to the legality expressions.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of processing grammar-based legality expressions of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising unifying a query context object and an atomic expression by evaluating the atomic expression against the context and resolving conflicts between the atomic expression and the result of the evaluation.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of processing grammar-based legality expressions of <claim-ref idref="CLM-00002">claim 2</claim-ref>, further comprising:
<claim-text>creating profiles representing semantic meanings of the atomic expressions; and</claim-text>
<claim-text>classifying the atomic expressions into the corresponding profiles, the profiles comprising a set of identifications assigned to the atomic expressions.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of processing grammar-based legality expressions of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the classifying step further comprises assigning a uniquely identifiable profile identification to each profile.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of processing grammar-based legality expressions of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the profile is used to create all equivalent indices for atomic expressions and units of evaluation.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of processing grammar-based legality expressions of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the profile is stored in a searchable profile table.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of processing grammar-based legality expressions of <claim-ref idref="CLM-00002">claim 2</claim-ref>, further comprising:
<claim-text>selecting atomic expressions that match a context of a retrieval query based upon corresponding profiles of the atomic expressions; and</claim-text>
<claim-text>evaluating the selected atomic expressions by comparing the units of evaluation to the request context.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of processing grammar-based legality expressions of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the indexing step further comprises storing the units of evaluation, the atomic expressions, and processing instructions in a repository with the corresponding profiles.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of processing grammar-based legality expressions of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the selecting step further comprises:
<claim-text>planning queries from input context objects; and</claim-text>
<claim-text>constructing an initial search domain for the planned queries.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of processing grammar-based legality expressions of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the selecting step further comprises executing each planned query to retrieve the set of atomic expressions that satisfy the query request.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method of processing grammar-based legality expressions of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the selecting step further comprises constructing the units of evaluation from the atomic expressions returned from the query request.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method of processing grammar-based legality expressions of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the selecting step further comprises validating the results of each executed query against unification rules stipulating whether an atomic expression in a unit of evaluation may be unified with a corresponding atomic expression in the executed query.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The method of processing grammar-based legality expressions of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the selecting step further comprises refining the search domain and executing a modified query if the results of the executed queries fail to meet an established relevancy criterion.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The method of processing grammar-based legality expressions of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein executing each planned query to retrieve the set of atomic expressions that satisfy the query request further comprises:
<claim-text>analyzing variations of the atomic expression from the request context by interchanging positions of components of the atomic expression to determine if permutations of the atomic expression exist that are consistent with semantics of a unit of evaluation; and</claim-text>
<claim-text>translating the identified permutation of the atomic expression into an atomic expression that matches the request context.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The method of processing grammar-based legality expressions of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein planning queries from input context objects further comprises retrieving the profile for each atomic expression in the input context object and using the profiles to construct queries to search for atomic expressions in a repository.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The method of processing grammar-based legality expressions of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein executing each query further comprises examining the query to determine if the query contains specific profile identifications for any atomic expressions and retrieving all possible profile identifications for the atomic expression.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The method of processing grammar-based legality expressions of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein partitioning the legality expression into units of evaluation further comprises validating the legality expression against a grammar and specification to ensure the legality expression conforms to grammar rules and specifications.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The method of processing grammar-based legality expressions of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the partitioning step further comprises extracting the legality expression from a resource.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The method of processing grammar-based legality expression of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the partitioning step further comprises decrypting the legality expression.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The method of processing grammar-based legality expressions of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the units of evaluation comprise an agreement in a contract.</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. The method of processing grammar-based legality expressions of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the units of evaluation comprise an evocable business activity.</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. The method of processing grammar-based legality expressions of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the units of evaluation comprise an evocable operation.</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. The method of processing grammar-based legality expressions of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the units of evaluation comprise a rule in a policy.</claim-text>
</claim>
<claim id="CLM-00024" num="00024">
<claim-text>24. The method of processing grammar-based legality expressions of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the units of evaluation comprise a privilege.</claim-text>
</claim>
<claim id="CLM-00025" num="00025">
<claim-text>25. The method of processing grammar-based legality expressions of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the indexing step further comprises identifying the semantic type of each atomic expression within the context of its unit of evaluation.</claim-text>
</claim>
<claim id="CLM-00026" num="00026">
<claim-text>26. The method of processing grammar-based legality expressions of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein partitioning the legality expressions into units of evaluation further comprises verifying the integrity of the legality expression to ensure the legality expression has not been altered.</claim-text>
</claim>
<claim id="CLM-00027" num="00027">
<claim-text>27. The method of processing grammar-based legality expressions of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein partitioning the legality expressions into units of evaluation further comprises normalizing the legality expression by converting the legality expression to a form suited for processing.</claim-text>
</claim>
<claim id="CLM-00028" num="00028">
<claim-text>28. The method of processing grammar-based legality expression of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the indexing step further comprises identifying semantic types of each atomic expression within the context of its language.</claim-text>
</claim>
<claim id="CLM-00029" num="00029">
<claim-text>29. The method of processing grammar-based legality expressions of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the indexing step further comprises associating synonymous names for each atomic expression conforming to a particular profile.</claim-text>
</claim>
<claim id="CLM-00030" num="00030">
<claim-text>30. The method of processing grammar-based legality expressions of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the sets of key values further comprise context regarding an intended use for the legality expression.</claim-text>
</claim>
<claim id="CLM-00031" num="00031">
<claim-text>31. The method of processing grammar-based legality expressions of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the sets of key values further comprise metadata associated with the legality expression.</claim-text>
</claim>
<claim id="CLM-00032" num="00032">
<claim-text>32. The method of processing grammar-based legality expressions of <claim-ref idref="CLM-00031">claim 31</claim-ref>, wherein the metadata associated with the legality expression comprises validity periods for the legality expression.</claim-text>
</claim>
<claim id="CLM-00033" num="00033">
<claim-text>33. The method of processing grammar-based legality expressions of <claim-ref idref="CLM-00031">claim 31</claim-ref>, wherein the metadata associated with the legality expression comprises information to categorize the legality expression to limit legality expression search space when processing an evaluation request.</claim-text>
</claim>
<claim id="CLM-00034" num="00034">
<claim-text>34. The method of processing grammar-based legality expressions of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the separate search spaces comprise separate database tables.</claim-text>
</claim>
<claim id="CLM-00035" num="00035">
<claim-text>35. The method of processing grammar-based legality expressions of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the separate search spaces comprise separate processors.</claim-text>
</claim>
<claim id="CLM-00036" num="00036">
<claim-text>36. The method of processing grammar-based legality expressions of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the separate search spaces comprise separate partition structures.</claim-text>
</claim>
<claim id="CLM-00037" num="00037">
<claim-text>37. The method of processing grammar-based legality expressions of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the separate search spaces comprise search spaces of different priorities.</claim-text>
</claim>
<claim id="CLM-00038" num="00038">
<claim-text>38. The method of processing grammar-based legality expressions of <claim-ref idref="CLM-00037">claim 37</claim-ref>, wherein the different priorities are assigned based upon the number of times that the legality expression is used.</claim-text>
</claim>
<claim id="CLM-00039" num="00039">
<claim-text>39. A method of processing grammar-based legality expressions that are adapted to be used within a system for enforcing licenses, the method comprising:
<claim-text>partitioning at least one legality expression into one or more units of evaluation to assess the semantic meaning of the legality expression; and</claim-text>
<claim-text>indexing at least one of the units of evaluation and the atomic expressions for subsequent retrieval based on the semantic meaning of each unit of evaluation and each atomic expression, the atomic expressions denoting the constituent components of the units of evaluation for storage, retrieval, and evaluation of the legality expressions,</claim-text>
<claim-text>wherein the indexing step further comprises creating a database table encompassing the atomic expressions associated with frequently queried entities to expedite all queries related to that entity, and associating sets of key values with legality expressions where the sets of key values provide additional information related to the legality expressions.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00040" num="00040">
<claim-text>40. The method of processing grammar-based legality expressions of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the evaluating step further comprises:
<claim-text>validating the context of a retrieval query against requirements of an application;</claim-text>
<claim-text>profiling each atomic expression in the context of a retrieval query;</claim-text>
<claim-text>retrieving the matching atomic expressions, units of evaluation, and processing instructions from the repository;</claim-text>
<claim-text>validating the atomic expressions against unification rules;</claim-text>
<claim-text>validating the units of evaluation against unification rules; and</claim-text>
<claim-text>resolving conflicts between units of evaluation.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00041" num="00041">
<claim-text>41. The method of processing grammar-based legality expressions of <claim-ref idref="CLM-00040">claim 40</claim-ref>, wherein the resolving step further comprises applying the application's policies to select preferred units of evaluation from among the units of evaluation that conflict.</claim-text>
</claim>
<claim id="CLM-00042" num="00042">
<claim-text>42. The method of processing grammar-based legality expressions of <claim-ref idref="CLM-00040">claim 40</claim-ref>, wherein the resolving step further comprises applying the application's policies to combine conflicting units of evaluation.</claim-text>
</claim>
<claim id="CLM-00043" num="00043">
<claim-text>43. The method of processing grammar-based legality expressions of <claim-ref idref="CLM-00040">claim 40</claim-ref>, wherein the evaluating step further comprises caching requests and their corresponding results and pre-computing a set of expected common requests.</claim-text>
</claim>
<claim id="CLM-00044" num="00044">
<claim-text>44. The method of processing grammar-based legality expressions of <claim-ref idref="CLM-00043">claim 43</claim-ref>, wherein the caching step further comprises re-running the cached request and pre-computing a set of expected common requests at a pre-determined periodic time.</claim-text>
</claim>
<claim id="CLM-00045" num="00045">
<claim-text>45. A method of translating grammar-based legality expressions into searchable independent expressions for efficiently processing communication requests for digital content, the method comprising:
<claim-text>validating a syntax of the legality expression against a grammar and specification to ensure the legality expression conforms to grammar rules and a specification;</claim-text>
<claim-text>verifying the integrity of the validated legality expression based on an application trust model to preserve privacy and secure usage;</claim-text>
<claim-text>normalizing the verified legality expression into a form suited for machine processing;</claim-text>
<claim-text>partitioning the normalized legality expression into units of evaluation to assess the semantic meaning of the normalized legality expression;</claim-text>
<claim-text>atomizing the units of evaluation into atomic expressions;</claim-text>
<claim-text>indexing at least one of the units of evaluation and the atomic expressions based on the semantic meanings of each unit of evaluation and each atomic expression; and</claim-text>
<claim-text>storing the indexed units of evaluation, the atomic expressions, and corresponding processing instructions in a repository,</claim-text>
<claim-text>wherein after the storing step, the method further comprises constructing a query to locate and access atomic expressions and processing instructions from the repository to match a profile of a desired input context object,</claim-text>
<claim-text>after the constructing a query step, the method further comprises retrieving atomic expressions matching a profile of the desired input context object,</claim-text>
<claim-text>after the retrieving step, the method further comprises validating atomic expressions matching a profile of the desired input context object against a predetermined unification rule, and</claim-text>
<claim-text>the predetermined unification rule evaluates whether an input context object may be used to substitute for a unit of evaluation.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00046" num="00046">
<claim-text>46. The method of <claim-ref idref="CLM-00045">claim 45</claim-ref>, further comprising:
<claim-text>profiling the atomic expressions to identify, organize, and manage storage and retrieval of legality expressions, units of evaluation, and atomic expressions that represent an identical object,</claim-text>
<claim-text>wherein the profile of a legality expression is updated each time a new profile is created in the repository.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00047" num="00047">
<claim-text>47. The method of translating grammar-based legality expressions of <claim-ref idref="CLM-00046">claim 46</claim-ref>, wherein the organization of the atomic expressions is based on a context in which the legality expression was received.</claim-text>
</claim>
<claim id="CLM-00048" num="00048">
<claim-text>48. The method of translating grammar-based legality expressions of <claim-ref idref="CLM-00047">claim 47</claim-ref>, wherein the context in which the legality expression was received comprises at least one of the following: metadata associated with the legality expression, validity periods for the legality expression, and information used to categorize the legality expression to partition search space.</claim-text>
</claim>
<claim id="CLM-00049" num="00049">
<claim-text>49. The method of translating grammar-based legality expressions of <claim-ref idref="CLM-00047">claim 47</claim-ref>, wherein the context in which the legality expression was received comprises priority criteria indicating that each legality expression must be stored in a separate search space in the repository based upon the priority criteria.</claim-text>
</claim>
<claim id="CLM-00050" num="00050">
<claim-text>50. The method of translating grammar-based legality expressions of <claim-ref idref="CLM-00045">claim 45</claim-ref>, wherein the constructing a query step further comprises constructing an initial search domain based upon the desired input context object.</claim-text>
</claim>
<claim id="CLM-00051" num="00051">
<claim-text>51. The method of translating grammar-based legality expressions of <claim-ref idref="CLM-00045">claim 45</claim-ref>, wherein the separate search spaces comprise separate database tables.</claim-text>
</claim>
<claim id="CLM-00052" num="00052">
<claim-text>52. The method of translating grammar-based legality expressions of <claim-ref idref="CLM-00045">claim 45</claim-ref>, wherein the separate search spaces comprise separate processors.</claim-text>
</claim>
<claim id="CLM-00053" num="00053">
<claim-text>53. The method of translating grammar-based legality expressions of <claim-ref idref="CLM-00045">claim 45</claim-ref>, wherein the separate search spaces comprise separate partition structures.</claim-text>
</claim>
<claim id="CLM-00054" num="00054">
<claim-text>54. The method of translating grammar-based legality expressions of <claim-ref idref="CLM-00045">claim 45</claim-ref>, wherein the separate search spaces comprise search spaces of different priorities.</claim-text>
</claim>
<claim id="CLM-00055" num="00055">
<claim-text>55. A legality expression processing system to process grammar-based legality expressions, the system comprising:
<claim-text>means for partitioning at least one legality expression into one or more units of evaluation to assess the semantic meaning of the legality expression; and</claim-text>
<claim-text>means for indexing at least one of the units of evaluation and the atomic expressions for subsequent retrieval based on the semantic meaning of each unit of evaluation and each atomic expression, the atomic expressions denoting the constituent components of the units of evaluation for storage, retrieval, and evaluation of the legality expressions,</claim-text>
<claim-text>wherein the indexing means further comprises means for assigning legality expressions to separate search spaces based upon predetermined criteria, and means for associating sets of key values with legality expressions where the sets of key values provide additional information related to the legality expressions.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00056" num="00056">
<claim-text>56. The legality expression processing system of <claim-ref idref="CLM-00055">claim 55</claim-ref>, wherein the separate search spaces comprise separate database tables.</claim-text>
</claim>
<claim id="CLM-00057" num="00057">
<claim-text>57. The legality expression processing system of <claim-ref idref="CLM-00055">claim 55</claim-ref>, wherein the separate search spaces comprise separate processors.</claim-text>
</claim>
<claim id="CLM-00058" num="00058">
<claim-text>58. The legality expression processing system of <claim-ref idref="CLM-00055">claim 55</claim-ref>, wherein the separate search spaces comprise separate partition structures.</claim-text>
</claim>
<claim id="CLM-00059" num="00059">
<claim-text>59. The legality expression processing system of <claim-ref idref="CLM-00055">claim 55</claim-ref>, wherein the separate search spaces comprise search spaces of different priorities.</claim-text>
</claim>
<claim id="CLM-00060" num="00060">
<claim-text>60. A data storage medium with computer-executable instructions for processing grammar-based legality expressions for enforcing licenses comprising:
<claim-text>instructions for partitioning at least one legality expression into one or more units of evaluation to assess the semantic meaning of the legality expression; and</claim-text>
<claim-text>instructions indexing at least one of the units of evaluation and the atomic expressions for subsequent retrieval based on the semantic meaning of each unit of evaluation and each atomic expression, the atomic expressions denoting the constituent components of the units of evaluation for storage, retrieval, and evaluation of the legality expressions,</claim-text>
<claim-text>wherein the instructions for indexing further comprise instructions for creating a database table encompassing the atomic expressions associated with frequently queried entities to expedite all queries related to that entity, and instructions for associating sets of key values with legality expressions where the sets of key values provide additional information related to the legality expressions.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00061" num="00061">
<claim-text>61. The data storage medium with computer-executable instructions for processing grammar-based legality expressions for enforcing licenses of <claim-ref idref="CLM-00060">claim 60</claim-ref>, further comprising instructions for unifying a query context object and an atomic expression by evaluating the atomic expression against the context and resolving conflicts between the atomic expression and the result of the evaluation.</claim-text>
</claim>
<claim id="CLM-00062" num="00062">
<claim-text>62. The data storage medium with computer-executable instructions for processing grammar-based legality expressions for enforcing licenses of <claim-ref idref="CLM-00061">claim 61</claim-ref>, further comprising:
<claim-text>instructions for creating profiles representing semantic meanings of the atomic expressions; and</claim-text>
<claim-text>instructions for classifying the atomic expressions into the corresponding profiles, the profiles comprising a set of identifications assigned to the atomic expressions.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00063" num="00063">
<claim-text>63. The data storage medium with computer-executable instructions for processing grammar-based legality expressions for enforcing licenses of <claim-ref idref="CLM-00062">claim 62</claim-ref>, wherein the instructions for classifying further comprise instructions for assigning a uniquely identifiable profile identification to each profile.</claim-text>
</claim>
<claim id="CLM-00064" num="00064">
<claim-text>64. The data storage medium with computer-executable instructions for processing grammar-based legality expressions for enforcing licenses of <claim-ref idref="CLM-00063">claim 63</claim-ref>, wherein the profile identification is used to create all equivalent indices for atomic expressions and units of evaluation.</claim-text>
</claim>
<claim id="CLM-00065" num="00065">
<claim-text>65. The data storage medium with computer-executable instructions for processing grammar-based legality expressions for enforcing licenses of <claim-ref idref="CLM-00064">claim 64</claim-ref>, wherein the profile is stored in a searchable profile table.</claim-text>
</claim>
<claim id="CLM-00066" num="00066">
<claim-text>66. The data storage medium with computer-executable instructions for processing grammar-based legality expressions for enforcing licenses of <claim-ref idref="CLM-00061">claim 61</claim-ref>, further comprising:
<claim-text>instructions for selecting atomic expressions that match a context of a retrieval query based upon corresponding profiles of the atomic expressions; and</claim-text>
<claim-text>instructions for evaluating the selected atomic expressions by comparing the units of evaluation to a request context.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00067" num="00067">
<claim-text>67. The data storage medium with computer-executable instructions for processing grammar-based legality expressions for enforcing licenses of <claim-ref idref="CLM-00066">claim 66</claim-ref>, wherein the instructions for indexing further comprise instructions for storing the units of evaluation, the atomic expressions, and processing instructions in a repository with corresponding profiles.</claim-text>
</claim>
<claim id="CLM-00068" num="00068">
<claim-text>68. The data storage medium with computer-executable instructions for processing grammar-based legality expressions for enforcing licenses of <claim-ref idref="CLM-00066">claim 66</claim-ref>, wherein the instructions for selecting further comprise:
<claim-text>instructions for planning queries from input context objects; and</claim-text>
<claim-text>instructions for constructing an initial search domain for the planned queries.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00069" num="00069">
<claim-text>69. The data storage medium with computer-executable instructions for processing grammar-based legality expressions for enforcing licenses of <claim-ref idref="CLM-00068">claim 68</claim-ref>, wherein the instructions for selecting further comprise instructions for executing each planned query to retrieve the set of atomic expressions that satisfy the query request.</claim-text>
</claim>
<claim id="CLM-00070" num="00070">
<claim-text>70. The data storage medium with computer-executable instructions for processing grammar-based legality expressions for enforcing licenses of <claim-ref idref="CLM-00069">claim 69</claim-ref>, wherein the instructions for selecting further comprise instructions for constructing the units of evaluation from the atomic expressions returned from the query request.</claim-text>
</claim>
<claim id="CLM-00071" num="00071">
<claim-text>71. The data storage medium with computer-executable instructions for processing grammar-based legality expressions for enforcing licenses of <claim-ref idref="CLM-00070">claim 70</claim-ref>, wherein the instructions for selecting further comprise instructions for validating the results of each executed query against unification rules stipulating whether an atomic expression in a unit of evaluation may be unified with a corresponding atomic expression in the executed query.</claim-text>
</claim>
<claim id="CLM-00072" num="00072">
<claim-text>72. The data storage medium with computer-executable instructions for processing grammar-based legality expressions for enforcing licenses of <claim-ref idref="CLM-00071">claim 71</claim-ref>, wherein the instructions for selecting further comprise instructions for refining the search domain and for executing a modified query if the results of the executed queries fail to meet an established relevancy criterion.</claim-text>
</claim>
<claim id="CLM-00073" num="00073">
<claim-text>73. The data storage medium with computer-executable instructions for processing grammar-based legality expressions for enforcing licenses of <claim-ref idref="CLM-00069">claim 69</claim-ref>, wherein the instructions for executing each planned query to retrieve the set of atomic expressions that satisfy the query request further comprises:
<claim-text>instructions for analyzing variations of the atomic expression from the request context by interchanging positions of components of the atomic expression to determine if permutations of the atomic expression exist that are consistent with semantics of a unit of evaluation; and</claim-text>
<claim-text>instructions for translating the identified permutation of the atomic expression into an atomic expression that matches the request context.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00074" num="00074">
<claim-text>74. The data storage medium with computer-executable instructions for processing grammar-based legality expressions for enforcing licenses of <claim-ref idref="CLM-00068">claim 68</claim-ref>, wherein the instructions for planning queries from input context objects further comprise instructions for retrieving the profile for each atomic expression in the input context object and for using the profiles to construct queries to search for atomic expressions in a repository.</claim-text>
</claim>
<claim id="CLM-00075" num="00075">
<claim-text>75. The data storage medium with computer-executable instructions for processing grammar-based legality expressions for enforcing licenses of <claim-ref idref="CLM-00068">claim 68</claim-ref>, wherein the instructions for executing each query further comprise instructions for examining the query to determine if the query contains specific profile identifications for any atomic expressions and retrieving all possible profile identifications for the atomic expression.</claim-text>
</claim>
<claim id="CLM-00076" num="00076">
<claim-text>76. The data storage medium with computer-executable instructions for processing grammar-based legality expressions for enforcing licenses of <claim-ref idref="CLM-00066">claim 66</claim-ref>, wherein the instructions for evaluating further comprise:
<claim-text>instructions for validating the context of a retrieval query against requirements of an application;</claim-text>
<claim-text>instructions for profiling each atomic expression in the context of a retrieval query;</claim-text>
<claim-text>instructions for retrieving the matching atomic expressions, units of evaluation, and processing instructions from the repository;</claim-text>
<claim-text>instructions for validating the atomic expressions against unification rules;</claim-text>
<claim-text>instructions for validating the units of evaluation against unification rules; and</claim-text>
<claim-text>instructions for resolving conflicts between units of evaluation.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00077" num="00077">
<claim-text>77. The data storage medium with computer-executable instructions for processing grammar-based legality expressions for enforcing licenses of <claim-ref idref="CLM-00076">claim 76</claim-ref>, wherein the instructions for resolving further comprise instructions for applying the application's policies to select preferred units of evaluation from among the units of evaluation that conflict.</claim-text>
</claim>
<claim id="CLM-00078" num="00078">
<claim-text>78. The data storage medium with computer-executable instructions for processing grammar-based legality expressions for enforcing licenses of <claim-ref idref="CLM-00076">claim 76</claim-ref>, wherein the instructions for resolving further comprise instructions for applying the application's policies to combine conflicting units of evaluation.</claim-text>
</claim>
<claim id="CLM-00079" num="00079">
<claim-text>79. The data storage medium with computer-executable instructions for processing grammar-based legality expressions for enforcing licenses of <claim-ref idref="CLM-00076">claim 76</claim-ref>, wherein the instructions for evaluating further comprise instructions for caching requests and their corresponding results and for pre-computing a set of expected common requests.</claim-text>
</claim>
<claim id="CLM-00080" num="00080">
<claim-text>80. The data storage medium with computer-executable instructions for processing grammar-based legality expressions for enforcing licenses of <claim-ref idref="CLM-00079">claim 79</claim-ref>, wherein the instructions for caching further comprise instructions for re-running the cached request and for pre-computing a set of expected common requests at a pre-determined periodic time.</claim-text>
</claim>
<claim id="CLM-00081" num="00081">
<claim-text>81. The data storage medium with computer-executable instructions for processing grammar-based legality expressions for enforcing licenses of <claim-ref idref="CLM-00060">claim 60</claim-ref>, wherein the instructions for partitioning the legality expression into units of evaluation further comprise instructions for validating the legality expression against a grammar and specification to ensure the legality expression conforms to grammar rules and specifications.</claim-text>
</claim>
<claim id="CLM-00082" num="00082">
<claim-text>82. The data storage medium with computer-executable instructions for processing grammar-based legality expressions for enforcing licenses of <claim-ref idref="CLM-00081">claim 81</claim-ref>, wherein the instructions for partitioning further comprise instructions for extracting the legality expression from a resource.</claim-text>
</claim>
<claim id="CLM-00083" num="00083">
<claim-text>83. The data storage medium with computer-executable instructions for processing grammar-based legality expressions for enforcing licenses of <claim-ref idref="CLM-00081">claim 81</claim-ref>, wherein the instructions for partitioning further comprise instructions for decrypting the legality expression.</claim-text>
</claim>
<claim id="CLM-00084" num="00084">
<claim-text>84. The data storage medium with computer-executable instructions for processing grammar-based legality expressions for enforcing licenses of <claim-ref idref="CLM-00081">claim 81</claim-ref>, wherein the units of evaluation comprise an agreement in a contract.</claim-text>
</claim>
<claim id="CLM-00085" num="00085">
<claim-text>85. The method of processing grammar-based legality expressions of <claim-ref idref="CLM-00081">claim 81</claim-ref>, wherein the units of evaluation comprise an evocable business activity.</claim-text>
</claim>
<claim id="CLM-00086" num="00086">
<claim-text>86. The method of processing grammar-based legality expressions of <claim-ref idref="CLM-00081">claim 81</claim-ref>, wherein the units of evaluation comprise an evocable operation.</claim-text>
</claim>
<claim id="CLM-00087" num="00087">
<claim-text>87. The method of processing grammar-based legality expressions of <claim-ref idref="CLM-00081">claim 81</claim-ref>, wherein the units of evaluation comprise a rule in a policy.</claim-text>
</claim>
<claim id="CLM-00088" num="00088">
<claim-text>88. The method of processing grammar-based legality expressions of <claim-ref idref="CLM-00081">claim 81</claim-ref>, wherein the units of evaluation comprise a privilege.</claim-text>
</claim>
<claim id="CLM-00089" num="00089">
<claim-text>89. The data storage medium with computer-executable instructions for processing grammar-based legality expressions for enforcing licenses of <claim-ref idref="CLM-00081">claim 81</claim-ref>, wherein the instructions for indexing further comprise instructions for identifying the semantic type of each atomic expression within the context of its unit of evaluation.</claim-text>
</claim>
<claim id="CLM-00090" num="00090">
<claim-text>90. The data storage medium with computer-executable instructions for processing grammar-based legality expressions for enforcing licenses of <claim-ref idref="CLM-00060">claim 60</claim-ref>, wherein the instructions for partitioning the legality expressions into units of evaluation further comprise instructions for verifying the integrity of the legality expression to ensure the legality expression has not been altered.</claim-text>
</claim>
<claim id="CLM-00091" num="00091">
<claim-text>91. The data storage medium with computer-executable instructions for processing grammar-based legality expressions for enforcing licenses of <claim-ref idref="CLM-00060">claim 60</claim-ref>, wherein the instructions for partitioning the legality expressions into units of evaluation further comprise instructions for normalizing the legality expression by converting the verified legality expression to a form suited for processing.</claim-text>
</claim>
<claim id="CLM-00092" num="00092">
<claim-text>92. The data storage medium with computer-executable instructions for processing grammar-based legality expressions for enforcing licenses of <claim-ref idref="CLM-00060">claim 60</claim-ref>, wherein the instructions for indexing further comprise instructions for identifying all semantic types of each atomic expression within the context of its language.</claim-text>
</claim>
<claim id="CLM-00093" num="00093">
<claim-text>93. The data storage medium with computer-executable instructions for processing grammar-based legality expressions for enforcing licenses of <claim-ref idref="CLM-00060">claim 60</claim-ref>, wherein the instructions for indexing further comprise instructions for associating synonymous names for each atomic expression conforming to a particular profile.</claim-text>
</claim>
<claim id="CLM-00094" num="00094">
<claim-text>94. The data storage medium with computer-executable instructions for processing grammar-based legality expressions for enforcing licenses of <claim-ref idref="CLM-00060">claim 60</claim-ref>, wherein the sets of key values further comprise context regarding an intended use for the legality expression.</claim-text>
</claim>
<claim id="CLM-00095" num="00095">
<claim-text>95. The data storage medium with computer-executable instructions for processing grammar-based legality expressions for enforcing licenses of <claim-ref idref="CLM-00060">claim 60</claim-ref>, wherein the sets of key values further comprise metadata associated with the legality expression.</claim-text>
</claim>
<claim id="CLM-00096" num="00096">
<claim-text>96. The data storage medium with computer-executable instructions for processing grammar-based legality expressions for enforcing licenses of <claim-ref idref="CLM-00095">claim 95</claim-ref>, wherein the metadata associated with the legality expression comprises validity periods for the legality expression.</claim-text>
</claim>
<claim id="CLM-00097" num="00097">
<claim-text>97. The data storage medium with computer-executable instructions for processing grammar-based legality expressions for enforcing licenses of <claim-ref idref="CLM-00095">claim 95</claim-ref>, wherein the metadata associated with the legality expression comprises information to categorize the legality expression to limit legality expression search space when processing an evaluation request.</claim-text>
</claim>
<claim id="CLM-00098" num="00098">
<claim-text>98. The data storage medium with computer-executable instructions for processing grammar-based legality expressions for enforcing licenses of <claim-ref idref="CLM-00060">claim 60</claim-ref>, wherein the instructions for indexing further comprise instructions for assigning legality expressions to separate search spaces based upon predetermined criteria.</claim-text>
</claim>
<claim id="CLM-00099" num="00099">
<claim-text>99. The data storage medium with computer-executable instructions for processing grammar-based legality expressions for enforcing licenses of <claim-ref idref="CLM-00098">claim 98</claim-ref>, wherein the separate search spaces comprise separate database tables.</claim-text>
</claim>
<claim id="CLM-00100" num="00100">
<claim-text>100. The data storage medium with computer-executable instructions for processing grammar-based legality expressions for enforcing licenses of <claim-ref idref="CLM-00098">claim 98</claim-ref>, wherein the separate search spaces comprise separate processors.</claim-text>
</claim>
<claim id="CLM-00101" num="00101">
<claim-text>101. The data storage medium with computer-executable instructions for processing grammar-based legality expressions for enforcing licenses of <claim-ref idref="CLM-00098">claim 98</claim-ref>, wherein the separate search spaces comprise separate partition structures.</claim-text>
</claim>
<claim id="CLM-00102" num="00102">
<claim-text>102. The data storage medium with computer-executable instructions for processing grammar-based legality expressions for enforcing licenses of <claim-ref idref="CLM-00098">claim 98</claim-ref>, wherein the separate search spaces comprise search spaces of different priorities.</claim-text>
</claim>
<claim id="CLM-00103" num="00103">
<claim-text>103. The data storage medium with computer-executable instructions for processing grammar-based legality expressions for enforcing licenses of <claim-ref idref="CLM-00102">claim 102</claim-ref>, wherein the different priorities are assigned based upon the number of times that the legality expression is used. </claim-text>
</claim>
</claims>
</us-patent-grant>
