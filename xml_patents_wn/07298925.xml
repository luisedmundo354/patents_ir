<us-patent-grant lang="EN" dtd-version="v4.2 2006-08-23" file="US07298925-20071120.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20071106" date-publ="20071120">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>07298925</doc-number>
<kind>B2</kind>
<date>20071120</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>10675094</doc-number>
<date>20030930</date>
</document-id>
</application-reference>
<us-application-series-code>10</us-application-series-code>
<us-term-of-grant>
<us-term-extension>815</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>K</subclass>
<main-group>9</main-group>
<subgroup>32</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>382298</main-classification>
<further-classification>382235</further-classification>
</classification-national>
<invention-title id="d0e53">Efficient scaling in transform domain</invention-title>
<references-cited>
<citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5345408</doc-number>
<kind>A</kind>
<name>Hoogenboom</name>
<date>19940900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>708402</main-classification></classification-national>
</citation>
<citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5434931</doc-number>
<kind>A</kind>
<name>Quardt et al.</name>
<date>19950700</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>382271</main-classification></classification-national>
</citation>
<citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>5452104</doc-number>
<kind>A</kind>
<name>Lee</name>
<date>19950900</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>358433</main-classification></classification-national>
</citation>
<citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>5572236</doc-number>
<kind>A</kind>
<name>Feig et al.</name>
<date>19961100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>345603</main-classification></classification-national>
</citation>
<citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>5719964</doc-number>
<kind>A</kind>
<name>Linzer et al.</name>
<date>19980200</date>
</document-id>
</patcit>
<category>cited by other</category>
<classification-national><country>US</country><main-classification>382250</main-classification></classification-national>
</citation>
<citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>5774598</doc-number>
<kind>A</kind>
<name>Sunshine et al.</name>
<date>19980600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>382250</main-classification></classification-national>
</citation>
<citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>6002809</doc-number>
<kind>A</kind>
<name>Feig et al.</name>
<date>19991200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>382298</main-classification></classification-national>
</citation>
<citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>6058215</doc-number>
<kind>A</kind>
<name>Schwartz et al.</name>
<date>20000500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>382244</main-classification></classification-national>
</citation>
<citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>6092920</doc-number>
<kind>A</kind>
<name>Sakamoto</name>
<date>20000700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>708401</main-classification></classification-national>
</citation>
<citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>6215909</doc-number>
<kind>B1</kind>
<name>Chang et al.</name>
<date>20010400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>382250</main-classification></classification-national>
</citation>
<citation>
<patcit num="00011">
<document-id>
<country>JP</country>
<doc-number>4188932</doc-number>
<date>19920700</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00012">
<document-id>
<country>JP</country>
<doc-number>2000312294</doc-number>
<date>20001100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00013">
<othercit>“A New Multidimensional Recursive Architecture for Computing the Discrete Cosine Transform”, Elnaggar et al, IEEE Transactions on Circuits and Systems for Video Technology, vol. 10, Issue 1, Feb. 2000, pp. 113-119.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00014">
<othercit>“Quantized Discrete Cosine Transform: a Combination of DCT and Scalar Quantization”, Khanh Nguyen-Phi Docef et al, IEEE International Conference on Acoustics, Speech, and Signal Processing, 1999, vol. 6, pp. 3197-3200.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00015">
<othercit>Dossier YOR919990313, “Shift and/or Merge of Transformed Data Along One Axis”, Micchelli et al, Mar. 13, 2000.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00016">
<othercit>Dossier YOR910000005, “Hybrid Domain Processing of Multi-Dimensional Transformed Data”, Mitchell et al, Jun. 7, 2000.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00017">
<othercit>“3-to-1 Scaling in the DCT Domain”, Research Disclosure, No. 345, Jan. 1993.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00018">
<othercit>IBM Technical Disclosure Bulletin, “Non-Commensurable Scaling Ratios Using Inverse/Forward/Inverse Transform Combination”, vol. 38, No. 6, Jun. 1995, pp. 475-478.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00019">
<othercit>IBM Technical Disclosure Bulletin “Transform Domain Scaling for Non-Commensurable Ratios”, vol. 38, No. 6, Jun. 1995, pp. 3739.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
</references-cited>
<number-of-claims>24</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>382100</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>382166</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>382169</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>382232</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>382240</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>382243</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>382244</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>382248</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>382250</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>382255</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>382276</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>382277</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>382280</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>382281</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>382293</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>382298</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>382302</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>345 70</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>345645</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>345 55</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>345603</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>3</number-of-drawing-sheets>
<number-of-figures>9</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20050069224</doc-number>
<kind>A1</kind>
<date>20050331</date>
</document-id>
</related-publication>
</us-related-documents>
<parties>
<applicants>
<applicant sequence="001" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Nowicki</last-name>
<first-name>Tomasz J.</first-name>
<address>
<city>Briarcliff Manor</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="002" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Martens</last-name>
<first-name>Marco</first-name>
<address>
<city>Groningen</city>
<country>NL</country>
</address>
</addressbook>
<nationality>
<country>NL</country>
</nationality>
<residence>
<country>NL</country>
</residence>
</applicant>
<applicant sequence="003" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Trelewicz</last-name>
<first-name>Jennifer Q.</first-name>
<address>
<city>Gilroy</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="004" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Trenary</last-name>
<first-name>Timothy J.</first-name>
<address>
<city>Berthoud</city>
<state>CO</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="005" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Mitchell</last-name>
<first-name>Joan L.</first-name>
<address>
<city>Longmont</city>
<state>CO</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="006" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Brady</last-name>
<first-name>Michael T.</first-name>
<address>
<city>Ithaca</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
</applicants>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<last-name>Daugherty</last-name>
<first-name>Patrick J.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="02" rep-type="attorney">
<addressbook>
<orgname>Driggs, Hogg &amp; Fry Co., LPA</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</parties>
<assignees>
<assignee>
<addressbook>
<orgname>International Business Machines Corporation</orgname>
<role>02</role>
<address>
<city>Armonk</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Ahmed</last-name>
<first-name>Samir</first-name>
<department>2624</department>
</primary-examiner>
<assistant-examiner>
<last-name>Tabatabai</last-name>
<first-name>Abolfazl</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A method and system for efficient scaling in the transform domain, wherein transform coefficient data is provided as an input to a data processing system and scaled in the transform domain by application of a combined matrix. Some embodiments utilize discrete cosine transform data. One embodiment of the invention generates a combined matrix for one-dimensional scaling by selecting a rational scaling factor and matrix dimension value, generating a matrix with some zero values, applying a one-dimensional inverse transform, regrouping, and applying a one-dimensional forward transform. One application of the invention performs up-scaling operations, and another performs down-scaling operations. The invention also provides for two-dimensional scaling by selecting horizontal and vertical scaling parameters and generating first and second combined matrices responsive to the parameters and combining them into a single combined matrix. The invention may also incorporate a predetermined cost function.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="53.59mm" wi="95.76mm" file="US07298925-20071120-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="226.65mm" wi="162.73mm" orientation="landscape" file="US07298925-20071120-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="235.71mm" wi="163.41mm" file="US07298925-20071120-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="216.92mm" wi="132.08mm" orientation="landscape" file="US07298925-20071120-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading>
<p id="p-0002" num="0001">The present application is related to the following co-pending and commonly assigned United States patent applications, which are hereby incorporated by reference in their respective entirety: Ser. No. 09/675,779, filed Sep. 29, 2000, now U.S. Pat. No. 6,834,337 B1 by Mitchell et al. for “System and Method for Enabling Multiple Signed Independent Data Elements per Register”; Ser. No. 09/570,382 filed on May 12, 2000, now U.S. Pat. No. 6,970,179 B1 by T. J. Trenary et al. for “Method and Apparatus for the Sealing Up of Data”; Ser. No. 09/570,849 filed on May 12, 2000, now U.S. Pat. No. 7,062,098 B1 by J. L. Mitchell et al. for “Method and Apparatus for the Sealing Down of Data”; Ser. No. 09/694,448, filed Oct. 23, 2000, now U.S. Pat. No. 6,766,341 B1 by Trelewicz et al. for “Faster Transforms Using Scaled Terms”; Ser. No. 09/535,587, filed Mar. 27, 2000, now U.S. Pat. No. 7,064,859 B1 by D. K. Dittrich et al for “Method, System, Program, and Data Structure for Producing a Look-Up Table to Enhance Print Quality”; and Ser. No. 10/198,097, filed Jul. 19, 2002, now U.S. Pat. No. 7,099,523 B2 by Tomasz Nowicki et al for “Method and System for Scaling a Signal Sample Rate”.</p>
<heading id="h-0002" level="1">FIELD OF THE INVENTION</heading>
<p id="p-0003" num="0002">This invention relates in general to data processing, and more particularly to data transforms that use scaled terms. More particularly, the present invention addresses high-end color printer performance for scaling operations.</p>
<heading id="h-0003" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0004" num="0003">Transforms, which take data from one domain (e.g., sampled data) to another (e.g., frequency space), are used in many signal and/or image processing applications. Such transforms are used for a variety of applications, including, but not limited to data analysis, feature identification and/or extraction, signal correlation, data compression, or data embedding. Many of these transforms require efficient implementation for real time and/or fast execution whether or not compression is used as part of the data processing.</p>
<p id="p-0005" num="0004">Data compression is desirable in many data handling processes, where too much data is present for practical applications using the data. Commonly, compression is used in communication links, to reduce transmission time or required bandwidth. Similarly, compression is preferred in image storage systems, including digital printers and copiers, where “pages” of a document to be printed may be stored temporarily in memory. Here the amount of media space on which the image data is stored can be substantially reduced with compression. Generally speaking, scanned images, i.e., electronic representations of hard copy documents, are often large, and thus make desirable candidates for compression.</p>
<p id="p-0006" num="0005">In data processing, data is typically represented as a sampled discrete function. The discrete representation is either made deterministically or statistically. In a deterministic representation, the point properties of the data are considered, whereas, in a statistical representation, the average properties of the data are specified. In particular examples referred to herein, the terms images and image processing will be used. However, those skilled in the art will recognize that the present invention is not meant to be limited to processing still images but is applicable to processing different data, such as audio data, scientific data, video data, sensor data, etc.</p>
<p id="p-0007" num="0006">In a digital image processing system, digital image signals are formed by first dividing a two-dimensional image into a grid. Each picture element, or pixel, in the grid has associated therewith a number of visual characteristics, such as brightness and color. These characteristics are converted into numeric form. The digital image signal is then formed by assembling the numbers associated with each pixel in the image into a sequence which can be interpreted by a receiver of the digital image signal.</p>
<p id="p-0008" num="0007">Signal and image processing frequently require converting input data into transform coefficients for the purposes of analysis. Often only a quantized version of the transform coefficients is needed, such as, for example, JPEG/MPEG data compression or audio/voice compression. Many such applications need to be done fast in real time such as the generation of JPEG data for high speed printers.</p>
<p id="p-0009" num="0008">One compression technology defined in the JPEG standard, as well as other emerging compression standards, is discrete cosine transform (DCT) coding, wherein an input image is divided into many uniform image blocks with data samples in each, typically in an 8×8 array of data samples, to achieve image compression. Images compressed using DCT coding are decompressed using an inverse transform known as the inverse DCT (IDCT). A two-dimensional forward discrete cosine transform (FDCT) function is applied to each block to transform the data samples into a set of transform coefficients to remove the spatial redundancy.</p>
<p id="p-0010" num="0009">In general, the forward transform will produce real-valued data, not necessarily integers. To achieve data compression, the transform coefficients are converted to integers by the process of quantization. The resulting integers are then passed on for possible further encoding or compression before being stored or transmitted.</p>
<p id="p-0011" num="0010">The two basic components of an image compression/decompression system are the encoder and the decoder. The encoder compresses the “source” image (the original digital image) and provides an output of compressed data (or coded data). The compressed data may be either stored or transmitted, but at some point are fed to the decoder. The decoder recreates or “reconstructs” an image from the compressed data.</p>
<p id="p-0012" num="0011">In general, a data compression encoding system may include three basic parts: an encoder model, an encoder statistical model, and an entropy encoder. The encoder model generates a sequence of “descriptors” that is an abstract representation of the image. The statistical model converts these descriptors into symbols and passes them on to the entropy encoder. The entropy encoder, in turn, compresses the symbols to form the compressed data. The encoder may require external tables. That is, tables specified externally when the encoder is invoked. Generally, there are two classes of tables; model tables that are needed in the procedures that generate the descriptors, and entropy-coding tables that are needed by the JPEG entropy-coding procedures.</p>
<p id="p-0013" num="0012">JPEG uses two techniques for entropy encoding: Huffman coding and arithmetic coding. Similarly to the encoder, the decoder may include basic parts that have an inverse function relative to the parts of the encoder.</p>
<p id="p-0014" num="0013">JPEG compressed data contains two classes of segments: entropy-coded segments and marker segments. Other parameters that are needed by many applications are not part of the JPEG compressed data format. Such parameters may be needed as application-specific “wrappers” surrounding the JPEG data; e.g., image aspect-ratio, pixel shape, orientation of image, etc.</p>
<p id="p-0015" num="0014">Within the JPEG compressed data, the entropy-coded segments contain the entropy-coded data, whereas the marker segments contain header information, tables, and other information required to interpret and decode the compressed image data. Marker segments always begin with a “marker”, a unique 2-byte code that identifies the functions of the segment.</p>
<p id="p-0016" num="0015">To perform a display (or print or audio) operation, it may be necessary for the display device to scale an image to a larger or smaller size. The scaling of the images may be performed as a linear operation. The array of coefficients describing the intensity of the colors of the pixels of the image is transformed to an array of coefficients of the scaled image by a matrix operation.</p>
<p id="p-0017" num="0016">This transformation may be performed in any representation of the image, but may depend on such a representation. As long as the representation is linear with respect to the pixel values the transformation stays linear.</p>
<p id="p-0018" num="0017">The scale factor is a number which expresses the ratio of the number of samples in the image before and after the scaling. Usually the scaling is performed block-wise, where the size of the block (which may be the entire signal) is determined by the scale factor, the demanded efficiency of the operation and the quality of the resulting signal. Choosing larger blocks may yield better quality but lesser efficiency, because the larger blocks allows the scaling factor to be approximated more accurately. The scale factors with small integers as denominators and numerators allow smaller blocks, larger integers may force larger blocks.</p>
<p id="p-0019" num="0018">The emphasis of the present invention is addressing high-end color printer performance for scaling operations. Currently, scaling a continuous tone JPEG image has a strong undesirable effect on the throughput of the printer. Conventional prior art image reduction processes typically involve doing an IDCT transform on each 8×8 DCT block to create real domain data (64 samples), reducing the image in the pixel domain, and then doing a FDCT to return to the DCT domain. The main problem with this approach is that it is computationally expensive. For full-page images the IDCT and FDCT calculations alone could exceed the total processing time available, particularly if the images are being reduced down to make them fit on a page.</p>
<p id="p-0020" num="0019">In one reference incorporated above, “Reduction of N DCT blocks into One Block” by Trenary et al., a solution has been developed wherein one-dimensional DCT domain reduction methods merge N blocks along one dimension into one block, resulting in a significant transactional savings. This approach offers computationally efficient advantages in 1/n “downscaling” operations. However, where the same method and system is utilized in “up-scaling” operations, extra computational cycles are required, reducing efficiency advantages. Moreover, the extra computational cycles introduce additional opportunities for the occurrence of errors through additional “round-off” steps.</p>
<p id="p-0021" num="0020">One area where both data transform and scaling operations are required is high impression-per-minute (“ipm”) printing during “contone” (continuous tone; e.g., photographic) image scaling. The criticality of the problem increases as the printer speed is increased. What is needed is a computationally efficient system and method to provide transform and scaling operations in data processing, and more particularly in data transform operations that use scaled terms. More particularly, an improved system and method is required to address high-end color printer performance for scaling operations.</p>
<heading id="h-0004" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0022" num="0021">A method and system for efficient scaling in the transform domain, wherein transform coefficient data is provided as an input to a data processing system and scaled in the transform domain by application of a combined matrix. Some embodiments utilize discrete cosine transform data. One embodiment of the invention generates a combined matrix for one-dimensional scaling by selecting a rational scaling factor and matrix dimension value, generating a matrix with some zero values, applying a one-dimensional inverse transform, regrouping, and applying a one-dimensional forward transform. One application of the invention performs up-scaling operations, and another performs down-scaling operations. The invention also provides for two-dimensional scaling by selecting horizontal and vertical scaling parameters and generating first and second combined matrices responsive to the parameters and combining them into a single combined matrix. The invention may also incorporate a predetermined cost function.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 1</figref> is a diagram showing a block structure of scaling matrices according to the present invention with a down-scaling factor of ½.</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 1A</figref> is a diagram showing the content of the blocks of the scaling matrices of <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. 2</figref> is a diagram showing a block structure of scaling matrices according to the present invention with a down-scaling factor of ¼.</p>
<p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. 2A</figref> is a diagram showing the content of the blocks of the scaling matrices of <figref idref="DRAWINGS">FIG. 2</figref>.</p>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. 3</figref> is a diagram showing a block structure of scaling matrices according to the present invention with an up-scaling factor of 2.</p>
<p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. 3A</figref> is a diagram showing the content of the blocks of the scaling matrices of <figref idref="DRAWINGS">FIG. 3</figref>.</p>
<p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. 4</figref> is a diagram showing a block structure of scaling matrices according to the present invention with an up-scaling factor of 4.</p>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. 4A</figref> is a diagram showing the content of the blocks of the scaling matrices of <figref idref="DRAWINGS">FIG. 4</figref>.</p>
<p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. 5</figref> illustrates an article of manufacture comprising a computer usable medium having a computer readable program according to the present invention embodied in said medium, as implemented in a printer.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0006" level="1">DESCRIPTION OF THE PREFERRED EMBODIMENTS</heading>
<p id="p-0032" num="0031">A method and system for efficient scaling in the transform domain when transform domain data is provided as an input to a system, comprising scaling the transform domain data input in one combined matrix operation step in the transform domain. The invention relates in general to data processing, and more particularly to data transforms that use scaled terms. In illustrative embodiments of the present invention described herein the intended application is for high-end color printer performance for scaling operations, specifically a system and method that speeds scaling of JPEG images by using the structure of the scaling matrices, combined with the structure of the FDCT and IDCT transforms employed by JPEG, to create one composite transform that performs the scaling and “repackaging” of DCT coefficients into 8×8 blocks.</p>
<p id="p-0033" num="0032">It is to be understood that although the present embodiments are intended for JPEG image applications that the present invention is not limited to such applications. It will be readily apparent to one skilled in the art that the present invention can be readily adapted to a wide variety of data processing tasks that require efficient scaling in the transform domain when the transform domain data is provided as an input to a system.</p>
<p id="p-0034" num="0033">Because the contone images are received at the printer in JPEG format, they are already in the DCT domain, making this method very efficient, since it eliminates the need to transform the data back to the pixel domain prior to manipulation. Entropy coding must be removed from the data prior to application of an algorithm by the present invention; however, entropy coding must necessarily be removed from the data before subsequent processing in the printer anyway, so this requirement does not introduce additional operations.</p>
<p id="p-0035" num="0034">Other prior art references, such as “Method and Apparatus for the Scaling Up of Data” by Trenary et al. and “Method and Apparatus for the Scaling Down of Data” by Mitchell et al. (both previously incorporated by reference) teach “scaling up” and “scaling down” through matrix operations. However, both of these references teach systems and methods wherein the actual cosines must be kept with the transform constants. What is important in the present invention is a computation-efficient implementation of the constants in the scaling matrix without the actual cosines.</p>
<p id="p-0036" num="0035">An important advantage of the present invention is in how the matrices are constructed. Matrices used in prior art scaling use floating point or simple fixed point approaches, while the present invention uses the integer methods to directly address computational complexity. The integer methods utilized are taught in “Faster Transforms Using Scaled Terms” by Trelewicz et al, previously incorporated by reference. As taught by the present invention, integer computational optimization can also be used to reduce cache misses on computer system devices, such as modems and pipelined processors; to make efficient field programmable gate array (FPGA) hardware implementations for hardware systems; and to reduce computational cycles on a range of embedded processors for pervasive applications. Furthermore, contrast and image quality feed directly into the cost functions used for optimization of the matrices for computation, and are flexible for a range of applications.</p>
<p id="p-0037" num="0036">The present invention may be described as an implementation of “one scaling transform”, which can perform inverse transforms, scaling, and forward transforms combined into one matrix operation on multiple transform coefficient blocks. Thus scaling examples according to the present invention become specific cases of combined linear operations.</p>
<p id="p-0038" num="0037">The present invention provides for significant advantages in both down-scaling and up-scaling of contone images.</p>
<p id="p-0039" num="0038">Down-scaling. Scaling an image down requires low-pass-filtering of the image to avoid “aliasing”, an effect in sampled signals and images where high frequency content becomes low frequency noise when the high frequency components exceed the Nyquist frequency of the resampled signal. The “Nyquist limit” is commonly defined as the highest frequency of input signal that can be correctly sampled, equal to half of the sampling frequency. However, in the DCT domain, the deletion of high-frequency coefficients (replacement with zero) is equivalent to high-quality low-pass-filtering. At this point, the zero high-frequency coefficients can be removed from the DCT block, forming a smaller block, for example “(n)×(n)”. When an (n)×(n) IDCT is applied to this block, the down-sampled image results. However, it should be noted that such an operation can produce pixel-domain results out-of-range: for example, if the original samples were in the range 0-255, the scaled pixels, after application of the IDCT, can be smaller than 0 and/or larger than 255, requiring some type of operation to bring them back into range. This effect results from the mathematics of the DCT, and is predictable and reproducible.</p>
<p id="p-0040" num="0039">Basic matrix structures for down-scaling by n/m where n&lt;m, k=g(n)/m and M=m, are as follows:
<ul id="ul0001" list-style="none">
    <li id="ul0001-0001" num="0000">
    <ul id="ul0002" list-style="none">
        <li id="ul0002-0001" num="0040">(1) The matrix P is of the form: [[(n)×(n)][(n)×(m−n)]], where the [(n)×(m−n)] matrix is identically zero, but it will act on a matrix of the form [[(m)×(M)]<sub>1 </sub>. . . [(m)×(M)]<sub>g</sub>];
        <ul id="ul0003" list-style="none">
            <li id="ul0003-0001" num="0041">so we can assume its form to be:</li>
            <li id="ul0003-0002" num="0042">[[[(n)×(n)][(n)×(m−n)]]<sub>1 </sub>. . . [[(n)×(n)][(n)×(m−n)]]<sub>g</sub>],</li>
            <li id="ul0003-0003" num="0043">where each [(n)×(m×n)] matrix is zero;</li>
        </ul>
        </li>
        <li id="ul0002-0002" num="0044">(2) The inverse transform matrix d(n) of the form d(n)=[(n)×(n)] acts on the result of (1) (leaving its structure untouched) and then this result is regrouped using the relationship k(m)=g(n) to produce:
        <ul id="ul0004" list-style="none">
            <li id="ul0004-0001" num="0045">[[(m)×(M)]<sub>1 </sub>. . . [(m)×(M)]<sub>k</sub>];</li>
        </ul>
        </li>
        <li id="ul0002-0003" num="0046">(3) Then the forward transform matrix D(m) of the form D(m)=[(m)×(m)] acts on the result of (2).</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0041" num="0047">Under the present invention this process can also be achieved equivalently one dimension at a time: From an initial (m)×(m) block creating an (n)×(m) block, repackaging, and then creating an (n)×(n) block, where m is the dimension value of an (m)×(m) matrix. Note that the present invention is illustrated scaling both dimensions equally. However, since each dimension is done independently, the result could be an (n′)×(n) block where n′ is not equal to n. Note that the collection of conceptual (n)×(n) blocks may be repackaged into a smaller number of (m)×(m) blocks as part of the combined matrix operation. One dimension could be scaled up and the other axis scaled down. As JPEG processing is particularly suited for manipulation of data in 8×8 blocks, it is intended that m=8 for JPEG imaging applications. However, other values of m may be selected for use with the present invention.</p>
<p id="p-0042" num="0048">For example, an n/m scaling down along one axis may be performed according to the present invention through the following steps:
<ul id="ul0005" list-style="none">
    <li id="ul0005-0001" num="0000">
    <ul id="ul0006" list-style="none">
        <li id="ul0006-0001" num="0049">(a) Select g as the smallest integer such that (ng)/m is an integer k,</li>
        <li id="ul0006-0002" num="0050">(b) Define X to be an (mg)×(m) matrix of DCT coefficients formed by taking g (m)×(m) blocks;</li>
        <li id="ul0006-0003" num="0051">(c) Define p as an (ng)×(m) matrix, built of g blocks of (n)×(m) equal matrices, which when applied will reject the highest m−n frequencies of each (m)×(m) block along the axis being scaled down one;</li>
        <li id="ul0006-0004" num="0052">(d) Define d<sub>g</sub>(n) as an (ng)×(n) IDCT transform (which is implemented by a matrix), consisting of g blocks of (n)×(n) IDCT transforms; and</li>
        <li id="ul0006-0005" num="0053">(e) Define D<sub>g</sub>(n) as an (ng)×(m) FDCT matrix, consisting of ng/m blocks of (m)×(m) FDCT transforms for repackaging d<sub>g</sub>(n)pX into ng/m (m)×(m) DCT blocks.</li>
        <li id="ul0006-0006" num="0054">(f) Define S=D<sub>g</sub>(n)d<sub>g</sub>(n)p.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0043" num="0055">The SX operation outputs k blocks from the original g blocks. S, the combined matrix is a “sparse matrix”: it has many zero entries. In one embodiment of the present invention the algorithm process taught by “Faster Transforms Using Scaled Terms” by Trelewicz et al, previously incorporated by reference, is employed to find optimal integer representations for the S matrix constants, with the common denominator q for the integer approximation operations being adjusted so that the resulting contrast is within a predetermined range of the original 100% contrast.</p>
<p id="p-0044" num="0056">The common denominator q may be found according to the methods taught by J. Q. Trelewicz, Michael T. Brady and Joan L. Mitchell in “Efficient Integer Implementations For Faster Linear Transforms”, in Proc. of 35th Asilomar Conf. on Signals, Systems, and Computers 2001, (Pacific Grove, Calif.), 4-7 Nov. 2001. There the common denominators used for the subtransforms are chosen according to a cost function tailored to the specific application and implementation architecture. For example, the cost function may take into account the number of bits available in the hardware for calculation, the amount of error that can be tolerated in a calculation, and the resulting complexity of the calculation on that architecture. Thus, the implementation of the transform with smaller constants can reduce the need for memory accesses, thus reducing cache misses. Although the present embodiment utilizes DCT transform structures, this architecture also works for other transforms. Moreover, even greater flexibility is provided using simultaneous rational approximations (i.e., a common denominator q) to all of the constants in a subtransform, since the simultaneous representations can be found in accordance with the cost function. In architectures preferring shifts and additions to multiplications, the numerators of the rational approximations may be viewed as polynomials in powers of 2 with plus/minus 1 or 0 coefficients.</p>
<p id="p-0045" num="0057">In one embodiment a cost function finds simultaneous representations (numerators) with the smallest number of common power-of-2 terms; i.e., the set of power-of-2 terms in all of the polynomials in the representations of a subtransform is as small as possible. This formulation allows the power-of-2 terms to be grouped, so that the number of operations in the shift-and-add transform can be reduced. Using this cost function adjustment method for the integer approximation operation, the predetermined range may be chosen in the present invention so that representations for the matrix S cannot produce scaled DCT coefficients outside the preferred range. One preferred predetermined range of 80% to 120% of original contrast produces high-quality results.</p>
<p id="p-0046" num="0058">Because of the way in which S is represented per the cost function, it is suited for efficient implementation in software or hardware, using the parallel processing methods of Mitchell et al., “System and Method for Enabling Multiple Signed Independent Data Elements per Register”, previously incorporated by reference.</p>
<p id="p-0047" num="0059">Scaling on the other axis is an extension of this method, by using the transpose of the matrices. <figref idref="DRAWINGS">FIG. 1</figref> illustrates an example of down-scaling by ½ according to the present invention, and <figref idref="DRAWINGS">FIG. 2</figref> illustrates an example of down-scaling by ¼ according to the present invention. Both examples are more fully discussed below.</p>
<p id="p-0048" num="0060">Up-scaling. Scaling an image up cannot increase the frequency content of the image; i.e., only the lower frequencies already present in the image can be present in the larger-scale image, since no additional information is present in the image. Thus, in a similar manner to the down-scaling mentioned above, up-scaling can be achieved by increasing the size of the DCT block by inserting zero coefficients at the high frequencies to create, say, a (N)×(N) DCT block. An (N)×(N) IDCT then results in the up-scaled image.</p>
<p id="p-0049" num="0061">Basic matrix structures for up-scaling by N/m where m&lt;N and k=g(N)/m, are as follows:
<ul id="ul0007" list-style="none">
    <li id="ul0007-0001" num="0000">
    <ul id="ul0008" list-style="none">
        <li id="ul0008-0001" num="0062">(a) The matrix P is of the form: [[(m)×(m)][(N−m)×(m)]], where the [(N−m)×(m)] matrix is all zeros, but it will act upon a matrix of the form [[(m)×(M)]<sub>1 </sub>. . . [(m)×(M)]<sub>g</sub>];
        <ul id="ul0009" list-style="none">
            <li id="ul0009-0001" num="0063">so we can assume its form to be:</li>
            <li id="ul0009-0002" num="0064">[[[(m)×(M)][(N−m)×(M)]]<sub>1 </sub>. . . [[(m)×(M)][(N−m)×(M)]]<sub>g</sub>],</li>
            <li id="ul0009-0003" num="0065">where each [(N−m)×(M)] submatrix is identically zero;</li>
        </ul>
        </li>
        <li id="ul0008-0002" num="0066">(b) The inverse transform matrix d(N) of the form d(N)=[(N)×(N)] acts on the result of (a) (leaving its structure unchanged) and then this result is regrouped using the relationship g(N)=k(m) as:
        <ul id="ul0010" list-style="none">
            <li id="ul0010-0001" num="0067">[[(m)×(M)]<sub>1 </sub>. . . [(m)×(M)]<sub>k</sub>];</li>
        </ul>
        </li>
        <li id="ul0008-0003" num="0068">(c) Then the forward transform matrix D(m) of the form D(m)=[(m)×(M)] acts on the result of (b).</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0050" num="0069">In the same manner as scaling down, this process can also be achieved equivalently one dimension at a time; i.e., from a (m)×(m) block creating an (N)×(m) block, repackaging, and then creating an (N′)×(N) block where N′ and N are not necessarily equal. Note that the collection of conceptual (N)×(N) blocks may be repackaged into a larger number (m)×(m) blocks as part of the combined matrix operation. Therefore an N/m scaling up according to the present invention may be performed as follows:
<ul id="ul0011" list-style="none">
    <li id="ul0011-0001" num="0000">
    <ul id="ul0012" list-style="none">
        <li id="ul0012-0001" num="0070">(a) select g as the smallest integer wherein Ng/m is an integer k;</li>
        <li id="ul0012-0002" num="0071">(b) define X, to be an (mg)×(m) matrix of DCT coefficients formed by taking g (m)×(m) blocks;</li>
        <li id="ul0012-0003" num="0072">(c) define P, an (Ng)×(m) matrix, which thereby inserts zeros at the N−m high frequencies in one dimension in each (m)×(m) DCT-block;</li>
        <li id="ul0012-0004" num="0073">(d) define d<sub>g</sub>(N), an (Ng)×(N) IDCT matrix consisting of g blocks of (N)×(N) IDCT transforms; and</li>
        <li id="ul0012-0005" num="0074">(e) define D<sub>g</sub>(n), an (Ng)×(m) DCT matrix, consisting of Ng/m blocks of (m)×(m) FDCT transforms for repackaging d<sub>g</sub>(N)PX into Ng/m (m)×(m) DCT blocks.</li>
        <li id="ul0012-0006" num="0075">(f) Define S=D<sub>g</sub>(N)d<sub>g</sub>(N)P, the combined matrix.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0051" num="0076">The SX operation outputs k blocks from the original g blocks. S is also a sparse matrix. <figref idref="DRAWINGS">FIG. 3</figref> illustrates an example of up-scaling by a factor of 2 according to the present invention, and <figref idref="DRAWINGS">FIG. 4</figref> illustrates an example of up-scaling by a factor of 4 according to the present invention. Both examples are more fully discussed below.</p>
<heading id="h-0007" level="1">Examples of the Present Invention</heading>
<p id="p-0052" num="0077">Now with reference to <figref idref="DRAWINGS">FIGS. 1 and 1A</figref>, the structure of the matrix <b>2</b>, labeled S<sub>1/2</sub>, of scaling by factor ½ is illustrated. It has eight rows and sixteen columns and is split into four blocks <b>4</b>: A, Z, A′, Z, wherein each block <b>4</b> has eight rows and four columns. The second block <b>4</b><i>b </i>and the fourth block <b>4</b><i>d</i>, labeled Z, are equal and have all entries zero. The entries of the first block <b>4</b><i>a </i>labeled A are shown in <figref idref="DRAWINGS">FIG. 1A</figref>. The third block <b>4</b><i>c </i>labeled A′ is a “checkerboard” matrix of the entries of the first block <b>4</b><i>a </i>labeled A. The generation of the checkerboard matrix block <b>4</b><i>c </i>is conventional, wherein block <b>4</b><i>a </i>is indexed by counting from 1 in both the horizontal and vertical directions. For example, assume a 2×2 matrix M with the following entries:</p>
<p id="p-0053" num="0078">
<maths id="MATH-US-00001" num="00001">
<math overflow="scroll">
<mrow>
  <mtable>
    <mtr>
      <mtd>
        <mi>W</mi>
      </mtd>
      <mtd>
        <mi>X</mi>
      </mtd>
    </mtr>
    <mtr>
      <mtd>
        <mi>Y</mi>
      </mtd>
      <mtd>
        <mi>Z</mi>
      </mtd>
    </mtr>
  </mtable>
  <mo> </mo>
</mrow>
</math>
</maths>
</p>
<p id="p-0054" num="0079">W is at 1,1; X at 1,2; Y at 2,1; and Z at 2,2. In order to generate a checkerboard matrix M′, the corresponding entries of matrix M are adjusted wherein the sign of every element with an “odd,even” or “even,odd” index is flipped, but the “even,even” or “odd,odd” index are not flipped. So here, we would flip X and Y, but not W or Z, and accordingly matrix M′ has the following entries:</p>
<p id="p-0055" num="0080">
<maths id="MATH-US-00002" num="00002">
<math overflow="scroll">
<mrow>
  <mtable>
    <mtr>
      <mtd>
        <mi>W</mi>
      </mtd>
      <mtd>
        <mrow>
          <mo>-</mo>
          <mi>X</mi>
        </mrow>
      </mtd>
    </mtr>
    <mtr>
      <mtd>
        <mrow>
          <mo>-</mo>
          <mi>Y</mi>
        </mrow>
      </mtd>
      <mtd>
        <mi>Z</mi>
      </mtd>
    </mtr>
  </mtable>
  <mo> </mo>
</mrow>
</math>
</maths>
</p>
<p id="p-0056" num="0081">Now with reference to <figref idref="DRAWINGS">FIGS. 2 and 2A</figref>, the matrix <b>10</b> labeled S<sub>1/4 </sub>is provided to illustrate down-scaling by factor ¼ according to the present invention. Matrix <b>10</b> has eight rows and thirty-two columns. It is split into 8 blocks <b>12</b>: A, Z, B, Z, A′, Z, B′, and Z. The second, fourth, sixth and eighth blocks <b>12</b> labeled Z are equal, having eight rows and six columns with all entries zero. The blocks <b>12</b> labeled A, A′, B, B′ each have eight rows and two columns. The entries of blocks <b>12</b> labeled B and B′ are the same except for sign changes according to the checkerboard pattern process described above, and the entries of blocks <b>12</b> labeled A and A′ are also the same except for sign changes according the said checkerboard pattern process.</p>
<p id="p-0057" num="0082"><figref idref="DRAWINGS">FIGS. 3 and 3A</figref> illustrate up-scaling by a factor of two according to the present invention. <figref idref="DRAWINGS">FIG. 3A</figref> shows an 8×8 matrix <b>20</b> A. The matrix <b>22</b> A′ is generated from matrix <b>20</b> through the checkerboard process described above, and the two matrixes <b>20</b> and <b>22</b> are combined to form composite matrix <b>24</b>, with sixteen rows and eight columns. The matrix <b>24</b> has a block structure, with the first eight rows forming the matrix A and the last eight rows forming the 8×8 matrix called A′. The entries of A′ and A are the same except for the sign change in the checkerboard pattern as described above.</p>
<p id="p-0058" num="0083"><figref idref="DRAWINGS">FIGS. 4 and 4A</figref> illustrate up-scaling by a factor of four according to the present invention. Matrix <b>30</b> is a 32×8 matrix, with thirty-two rows and eight columns, and has a block structure. The first eight rows are formed by the 8×8 matrix <b>32</b> labeled A. Rows nine through sixteen of matrix <b>30</b> are formed by 8×8 matrix <b>34</b> labeled B. Rows seventeen through twenty-four of matrix <b>30</b> are formed by the 8×8 matrix <b>36</b> B′, which is generated from matrix <b>34</b> labeled B through the checkerboard process described above. And lastly, the last eight rows of matrix <b>30</b> are formed by the 8×8 matrix <b>38</b> labeled A′. Again, the entries of matrix <b>38</b> A′ and matrix <b>32</b> A are the same except for the sign change in the checkerboard pattern.</p>
<p id="p-0059" num="0084">In <figref idref="DRAWINGS">FIGS. 1A</figref>, <b>2</b>A, <b>3</b>A and <b>4</b>A the entries of the labeled blocks are the fractions with denominator <b>32</b>, and the multiplication by such matrices is treated as multiplication by the numerators which are integers <b>1</b>,<b>2</b> . . . ,<b>31</b>. Each multiplication is implemented as a sequence of shifts (i.e., multiplied by a power of 2), additions, or subtractions according to the sign of the entry and the methods taught in “System and Method for Enabling Multiple Signed Independent Data Elements per Register” by Mitchell et al., previously incorporated by reference. The division by 32 of the resulting sum is implemented as a shift right, after the calculation with the numerator is completed. The checkerboard symmetry of signs is exploited by precalculation of sums and differences of pairs of input data. For the description of the invention we assume that the scaling is done in the rows and hence the data is represented by 16 (for scale factor ½) or 32 (for scale factor ¼) rows of dequantizied data. The same method is employed for scaling the columns of data. Equivalently, columns could be scaled first, and rows second.</p>
<p id="p-0060" num="0085">Referring now to <figref idref="DRAWINGS">FIG. 5</figref>, an embodiment of the invention described above may be tangibly embodied in a in a computer program residing on a computer-readable medium <b>490</b>. The medium <b>490</b> may comprise one or more of a fixed and/or removable data storage device such as a floppy disk or a CD-ROM, or it may consist of some other type of data storage or data communications device. The computer program may be loaded into the memory <b>492</b> to configure the processor <b>440</b> for execution. The computer program comprises instructions which, when read and executed by the processor <b>440</b> causes the processor <b>440</b> to perform the steps necessary to execute the steps or elements of the present invention.</p>
<p id="p-0061" num="0086">The foregoing description of the exemplary embodiment of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the invention be limited not with this detailed description, but rather by the claims appended hereto.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-math idrefs="MATH-US-00001" nb-file="US07298925-20071120-M00001.NB">
<img id="EMI-M00001" he="7.45mm" wi="76.20mm" file="US07298925-20071120-M00001.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00002" nb-file="US07298925-20071120-M00002.NB">
<img id="EMI-M00002" he="7.45mm" wi="76.20mm" file="US07298925-20071120-M00002.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method for efficient scaling in the transform domain when transform coefficient data is provided as an input to a data processing system, comprising the steps of:
<claim-text>providing transform coefficient data to the data processing system;</claim-text>
<claim-text>generating a combined matrix for one-dimensional scaling; and</claim-text>
<claim-text>the data processing system scaling data represented by the transform coefficient data in the transform domain by applying the combined matrix to said transform coefficient data;</claim-text>
<claim-text>wherein generating the combined matrix comprises the steps of:</claim-text>
<claim-text>selecting a rational scaling factor F;</claim-text>
<claim-text>selecting a matrix dimension value m; and</claim-text>
<claim-text>selecting a smallest integer g wherein (Fg)/m is an integer k;</claim-text>
<claim-text>generating a first matrix operating on at least one (mg)×(m) matrix by:
<claim-text>zeroing out at least one row or at least one column of said matrix; or</claim-text>
<claim-text>inserting at least one row of zeros or at least one column of zeros into said matrix;</claim-text>
</claim-text>
<claim-text>generating a second matrix by applying a one-dimensional inverse transform to the first matrix; and</claim-text>
<claim-text>generating a third matrix by regrouping said second matrix so that it is conceived of as being composed of k (m)×(m) matrices; and</claim-text>
<claim-text>generating the combined matrix by applying a one-dimensional forward transform to said third matrix.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising the steps
<claim-text>selecting at least one common denominator q; and</claim-text>
<claim-text>representing at least two terms in the combined matrix by integers whose ratios with the common denominator q are scaled approximations of the terms.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the step of selecting the common denominator q comprises choosing q according to a predetermined cost function.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the predetermined cost function comprises the step of selecting the common denominator q so that the largest error on any transform coefficient is no larger than a predetermined error percentage.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the step of applying a one-dimensional forward transform to the third matrix comprises applying a discrete cosine transform, and the step of generating the second matrix by applying a one-dimensional inverse transform to the first matrix comprises applying discrete cosine transform.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the scaling is a down-scaling operation;
<claim-text>the step of selecting the rational scaling factor F comprises selecting F between 0 and 1; and</claim-text>
<claim-text>the step of generating the first matrix is the step of zeroing out at least one row or at least one column of said matrix.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the scaling is an up-scaling operation;
<claim-text>the step selecting the rational scaling factor F comprises selecting F larger than 1; and</claim-text>
<claim-text>the step of generating the first matrix is the step of inserting the at least one row of zeros or the at least one column of zeros into said matrix.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the matrix dimension value m is 8.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. A method for efficient scaling in the transform domain when transform coefficient data is provided as an input to a data processing system, comprising the steps of:
<claim-text>providing transform coefficient data to the data processing system;</claim-text>
<claim-text>generating a combined matrix for two-dimensional scaling; and</claim-text>
<claim-text>the data processing system scaling data represented by the transform coefficient data in the transform domain by application of the combined matrix to said transform coefficient data simultaneously in two-dimensions;</claim-text>
<claim-text>wherein generating the combined matrix for two-dimensional scaling comprises the steps of:</claim-text>
<claim-text>selecting horizontal scaling parameters Fh, mh and gh;</claim-text>
<claim-text>selecting vertical scaling factors Fv, mv, and gv;</claim-text>
<claim-text>generating a first combined matrix for horizontal scaling using parameters Fh, mh, and gh;</claim-text>
<claim-text>generating a second combined matrix which operates on said first combined matrix using parameters Fv, mv, and gv; and</claim-text>
<claim-text>combining the first and second matrices into a single combined matrix.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, further comprising the steps of:
<claim-text>selecting at least one common denominator q; and</claim-text>
<claim-text>representing at least two terms in the combined matrix by integers whose ratios with the common denominator q are scaled approximations of the at least two terms.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. A method for efficient scaling in the transform domain when transform coefficient data is provided as an input to a data processing system, comprising the steps of:
<claim-text>providing transform coefficient data to the data processing system; and</claim-text>
<claim-text>the data processing system scaling data represented by the transform coefficient data in the transform domain by application of a combined matrix to said transform coefficient data by the steps of:</claim-text>
<claim-text>determining first and second precisions to be allocated in a single register to hold respective first and second signed data elements;</claim-text>
<claim-text>packing the first and second elements into the register;</claim-text>
<claim-text>operating on the first and second elements;</claim-text>
<claim-text>determining third and fourth precisions to be allocated in the single register to hold respective third and fourth signed data elements, at least one of the first and third precision being different from each other, and the second and fourth precisions being different from each other;</claim-text>
<claim-text>packing the third and fourth elements into the register;</claim-text>
<claim-text>operating on the third and fourth elements; and</claim-text>
<claim-text>the register sending plural data elements simultaneously to at least one computational subsystem.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the operating steps of operating on the first and second elements and operating on the third and fourth elements comprise multiplying by a constant or by a variable of known precision, or an addition, or a shift-left logical, or a subtraction, or a bitwise AND, or a bitwise OR.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. A data processing system for efficient scaling in the transform domain when transform coefficient data is provided as an input, comprising:
<claim-text>transform coefficient data; and</claim-text>
<claim-text>a processor means configured to process scaling data represented by the transform coefficient data in the transform domain by application of a combined matrix configured for one-dimensional scaling to said transform coefficient data, the combined matrix defined by:</claim-text>
<claim-text>a rational scaling factor F;</claim-text>
<claim-text>a matrix dimension value m; and</claim-text>
<claim-text>a smallest integer g wherein (Fg)/m is an integer k;</claim-text>
<claim-text>a first matrix formed from at least one (mg)×(m) matrix by:
<claim-text>zeroing out at least one row or at least one column of said matrix; or</claim-text>
<claim-text>inserting at least one row of zeros or at least one column of zeros into said matrix;</claim-text>
</claim-text>
<claim-text>a second matrix formed by applying a one-dimensional inverse transform to the first matrix; and</claim-text>
<claim-text>a third matrix formed by regrouping said second matrix so that it is conceived of as being composed of k (m)×(m) matrices; and</claim-text>
<claim-text>wherein the combined matrix is generated by applying a one-dimensional forward transform to said third matrix.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The data processing system of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the combined matrix is further defined by:
<claim-text>at least one common denominator q; and</claim-text>
<claim-text>wherein at least two terms in the combined matrix are represented by integers whose ratios with the common denominator q are scaled approximations of the at least two terms.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The data processing system of <claim-ref idref="CLM-00013">claim 13</claim-ref> wherein the second matrix forward transform is a discrete cosine transform, and the combined matrix inverse transform is a discrete cosine transform.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The data processing system of <claim-ref idref="CLM-00013">claim 13</claim-ref> wherein the processor means is configured to process scaling data by down-scaling;
<claim-text>the rational scaling factor F has a value between 0 and 1; and</claim-text>
<claim-text>wherein the first matrix step is formed by zeroing out at least one row or at least one column of said (mg)×(m) matrix.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The data processing system of <claim-ref idref="CLM-00013">claim 13</claim-ref> wherein the processor means is configured to process scaling data by up-scaling;
<claim-text>the rational scaling factor F has a value larger than 1; and</claim-text>
<claim-text>wherein the first matrix step is formed by inserting at east one row of zeros or at least one column of zeros into said (mg)×(m) matrix.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The data processing system of <claim-ref idref="CLM-00013">claim 13</claim-ref> wherein the matrix dimension value m is 8.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. A data processing system for efficient scaling in the transform domain when transform coefficient data is provided as an input, comprising:
<claim-text>transform coefficient data; and</claim-text>
<claim-text>a processor means configured to process scaling data represented by the transform coefficient data in the transform domain by application of a combined matrix to said transform coefficient data simultaneously in two-dimensions, wherein the combined matrix for two-dimensional scaling is defined by:</claim-text>
<claim-text>horizontal scaling parameters Fh, mh and gh;</claim-text>
<claim-text>vertical scaling factors Fv, mv, and gv;</claim-text>
<claim-text>a first combined matrix for horizontal scaling generated from parameters Fh, mh, and gh;</claim-text>
<claim-text>a second combined matrix generated from operating on said first combined matrix using parameters Fv, mv, and gv; and</claim-text>
<claim-text>a single combined matrix generated by combining the first and second matrices.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The data processing system of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the combined matrix for two-dimensional scaling is further defined by:
<claim-text>at least one common denominator q; and</claim-text>
<claim-text>wherein at least two terms in the combined matrix are represented by integers whose ratios with the common denominator q are scaled approximations of the at least two terms.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. A data processing system for efficient scaling in the transform domain when transform coefficient data provided as an input, comprising:
<claim-text>a processor means configured to process scaling data represented by the transform coefficient data in the transform domain by application of a combined matrix to said transform coefficient data;</claim-text>
<claim-text>a single register; and</claim-text>
<claim-text>a computational subsystem;</claim-text>
<claim-text>wherein the processor means is configured to define the combined matrix by selecting a scaling term g according to a predetermined cost function so that the largest error on any transform coefficient is no larger than a predetermined error percentage;</claim-text>
<claim-text>wherein the combined matrix is defined by first, second, third and fourth transforms and the processor means is configured to:</claim-text>
<claim-text>determine first and second precisions to be allocated in the single register to hold respective first and second signed data elements;</claim-text>
<claim-text>pack first and second signed data the elements into the register;</claim-text>
<claim-text>operate on the first and second signed data elements;</claim-text>
<claim-text>determine third and fourth precisions to be allocated in the single register to hold respective third and fourth signed data elements, at least one of the first and third precision being different from each other, and the second and fourth precisions being different from each other;</claim-text>
<claim-text>pack the third and fourth elements into the register; and</claim-text>
<claim-text>operate on the third and fourth elements; and</claim-text>
<claim-text>wherein the register is configured to send plural data elements simultaneously to the at least one computational subsystem.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. The data processing system of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the processor means is further configured to apply the first, second, third and fourth transforms by operating on the first, second, third and fourth elements by multiplication by a constant or by a variable of known precision, or by an addition, or by a shift-left logical, or by a subtraction, or by a bitwise AND, or by a bitwise OR.</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. An article of manufacture comprising a computer-readable medium having a computer-readable program embodied in said medium, wherein the computer-readable program, when executed on a computer, causes the computer to scale data represented by transform coefficient data in the transform domain by application of a combined matrix for one-dimensional scaling to said transform coefficient data, by:
<claim-text>selecting a rational scaling factor F;</claim-text>
<claim-text>selecting a matrix dimension value m;</claim-text>
<claim-text>selecting a smallest integer g wherein (Fg)/m is an integer k;</claim-text>
<claim-text>generating a first matrix operating on at least one (mg)×(m) matrix by:
<claim-text>zeroing out at least one row or at least one column of said matrix; or</claim-text>
<claim-text>inserting at least one row of zeros or at least one column of zeros into said matrix;</claim-text>
</claim-text>
<claim-text>generating a second matrix by applying a one-dimensional inverse transform to the first matrix;</claim-text>
<claim-text>generating a third matrix by regrouping said second matrix so that it is conceived of as being composed of k (m)×(m) matrices; and</claim-text>
<claim-text>generating the combined matrix by applying a one-dimensional forward transform to said third matrix.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00024" num="00024">
<claim-text>24. An article of manufacture comprising a computer-readable medium having a computer-readable program embodied in said medium, wherein the computer-readable program, when executed on a computer, causes the computer to scale data represented by transform coefficient data in the transform domain by application of a combined matrix for two-dimensional scaling to said transform coefficient data, by:
<claim-text>selecting horizontal scaling parameters Fh, mh and gh;</claim-text>
<claim-text>selecting vertical scaling factors Fv, mv, and gv;</claim-text>
<claim-text>generating a first combined matrix for horizontal scaling using parameters Fh, mh, and gh;</claim-text>
<claim-text>generating a second combined matrix which operates on said first combined matrix using parameters Fv, mv, and gv; and</claim-text>
<claim-text>combining the first and second matrices into a single combined matrix.</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>
