<us-patent-grant lang="EN" dtd-version="v4.2 2006-08-23" file="US07299221-20071120.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20071106" date-publ="20071120">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>07299221</doc-number>
<kind>B2</kind>
<date>20071120</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>10434845</doc-number>
<date>20030508</date>
</document-id>
</application-reference>
<us-application-series-code>10</us-application-series-code>
<us-term-of-grant>
<us-term-extension>595</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>17</main-group>
<subgroup>30</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>707  3</main-classification>
<further-classification>707  4</further-classification>
<further-classification>707 10</further-classification>
</classification-national>
<invention-title id="d0e53">Progressive relaxation of search criteria</invention-title>
<references-cited>
<citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5600829</doc-number>
<kind>A</kind>
<name>Tsatalos et al.</name>
<date>19970200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707  2</main-classification></classification-national>
</citation>
<citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5873080</doc-number>
<kind>A</kind>
<name>Coden et al.</name>
<date>19990200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707  3</main-classification></classification-national>
</citation>
<citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6032145</doc-number>
<kind>A</kind>
<name>Beall et al.</name>
<date>20000200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707  5</main-classification></classification-national>
</citation>
<citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>6263328</doc-number>
<kind>B1</kind>
<name>Coden et al.</name>
<date>20010700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707  3</main-classification></classification-national>
</citation>
<citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>6324534</doc-number>
<kind>B1</kind>
<name>Neal et al.</name>
<date>20011100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707  3</main-classification></classification-national>
</citation>
<citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>6345271</doc-number>
<kind>B1</kind>
<name>Dempsey et al.</name>
<date>20020200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707  4</main-classification></classification-national>
</citation>
<citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>6691109</doc-number>
<kind>B2</kind>
<name>Bjornson et al.</name>
<date>20040200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707  4</main-classification></classification-national>
</citation>
<citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>6871204</doc-number>
<kind>B2</kind>
<name>Krishnaprasad et al.</name>
<date>20050300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707102</main-classification></classification-national>
</citation>
<citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2002/0099687</doc-number>
<kind>A1</kind>
<name>Krishnaprasad et al.</name>
<date>20020700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707  1</main-classification></classification-national>
</citation>
<citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>2005/0055336</doc-number>
<kind>A1</kind>
<name>Hui et al.</name>
<date>20050300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707  3</main-classification></classification-national>
</citation>
<citation>
<nplcit num="00011">
<othercit>Oracle Corporation, “Oracle9<i>i </i>Database, Daily Feature, Query Template,” Jun. 13, 2002, 3 pages.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00012">
<othercit>Garrett Kaminaga, Oracle Corporation, “Oracle8<i>i inter</i>Meda Text 8.1.5—Technical Overview,” Oct. 7, 2001, http://otn.oracle.com/products/text/x/Tech<sub>—</sub>Overviews/imt<sub>—</sub>815.html, printed Sep. 12, 2003, pp. 1-59.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00013">
<othercit>Garrett Kaminaga, Oracle Corporation, “Oracle Text 9.0.1 Technical Overview,” Oct. 7, 2001, http://otn.oracle.com/products/text/x/Tech<sub>—</sub>Overviews/text<sub>—</sub>901.html, printed Sep. 12, 2003, pp. 1-55.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00014">
<othercit>Oracle Corporation, “Oracle Ultra Search Online Documentation, Release 9.0.2 Production, Customizing the Query Syntax Expansion,” Nov. 20, 2002, http://otn.oracle.com/products/ultrasearch/htdocs/qsyntax.htm, printed Sep. 12, 2003, pp. 1-7.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00015">
<othercit>Oracle Corporation, “Oracle Text 9.2.0 Technical Overview,” Jun. 3, 2002, http://otn.oracle.com/products/text/x/ot920.html, printed Sep. 12, 2003, pp. 1-21.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00016">
<othercit>Gaasterland T., “Restricting Query Relaxation Through User Constraints”, Intelligent and Cooperative Information Systems, Proceedings of International Conference, May 12, 1993, pp. 359-366.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00017">
<othercit>Gaasterland T., “Cooperative Answering through Controlled Query Relaxation”, IEEE Expert, IEEE Inc., New York, US, vol. 12, No. 5, Sep. 1, 1997, pp. 48-59.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00018">
<othercit>Li W-S, et al., “Facilitation Complex Web Queries through Visual User Interfaces and Query Relaxation”, Computer Networks and ISDN Systems, North Holland Publishing, Amsterdam, NL, vol. 30, No. 1-7, Apr. 1998, pp. 149-159.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00019">
<othercit>PCT International Search Report &amp; Written Opinion from PCT for foreign patent application No. PCT/US2004/10020, dated Nov. 30, 2004 (6 pgs).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00020">
<othercit>Current Claims in PCT patent application No. PCT/US2004/10020 (3 pgs).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00021">
<othercit>Written Opinion of the International Preliminary Examining Authority received in corresponding PCT International application No. PCT/US2004/010020.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00022">
<othercit>Notification of Transmittal of the International Preliminary Report on Patentability for corresponding International application No. PCT/US2004/010020 including latest amended claims.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
</references-cited>
<number-of-claims>40</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>707  2</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>707  3</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>707  5</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>707 10</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>707  4</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>7071041</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>4</number-of-drawing-sheets>
<number-of-figures>5</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20040225643</doc-number>
<kind>A1</kind>
<date>20041111</date>
</document-id>
</related-publication>
</us-related-documents>
<parties>
<applicants>
<applicant sequence="001" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Alpha</last-name>
<first-name>Shamim</first-name>
<address>
<city>Pabna</city>
<country>BD</country>
</address>
</addressbook>
<nationality>
<country>BD</country>
</nationality>
<residence>
<country>BD</country>
</residence>
</applicant>
<applicant sequence="002" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Dixon</last-name>
<first-name>Paul</first-name>
<address>
<city>Redwood City</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
</applicants>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Hickman Palermo Truong &amp; Becker LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</parties>
<assignees>
<assignee>
<addressbook>
<orgname>Oracle International Corporation</orgname>
<role>02</role>
<address>
<city>Redwood Shores</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Alam</last-name>
<first-name>Shahid Al</first-name>
<department>2162</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">An efficient information search mechanism provides control over the relaxation of a search query to users that are requesting searches. Through such a mechanism, a user can specify a sequence of sub-queries that is associated with variations of the main search criteria, and specify a progression in which to execute the sub-queries. Hence, users can impart their priorities with respect to search term variations used in relaxing the main search criteria, which further allows the users to impart their notion of the relevance of results that may be returned by particular sub-queries. A query that includes a sequence of sub-queries is received and the sub-queries are executed, if at all, by a database server in an order based on the progression specified by the user. Response time and network loading are improved through reduction of unnecessary work by the database server and through reduction of computationally costly communications between client and server and associated processing.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="112.78mm" wi="283.38mm" file="US07299221-20071120-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="90.68mm" wi="160.44mm" file="US07299221-20071120-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="231.99mm" wi="173.23mm" orientation="landscape" file="US07299221-20071120-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="246.04mm" wi="170.35mm" file="US07299221-20071120-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="260.35mm" wi="186.01mm" orientation="landscape" file="US07299221-20071120-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">FIELD OF THE INVENTION</heading>
<p id="p-0002" num="0001">The present invention relates generally to information retrieval and, more specifically, to techniques for specifying progressive relaxation of search criteria.</p>
<heading id="h-0002" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0003" num="0002">Applications for servicing client, or end user, queries often operate such that not only are exact matches for a user-specified query identified if they exist, but the closest non-exact matches are also identified and returned to the end user. In this context, the term “query” is not limited to a conventional database query, such as a query in SQL (Structured Query Language). Generally, a query includes any search for information through any search mechanism, such as a conventional search engine or search function. Typically, the user's search request is eventually transformed into a structured database query.</p>
<p id="p-0004" num="0003">One approach to servicing search requests or queries, in order to identify existing exact matches and non-exact matches, involves: (1) rewriting or reconstructing the user query to include all allowable variations of the original query; (2) retrieving a “hit-list” for the reconstructed concatenated query by submitting the query to a database server; and (3) ordering the hit-list in an order based on the relevance to the original search criteria (sometimes referred to as “relevance ranking”).</p>
<p id="p-0005" num="0004">For example, if a user initiates a search for information on “cheap pen” on some form of information repository, such as a database or the collection of information that is accessible via the Internet, an “expanded query” is constructed to include both the original query and to include one or more sub-queries that relax the requirements of the original query. An expanded query associated with a search for “cheap pen” might include sub-queries for other allowable versions of “cheap pen,” such as “cheap NEAR pen,” “cheap AND pen,” “$cheap AND $pen” (where “$” represents a grammatical stem operation), “cheap OR pen” and the like. A hit-list is produced based on this set of sub-queries, and the hit-list is then ordered. The ordering may be based on, for example, the specific sub-query that produced a given hit and a speculative relevance to the end user that is requesting the information.</p>
<p id="p-0006" num="0005">In such an approach, useless work may be performed because all of the sub-queries are executed, whether or not necessary to actually fulfill the user's request and interest. That is, the first sub-query executed may produce a sufficient number of hits or sufficiently relevant results to satisfy the user's interest. Furthermore, if a given sub-query is particularly unselective, it may produce many more hits than are necessary to satisfy the user's interest and unnecessary work is performed by parsing the query statement, querying the information repository, and producing and ordering the results.</p>
<p id="p-0007" num="0006">Another approach involves: (1) executing sub-queries associated with allowable variations of the original query, in series in descending order of priority; and (2) retrieving hits until enough hits have been located, based on some criteria. This approach involves an entity other than the database server, such as an end user or a search mechanism, issuing a query to the database server based on the original search criteria, receiving results from the query, issuing another query to the database server that expands the original search criteria, receiving results, and continuing this iterative process until the search request has been satisfied according to some quantitative criteria. Query response time and network performance suffer when using this approach due to the potential for multiple complete round-trip communications between the entity and the database server, which unnecessarily load the system. In this context, and throughout the specification, a complete round-trip communication refers to the network communication between a client entity and a database server, as well as the processing performed by the database server, which often includes: (1) parsing the query; (2) constructing a query execution plan; (3) optimizing the query execution; and the like. Secondary client-server communications refer to communications between client and server applications which do not incur the same processing overhead as complete round-trip communications.</p>
<p id="p-0008" num="0007">Both of the foregoing approaches are inefficient in terms of response time, processing, and network loading. Furthermore, these approaches are cumbersome for developers of search applications and mechanisms because they require such applications and mechanisms to speculatively relax the search requirements and process results with respect to relevance ranking. Furthermore, they provide limited capabilities, if any, for end users to affect the priority of search term variations in the context of relaxation of the original search criteria and, consequently, the relevance of associated results.</p>
<p id="p-0009" num="0008">Based on the foregoing, it is clearly desirable to provide an improved mechanism for servicing information searches. There is a more specific need to provide more control to an end user that is requesting a search for particular information to provide more efficient and more relevant performance.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0010" num="0009">The present invention is illustrated by way of example, and not by way of limitation, in the figures of the accompanying drawings and in which like reference numerals refer to similar elements and in which:</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram that illustrates a simplified example of an operating environment in which an embodiment may be implemented;</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 2</figref> is a block diagram that illustrates relevant functional components of a database server and a search mechanism;</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 3</figref> is a flow diagram that illustrates a process for managing an information search;</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 4</figref> is a flow diagram that illustrates a process for managing an information search; and</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 5</figref> is a block diagram that illustrates a computer system upon which an embodiment of the invention may be implemented.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0016" num="0015">A method and mechanism are described for specifying progressive relaxation of search criteria. In the following description, for the purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent, however, that the present invention may be practiced without these specific details. In other instances, well-known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.</p>
<heading id="h-0005" level="1">Overview</heading>
<p id="p-0017" num="0016">In order to provide a more efficient search mechanism, control over the relaxation of a search query is provided to users that are requesting searches. Progressive relaxation of queries allows for complex queries without compromising performance. Generally, complex queries are processed to provide increased recall, or completeness, of results without compromising the precision, or quality, of the results. Through such a mechanism, a user can specify a sequence of sub-queries that is associated with variations of the main search term, and specify a progression in which to execute the sub-queries. Hence, users can impart their priorities with respect to search term variations used in relaxing the main search criteria, which further allows the users to impart their notion of the relevance of results that may be returned by particular sub-queries. Unlike prior approaches, the sub-queries are not all immediately and fully executed by the database server when they are received. Rather, each sub-query is only executed when the previously executed sub-query has not produced results that satisfy the user.</p>
<p id="p-0018" num="0017">In an embodiment, the sub-queries select data from a database based on search criteria associated with the information being requested, which may include variations of original search terms, and the progression according to which the sub-queries are executed corresponds to a progressive relaxation of the original search terms.</p>
<p id="p-0019" num="0018">According to one aspect, a series of sub-queries specified by a user are received at a server, for example, and executed in an order based on the progression specified by the user. Hence, multiple sub-queries may be executed by the server in response to only a single complete round-trip communication between the user/client and the server, and the server need only process a single query. Network loading and response time and are thereby improved.</p>
<p id="p-0020" num="0019">In an embodiment, a series of sub-queries specified by a user are received at the database server in a single round-trip communication. The server then executes the sub-queries in an order based on the progression specified by the user, however, each sub-query is executed only if the results of the previously executed sub-queries were not sufficient to fulfill the search request. For example, if the user requests a specific number of result hits, the sub-queries are executed in series until the number of requested hits have been produced, but no more sub-queries than are necessary are executed. Thus, for example, if execution of the first sub-query provides enough hits or sufficiently relevant hits to satisfy the user request, then none of the other sub-queries are executed and, consequently, computational resources are conserved. In such an embodiment, the user may specify “stop criteria” (e.g., a minimum number of hits, an amount of time, a volume of data, or a combination of such criteria) through interaction with a user interface prior to submission of a search. Once the search results satisfy the stop criteria, the database server does not execute any further sub-queries. Hence, this user-specified stop criteria approach would only require one complete round-trip communication between the client and server, and the server need only process a single query.</p>
<p id="p-0021" num="0020">Alternatively, the user may iteratively request more hits through interaction with a user interface, as needed to satisfy the user's interest. In this case, the user interaction is not sending a new query, but indicating that the server is to proceed to the next sub-query in the original received query. Similarly to the user-specified stop criteria approach, only one complete round-trip communication and associated processing is required. This scenario may require multiple secondary communications between the client and server because the server does not have knowledge of the stop criteria prior to formulation of a query execution plan. However, these secondary client-server communications are not computationally expensive, complete round-trip communications that require significant query processing overhead.</p>
<p id="p-0022" num="0021">Non-limiting examples of some benefits provided by the techniques described herein are (1) a reduction in network load due to a reduction in computationally expensive complete round-trip communications between a client and a server; (2) a reduction in unnecessary load on a database server due to executing queries that are not actually required to meet an end-user's needs; (3) an elimination or reduction in work from a search engine or middleware application with respect to relevance ranking processing; and (4) ease of use, by shifting work to a database server from an end user, and/or ease of application development, by shifting work to a database server from a search engine or middleware application, both with respect to construction of queries based on original search terms.</p>
<heading id="h-0006" level="1">OPERATING ENVIRONMENT EXAMPLE</heading>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram that illustrates a simplified example of an operating environment in which an embodiment of the invention may be implemented.</p>
<p id="p-0024" num="0023">Embodiments comprise techniques for managing information searches, which includes managing database queries. Hence, an example of an operating environment includes a client <b>102</b>, a search mechanism <b>104</b>, a database server <b>106</b> and a database <b>108</b>.</p>
<p id="p-0025" num="0024">Client <b>102</b> is a client computer software application that executes on a computing platform, such as a desktop or laptop computer, to communicate with a server computer software application, such as search mechanism <b>104</b> or database server <b>106</b>. Client <b>102</b> facilitates a process in which an end user, such as a person requesting a search for information, communicates with search mechanism <b>104</b> in order to request data or information. For example, client <b>102</b> may be a conventional web browser that facilitates communication over a network, such as the Internet. Thus, client <b>102</b> may display on a display terminal various web pages, data input frames, query results, and the like. Client <b>102</b> displays information or pages served from search mechanism <b>104</b>.</p>
<p id="p-0026" num="0025">Search mechanism <b>104</b> is typically a combination of a computer software application and the computer hardware on which the application executes, such as a server computer. Search mechanism <b>104</b> provides a user interface and searching functionality to an end user using client <b>102</b>. For non-limiting examples, search mechanism <b>104</b> may be what is commonly referred to as a search engine, for searching the Internet for information contained in web pages, or may be an interface to a more specialized information source, such as a search function on an e-commerce or corporate web page, or may be an application server.</p>
<p id="p-0027" num="0026">Search mechanism <b>104</b> serves as an interface between client <b>102</b> and a database server <b>106</b>, and can be considered a client of database server <b>106</b>. Search mechanism <b>104</b> and database server <b>106</b> can be configured together on a single computing platform and can be configured as related software modules that provide integrated functionality to client <b>102</b>. Thus, search mechanism <b>104</b> and database server <b>106</b> are not required to be separate entities as depicted in <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0028" num="0027">Database server <b>106</b> provides the data requested by an application server, such as search mechanism <b>104</b>, on behalf of a client <b>102</b>. The database server does all of the remaining query processing not performed by the search mechanism <b>104</b> or by a user of client <b>102</b>. Thus, database server <b>106</b> is a highly functional interface to a data repository, such as database <b>108</b>, for managing a large amount of data in a multi-user environment. In broad terms, database server <b>106</b> accesses data in database <b>108</b> pursuant to a request.</p>
<p id="p-0029" num="0028">Database <b>108</b> is a collection of data treated as a unit. Generally, the purpose of a database <b>108</b> is to store and retrieve related information. Database <b>108</b> comprises some type of data storage unit or data container, such as a data table with associated rows and columns or an object class with associated objects. Database <b>108</b> typically comprises multiple other structures for storing, accessing and manipulating data, for example, indexes on tables. Embodiments do not require any specific logical or physical structure for database <b>108</b>.</p>
<heading id="h-0007" level="1">Text Queries</heading>
<p id="p-0030" num="0029">According to one embodiment, a CONTAINS operator is used to implement a progressive relaxation mechanism as described herein. A CONTAINS operator is used in the WHERE clause of a SELECT statement to specify a query expression for a text query. The CONTAINS operator returns a relevance score for every row selected, which is obtainable with a SCORE operator. One grammar for the CONTAINS operator is called CONTEXT. Another applicable grammar is CTXCAT. An example of a query that includes a CONTAINS operator is as follows:</p>
<p id="p-0031" num="0030">
<tables id="TABLE-US-00001" num="00001">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="63pt" align="left"/>
<colspec colname="1" colwidth="154pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>CONTAINS (</entry>
</row>
<row>
<entry/>
<entry> [schema.]column</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="offset" colwidth="63pt" align="left"/>
<colspec colname="1" colwidth="56pt" align="left"/>
<colspec colname="2" colwidth="98pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry> text_query</entry>
<entry>VARCHAR2</entry>
</row>
<row>
<entry/>
<entry> [,label</entry>
<entry>NUMBER])</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="63pt" align="left"/>
<colspec colname="1" colwidth="154pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>RETURN NUMBER;</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
<br/>
where [schema.]column specifies the text column to be searched, which preferably has a text index associated therewith. The text_query parameter specifies (1) the query expression that defines the search in the column, or (2) a marked-up string that specifies a query based on the CTXCAT grammar. In specifying a query based on the CTXCAT grammar, via a query template, the query string uses the following tags:
</p>
<p id="p-0032" num="0031">
<tables id="TABLE-US-00002" num="00002">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>&lt;query&gt; &lt;/query&gt;, which signals that this query is to be interpreted</entry>
</row>
<row>
<entry/>
<entry>as a query template;</entry>
</row>
<row>
<entry/>
<entry>&lt;textquery&gt; &lt;/textquery&gt;, which specifies the query string;</entry>
</row>
<row>
<entry/>
<entry>grammar= , which specifies the grammar of the query;</entry>
</row>
<row>
<entry/>
<entry>&lt;score&gt; &lt;/score&gt;, which specifies the score preference; and</entry>
</row>
<row>
<entry/>
<entry>datatype= , which specifies the type of number returned as score.</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0033" num="0032">For each row selected, CONTAINS returns a number between 0 and 100 that indicates how relevant the document row is to the query, with 0 indicating that no matches are found in a given row.</p>
<p id="p-0034" num="0033">The CONTEXT grammar is the default grammar for the CONTAINS operator and allows use of query operators in a query expression. For example, the logical operator AND allows for searching for all documents that contain two different words; the ABOUT operator allows for searching on concepts; the WITHIN operator allows for section searching, such as in sections of XML or HTML documents; and the NEAR operator allows for proximity searches, stem searches, fuzzy, and thesaural operators for expanding a query expression, or stated differently, for relaxing the search criteria associated with a query. In addition, an index on a table that stores text is typically of indextype “context”, if the CONTEXT grammar is expected to be utilized for text searches.</p>
<heading id="h-0008" level="1">Functional Components</heading>
<p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. 2</figref> is a block diagram that illustrates relevant functional components of database server <b>106</b> and search mechanism <b>104</b>.</p>
<p id="p-0036" num="0035">Search mechanism <b>104</b> comprises a rule interpreter <b>220</b>. Rule interpreter <b>220</b> operates to interpret and translate rules associated with an information search. For example, in one embodiment, which is described in more detail below, a user of client <b>102</b> (<figref idref="DRAWINGS">FIG. 1</figref>) specifies a search term or value, referred to as search criteria, in the form of rules which are interpreted by rule interpreter <b>220</b> and translated into another format. For example, a user might provide a set of search rules such as (search terms, AND, OR), which specifies search criteria (i.e., original search terms in original form, conjunctive form of search terms; disjunctive form of search terms) and an order in which to execute related sub-queries (i.e., execute original form first, conjunctive form next, disjunctive form next).</p>
<p id="p-0037" num="0036">Upon receiving a set of rules, rule interpreter <b>220</b> constructs a query template based on the set of rules. According to one embodiment, the query template is in the form of a &lt;text_query&gt; template, as described above. According to another embodiment, the query template is in the form of a “rewrite template,” which is described below. In both embodiments, the query template represents search criteria and an order in which sub-queries associated with the search criteria are to be executed.</p>
<p id="p-0038" num="0037">In another embodiment, rule interpreter <b>220</b> generates a relaxation query <b>250</b><i>a </i>based on the rules received, for submission to database server <b>106</b>. The relaxation query <b>250</b><i>a </i>includes search criteria and an order in which constituent sub-queries associated with the search criteria are to be executed.</p>
<p id="p-0039" num="0038">Rule interpreter <b>220</b>, or other modules within search mechanism <b>104</b>, may be configured to provide other functionality to make users' interaction with database server <b>106</b> user-friendly.</p>
<p id="p-0040" num="0039">Database server <b>106</b> functionally comprises a query relaxation engine <b>202</b> and a query execution engine <b>210</b>. Query relaxation engine <b>202</b> comprises a template interpreter <b>204</b> and a query constructor <b>206</b>, and query execution engine <b>210</b> comprises a context module <b>208</b>.</p>
<p id="p-0041" num="0040">Template interpreter <b>204</b> is configured to interpret various forms of search criteria, such as query templates, that specify or otherwise represent a sequence of sub-queries and an order in which to execute the sub-queries. Template interpreter <b>204</b> passes information to query constructor <b>206</b>, which processes the received information into a query. The query is executed to fetch information from database <b>108</b> (<figref idref="DRAWINGS">FIG. 1</figref>), possibly in conjunction with context object <b>208</b>.</p>
<p id="p-0042" num="0041">Template interpreter <b>204</b> is configured to interpret query templates, such as what may be output from rule interpreter <b>220</b> or some other source. For example, rule interpreter <b>220</b> receives a set of rules from an end user and generates a query template based on those rules, which serves as a request to construct a query based on the query template. In turn, template interpreter <b>204</b> receives and interprets the query template and passes information to query constructor <b>206</b> that is necessary to construct a query according to a query language that database server <b>106</b> supports, such as SQL or PL/SQL. In one embodiment, a rewrite template is received from rule interpreter <b>220</b> and includes statements that effectively request that a query be constructed based on the set of rules. An example of a rewrite template, with respect to a search for “cheap pen”, is as follows:</p>
<p id="p-0043" num="0042">
<tables id="TABLE-US-00003" num="00003">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>&lt;query&gt;</entry>
</row>
<row>
<entry/>
<entry> &lt;textquery&gt;</entry>
</row>
<row>
<entry/>
<entry>  ‘cheap pen’</entry>
</row>
<row>
<entry/>
<entry>  &lt;PROGRESSION&gt;</entry>
</row>
<row>
<entry/>
<entry>   &lt;seq&gt;&lt;REWRITE&gt; TRANSFORM(TOKENS, ‘ ‘,’ ‘,’ ’)</entry>
</row>
<row>
<entry/>
<entry>   &lt;/REWRITE&gt;&lt;/seq&gt;</entry>
</row>
<row>
<entry/>
<entry>   &lt;seq&gt;&lt;REWRITE&gt; TRANSFORM(TOKENS, ‘ ‘,’ ‘,’&amp;’)</entry>
</row>
<row>
<entry/>
<entry>   &lt;/REWRITE&gt;&lt;/seq&gt;</entry>
</row>
<row>
<entry/>
<entry>   &lt;seq&gt;&lt;REWRITE&gt; TRANSFORM(TOKENS, ‘ ‘,’$‘,’&amp;’)</entry>
</row>
<row>
<entry/>
<entry>   &lt;/REWRITE&gt;&lt;/seq&gt;</entry>
</row>
<row>
<entry/>
<entry>  &lt;/PROGRESSION&gt;</entry>
</row>
<row>
<entry/>
<entry> &lt;/textquery&gt;</entry>
</row>
<row>
<entry/>
<entry>&lt;/query&gt;;</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
<br/>
where the arguments of the TRANSFORM function include a prefix associated with the search terms, a suffix associated with the search terms, and an operator related to the search terms. Thus, a prefix or suffix can be specified in association with the search terms, in addition to a relevant operator associated with the search terms, such as “&amp;” which represents logical operator “AND ” or “/” which represents logical operator “OR”. The prefix and suffix fields provide support for variations such as stem and wildcard searches. Hence, use of this embodiment in conjunction with rule interpreter <b>220</b> provides a user-friendly capability for end users to simply provide a set of rules as input for a search, whereby through a series of processes an associated query is constructed for execution by database server <b>106</b> to fetch information from database <b>108</b> (<figref idref="DRAWINGS">FIG. 1</figref>).
</p>
<p id="p-0044" num="0043">Based on the foregoing rewrite template, template interpreter <b>204</b> parses the search phrase “cheap pen” into multiple words, “cheap” and “pen”, and each word is transformed according to the specified rules and passed to query constructor <b>206</b> for generation of a query on database <b>108</b> (<figref idref="DRAWINGS">FIG. 1</figref>). For example, processing of the function TRANSFORM(TOKENS, ‘‘,’$‘,’&amp;‘), with respect to the search terms “cheap pen”, functions to construct a sub-query based on suffix stems of “cheap” and “pen”, in the conjunctive form. Thus, a sub-query is constructed based on the REWRITE operator and the TRANSFORM function, which searches for (1) “cheaper” AND “pen”; and (2) “cheapest” AND “pen”.</p>
<p id="p-0045" num="0044">The preceding delineation of functionality between template interpreter <b>204</b> and query constructor <b>206</b> is not limiting, for these functions may be performed by an integrated interpreter <b>204</b>/constructor <b>206</b> software module.</p>
<p id="p-0046" num="0045">Query constructor <b>206</b> receives various forms of information that define a search, such as text strings, text query templates, rewrite templates, and non-text parameters. Query constructor <b>206</b> then constructs queries from the information received, such as relaxation query <b>250</b><i>c</i>. Such queries are, in turn, submitted to query execution engine <b>210</b> for execution against database <b>108</b> (<figref idref="DRAWINGS">FIG. 1</figref>).</p>
<p id="p-0047" num="0046">Query execution engine <b>210</b> interfaces with and executes queries, such as relaxation queries <b>250</b><i>a</i>, <b>250</b><i>b</i>, <b>250</b><i>c</i>, against database <b>108</b> (<figref idref="DRAWINGS">FIG. 1</figref>). Query execution engine <b>210</b> comprises a context module <b>208</b> that implements the functionality of the CONTEXT grammar when searching for text. Hence, if a CONTAINS operator is identified in the process of executing a SQL query, the CONTAINS argument text string or template is passed to the context module <b>208</b>, possibly via template interpreter <b>204</b>, for processing according to the functionality of the CONTEXT grammar. In addition, query execution engine <b>210</b> supports execution of a relaxation query <b>250</b><i>b</i>, received directly from an end user.</p>
<heading id="h-0009" level="1">User-Specified Progressive Relaxation of Query Requirements</heading>
<p id="p-0048" num="0047">According to an aspect of the invention, native support for progressive relaxation of database queries is provided in a database server application. Hence, applications and end-users are able to specify a sequence of sub-queries that is associated with a data search, and an order in which to execute the sub-queries to produce a desired result. Therefore, users can affect the manner and extent of the search performed to enhance the performance of the search. In addition, users can affect the quality of the relevance ranking of related results or hit-lists, without significant degradation in query response time or throughput. Such a technique improves query response time and throughput by reducing unnecessary query/search term expansions and computationally expensive complete round-trip communications between client and server applications.</p>
<p id="p-0049" num="0048">In an embodiment, capabilities are provided for a user to specify a progression sequence of sub-queries to be executed with respect to different sections of a document, such as HTML and XML documents. For example, a user may specify that a term be searched for first in the title of one or more documents and next in the body of the one or more documents and next in the description of graphic objects that appear in the one or more documents. Hence, refined search capabilities are provided.</p>
<p id="p-0050" num="0049">In an embodiment, a query that includes a CONTAINS clause can be issued against a database, wherein the search string is not required to adhere to conventional text query grammar. Instead, a search string may adhere to text query template format, as the following example illustrates, in which a query template is used as the query expression argument for a CONTAINS operator. The following provides an example query for searching text stored in a data table that is indexed with a context index type:</p>
<p id="p-0051" num="0050">
<tables id="TABLE-US-00004" num="00004">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="21pt" align="left"/>
<colspec colname="1" colwidth="196pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>SELECT * from tablename</entry>
</row>
<row>
<entry/>
<entry>WHERE CONTAINS (columnname, ‘search criteria’, 1) &gt; 0.</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0052" num="0051">Thus, according to this embodiment, a query template is provided as the argument to the CONTAINS clause, depicted in the preceding query as the “search criteria.” In such an embodiment, the following example mark-up document, or query template, can be used as an argument to a CONTAINS clause. That is, the query template is used to represent the search criteria. The query template specifies a sequence of sub-queries, i.e., probes into one or more tables, and a progressive order in which to execute the sub-queries against a specified column of a table.</p>
<p id="p-0053" num="0052">
<tables id="TABLE-US-00005" num="00005">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="56pt" align="left"/>
<colspec colname="1" colwidth="161pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>&lt;query&gt;</entry>
</row>
<row>
<entry/>
<entry> &lt;textquery&gt;</entry>
</row>
<row>
<entry/>
<entry>  &lt;PROGRESSION&gt;</entry>
</row>
<row>
<entry/>
<entry>   &lt;seq&gt; cheap pen &lt;/seq&gt;</entry>
</row>
<row>
<entry/>
<entry>   &lt;seq&gt; cheap &amp; pen &lt;/seq&gt;</entry>
</row>
<row>
<entry/>
<entry>   &lt;seq&gt; cheap / pen &lt;/seq&gt;</entry>
</row>
<row>
<entry/>
<entry>  &lt;/PROGRESSION&gt;</entry>
</row>
<row>
<entry/>
<entry> &lt;/textquery&gt;</entry>
</row>
<row>
<entry/>
<entry>&lt;/query&gt;</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0054" num="0053">The preceding query and template illustrate a search on text, however, any data value or data type stored in one or more databases may be searched by applying the techniques described herein. Furthermore, the databases may be distributed and associated with multiple distributed servers, such as in the context of searching the Internet.</p>
<p id="p-0055" num="0054">In an alternative embodiment, the progression is implemented with SQL or PL/SQL extension operators instead of a mark-up template. For example, a PROGRESSION operator is defined as an extension to existing set of SQL operators, thus providing native database support for specification of progressions according to the techniques described herein.</p>
<p id="p-0056" num="0055">During execution of a query that includes a clause such as a CONTAINS clause for text or a similar clause for non-textual data, upon identification of a &lt;query&gt; tag, the execution engine will not process the relevant portion of the query as a typical query. Rather, a database server, such as database server <b>106</b> (<figref idref="DRAWINGS">FIG. 1</figref>), extracts the information between the &lt;textquery&gt; tags, determines whether a progression is specified, such as via a &lt;PROGRESSION&gt; tag, and executes related sub-queries in an order specified by the progression.</p>
<p id="p-0057" num="0056">In the example above, a sub-query would first be executed to search for documents that contain the phrase “cheap pen”. Next, a sub-query could be executed to search for documents that contain both words “cheap” and “pen”. Finally, a sub-query could be executed to search for documents that contain either of the words “cheap” or “pen”.</p>
<p id="p-0058" num="0057">In one embodiment, each of the three sub-queries may be automatically run in series according to the specified progression, with the results ordered according to which sub-query produced the given results. For example, hits returned from the first sub-query are produced or displayed with higher relevance ranking than hits returned from the second and third sub-queries.</p>
<p id="p-0059" num="0058">The manner in which the relevance rankings are presented is not limited. For example, the relevance ranking of the results may be identified simply by the order of presentation to the search requestor or may be assigned numerical rankings, percentages, etc. Such a scenario eliminates multiple round-trip communications between the client and the server and consequent network overhead.</p>
<p id="p-0060" num="0059">In an alternative embodiment, each of the sub-queries may only be executed, if at all, when the previously execute sub-queries did not fulfill the information search request. For example, if tens or hundreds of documents that include the phrase “cheap pen” are located by executing only the first sub-query, then execution of the remaining sub-queries is suspended or foregone completely. Thus, such a scenario eliminates multiple complete round-trip communications between the client and the server and consequent query processing and network overhead, as well as unnecessary probing. However, if the user specifically requests additional results, then the second and/or third queries can then be executed as necessary to fulfill the specific requirements of the search request. In such a scenario, subsequent client-server communications are not what is referred to above as complete round-trip communications, but are considered secondary communications because they require little or no “overhead” processing of the query, such as parsing, optimization, and the like.</p>
<heading id="h-0010" level="1">Process for Managing an Information Search-Client</heading>
<p id="p-0061" num="0060"><figref idref="DRAWINGS">FIG. 3</figref> is a flow diagram that illustrates a process for managing an information search. According to one aspect of the invention, this process is performed by an end user who is requesting an information search, typically via a user interface.</p>
<p id="p-0062" num="0061">At block <b>302</b>, one or more information values are specified relating to information being searched for. At block <b>304</b>, an order in which to execute sub-queries associated with the one or more values is specified. For example, a user may submit a query template, as described above, or a set of rules from which a query is constructed, as described above. Blocks <b>302</b> and <b>304</b> are preferably performed concurrently, however the steps may be performed in sequence. In one embodiment, the values and order are specified via a user interface, and in one embodiment, in the form of an XML document.</p>
<p id="p-0063" num="0062">At block <b>306</b>, the one or more information values and the order are submitted for execution of one or more of the sub-queries in the order specified. This information may be submitted directly to a database server, such as database server <b>106</b> (<figref idref="DRAWINGS">FIG. 1</figref>), or indirectly through a middleware application such as a search engine or function.</p>
<p id="p-0064" num="0063">In one embodiment, an information value that is associated with one or more particular sections of a document is specified at block <b>302</b>. In a related embodiment, an information value is specified at block <b>302</b> that is associated with at least two particular sections of a document, and the order specified at block <b>304</b> includes an order in which to execute sub-queries associated with the information value with respect to the at least two particular sections of the document, as previously described.</p>
<heading id="h-0011" level="1">Process for Managing an Information Search-Server</heading>
<p id="p-0065" num="0064"><figref idref="DRAWINGS">FIG. 4</figref> is a flow diagram that illustrates a process for managing an information search. According to one aspect of the invention, this process is performed by a database server.</p>
<p id="p-0066" num="0065">At block <b>402</b>, a query is received that includes a sequence of sub-queries and specification of a progression in which to execute the sub-queries. For example, a query that includes a CONTAINS clause for querying text is received, which includes a query template as an argument of the clause, as described above. In one embodiment, the query is received in the form of an XML document. The query that is received may, for example, include sub-queries that are associated with a particular section of a document.</p>
<p id="p-0067" num="0066">At block <b>404</b>, one or more of the sub-queries are executed in an order specified by the progression. In one embodiment, the process includes receiving a request for a particular number of results from the search, for example, along with the query received at block <b>402</b> or iteratively from an end user or otherwise. For an example of the iterative process, an end user may request, with successive communications, query results ten at a time. Thus, a database server or search mechanism successively provides the results in response to those requests, i.e., ten at a time. Furthermore, each sub-query of the one or more sub-queries is executed only if previously executed sub-queries have not produced results sufficient to fulfill the request for the specified number of results. For example, if the first executed sub-query produces thirty results and the user is iteratively requesting hits ten at a time, then the second sub-query is not executed until the user requests the thirty-first through fortieth hits.</p>
<p id="p-0068" num="0067">In contrast to prior approaches using concatenated queries, all of the sub-queries are not necessarily executed. Further, in contrast with prior approaches in which each sub-query is submitted to the database server in series, the present embodiment can submit multiple sub-queries to the database server using only one complete round-trip communication between an end user that is requesting the search, such as at client <b>102</b> (<figref idref="DRAWINGS">FIG. 1</figref>) and a server that is searching for the information, such as database server <b>106</b> (<figref idref="DRAWINGS">FIG. 1</figref>). Control over which sub-queries are actually executed, and in what order, is provided by the end user rather than assumed by a software application and/or search engine or function, and is applied by the database server.</p>
<p id="p-0069" num="0068">In one embodiment, all of the sub-queries select data from a database based on a respective particular set of values, i.e., search criteria, and the progression corresponds to a relaxation of the search criteria. For example, a sub-query is constructed for each of the original search term and variations of the search term “cheap pen”, using a particular set of values such as (1) “cheap” and “pen”, (2) a stem of “cheap” and “pen”, and (3) “cheap” or pen”. Therefore, the search criteria “cheap pen” is progressively relaxed by executing the associated sub-queries, which expand the search, according to the specified progression.</p>
<heading id="h-0012" level="1">Implementation Mechanism-Hardware Overview</heading>
<p id="p-0070" num="0069"><figref idref="DRAWINGS">FIG. 5</figref> is a block diagram that illustrates a computer system <b>500</b> upon which an embodiment of the invention may be implemented. Computer system <b>500</b> includes a bus <b>502</b> or other communication mechanism for communicating information, and a processor <b>504</b> coupled with bus <b>502</b> for processing information. Computer system <b>500</b> also includes a main memory <b>506</b>, such as a random access memory (RAM) or other dynamic storage device, coupled to bus <b>502</b> for storing information and instructions to be executed by processor <b>504</b>. Main memory <b>506</b> also may be used for storing temporary variables or other intermediate information during execution of instructions to be executed by processor <b>504</b>. Computer system <b>500</b> further includes a read only memory (ROM) <b>508</b> or other static storage device coupled to bus <b>502</b> for storing static information and instructions for processor <b>504</b>. A storage device <b>510</b>, such as a magnetic disk, optical disk, or magneto-optical disk, is provided and coupled to bus <b>502</b> for storing information and instructions.</p>
<p id="p-0071" num="0070">Computer system <b>500</b> may be coupled via bus <b>502</b> to a display <b>512</b>, such as a cathode ray tube (CRT) or a liquid crystal display (LCD), for displaying information to a computer user. An input device <b>514</b>, including alphanumeric and other keys, is coupled to bus <b>502</b> for communicating information and command selections to processor <b>504</b>. Another type of user input device is cursor control <b>516</b>, such as a mouse, a trackball, or cursor direction keys for communicating direction information and command selections to processor <b>504</b> and for controlling cursor movement on display <b>512</b>. This input device typically has two degrees of freedom in two axes, a first axis (e.g., x) and a second axis (e.g., y), that allows the device to specify positions in a plane.</p>
<p id="p-0072" num="0071">The invention is related to the use of computer system <b>500</b> for implementing the techniques described herein. According to one embodiment of the invention, those techniques are performed by computer system <b>500</b> in response to processor <b>504</b> executing one or more sequences of one or more instructions contained in main memory <b>506</b>. Such instructions may be read into main memory <b>506</b> from another computer-readable medium, such as storage device <b>510</b>. Execution of the sequences of instructions contained in main memory <b>506</b> causes processor <b>504</b> to perform the process steps described herein. In alternative embodiments, hard-wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus, embodiments of the invention are not limited to any specific combination of hardware circuitry and software.</p>
<p id="p-0073" num="0072">The term “computer-readable medium” as used herein refers to any medium that participates in providing instructions to processor <b>504</b> for execution. Such a medium may take many forms, including but not limited to, non-volatile media, volatile media, and transmission media. Non-volatile media includes, for example, optical, magnetic, or magneto-optical disks, such as storage device <b>510</b>. Volatile media includes dynamic memory, such as main memory <b>506</b>. Transmission media includes coaxial cables, copper wire and fiber optics, including the wires that comprise bus <b>502</b>. Transmission media can also take the form of acoustic or light waves, such as those generated during radio-wave and infra-red data communications.</p>
<p id="p-0074" num="0073">Common forms of computer-readable media include, for example, a floppy disk, a flexible disk, hard disk, magnetic tape, or any other magnetic medium, a CD-ROM, DVD, any other optical or magneto-optical medium, punchcards, papertape, any other physical medium with patterns of holes, a RAM, a PROM, and EPROM, a FLASH-EPROM, any other memory chip or cartridge, a carrier wave as described hereinafter, or any other medium from which a computer can read.</p>
<p id="p-0075" num="0074">Various forms of computer readable media may be involved in carrying one or more sequences of one or more instructions to processor <b>504</b> for execution. For example, the instructions may initially be carried on a magnetic disk of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system <b>500</b> can receive the data on the telephone line and use an infra-red transmitter to convert the data to an infra-red signal. An infra-red detector can receive the data carried in the infra-red signal and appropriate circuitry can place the data on bus <b>502</b>. Bus <b>502</b> carries the data to main memory <b>506</b>, from which processor <b>504</b> retrieves and executes the instructions. The instructions received by main memory <b>506</b> may optionally be stored on storage device <b>510</b> either before or after execution by processor <b>504</b>.</p>
<p id="p-0076" num="0075">Computer system <b>500</b> also includes a communication interface <b>518</b> coupled to bus <b>502</b>. Communication interface <b>518</b> provides a two-way data communication coupling to a network link <b>520</b> that is connected to a local network <b>522</b>. For example, communication interface <b>518</b> may be an integrated services digital network (ISDN) card or a modem to provide a data communication connection to a corresponding type of telephone line. As another example, communication interface <b>518</b> may be a local area network (LAN) card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation, communication interface <b>518</b> sends and receives electrical, electromagnetic or optical signals that carry digital data streams representing various types of information.</p>
<p id="p-0077" num="0076">Network link <b>520</b> typically provides data communication through one or more networks to other data devices. For example, network link <b>520</b> may provide a connection through local network <b>522</b> to a host computer <b>524</b> or to data equipment operated by an Internet Service Provider (ISP) <b>526</b>. ISP <b>526</b> in turn provides data communication services through the world wide packet data communication network now commonly referred to as the “Internet” <b>528</b>. Local network <b>522</b> and Internet <b>528</b> both use electrical, electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link <b>520</b> and through communication interface <b>518</b>, which carry the digital data to and from computer system <b>500</b>, are exemplary forms of carrier waves transporting the information.</p>
<p id="p-0078" num="0077">Computer system <b>500</b> can send messages and receive data, including program code, through the network(s), network link <b>520</b> and communication interface <b>518</b>. In the Internet example, a server <b>530</b> might transmit a requested code for an application program through Internet <b>528</b>, ISP <b>526</b>, local network <b>522</b> and communication interface <b>518</b>.</p>
<p id="p-0079" num="0078">The received code may be executed by processor <b>504</b> as it is received, and/or stored in storage device <b>510</b>, or other non-volatile storage for later execution. In this manner, computer system <b>500</b> may obtain application code in the form of a carrier wave.</p>
<heading id="h-0013" level="1">EXTENSIONS AND ALTERNATIVES</heading>
<p id="p-0080" num="0079">Alternative embodiments of the invention are described throughout the foregoing description, and in locations that best facilitate understanding the context of the embodiments. Furthermore, the invention has been described with reference to specific embodiments thereof. It will, however, be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention. For example, embodiments are described in the context of database queries; however, the techniques described are applicable to electronic searches for information, in general. For another example, embodiments are described in the context of text searches; however, the techniques are applicable to searches for types of information other than text. Therefore, the specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense.</p>
<p id="p-0081" num="0080">In addition, in this description certain process steps are set forth in a particular order, and alphabetic and alphanumeric labels may be used to identify certain steps. Unless specifically stated in the description, embodiments of the invention are not necessarily limited to any particular order of carrying out such steps. In particular, the labels are used merely for convenient identification of steps, and are not intended to specify or require a particular order of carrying out such steps.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method for managing an information search, the method comprising the computer-implemented steps of:
<claim-text>receiving a search request query that includes a sequence of sub-queries and specifies a progression in which to execute the sub-queries;</claim-text>
<claim-text>based on the progression, executing a first sub-query from the sequence of sub-queries;</claim-text>
<claim-text>executing one or more of the sub-queries other than the first sub-query in an order specified by the progression, wherein each of the one or more sub-queries other than the first sub-query is automatically executed only if results for previously executed one or more sub-queries are not sufficient to fulfill the search request; and</claim-text>
<claim-text>providing results for one or more executed sub-queries from the sequence of sub-queries.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising the computer-implemented steps of:
<claim-text>receiving a request for a particular number of results for the search; and</claim-text>
<claim-text>wherein each of the one or more sub-queries other than the first sub-query is executed only if previously executed sub-queries do not fulfill the request for the particular number of results.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein all the sub-queries select data from a database based on respective search criteria, and wherein the progression corresponds to a relaxation of original search criteria associated with the search.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the progression is specified by an end user that is requesting the search.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the progression is specified through interaction with a user interface.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the step of executing one or more sub-queries includes the steps of:
<claim-text>providing results for the first sub-query;</claim-text>
<claim-text>receiving a request to provide more results;</claim-text>
<claim-text>in response to receiving the request to provide more results and based on the progression, executing a second sub-query from the sequence of sub-queries; and</claim-text>
<claim-text>providing results for the second sub-query.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the step of receiving includes receiving as an XML document search criteria associated with the sequence of sub-queries and the progression.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the step of receiving includes receiving the search request query from an application program that constructs the query based on a set of one or more rules, wherein the set is specified by an end user that is requesting the information.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the application program is associated with a search engine.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the step of receiving includes receiving a set of search criteria specified by an end user and receiving a request to construct a database query based on the search criteria; and wherein the method further comprises the computer-implemented step of:
<claim-text>constructing a database query based on the search criteria.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the step of receiving includes receiving the search request query that specifies search criteria in association with one or more sections of a document and receiving the progression that specifies an order in which to execute sub-queries associated with the search criteria against the one or more sections of the document.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. A computer-readable storage medium carrying one or more sequences of instructions which, when executed by one or more processors, causes the one or more processors to perform the method recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. A computer-readable storage medium carrying one or more sequences of instructions which, when executed by one or more processors, causes the one or more processors to perform the method recited in <claim-ref idref="CLM-00002">claim 2</claim-ref>.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. A computer-readable storage medium carrying one or more sequences of instructions which, when executed by one or more processors, causes the one or more processors to perform the method recited in <claim-ref idref="CLM-00003">claim 3</claim-ref>.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. A computer-readable storage medium carrying one or more sequences of instructions which, when executed by one or more processors, causes the one or more processors to perform the method recited in <claim-ref idref="CLM-00004">claim 4</claim-ref>.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. A computer-readable storage medium carrying one or more sequences of instructions which, when executed by one or more processors, causes the one or more processors to perform the method recited in <claim-ref idref="CLM-00005">claim 5</claim-ref>.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. A computer-readable storage medium carrying one or more sequences of instructions which, when executed by one or more processors, causes the one or more processors to perform the method recited in <claim-ref idref="CLM-00006">claim 6</claim-ref>.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. A computer-readable storage medium carrying one or more sequences of instructions which, when executed by one or more processors, causes the one or more processors to perform the method recited in <claim-ref idref="CLM-00007">claim 7</claim-ref>.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. A computer-readable storage medium carrying one or more sequences of instructions which, when executed by one or more processors, causes the one or more processors to perform the method recited in <claim-ref idref="CLM-00008">claim 8</claim-ref>.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. A computer-readable storage medium carrying one or more sequences of instructions which, when executed by one or more processors, causes the one or more processors to perform the method recited in <claim-ref idref="CLM-00009">claim 9</claim-ref>.</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. A computer-readable storage medium carrying one or more sequences of instructions which, when executed by one or more processors, causes the one or more processors to perform the method recited in <claim-ref idref="CLM-00010">claim 10</claim-ref>.</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. A computer-readable storage medium carrying one or more sequences of instructions which, when executed by one or more processors, causes the one or more processors to perform the method recited in <claim-ref idref="CLM-00011">claim 11</claim-ref>.</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. A method for managing a search for information, the method comprising the computer-implemented steps of:
<claim-text>specifying search criteria related to the information being searched for;</claim-text>
<claim-text>specifying an order in which to execute sub-queries associated with the search criteria; and</claim-text>
<claim-text>transmitting the search criteria and the order, for execution of one or more of the sub-queries by a database server in the order specified, wherein each of one or more sub-queries, other than a first sub-query in the order, is automatically executed only if results for previously executed one or more sub-queries are not sufficient to fulfill the search.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00024" num="00024">
<claim-text>24. The method of <claim-ref idref="CLM-00023">claim 23</claim-ref>, wherein the steps of specifying are performed by an end user that is requesting the search for information.</claim-text>
</claim>
<claim id="CLM-00025" num="00025">
<claim-text>25. The method of <claim-ref idref="CLM-00024">claim 24</claim-ref>, wherein the steps of specifying are performed through interaction with a user interface.</claim-text>
</claim>
<claim id="CLM-00026" num="00026">
<claim-text>26. The method of <claim-ref idref="CLM-00023">claim 23</claim-ref>, wherein the step of specifying search criteria includes specifying a single set of values, and wherein the step of specifying an order includes specifying an ordered set of one or more rules associated with the set of values.</claim-text>
</claim>
<claim id="CLM-00027" num="00027">
<claim-text>27. The method of <claim-ref idref="CLM-00026">claim 26</claim-ref>, wherein the ordered set of one or more rules includes a logical operator.</claim-text>
</claim>
<claim id="CLM-00028" num="00028">
<claim-text>28. The method of <claim-ref idref="CLM-00023">claim 23</claim-ref>, wherein the steps of specifying include specifying in the form of an XML document.</claim-text>
</claim>
<claim id="CLM-00029" num="00029">
<claim-text>29. The method of <claim-ref idref="CLM-00023">claim 23</claim-ref>, wherein the step of specifying search criteria includes specifying search criteria in association with one or more sections of a document, and wherein the step of specifying an order includes specifying an order in which to execute sub-queries associated with the search criteria against the one or more sections of the document.</claim-text>
</claim>
<claim id="CLM-00030" num="00030">
<claim-text>30. The method of <claim-ref idref="CLM-00029">claim 29</claim-ref>, wherein the step of specifying search criteria includes specifying search criteria in association with at least two particular sections of a document, and wherein the step of specifying an order includes specifying to execute sub-queries associated with the search criteria against the at least two particular sections of the document in a particular order.</claim-text>
</claim>
<claim id="CLM-00031" num="00031">
<claim-text>31. A computer-readable storage medium carrying one or more sequences of instructions which, when executed by one or more processors, causes the one or more processors to perform the method recited in <claim-ref idref="CLM-00023">claim 23</claim-ref>.</claim-text>
</claim>
<claim id="CLM-00032" num="00032">
<claim-text>32. A computer-readable storage medium carrying one or more sequences of instructions which, when executed by one or more processors, causes the one or more processors to perform the method recited in <claim-ref idref="CLM-00024">claim 24</claim-ref>.</claim-text>
</claim>
<claim id="CLM-00033" num="00033">
<claim-text>33. A computer-readable storage medium carrying one or more sequences of instructions which, when executed by one or more processors, causes the one or more processors to perform the method recited in <claim-ref idref="CLM-00025">claim 25</claim-ref>.</claim-text>
</claim>
<claim id="CLM-00034" num="00034">
<claim-text>34. A computer-readable storage medium carrying one or more sequences of instructions which, when executed by one or more processors, causes the one or more processors to perform the method recited in <claim-ref idref="CLM-00026">claim 26</claim-ref>.</claim-text>
</claim>
<claim id="CLM-00035" num="00035">
<claim-text>35. A computer-readable storage medium carrying one or more sequences of instructions which, when executed by one or more processors, causes the one or more processors to perform the method recited in <claim-ref idref="CLM-00027">claim 27</claim-ref>.</claim-text>
</claim>
<claim id="CLM-00036" num="00036">
<claim-text>36. A computer-readable storage medium carrying one or more sequences of instructions which, when executed by one or more processors, causes the one or more processors to perform the method recited in <claim-ref idref="CLM-00028">claim 28</claim-ref>.</claim-text>
</claim>
<claim id="CLM-00037" num="00037">
<claim-text>37. A computer-readable storage medium carrying one or more sequences of instructions which, when executed by one or more processors, causes the one or more processors to perform the method recited in <claim-ref idref="CLM-00029">claim 29</claim-ref>.</claim-text>
</claim>
<claim id="CLM-00038" num="00038">
<claim-text>38. A computer-readable storage medium carrying one or more sequences of instructions which, when executed by one or more processors, causes the one or more processors to perform the method recited in <claim-ref idref="CLM-00030">claim 30</claim-ref>.</claim-text>
</claim>
<claim id="CLM-00039" num="00039">
<claim-text>39. A computer apparatus for managing an information search, the apparatus comprising:
<claim-text>means for receiving a search request query that includes a sequence of sub-queries and specifies a progression in which to execute the sub-queries;</claim-text>
<claim-text>means for executing, based on the progression, a first sub-query from the sequence of sub-queries; and</claim-text>
<claim-text>means for executing one or more of the sub-queries other than the first sub-query in an order specified by the progression, wherein each of the one or more sub-queries other than the first sub-query is automatically executed only if results for previously executed one or more sub-queries are not sufficient to fulfill the search request.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00040" num="00040">
<claim-text>40. A computer apparatus for managing a search for information, the apparatus comprising:
<claim-text>means for specifying search criteria related to the information being searched for;</claim-text>
<claim-text>means for specifying an order in which to execute sub-queries associated with the search criteria; and</claim-text>
<claim-text>means for transmitting the search criteria and the order, for execution of one or more of the sub-queries by a database server in the order specified, wherein each of one or more sub-queries, other than a first sub-query in the order, is automatically executed only if results for previously executed one or more sub-queries are not sufficient to fulfill the search.</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>
