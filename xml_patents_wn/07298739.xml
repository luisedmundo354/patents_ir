<us-patent-grant lang="EN" dtd-version="v4.2 2006-08-23" file="US07298739-20071120.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20071106" date-publ="20071120">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>07298739</doc-number>
<kind>B1</kind>
<date>20071120</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>10378403</doc-number>
<date>20030303</date>
</document-id>
</application-reference>
<us-application-series-code>10</us-application-series-code>
<us-term-of-grant>
<us-term-extension>1089</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>H</section>
<class>04</class>
<subclass>L</subclass>
<main-group>12</main-group>
<subgroup>50</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>370373</main-classification>
<further-classification>370225</further-classification>
<further-classification>370244</further-classification>
<further-classification>370461</further-classification>
</classification-national>
<invention-title id="d0e53">System and method for communicating switch fabric control information</invention-title>
<references-cited>
<citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5781745</doc-number>
<kind>A</kind>
<name>Ramelson et al.</name>
<date>19980700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>710113</main-classification></classification-national>
</citation>
<citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>6343081</doc-number>
<kind>B1</kind>
<name>Blanc et al.</name>
<date>20020100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370411</main-classification></classification-national>
</citation>
<citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>2004/0030859</doc-number>
<kind>A1</kind>
<name>Doerr et al.</name>
<date>20040200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>712 15</main-classification></classification-national>
</citation>
</references-cited>
<number-of-claims>40</number-of-claims>
<us-exemplary-claim>39</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>370411</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>370362-365</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>370447</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>370461</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>370462</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>370463</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>370535</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>370216</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>370225</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>370241</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>370242</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>370244</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>370369</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>370373</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>370449</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>710113</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>712 15</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>14</number-of-drawing-sheets>
<number-of-figures>15</number-of-figures>
</figures>
<us-related-documents>
<continuation-in-part>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>10035835</doc-number>
<kind>00</kind>
<date>20011224</date>
</document-id>
<parent-grant-document>
<document-id>
<country>US</country>
<doc-number>7020131</doc-number>
<kind>A </kind>
</document-id>
</parent-grant-document>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>10378403</doc-number>
</document-id>
</child-doc>
</relation>
</continuation-in-part>
<continuation-in-part>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>10029581</doc-number>
<kind>00</kind>
<date>20011220</date>
</document-id>
<parent-status>PENDING</parent-status>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>10035835</doc-number>
</document-id>
</child-doc>
</relation>
</continuation-in-part>
<continuation-in-part>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>10022673</doc-number>
<kind>00</kind>
<date>20011217</date>
</document-id>
<parent-grant-document>
<document-id>
<country>US</country>
<doc-number>7079545</doc-number>
<kind>A </kind>
</document-id>
</parent-grant-document>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>10029581</doc-number>
</document-id>
</child-doc>
</relation>
</continuation-in-part>
<continuation-in-part>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>10023266</doc-number>
<kind>00</kind>
<date>20011214</date>
</document-id>
<parent-status>ABANDONED</parent-status>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>10022673</doc-number>
</document-id>
</child-doc>
</relation>
</continuation-in-part>
</us-related-documents>
<parties>
<applicants>
<applicant sequence="001" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Miller</last-name>
<first-name>Kirk Alvin</first-name>
<address>
<city>San Diego</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="002" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Clovis</last-name>
<first-name>Philip Michael</first-name>
<address>
<city>San Diego</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="003" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Huber</last-name>
<first-name>John David</first-name>
<address>
<city>San Diego</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="004" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Yun</last-name>
<first-name>Kenneth Yi</first-name>
<address>
<city>San Diego</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="005" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Holzer</last-name>
<first-name>Peter John</first-name>
<address>
<city>Fallbrook</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
<applicant sequence="006" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Leung</last-name>
<first-name>John Calvin</first-name>
<address>
<city>San Diego</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
</applicants>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Law Office of Gerald Maliszewski</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="02" rep-type="attorney">
<addressbook>
<last-name>Maliszewski</last-name>
<first-name>Gerald</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</parties>
<assignees>
<assignee>
<addressbook>
<orgname>Applied Micro Circuits Corporation</orgname>
<role>02</role>
<address>
<city>San Diego</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Pezzlo</last-name>
<first-name>John</first-name>
<department>2616</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A system and method are provided for communicating control information in a switch fabric. The method comprises: on a switch card, establishing a plurality of crossbars controlled by an arbiter; initiating a control message; and, distributing the control message on a switch card token bus connecting the crossbars and arbiter elements. Distributing the control message on a switch card token bus connecting the crossbar and arbiter elements includes daisy-chain connecting the elements with a cyclical bus. In some aspects of the method, establishing a plurality of crossbars controlled by an arbiter includes identifying each element with a unique address. Then, initiating a control message includes initiating a control message with an attached address. Distributing the control message on a switch card token bus includes the substeps of: daisy-chain passing the control message between elements; and, terminating the message at an element having an address matching the address attached to the control message.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="229.79mm" wi="318.01mm" file="US07298739-20071120-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="235.20mm" wi="162.64mm" file="US07298739-20071120-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="239.01mm" wi="170.26mm" file="US07298739-20071120-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="171.53mm" wi="161.71mm" file="US07298739-20071120-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="244.09mm" wi="161.71mm" orientation="landscape" file="US07298739-20071120-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="240.54mm" wi="179.58mm" orientation="landscape" file="US07298739-20071120-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="242.91mm" wi="174.75mm" file="US07298739-20071120-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="238.34mm" wi="161.37mm" orientation="landscape" file="US07298739-20071120-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="235.54mm" wi="159.43mm" orientation="landscape" file="US07298739-20071120-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="240.11mm" wi="132.42mm" orientation="landscape" file="US07298739-20071120-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="232.33mm" wi="151.81mm" orientation="landscape" file="US07298739-20071120-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="213.19mm" wi="148.67mm" orientation="landscape" file="US07298739-20071120-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="238.76mm" wi="165.27mm" file="US07298739-20071120-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00013" num="00013">
<img id="EMI-D00013" he="204.55mm" wi="167.81mm" file="US07298739-20071120-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00014" num="00014">
<img id="EMI-D00014" he="175.01mm" wi="172.80mm" file="US07298739-20071120-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">RELATED APPLICATIONS</heading>
<p id="p-0002" num="0001">This application is a continuation-in-part of a application entitled, SYSTEM AND METHOD FOR SWITCHING VARIABLY SIZED INFORMATION GROUPS, invented by Yun et al., Ser. No. 10/023,266, filed Dec. 14, 2001 now abandoned.</p>
<p id="p-0003" num="0002">This application is a continuation-in-part of a application entitled, SYSTEM AND METHOD FOR SIMULTANEOUS DEFICIT ROUND ROBIN PRIORITIZATION, invented by Yun et al., Ser. No. 10/022,673, filed Dec. 17, 2001 now U.S. Pat. No. 7,079,545.</p>
<p id="p-0004" num="0003">This application is a continuation-in-part of a pending application entitled, SYSTEM AND METHOD FOR GRANTING ARBITRATED BIDS IN THE SWITCHING OF INFORMATION, invented by Yun et al., Ser. No. 10/029,581, filed Dec. 20, 2001.</p>
<p id="p-0005" num="0004">This application is a continuation-in-part of a application entitled, SYSTEM AND METHOD FOR HIERARCHIAL SWITCHING, invented by Yun et al., Ser. No. 10/035,835, filed Dec. 24, 2001 now U.S. Pat. No. 7,020,131.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0002" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0006" num="0005">1. Field of the Invention</p>
<p id="p-0007" num="0006">This invention generally relates to packet communications switching and, more particularly, to a system of method of communicating control messages in a switch fabric.</p>
<p id="p-0008" num="0007">2. Description of the Related Art</p>
<p id="p-0009" num="0008">There is industry demand for integrated circuits (ICs) switching systems that can be easily scaled for Network Access, the Network Edge, or a Core Switch Router, at the high end. SCSA (Signal Computing System Architecture) defines a switch fabric to be the facility for connecting any two (or more) transmitting or receiving Service Providers.</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. 14</figref> is a schematic block diagram of a general switch fabric system (prior art). Traffic enters the system on the ingress side (the left side of the figure). Traffic exits the system on the egress side (the right side of the figure). The port card ingress and egress structures are sometimes subdivided into channels and subchannels. The packet headers specify a required destination port card, channel, and subchannel. The system must synchronously route each ingress packet to the correct egress destination.</p>
<p id="p-0011" num="0010">Packets are converted into frames by ingress traffic managers (iTMs). A frame is a logical unit of data, which is often a small piece of a much larger data set such as a file or image. The iTMs feed the ingress side of the fabric. The switch fabric might convert the frame format to a “native” format, and then on egress, convert the data back into the TM frame format before sending the data to the egress traffic managers (eTMs). If the frames are fixed size (for example: 53 bytes, 64 bytes, or 80 bytes), the frames are often called cells.</p>
<p id="h-0003" num="0000">Protocol Specific vs. Protocol Agnostic</p>
<p id="p-0012" num="0011">A switch fabric can be protocol specific or protocol agnostic. An example of a protocol specific switch fabric would be a system designed and optimized specifically for asynchronous transfer mode (ATM) traffic. Another example would be a switch that handles only TCP/IP traffic. The obvious disadvantage of a switch fabric hardwired to handle a specific protocol is lack of flexibility. Service providers want to sell services to a variety of customers in various industries. Protocols vary from industry to industry.</p>
<p id="p-0013" num="0012">Even within one protocol type, there can be protocol upgrades. For example, TCP/IP, the machine language of Internet routers, now runs primarily “IPv4.” This protocol, successful as it has been, has a lack of available addresses, poor security features, and no “quality of service” (QoS) provisions. The next generation Internet protocol is “IPv6.” It provides solutions to these limitations.</p>
<p id="p-0014" num="0013">A protocol agnostic switch fabric works equally well with all protocol types, however, the traffic manager must be responsible for recognizing specific protocol types. The disadvantage of a protocol agnostic switch fabric is that it may be more complicated, and perhaps slower than a switch fabric dedicated to a particular protocol.</p>
<p id="h-0004" num="0000">Packet Striping vs. Single Link Per Packet</p>
<p id="p-0015" num="0014">The simplest way for a traffic manager to transmit a packet into a switch fabric is to transmit the packet serially along one line. Striping is a way of achieving higher bandwidth by transmitting a single packet across multiple ingress/egress lines. For example, a TM can transmit a packet into a switch fabric eight times as fast if the packet is sliced into eight pieces (stripes) by the TM, and conveyed into the fabric along 8 parallel lines simultaneously. The fabric captures the packet in memory, routes it to the required egress destination, and slices the packet into 8 parallel lines before transmitting the packet to the egress TM.</p>
<p id="p-0016" num="0015">The upside to packet striping is the potential for lower latency. There are several negative aspects of packet striping:</p>
<p id="p-0017" num="0016">if one of the links is damaged (1 of 8 in the example above), the entire channel is out of service, degrading fault tolerance; and,</p>
<p id="p-0018" num="0017">the interface between the TM and switch fabric is more complicated. Circuitry must be used to slice the packet into stripes and reassemble it into packets.</p>
<p id="h-0005" num="0000">Single-Cell Packet vs. Multi-Cell Packets</p>
<p id="p-0019" num="0018">Many switch fabrics now deployed and passing revenue traffic, especially in wide area networks (WANs), use asynchronous transfer mode (ATM) packets. ATM packets are single-cell packets, with a fixed cell size of 53 bytes, 48 bytes of which is the information payload. The ATM specification evolved in the 1980s and early 1990s. It was then believed that variable length (multi-cell) packets would be too difficult to implement at rates needed for wire-speed traffic. The single-cell solution was a compromise that would work for voice data, video data, multimedia data, email data, file data, etc. With a fixed frame size, switch designs are simplified and ultimately faster.</p>
<p id="p-0020" num="0019">However, files are better sent in large frames. Voice switching performs better with small bursts of data, corresponding to analog-to-digital converter time slots. Large frames and concomitant switching latencies can render a switch useless for most 2-way voice applications. Voice communications require low latency (time delay). Since ATM had to work for all network data, the small payload (voice) requirements prevailed at the expense of the large frame applications.</p>
<p id="p-0021" num="0020">For large frames or packets it is much more efficient to establish a path from an ingress port card to the required egress destination, and then leave this path undisturbed until the packet is completed. With single cell packets, the ingress port card must bid for, accept grants, and then schedule each cell of a multi-cell packet.</p>
<p id="p-0022" num="0021">There are also Frame Relay switch fabrics. Frame Relay is a single-cell protocol, albeit with frame size ranging from 6 to 4096 bytes. Such switch fabrics have been deployed and passing revenue traffic since the early 1990s. These switch fabrics have generally not been used for voice data because of the large latency. Only highly compressed voice traffic works well over frame relay. Voice-over-frame relay was added as an afterthought by network engineers. Frame relay excels at data communications such as local area network internetworking (LAN-to-LAN). Such communications are very high speed and bursty, with non-critical latency constraints.</p>
<p id="h-0006" num="0000">Cut-Through vs. Store-and-Forward</p>
<p id="p-0023" num="0022">The conventional method of switch fabric packet routing is called Store-and-Forward. In this method, the switch fabric accepts an input packet and buffers the packet on the ingress side of the fabric, making sure the packet was received intact, knowing the exact number of cells in the packet. The problem with the store-and-forward method is the added latency of buffering the packet. In Cut-through Packet Routing (CPR), a switch fabric is able to send the incoming packet cells to the correct egress port as soon as the destination address is known.</p>
<p id="h-0007" num="0000">Memory-Based vs. Arbitrated Crossbar</p>
<p id="p-0024" num="0023">A switch fabric can use memory-based crossbars or arbitrated crossbars. A memory-based crossbar is sometimes called a “shared memory switch.” Ingress packets flow from the port cards into a huge memory bank, which serve as the switch. From the memory bank, the destination address is determined from egress port destination information in the cell headers. The problem with these switch fabrics is that they become prohibitively expensive and large from all the required high-speed memory. Such fabrics cannot be used to reach terabit total switching speeds with technology available today.</p>
<p id="p-0025" num="0024">It would be advantageous if a switch fabric could use arbitrated crossbars to reduce the need for high-speed memory.</p>
<p id="p-0026" num="0025">It would be advantageous if a switch fabric could use Cut-though packet routing to reduce latency.</p>
<p id="p-0027" num="0026">It would be advantageous if a switch fabric could handle multi-cell packets, so as to switch larger-sized packets with a reduced latency.</p>
<p id="p-0028" num="0027">It would be advantageous if a switch fabric could use a single-link for each packet, to improve the system fault tolerance and simplify the interface to a TM.</p>
<p id="p-0029" num="0028">It would be advantageous if the above-mentioned switch fabric could operate protocol agnostic.</p>
<p id="p-0030" num="0029">It would be advantageous if switch fabric elements could communicate diagnostic and configuration information without dedicated wiring.</p>
<p id="p-0031" num="0030">It would be advantageous if a microprocessor located in each switch fabric switch card could be used to configure, monitor the status of, and diagnose switch card problems.</p>
<p id="p-0032" num="0031">It would be advantageous if a microprocessor located in each switch fabric switch card could be used to configure, monitor the status of, and diagnose problems on port cards connected to the switch cards.</p>
<p id="p-0033" num="0032">It would be advantageous if a microprocessor located in each switch fabric switch card could be used to configure, monitor the status of, and diagnose problems on port cards connected to switch cards, using existing switch fabric control links.</p>
<heading id="h-0008" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0034" num="0033">Accordingly, a method is provided for communicating control information in a switch fabric. The method comprises: on a switch card, establishing a plurality of crossbars controlled by an arbiter; initiating a control message; and, distributing the control message on a switch card token bus connecting the crossbars and arbiter elements. Distributing the control message on a switch card token bus connecting the crossbar and arbiter elements includes daisy-chain connecting the elements with a cyclical bus.</p>
<p id="p-0035" num="0034">In some aspects of the method, establishing a plurality of crossbars controlled by an arbiter includes identifying each element with a unique address. Then, initiating a control message includes initiating a control message with an attached address. Distributing the control message on a switch card token bus includes the substeps of: daisy-chain passing the control message between elements; and, terminating the message at an element having an address matching the address attached to the control message.</p>
<p id="p-0036" num="0035">The arbiter attaches a switch card tag to transmitted messages being distributed on the token bus, and terminates received messages being distributed on the token bus having switch card tags. The arbiter terminates received messages being distributed on the token bus having switch card tags by: checking the token parity; terminating the control message if the parity is wrong; and, setting a register to indicate that a control message has been terminated in response to a failed parity check.</p>
<p id="p-0037" num="0036">Port cards also include a token bus that communicates a control message in a manner analogous to the switch card described above. In addition, the method further comprises communicating control messages between the switch card arbiter and the port card queuing/scheduling (QS) device. In some aspects of the method, initiating a control message includes: initiating a control message from a switch card processor; and, transmitting the control message from the processor to the arbiter. The control message may be a request to the arbiter concerning the status of the port card QS device control link, a request to the crossbars concerning the status of interfacing data links, a request to the QS device concerning the status of an MS, a request to port card memory subsystems (MSs) concerning the status of interfacing data links, switch card configuration commands, or port card configuration commands.</p>
<p id="p-0038" num="0037">Additional details of the above described method and a system for communicating control information in a switch fabric is provided below.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0009" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. 1</figref> is a schematic block diagram illustrating the present invention system for communicating control information in a switch fabric.</p>
<p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. 2</figref> is a schematic block diagram of the switch card of <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. 3</figref> is a schematic block diagram of the port card of <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0042" num="0041"><figref idref="DRAWINGS">FIG. 4</figref> is a more detailed depiction of the port card of <figref idref="DRAWINGS">FIG. 3</figref>, including both ingress and egress functions.</p>
<p id="p-0043" num="0042"><figref idref="DRAWINGS">FIG. 5</figref> is a schematic block diagram depicting a packet communications network utilizing the present invention switch fabric.</p>
<p id="p-0044" num="0043"><figref idref="DRAWINGS">FIG. 6</figref> is a functional diagram of the communication and control paths through a fully populated fabric system.</p>
<p id="p-0045" num="0044"><figref idref="DRAWINGS">FIG. 7</figref> is a diagram illustrating one of many possible system architectures.</p>
<p id="p-0046" num="0045"><figref idref="DRAWINGS">FIG. 8</figref> is a schematic block diagram illustrating an exemplary switch card communication path.</p>
<p id="p-0047" num="0046"><figref idref="DRAWINGS">FIG. 9</figref> is a schematic block diagram depicting the arbiter processor interface.</p>
<p id="p-0048" num="0047"><figref idref="DRAWINGS">FIG. 10</figref> is a timing diagram associated with a port card token bus.</p>
<p id="p-0049" num="0048"><figref idref="DRAWINGS">FIG. 11</figref> is a schematic block diagram depicting the MS control interface.</p>
<p id="p-0050" num="0049"><figref idref="DRAWINGS">FIG. 12</figref> illustrates the MS IDs.</p>
<p id="p-0051" num="0050"><figref idref="DRAWINGS">FIGS. 13</figref><i>a </i>and <b>13</b><i>b </i>are flowcharts illustrating the present invention method for communicating control information in a switch fabric.</p>
<p id="p-0052" num="0051"><figref idref="DRAWINGS">FIG. 14</figref> is a schematic block diagram of a general switch fabric system (prior art).</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0010" level="1">DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS</heading>
<p id="p-0053" num="0052"><figref idref="DRAWINGS">FIG. 1</figref> is a schematic block diagram illustrating the present invention system for communicating control information in a switch fabric. The system <b>100</b> comprises a switch card <b>102</b>. Although only a single switch card is initially discussed, it should be understood that the system <b>100</b> may include a plurality of switch cards.</p>
<p id="p-0054" num="0053"><figref idref="DRAWINGS">FIG. 2</figref> is a schematic block diagram of the switch card <b>102</b> of <figref idref="DRAWINGS">FIG. 1</figref>. The switch card <b>102</b> typically includes a plurality of crossbars. Four crossbars <b>200</b>, <b>202</b>, <b>204</b>, and <b>206</b>, are shown, however, the switch card <b>102</b> is not limited to any particular number of crossbars. In some aspects of the system (not shown), the switch card <b>102</b> may either include just a single crossbar, or just a single enabled crossbar. Each crossbar has control ports and a plurality of backplane data link interfaces. Crossbar <b>200</b> has an ingress control port on line <b>208</b>, an egress control port on line <b>209</b>, ingress backplane data links <b>1</b> through x, on lines <b>210</b> through <b>212</b>, respectively, and egress backplane data links <b>1</b> through y on lines <b>214</b> through <b>216</b>, respectively. The values of x and y are not limited to any particular value.</p>
<p id="p-0055" num="0054">Likewise, crossbar <b>202</b> has an ingress control port on line <b>209</b>, an egress control port on line <b>218</b>, ingress backplane data links <b>1</b> through x, on lines <b>220</b> through <b>222</b>, respectively, and egress backplane data links <b>1</b> through y on lines <b>224</b> through <b>226</b>, respectively. Crossbar <b>204</b> has an ingress control port on line <b>218</b>, an egress control port on line <b>228</b>, ingress backplane data links <b>1</b> through x, on lines <b>230</b> through <b>232</b>, respectively, and egress backplane data links <b>1</b> through y on lines <b>234</b> through <b>236</b>, respectively. Crossbar <b>206</b> has an ingress control port on line <b>228</b>, an egress control port on line <b>238</b> ingress backplane data links <b>1</b> through x, on lines <b>240</b> through <b>242</b>, respectively, and egress backplane data links <b>1</b> through y on lines <b>244</b> through <b>246</b>, respectively.</p>
<p id="p-0056" num="0055">An arbiter <b>250</b> has an ingress control port on line <b>238</b> and an egress control port on line <b>208</b>. Taken as a whole, control lines <b>238</b>, <b>228</b>, <b>218</b>, <b>209</b>, and <b>208</b> may be considered a switch card token bus connecting the arbiter and crossbar element control ports for the distribution of control messages. The switch card token bus is given the reference designator <b>252</b>. Alternately stated, the switch card token bus <b>252</b> is a cyclical bus daisy-chain connecting the arbiter and crossbar ingress and egress control ports <b>208</b>, <b>209</b>, <b>218</b>, <b>228</b>, and <b>238</b>.</p>
<p id="p-0057" num="0056">The switch card token bus <b>252</b> daisy-chain passes a control message with an address attachment between the arbiter <b>250</b> and the crossbar <b>200</b>, <b>202</b>, <b>204</b>, and <b>206</b> elements. The arbiter <b>250</b> has a unique address. The arbiter <b>250</b> reads and terminates any received control message with an attachment matching the arbiter address. As used herein, “terminates” means that the message is not passed onto the next element on the token bus <b>252</b>. Likewise, each crossbar <b>200</b>-<b>206</b> has a unique address. Each crossbar reads and terminates a received control message with an attachment matching its address.</p>
<p id="p-0058" num="0057">In some aspects of the system, the arbiter <b>250</b> attaches a switch card tag to messages being transmitted on the token bus <b>252</b>. Then, the arbiter <b>250</b> terminates messages being received on the token bus <b>252</b> having switch card tags. In this manner, the arbiter <b>250</b> is able to clear the token bus <b>252</b> of faulty and misdirected messages.</p>
<p id="p-0059" num="0058">More specifically, the arbiter <b>250</b> includes a register <b>256</b>, the arbiter <b>250</b> checks the token parity of any received control message and terminates the control message if the parity is wrong. The arbiter <b>250</b> sets the register <b>256</b> to indicate that a control message has been terminated in response to a failed parity check.</p>
<p id="p-0060" num="0059">Returning to <figref idref="DRAWINGS">FIG. 1</figref>, the system further comprises a port card <b>104</b>. Although only a single port card is initially discussed, it should be understood that in other aspects of the system the switch card <b>102</b> may be connected to a plurality of port cards.</p>
<p id="p-0061" num="0060"><figref idref="DRAWINGS">FIG. 3</figref> is a schematic block diagram of the port card <b>104</b> of <figref idref="DRAWINGS">FIG. 1</figref>. Each port card, as exemplified by port card <b>104</b> includes a queuing and scheduling (QS) device <b>300</b>. The QS device <b>300</b> can be a priority queue (PQ), an earliest deadline first queue (EDFQ), or a field programmable gate array (FPGA). The QS device <b>300</b> has an ingress control port on line <b>302</b> and an egress control port on line <b>304</b>.</p>
<p id="p-0062" num="0061">A memory subsystem <b>306</b> (MS) has an ingress control port on line <b>304</b> and an egress control port on line <b>302</b>. The MS <b>306</b> has backplane data link interfaces <b>1</b> through c on lines <b>308</b> through <b>310</b>, respectively, connected to the switch card crossbar backplane data link interfaces (see <figref idref="DRAWINGS">FIG. 2</figref>). Lines <b>308</b> and <b>310</b> constitute a port card token bus <b>312</b> connecting the MS and the QS device ingress and egress control ports for the distribution of control messages. The MS <b>306</b> also interfaces to data lines <b>1</b> through m connected to port card ports communicating packets on lines <b>318</b> through <b>320</b>, respectively. The values of c and m are not limited to any particular value.</p>
<p id="p-0063" num="0062"><figref idref="DRAWINGS">FIG. 4</figref> is a more detailed depiction of the port card <b>104</b> of <figref idref="DRAWINGS">FIG. 3</figref>, including both ingress and egress functions. Then, the MS includes an ingress MS <b>400</b> (iMS) with an ingress control port on line <b>402</b> and an egress control port line on line <b>404</b>. An egress MS <b>406</b> (eMS) has an ingress control port on line <b>404</b> and an egress control port on line <b>408</b>.</p>
<p id="p-0064" num="0063">The QS device includes an ingress QS (iQS) device <b>410</b>, for controlling the iMS <b>400</b>, with an ingress control port on line <b>412</b> and an egress control port on line <b>402</b>. An egress QS (oQS) device <b>414</b> controls the eMS <b>406</b>. The oQS device <b>414</b> has an ingress control port on line <b>408</b> and an egress control port on <b>412</b>. Lines <b>402</b>, <b>404</b>, <b>408</b>, and <b>412</b> constitute the port card token bus <b>416</b> that daisy-chain connects the iQS device <b>410</b>, iMS <b>400</b>, oQS device <b>414</b>, and eMS <b>406</b> element ingress and egress control ports with a cyclical bus.</p>
<p id="p-0065" num="0064">The iMS <b>400</b> is connected through ingress backplane data links <b>1</b> through k on lines <b>418</b> through <b>420</b>, respectively, to crossbar ingress backplane data link inputs of the switch card (see <figref idref="DRAWINGS">FIG. 2</figref>). The value of k is not limited to any particular value. The eMS <b>406</b> is connected through egress backplane data links <b>1</b> through t on lines <b>422</b> through <b>424</b>, respectively to crossbar outputs. The value of t is not limited to any particular value. In other aspects of the invention (not shown), the port card <b>104</b> may include a plurality of iMSs, with corresponding iQSs.</p>
<p id="p-0066" num="0065">For greater simplicity the description of the port card <b>104</b> returns to <figref idref="DRAWINGS">FIG. 3</figref>. As with the switch card described above, the port card token bus <b>312</b> daisy-chain passes a control message with an address attachment between the QS device <b>300</b> and the MS <b>306</b>. The MS <b>306</b> has a unique address. The MS <b>306</b> reads and terminates any received control message with an attachment matching the MS address. Likewise, the QS device <b>300</b> has a unique address. The QS device <b>300</b> reads and terminates a received control message with an attachment matching the queuing device address.</p>
<p id="p-0067" num="0066">In some aspects, the MS <b>306</b> attaches a port card tag to transmitted messages being distributed on the token bus. Then, the MS <b>306</b> terminates received messages being distributed on the bus having port card tags. In some aspects of the invention the iMS, or one particular iMS if the port card includes a plurality of iMSs, terminates the messages with port card tags. Alternately, the eMS performs the above-mentioned termination function. The MS <b>306</b> may include a register <b>314</b>. The MS <b>306</b> checks the token parity of the received control message and terminates the control message if the parity is wrong. Then, the MS <b>306</b> sets the register <b>314</b> to indicate that a control message has been terminated in response to a failed parity check. The MS register <b>314</b>, as well as the arbiter register mentioned above in the description of <figref idref="DRAWINGS">FIG. 2</figref>, can be accessed for diagnostic purposes.</p>
<p id="p-0068" num="0067">Viewing <figref idref="DRAWINGS">FIGS. 2 and 3</figref>, the switch card arbiter <b>250</b> has a control link port connected to the port card QS device on line <b>106</b>, for communicating control messages. Typically, the control link <b>106</b> is used by the port cards to negotiate for crossbar access. In one aspect of the system <b>100</b>, the arbiter <b>250</b> sends a control message to the QS device <b>300</b>. The QS device <b>300</b> passes the control message to the port card token bus <b>312</b>, and the port card token bus <b>312</b> distributes the control message from the arbiter <b>250</b>.</p>
<p id="p-0069" num="0068">Referring specifically to <figref idref="DRAWINGS">FIG. 2</figref>, in some aspects the switch card <b>102</b> further includes a processor <b>258</b> having a port connected to an arbiter processor port on line <b>260</b> for initiating control messages. The processor <b>258</b> may initiate one of several different kinds of control messages. For example, requests to the arbiter <b>250</b> concerning the status of received QS device control links, such as link <b>106</b>. Other control messages may be requests to a crossbar concerning the status of interfacing data links. For example, the crossbar <b>200</b> may be queried on the status or health of ingress backplane data link <b>1</b> on line <b>210</b>.</p>
<p id="p-0070" num="0069">Requests can also be made to the QS device concerning the QS device and/or the status of received arbiter control links, such as link <b>106</b>. Requests can be made to MSs, through the QS device <b>300</b> concerning MS <b>306</b> status (either the iMS or the eMS, see <figref idref="DRAWINGS">FIG. 4</figref>) and the status of received data links, either the port card ingress/egress ports <b>1</b> through m associated with lines <b>318</b> through <b>320</b>, or backplane data links <b>1</b> through c associated with lines <b>308</b> through <b>310</b>. Other control messages are switch card configuration commands, which may enable backplane data and control links to various ports, and port card configuration commands, which may enable backplane data and control links to various switch cards in the system.</p>
<p id="p-0071" num="0070">In other aspect, a crossbar may initiate a control message in response to data link interface fault. For example, crossbar <b>200</b> may initiate a message in response to a faulty backplane data link <b>1</b> on line <b>210</b>. The switch card token bus <b>252</b> passes the control message from the crossbar <b>200</b> to the arbiter <b>250</b>. The arbiter <b>250</b> accepts and saves the control message in a memory (not shown). Then, the processor <b>258</b> may poll the arbiter <b>250</b> for saved control messages.</p>
<p id="p-0072" num="0071">Considering <figref idref="DRAWINGS">FIGS. 2 and 3</figref>, in other aspects of the system the port card QS device <b>300</b> sends a control message to the switch card arbiter <b>250</b>. In some aspects, the message is relayed to another port card via the switch card arbiter. For example, the oPQ of a first port card may wish to send the status of a packet being transmitted to a second port card iPQ, from which the packet is being sourced.</p>
<p id="p-0073" num="0072">Returning to <figref idref="DRAWINGS">FIG. 1</figref>, the system <b>100</b> is shown with a plurality of port cards. Shown are a first port card <b>104</b> through an nth port card <b>108</b>, where the value of n is not limited to any particular value. As in the description of <figref idref="DRAWINGS">FIG. 3</figref> above, each port card includes a QS device, a MS, and a port card token bus connecting the MS and the QS device elements for the distribution of control messages.</p>
<p id="p-0074" num="0073">The system <b>100</b> may include a plurality of switch cards. Shown are a first switch card <b>102</b> through an jth switch card <b>110</b>, where the value of j is not limited to any particular value. As in the description of <figref idref="DRAWINGS">FIG. 2</figref> above, each switch card may include a plurality of crossbars, an arbiter, and a switch card token bus connecting the arbiter and crossbar element control ports for the distribution of control messages. Each switch card may also include a processor. Lines <b>112</b> through <b>114</b> represent dedicated lines between the switch card processors and a network control unit <b>116</b>.</p>
<p id="p-0075" num="0074">The system <b>100</b> permits control messages to be passed between a switch card and a plurality of connected port cards. Further, the system permits control communications to occur between switch cards, through a port card to which the switch cards are connected.</p>
<heading id="h-0011" level="1">Functional Description</heading>
<p id="p-0076" num="0075">The Applied Micro Circuits Corporation (AMCC) S8005 Cyclone™ series is a specific embodiment of the above-described present invention series. The Cyclone series is a highly integrated, low power, area efficient chip set that implements a high-capacity switching fabric that seamlessly handles both packet and TDM (time division multiplexed) traffic. Details of this specific embodiment are presented below to clarify some of the system aspects described above. The switch fabric processes all types of packet traffic (ATM, MPLS, IP, etc.). The system switch fabric is based on a set of four highly integrated ICs which contain SERDES and memory in order to reduce the overall system power, routing complexity, and required board area. The chip set consists of the following chips:</p>
<p id="p-0077" num="0076">S8505 Priority Queue (PQ);</p>
<p id="p-0078" num="0077">S8605 Arbiter/Crossbar;</p>
<p id="p-0079" num="0078">S8805 Earliest Deadline First Queue (EDFQ); and,</p>
<p id="p-0080" num="0079">S8905 Memory Subsystem (MS).</p>
<p id="p-0081" num="0080">The port cards described above could be a single device including the PQ, MS, and EDFQ chip functions.</p>
<p id="p-0082" num="0081"><figref idref="DRAWINGS">FIG. 5</figref> is a schematic block diagram depicting a packet communications network utilizing the present invention switch fabric. Traffic management is integrated into the switch fabric and occurs at the ingress, switching, and egress in order to guarantee quality of service (QoS). The switch fabric is scalable and can terminate up to 128 OC-192's (1.28 Tbps). The system can be organized as a 32×32 port switch where each port consists of four OC-192 channels, in effect implementing a 128×128 switch. The OC-192's can be either channelized or concatenated. The fabric can also be thought of as a 512×512 switch since each channel can be treated as four OC-48 subchannels. In addition to the port cards, there are up to 16 switching cards (depending on the chosen architecture and organization), which consist of arbiters and crossbars. Each switching card has connections to all the port cards.</p>
<p id="p-0083" num="0082">All traffic is cellularized, whether TDM or best-effort type traffic. The interface into and out of the switch fabric passes cells over 2.5 Gbps serial links, which include 8B/10B encoding. Each channel of the switch fabric consists of up to ten serial links, providing up to 20 Gbps data rate throughput.</p>
<p id="p-0084" num="0083">Port cards provide the traffic interface into the switch fabric. Port cards can be architected such that the line interface (optics, Phy.'s, framers), network processing, and traffic management are on the same card, or they can be architected to be on separate cards. A port card's configuration is dependent on the desired chassis architecture and the number of chips needed.</p>
<p id="p-0085" num="0084">The three basic types of port cards are single channel (10G or OC-192), two channel (20G or 2×OC-192), and four channel (40G or 4×OC-192). The different types of port cards are normally not mixed in the same chassis because the backplane and switch cards would have to be built to support the largest case. When all of the cards are of the same type, there are optimizations that can be done (depending on the required bandwidth), to reduce the number of switch cards or crossbars on those cards, and hence the number of traces on the backplane.</p>
<p id="p-0086" num="0085"><figref idref="DRAWINGS">FIG. 6</figref> is a functional diagram of the communication and control paths through a fully populated fabric system. Note that each switch card, or switching card has a path to all the port cards and that the port card's token bus can be accessed by both the switch cards and the UP on the port card (if it is present).</p>
<p id="p-0087" num="0086">The switch cards in a system are all connected to a master system processor card or cards which would be responsible for the user interface, interfacing to the switch cards, keeping track of the overall system health, distributing timing to all the cards, and other system functions. Connections between the system card(s) and switch cards are typically Ethernet and provide redundancy (as shown in <figref idref="DRAWINGS">FIG. 7</figref>) so that there is no single point of failure that would prevent communication between all the cards.</p>
<p id="p-0088" num="0087"><figref idref="DRAWINGS">FIG. 7</figref> is a diagram illustrating one of many possible system architectures. In this example, the hub/switch is contained on the system card.</p>
<p id="h-0012" num="0000">Switch Cards</p>
<p id="p-0089" num="0088">A processor, or μP located on the switch card is responsible for running the Cyclone firmware. The Cyclone firmware is used to program, monitor and control the Cyclone chips in a Cyclone switch fabric system. Typically a switching subsystem contains multiple, intelligent switch cards that are connected through an internal network in a loosely coupled fashion. The firmware is responsible for configuring the S8605 arbiters, provisioning operational links, monitoring links for failures, recovery from failures, credit based flow control resynchronization, and the configuration and monitoring of port cards. The switch card processor connects directly to the arbiter through the arbiter processor interface.</p>
<p id="p-0090" num="0089"><figref idref="DRAWINGS">FIG. 8</figref> is a schematic block diagram illustrating an exemplary switch card communication path. The parts of the switch card involved in communication are shown in <figref idref="DRAWINGS">FIG. 8</figref>. The crossbars on a switch card are connected in a token bus configuration with each other and the arbiter. The token bus is used for configuring parameters and monitoring status in the crossbars. The processor on the switch card can access the token buses by through the arbiter.</p>
<p id="p-0091" num="0090">The processor interface on the arbiter is optimized for connecting to the MPC8260 but can be used with a wide variety of processors. The processor interface signals to the arbiter are shown in <figref idref="DRAWINGS">FIG. 9</figref>. The arbiter can be accessed either as a general purpose peripheral on the bus (UP_BUS_MODE=‘1’) or via DMA (UP_BUS_MODE=‘0’). As a peripheral, the arbiter has two chip selects, one for writing to the input FIFO and another for reading from the output FIFO. The FIFO_FULL signal indicates there is no more room to write more tokens while the FIFO_EMPTY signal indicates that there is nothing left to be read. If the UP_BURST_EN signal is set to ‘1’, then 4 32-bit word transfers are per-formed, i.e. the full and empty flags will be deasserted when four read or write operations can be performed.</p>
<p id="p-0092" num="0091"><figref idref="DRAWINGS">FIG. 9</figref> is a schematic block diagram depicting the arbiter processor interface. Using the arbiter in DMA mode requires the use of two DMA channels on the processor. One would be used for writing to the arbiter and the other for reading. Both single address and dual address DMA modes are supported.</p>
<p id="p-0093" num="0092">The Token Processor inside the arbiter can receive tokens from the processor, the switch card token bus, or from the port cards. At each of the entry and exit points of the Token Processor, there is a small FIFO. It may occur for some reason that the processor output FIFOs are full and there are urgent writes coming from the switch card token bus that have to occur to the arbiter registers in order to shut down grant connections on a certain crossbar's link or links. If there is traffic meant for other sources ahead of that urgent write, it would be blocked by the traffic meant to go to the processor. The arbiter has the “Drop_Tkn_En” (Drop Token Enable) register to deal with this situation. When “Drop_Tkn_En” is enabled, the Token Processor will drop tokens out of its input FIFOs that cannot be sent to their destinations because of an output FIFO backup. In this way, urgent tokens meant for the arbiter registers will be serviced in a timely manner.</p>
<p id="p-0094" num="0093">Refer to Table 1 for the following discussion of the token format. The processor writes four-byte tokens to the arbiter containing the following information:</p>
<p id="p-0095" num="0094">1. The port card number that the message is destined for is written into the Link field in bits 4:0 of the first byte. If bit <b>5</b>, “Switch_Card”, is set to ‘0’, the arbiter will send the message out on the link specified in bits 4:0.1f Switch_Card were set to ‘1’, then the Link field would be ignored, and the arbiter will forward the token onto the token bus on this switch card. The “Switch_Card” bit set to “1” indicates to the arbiter that the token is destined for this switch card (the switch card containing this arbiter).</p>
<p id="p-0096" num="0095">2. The next field that is written is the Destination field. This should correspond to one of the CHIP_IDs on the targeted token bus. None of the CHIP_IDs can be set to zero, which is reserved for flow control packets.</p>
<p id="p-0097" num="0096">3. The Address and Data fields are written and represent the data and the address that should be written to (or read from) in the targeted chip. If the operation is a read, based on the address, then the Data field is ignored by the destination chip. This information is summarized in Table 1.</p>
<p id="p-0098" num="0097">
<tables id="TABLE-US-00001" num="00001">
<table frame="none" colsep="0" rowsep="0" pgwide="1">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="266pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" rowsep="1">TABLE 1</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>Token Format Written To Arbiter</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry><chemistry id="CHEM-US-00001" num="00001">
<img id="EMI-C00001" he="31.67mm" wi="92.54mm" file="US07298739-20071120-C00001.TIF" alt="embedded image" img-content="table" img-format="tif"/>
</chemistry>
</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0099" num="0098">Bit <b>7</b> of the Link field is an even parity bit that covers bits <b>0</b>-<b>5</b> of the Link and Destination fields, and bits <b>0</b>-<b>7</b> of the Address and Data fields (the shaded areas in the table). It is not necessary for the processor to calculate the parity if it is not desired to check the bus between the arbiter and the processor. If the “Upif_Parity_En” (Microprocessor Interface Parity Enable) bit in the arbiter is set to ‘0’, the arbiter will not check the parity and will calculate its own even parity bit for the token before forwarding it to the rest of the system. When set to ‘1’, the arbiter will verify the parity is correct, if it is not, the arbiter will drop the token from the processor, and set “Parity_Err” bit in both the Token Interface Error Register and the High Priority Message Registers.</p>
<p id="p-0100" num="0099">When a reply comes back from the arbiter, it has the format given in Table 2. The Switch_Card bit indicates whether the communication came from the switch card or one of the port cards. The Link field indicates the link/port number that it came from if the communication came from a port card. The Source field indicates the CHIP_ID of the chip that the communication is coming from. The address and data fields correspond to the address of the register that was read from and the data that was read. Note that a reply does not have to be received before sending out other commands. Packets will usually only come in response to reads with the exception of information coming from the crossbars. Communication may also originate from the port cards, but not spontaneously from one of the chips due to any error conditions. This communication may be started by a port card processor through the MS.</p>
<p id="p-0101" num="0100">
<tables id="TABLE-US-00002" num="00002">
<table frame="none" colsep="0" rowsep="0" pgwide="1">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="266pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" rowsep="1">TABLE 2</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>Token Format Read From Arbiter</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry><chemistry id="CHEM-US-00002" num="00002">
<img id="EMI-C00002" he="31.67mm" wi="92.54mm" file="US07298739-20071120-C00002.TIF" alt="embedded image" img-content="table" img-format="tif"/>
</chemistry>
</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0102" num="0101">Bit <b>7</b> of the Link field in the data going back to the processor is an even parity bit that is calculated by the arbiter and can be used to verify the integrity of the data being read. This bit is calculated over the same bits described previously for the write case (the shaded areas in the table). Whether the parity bit is calculated or not is dependent on the setting of the “Upif_Parity_En” register. If Upif_Parity_En is not set (that is, it is “0”), then bit <b>7</b> will be set to “0”.</p>
<p id="p-0103" num="0102">To write to and read from the arbiter's own registers, the same format as described in the above two tables is used. The Switch_Card field would be set to ‘1’ and the Destination or Source field would be the CHIP_ID of the arbiter for a write or read respectively. When the Destination does not match the CHIP_ID of the arbiter or processor, the data would be placed on the token bus. When the processor writes something to a crossbar's register, it would do it the same way as writing to the arbiter's registers except that the Destination field would contain the CHIP_ID of the crossbar. The crossbars' CHIP_IDs need to be set according to which CONFIG_EN from the arbiter they are connected to. As shown in <figref idref="DRAWINGS">FIG. 8</figref>, the least significant three bits of a crossbar's CHIP_ID are set according to the number crossbar it is. The only limitation is that crossbar <b>0</b> must not have an all zero CHIP_ID. The format of the data sent on the switch card's token bus is shown in Table 3. The arbiter's processor interface has a CHIP_ID of zero such that a token message originated by it would have a Source Chip field set to zero.</p>
<p id="p-0104" num="0103">
<tables id="TABLE-US-00003" num="00003">
<table frame="none" colsep="0" rowsep="0" pgwide="1">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="266pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" rowsep="1">TABLE 3</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>Switch Card Token Bus Data Format</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry><chemistry id="CHEM-US-00003" num="00003">
<img id="EMI-C00003" he="31.67mm" wi="92.54mm" file="US07298739-20071120-C00003.TIF" alt="embedded image" img-content="table" img-format="tif"/>
</chemistry>
</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0105" num="0104">Bit <b>7</b> of the Source field of the token on the token bus contains even parity and covers bits <b>0</b>-<b>5</b> of bytes <b>0</b> and <b>1</b>, and bits <b>0</b>-<b>7</b> of bytes <b>2</b> and <b>3</b> (the shaded area in the table). Parity will be checked if Tkn_Parity_En in the Chip Configuration Registers is set to “1”. If the Tkn_Parity_En is not set (that is, Tkn_Parity_En is “0”), then parity will not be checked on incoming token messages, and the chip will place a zero in this bit <b>7</b>. If any chip finds that the parity does not match, that chip will then drop the token and set “Parity_Err” bit in both the Token Interface Error Register and the High Priority Message Registers.</p>
<p id="p-0106" num="0105">Bit <b>6</b> of the Source field contains the token Tag bit. The token Tag bit is used to prevent tokens with invalid source or destination fields from constantly circulating around the token bus. In order to use the tag feature, the arbiter is configured as the tagger by writing a ‘1’ to its “Tag_Tkn_En” (Tag Token Enable) bit in its chip configuration register. There can be only one tagger on a token bus. The tagger chip will set the this bit to ‘1’ whenever a token is relayed through it. If the tagger chip sees the Tag bit set to ‘1’ on a token that enters it (meaning the token has made a full circuit of the ring), it will proceed to drop that token, and the error is reported by setting bits in the arbiter's High Priority Message and Token Interface Error Registers.</p>
<p id="p-0107" num="0106">When the packet reaches the device whose CHIP_ID matches the Destination field and the action is a read, the receiving device will swap the Source and Destination fields and place the new data into the Data field. The device will clear the Tag bit. The new packet will then be sent to the next device in the ring and will propagate until it reaches the original source arbiter.</p>
<p id="p-0108" num="0107"><figref idref="DRAWINGS">FIG. 10</figref> is a timing diagram associated with a port card token bus.</p>
<p id="h-0013" num="0000">Switch Card to Port Card Communication</p>
<p id="p-0109" num="0108">The arbiters, as shown in <figref idref="DRAWINGS">FIGS. 6 and 8</figref>, have communication connections with all the port cards and their own token buses. An arbiter takes the incoming information from the processor and sends it to the correct port card (based on the Link field) and PQ embedded in a bid acceptance packet. A bid acceptance packet has the format shown in Table 4.</p>
<p id="p-0110" num="0109">
<tables id="TABLE-US-00004" num="00004">
<table frame="none" colsep="0" rowsep="0" pgwide="1">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="336pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" rowsep="1">TABLE 4</entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>Data in a Grant Frame (Arbiter to PQ)</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="4">
<colspec colname="1" colwidth="21pt" align="left"/>
<colspec colname="2" colwidth="49pt" align="left"/>
<colspec colname="3" colwidth="217pt" align="left"/>
<colspec colname="4" colwidth="49pt" align="left"/>
<tbody valign="top">
<row>
<entry>Byte</entry>
<entry/>
<entry/>
<entry>Enabling</entry>
</row>
<row>
<entry>No.</entry>
<entry>Byte</entry>
<entry>Description</entry>
<entry>Conditions</entry>
</row>
<row>
<entry namest="1" nameend="4" align="center" rowsep="1"/>
</row>
<row>
<entry>0</entry>
<entry>0xBC</entry>
<entry>[7:0]: DLS (K28.5): Marks the start of a normal grant frame</entry>
<entry>Normal</entry>
</row>
<row>
<entry/>
<entry>0x3C</entry>
<entry>[7:0]: LS0 (K28.1): Clears PQ grant counters if a synchronization</entry>
<entry>Resync</entry>
</row>
<row>
<entry/>
<entry/>
<entry>adjustment is needed. If an LS0 is sent for resync in a grant</entry>
</row>
<row>
<entry/>
<entry/>
<entry>frame, then the following grant frame will start with LS0E</entry>
</row>
<row>
<entry/>
<entry/>
<entry>and contain the actual bid counter offsets.</entry>
</row>
<row>
<entry/>
<entry>0xFE</entry>
<entry>[7:0]: LS0E (K29.7): Gives offsets for PQ bid counters for next</entry>
<entry>Resync</entry>
</row>
<row>
<entry/>
<entry/>
<entry>rollover. An iPQ on each port card each receives its own offset</entry>
</row>
<row>
<entry/>
<entry/>
<entry>adjustments (byte, link, and STS) in bytes 5 and 6.</entry>
</row>
<row>
<entry>1</entry>
<entry>Grant[0][7:0]</entry>
<entry>[7:0]: Grants for output ports 7:0</entry>
</row>
<row>
<entry>2</entry>
<entry>Grant[1][7:0]</entry>
<entry>[7:0]: Grants for output ports 15:8</entry>
</row>
<row>
<entry>3</entry>
<entry>Grant[2][7:0]</entry>
<entry>[7:0]: Grants for output ports 23:16</entry>
</row>
<row>
<entry>4</entry>
<entry>Grant[3][7:0]</entry>
<entry>[7:0]: Grants for output ports 31:24</entry>
</row>
<row>
<entry>5</entry>
<entry>“In-Band Data”</entry>
<entry>[7:2]: DST[5:0]<sup>2 </sup>- Token destination chip</entry>
<entry>Byte 0 ≠</entry>
</row>
<row>
<entry/>
<entry>D0[7:0]</entry>
<entry>[1]: SysComm parity<sup>1 </sup>(for D0[7:2], D1[7:0], and D2[7:0])</entry>
<entry>LS0E</entry>
</row>
<row>
<entry/>
<entry/>
<entry>[0]: Grant parity<sup>1 </sup>(for bytes 1, 2, 3, and 4)</entry>
</row>
<row>
<entry/>
<entry/>
<entry>[7:4]: Byte offset, 0 to 15, for resync.</entry>
<entry>Byte 0 =</entry>
</row>
<row>
<entry/>
<entry/>
<entry>[3:2]: Reserved</entry>
<entry>LS0E</entry>
</row>
<row>
<entry/>
<entry/>
<entry>[1]: SysComm parity<sup>1 </sup>(for D0[7:2], D1[7:0], and D2[7:0])</entry>
</row>
<row>
<entry/>
<entry/>
<entry>[0]: Grant parity<sup>1 </sup>(for bytes 1, 2, 3, and 4)</entry>
</row>
<row>
<entry>6</entry>
<entry>“In-Band Data”</entry>
<entry>[7:0]: ADR[7:0] - Token address</entry>
<entry>DST[5:0]<sup>2 </sup>≠ 0</entry>
</row>
<row>
<entry/>
<entry>D1[7:0]</entry>
<entry>Level 1 XON/XOFF flow control - This byte is an echo of byte 8 of</entry>
<entry>DST[5:0]<sup>2 </sup>= 0</entry>
</row>
<row>
<entry/>
<entry/>
<entry>the bid frame. The Arbiter broadcasts this info to all iPQs. All iPQs then</entry>
</row>
<row>
<entry/>
<entry/>
<entry>stop scheduling packets to the specified Out_Port (byte 7, bits 6:2),</entry>
</row>
<row>
<entry/>
<entry/>
<entry>Out_Ch, and COS.</entry>
</row>
<row>
<entry/>
<entry/>
<entry>[7:6]: Control:</entry>
</row>
<row>
<entry/>
<entry/>
<entry>00 = NOP (mask not valid),</entry>
</row>
<row>
<entry/>
<entry/>
<entry>01 = Apply COSQ mask to COSQ[3:0],</entry>
</row>
<row>
<entry/>
<entry/>
<entry>10 = Apply COSQ mask to COSQ[7:4],</entry>
</row>
<row>
<entry/>
<entry/>
<entry>11 = Apply COSQ mask to COSQ[7:4] and COSQ[3:0]</entry>
</row>
<row>
<entry/>
<entry/>
<entry>[5:4]: Out_Ch</entry>
</row>
<row>
<entry/>
<entry/>
<entry>[3:0]: COSQ mask: ‘0’ = XON, ‘1’ = XOFF</entry>
</row>
<row>
<entry/>
<entry/>
<entry>[7:5]: Link offset, 0 to 4, for resync.</entry>
<entry>Byte 0 =</entry>
</row>
<row>
<entry/>
<entry/>
<entry>[4:0]: STS offset, 0 to 23, for resync.</entry>
<entry>LS0E</entry>
</row>
<row>
<entry>7</entry>
<entry>“In-Band Data”</entry>
<entry>[7:0]: DAT[7:0] - Token data</entry>
<entry>DST[5:0]<sup>2 </sup>≠ 0</entry>
</row>
<row>
<entry/>
<entry>D2[7:0]</entry>
<entry>[7]: CBFC_ACKo, for BP_CBFC state change acknowledge, used</entry>
<entry>DST[5:0]<sup>2 </sup>= 0</entry>
</row>
<row>
<entry/>
<entry/>
<entry>only in BP_CBFC resync. Sent once, only to the port specified in</entry>
</row>
<row>
<entry/>
<entry/>
<entry>CBFC_ACKi[5:0] in byte 9 of the bid frame.</entry>
</row>
<row>
<entry/>
<entry/>
<entry>[6:2]: COS_XOFF Out_Port (for Level 1 XOFF flow control in byte 6).</entry>
</row>
<row>
<entry/>
<entry/>
<entry>Sent to all attached iPQs.</entry>
</row>
<row>
<entry/>
<entry/>
<entry>[1]: TDM_Switch trigger for the next STS rollover. If this Arbiter is the</entry>
</row>
<row>
<entry/>
<entry/>
<entry>primary Arbiter and the switch command occurs, this bit is</entry>
</row>
<row>
<entry/>
<entry/>
<entry>activated and set to all attached iPQs.</entry>
</row>
<row>
<entry/>
<entry/>
<entry>[0]: Reserved</entry>
</row>
<row>
<entry>8-15</entry>
<entry>CR0[7:0]</entry>
<entry>Credit matrix for credit-based flow control. Matrix format depends on</entry>
</row>
<row>
<entry/>
<entry>thru CR7[7:0]</entry>
<entry>the following switch fabric configuration parameters:</entry>
</row>
<row>
<entry/>
<entry/>
<entry>Total number of ports in the switch fabric</entry>
</row>
<row>
<entry/>
<entry/>
<entry>Number of channels per port</entry>
</row>
<row>
<entry/>
<entry/>
<entry>Number of subchannels per channel</entry>
</row>
<row>
<entry namest="1" nameend="4" align="center" rowsep="1"/>
</row>
<row>
<entry namest="1" nameend="4" align="left" id="FOO-00001"><sup>1</sup>Even parity: When the parity bit and the protected field(s) are considered together, there will be an even number of bits equal to ‘1’.</entry>
</row>
<row>
<entry namest="1" nameend="4" align="left" id="FOO-00002"><sup>2</sup>Note that when the DST[5:0] field is zero, then bytes 6 and 7 are used for flow control.</entry>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0111" num="0110">Bytes <b>5</b> through <b>7</b> of the bid acceptance packet are used for passing the token packets from the switch card to port card. The information that was written to the arbiter by the processor is simply placed into the bid acceptance packet when a slot is available. Bytes <b>5</b> through <b>7</b> of the bid acceptance packet are shared by two sources, processor communications and flow control communication. The priority between these two sources is programmable. The first chip to receive any information on the port card from the switch cards is the Priority Queue.</p>
<p id="h-0014" num="0000">Port Cards</p>
<p id="p-0112" num="0111">The S8005 series chips on each port card form a token bus as shown in <figref idref="DRAWINGS">FIG. 6</figref>. Entry points into the token bus are provided by the S8505 PQ and the S8905 MS. The MS interface will be discussed later. Each S8505 PQ can receive communications from up to 8 switching cards. The attached switch cards commonly represent two banks of two channels (two channel port card), or four channels depending on the selected port card and backplane organization.</p>
<p id="p-0113" num="0112">Each chip in the token bus has its own 6-bit CHIP_ID. None of the chips should have its CHIP_ID set as 0 since 0 is used to identify flow control communication between the PQ and arbiter. Each PQ has nine chip IDs. The first, CHIP_ID is the ID for the PQ corresponding to the settings of the CHIP_ID pins. The second, CHIP_ID+1, gives an address to the PQ's Arbiter OA interface. CHIP_ID+2 gives an address to the PQ's Arbiter 0B interface. This continues to CHIP_ID+8 for the PQ's Arbiter 3B interface. Having an address for each arbiter interface allows the return packet to be sent back to the correct arbiter. There is no required ordering of the chips in the token bus since if a communication packet is not intended for a chip, it is simply passed to the next chip.</p>
<p id="p-0114" num="0113">A PQ is always the first chip to receive a communication packet from a switch card. If the packet is meant for it, it immediately responds back to the sending arbiter without placing anything on the token bus. If the packet is not meant for it, the PQ will translate the packet into the format shown in Table 5. The Address, Data, and Destination fields are copied directly from the arbiter packet. The “Source Chip” is set to the CHIP_ID of the arbiter interface that the PQ received the communication from. For example, if the PQ received the token from arbiter <b>1</b>B, “Source Chip” would be set to “3”. The switch card processors technically can pass messages to each other via the PQs, since each arbiter has its own implied CHIP_ID. This method of communicating between switch cards is not inefficient. An Ethernet interface may be used for switch card to switch card, and switch card to system card communications.</p>
<p id="p-0115" num="0114">
<tables id="TABLE-US-00005" num="00005">
<table frame="none" colsep="0" rowsep="0" pgwide="1">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="266pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" rowsep="1">TABLE 5</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>Port Card token bus Data Format</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry><chemistry id="CHEM-US-00004" num="00004">
<img id="EMI-C00004" he="31.67mm" wi="92.54mm" file="US07298739-20071120-C00004.TIF" alt="embedded image" img-content="table" img-format="tif"/>
</chemistry>
</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0116" num="0115">Bit <b>7</b> of the Source field of the token contains even parity and covers bits [5:0] of bytes <b>0</b> and <b>1</b>, and bits [7:0] of bytes <b>2</b> and <b>3</b> (the shaded area in the table). Bit <b>6</b> of the Source field contains the Tag bit. The Tag bit is used to prevent tokens with invalid source or destination fields from constantly circulating around the token bus. In order to use the tag feature, one of the MSs on the port card token bus is configured as a Tagger by writing a ‘1’ to its “Tag_Tkn_En” (Tag Token Enable) bit. The Tagger will set the Tag bit to ‘1’ whenever a token is relayed through it. If the Tagger sees the Tag bit set to ‘1’ on a token that enters it (meaning the token has made a full circuit of the ring), it will proceed to drop that token.</p>
<p id="p-0117" num="0116">When the packet reaches the device whose CHIP_ID matches the Destination field and the action is a read, the receiving device will swap the Source and Destination fields and place the new data into the Data field. The device will clear the Tag bit. The new packet will then be sent to the next device in the ring and will propagate until it reaches the original source PQ. The functional timing for the token passing is shown in <figref idref="DRAWINGS">FIG. 10</figref>. The communication between chips in the token bus occurs at the SYS_CLK rate with all events occurring on the rising edge.</p>
<p id="p-0118" num="0117">The downstream chip in the token bus would hold the TKN_TX_REQ (Token Transmit Request) input on the upstream device active to indicate that it can receive a transmission. Once the upstream device has something to transmit, it will pulse its TKN_TX_ACK (Token Transmit Acknowledge) output and simultaneously begin sending the data, beginning with the Source chip ID as shown in <figref idref="DRAWINGS">FIG. 10</figref>. The TKN_TX_REQ remains active as long as the downstream device can receive more tokens. Once deasserted, the TKN_TX_REQ will remain inactive until the downstream device is ready to receive another token.</p>
<p id="p-0119" num="0118">The MS has a processor hardware interface that is identical to that of the arbiter described previously. The processor-to-MS write and read data formats are shown in Table 6.</p>
<p id="p-0120" num="0119">
<tables id="TABLE-US-00006" num="00006">
<table frame="none" colsep="0" rowsep="0" pgwide="1">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="266pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" rowsep="1">TABLE 6</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>Write and Read Data Format for Microprocessor to Memory</entry>
</row>
<row>
<entry>Subsystem Interface</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry><chemistry id="CHEM-US-00005" num="00005">
<img id="EMI-C00005" he="31.67mm" wi="92.54mm" file="US07298739-20071120-C00005.TIF" alt="embedded image" img-content="table" img-format="tif"/>
</chemistry>
</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0121" num="0120">The even parity bit, if enabled by setting the “Upif_Par_En” register bit, covers bits <b>0</b>-<b>5</b> of byte <b>1</b>, and all the bits of bytes <b>2</b> and <b>3</b> (the shaded area in the table).</p>
<p id="p-0122" num="0121">For the processor to write to the port card token bus, it would simply provide the information required in Table 6. In order to write to or read from a register in the MS, the Destination field would be set to the MS's CHIP_ID. Data can be sent to a switch card processor by setting the Destination field to the ID of one of the PQ's arbiter interfaces.</p>
<p id="p-0123" num="0122"><figref idref="DRAWINGS">FIG. 11</figref> is a schematic block diagram depicting the MS control interface. The MS can receive information from three possible sources, as shown. Control data can enter via the token bus, the processor interface, or inband in the cell traffic (when using ViX cell format).</p>
<p id="p-0124" num="0123">Each message source has its own independent FIFOs to avoid any collisions. The message sources have relative priorities. Inband messages passing through the cell processor have the highest priority. Reads from and writes to the MS's registers have the next highest level. The token bus has the third highest priority, followed by the local processor. No matter what the source of a message is, it must have the required fields (Destination, Address, and Data) defined in Table 6 such that it can be sent to the correct destination by the Token Processor. Any point can communicate with any other point through the MS. The local processor can access the traffic manager through the cell processor, the token bus, and the internal registers. The traffic manager can access the processor, the token bus, and internal registers. Through the token bus, communication with the switch card processors is possible.</p>
<p id="p-0125" num="0124"><figref idref="DRAWINGS">FIG. 12</figref> illustrates the MS IDs. The MS, similar to the PQ, has several IDs, as shown. If incoming traffic has a destination ID that does not correspond to any of the MS's IDs, the MS will then forward that traffic to the token bus. The ID of the processor interface on the MS is equal to the MS's CHIP_ID+1. The cell processor block has four processor programmable inband ID's, each corresponding to one of the four possible input channels. Inband data can use the MS as a relay point between multiple traffic managers by setting the destination field equal to that of the desired egress channel. The EG_InBandDest in the iMS must be programmed with the same EG_In_BandDest values as the eMS. The iMS will insert this value into the Source Chip field for the corresponding Cell Processor Block Channel ID. If the destination field is equal to the source field for inband traffic, that token would then be sent out on the egress side of the channel that originated it.</p>
<p id="h-0015" num="0000">Port Card to Switch Card Communication</p>
<p id="p-0126" num="0125">Once a packet destined for leaving the port card arrives at its destination PQ, the contents are placed into a bid packet of the format shown in Table 7 for transmission to the appropriate arbiter. The contents of the token packet are placed one for one into the bid packet (except the Destination Chip field is dropped). The arbiter would receive this information and translate it into the format shown in Table 2 for transmission out the processor interface.</p>
<p id="p-0127" num="0126">
<tables id="TABLE-US-00007" num="00007">
<table frame="none" colsep="0" rowsep="0" pgwide="1">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="441pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" rowsep="1">TABLE 7</entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>Data in a Bid Frame (iPQ to Arbiter)</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="4">
<colspec colname="1" colwidth="28pt" align="left"/>
<colspec colname="2" colwidth="42pt" align="left"/>
<colspec colname="3" colwidth="322pt" align="left"/>
<colspec colname="4" colwidth="49pt" align="left"/>
<tbody valign="top">
<row>
<entry>Byte</entry>
<entry>Byte</entry>
<entry/>
<entry>Enabling</entry>
</row>
<row>
<entry>No.</entry>
<entry>Contents</entry>
<entry>Description</entry>
<entry>Conditions</entry>
</row>
<row>
<entry namest="1" nameend="4" align="center" rowsep="1"/>
</row>
<row>
<entry>0</entry>
<entry>0xBC</entry>
<entry>[7:0]: DLS (K28.5): Marks the start of a normal bid frame</entry>
<entry>Normal</entry>
</row>
<row>
<entry/>
<entry>0x3C</entry>
<entry>[7:0]: LS0 (K28.1): Marks (STS0, Link 0, Byte 0) in PQ's bid counters. Sent to all Arbiters.</entry>
<entry>STS</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>rollover</entry>
</row>
<row>
<entry>1</entry>
<entry>Bid[0][7:0]</entry>
<entry>[7:0]: Bids for output ports 7:0</entry>
</row>
<row>
<entry>2</entry>
<entry>Bid[1][7:0]</entry>
<entry>[7:0]: Bids for output ports 15:8</entry>
</row>
<row>
<entry>3</entry>
<entry>Bid[2][7:0]</entry>
<entry>[7:0]: Bids for output ports 23:16</entry>
</row>
<row>
<entry>4</entry>
<entry>Bid[3][7:0]</entry>
<entry>[7:0]: Bids for output ports 31:24</entry>
</row>
<row>
<entry>5</entry>
<entry>Unlock[7:0]</entry>
<entry>[7:4]: Reserved</entry>
</row>
<row>
<entry/>
<entry/>
<entry>[3:0]: Unlock[3:0] - 0′ = link locked, ‘1’ = link unlocked. Applies to iMS-to-Crossbar links. With a packet</entry>
</row>
<row>
<entry/>
<entry/>
<entry>in progress, a link is “locked,” unavailable for new packets. The unlock belongs to the Crossbar of a</entry>
</row>
<row>
<entry/>
<entry/>
<entry>bid frame in the bid link cycle. There can be 1, 2, or 4 unlocks in the field Unlock[3:0] depending on</entry>
</row>
<row>
<entry/>
<entry/>
<entry>the Crossbar format (32×32, 16×16, or 8×8).</entry>
</row>
<row>
<entry>6</entry>
<entry>Parity[7:0]</entry>
<entry>[7:6]: Reserved</entry>
</row>
<row>
<entry/>
<entry/>
<entry>[5:2]: EPM[3:0] - Egress port mask. Applies to Crossbar-to-eMS link(s). Format similar to Unlock[3:0] for</entry>
</row>
<row>
<entry/>
<entry/>
<entry>32×32, 16×16 or 8×8 Crossbar format. Indicates PXOFF or link failure:</entry>
</row>
<row>
<entry/>
<entry/>
<entry>PXOFF - Based on Q_MS_PXOFF asserted by oPQ or EDFQ, forwarded to iPQ by the eMS, and</entry>
</row>
<row>
<entry/>
<entry/>
<entry>then broadcast by the iPQ to all attached Arbiters.</entry>
</row>
<row>
<entry/>
<entry/>
<entry>Failed XBAR-to-eMS link - Based on MS2Q_LINK_FC, from eMS to iPQ. If a crossbar-to-eMS</entry>
</row>
<row>
<entry/>
<entry/>
<entry>link fails, the iPQ sets one of these bits in the bid link cycle corresponding to the timeslot of the</entry>
</row>
<row>
<entry/>
<entry/>
<entry>affected crossbar. It is sent to that crossbar's Arbiter only.</entry>
</row>
<row>
<entry/>
<entry/>
<entry>[1]: SysComm parity<sup>1 </sup>(for D0[7:2], D1[7:0], and D2[7:0])</entry>
</row>
<row>
<entry/>
<entry/>
<entry>[0]: Unlock parity<sup>1 </sup>(for U[7:0])</entry>
</row>
<row>
<entry>7</entry>
<entry>“In-Band</entry>
<entry>[7:2]: SRC[5:0]<sup>2 </sup>- Token source chip ID</entry>
</row>
<row>
<entry/>
<entry>Data”</entry>
<entry>[1:0]: Reserved</entry>
</row>
<row>
<entry/>
<entry>D0[7:0]</entry>
</row>
<row>
<entry>8</entry>
<entry>“In-Band</entry>
<entry>[7:0]: ADR[7:0] - Token address</entry>
<entry>SRC[5:0]<sup>2 </sup>≠</entry>
</row>
<row>
<entry/>
<entry>Data”</entry>
<entry/>
<entry>0</entry>
</row>
<row>
<entry/>
<entry>D1[7:0]</entry>
<entry>Level 1 XON/XOFF - Whenever there is a change of state in MS2Q_COS_XOFF[9:0], the iPQ will send</entry>
<entry>SRC[5:0]<sup>2 </sup>=</entry>
</row>
<row>
<entry/>
<entry/>
<entry>these 8 bits to one Arbiter, selected by round robin, which will then broadcast the byte to all iPQs in Grant</entry>
<entry>0</entry>
</row>
<row>
<entry/>
<entry/>
<entry>byte 6.</entry>
</row>
<row>
<entry/>
<entry/>
<entry>[7:6]: Control:</entry>
</row>
<row>
<entry/>
<entry/>
<entry>00 = NOP (mask not valid),</entry>
</row>
<row>
<entry/>
<entry/>
<entry>01 = Apply COSQ mask to COSQ[3.0],</entry>
</row>
<row>
<entry/>
<entry/>
<entry>10 = Apply COSQ mask to COSQ[7:4],</entry>
</row>
<row>
<entry/>
<entry/>
<entry>11 = Apply COSQ mask to COSQ[7:4] and COSQ[3:0]</entry>
</row>
<row>
<entry/>
<entry/>
<entry>[5:4]: Out_Ch</entry>
</row>
<row>
<entry/>
<entry/>
<entry>[3:0]: COSQ mask: ‘0’ = XON, ‘1’ = XOFF</entry>
</row>
<row>
<entry>9</entry>
<entry>“In-Band</entry>
<entry>[7:0]: DAT[7:0] - Token data</entry>
<entry>SRC[5:0]<sup>2 </sup>≠</entry>
</row>
<row>
<entry/>
<entry>Data”</entry>
<entry/>
<entry>0</entry>
</row>
<row>
<entry/>
<entry>D2[7:0]</entry>
<entry>[7:2]: CBFC_ACKi[5:0] - BP_CBFC state change acknowledge, used only in BP_CBFC resync. Encoded</entry>
<entry>SRC[5:0]<sup>2 </sup>=</entry>
</row>
<row>
<entry/>
<entry/>
<entry>port # and valid (MSB) are sent to one Arbiter, selected by round robin. This Arbiter will decode</entry>
<entry>0</entry>
</row>
<row>
<entry/>
<entry/>
<entry>CBFC_ACKi[5:0] and set a single bit, CBFC_ACKo, in byte 7 of grant frame to the correct iPQ.</entry>
</row>
<row>
<entry/>
<entry/>
<entry>[1]: TDM_Switch. Broadcast to all Arbiters when Grant byte 7, bit 1 is set; or when the input</entry>
</row>
<row>
<entry/>
<entry/>
<entry>Q2Q_TDM_SW (from the other iPQ on a port card with 2 iPQs) is set.</entry>
</row>
<row>
<entry/>
<entry/>
<entry>[0]: PLE - Permanent link error. Sent only to the affected Arbiter. If set to ‘1’, the Arbiter will stop using</entry>
</row>
<row>
<entry/>
<entry/>
<entry>this grant link.</entry>
</row>
<row>
<entry>10-</entry>
<entry>CR0[7:0]</entry>
<entry>Credit matrix for credit-based flow control. Matrix format depends on the following switch fabric</entry>
</row>
<row>
<entry>15</entry>
<entry>thru</entry>
<entry>configuration parameters such as the number of ports, channels, and subchannels</entry>
</row>
<row>
<entry/>
<entry>CR5[7:0]</entry>
</row>
<row>
<entry namest="1" nameend="4" align="center" rowsep="1"/>
</row>
<row>
<entry namest="1" nameend="4" align="left" id="FOO-00003"><sup>1</sup>Even parity: When the parity bit and the protected field(s) are considered together, there will be an even number of bits equal to ‘1’.</entry>
</row>
<row>
<entry namest="1" nameend="4" align="left" id="FOO-00004"><sup>2</sup>Note that when the SRC[5:0] field is zero, then bytes 8 and 9 are used for flow control.</entry>
</row>
</tbody>
</tgroup>
</table>
</tables>
<br/>
Token Bus In-Band Data Bandwidth
</p>
<p id="p-0128" num="0127">The token bus can carry other control data, for example, downloading configuration information to the Cyclone chips on port cards, and returning register data from Cyclone chips on the port cards. Data from switch cards to port cards are carried in the Bid/Accept frames exchanged between the arbiters on the switch cards and PQs on the port cards.</p>
<p id="p-0129" num="0128">Data is sent to port cards in the “In-Band Data” D2 byte of an Accept frame. Data from port cards is returned in the “In-Band Data” D2 in the Bid frame. This section describes the estimated bandwidth that can be expected to be available for data.</p>
<p id="h-0016" num="0000">Token Bus Bandwidth Across the Backplane.</p>
<p id="p-0130" num="0129">The available bandwidth for in-band data between the Arbiter and PQ is approximately 125 Mbps, according to the following formula:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>[1 token/Frame between Arb and PQ]*[1 Frame/64 ns]*[8 bits data/token]=125 Mbps.<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0131" num="0130">This is the theoretical maximum in-band data bandwidth across the backplane serial links between an arbiter and a PQ. This assumes that there are no COS collisions or high-priority tokens.</p>
<p id="h-0017" num="0000">Token Bus Bandwidth Between Cyclone Chips.</p>
<p id="p-0132" num="0131">Available bandwidth on the token bus between Cyclone chips on a card is given by the following formula:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>[1 token/4 cycles]*[1 cycle/8 ns]*[8 bits data/token]=250 Mbps.<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
Bandwidth Between Microprocessor and μP Interface
</p>
<p id="p-0133" num="0132">The bandwidth that can be expected at the uP interface in DMA and Burst mode and assuming no other activity:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>[4 tokens/8 cycles]*[8 bits data/token]*33 MHz=132 Mbps.<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
(Note: processor bus frequency assumed to be 33 MHz).
</p>
<p id="p-0134" num="0133">The bandwidth across the backplane is the limiting factor, assuming the processor can keep up and that the fabric is not running traffic. In the case where the fabric is running traffic, flow control messages will be time sharing the links between the PQs and arbiters, which will decrease the throughput to an estimated 75 Mbps.</p>
<p id="p-0135" num="0134"><figref idref="DRAWINGS">FIGS. 13</figref><i>a </i>and <b>13</b><i>b </i>are flowcharts illustrating the present invention method for communicating control information in a switch fabric. Although the method is depicted as a sequence of numbered steps for clarity, no order should be inferred from the numbering unless explicitly stated. It should be understood that some of these steps may be skipped, performed in parallel, or performed without the requirement of maintaining a strict order of sequence. The method starts at Step <b>500</b>.</p>
<p id="p-0136" num="0135">Step <b>502</b>, on a switch card, establishes a plurality of crossbars controlled by an arbiter. Step <b>504</b> initiates a control message. Step <b>506</b> distributes the control message on a switch card token bus connecting the crossbars and arbiter elements. In some aspects of the method, distributing the control message on a switch card token bus connecting the crossbar and arbiter elements includes daisy-chain connecting the elements with a cyclical bus.</p>
<p id="p-0137" num="0136">In other aspects, establishing a plurality of crossbars controlled by an arbiter in Step <b>502</b> includes identifying each element with a unique address, and initiating a control message in Step <b>504</b> includes initiating a control message with an attached address. Then, distributing the control message on a switch card token bus connecting the crossbar and arbiter elements in Step <b>506</b> includes substeps. Step <b>506</b><i>a </i>daisy-chain passes the control message between elements. Step <b>506</b><i>b </i>terminates the message at an element having an address matching the address attached to the control message.</p>
<p id="p-0138" num="0137">In other aspects, distributing the control message on a switch card token bus connecting the crossbar and arbiter elements in Step <b>506</b> includes additional substeps. In Step <b>506</b><i>c </i>the arbiter attaches a switch card tag to transmitted messages being distributed on the token bus. Then, in Step <b>506</b><i>d </i>the arbiter terminates received messages being distributed on the token bus having switch card tags. In some aspects, Step <b>506</b><i>d </i>includes substeps. Step <b>506</b><i>c </i>checks the token parity. Step <b>506</b><i>d</i><b>2</b> terminates the control message if the parity is wrong. Step <b>506</b><i>d</i><b>3</b> sets a register to indicate that a control message has been terminated in response to a failed parity check.</p>
<p id="p-0139" num="0138">Some aspects of the method include further steps. Step <b>508</b>, on a port card, establishes a memory subsystem (MS) controlled by a queuing/scheduling (QS) device, such as a priority queue (PQ), an earliest deadline first queue (EDFQ), or a field programmable gate array (FPGA). Step <b>510</b> initiates a control message. Step <b>512</b> distributes the control message (see Step <b>504</b>) on a port card token bus connecting the MS and the QS device elements.</p>
<p id="p-0140" num="0139">In some aspects, establishing a MS controlled by a QS device on a port card in Step <b>508</b> includes establishing an ingress MS (iMS) controlled by an ingress QS (iQS) and an egress MS (eMS) controlled by an egress QS (oQS) device. Then, distributing the control message on a port card token bus connecting the MS and QS device elements in Step <b>512</b> includes daisy-chain connecting the iQS, iMS, oQS, and eMS elements with a cyclical bus.</p>
<p id="p-0141" num="0140">In other aspects, establishing an MS controlled by a QS device in Step <b>508</b> includes identifying each element with a unique address. Initiating a control message in Step <b>510</b> includes initiating a control message with an attached address. Then, distributing the control message on a port card token bus connecting the MS and QS device elements in Step <b>512</b> includes substeps. Step <b>512</b><i>a </i>daisy-chain passes the control message between elements. Step <b>512</b><i>b </i>terminates the message at an element having an address matching the address attached to the control message.</p>
<p id="p-0142" num="0141">In some aspects, distributing the control message on a port card token bus connecting the MS and QS device elements in Step <b>512</b> includes additional substeps. In Step <b>512</b><i>c </i>the MS attaches a port card tag to transmitted messages being distributed on the token bus. In Step <b>512</b><i>d </i>the MS terminates received messages being distributed on the token bus having port card tags. In some aspects Step <b>512</b><i>d </i>includes substeps. Step <b>512</b><i>d</i><b>1</b> checks the token parity. Step <b>512</b><i>d</i><b>2</b> terminates the control message if the parity is wrong. Step <b>512</b><i>d</i><b>3</b> sets a register to indicate that a control message has been terminated in response to a failed parity check.</p>
<p id="p-0143" num="0142">Some aspects of the method include a further step, Step <b>514</b> of communicating control messages between the switch card arbiter and the port card QS device. In one aspect, Step <b>514</b> includes sending a control message from the arbiter to the QS device. Then, distributing the control message on a port card token bus connecting the MS and the QS device in Step <b>512</b> includes distributing the message received from the arbiter on the port card token bus.</p>
<p id="p-0144" num="0143">In other aspects, initiating a control message in Step <b>504</b> includes substeps. Step <b>504</b><i>a </i>initiates a control message from a switch card processor. Step <b>504</b><i>b </i>transmits the control message from the processor to the arbiter. In some aspects, initiating a control message from the switch card processor in Step <b>504</b><i>a </i>includes initiating control message such as requests to the arbiter concerning the status of received QS device control links, requests to the crossbars concerning the status of interfacing data links, requests to the QS device concerning the status of the QS device and the status of received arbiter control links, requests to MSs concerning MS status and the status of received data links, switch card configuration commands, and port card configuration commands.</p>
<p id="p-0145" num="0144">In one aspect, initiating a control message in Step <b>504</b> includes a crossbar initiating a control message in response to backplane data link interface fault. Then, distributing the control message on a switch card token bus connecting the crossbars and arbiter elements in Step <b>506</b> includes passing the control message from the crossbar to the arbiter. Then, the method comprises a further step, Step <b>507</b>. Step <b>507</b> includes a switch card processor polling the arbiter to collect the control message.</p>
<p id="p-0146" num="0145">In other aspects, communicating control messages between the switch card arbiter and the port card QS device in Step <b>514</b> includes sending a control message from the QS device to the arbiter.</p>
<p id="p-0147" num="0146">In some aspects, communicating control messages between the switch card arbiter and the port card QS device in Step <b>514</b> includes communicating control messages between a plurality of switch cards and a plurality of port cards. In other aspects, Step <b>514</b> includes communicating control messages from a first switch card to a second switch card, through an intervening port card.</p>
<p id="p-0148" num="0147">A system and method has been provided for communicating control information in a switch fabric using port card and switch card token buses, and control links between the switch cards and port cards. Some specific exampled have been given of the types of control communications that be established using the present invention token bus. However, it should be understood that the present invention is not limited to just these examples. Other variations and embodiments of the inventions will occur to those skilled in the art.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-chemistry idref="CHEM-US-00001" cdx-file="US07298739-20071120-C00001.CDX" mol-file="US07298739-20071120-C00001.MOL"/>
<us-chemistry idref="CHEM-US-00002" cdx-file="US07298739-20071120-C00002.CDX" mol-file="US07298739-20071120-C00002.MOL"/>
<us-chemistry idref="CHEM-US-00003" cdx-file="US07298739-20071120-C00003.CDX" mol-file="US07298739-20071120-C00003.MOL"/>
<us-chemistry idref="CHEM-US-00004" cdx-file="US07298739-20071120-C00004.CDX" mol-file="US07298739-20071120-C00004.MOL"/>
<us-chemistry idref="CHEM-US-00005" cdx-file="US07298739-20071120-C00005.CDX" mol-file="US07298739-20071120-C00005.MOL"/>
<us-claim-statement>We claim:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method for communicating control information in a switch fabric, the method comprising:
<claim-text>on a switch card, establishing a plurality of crossbars controlled by an arbiter and identifying each element with a unique address;</claim-text>
<claim-text>initiating a control message with an attached address;</claim-text>
<claim-text>distributing the control message on a switch card token bus daisy-chain connecting the crossbars and arbiter elements with a cyclic bus as follows:
<claim-text>daisy-chain Passing the control message between elements; and,</claim-text>
<claim-text>terminating the message at an element having an address matching the address attached to the control message.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein distributing the control message on a switch card token bus connecting the crossbar and arbiter elements includes the arbiter attaching a switch card tag to transmitted messages being distributed on the token bus.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref> wherein distributing the control message on a switch card token bus connecting the crossbar and arbiter elements includes the arbiter terminating received messages being distributed on the token bus having switch card tags.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref> wherein the arbiter terminating received messages being distributed on the token bus having switch card tags includes:
<claim-text>checking the token parity;</claim-text>
<claim-text>terminating the control message if the parity is wrong; and,</claim-text>
<claim-text>setting a register to indicate that a control message has been terminated in response to a failed parity check.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref> further comprising:
<claim-text>on a port card, establishing a memory subsystem (MS) controlled by a queuing/scheduling (QS) device selected from the group including a priority queue (PQ), an earliest deadline first queue (EDFQ), and a field programmable gate array (FPGA); and,</claim-text>
<claim-text>distributing the control message on a port card token bus connecting the MS and the QS device elements.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref> wherein establishing a MS controlled by a QS device on a port card includes establishing an ingress MS (iMS) controlled by an ingress QS (iQS) and an egress MS (eMS) controlled by an egress QS (oQS) device; and,
<claim-text>wherein distributing the control message on a port card token bus connecting the MS and QS device elements includes daisy-chain connecting the iQS, iMS, oQS, and eMS elements with a cyclical bus.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref> wherein establishing an MS controlled by a QS device includes identifying each element with a unique address; and,
<claim-text>wherein initiating a control message includes initiating a control message with an attached address; and,</claim-text>
<claim-text>wherein distributing the control message on a port card token bus connecting the MS and QS device elements includes:</claim-text>
<claim-text>daisy-chain passing the control message between elements; and,</claim-text>
<claim-text>terminating the message at an element having an address matching the address attached to the control message.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref> wherein distributing the control message on a port card token bus connecting the MS and QS device elements includes the MS attaching a port card tag to transmitted messages being distributed on the token bus.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref> wherein distributing the control message on a port card token bus connecting the MS and QS device elements includes the MS terminating received messages being distributed on the token bus having port card tags.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref> wherein the MS terminating received messages being distributed on the token bus having port card tags includes:
<claim-text>checking the token parity;</claim-text>
<claim-text>terminating the control message if the parity is wrong; and,</claim-text>
<claim-text>setting a register to indicate that a control message has been terminated in response to a failed parity check.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref> further comprising:
<claim-text>communicating control messages between the switch card arbiter and the port card QS device.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref> wherein communicating control messages between the switch card arbiter and the port card QS device includes sending a control message from the arbiter to the QS device; and,
<claim-text>wherein distributing the control message on a port card token bus connecting the MS and the QS device includes distributing the message received from the arbiter on the port card token bus.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein initiating a control message includes:
<claim-text>initiating a control message from a switch card processor; and,</claim-text>
<claim-text>transmitting the control message from the processor to the arbiter.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The method of <claim-ref idref="CLM-00013">claim 13</claim-ref> wherein initiating a control message from the switch card processor includes initiating a control message selected from the group including requests to the arbiter concerning the status of received QS device control links, requests to the crossbars concerning the status of interfacing data links, requests to the QS device concerning QS device status and the status of received arbiter control links, requests to MSs concerning MS status and the status of received data links, switch card configuration commands, and port card configuration commands.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein initiating a control message includes a crossbar initiating a control message in response to data link interface fault;
<claim-text>wherein distributing the control message on a switch card token bus connecting the crossbars and arbiter elements includes passing the control message from the crossbar to the arbiter; and,</claim-text>
<claim-text>the method further comprising:</claim-text>
<claim-text>a switch card processor polling the arbiter to collect the control message.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref> wherein communicating control messages between the switch card arbiter and the port card QS device includes sending a control message from the QS device to the arbiter.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref> wherein communicating control messages between the switch card arbiter and the port card QS device includes communicating control messages between a plurality of switch cards and a plurality of port cards.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The method of <claim-ref idref="CLM-00017">claim 17</claim-ref> wherein communicating control messages between the switch card arbiter and the port card QS device includes communicating control messages from a first switch card to a second switch card, through an intervening port card.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. A system for communicating control information in a switch fabric, the system comprising:
<claim-text>a switch card including:
<claim-text>a plurality of crossbars, each crossbar having an ingress and egress control port, and a plurality of backplane data link interfaces;</claim-text>
<claim-text>an arbiter having an ingress and egress control port; and,</claim-text>
<claim-text>a switch card token cyclical bus daisy-chain connecting the arbiter and crossbar element control ingress and egress ports for the distribution of control messages.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The system of <claim-ref idref="CLM-00019">claim 19</claim-ref> wherein the switch card token bus daisy-chain passes a control message, with an address attachment, between the arbiter and the crossbar elements;
<claim-text>wherein the arbiter has a unique address, the arbiter reading and terminating any received control message with an attachment matching the arbiter address; and,</claim-text>
<claim-text>wherein each crossbar has a unique address, each crossbar reading and terminating a received control message with an attachment matching its address.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. The system of <claim-ref idref="CLM-00020">claim 20</claim-ref> wherein the arbiter attaches a switch card tag to messages being transmitted on the token bus.</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. The system of <claim-ref idref="CLM-00021">claim 21</claim-ref> wherein the arbiter terminates messages being received on the token bus having switch card tags.</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. The system of <claim-ref idref="CLM-00022">claim 22</claim-ref> wherein the arbiter includes a register, the arbiter checking the token parity of the received control message, terminating the control message if the parity is wrong, and setting the register to indicate that a control message has been terminated in response to a failed parity check.</claim-text>
</claim>
<claim id="CLM-00024" num="00024">
<claim-text>24. The system of <claim-ref idref="CLM-00022">claim 22</claim-ref> further comprising:
<claim-text>a port card including:</claim-text>
<claim-text>a queuing and scheduling (QS) device selected from the group including a priority queue (PQ), an earliest deadline first queue (EDFQ), and a field programmable gate array (FPGA), having an ingress and egress control port;
<claim-text>a memory subsystem (MS) having an ingress and egress control port, backplane data link interfaces connected to the switch card crossbar backplane data link interfaces, and data link interfaces connected to port card ingress/egress ports; and,</claim-text>
<claim-text>a port card token bus connecting the MS and the QS device control ports for the distribution of control messages.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00025" num="00025">
<claim-text>25. The system of <claim-ref idref="CLM-00024">claim 24</claim-ref> wherein the MS includes an ingress MS (iMS) and egress MS (eMS) with ingress and egress control ports;
<claim-text>wherein the QS device includes an ingress QS (iQS) device, for controlling the iMS, and an egress QS (oQS) device, for controlling the eMS;</claim-text>
<claim-text>wherein the port card token bus daisy-chain connects the iQS device, iMs, oQS device, and eMS element ingress and egress control ports with a cyclical bus.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00026" num="00026">
<claim-text>26. The system of <claim-ref idref="CLM-00024">claim 24</claim-ref> wherein the port card token bus daisy-chain passes a control message with an address attachment between the QS device and the MS element;
<claim-text>wherein the MS has a unique address, the MS reading and terminating any received control message with an attachment matching the MS address; and,</claim-text>
<claim-text>wherein the QS device has a unique address, the QS device reading and terminating a received control message with an attachment matching the queuing device address.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00027" num="00027">
<claim-text>27. The system of <claim-ref idref="CLM-00026">claim 26</claim-ref> wherein the MS attaches a port card tag to transmitted messages being distributed on the token bus.</claim-text>
</claim>
<claim id="CLM-00028" num="00028">
<claim-text>28. The system of <claim-ref idref="CLM-00027">claim 27</claim-ref> wherein the MS terminates received messages being distributed on the bus having port card tags.</claim-text>
</claim>
<claim id="CLM-00029" num="00029">
<claim-text>29. The system of <claim-ref idref="CLM-00028">claim 28</claim-ref> wherein the MS includes a register, the MS checking the token parity of the received control message, terminating the control message if the parity is wrong, and setting the register to indicate that a control message has been terminated in response to a failed parity check.</claim-text>
</claim>
<claim id="CLM-00030" num="00030">
<claim-text>30. The system of <claim-ref idref="CLM-00028">claim 28</claim-ref> wherein the switch card arbiter has a control link port connected to the port card QS device, for communicating control messages.</claim-text>
</claim>
<claim id="CLM-00031" num="00031">
<claim-text>31. The system of <claim-ref idref="CLM-00030">claim 30</claim-ref> wherein the arbiter sends a control message to the QS device;
<claim-text>wherein the QS device passes the control message to the port card token bus; and,</claim-text>
<claim-text>wherein the port card token bus distributes the control message from the arbiter.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00032" num="00032">
<claim-text>32. The system of <claim-ref idref="CLM-00019">claim 19</claim-ref> wherein the arbiter includes a processor port; and,
<claim-text>wherein the switch card further includes:</claim-text>
<claim-text>a processor having a port connected to the arbiter processor port for initiating control messages.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00033" num="00033">
<claim-text>33. The system of <claim-ref idref="CLM-00032">claim 32</claim-ref> wherein the processor initiates a control message selected from the group including requests to the arbiter concerning the status of received QS device control links, requests to the crossbars concerning the status of interfacing data links, requests to the QS device concerning the status of the QS device and the status of received arbiter control links, requests to MSs concerning MS status and the status of received data links, switch card configuration commands, and port card configuration commands.</claim-text>
</claim>
<claim id="CLM-00034" num="00034">
<claim-text>34. The system of <claim-ref idref="CLM-00023">claim 23</claim-ref> wherein a crossbar initiates a control message in response to backplane data link faults;
<claim-text>wherein the switch card token bus passes the control message from the crossbar to the arbiter;</claim-text>
<claim-text>wherein the arbiter accepts and saves the control message, and wherein the arbiter has a processor port; and,</claim-text>
<claim-text>wherein the switch card further includes:</claim-text>
<claim-text>a processor having a port connected to the arbiter processor, the processor polling the arbiter for saved control messages.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00035" num="00035">
<claim-text>35. The system of <claim-ref idref="CLM-00030">claim 30</claim-ref> wherein the port card QS device sends a control message to the switch card arbiter.</claim-text>
</claim>
<claim id="CLM-00036" num="00036">
<claim-text>36. The system of <claim-ref idref="CLM-00030">claim 30</claim-ref> further comprising:
<claim-text>a plurality of port cards, each port card including:</claim-text>
<claim-text>a QS device selected from the group including a PQ, an EDFQ, and a FPGA, having a control port connected to a switch card arbiter;
<claim-text>a MS having a control port and a plurality of backplane data link interfaces connected to the switch card crossbar backplane data link interfaces; and,</claim-text>
<claim-text>a port card token bus connecting the MS and the QS device elements for the distribution of control messages.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00037" num="00037">
<claim-text>37. The system of <claim-ref idref="CLM-00036">claim 36</claim-ref> further comprising:
<claim-text>a plurality of switch cards, each switch card including:
<claim-text>a plurality of crossbars, each crossbar having a control port and a plurality of backplane data link interfaces;</claim-text>
<claim-text>an arbiter having a control port connected to a plurality of port card QS devices; and,</claim-text>
<claim-text>a switch card token bus connecting the arbiter and crossbar element control ports for the distribution of control messages.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00038" num="00038">
<claim-text>38. A method for communicating control information in a switch fabric, the method comprising:
<claim-text>on a switch card, establishing a plurality of crossbars controlled by an arbiter;</claim-text>
<claim-text>initiating a control message as follows:
<claim-text>initiating a control message from a switch card processor, the control message selected from a group including requests to the arbiter concerning the status of received QS device control links, requests to the crossbars concerning the status of interfacing data links, requests to the QS device concerning QS device status and the status of received arbiter control links, requests to MSs concerning MS status and the status of received data links, switch card configuration commands, and port card configuration commands; and,</claim-text>
<claim-text>transmitting the control message from the processor to the arbiter; and,</claim-text>
</claim-text>
<claim-text>distributing the control message on a switch card token bus connecting the crossbars and arbiter elements.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00039" num="00039">
<claim-text>39. A method for communicating control information in a switch fabric, the method comprising:
<claim-text>on a switch card, establishing a plurality of crossbars controlled by an arbiter;</claim-text>
<claim-text>a crossbar initiating a control message in response to data link interface fault;</claim-text>
<claim-text>distributing the control message on a switch card token bus connecting the crossbars and arbiter elements by passing the control message from the crossbar to the arbiter; and,</claim-text>
<claim-text>a switch card processor polling the arbiter to collect the control message.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00040" num="00040">
<claim-text>40. A system for communicating control information in a switch fabric, the system comprising:
<claim-text>a switch card including:
<claim-text>a plurality of crossbars, each crossbar having an ingress and egress control port, and a plurality of backplane data link interfaces;</claim-text>
<claim-text>an arbiter having an ingress and egress control port, and a processor port;</claim-text>
<claim-text>a switch card token bus connecting the arbiter and crossbar element control ports for the distribution of control messages; and,</claim-text>
<claim-text>a processor having a port connected to the arbiter processor port for initiating control messages selected from a group including requests to the arbiter concerning the status of received QS device control links, requests to the crossbars concerning the status of interfacing data links, requests to the QS device concerning the status of the QS device and the status of received arbiter control links, requests to MSs concerning MS status and the status of received data links, switch card configuration commands, and port card configuration commands.</claim-text>
</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>
