<us-patent-grant lang="EN" dtd-version="v4.2 2006-08-23" file="US07299347-20071120.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20071106" date-publ="20071120">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>07299347</doc-number>
<kind>B1</kind>
<date>20071120</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>10817601</doc-number>
<date>20040402</date>
</document-id>
</application-reference>
<us-application-series-code>10</us-application-series-code>
<us-term-of-grant>
<us-term-extension>345</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>15</main-group>
<subgroup>177</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>3</main-group>
<subgroup>00</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>713  2</main-classification>
<further-classification>710 38</further-classification>
<further-classification>709220</further-classification>
</classification-national>
<invention-title id="d0e53">Boot management in computer systems assisted by an endpoint with PCI-XP or USB-V2 interface</invention-title>
<references-cited>
<citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5860001</doc-number>
<kind>A</kind>
<name>Cromer et al.</name>
<date>19990100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5937063</doc-number>
<kind>A</kind>
<name>Davis</name>
<date>19990800</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6088794</doc-number>
<kind>A</kind>
<name>Yoon et al.</name>
<date>20000700</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>6240519</doc-number>
<kind>B1</kind>
<name>James, Jr. et al.</name>
<date>20010500</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>6539473</doc-number>
<kind>B1</kind>
<name>Hubacher et al.</name>
<date>20030300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713  2</main-classification></classification-national>
</citation>
<citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>6691160</doc-number>
<kind>B1</kind>
<name>Bradley</name>
<date>20040200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709222</main-classification></classification-national>
</citation>
<citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>6748525</doc-number>
<kind>B1</kind>
<name>Hubacher et al.</name>
<date>20040600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713  1</main-classification></classification-national>
</citation>
<citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>6816963</doc-number>
<kind>B1</kind>
<name>Krithivas et al.</name>
<date>20041100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713  1</main-classification></classification-national>
</citation>
<citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>6957286</doc-number>
<kind>B1</kind>
<name>Cohen</name>
<date>20051000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>710 38</main-classification></classification-national>
</citation>
<citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>6988193</doc-number>
<kind>B2</kind>
<name>French et al.</name>
<date>20060100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713  2</main-classification></classification-national>
</citation>
</references-cited>
<number-of-claims>42</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>713  2</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>713  1</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>713100</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709222</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>710 10</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>710 38</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>9</number-of-drawing-sheets>
<number-of-figures>11</number-of-figures>
</figures>
<parties>
<applicants>
<applicant sequence="001" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Kao</last-name>
<first-name>I-pieng Peter</first-name>
<address>
<city>Sunnyvale</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<nationality>
<country>omitted</country>
</nationality>
<residence>
<country>US</country>
</residence>
</applicant>
</applicants>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Bever, Hoffman &amp; Harms, LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="02" rep-type="attorney">
<addressbook>
<last-name>Harms</last-name>
<first-name>Jeanette S.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</parties>
<assignees>
<assignee>
<addressbook>
<orgname>Super Talent Electronics, Inc.</orgname>
<role>02</role>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Suryawanshi</last-name>
<first-name>Suresh K</first-name>
<department>2115</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">An intelligent endpoint can provide an automated, centralized boot management for multiple, interconnected computer systems. The intelligent endpoint can be notified of a boot event for one of the computer systems. This notification can occur over a system bus or via a system fabric. The intelligent endpoint can then decide on an appropriate action for the boot event. Notably, the action may affect or depend on a boot of another computer system. The intelligent endpoint can advantageously resolve arbitration issues in a cost- and size-efficient manner. Moreover, the intelligent endpoint can provide significant flexibility during booting.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="112.10mm" wi="150.11mm" file="US07299347-20071120-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="216.92mm" wi="177.04mm" orientation="landscape" file="US07299347-20071120-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="159.17mm" wi="149.94mm" orientation="landscape" file="US07299347-20071120-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="201.17mm" wi="170.26mm" orientation="landscape" file="US07299347-20071120-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="223.44mm" wi="163.24mm" orientation="landscape" file="US07299347-20071120-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="174.41mm" wi="149.61mm" orientation="landscape" file="US07299347-20071120-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="204.72mm" wi="179.49mm" orientation="landscape" file="US07299347-20071120-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="210.40mm" wi="166.12mm" orientation="landscape" file="US07299347-20071120-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="202.78mm" wi="156.89mm" orientation="landscape" file="US07299347-20071120-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="195.24mm" wi="170.86mm" orientation="landscape" file="US07299347-20071120-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0002" num="0001">1. Field of the Invention</p>
<p id="p-0003" num="0002">The present invention relates to a boot up of computer systems and in particular to an intelligent endpoint coupled to the computer systems that can manage aspects of the boot up.</p>
<p id="p-0004" num="0003">2. Description of the Related Art</p>
<p id="p-0005" num="0004">When a computer is turned on, a central processing unit (CPU) of the computer must “boot up”. This boot up (also called a boot) of the computer loads a limited number of predetermined programs into the system memory. These programs advantageously provide the basic tools and utilities that define the initial operations of the computer system, e.g. initialization, diagnostics, and operating system loading.</p>
<p id="p-0006" num="0005">The instruction code for triggering the boot up is often stored in non-volatile memory of the computer. Non-volatile cells can store bit states, i.e. 0's and 1's, even in the event of a power outage. The instruction code (bootcode) is sometimes in the form of firmware.</p>
<p id="p-0007" num="0006">In one embodiment, the boot up firmware can be implemented in a type of electrically erasable non-volatile memory called electrically erasable programmable read only memory (EEPROM). In certain configurations, the EEPROM cells in an array can be simultaneously erased, and therefore are also called “flash” memory. Recently, the cost and power requirements of flash memory have been significantly reduced in a per bit base by the introduction of NAND flash memory. Influenced by this introduction, flash memory (NAND and other types of flash memory) is increasingly being used in computers for boot up firmware.</p>
<p id="p-0008" num="0007">An industry standard called the peripheral connect interface (PCI) has been developed to efficiently use a bus to connect peripherals to a host platform, e.g. a computer. To address certain limitations in PCI, another industry standard called PCI Express has recently been jointly developed by Intel Corporation and the PCI Special Interest Group (PCI-SIG). PCI Express (PCI-XP) is a serial, low voltage, self-clocking I/O transfer methodology. PCI-XP typically outperforms PCI in high-speed applications but maintains backwards compatibility with PCI. Compared with PCI, PCI-XP improves data reliability and fault tolerance, thereby resulting in better reliability, availability, and serviceability (RAS).</p>
<p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. 1</figref> illustrates an exemplary PCI Express system that includes two computer systems, wherein each computer system is coupled to a plurality of peripherals, called endpoints herein. A first computer system <b>100</b> includes a CPU <b>101</b>, a cache <b>102</b>, and a platform memory <b>103</b>. A second computer system <b>120</b> includes a CPU <b>112</b>, a cache <b>113</b>, and a platform memory <b>114</b>.</p>
<p id="p-0010" num="0009">Each computer system can further include a root complex and one or more switches associated with its input/output (I/O) system. A root complex is the “root” of the connection of an I/O system of the computer to its memory. Thus, a root complex <b>104</b> connects CPU <b>101</b> and memory <b>103</b>. Similarly, root complex <b>115</b> connects CPU <b>112</b> and memory <b>114</b>.</p>
<p id="p-0011" num="0010">Each root complex is connectable to a plurality of endpoints via one or more switches. Both root complexes and switches are controlled by their associated computers. In a PCI Express system, an endpoint is a peripheral device that can request and complete PCI transactions either for itself or on behalf of a non-PCI Express device (e.g. a legacy device). A switch can be used to direct traffic in a PCI Express hierarchy including multiple endpoints.</p>
<p id="p-0012" num="0011">For example, for root complex <b>104</b>, a switch <b>105</b> can direct traffic to/from endpoint <b>106</b>, a switch <b>107</b> can direct traffic to/from endpoint <b>108</b>, and switches <b>107</b> and <b>109</b> can direct traffic to/from endpoints <b>110</b> and <b>111</b>. Similarly, for root complex <b>115</b>, a switch <b>116</b> can direct traffic to/from endpoint <b>120</b> and switches <b>116</b> and <b>117</b> can direct traffic to/from endpoints <b>118</b> and <b>119</b>. In <figref idref="DRAWINGS">FIG. 1</figref>, a peer-to-peer link <b>130</b> can also be established between switches <b>107</b> and <b>116</b>, thereby supporting transactions between hierarchy domains. These endpoints, switches, and peer-to-peer link form the “fabric” of the computer systems.</p>
<p id="p-0013" num="0012">Conventional boots in <figref idref="DRAWINGS">FIG. 1</figref> are controlled by booting platforms in computer systems <b>100</b> and <b>120</b> (e.g. in the CPUs and memories). Due to peer-to-peer link <b>130</b>, some coordination may be desired between the boots of computer systems <b>100</b> and <b>120</b>. Typically, a system administrator manually provides this coordination, thereby adding expense and unpredictability to the combined system. Alternatively, each booting platform could include additional instructions for dealing with the arbitration between computer systems <b>100</b> and <b>120</b>. These additional instructions are very complex, thereby significantly increasing the size and computing resources of each of the booting platforms. Therefore, a need arises for an automatic, efficient boot of computer systems having a peer-to-peer link.</p>
<heading id="h-0002" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0014" num="0013">In accordance with one aspect of the invention, an intelligent endpoint can provide an automated, centralized boot management for multiple, interconnected computer systems. This intelligent endpoint can advantageously resolve arbitration issues in a cost- and size-efficient manner. Moreover, the intelligent endpoint can provide significant flexibility during booting to enforce the most desirable policies.</p>
<p id="p-0015" num="0014">For example, in accordance with one aspect of the invention, an intelligent endpoint can advantageously participate in the boot decision-making process where and to the extent appropriate (i.e. where allowed and defined by the boot loaders in the systems). For example, in one embodiment, boot loaders in their respective computer systems can perform preliminary boots before authorizing the intelligent endpoint to resolve subsequent boot events.</p>
<p id="p-0016" num="0015">At that point, an intelligent endpoint, which is connected to one of the computer systems, can be notified of a boot event. This notification can occur over a system bus or via a system fabric. In one embodiment, the system bus or the system fabric conforms to the PCI Express specification. The intelligent endpoint can then decide on an appropriate action for the boot event.</p>
<p id="p-0017" num="0016">One boot event could relate to platform configuration. In platform configuration, a boot loader can configure certain pieces of equipment in the computer system. The intelligent endpoint could assist the boot loaders in determining which components to boot and in what order such components should be booted.</p>
<p id="p-0018" num="0017">Another boot event could relate to multi-medium configuration, e.g. network interfaces or physical storage. The intelligent endpoint could assist in decision-making based on protocols for a specific medium.</p>
<p id="p-0019" num="0018">Yet another boot event could relate to file system and image format. Specifically, each operating system has its own file system and image format. During the boot, a primitive file system and image format structures can be used. The intelligent endpoint could assist the boot loaders in determining which primitive structures are used and how such primitive structures are organized.</p>
<p id="p-0020" num="0019">Yet another boot event could relate to post-boot considerations. These post boot considerations can include, for example, how the operating system interacts with the boot code, whether certain boot components are kept “alive” during normal operation, proper version control and protection, and extending the service of installable drivers. An intelligent endpoint could assist the boot loaders in these decisions.</p>
<p id="p-0021" num="0020">The intelligent endpoint can include a boot manager in operative relation to boot intelligence. The boot intelligence can include information regarding possible boots of the computer system. For example, the boot intelligence can include a plurality of startup sequences, secret keys, and/or administrative keys.</p>
<p id="p-0022" num="0021">Using the boot intelligence, the boot manager can advantageously provide various functionalities. For example, in one embodiment, the boot manager can determine whether a plurality of hard disk drives are in normal state or in suspend state and then allow a user to selectively boot a specific hard disk drive (which could be in normal state or in suspend state).</p>
<p id="p-0023" num="0022">In another embodiment, the boot manager can facilitate determining whether boot instructions are valid (i.e. not changed by tampering) using a secret key. Specifically, a booting platform in the computer system and the intelligent endpoint can have a common secret key. Once the intelligent endpoint receives a boot request, the boot manager can encrypt the boot instructions stored in the boot intelligence using the secret key. The booting platform can receive the encrypted boot instructions and decrypt these instructions using its corresponding secret key. If the boot instructions are valid, as can be determined by the boot manager or the booting platform, then the booting platform can perform the boot up. Therefore, the intelligent endpoint can advantageously provide security in a computer system.</p>
<p id="p-0024" num="0023">In yet another embodiment, the boot manager can determine whether non-volatile memory storing boot instructions can be re-programmed. For example, if the computer system determines during startup that its non-volatile memory provided in its boot loader is corrupt, then the booting platform can notify the boot manager of this corruption. At this point, the boot manager can request the boot intelligence for the administrative key and prompt a user for a corresponding administrative key. If the two administrative keys match, then the boot manager can authorize the boot loader to reprogram the non-volatile memory. Therefore, the intelligent endpoint can also ensure that the non-volatile memory used in booting is protected from inadvertent reprogramming.</p>
<p id="p-0025" num="0024">Furthermore, by properly choosing the time to perform PCI-XP initialization and endpoints enumeration, the invention does not introduce additional price/performance penalty in terms of management overhead. In the near future, when systems are increasingly more complex with various booting methods and method resolutions, how flexible a booting can achieve relies on policy decisions made on pieces of boot and the granularity of booting piecemeal. This invention introduce a modular method to approach booting by inserting Boot Management and Boot Agent between Boot Loader and Boot Intelligence, which are further described below.</p>
<p id="p-0026" num="0025">In the area of backward compatibility, the invention prescribes possible avenues for reduction to practice. In the case of booting involves security management, the invention suggests that the fabric must be at the same or higher security level than those of the intended choices of booting security. In the aspect of Boot Agent insertion, several possible realizations are possible for different commercial value trade-offs—code rewrite for new release flash or dual-boot, reboot with master boot record modifications, or enforcing the bootcode standard. Thus, the specification in this invention improves prior art.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE FIGURES</heading>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. 1</figref> illustrates an exemplary PCI Express system that includes two computers and multiple endpoints.</p>
<p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. 2A</figref> illustrates a simplified computer system including two booting platforms and an intelligent endpoint, which can advantageously assist during the boots of those platforms.</p>
<p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. 2B</figref> illustrates an exemplary event-decision-action model for a boot loader that has authorized operation with the intelligent endpoint.</p>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. 2C</figref> illustrates an exemplary event-decision-action model for a boot manager that is authorized to operate with the boot loader.</p>
<p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. 2D</figref> illustrates one example of multiple boot loaders providing events to a boot manager and the response of that boot manager.</p>
<p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. 3</figref> illustrates how an intelligent endpoint can be used to determine the appropriate startup sequence based on a specific type of power on event.</p>
<p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. 4A</figref> illustrates a computer system including two bootable hard disk drives, of which one will be designated a “master” and the other will be designated a “slave”.</p>
<p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. 4B</figref> illustrates how an intelligent endpoint can advantageously control the selection of the hard disk drives shown in <figref idref="DRAWINGS">FIG. 4A</figref>.</p>
<p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. 5A</figref> illustrates a computer system including a host processor and an intelligent endpoint coupled via a system bus.</p>
<p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. 5B</figref> illustrates an exemplary boot up process using an intelligent endpoint as a security device.</p>
<p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. 6</figref> illustrates a computer system including an intelligent endpoint that can store an administrative key in its boot intelligence to authorize reprogramming of a corrupted non-volatile memory.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION OF THE FIGURES</heading>
<p id="p-0038" num="0037">To build in additional flexibility into computer systems, a peripheral device to one computer system, called an intelligent endpoint, can assist in the boots of the computer systems. The intelligent endpoint can include a boot manager and boot intelligence. The boot intelligence can include information regarding possible boots of the computer systems. As described in further detail below, this intelligent endpoint can provide enhanced coordination and decision-making for the computer systems.</p>
<p id="p-0039" num="0038">Of importance, this intelligent endpoint includes firmware, which can provide the necessary storage and processing capability for boot management. In one embodiment, the intelligent endpoint can include flash memory. U.S. Pat. No. 6,148,354, which is incorporated by reference herein, discusses an exemplary flash device using a universal serial bus (USB) connector. U.S. patent application Ser. No. 10/803,597, entitled “PCI Express-Compatible Controller And Interface For Flash Memory”, and filed on Mar. 17, 2004 by Super Talent Electronics, Inc., which is also incorporated by reference herein, discusses an exemplary flash device using a PCI Express connector.</p>
<p id="p-0040" num="0039">In accordance with one aspect of the invention, the intelligent endpoint can leverage the “fabric”, i.e. a peer-to-peer link, to provide boot coordination between connected computer systems. Advantageously, this boot coordination can be accomplished without substantial price and/or performance penalties.</p>
<p id="p-0041" num="0040">In one embodiment, which conforms to protocols in PCI Express, a preliminary boot of each system can be completed. This preliminary boot can include an acknowledgement and configuration of each endpoint associated with its computer system. Thus, after completion of the preliminary boot and referring back to <figref idref="DRAWINGS">FIG. 1</figref> for illustration, computer system <b>100</b> would acknowledge and configure endpoints <b>106</b>, <b>108</b>, <b>110</b>, <b>111</b>, whereas computer system <b>120</b> would acknowledge and configure endpoints <b>118</b>, <b>119</b>, and <b>120</b>. Both computer systems <b>110</b> and <b>120</b> would note peer-to-peer link <b>130</b>. At this point, the intelligent endpoint, which could be one of endpoints <b>106</b>, <b>108</b>, <b>110</b>, <b>111</b>, <b>118</b>, <b>119</b>, and <b>120</b>, can be activated. As described in further detail below, the coordination that the intelligent endpoint can provide may include one or more functions controlling arbitration, security, timing, and overriding policies.</p>
<p id="h-0005" num="0000">Booting Sequence with Intelligent Endpoint</p>
<p id="p-0042" num="0041">In any booting sequence, certain issues must be resolved. These issues typically include platform configuration, a multi-medium configuration, file system and image format, and post-boot considerations.</p>
<p id="p-0043" num="0042">In platform configuration, the boot loader can classify the equipment in its system (e.g. determining the number of CPUs, the number of endpoints, and the types of those endpoints). Of importance, this platform configuration also includes the configuration of the equipment, e.g. which components to boot. In accordance with one aspect of the invention, an intelligent endpoint could assist the boot loader in determining which components to boot and in what order such components should be booted. This accounting/configuration information can then be passed to the operating system for normal operation.</p>
<p id="p-0044" num="0043">In general, there are two categories of medium. A first medium can include network interfaces, such as (but not limited to) Ethernet, universal serial bus (USB), or PCI Express. A second medium can include physical storage, such as (but not limited to) CD ROM, floppy disk, or hard disk. Note that an auto-boot from the network (i.e. the fabric) can include a plethora of decisions regarding protocols directed to the specific medium. This decision-making is typically complex, which can reflect the intricacy of the network as well as the possible protocols available during the boot. In accordance with one aspect of the invention, an intelligent endpoint could assist in this decision-making.</p>
<p id="p-0045" num="0044">Each operating system has its own file system and image format. During the boot, a primitive file system (e.g. FAT, NTFS, EXT2, etc.) and image format (e.g. Linux, Microsoft Windows, CD ROM, etc.) structures can be used. The decisions as to which primitive structures are used and how such primitive structures are organized are typically based on reliability. Specifically, these primitive structures should guarantee reliability. In accordance with one aspect of the invention, an intelligent endpoint could assist the boot loader in determining which primitive structures are used and how such primitive structures are organized.</p>
<p id="p-0046" num="0045">Post boot considerations begin once an operating system is running. These post boot considerations can include (but are not limited to) how the operating system interacts with the boot code, whether certain boot components are kept “alive” during normal operation, proper version control and protection, and extending the service of installable drivers. In accordance with one aspect of the invention, an intelligent endpoint could assist the boot loader in these decisions.</p>
<p id="p-0047" num="0046">Thus, in general, the intelligent endpoint can advantageously participate in the decision-making process where and to the extent appropriate (i.e. where allowed and defined by the boot loaders in the systems). To provide this function, the intelligent endpoint can gather information and generate resolutions regarding platform configuration, multi-medium configuration, file system and image format, and/or post-boot considerations.</p>
<p id="p-0048" num="0047"><figref idref="DRAWINGS">FIG. 2A</figref> illustrates a simplified computer system <b>200</b> including a first booting platform <b>201</b>A, a second booting platform <b>201</b>B, and an intelligent endpoint <b>206</b>. Booting platform <b>201</b>A can include the same components as booting platform <b>201</b>B, therefore only the components of booting platform <b>201</b>A are discussed. Booting platform <b>201</b>A and <b>201</b>B can be coupled to intelligent endpoint <b>206</b> using a fabric <b>207</b>.</p>
<p id="p-0049" num="0048">In accordance with one aspect of the invention, intelligent endpoint <b>206</b> can include a boot manager <b>205</b>, which can use boot intelligence <b>204</b> to assist booting platform <b>201</b>A in the boot. A boot agent <b>203</b>A can provide an interface for booting platform <b>201</b>A to communicate with boot manager <b>205</b>. In one embodiment, once the computer is turned on and a preliminary boot is complete, boot loader <b>202</b> can communicate with boot manager <b>205</b> (via boot agent <b>203</b>) and request assistance in the boot.</p>
<p id="p-0050" num="0049">Note that in some embodiments, boot agent <b>203</b>A can be integrated into boot loader <b>202</b>A. In other embodiments concerned with backwards compatibility or with optionally deactivating intelligent endpoint <b>206</b>, boot agent <b>203</b>A can be kept separate from boot loader <b>202</b>A. Notably, the level of detail in decision-making provided in boot loader <b>202</b>A can be reflected in boot agent <b>203</b>A. The level of detail in the decision-making process is called the granularity of boot loader <b>202</b>A/boot agent <b>203</b>A. Boot agent <b>203</b>A can be implemented using software, firmware, hardware, or a combination thereof.</p>
<p id="h-0006" num="0000">Exemplary Sequence of Events for Boots with Intelligent Endpoint</p>
<p id="p-0051" num="0050">Boot manager <b>205</b> can actively manage one or more aspects of the boot on behalf of booting platforms <b>201</b>A and <b>201</b>B. To provide this management capability, boot intelligence <b>204</b> can store a plurality of instructions for the boot. In one embodiment, after a preliminary boot, boot agent <b>203</b>A can note that intelligent endpoint <b>206</b> is coupled to booting platform <b>201</b>A using fabric <b>207</b> and is requesting authorization to assist in the boot. Boot agent <b>203</b>A can pass this information to boot loader <b>202</b>A, and then allow boot loader <b>202</b>A to determine whether to use intelligent endpoint <b>206</b> in the boot.</p>
<p id="p-0052" num="0051"><figref idref="DRAWINGS">FIG. 2B</figref> illustrates an exemplary event-decision-action model for a boot loader that has authorized operation with the intelligent endpoint. In this model, an event is detected in step <b>210</b>, wherein an event refers to a decision node in the boot. In step <b>211</b>, a request for resolution of that event can be received from the intelligent endpoint via the boot agent. Once a decision is received from the intelligent endpoint, as determined in step <b>212</b>, the boot loader can perform the action provided by the decision. The boot loader is then ready to detect the next event.</p>
<p id="p-0053" num="0052"><figref idref="DRAWINGS">FIG. 2C</figref> illustrates an exemplary event-decision-action model for a boot manager that is authorized to operate with the boot loader. In this model, the detected event is received from the boot agent in step <b>220</b>. At this point, the boot manager can check the boot intelligence to make a decision associated with the event in step <b>221</b>. In step <b>222</b>, the boot manager can send the boot agent the action decision. The boot manager is then ready to receive the next event.</p>
<p id="p-0054" num="0053"><figref idref="DRAWINGS">FIG. 2D</figref> illustrates one example of multiple boot loaders providing events to a boot manager and the response of that boot manager. At time t<b>1</b>, boot loader <b>202</b>B (provided in booting platform <b>201</b>B of <figref idref="DRAWINGS">FIG. 2A</figref>) detects an event e<b>1</b> and passes that event to boot manager <b>205</b>. At time t<b>2</b>, boot loader <b>202</b>A (provided in booting platform <b>201</b>A) detects an event e<b>2</b> and also passes that event to boot manager <b>205</b>. By time t<b>3</b>, boot manager <b>205</b> has consulted its boot intelligence (i.e. boot intelligence <b>204</b>) and has a decision d<b>1</b> ready to send back to boot loader <b>202</b>B, wherein decision d<b>1</b> is associated with event e<b>1</b>. Similarly, by time t<b>4</b>, boot manager <b>205</b> has a decision d<b>2</b> ready to send back to boot loader <b>202</b>A, wherein decision d<b>2</b> is associated with event e<b>2</b>.</p>
<p id="p-0055" num="0054">In this embodiment, decisions for events are handled in a first-in-first-out basis, e.g. the decision d<b>1</b> is sent to boot loader <b>202</b>B before the decision d<b>2</b> is sent to boot loader <b>202</b>A because event e<b>1</b> is received before event e<b>2</b> (note that <figref idref="DRAWINGS">FIG. 2D</figref> indicates some delay for the event/decision to be transferred, although this delay would typically be insignificant). However, in other embodiments, the decisions can be sent as soon as they are generated irrespective of time of receipt.</p>
<p id="p-0056" num="0055">Note that the delay between receipt of an event and its associated decision, e.g. between events e<b>1</b>, e<b>2</b>, e<b>3</b> and decisions d<b>1</b>, d<b>2</b>, d<b>3</b>, respectively, depends on the time needed to process the appropriate information in the boot intelligence and therefore may vary from event to event.</p>
<p id="p-0057" num="0056">In one embodiment, a boot up process can be retriggered when a computer system is running and an initial boot has already been performed (sometimes called a warm boot). This reboot decision can be made by intelligent endpoint <b>206</b>. For example, assuming that an intelligent endpoint is present, then boot agent <b>203</b>A can be instructed by boot loader <b>202</b>A to maintain contact with boot manager <b>205</b>. In this manner, should a warm boot be needed, intelligent endpoint <b>206</b> can advantageously provide the appropriate instructions stored in boot intelligence <b>204</b> to facilitate the desired boot. Therefore, intelligent endpoint <b>206</b> can provide, in effect, a dynamically reconfigurable boot policy to booting platform <b>201</b>A as long as coupling between booting platform <b>201</b>A and intelligent endpoint <b>206</b> is maintained across fabric <b>207</b>.</p>
<p id="p-0058" num="0057">An intelligent endpoint can selectively provide the boot loader with an appropriate startup sequence based on an actual power on mode. Specifically, a power on can occur because of different events. Exemplary events include, for example, a serial port power on, a modem power on, a wake on alarm power on, and a wake on LAN power on. Each power on event may have an associated, preferred startup sequence, i.e. an ordered list of initial program load devices to be activated.</p>
<p id="p-0059" num="0058"><figref idref="DRAWINGS">FIG. 3</figref> illustrates how an intelligent endpoint can be used to determine the appropriate startup sequence based on a specific type of power on event. In step <b>301</b>, a booting platform detects a power on event. If an intelligent endpoint is present, e.g. coupled to the booting platform, as determined in step <b>302</b>, then the booting platform can notify the intelligent endpoint of the power on event in step <b>304</b>.</p>
<p id="p-0060" num="0059">In step <b>305</b>, the intelligent endpoint (controlled by the boot manager and using information provided by the boot agent) can determine whether specific power modes have been enabled. For example, a serial port power on mode may not be enabled in a specific system, but a modem power on mode may be enabled. If a power on mode is enabled, then the intelligent endpoint (once again controlled by the boot manager and using information provided by the boot agent) can determine the actual power on mode in step <b>306</b>. In other words, even if a specific power mode is enabled, that mode may not be the one responsible for the power on event. U.S. Pat. No. 5,860,001, which is incorporated by reference herein, describes one embodiment for performing steps <b>305</b> and <b>306</b>.</p>
<p id="p-0061" num="0060">Once the actual power on mode is determined, the intelligent endpoint can retrieve the appropriate startup sequence from its boot intelligence in step <b>307</b>. In one embodiment, the boot intelligence can be implemented using a look-up table (LUT) that allows the boot manager to determine the appropriate ordered list of IPL devices to be used during boot up based on the actual power on mode. Note that the intelligent endpoint can have its own list of IPL devices that can supplement or replace the standard lists used by the boot loader. Therefore, as new power on methods become available, an intelligent endpoint can allow users to select the appropriate IPL devices without reprogramming of the booting platform.</p>
<p id="p-0062" num="0061">In one embodiment, the intelligent endpoint can assist in coordinating the power on sequence for multiple booting platforms. In this case, the boot agent can still retrieve the appropriate sequence from the boot intelligence (step <b>307</b>) and notify the boot loaders of their respective startup sequences (step <b>308</b>). In step <b>309</b>, the boot loader(s) can execute the startup sequence(s). Note that if an intelligent endpoint is not present (step <b>302</b>), then the booting platform can use its platform firmware in step <b>303</b>, as is conventionally done.</p>
<p id="p-0063" num="0062">Some computer systems may have multiple hard disk drives having different operating systems available for boot up. Once a computer system recognizes the presence of multiple hard disk drives, the intelligent endpoint can advantageously determine which of these hard disk drives should be booted.</p>
<p id="p-0064" num="0063"><figref idref="DRAWINGS">FIG. 4A</figref> illustrates a computer system <b>400</b> including two bootable hard disk drives <b>408</b> and <b>409</b>, of which one will be designated a “master” and the other will be designated a “slave”. In computer system <b>400</b>, an integrated drive electronics (IDE) controller <b>402</b> can provide signals on master signal lines <b>403</b> as well as on slave signal lines <b>404</b>. A port exchanger <b>405</b> can receive the signals provided on lines <b>403</b> and <b>404</b> and direct those signals on lines <b>406</b> and <b>407</b> to hard disk drives <b>408</b> and <b>409</b>, respectively. A booting platform <b>410</b> can send the triggering signal to IDE controller <b>402</b> to begin the boot as well as send the appropriate exchange signal to port exchange <b>405</b>, thereby designating the master hard disk drive for booting. U.S. Pat. No. 6,088,794, which is incorporated by reference herein, describes IDE controller <b>402</b> and port exchanger <b>405</b> in detail.</p>
<p id="p-0065" num="0064">An intelligent endpoint <b>411</b> can advantageously control the selection of the hard disk drive using a method <b>420</b> illustrated in <figref idref="DRAWINGS">FIG. 4B</figref>. In step <b>421</b>, the computer is powered on. In step <b>422</b>, a determination is made whether HDD <b>408</b> and HDD <b>409</b> are in normal state (versus a suspend state). If both HDDs <b>408</b> and <b>409</b> are in normal state, then an intelligent endpoint can select the appropriate HDD to use in the boot up in step <b>425</b>. In one embodiment, the intelligent endpoint could perform this selection by first indicating to a user that both drives are in normal state and then querying the user as to which drive should be used.</p>
<p id="p-0066" num="0065">If both HDDs <b>408</b> and <b>409</b> are not in normal state, then method <b>420</b> can proceed to step <b>423</b>. In step <b>423</b>, a determination is made whether HDD <b>408</b> is in normal state and HDD <b>409</b> is in suspend state. If so, then the intelligent endpoint can select the appropriate HDD to use in the boot up in step <b>426</b>. In one embodiment, the intelligent endpoint could perform this selection by first indicating to a user that HDD <b>408</b> is in normal state while HDD <b>409</b> is in suspend state and then querying the user as to which drive should be used.</p>
<p id="p-0067" num="0066">If HDD <b>408</b> is not in normal state and HDD <b>409</b> is not in suspend state, then method <b>420</b> can proceed to step <b>424</b>. In step <b>424</b>, a determination is made whether HDD <b>409</b> is in normal state and HDD <b>408</b> is in suspend state. If so, then the intelligent endpoint can select the appropriate HDD to use in the boot up in step <b>427</b>. In one embodiment, the intelligent endpoint could perform this selection by first indicating to a user that HDD <b>409</b> is in normal state while HDD <b>408</b> is in suspend state and then querying the user as to which drive should be used.</p>
<p id="p-0068" num="0067">Once a hard disk drive is selected in one of steps <b>425</b>, <b>426</b>, and <b>427</b>, the boot up can proceed in step <b>428</b>. This boot up can include having the intelligent endpoint generate the appropriate exchange signal for the port exchanger via the booting platform. If HDD <b>409</b> is not in normal state and HDD <b>408</b> is not in suspend state, as determined in step <b>424</b>, then a fatal error has probably occurred and method <b>420</b> can end in step <b>429</b>.</p>
<p id="p-0069" num="0068">Note that hard disk selection method <b>420</b> is equally applicable to multiple booting platforms. For example, hard disk drive <b>408</b> could be associated with one booting platform while hard disk drive <b>409</b> could be associated with another booting platform (not shown in <figref idref="DRAWINGS">FIG. 4A</figref>). Thus, the intelligent endpoint could efficiently ensure that the appropriate hard disk drive is selected even when multiple booting platforms are present.</p>
<p id="p-0070" num="0069">In accordance with one aspect of the invention, the intelligent endpoint can include a secret key corresponding to another secret key in the boot loader. The intelligent endpoint can store the boot up instruction code in the boot intelligence. By using the secret keys, unauthorized boot up instruction code cannot be used, thereby ensuring a secure computer system environment.</p>
<p id="p-0071" num="0070"><figref idref="DRAWINGS">FIG. 5A</figref> illustrates a computer system <b>500</b> including a host processor <b>501</b> and an intelligent endpoint <b>509</b> coupled via a system bus <b>510</b> (e.g. a PCI Express bus). Host processor <b>501</b> includes a secret key <b>504</b>, which could be stored in non-volatile memory. Of importance, intelligent endpoint <b>509</b> can also include a secret key <b>508</b>, which is identical to secret key <b>504</b>, in its boot intelligence <b>506</b>. In one embodiment, boot intelligence <b>506</b> also stores secret key <b>508</b> in non-volatile memory. U.S. Pat. No. 5,937,063, which is incorporated by reference herein, describes this secret key pair in further detail.</p>
<p id="p-0072" num="0071">As described above in reference to <figref idref="DRAWINGS">FIG. 2</figref>, a boot manager <b>507</b> can control the boot process by serving as an active interface between boot intelligence <b>506</b> and a booting platform <b>502</b> of host processor <b>501</b>. Booting platform <b>502</b> includes a boot agent <b>505</b> that can detect the presence of boot manager <b>507</b> on system bus <b>510</b> and allows intelligent endpoint <b>509</b> to take control of the boot as described in <figref idref="DRAWINGS">FIG. 5B</figref>.</p>
<p id="p-0073" num="0072">In one embodiment, intelligent endpoint <b>509</b> can include multiple secret keys. In this case, each secret key in intelligent endpoint <b>509</b> corresponds to a secret key in a specific booting platform. Each booting platform can be directly connected to or indirectly coupled to system bus <b>510</b>.</p>
<p id="p-0074" num="0073"><figref idref="DRAWINGS">FIG. 5B</figref> illustrates an exemplary boot up process <b>520</b> using an intelligent endpoint as a security device. In step <b>521</b>, a power on event occurs. In step <b>522</b>, the host processor can issue a read request for an address corresponding to its boot instructions. In one embodiment, the boot agent can issue this read request to the boot manager. In step <b>523</b>, the boot manager of the intelligent endpoint can detect this address. Additionally, the boot manager can encrypt the boot instructions stored in the boot intelligence using its secret key and then send the encrypted boot instructions back to the boot agent.</p>
<p id="p-0075" num="0074">In step <b>524</b>, the boot agent can decrypt the encrypted boot instructions. If the boot instructions are valid, as determined in step <b>525</b>, then the boot loader can perform the boot in step <b>526</b>. Otherwise, process <b>520</b> aborts in step <b>527</b>. Note that the intelligent endpoint or the boot agent could determine the validity of the boot instructions.</p>
<p id="p-0076" num="0075">In accordance with another aspect of the invention, the intelligent endpoint can facilitate reprogramming of a corrupted non-volatile memory used to store booting instructions. <figref idref="DRAWINGS">FIG. 6</figref> illustrates a computer system <b>600</b> including an intelligent endpoint <b>609</b> that can store an administrative key <b>608</b> in its boot intelligence <b>606</b> to authorize this reprogramming. For example, if host processor <b>601</b> determines during startup that its non-volatile memory <b>604</b> (provided in boot loader <b>603</b>) is corrupt, then boot agent <b>605</b> can notify boot manager <b>607</b> of this corruption. At this point, boot manager <b>607</b> can request boot intelligence <b>606</b> for administrative key <b>608</b> and prompt a user for a corresponding administrative key <b>610</b>.</p>
<p id="p-0077" num="0076">If administrative keys <b>608</b> and <b>610</b> match, then boot manager <b>607</b> can authorize boot loader <b>603</b> to reprogram non-volatile memory <b>604</b>. On the other hand, if administrative keys <b>608</b> and <b>610</b> do not match, then boot manager <b>607</b> can ensure that non-volatile memory <b>604</b> is not reprogrammed. U.S. Pat. No. 6,240,519, which is incorporated by reference herein, describes these administrative keys in further detail.</p>
<p id="p-0078" num="0077">In one embodiment, intelligent endpoint <b>609</b> can include multiple administrative keys. In this case, each administrative key in intelligent endpoint <b>609</b> can be associated with the reprogramming of the non-volatile memory in a specific booting platform. Each booting platform can be connected to boot manager <b>607</b>.</p>
<p id="p-0079" num="0078">Note that in the techniques described in reference to <figref idref="DRAWINGS">FIGS. 5B and 6</figref>, the intelligent endpoint must be at the same or higher security level than those of the intended choices of booting security.</p>
<heading id="h-0007" level="1">OTHER EMBODIMENTS</heading>
<p id="p-0080" num="0079">Although illustrative embodiments have been described in detail herein with reference to the accompanying figures, it is to be understood that the invention is not limited to those precise embodiments. They are not intended to be exhaustive or to limit the invention to the precise forms disclosed. As such, many modifications and variations will be apparent to practitioners skilled in this art.</p>
<p id="p-0081" num="0080">For example, the term “platform” can include, but is not limited to, a personal computer (PC) having an operating system such as DOS™, Windows™, OS/2™, or Linux; a Macintosh™ computer; a computer having JAVA™ having -OS as the operating system; and graphical workstations such as the computers of Sun Microsystems and Silicon Graphics, and other computers having some version of the UNIX operating system such as AIX™ or SOLARIS™ of Sun Microsystems; or any other known and available operating system, including operating systems such as Windows CE™ for embedded systems, including cellular telephones, handheld computational devices and palmtop computational devices, and any other computational device which can be connected to a network.</p>
<p id="p-0082" num="0081">In one embodiment, although the intelligent endpoint can effectively leverage the peer-to-peer link as shown in the fabric of <figref idref="DRAWINGS">FIG. 1</figref>, the intelligent endpoint can also be applied to a universal standard bus (USB) having an on-the-go (OTG) specification (as provided in the USB Standard V2.0 (USB-V2)). U.S. Pat. No. 6,148,354 describes an exemplary USB architecture that could benefit from the use of intelligent endpoints. Note that in another embodiment, the Internet Protocol (IP) can be used for interoperability for communication between the boot agent and the boot manager.</p>
<p id="p-0083" num="0082">Flash memory cards such as Express Card, Mini PCI Express Card, Secure Digital Card, Multi Media Card, Memory Stick Card and Compact Flash Card can be candidates for intelligent endpoints. Although these cards do not have a fabric, they do have serial interfaces. The intelligent endpoint can also apply to the other endpoints based on serial buses, e.g. the serial ATA Bus, SCSI attached storage bus, IEEE 1394 bus and Ethernet bus.</p>
<p id="p-0084" num="0083">In principle, the invention is readily extended to multiple boot managers in a hierarchical structure where there is a single manager with highest authority in boot decision policy enforcement. Furthermore, the invention is extended to the embodiments where roles of endpoints and platforms (or alternately BL/BA and BM/BI) are exchanged, keeping one boot manager, because the unification of the serial interconnection preserves the uniform, convenient, and inexpensive boot management.</p>
<p id="p-0085" num="0084">Accordingly, it is intended that the scope of the invention be defined by the following Claims and their equivalents.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>The invention claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method of performing boots for multiple, interconnected computer systems, the method comprising:
<claim-text>notifying an intelligent endpoint of a boot event for a computer system, the intelligent endpoint being connected to one of the computer systems, wherein the intelligent endpoint is a peripheral device; and</claim-text>
<claim-text>deciding on an action for the boot event using the intelligent endpoint, wherein deciding includes determining whether the action affects or depends on a boot of another computer system.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the boot event relates to platform configuration.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the intelligent endpoint can determine which components in the computer systems to boot and in what order the components should be booted.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the boot event relates to multi-medium configuration.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the intelligent endpoint could assist in decision-making based on protocols for a specific medium.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the boot event relates to file system and image format.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the intelligent endpoint can determine which primitive structures are used and how the primitive structures are organized.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the boot event relates to post-boot considerations.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein post-boot considerations can include at least one of:
<claim-text>how an operating system interacts with boot code;</claim-text>
<claim-text>whether certain boot components are kept “alive” during normal operation;</claim-text>
<claim-text>proper version control and protection; and</claim-text>
<claim-text>extending service of installable drivers.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein notifying the intelligent endpoint includes communicating over a system bus or a system fabric.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the system bus or the system fabric conforms to the PCI Express specification.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein deciding on an action for the boot includes:
<claim-text>using a boot manager in the intelligent endpoint to access boot intelligence.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein boot intelligence includes a plurality of startup sequences.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein controlling the boot includes determining whether a plurality of hard disk drives are in normal state or in suspend state.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein controlling the boot includes facilitating determining whether boot instructions are valid.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein controlling the boot includes determining whether non-volatile memory storing boot instructions can be re-programmed.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. An intelligent endpoint being connectable to a computer system and at least one other computer system via a fabric, the intelligent endpoint comprising:
<claim-text>a boot manager for assisting a booting platform of each of the computer systems via the fabric, the fabric including at least one peer-to-peer link; and</claim-text>
<claim-text>boot intelligence for storing information regarding boots of the computer systems, wherein the boot manager and the boot intelligence form a peripheral device.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The intelligent endpoint of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the boot manager is coupled to receive a boot event from the booting platform.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The intelligent endpoint of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein the boot event relates to platform configuration.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The intelligent endpoint of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the intelligent endpoint can access information in the boot intelligence regarding which components in the computer systems to boot and in what order the components should be booted.</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. The intelligent endpoint of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein the boot event relates to multi-medium configuration.</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. The intelligent endpoint of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the intelligent endpoint assists in decision-making based on protocols for a specific medium.</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. The intelligent endpoint of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein the boot event relates to file system and image format.</claim-text>
</claim>
<claim id="CLM-00024" num="00024">
<claim-text>24. The intelligent endpoint of <claim-ref idref="CLM-00023">claim 23</claim-ref>, wherein the intelligent endpoint can access information in the boot intelligence regarding which primitive structures are used and how the primitive structures are organized.</claim-text>
</claim>
<claim id="CLM-00025" num="00025">
<claim-text>25. The intelligent endpoint of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein the boot event relates to post-boot considerations.</claim-text>
</claim>
<claim id="CLM-00026" num="00026">
<claim-text>26. The intelligent endpoint of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the boot manager is connectable to the fabric usable by the at least one other computer system.</claim-text>
</claim>
<claim id="CLM-00027" num="00027">
<claim-text>27. The intelligent endpoint of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein boot intelligence stores a plurality of startup sequences.</claim-text>
</claim>
<claim id="CLM-00028" num="00028">
<claim-text>28. The intelligent endpoint of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the boot manager can access information in the boot intelligence regarding whether to boot a hard disk drive in a computer system in one of a normal state and a suspend state.</claim-text>
</claim>
<claim id="CLM-00029" num="00029">
<claim-text>29. The intelligent endpoint of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the boot manager can facilitate determining whether boot instructions for a computer system are valid.</claim-text>
</claim>
<claim id="CLM-00030" num="00030">
<claim-text>30. The intelligent endpoint of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the boot manager can access information in the boot intelligence regarding whether non-volatile memory storing boot instructions in a computer system can be re-programmed.</claim-text>
</claim>
<claim id="CLM-00031" num="00031">
<claim-text>31. A computer system comprising:
<claim-text>a booting platform for a computer; and</claim-text>
<claim-text>an intelligent endpoint operatively coupled to the computer via a system fabric, the intelligent endpoint managing at least a portion of a boot of the computer, wherein the intelligent endpoint is a peripheral device,</claim-text>
<claim-text>wherein the booting platform includes:</claim-text>
<claim-text>a boot loader for physically performing the boot; and</claim-text>
<claim-text>a boot agent for communicating with the boot loader during a boot,</claim-text>
<claim-text>wherein the intelligent endpoint includes:</claim-text>
<claim-text>a boot manager for communicating with the boot agent across the system fabric; and</claim-text>
<claim-text>boot intelligence for storing information regarding a boot of the computer system, the boot manager communicating with the boot intelligence, wherein the boot intelligence includes at least one of a plurality of startup sequences, secret keys, and administrative keys.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00032" num="00032">
<claim-text>32. The computer system of <claim-ref idref="CLM-00031">claim 31</claim-ref>, wherein the boot manager can determine whether to boot a hard disk drive in the computer system, the hard disk drive being one of a normal state and a suspend state.</claim-text>
</claim>
<claim id="CLM-00033" num="00033">
<claim-text>33. The computer system of <claim-ref idref="CLM-00031">claim 31</claim-ref>, wherein the boot manager can facilitate determining whether boot instructions for the computer system are valid.</claim-text>
</claim>
<claim id="CLM-00034" num="00034">
<claim-text>34. The computer system of <claim-ref idref="CLM-00031">claim 31</claim-ref>, wherein the boot manager can determine whether non-volatile memory storing boot instructions in the computer can be re-programmed.</claim-text>
</claim>
<claim id="CLM-00035" num="00035">
<claim-text>35. The intelligent endpoint of <claim-ref idref="CLM-00031">claim 31</claim-ref>, wherein the boot manager is coupled to receive a boot event from the booting platform.</claim-text>
</claim>
<claim id="CLM-00036" num="00036">
<claim-text>36. The intelligent endpoint of <claim-ref idref="CLM-00035">claim 35</claim-ref>, wherein the boot event relates to platform configuration.</claim-text>
</claim>
<claim id="CLM-00037" num="00037">
<claim-text>37. The intelligent endpoint of <claim-ref idref="CLM-00036">claim 36</claim-ref>, wherein the intelligent endpoint can access information in the boot intelligence regarding which components in the computer system to boot and in what order the components should be booted.</claim-text>
</claim>
<claim id="CLM-00038" num="00038">
<claim-text>38. The intelligent endpoint of <claim-ref idref="CLM-00035">claim 35</claim-ref>, wherein the boot event relates to multi-medium configuration.</claim-text>
</claim>
<claim id="CLM-00039" num="00039">
<claim-text>39. The intelligent endpoint of <claim-ref idref="CLM-00038">claim 38</claim-ref>, wherein the intelligent endpoint assists in decision-making based on protocols for a specific medium.</claim-text>
</claim>
<claim id="CLM-00040" num="00040">
<claim-text>40. The intelligent endpoint of <claim-ref idref="CLM-00035">claim 35</claim-ref>, wherein the boot event relates to a file system and an image format in the computer.</claim-text>
</claim>
<claim id="CLM-00041" num="00041">
<claim-text>41. The intelligent endpoint of <claim-ref idref="CLM-00040">claim 40</claim-ref>, wherein the intelligent endpoint can access information in the boot intelligence regarding which primitive structures are used and how the primitive structures are organized.</claim-text>
</claim>
<claim id="CLM-00042" num="00042">
<claim-text>42. The intelligent endpoint of <claim-ref idref="CLM-00035">claim 35</claim-ref>, wherein the boot event relates to post-boot considerations.</claim-text>
</claim>
</claims>
</us-patent-grant>
