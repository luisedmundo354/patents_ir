<us-patent-grant lang="EN" dtd-version="v4.2 2006-08-23" file="US07299397-20071120.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20071106" date-publ="20071120">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>07299397</doc-number>
<kind>B2</kind>
<date>20071120</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>10521054</doc-number>
<date>20040419</date>
</document-id>
</application-reference>
<us-application-series-code>10</us-application-series-code>
<priority-claims>
<priority-claim sequence="01" kind="national">
<country>JP</country>
<doc-number>2003-133941</doc-number>
<date>20030513</date>
</priority-claim>
<priority-claim sequence="02" kind="national">
<country>JP</country>
<doc-number>2003-294383</doc-number>
<date>20030818</date>
</priority-claim>
</priority-claims>
<us-term-of-grant>
<us-term-extension>78</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>H</section>
<class>03</class>
<subclass>M</subclass>
<main-group>13</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20071120</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>714752</main-classification>
</classification-national>
<invention-title id="d0e89">Decoding apparatus, decoding method, and program to decode low density parity check codes</invention-title>
<references-cited>
<citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>6539367</doc-number>
<kind>B1</kind>
<name>Blanksby et al.</name>
<date>20030300</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>6633856</doc-number>
<kind>B2</kind>
<name>Richardson et al.</name>
<date>20031000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>706 15</main-classification></classification-national>
</citation>
<citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6785863</doc-number>
<kind>B2</kind>
<name>Blankenship et al.</name>
<date>20040800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714799</main-classification></classification-national>
</citation>
<citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>6938196</doc-number>
<kind>B2</kind>
<name>Richardson et al.</name>
<date>20050800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714752</main-classification></classification-national>
</citation>
<citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>6957375</doc-number>
<kind>B2</kind>
<name>Richardson</name>
<date>20051000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714752</main-classification></classification-national>
</citation>
<citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>6961888</doc-number>
<kind>B2</kind>
<name>Jin et al.</name>
<date>20051100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714752</main-classification></classification-national>
</citation>
<citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2002/0186759</doc-number>
<kind>A1</kind>
<name>Goldstein et al.</name>
<date>20021200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>375222</main-classification></classification-national>
</citation>
<citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2004/0019845</doc-number>
<kind>A1</kind>
<name>Eroz et al.</name>
<date>20040100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714801</main-classification></classification-national>
</citation>
<citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2004/0034828</doc-number>
<kind>A1</kind>
<name>Hocevar</name>
<date>20040200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714800</main-classification></classification-national>
</citation>
<citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>2004/0187129</doc-number>
<kind>A1</kind>
<name>Richardson</name>
<date>20040900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>718100</main-classification></classification-national>
</citation>
<citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>2005/0278606</doc-number>
<kind>A1</kind>
<name>Richardson</name>
<date>20051200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714760</main-classification></classification-national>
</citation>
<citation>
<patcit num="00012">
<document-id>
<country>EP</country>
<doc-number>1 158 682</doc-number>
<date>20011100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00013">
<document-id>
<country>JP</country>
<doc-number>2002-33670</doc-number>
<date>20020100</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<patcit num="00014">
<document-id>
<country>JP</country>
<doc-number>2003-269302</doc-number>
<date>20030900</date>
</document-id>
</patcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00015">
<othercit>Robert G. Gallager, <i>Low-Density Parity Check Codes </i>(M. I. T. Press 1963).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00016">
<othercit>David J. C. MacKay, “Good Error-Correcting Codes Based on Very Sparse Matrices,” <i>IEEE Transactions on Information Theory</i>, vol. 45, No. 2, pp. 399-431, Mar. 1999.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00017">
<othercit>Michael G. Luby, Michael Mitzenmacher, M. Amin Shokrollahi &amp; Daniel A. Spielman, “Analysis of Low Density Codes and Improved Design Using Irregular Graphs,” <i>Proceedings of ACM Symposium on Theory of Computing</i>, pp. 249-258 (1998).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00018">
<othercit>C. Howland &amp; A. Blanksby, “Parallel Decoding Architectures for Low Density Parity Check Codes,” <i>Symposium on Circuits and Systems</i>, part IV, pp. 742-745 (2001).</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00019">
<othercit>Engling Yeo, Payam Pakzad, Borivoje Nikolic &amp; Venkat Anantharam, “VLSI Architectures for Iterative Decoders in Magnetic Recording Channels,” <i>IEEE Transactions on Magnetics</i>, vol. 37, No. 2, pp. 748-755, Mar. 2001.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
<citation>
<nplcit num="00020">
<othercit>S. Kim et al, ‘Parallel VSLI Architectures for a Class of LD PC Codes’, IEEE International Symposium on Circuits and Systems, 2002, ISCAS 2002, vol. 2, Nov. 2002, p. 26-29.</othercit>
</nplcit>
<category>cited by other</category>
</citation>
</references-cited>
<number-of-claims>40</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>714752</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>35</number-of-drawing-sheets>
<number-of-figures>38</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20050240853</doc-number>
<kind>A1</kind>
<date>20051027</date>
</document-id>
</related-publication>
</us-related-documents>
<parties>
<applicants>
<applicant sequence="001" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Yokokawa</last-name>
<first-name>Takashi</first-name>
<address>
<city>Tokyo</city>
<country>JP</country>
</address>
</addressbook>
<nationality>
<country>JP</country>
</nationality>
<residence>
<country>JP</country>
</residence>
</applicant>
<applicant sequence="002" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Miyauchi</last-name>
<first-name>Toshiyuki</first-name>
<address>
<city>Tokyo</city>
<country>JP</country>
</address>
</addressbook>
<nationality>
<country>JP</country>
</nationality>
<residence>
<country>JP</country>
</residence>
</applicant>
<applicant sequence="003" app-type="applicant-inventor" designation="us-only">
<addressbook>
<last-name>Iida</last-name>
<first-name>Yasuhiro</first-name>
<address>
<city>Tokyo</city>
<country>JP</country>
</address>
</addressbook>
<nationality>
<country>JP</country>
</nationality>
<residence>
<country>JP</country>
</residence>
</applicant>
</applicants>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Finnegan, Henderson, Farabow, Garrett &amp; Dunner, L.L.P.</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</parties>
<assignees>
<assignee>
<addressbook>
<orgname>Sony Corporation</orgname>
<role>03</role>
<address>
<city>Tokyo</city>
<country>JP</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Lamarre</last-name>
<first-name>Guy</first-name>
<department>2133</department>
</primary-examiner>
<assistant-examiner>
<last-name>Rizk</last-name>
<first-name>Sam</first-name>
</assistant-examiner>
</examiners>
<pct-or-regional-filing-data>
<document-id>
<country>WO</country>
<doc-number>PCT/JP2004/005562</doc-number>
<kind>00</kind>
<date>20040419</date>
</document-id>
<us-371c124-date>
<date>20050112</date>
</us-371c124-date>
</pct-or-regional-filing-data>
<pct-or-regional-publishing-data>
<document-id>
<country>WO</country>
<doc-number>WO2004/102811</doc-number>
<kind>A </kind>
<date>20041125</date>
</document-id>
</pct-or-regional-publishing-data>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">The present invention relates to a decoding apparatus and a decoding method for realizing the decoding of LDPC codes, in which, while the circuit scale is suppressed, the operating frequency can be suppressed within a sufficiently feasible range, and control of memory access can be performed easily, and to a program therefor. A check matrix of LDPC codes is formed by a combination of a (P×P) unit matrix, a matrix in which one to several 1s of the unit matrix are substituted with 0, a matrix in which they are cyclically shifted, a matrix, which is the sum of two or more of them, and a (P×P) 0-matrix. A check node calculator <b>313</b> simultaneously performs p check node calculations. A variable node calculator <b>319</b> simultaneously performs p variable node calculations.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="148.25mm" wi="235.20mm" file="US07299397-20071120-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="207.52mm" wi="105.49mm" file="US07299397-20071120-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="207.43mm" wi="112.86mm" file="US07299397-20071120-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="192.19mm" wi="75.52mm" file="US07299397-20071120-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="202.69mm" wi="73.66mm" file="US07299397-20071120-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="210.99mm" wi="145.54mm" orientation="landscape" file="US07299397-20071120-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="172.55mm" wi="110.66mm" orientation="landscape" file="US07299397-20071120-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="185.84mm" wi="137.50mm" orientation="landscape" file="US07299397-20071120-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="147.07mm" wi="116.42mm" orientation="landscape" file="US07299397-20071120-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="212.01mm" wi="140.97mm" orientation="landscape" file="US07299397-20071120-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="205.15mm" wi="150.45mm" orientation="landscape" file="US07299397-20071120-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="203.71mm" wi="136.40mm" orientation="landscape" file="US07299397-20071120-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="189.57mm" wi="137.67mm" orientation="landscape" file="US07299397-20071120-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00013" num="00013">
<img id="EMI-D00013" he="161.80mm" wi="130.22mm" orientation="landscape" file="US07299397-20071120-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00014" num="00014">
<img id="EMI-D00014" he="236.98mm" wi="161.12mm" orientation="landscape" file="US07299397-20071120-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00015" num="00015">
<img id="EMI-D00015" he="238.59mm" wi="164.68mm" orientation="landscape" file="US07299397-20071120-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00016" num="00016">
<img id="EMI-D00016" he="203.96mm" wi="158.50mm" orientation="landscape" file="US07299397-20071120-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00017" num="00017">
<img id="EMI-D00017" he="172.04mm" wi="156.21mm" orientation="landscape" file="US07299397-20071120-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00018" num="00018">
<img id="EMI-D00018" he="214.12mm" wi="131.15mm" file="US07299397-20071120-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00019" num="00019">
<img id="EMI-D00019" he="238.51mm" wi="161.12mm" orientation="landscape" file="US07299397-20071120-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00020" num="00020">
<img id="EMI-D00020" he="213.78mm" wi="160.70mm" orientation="landscape" file="US07299397-20071120-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00021" num="00021">
<img id="EMI-D00021" he="185.59mm" wi="136.06mm" orientation="landscape" file="US07299397-20071120-D00021.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00022" num="00022">
<img id="EMI-D00022" he="243.67mm" wi="163.58mm" orientation="landscape" file="US07299397-20071120-D00022.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00023" num="00023">
<img id="EMI-D00023" he="157.48mm" wi="126.92mm" orientation="landscape" file="US07299397-20071120-D00023.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00024" num="00024">
<img id="EMI-D00024" he="199.05mm" wi="149.69mm" orientation="landscape" file="US07299397-20071120-D00024.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00025" num="00025">
<img id="EMI-D00025" he="239.01mm" wi="103.46mm" orientation="landscape" file="US07299397-20071120-D00025.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00026" num="00026">
<img id="EMI-D00026" he="205.23mm" wi="135.55mm" file="US07299397-20071120-D00026.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00027" num="00027">
<img id="EMI-D00027" he="234.78mm" wi="159.68mm" orientation="landscape" file="US07299397-20071120-D00027.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00028" num="00028">
<img id="EMI-D00028" he="231.31mm" wi="164.08mm" orientation="landscape" file="US07299397-20071120-D00028.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00029" num="00029">
<img id="EMI-D00029" he="178.65mm" wi="135.13mm" orientation="landscape" file="US07299397-20071120-D00029.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00030" num="00030">
<img id="EMI-D00030" he="200.58mm" wi="153.16mm" orientation="landscape" file="US07299397-20071120-D00030.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00031" num="00031">
<img id="EMI-D00031" he="241.13mm" wi="159.26mm" orientation="landscape" file="US07299397-20071120-D00031.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00032" num="00032">
<img id="EMI-D00032" he="198.12mm" wi="150.71mm" orientation="landscape" file="US07299397-20071120-D00032.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00033" num="00033">
<img id="EMI-D00033" he="236.90mm" wi="104.82mm" orientation="landscape" file="US07299397-20071120-D00033.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00034" num="00034">
<img id="EMI-D00034" he="205.66mm" wi="138.35mm" file="US07299397-20071120-D00034.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00035" num="00035">
<img id="EMI-D00035" he="178.39mm" wi="122.26mm" orientation="landscape" file="US07299397-20071120-D00035.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">TECHNICAL FIELD</heading>
<p id="p-0002" num="0001">The present invention relates to a decoding apparatus, a decoding method, and a program. More particularly, the present invention relates to a decoding apparatus and a decoding method for decoding codes on which coding is performed using low density parity check codes (LDPC codes), and to a program therefor.</p>
<heading id="h-0002" level="1">BACKGROUND ART</heading>
<p id="p-0003" num="0002">In recent years, research in, for example, communication fields such as mobile communication and deep space communication, and broadcasting fields such as terrestrial-wave or satellite digital broadcasts has progressed remarkably. Along with this situation, research on coding theories for making error correction coding and decoding efficient has been actively carried out.</p>
<p id="p-0004" num="0003">As a theoretical limit of code performance, the Shannon limit implied by the so-called Shannon's (C. E. Shannon) channel coding theorem is known. Research on coding theories has been carried out for the purpose of developing codes exhibiting performance near this Shannon limit. In recent years, as a coding method exhibiting performance near the Shannon limit, for example, techniques for what is commonly called “turbo coding”, such as parallel concatenated convolutional codes (PCCC) and serially concatenated convolutional codes (SCCC), have been developed. Furthermore, whereas this turbo coding has been developed, low density parity check codes (hereinafter referred to as “LDPC codes”), which is a coding method that has been known for a long time, have attracted attention.</p>
<p id="p-0005" num="0004">LDPC codes were proposed first in R. G. Gallager, “Low Density Parity Check Codes”, Cambridge, Mass.: M. I. T. Press, 1963. Thereafter, LDPC codes reattracted attention in D. J. C. MacKay, “Good error correcting codes based on very sparse matrices”, submitted to IEEE Trans. Inf. Theory, IT-45, pp. 399-431, 1999, and M. G. Luby, M. Mitzenmacher, M. A. Shokrollahi and D. A. Spielman, “Analysis of low density codes and improved designs using irregular graphs”, in Proceedings of ACM Symposium on Theory of Computing, pp. 249-258, 1998.</p>
<p id="p-0006" num="0005">It is beginning to be known from this recent research that, for the LDPC codes, as the code length increases, performance close to the Shannon limit can be obtained, similarly to turbo coding. Furthermore, since the LDPC codes have the property that the minimum length is proportional to the code length, they have the advantages that the block error probability characteristics are good, and a so-called error floor phenomenon, which is observed in decoding characteristics of turbo coding, hardly occurs.</p>
<p id="p-0007" num="0006">Such LDPC codes will now be described in detail below. The LDPC codes are linear codes and do not always need to be two-dimensional, but here, a description is given assuming that the LDPC codes are two-dimensional.</p>
<p id="p-0008" num="0007">The greatest features of the LDPC codes are that the parity check matrix that defines the LDPC codes are sparse. Here, a sparse matrix is formed in such a manner that the number of 1s in the elements of the matrix is very small. If the sparse check matrix is denoted as H, examples thereof include a check matrix in which, as shown in <figref idref="DRAWINGS">FIG. 1</figref>, the Hamming weight of each column (number of 1s; weight) is “3”, and the Hamming weight of each row is “6”.</p>
<p id="p-0009" num="0008">As described above, the LDPC codes defined by the check matrix H in which the Hamming weight of each row and each column is fixed are called “regular LDPC codes”. On the other hand, the LDPC codes defined by a check matrix H in which the Hamming weight of each row and each column is not fixed are called “irregular LDPC codes”.</p>
<p id="p-0010" num="0009">Coding by such LDPC codes is realized by generating a generation matrix G on the basis of the check matrix H and by generating a code word by multiplying this generation matrix G by a two-dimensional information message. More specifically, a coding apparatus for performing coding by LDPC codes computes a generation matrix G in which the equation GH<sup>T</sup>=0 holds with a transpose matrix H<sup>T </sup>of the check matrix H. Here, when the generation matrix G is a k×n matrix, the coding apparatus multiplies the generation matrix G by a k-bit information message (vector u), and generates an n-bit codeword c (=uG). The codeword generated by this coding apparatus is transmitted with the code bit whose value is “0” being mapped to “+1” and the code bit whose value is “1” being mapped to “−1”, and is received at the reception side via a predetermined communication channel.</p>
<p id="p-0011" num="0010">On the other hand, decoding of the LDPC codes can be performed by a message passing algorithm by belief propagation on a so-called Tanner graph, which is formed of a variable node (also called a message node) and a check node; this message passing algorithm was proposed by Gallager and is known as “probabilistic decoding”. Hereafter, the variable nodes and the check nodes are also referred to simply as nodes where appropriate.</p>
<p id="p-0012" num="0011">However, in probabilistic decoding, since messages exchanged between nodes are real-number values, in order to find an analytical solution, it is necessary to trace the probability distribution of the message that takes a continuous value. This necessitates analysis involving a large degree of difficulty. Accordingly, Gallager has proposed an algorithm A or an algorithm B as an algorithm for decoding LDPC codes.</p>
<p id="p-0013" num="0012">In general, decoding of the LDPC codes is performed in accordance with the procedure shown in <figref idref="DRAWINGS">FIG. 2</figref>. Here, the receiving value is denoted as U<sub>0 </sub>(u<sub>0i</sub>), the message output from the check node is denoted as u<sub>j</sub>, and the message output from the variable node is denoted as v<sub>i</sub>. Here, the message is a real-number value such that the “0”-likeness of the value is represented by a so-called log likelihood ratio.</p>
<p id="p-0014" num="0013">In the decoding of the LDPC codes, initially, as shown in <figref idref="DRAWINGS">FIG. 2</figref>, in step S<b>11</b>, the receiving value U<sub>0 </sub>(u<sub>0i</sub>) is received, the message u<sub>j </sub>is initialized to 0, and a variable k that takes an integer as a counter for an iterative process is initialized to 0. The process then proceeds to step S<b>12</b>. In step S<b>12</b>, based on the received value U<sub>0 </sub>(u<sub>0i</sub>), a message v<sub>i </sub>is determined by performing a computation shown in equation (1). Furthermore, based on this message v<sub>i</sub>, a message u<sub>j </sub>is determined by performing a computation shown in equation (2).</p>
<p id="p-0015" num="0014">
<maths id="MATH-US-00001" num="00001">
<math overflow="scroll">
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <msub>
          <mi>v</mi>
          <mi>i</mi>
        </msub>
        <mo>=</mo>
        <mrow>
          <msub>
            <mi>u</mi>
            <mrow>
              <mn>0</mn>
              <mo>⁢</mo>
              <mi>i</mi>
            </mrow>
          </msub>
          <mo>+</mo>
          <mrow>
            <munderover>
              <mo>∑</mo>
              <mrow>
                <mi>j</mi>
                <mo>=</mo>
                <mn>1</mn>
              </mrow>
              <mrow>
                <msub>
                  <mi>d</mi>
                  <mi>v</mi>
                </msub>
                <mo>-</mo>
                <mn>1</mn>
              </mrow>
            </munderover>
            <mo>⁢</mo>
            <msub>
              <mi>u</mi>
              <mi>j</mi>
            </msub>
          </mrow>
        </mrow>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>(</mo>
        <mn>1</mn>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
  <mtr>
    <mtd>
      <mrow>
        <mrow>
          <mi>tanh</mi>
          <mo>⁡</mo>
          <mrow>
            <mo>(</mo>
            <mfrac>
              <msub>
                <mi>u</mi>
                <mi>j</mi>
              </msub>
              <mn>2</mn>
            </mfrac>
            <mo>)</mo>
          </mrow>
        </mrow>
        <mo>=</mo>
        <mrow>
          <munderover>
            <mo>∏</mo>
            <mrow>
              <mi>i</mi>
              <mo>=</mo>
              <mn>1</mn>
            </mrow>
            <mrow>
              <msub>
                <mi>d</mi>
                <mi>c</mi>
              </msub>
              <mo>-</mo>
              <mn>1</mn>
            </mrow>
          </munderover>
          <mo>⁢</mo>
          <mrow>
            <mi>tanh</mi>
            <mo>⁡</mo>
            <mrow>
              <mo>(</mo>
              <mfrac>
                <msub>
                  <mi>v</mi>
                  <mi>i</mi>
                </msub>
                <mn>2</mn>
              </mfrac>
              <mo>)</mo>
            </mrow>
          </mrow>
        </mrow>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>(</mo>
        <mn>2</mn>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
</maths>
</p>
<p id="p-0016" num="0015">Here, d<sub>v </sub>and d<sub>c </sub>in equations (1) and (2) are parameters respectively that indicate the number of 1s in the vertical direction (in the row direction) and in the horizontal direction (in the column direction) of the check matrix H and that can be selected as desired. For example, in the case of a (3, 6) code, d<sub>v</sub>=3 and d<sub>c</sub>=6.</p>
<p id="p-0017" num="0016">In the computation of each of equations (1) and (2), since the message input from an edge from which a message is to be output is not used as a parameter for a sum or product computation, the range of the sum or product computation is from 1 to d<sub>v</sub>−1 or 1 to d<sub>c</sub>−1. In practice, the computation shown in equation (2) is performed by creating in advance a table of a function R(v<sub>1</sub>, v<sub>2</sub>), shown in equation (3), that is defined by one output with respect to two inputs v<sub>1 </sub>and v<sub>2 </sub>and by using this table continuously (recursively), as shown in equation (4).
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>x=</i>2 tan <i>h</i><sup>−1</sup>{ tan <i>h</i>(<i>v</i><sub>1</sub>/2)tan <i>h</i>(<i>v</i><sub>2</sub>/2)}=<i>R</i>(<i>v</i><sub>1</sub><i>, v</i><sub>2</sub>)  (3)<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>u</i><sub>j</sub><i>=R</i>(<i>v</i><sub>1</sub><i>, R</i>(<i>v</i><sub>2</sub><i>, R</i>(<i>v</i><sub>3</sub><i>, . . . R</i>(<i>v</i><sub>d</sub><sub><sub2>c</sub2></sub>−2<i>, v</i><sub>d</sub><sub><sub2>c</sub2></sub>−1))))  (4)<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0018" num="0017">In step S<b>12</b>, furthermore, the variable k is incremented by 1, and the process then proceeds to step S<b>13</b>. In step S<b>13</b>, it is determined whether or not the variable k is greater than or equal to a predetermined number N of iterative decodings. When it is determined in step S<b>13</b> that the variable k is not greater than or equal to N, the process returns to step S<b>12</b>, and the identical processing is performed again.</p>
<p id="p-0019" num="0018">When it is determined in step S<b>13</b> that the variable k is greater than or equal to N, the process proceeds to step S<b>14</b>, where the message v serving as the decoded result, which is finally output as a result of performing the computation shown in equation (5), is determined and output. This completes the decoding process of the LDPC codes.</p>
<p id="p-0020" num="0019">
<maths id="MATH-US-00002" num="00002">
<math overflow="scroll">
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <msub>
          <mi>v</mi>
          <mi>i</mi>
        </msub>
        <mo>=</mo>
        <mrow>
          <msub>
            <mi>u</mi>
            <mrow>
              <mn>0</mn>
              <mo>⁢</mo>
              <mi>i</mi>
            </mrow>
          </msub>
          <mo>+</mo>
          <mrow>
            <munderover>
              <mo>∑</mo>
              <mrow>
                <mi>j</mi>
                <mo>=</mo>
                <mn>1</mn>
              </mrow>
              <msub>
                <mi>d</mi>
                <mi>v</mi>
              </msub>
            </munderover>
            <mo>⁢</mo>
            <msub>
              <mi>u</mi>
              <mi>j</mi>
            </msub>
          </mrow>
        </mrow>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>(</mo>
        <mn>5</mn>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
</maths>
</p>
<p id="p-0021" num="0020">Here, unlike the computation of equation (1), the computation of equation (5) is performed using the input messages from all the edges connected to the variable nodes.</p>
<p id="p-0022" num="0021">In such LDPC code decoding, for example, in the case of (3, 6) code, as shown in <figref idref="DRAWINGS">FIG. 3</figref>, messages are exchanged between nodes. In the node (variable node) indicated by “=” in <figref idref="DRAWINGS">FIG. 3</figref>, the computation shown in equation (1) is performed. In the node indicated by “+” (check node), the computation shown in equation (2) is performed. In particular, in the algorithm A, the message is formed to be two-dimensional; in the node indicated by “+”, an exclusive OR computation of d<sub>c</sub>−1 input messages is performed; and in the node indicated by “=”, with respect to the received value R, when all the d<sub>v</sub>−1 input messages are different bit values, the sign is inverted and output.</p>
<p id="p-0023" num="0022">Furthermore, in recent years, research on an implementation method of the decoding of LDPC codes has been carried out. Before describing the implementation method, the decoding of LDPC codes is described in a schematic form.</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 4</figref> shows an example of a parity check matrix of (3,6) LDPC codes (a coding rate of ½, a code length of 12). The parity check matrix of LDPC codes can be written by using a Tanner graph, as shown in <figref idref="DRAWINGS">FIG. 5</figref>. In <figref idref="DRAWINGS">FIG. 5</figref>, nodes indicated by “+” are check nodes, and nodes indicated by “=” are variable nodes. The check nodes and the variable nodes correspond to the rows and the columns of the parity check matrix, respectively. The connecting line between the check node and the variable node is an edge and corresponds to “1” of the check matrix. That is, when the element of the j-th row and the i-th column of the check matrix is 1, in <figref idref="DRAWINGS">FIG. 5</figref>, the i-th variable node (node of “=”) from the top and the j-th check node (node of “+”) from the top are connected to each other by an edge. The edge indicates that the sign bit corresponding to the variable node has a constraint condition corresponding to the check node. <figref idref="DRAWINGS">FIG. 5</figref> shows a Tanner graph of the check matrix of <figref idref="DRAWINGS">FIG. 4</figref>.</p>
<p id="p-0025" num="0024">In the sum product algorithm, which is a method of decoding LDPC codes, the computation of the variable node and the computation of the check node are repeatedly performed.</p>
<p id="p-0026" num="0025">In the variable node, as shown in <figref idref="DRAWINGS">FIG. 6</figref>, the computation of equation (1) is performed. That is, in <figref idref="DRAWINGS">FIG. 6</figref>, the message v<sub>i </sub>corresponding to the edge to be calculated is calculated by using the messages u<sub>1 </sub>and u<sub>2 </sub>from the remaining edges connected to the variable node, and the received information u<sub>0i</sub>. The messages corresponding to the other edges are also calculated similarly.</p>
<p id="p-0027" num="0026">Before describing the check node computation, equation (2) is rewritten as shown in equation (6) by using the equation a×b=exp{ln(|a|)+ln(|b|)}× sign (a)×sign (b), where sign (x) is 1 when x≧0 and is −1 when x&lt;0.</p>
<p id="p-0028" num="0027">
<maths id="MATH-US-00003" num="00003">
<math overflow="scroll">
<mtable>
  <mtr>
    <mtd>
      <mtable>
        <mtr>
          <mtd>
            <mrow>
              <msub>
                <mi>u</mi>
                <mi>j</mi>
              </msub>
              <mo>=</mo>
              <mi/>
              <mo>⁢</mo>
              <mrow>
                <mn>2</mn>
                <mo>⁢</mo>
                <mrow>
                  <msup>
                    <mi>tanh</mi>
                    <mrow>
                      <mo>-</mo>
                      <mn>1</mn>
                    </mrow>
                  </msup>
                  <mo>⁡</mo>
                  <mrow>
                    <mo>(</mo>
                    <mrow>
                      <munderover>
                        <mo>∏</mo>
                        <mrow>
                          <mi>i</mi>
                          <mo>=</mo>
                          <mn>1</mn>
                        </mrow>
                        <mrow>
                          <msub>
                            <mi>d</mi>
                            <mi>c</mi>
                          </msub>
                          <mo>-</mo>
                          <mn>1</mn>
                        </mrow>
                      </munderover>
                      <mo>⁢</mo>
                      <mrow>
                        <mi>tanh</mi>
                        <mo>⁢</mo>
                        <mrow>
                          <mo>(</mo>
                          <mfrac>
                            <msub>
                              <mi>v</mi>
                              <mi>i</mi>
                            </msub>
                            <mn>2</mn>
                          </mfrac>
                          <mo>)</mo>
                        </mrow>
                      </mrow>
                    </mrow>
                    <mo>)</mo>
                  </mrow>
                </mrow>
              </mrow>
            </mrow>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mrow>
              <mo>=</mo>
              <mi/>
              <mo>⁢</mo>
              <mrow>
                <mn>2</mn>
                <mo>⁢</mo>
                <mrow>
                  <msup>
                    <mi>tanh</mi>
                    <mrow>
                      <mo>-</mo>
                      <mn>1</mn>
                    </mrow>
                  </msup>
                  <mo>⁡</mo>
                  <mrow>
                    <mo>[</mo>
                    <mrow>
                      <mi>exp</mi>
                      <mo>⁢</mo>
                      <mrow>
                        <mo>{</mo>
                        <mrow>
                          <munderover>
                            <mo>∑</mo>
                            <mrow>
                              <mi>i</mi>
                              <mo>=</mo>
                              <mn>1</mn>
                            </mrow>
                            <mrow>
                              <msub>
                                <mi>d</mi>
                                <mi>c</mi>
                              </msub>
                              <mo>-</mo>
                              <mn>1</mn>
                            </mrow>
                          </munderover>
                          <mo>⁢</mo>
                          <mrow>
                            <mi>ln</mi>
                            <mo>⁡</mo>
                            <mrow>
                              <mo>(</mo>
                              <mrow>
                                <mo></mo>
                                <mrow>
                                  <mi>tanh</mi>
                                  <mo>⁢</mo>
                                  <mrow>
                                    <mo>(</mo>
                                    <mfrac>
                                      <msub>
                                        <mi>v</mi>
                                        <mi>i</mi>
                                      </msub>
                                      <mn>2</mn>
                                    </mfrac>
                                    <mo>)</mo>
                                  </mrow>
                                </mrow>
                                <mo></mo>
                              </mrow>
                              <mo>)</mo>
                            </mrow>
                          </mrow>
                        </mrow>
                        <mo>}</mo>
                      </mrow>
                      <mo>×</mo>
                      <mrow>
                        <munderover>
                          <mo>∏</mo>
                          <mrow>
                            <mi>i</mi>
                            <mo>=</mo>
                            <mn>1</mn>
                          </mrow>
                          <mrow>
                            <msub>
                              <mi>d</mi>
                              <mi>c</mi>
                            </msub>
                            <mo>-</mo>
                            <mn>1</mn>
                          </mrow>
                        </munderover>
                        <mo>⁢</mo>
                        <mrow>
                          <mi>sign</mi>
                          <mo>⁡</mo>
                          <mrow>
                            <mo>(</mo>
                            <mrow>
                              <mi>tanh</mi>
                              <mo>⁡</mo>
                              <mrow>
                                <mo>(</mo>
                                <mfrac>
                                  <msub>
                                    <mi>v</mi>
                                    <mi>i</mi>
                                  </msub>
                                  <mn>2</mn>
                                </mfrac>
                                <mo>)</mo>
                              </mrow>
                            </mrow>
                            <mo>)</mo>
                          </mrow>
                        </mrow>
                      </mrow>
                    </mrow>
                    <mo>]</mo>
                  </mrow>
                </mrow>
              </mrow>
            </mrow>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mrow>
              <mo>=</mo>
              <mi/>
              <mo>⁢</mo>
              <mrow>
                <mn>2</mn>
                <mo>⁢</mo>
                <mrow>
                  <msup>
                    <mi>tanh</mi>
                    <mrow>
                      <mo>-</mo>
                      <mn>1</mn>
                    </mrow>
                  </msup>
                  <mo>⁡</mo>
                  <mrow>
                    <mo>[</mo>
                    <mrow>
                      <mi>exp</mi>
                      <mo>⁢</mo>
                      <mrow>
                        <mo>{</mo>
                        <mrow>
                          <mo>-</mo>
                          <mrow>
                            <mo>(</mo>
                            <mrow>
                              <munderover>
                                <mo>∑</mo>
                                <mrow>
                                  <mi>i</mi>
                                  <mo>=</mo>
                                  <mn>1</mn>
                                </mrow>
                                <mrow>
                                  <msub>
                                    <mi>d</mi>
                                    <mi>c</mi>
                                  </msub>
                                  <mo>-</mo>
                                  <mn>1</mn>
                                </mrow>
                              </munderover>
                              <mo>⁢</mo>
                              <mrow>
                                <mo>-</mo>
                                <mrow>
                                  <mi>ln</mi>
                                  <mo>⁡</mo>
                                  <mrow>
                                    <mo>(</mo>
                                    <mrow>
                                      <mi>tanh</mi>
                                      <mo>⁡</mo>
                                      <mrow>
                                        <mo>(</mo>
                                        <mfrac>
                                          <mrow>
                                            <mo></mo>
                                            <msub>
                                              <mi>v</mi>
                                              <mi>i</mi>
                                            </msub>
                                            <mo></mo>
                                          </mrow>
                                          <mn>2</mn>
                                        </mfrac>
                                        <mo>)</mo>
                                      </mrow>
                                    </mrow>
                                    <mo>)</mo>
                                  </mrow>
                                </mrow>
                              </mrow>
                            </mrow>
                            <mo>)</mo>
                          </mrow>
                        </mrow>
                        <mo>}</mo>
                      </mrow>
                    </mrow>
                    <mo>]</mo>
                  </mrow>
                </mrow>
                <mo>×</mo>
                <mrow>
                  <munderover>
                    <mo>∏</mo>
                    <mrow>
                      <mi>i</mi>
                      <mo>=</mo>
                      <mn>1</mn>
                    </mrow>
                    <mrow>
                      <msub>
                        <mi>d</mi>
                        <mi>c</mi>
                      </msub>
                      <mo>-</mo>
                      <mn>1</mn>
                    </mrow>
                  </munderover>
                  <mo>⁢</mo>
                  <mrow>
                    <mi>sign</mi>
                    <mo>(</mo>
                    <msub>
                      <mi>v</mi>
                      <mi>i</mi>
                    </msub>
                    <mo>)</mo>
                  </mrow>
                </mrow>
              </mrow>
            </mrow>
          </mtd>
        </mtr>
      </mtable>
    </mtd>
    <mtd>
      <mrow>
        <mo>(</mo>
        <mn>6</mn>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
</maths>
</p>
<p id="p-0029" num="0028">Furthermore, in the case of x≧0, when the definition φ(x)=ln(tan h(x/2)) is made, since φ<sup>−1</sup>(x)=2 tan h<sup>−1</sup>(e<sup>−x</sup>), equation (6) can be written as equation (7).</p>
<p id="p-0030" num="0029">
<maths id="MATH-US-00004" num="00004">
<math overflow="scroll">
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <msub>
          <mi>u</mi>
          <mi>j</mi>
        </msub>
        <mo>=</mo>
        <mrow>
          <mrow>
            <msup>
              <mi>ϕ</mi>
              <mrow>
                <mo>-</mo>
                <mn>1</mn>
              </mrow>
            </msup>
            <mo>⁡</mo>
            <mrow>
              <mo>(</mo>
              <mrow>
                <munderover>
                  <mo>∑</mo>
                  <mrow>
                    <mi>i</mi>
                    <mo>=</mo>
                    <mn>1</mn>
                  </mrow>
                  <mrow>
                    <msub>
                      <mi>d</mi>
                      <mi>c</mi>
                    </msub>
                    <mo>-</mo>
                    <mn>1</mn>
                  </mrow>
                </munderover>
                <mo>⁢</mo>
                <mrow>
                  <mi>ϕ</mi>
                  <mo>⁡</mo>
                  <mrow>
                    <mo>(</mo>
                    <mrow>
                      <mo></mo>
                      <msub>
                        <mi>v</mi>
                        <mi>i</mi>
                      </msub>
                      <mo></mo>
                    </mrow>
                    <mo>)</mo>
                  </mrow>
                </mrow>
              </mrow>
              <mo>)</mo>
            </mrow>
          </mrow>
          <mo>×</mo>
          <mrow>
            <munderover>
              <mo>∏</mo>
              <mrow>
                <mi>i</mi>
                <mo>=</mo>
                <mn>1</mn>
              </mrow>
              <mrow>
                <msub>
                  <mi>d</mi>
                  <mi>c</mi>
                </msub>
                <mo>-</mo>
                <mn>1</mn>
              </mrow>
            </munderover>
            <mo>⁢</mo>
            <mrow>
              <mi>sign</mi>
              <mo>⁡</mo>
              <mrow>
                <mo>(</mo>
                <msub>
                  <mi>v</mi>
                  <mi>i</mi>
                </msub>
                <mo>)</mo>
              </mrow>
            </mrow>
          </mrow>
        </mrow>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>(</mo>
        <mn>7</mn>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
</maths>
</p>
<p id="p-0031" num="0030">In the check node, as shown in <figref idref="DRAWINGS">FIG. 7</figref>, the computation of equation (7) is performed. That is, in <figref idref="DRAWINGS">FIG. 7</figref>, the message u<sub>j </sub>corresponding to the edge for which a calculation is to be performed is calculated by using the messages v<sub>1</sub>, v<sub>2</sub>, V<sub>3</sub>, V<sub>4</sub>, and v<sub>5 </sub>from the remaining edges connected to the check node. The messages corresponding to the other edges are also calculated similarly.</p>
<p id="p-0032" num="0031">The function φ(x) can also be expressed as φ(x)=ln((e<sup>x</sup>+1)/(e<sup>x</sup>−1)) and when x&gt;0, φ(x)=φ<sup>−1</sup>(x). When the functions φ(x) and φ<sup>−1</sup>(x) are implemented as hardware, there are cases in which they are implemented using an LUT (Look-Up Table), and both of them are the same LUT.</p>
<p id="p-0033" num="0032">When the sum product algorithm is implemented as hardware, it is necessary to repeatedly perform the variable node computation expressed by equation (1) and the check node computation expressed by equation (7) with an appropriate circuit scale and at an appropriate operating frequency.</p>
<p id="p-0034" num="0033">As an example of the implementation of the decoding apparatus, a description is given first of an implementation method in a case where decoding is performed by simply performing the computation of each node one-by-one in sequence (full serial decoding).</p>
<p id="p-0035" num="0034">It is assumed here that, for example, codes (a coding rate of ⅔, and a code length of 90) represented by a 30 (rows)×90 (columns) check matrix of <figref idref="DRAWINGS">FIG. 8</figref> are decoded. The number of 1s of the check matrix of <figref idref="DRAWINGS">FIG. 8</figref> is 269; therefore, in the Tanner graph, the number of edges becomes 269. Here, in the check matrix of <figref idref="DRAWINGS">FIG. 8</figref>, 0 is represented by “.”.</p>
<p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. 9</figref> shows an example of the configuration of a decoding apparatus for decoding LDPC codes once.</p>
<p id="p-0037" num="0036">In the decoding apparatus of <figref idref="DRAWINGS">FIG. 9</figref>, a message corresponding to one edge is calculated for each clock at which it operates.</p>
<p id="p-0038" num="0037">More specifically, the decoding apparatus of <figref idref="DRAWINGS">FIG. 9</figref> includes two memories <b>100</b> and <b>102</b> for edges, one check node calculator <b>101</b>, and one variable node calculator <b>103</b>, one memory <b>104</b> for reception, and one control section <b>105</b>.</p>
<p id="p-0039" num="0038">In the decoding apparatus of <figref idref="DRAWINGS">FIG. 9</figref>, message data is read one-by-one from the memory <b>100</b> or <b>102</b> for edges, and by using the message data, the message data corresponding to the desired edge is calculated. Then, the message data determined by that calculation is stored one-by-one in the memory <b>100</b> or <b>102</b> for edges at a subsequent stage. When iterative decoding is to be performed, the iterative decoding is realized by serially concatenating a plurality of the decoding apparatuses of <figref idref="DRAWINGS">FIG. 9</figref> for decoding LDPC codes once or by repeatedly using the decoding apparatus of <figref idref="DRAWINGS">FIG. 9</figref>. Here, it is assumed that, for example, a plurality of the decoding apparatuses of <figref idref="DRAWINGS">FIG. 9</figref> are connected.</p>
<p id="p-0040" num="0039">The memory <b>100</b> for edges stores messages D<b>100</b> supplied from the variable node calculator <b>103</b> of the decoding apparatus (not shown) at a previous stage in the order in which the check node calculator <b>101</b> at a subsequent stage reads them. Then, at the phase of the check node calculation, the memory <b>100</b> for edges supplies, to the check node calculator <b>101</b>, the messages D<b>100</b> as a message output D<b>101</b> in the order in which they are stored.</p>
<p id="p-0041" num="0040">Based on the control signal D<b>106</b> supplied from the control section <b>105</b>, the check node calculator <b>101</b> performs a computation in accordance with equation (7) by using the message D<b>101</b> supplied from the memory <b>100</b> for edges, and supplies a message D<b>102</b> determined by that computation to the memory <b>102</b> for edges at a subsequent stage.</p>
<p id="p-0042" num="0041">The memory <b>102</b> for edges stores the messages D<b>102</b> supplied from the check node calculator <b>101</b> at a previous stage in the order in which the variable node calculator <b>103</b> at a subsequent stage reads them. Then, at the phase of the variable node calculation, the memory <b>102</b> for edges supplies the message D<b>102</b> as a message D<b>103</b> to the variable node calculator <b>103</b> in the order in which they are stored.</p>
<p id="p-0043" num="0042">Furthermore, a control signal D<b>107</b> is supplied to the variable node calculator <b>103</b> from the control section <b>105</b>, and received data D<b>104</b> is supplied thereto from the memory <b>104</b> for reception. Based on a control signal D<b>107</b>, the variable node calculator <b>103</b> performs a computation in accordance with equation (1) by using the message D<b>103</b> supplied from the memory <b>100</b> for edges and the received data D<b>104</b> supplied from the memory <b>100</b> for reception, and supplies a message D<b>105</b> obtained as a result of the computation to the memory <b>100</b> for edges, of the decoding apparatus (not shown) at a subsequent stage.</p>
<p id="p-0044" num="0043">In the memory <b>104</b> for reception, received data (LDPC codes) that are converted into LDPC codes are stored. The control section <b>105</b> supplies a control signal D<b>106</b> for controlling a variable node computation and a control signal D<b>107</b> for controlling a check node computation to the check node calculator <b>101</b> and the variable node calculator <b>103</b>, respectively. The control section <b>105</b> supplies the control signal D<b>106</b> to the check node calculator <b>101</b> when the messages of all the edges are stored in the memory <b>100</b> for edges, and the control section <b>105</b> supplies the control signal D<b>107</b> to the variable node calculator <b>103</b> when the messages of all the edges are stored in the memory <b>102</b> for edges.</p>
<p id="p-0045" num="0044"><figref idref="DRAWINGS">FIG. 10</figref> shows an example of the configuration of the check node calculator <b>101</b> of <figref idref="DRAWINGS">FIG. 9</figref> for performing check node computations one-by-one.</p>
<p id="p-0046" num="0045">In <figref idref="DRAWINGS">FIG. 10</figref>, the check node calculator <b>101</b> is shown by assuming that each message, together with the sign bit, is quantized into a total of six bits. Furthermore, in <figref idref="DRAWINGS">FIG. 10</figref>, a check node computation of LDPC codes represented by the check matrix of <figref idref="DRAWINGS">FIG. 8</figref> is performed. Furthermore, a clock ck is supplied to the check node calculator <b>101</b> of <figref idref="DRAWINGS">FIG. 10</figref>, this clock ck being supplied to necessary blocks. Each block performs processing in synchronization with the clock ck.</p>
<p id="p-0047" num="0046">Based on, for example, a 1-bit control signal D<b>106</b> supplied from the control section <b>105</b>, the check node calculator <b>101</b> of <figref idref="DRAWINGS">FIG. 10</figref> performs computations in accordance with equation (7) by using the messages D<b>101</b> that are read one-by-one from the memory <b>100</b> for edges.</p>
<p id="p-0048" num="0047">More specifically, in the check node calculator <b>101</b>, 6-bit messages D<b>101</b> (messages v<sub>i</sub>) from the variable node, corresponding to each column of the check matrix, are read one-by-one, the absolute value D<b>122</b> (|v<sub>i</sub>|), which is the lower-order bits thereof, is supplied to the LUT <b>121</b>, and a sign bit D<b>121</b>, which is the highest bit thereof, is supplied to an EXOR circuit <b>129</b> and an FIFO (First In First Out) memory <b>133</b>, respectively. Furthermore, the control signal D<b>106</b> is supplied to the check node calculator <b>101</b> from the control section <b>105</b>, and the control signal D<b>106</b> is supplied to a selector <b>124</b> and a selector <b>131</b>.</p>
<p id="p-0049" num="0048">The LUT <b>121</b> reads a 5-bit computation result D<b>123</b> (φ(|v<sub>i</sub>|)) such that the computation of φ(|v<sub>i</sub>|) in equation (7) is performed on the absolute value D<b>122</b> (|v<sub>i</sub>|), and supplies it to an adder <b>122</b> and an FIFO memory <b>127</b>.</p>
<p id="p-0050" num="0049">The adder <b>122</b> integrates the computation results D<b>123</b> by adding together the computation results D<b>123</b> (φ(|v<sub>i</sub>|)) and a 9-bit value D<b>124</b> stored in a register <b>123</b>, and stores the 9-bit integration value obtained thereby in the register <b>123</b> again. When the computation results for the absolute values D<b>122</b> (|v<sub>i</sub>|) of the messages D<b>101</b> from all the edges over one row of the check matrix are integrated, the register <b>123</b> is reset.</p>
<p id="p-0051" num="0050">When the messages D<b>101</b> over one row of the check matrix are read one-by-one and the integrated value such that the computation results D<b>123</b> for one row is stored in the register <b>123</b>, the control signal D<b>106</b> supplied from the control section <b>105</b> changes from 0 to 1. For example, when the row weight is “9”, the control signal D<b>106</b> is “0” at the first to eighth clocks, and is “1” at the ninth clock.</p>
<p id="p-0052" num="0051">When the control signal D<b>106</b> is “1”, the selector <b>124</b> selects the value stored in the register <b>123</b>, that is, the 9-bit value D<b>124</b> (Σφ(|v<sub>i</sub>|) from i=1 to i=d<sub>c</sub>) such that φ(|v<sub>i</sub>|) determined from the messages D<b>101</b> (messages v<sub>i</sub>) from all the edges over one row of the check matrix, and outputs the value as a value D<b>125</b> to a register <b>125</b>, whereby it is stored. The register <b>125</b> supplies the stored value D<b>125</b> as a 9-bit value D<b>126</b> to the selector <b>124</b> and the adder <b>126</b>. When the control signal D<b>106</b> is “0”, the selector <b>124</b> selects the value D<b>126</b> supplied from the register <b>125</b>, and outputs the value to the selector <b>124</b>, whereby it is stored again. That is, until φ(|v<sub>i</sub>|) determined from the messages D<b>101</b> (messages v<sub>i</sub>) from all the edges over one row of the check matrix are integrated, the register <b>125</b> supplies the previously integrated φ(|v<sub>i</sub>|) to the selector <b>124</b> and the adder <b>126</b>.</p>
<p id="p-0053" num="0052">On the other hand, the FIFO memory <b>127</b> delays the computation results D<b>123</b> (φ(|(|v<sub>i</sub>|)) output by the LUT <b>121</b> until a new value D<b>126</b> (Σφ(|v<sub>i</sub>|) from i=1 to i=d<sub>c</sub>) is output from the register <b>125</b>, and supplies them as a 5-bit value D<b>127</b> to a subtractor <b>126</b>. The subtractor <b>126</b> subtracts, from the value D<b>126</b> supplied from the register <b>125</b>, the value D<b>127</b> supplied from the FIFO memory <b>127</b>, and supplies the subtracted result as a 5-bit subtracted value D<b>128</b> to the LUT <b>128</b>. That is, the subtractor <b>126</b> subtracts φ(|v<sub>i</sub>|) determined from the messages D<b>101</b> (messages v<sub>i</sub>) from the edge to be determined, from the integrated value of φ(|v<sub>i</sub>|) determined from the messages D<b>101</b> (messages v<sub>i</sub>) from all the edges over one row of the check matrix, and supplies the subtracted value (Σφ(|v<sub>i</sub>|) from i=1 to i=d<sub>c</sub>−1) as a subtracted value D<b>128</b> to the LUT <b>128</b>.</p>
<p id="p-0054" num="0053">The LUT <b>128</b> outputs the 5-bit computation results D<b>129</b> (φ<sup>−1</sup>(Σφ(|v<sub>i</sub>|))) such that the computation of φ<sup>−1</sup>(Σφ(|v<sub>i</sub>|)) in equation (7) is performed on the subtracted value D<b>128</b> (Σφ(|v<sub>i</sub>|) from i=1 to i=d<sub>c</sub>−1).</p>
<p id="p-0055" num="0054">In parallel with the above processing, the EXOR circuit <b>129</b> performs a multiplication of sign bits by computing the exclusive OR of a 1-bit value D<b>131</b> stored in a register <b>130</b> and the sign bit D<b>121</b>, and stores the 1-bit multiplication result D<b>130</b> in the register <b>130</b> again. When the sign bits D<b>121</b> of the messages D<b>101</b> from all the edges over one row of the check matrix are multiplied, the register <b>130</b> is reset.</p>
<p id="p-0056" num="0055">When the multiplied results D<b>130</b> (Πsign (v<sub>i</sub>) from i=1 to d<sub>c</sub>) such that the sign bits D<b>121</b> of the messages D<b>101</b> from all the edges over one row of the check matrix are multiplied are stored, the control signal D<b>106</b> supplied from the control section <b>105</b> changes from “0” to “1”.</p>
<p id="p-0057" num="0056">When the control signal D<b>106</b> is “1”, the selector <b>131</b> selects the value stored in the register <b>130</b>, that is, the value D<b>131</b> (Πsign (v<sub>i</sub>) from i=1 to i=d<sub>c</sub>) such that the sign bits D<b>121</b> of the messages D<b>101</b> from all the edges over one row of the check matrix are multiplied, and outputs the value as a 1-bit value D<b>133</b> to a register <b>132</b>, whereby it is stored. The register <b>132</b> supplies the stored value D<b>132</b> as a 1-bit value D<b>132</b> to the selector <b>131</b> and the EXOR circuit <b>134</b>. When the control signal D<b>106</b> is “0”, the selector <b>131</b> selects a value D<b>133</b> supplied from the register <b>132</b>, and outputs the value to the register <b>132</b>, whereby it is stored again. That is, until the sign bits D<b>121</b> of the messages D<b>101</b> (messages v<sub>i</sub>) from all the edges over one row of the check matrix are multiplied, the register <b>132</b> supplies the value stored at the previous time to the selector <b>131</b> and the EXOR circuit <b>134</b>.</p>
<p id="p-0058" num="0057">On the other hand, the FIFO memory <b>133</b> delays the sign bits D<b>121</b> until a new value D<b>133</b> (Πsign (v<sub>i</sub>) from i=1 to i=d<sub>c</sub>) is supplied from the register <b>132</b> to the EXOR circuit <b>134</b>, and supplies the result as a 1-bit value D<b>134</b> to the EXOR circuit <b>134</b>. The EXOR circuit <b>134</b> divides the value D<b>133</b> by the value D<b>134</b> by computing the exclusive OR of the value D<b>133</b> supplied from the register <b>132</b> and the value D<b>134</b> supplied from the FIFO memory <b>133</b>, and outputs a 1-bit divided result as a divided value D<b>135</b>. That is, the EXOR circuit <b>134</b> divides the multiplication value of the sign bits D<b>121</b> (sign (|v<sub>i</sub>|)) of the messages D<b>101</b> from all the edges over one row of the check matrix by the sign bits D<b>121</b> (sign (|v<sub>i</sub>|)) of the messages D<b>101</b> from the edge to be determined, and outputs the divided value (Πsign (|v<sub>i</sub>|) from i=1 to i=d<sub>c</sub>−1) as a divided value D<b>135</b>.</p>
<p id="p-0059" num="0058">In the check node calculator <b>101</b>, a total of six bits such that the 5-bit computation result D<b>129</b> output from the LUT <b>128</b> is the lower-order 5 bits and the 1-bit divided value D<b>135</b> output from the EXOR circuit <b>134</b> is the highest-order bit is output as a message D<b>102</b> (message u<sub>j</sub>).</p>
<p id="p-0060" num="0059">As described above, in the check node calculator <b>101</b>, the computation of equation (7) is performed, and a message u<sub>j </sub>is determined.</p>
<p id="p-0061" num="0060">Since the maximum of the row weight of the check matrix of <figref idref="DRAWINGS">FIG. 8</figref> is 9, that is, since the maximum number of the messages supplied to the check node is 9, the check node calculator <b>101</b> has an FIFO memory <b>127</b> and the FIFO memory <b>133</b> for delaying nine messages (φ(|v<sub>i</sub>|)). When a message of the row whose weight is less than 9 is to be calculated, the amount of delay in the FIFO memory <b>127</b> and the FIFO memory <b>133</b> is reduced to the value of the row weight.</p>
<p id="p-0062" num="0061"><figref idref="DRAWINGS">FIG. 11</figref> shows an example of the configuration of the variable node calculator <b>103</b> of <figref idref="DRAWINGS">FIG. 9</figref>, for performing variable node calculations one-by-one.</p>
<p id="p-0063" num="0062">In <figref idref="DRAWINGS">FIG. 11</figref>, the variable node calculator <b>103</b> is shown by assuming that each message, together with the sign bit, is quantized into a total of six bits. In <figref idref="DRAWINGS">FIG. 11</figref>, the variable node computation of LDPC codes represented by the check matrix of <figref idref="DRAWINGS">FIG. 8</figref> is performed. Furthermore, a clock ck is supplied to the variable node calculator <b>103</b> of <figref idref="DRAWINGS">FIG. 11</figref>, and the clock ck is supplied to necessary blocks. Each block performs processing in synchronization with the clock ck.</p>
<p id="p-0064" num="0063">Based on, for example, a 1-bit control signal D<b>107</b> supplied from the control section <b>105</b>, the variable node calculator <b>103</b> of <figref idref="DRAWINGS">FIG. 11</figref> performs computations in accordance with equation (1) by using the messages D<b>103</b> that are read one-by-one from the memory <b>102</b> for edges and the received data D<b>104</b> that is read from the memory <b>104</b> for reception.</p>
<p id="p-0065" num="0064">More specifically, in the variable node calculator <b>103</b>, 6-bit messages D<b>103</b> (messages u<sub>j</sub>) from the check node corresponding to each row of the check matrix is read one-by-one, and the messages D<b>103</b> are supplied to the adder <b>151</b> and the FIFO memory <b>155</b>. Furthermore, in the variable node calculator <b>103</b>, 6-bit received data D<b>104</b> are read one-by-one from the memory <b>104</b> for reception, and is supplied to the adder <b>156</b>. Furthermore, a control signal D<b>107</b> is supplied to the variable node calculator <b>103</b> from the control section <b>105</b>, and the control signal D<b>107</b> is supplied to a selector <b>153</b>.</p>
<p id="p-0066" num="0065">The adder <b>151</b> integrates the messages D<b>103</b> by adding together the messages D<b>103</b> (messages u<sub>j</sub>) and a 9-bit value D<b>151</b> stored in the register <b>152</b>, and stores the 9-bit integrated value in the register <b>152</b> again. When the message D<b>103</b> from all the edges over one row of the check matrix are integrated, the register <b>152</b> is reset.</p>
<p id="p-0067" num="0066">When the messages D<b>103</b> from all the edges over one row of the check matrix are read one-by-one, and the value such that the messages D<b>103</b> for one column are integrated is stored in the register <b>152</b>, the control signal D<b>107</b> supplied from the control section <b>105</b> changes from “0” to “1”. For example, when the column weight is “5”, the control signal D<b>107</b> is “0” at the first clock up to the fourth clock and is “0” at the fifth clock.</p>
<p id="p-0068" num="0067">When the control signal D<b>107</b> is “1”, the selector <b>153</b> selects the value stored in the register <b>152</b>, that is, a 9-bit value D<b>151</b> (Σu<sub>j </sub>from j=1 to d<sub>v</sub>) such that the messages D<b>103</b> (messages u<sub>j</sub>) from all the edges over one row of the check matrix are integrated, and outputs the value to the register <b>154</b>, whereby it is stored. The register <b>154</b> supplies the stored value D<b>151</b> as a 9-bit value D<b>152</b> to the selector <b>153</b> and the adder-subtractor <b>156</b>. When the control signal D<b>107</b> is “0”, the selector <b>153</b> selects a value D<b>152</b> supplied from the register <b>154</b>, and outputs the value to a register <b>154</b>, whereby it is stored again. That is, until the messages D<b>103</b> (messages u<sub>j</sub>) from all the edges over one row of the check matrix are integrated, the register <b>154</b> supplies the previously integrated value to the selector <b>153</b> and the adder-subtractor <b>156</b>.</p>
<p id="p-0069" num="0068">On the other hand, the FIFO memory <b>155</b> delays the message D<b>103</b> from the check node until a new value D<b>152</b> (Σu<sub>j </sub>from j=1 to d<sub>v</sub>) is output from the register <b>154</b>, and supplies it as a 6-bit value D<b>153</b> to the adder-subtractor <b>156</b>. The adder-subtractor <b>156</b> subtracts the value D<b>153</b> supplied from the FIFO memory <b>155</b>, from the value D<b>152</b> supplied from the register <b>154</b>. That is, the adder-subtractor <b>156</b> subtracts the message u<sub>j </sub>from the edge to be determined, from the integrated value of the messages D<b>103</b> (messages u<sub>j</sub>) from all the edges over one row of the check matrix, and determines the subtracted value (Σu<sub>j </sub>from j=1 to d<sub>v</sub>−1). Furthermore, the adder-subtractor <b>156</b> adds the received data D<b>104</b> supplied from the memory <b>104</b> for reception to the subtracted value (Σu<sub>j </sub>from j=1 to d<sub>v</sub>1), and outputs the 6-bit value obtained thereby as a message D<b>105</b> (message v<sub>i</sub>).</p>
<p id="p-0070" num="0069">As described above, in the variable node calculator <b>103</b>, the computation of equation (1) is performed, and the message v<sub>i </sub>is determined.</p>
<p id="p-0071" num="0070">Since the maximum of the column weight of the check matrix of <figref idref="DRAWINGS">FIG. 8</figref> is 5, that is, since the maximum number of the messages supplied to the variable node is 5, the variable node calculator <b>103</b> has an FIFO memory <b>155</b> for delaying five messages (u<sub>j</sub>). When a message of a column whose weight is less than 5 is to be calculated, the amount of delay in the FIFO memory <b>155</b> is reduced to the value of the column weight.</p>
<p id="p-0072" num="0071">In the decoding apparatus of <figref idref="DRAWINGS">FIG. 9</figref>, a control signal is supplied from the control section <b>105</b> in accordance with the weight of the check matrix. According to the decoding apparatus of <figref idref="DRAWINGS">FIG. 9</figref>, if only the capacities of the memories for edges <b>100</b> and <b>102</b> and the FIFO memories <b>127</b>, <b>133</b>, and <b>155</b> of the check node calculator <b>101</b> and the variable node calculator <b>103</b> are sufficient, LDPC codes of various check matrices can be decoded by changing only the control signal.</p>
<p id="p-0073" num="0072">Although not shown, in the decoding apparatus of <figref idref="DRAWINGS">FIG. 9</figref>, at the final stage of the decoding, instead of the variable node calculation of equation (1), the computation of equation (5) is performed, and the computation result is output as the final decoded result.</p>
<p id="p-0074" num="0073">When LDPC codes are decoded by repeatedly using the decoding apparatus of <figref idref="DRAWINGS">FIG. 9</figref>, the check node computation and the variable node computation are alternately performed. That is, in the decoding apparatus of <figref idref="DRAWINGS">FIG. 9</figref>, a variable node computation is performed by the variable node calculator <b>103</b> by using the result of the check node computation by the check node calculator <b>101</b>, and a check node computation is performed by the check node calculator <b>101</b> by using the result of the variable node computation by the variable node calculator <b>103</b>.</p>
<p id="p-0075" num="0074">Therefore, for performing one decoding using the check matrix having 269 edges of <figref idref="DRAWINGS">FIG. 8</figref>, 269×2=538 clocks are required. For example, in order to perform 50 iterative decodings, 538×50=26900 clock operations are necessary while one frame in which 90 codes (received data) are set as one frame, which is the code length, is received, and thus, a high-speed operation approximately 300 (≅26900/90) times as high as the receiving frequency becomes necessary. If the receiving frequency is assumed to be several tens of MHz, operation at a speed of GHz or higher is required.</p>
<p id="p-0076" num="0075">Furthermore, in a case where, for example, 50 decoding apparatuses of <figref idref="DRAWINGS">FIG. 9</figref> are concatenated to decode LDPC codes, a plurality of variable node calculations and check node calculations can be performed simultaneously. For example, while a variable node computation of the first frame is being performed, a check node computation of the second frame is performed, and a variable node computation of the third frame is performed. In this case, while 90 codes are received, since 269 edges need to be calculated, the decoding apparatus needs to operate at a frequency approximately 3 (≅269/90) times as high as the receiving frequency, and thus realization is sufficiently possible. However, in this case, the circuit scale becomes, in simple terms, 50 times as large as the decoding apparatus of <figref idref="DRAWINGS">FIG. 9</figref>.</p>
<p id="p-0077" num="0076">Next, a description is given of the implementation method of the decoding apparatus in a case where decoding is performed by simultaneously performing computations of all the nodes (full parallel decoding).</p>
<p id="p-0078" num="0077">This implementation method is described in, for example, C. Howland and A. Blanksby, “Parallel Decoding Architectures for Low Density Parity Check Codes”, Symposium on Circuits and Systems, 2001.</p>
<p id="p-0079" num="0078"><figref idref="DRAWINGS">FIGS. 12A to 12C</figref> show the configuration of examples of the decoding apparatus for decoding the codes (a coding rate of ⅔, and a code length of 90) represented by the check matrix of <figref idref="DRAWINGS">FIG. 8</figref>. <figref idref="DRAWINGS">FIG. 12A</figref> shows the overall configuration of the decoding apparatus. <figref idref="DRAWINGS">FIG. 12B</figref> shows the detailed configuration of the upper portion in the figure surrounded by the dotted line B, of the decoding apparatus of <figref idref="DRAWINGS">FIG. 12A</figref>. <figref idref="DRAWINGS">FIG. 12C</figref> shows the detailed configuration of the lower portion in the figure surrounded by the dotted line C, of the decoding apparatus of <figref idref="DRAWINGS">FIG. 12A</figref>.</p>
<p id="p-0080" num="0079">The decoding apparatus of <figref idref="DRAWINGS">FIGS. 12A to 12C</figref> includes one memory <b>205</b> for reception, two edge interchange devices <b>200</b> and <b>203</b>, two memories <b>202</b> and <b>206</b> for edges, a check node calculator <b>201</b> made up of 30 check node calculators <b>201</b><sub>1 </sub>to <b>201</b><sub>30</sub>, and a variable node calculator <b>204</b> made up of 90 variable node calculators <b>204</b><sub>1 </sub>to <b>204</b><sub>90</sub>.</p>
<p id="p-0081" num="0080">In the decoding apparatus of <figref idref="DRAWINGS">FIGS. 12A to 12C</figref>, all the message data corresponding to 269 edges is read simultaneously from the memory <b>202</b> or <b>206</b> for edges, and by using the message data, new message data corresponding to the 269 edges is computed. Furthermore, all the new message data determined as a result of the computation is simultaneously stored in the memory <b>206</b> or <b>202</b> for edges at a subsequent stage. By repeatedly using the decoding apparatus of <figref idref="DRAWINGS">FIGS. 12A to 12C</figref>, iterative decoding is realized. Each section will now be described below in detail.</p>
<p id="p-0082" num="0081">The memory <b>206</b> for edges simultaneously stores all the messages D<b>206</b><sub>1 </sub>to D<b>206</b><sub>90 </sub>from the variable node calculators <b>204</b><sub>1 </sub>to <b>204</b><sub>90 </sub>at a previous stage, reads the messages D<b>206</b><sub>1 </sub>to D<b>206</b><sub>90 </sub>as messages D<b>207</b><sub>1 </sub>to D<b>207</b><sub>90 </sub>at the next clock (the timing of the next clock), and supplies them as messages D<b>200</b> (D<b>200</b><sub>1 </sub>to D<b>200</b><sub>90</sub>) to the edge interchange device <b>200</b> at the subsequent stage. The edge interchange device <b>200</b> rearranges (interchanges) the order of the messages D<b>200</b><sub>1 </sub>to D<b>200</b><sub>90 </sub>supplied from the memory <b>206</b> for edges in accordance with the check matrix of <figref idref="DRAWINGS">FIG. 8</figref>, and supplies them as messages D<b>201</b><sub>1 </sub>to D<b>201</b><sub>30 </sub>to the check node calculators <b>201</b><sub>1 </sub>to <b>201</b><sub>30</sub>.</p>
<p id="p-0083" num="0082">The check node calculators <b>201</b><sub>1 </sub>to <b>201</b><sub>30 </sub>perform a computation in accordance with equation (7) by using the messages D<b>201</b><sub>1 </sub>to D<b>201</b><sub>30 </sub>supplied from the edge interchange device <b>200</b>, and supplies the messages D<b>202</b><sub>1 </sub>to D<b>202</b><sub>30 </sub>obtained as a result of the computation to the memory <b>202</b> for edges.</p>
<p id="p-0084" num="0083">The memory <b>202</b> for edges simultaneously stores all the messages D<b>202</b><sub>1 </sub>to D<b>202</b><sub>30 </sub>supplied from the check node calculators <b>201</b><sub>1 </sub>to <b>201</b><sub>30 </sub>at the previous stage, and at the next time, supplies all the messages D<b>202</b><sub>1 </sub>to D<b>202</b><sub>30</sub>, as messages D<b>203</b><sub>1 </sub>to D<b>203</b><sub>30</sub>, to the edge interchange device <b>203</b> at the subsequent stage.</p>
<p id="p-0085" num="0084">The edge interchange device <b>203</b> rearranges the order of the messages D<b>203</b><sub>1 </sub>to D<b>203</b><sub>30 </sub>supplied from the memory <b>202</b> for edges in accordance with the check matrix of <figref idref="DRAWINGS">FIG. 8</figref>, and supplies them as messages D<b>204</b><sub>1 </sub>to D<b>204</b><sub>90 </sub>to the variable node calculators <b>204</b><sub>1 </sub>to <b>204</b><sub>90</sub>.</p>
<p id="p-0086" num="0085">The variable node calculators <b>204</b><sub>1 </sub>to <b>204</b><sub>90 </sub>perform a computation in accordance with equation (1) by using the messages D<b>204</b><sub>1 </sub>to D<b>204</b><sub>90 </sub>supplied from the edge interchange device <b>203</b> and the received data D<b>205</b><sub>1 </sub>to D<b>205</b><sub>90 </sub>supplied from the memory <b>205</b> for reception, and supplies messages D<b>206</b><sub>1 </sub>to D<b>206</b><sub>90 </sub>obtained as a result of the computation to the memory <b>206</b> for edges at the subsequent stage.</p>
<p id="p-0087" num="0086"><figref idref="DRAWINGS">FIG. 13</figref> shows an example of the configuration of a check node calculator <b>201</b><sub>m </sub>(m=1, 2, . . . , 30) of <figref idref="DRAWINGS">FIGS. 12A to 12C</figref> for simultaneously performing check node calculations.</p>
<p id="p-0088" num="0087">In the check node calculator <b>201</b><sub>m </sub>of <figref idref="DRAWINGS">FIG. 13</figref>, similarly to the check node calculator <b>101</b> of <figref idref="DRAWINGS">FIG. 10</figref>, the check node computation of equation (7) is performed, and the check node calculations are simultaneously performed for all the edges.</p>
<p id="p-0089" num="0088">More specifically, in the check node calculator <b>201</b><sub>m </sub>of <figref idref="DRAWINGS">FIG. 13</figref>, all the messages D<b>221</b><sub>1 </sub>to D<b>221</b><sub>9 </sub>(v<sub>i</sub>) from the variable node corresponding to each row of the check matrix of <figref idref="DRAWINGS">FIG. 8</figref>, which are supplied from the edge interchange device <b>200</b>, are read simultaneously, and the absolute values D<b>222</b><sub>1 </sub>to D<b>222</b><sub>9 </sub>(|v<sub>i</sub>|) which are the respective lower-order 5 bits thereof, are supplied to the LUTs <b>221</b><sub>1 </sub>to <b>221</b><sub>9</sub>, respectively. 1-bit sign bits D<b>223</b><sub>1 </sub>to D<b>223</b><sub>9</sub>, which are the highest-order bits of the message D<b>221</b><sub>1 </sub>to D<b>221</b><sub>9</sub>(v<sub>i</sub>), are supplied to the EXOR circuits <b>226</b><sub>1 </sub>to <b>226</b><sub>9</sub>, respectively, and are also supplied to the EXOR circuit <b>225</b>.</p>
<p id="p-0090" num="0089">The LUTs <b>221</b><sub>1 </sub>to <b>221</b><sub>9 </sub>read 5-bit computation results D<b>224</b><sub>1 </sub>to D<b>224</b><sub>9 </sub>(φ(|v<sub>i</sub>|)) such that the computation of φ(|v<sub>i</sub>|) in equation (7) is performed, respectively, on the absolute values D<b>222</b><sub>1 </sub>to D<b>222</b><sub>9 </sub>(|v<sub>i</sub>|), respectively, and supplies them to the respective subtractors <b>223</b><sub>1 </sub>to <b>223</b><sub>9</sub>. The LUTs <b>221</b><sub>1 </sub>to <b>221</b><sub>9 </sub>supply the computation results D<b>224</b><sub>1 </sub>to D<b>224</b><sub>9 </sub>(φ(|v<sub>i</sub>|)) to an adder <b>222</b>.</p>
<p id="p-0091" num="0090">The adder <b>222</b> computes the total sum of the values of the computation results D<b>224</b><sub>1 </sub>to D<b>224</b><sub>9 </sub>(φ(|v<sub>i</sub>|)) (the total sum of the computation results for one row), and supplies the 9-bit computation results D<b>225</b> (Σφ(|v<sub>i</sub>|) from i=1 to 9) to the subtractors <b>223</b><sub>1 </sub>to <b>223</b><sub>9</sub>. The subtractors <b>223</b><sub>1 </sub>to <b>223</b><sub>9 </sub>subtract the computation results D<b>224</b><sub>1 </sub>to D<b>224</b><sub>9 </sub>(φ(|v<sub>i</sub>|)) from the computation results D<b>225</b>, respectively, and supply the 5-bit subtracted value D<b>227</b><sub>1 </sub>to D<b>227</b><sub>9 </sub>to the LUTs <b>224</b><sub>1 </sub>to <b>224</b><sub>9</sub>. That is, the subtractors <b>223</b><sub>1 </sub>to <b>223</b><sub>9 </sub>subtract φ(|v<sub>i</sub>|) determined from the message v<sub>i </sub>from the edge to be determined, from the integrated value of φ(|v<sub>i</sub>|) determined from the message v<sub>i </sub>from all the edges, and supply the subtracted values D<b>227</b><sub>1 </sub>to D<b>227</b><sub>9 </sub>(Σφ(|v<sub>i</sub>|) from i=1 to 8) to the LUTs <b>224</b><sub>1 </sub>to <b>224</b><sub>9</sub>, respectively. The LUTs <b>224</b><sub>1 </sub>to <b>224</b><sub>9 </sub>read the 5-bit computation results D<b>228</b><sub>1 </sub>to D<b>228</b><sub>9 </sub>such that the computation of φ<sup>−1 </sup>(Σφ(|v<sub>i</sub>|)) in equation (7) is performed on the subtracted values D<b>227</b><sub>1 </sub>to D<b>227</b><sub>9</sub>, and outputs them.</p>
<p id="p-0092" num="0091">On the other hand, the EXOR circuit <b>225</b> performs a multiplication of the sign bits D<b>223</b><sub>1 </sub>to D<b>223</b><sub>9 </sub>by computing the exclusive OR of all the sign bits D<b>223</b><sub>1 </sub>to D<b>223</b><sub>9</sub>, and supplies a 1-bit multiplication value D<b>226</b> (multiplication value of the sign bits for one row (Πsign (v<sub>i</sub>) from i=1 to 9)) to the respective EXOR circuit <b>226</b><sub>1 </sub>to <b>226</b><sub>9</sub>. By computing the exclusive OR of the multiplication value D<b>226</b> and the sign bits D<b>223</b><sub>1 </sub>to D<b>223</b><sub>9</sub>, respectively, the EXOR circuits <b>226</b><sub>1 </sub>to <b>226</b><sub>9 </sub>determine 1-bit divided values D<b>229</b><sub>1 </sub>to D<b>229</b><sub>9 </sub>(Πsign (v<sub>i</sub>) from i=1 to 8) such that the multiplication value D<b>226</b> is divided by the sign bits D<b>223</b><sub>1 </sub>to D<b>223</b><sub>9</sub>, respectively, and output them.</p>
<p id="p-0093" num="0092">In the check node calculator <b>201</b><sub>m</sub>, a total of six bits such that the 5-bit computation results D<b>228</b><sub>1 </sub>to D<b>228</b><sub>9 </sub>output from the LUTs <b>224</b><sub>1 </sub>to <b>224</b><sub>9 </sub>are each made to be the five lower-order bits and the divided values D<b>229</b><sub>1 </sub>to D<b>229</b><sub>9 </sub>output from the EXOR circuits <b>226</b><sub>1 </sub>to <b>226</b><sub>9 </sub>are each made to be the highest-order bit is output as messages D<b>230</b><sub>1 </sub>to D<b>230</b><sub>9 </sub>obtained as a result of the check node computation.</p>
<p id="p-0094" num="0093">In the manner described above, in the check node calculator <b>201</b><sub>m</sub>, the computation of equation (7) is performed, and the message u<sub>j </sub>is determined.</p>
<p id="p-0095" num="0094">In <figref idref="DRAWINGS">FIG. 13</figref>, the check node calculator <b>201</b><sub>m </sub>is shown by assuming that each message, together with the sign bit, is quantized to a total of six bits. The circuit of <figref idref="DRAWINGS">FIG. 13</figref> corresponds to one check node. For the check matrix to be processed here in <figref idref="DRAWINGS">FIG. 8</figref>, since check nodes of 30 rows, which is the number of the rows thereof, exist, the decoding apparatus of <figref idref="DRAWINGS">FIGS. 12A to 12C</figref> has 30 check node calculators <b>201</b><sub>m </sub>shown in <figref idref="DRAWINGS">FIG. 13</figref>.</p>
<p id="p-0096" num="0095">In the check node calculator <b>201</b><sub>m </sub>of <figref idref="DRAWINGS">FIG. 13</figref>, nine messages can be calculated simultaneously. For the row weight of the check matrix to be processed here in <figref idref="DRAWINGS">FIG. 8</figref>, the weight of the first row is 8, and the weight of the second row is 9, that is, there is one case in which the number of messages supplied to the check node is 8 and there are nine cases in which the number of messages is 9. Therefore, the check node calculator <b>201</b><sub>1 </sub>has a circuit configuration capable of simultaneously calculating eight messages similarly to the circuit of <figref idref="DRAWINGS">FIG. 13</figref>, and the remaining check node calculators <b>201</b><sub>2 </sub>to <b>201</b><sub>30 </sub>are configured in the same way as for the circuit of <figref idref="DRAWINGS">FIG. 13</figref>.</p>
<p id="p-0097" num="0096"><figref idref="DRAWINGS">FIG. 14</figref> shows an example of the configuration of a variable node calculator <b>204</b><sub>p </sub>(p=1, 2, . . . , 90) of <figref idref="DRAWINGS">FIGS. 12A to 12C</figref> for simultaneously performing variable node computations.</p>
<p id="p-0098" num="0097">In the variable node calculators <b>204</b><sub>p </sub>of <figref idref="DRAWINGS">FIG. 14</figref>, similarly to the variable node calculator <b>103</b> of <figref idref="DRAWINGS">FIG. 11</figref>, the variable node computations of equation (1) are performed, and the variable node computations are simultaneously performed for all the edges.</p>
<p id="p-0099" num="0098">More specifically, in the variable node calculators <b>204</b><sub>p </sub>of <figref idref="DRAWINGS">FIG. 14</figref>, all the 6-bit messages D<b>251</b><sub>1 </sub>to D<b>251</b><sub>5 </sub>(messages u<sub>j</sub>) from the check node corresponding to each row of the check matrix, which are supplied from the edge interchange device <b>203</b>, are read simultaneously, and these messages are supplied to the respective adders <b>252</b><sub>1 </sub>to <b>252</b><sub>5 </sub>and are also supplied to the adder <b>251</b>. Furthermore, received data D<b>271</b> is supplied to the variable node calculator <b>204</b><sub>p </sub>from the memory <b>205</b> for reception and the received data D<b>271</b> is supplied to the adders-subtractors <b>252</b><sub>1 </sub>to <b>252</b><sub>5</sub>.</p>
<p id="p-0100" num="0099">The adder <b>251</b> integrates all the messages D<b>251</b><sub>1 </sub>to D<b>251</b><sub>5 </sub>(messages u<sub>j</sub>), and supplies a 9-bit integrated value D<b>252</b> (the total sum value of messages for one column (Σu<sub>j </sub>from j=1 to 5)) to the adders-subtractors <b>252</b><sub>1 </sub>to <b>252</b><sub>5</sub>. The adders-subtractors <b>252</b><sub>1 </sub>to <b>252</b><sub>5 </sub>subtract the messages D<b>251</b><sub>1 </sub>to D<b>251</b><sub>5 </sub>(messages u<sub>j</sub>) from the added value D<b>252</b>, respectively. That is, the adders-subtractors <b>252</b><sub>1 </sub>to <b>252</b><sub>5 </sub>subtract the messages D<b>251</b><sub>1 </sub>to D<b>251</b><sub>5 </sub>(messages u<sub>j</sub>) from the edge to be determined, from the integrated value D<b>252</b> of the messages u<sub>j </sub>from all the edges, respectively, and determine the subtracted value (Σu<sub>j </sub>from j=1 to 4).</p>
<p id="p-0101" num="0100">Furthermore, the adders-subtractors <b>252</b><sub>1 </sub>to <b>252</b><sub>5 </sub>add the received data D<b>271</b> (u<sub>0i</sub>) to the subtracted value (Σu<sub>j </sub>from j=1 to 4), and output 6-bit added values D<b>253</b><sub>1 </sub>to D<b>253</b><sub>5 </sub>as the results of the variable node computations.</p>
<p id="p-0102" num="0101">In the manner described above, in the variable node calculator <b>204</b><sub>p</sub>, the computation of equation (1) is performed, and the message v<sub>i </sub>is determined.</p>
<p id="p-0103" num="0102">In <figref idref="DRAWINGS">FIG. 14</figref>, the variable node calculators <b>204</b><sub>p </sub>is shown by assuming that each message, together with the sign bit, is quantized to six bits. The circuit of <figref idref="DRAWINGS">FIG. 14</figref> corresponds to one variable node. For the check matrix to be processed here in <figref idref="DRAWINGS">FIG. 8</figref>, since variable nodes of 90 columns, which is the number of the columns thereof, exist, the decoding apparatus of <figref idref="DRAWINGS">FIGS. 12A to 12C</figref> has 90 circuits shown in <figref idref="DRAWINGS">FIG. 14</figref>.</p>
<p id="p-0104" num="0103">In the variable node calculators <b>204</b><sub>p </sub>of <figref idref="DRAWINGS">FIG. 14</figref>, it is possible to simultaneously calculate five messages. The check matrix to be processed here in <figref idref="DRAWINGS">FIG. 8</figref> has 15, 45, 29, and 1 columns having weights of 5, 3, 2, and 1, respectively. Therefore, 15 variable node calculators out of the variable node calculators <b>204</b><sub>1 </sub>to <b>204</b><sub>90 </sub>have the same circuit configuration as that of the circuit of <figref idref="DRAWINGS">FIG. 14</figref>. The remaining 45, 29, and 1 variable node calculators have the circuit configuration capable of simultaneously calculating 3, 2, and 1 messages similarly to the circuit of <figref idref="DRAWINGS">FIG. 14</figref>.</p>
<p id="p-0105" num="0104">Although not shown, also, in the decoding apparatus of <figref idref="DRAWINGS">FIGS. 12A to 12C</figref>, similarly to the case of <figref idref="DRAWINGS">FIG. 9</figref>, at the final stage of the decoding, instead of the variable node calculation of equation (1), the computation of equation (5) is performed, and the computation result is output as the final decoded result.</p>
<p id="p-0106" num="0105">According to the decoding apparatus of <figref idref="DRAWINGS">FIGS. 12A to 12C</figref>, it is possible to simultaneously calculate all the messages corresponding to 269 edges at one clock.</p>
<p id="p-0107" num="0106">When decoding is performed by repeatedly using the decoding apparatus of <figref idref="DRAWINGS">FIGS. 12A to 12C</figref>, the check node computation and the variable node computation are alternately performed, and one decoding can be performed at two clocks. Therefore, for example, in order to perform 50 decodings, the decoding apparatus needs to operate at 2×50=100 clocks while received data in which codes having a code length of 90 are one frame is received, and thus, approximately the same operating frequency as the receiving frequency may be used. In general, since the code length of the LDPC codes is as great as several thousands to several tens of thousands, if the decoding apparatus of <figref idref="DRAWINGS">FIGS. 12A to 12C</figref> is used, the number of decodings can be greatly increased, and the improvement in the error correction performance can be expected.</p>
<p id="p-0108" num="0107">However, in the decoding apparatus of <figref idref="DRAWINGS">FIGS. 12A to 12C</figref>, since computations of messages corresponding to all the edges of a Tanner graph are performed in parallel, the circuit scale increases in proportion to the code length. When the decoding apparatus of <figref idref="DRAWINGS">FIGS. 12A to 12C</figref> is configured as an apparatus for performing the decoding of LDPC codes having a particular check matrix, of a particular code length and a particular coding rate, it is difficult for the decoding apparatus to perform the decoding of LDPC codes having another check matrix, of another code length and another coding rate. That is, unlike the decoding apparatus of <figref idref="DRAWINGS">FIG. 9</figref>, it is difficult for the decoding apparatus of <figref idref="DRAWINGS">FIGS. 12A to 12C</figref> to deal with the decoding of various codes even if the control signal is changed only, and the dependence on codes is high.</p>
<p id="p-0109" num="0108">In addition to the decoding apparatus of <figref idref="DRAWINGS">FIG. 9</figref> and <figref idref="DRAWINGS">FIGS. 12A to 12C</figref>, the implementation method for simultaneously calculating messages in units of four messages rather than one message or all messages is described in, for example, E. Yeo, P. Pakzad, B. Nikolic and V. Anantharam, “VLSI Architectures for Iterative Decoders in Magnetic Recording Channels”, IEEE Transactions on Magnetics, Vol. 37, No. 2, March 2001. In this case, there are problems in that, generally, it is not easy to avoid simultaneous read-out from or simultaneous writing to different addresses of the memory, and memory access control is difficult.</p>
<p id="p-0110" num="0109">Furthermore, a method of implementation by approximating the sum product algorithm has also been proposed. However, in this method, the deterioration of performance is caused to occur. For implementing the sum product algorithm as hardware, there are, as described above, a method in which computations of messages corresponding to the edges (a check node computation and a bit node computation) are serially performed one-by-one, a method in which all the computations of messages are performed in parallel (full parallel), and a method in which the computations of messages are performed in units of several computations in parallel (parallel).</p>
<p id="p-0111" num="0110">However, in the method in which computations of messages corresponding to the edges are performed one-by-one, a high operating frequency is required. Accordingly, as a method for increasing throughput, a method for arranging the apparatus in a pipeline structure is known. In this case, the circuit scale, in particular, (the capacity of) the memory, increases.</p>
<p id="p-0112" num="0111">In the method in which all the computations of messages are performed in parallel, the circuit scale for logic increases, and the dependence on codes is high.</p>
<p id="p-0113" num="0112">In the method in which the computations of messages are performed in units of several computations in parallel, control of memory access is difficult.</p>
<heading id="h-0003" level="1">DISCLOSURE OF INVENTION</heading>
<p id="p-0114" num="0113">The present invention has been made in view of such circumstances. An object of the present invention is to suppress the operating frequency to a sufficiently realizable range while suppressing the circuit scale for both logic and memory, and to be capable of easily controlling memory access.</p>
<p id="p-0115" num="0114">The decoding apparatus of the present invention, when using as a sub-matrix, a (P×P) unit matrix, a quasi-unit matrix in which one or more 1s, which are elements of the unit matrix, are substituted with 0, a shift matrix in which the unit matrix or the quasi-unit matrix is cyclically shifted, a sum matrix, which is the sum of two or more of the unit matrix, the quasi-unit matrix, and the shift matrix, or a (P×P) 0-matrix, a check matrix of the LDPC codes is represented by a combination of a plurality of the sub-matrices, includes: first computation means for simultaneously performing p check node computations for decoding the LDPC codes; and second computation means for simultaneously performing p variable node computations for decoding the LDPC codes.</p>
<p id="p-0116" num="0115">The first computation means may have p check node calculators for performing check node computations, and the second computation means may have p variable node calculators for performing variable node computations.</p>
<p id="p-0117" num="0116">The decoding apparatus may further include message storage means for simultaneously reading and writing message data corresponding to p edges, which is obtained as a result of the p check node computations or the p variable node computations.</p>
<p id="p-0118" num="0117">The message storage means may store message data corresponding to the edges, which is read during the check node computation in such a manner that 1s of the check matrix are packed closer in the row direction.</p>
<p id="p-0119" num="0118">The message storage means may store message data corresponding to edges, which is read during the variable node computations in such a manner that 1s of the check matrix are packed closer in the column direction.</p>
<p id="p-0120" num="0119">The message storage means may store, at the same address, messages corresponding to p edges belonging to a unit matrix whose weight is 1, a quasi-unit matrix, or a shift matrix when the sub-matrices whose weight is 2 or more from among the sub-matrices representing the check matrix are represented in the form of the sum of the unit matrix whose weight is 1, the quasi-unit matrix, or the shift matrix.</p>
<p id="p-0121" num="0120">The message storage means may include number-of-rows/p FIFOs and number-of-columns/p FIFOs, and the number-of-rows/p FIFOs and the number-of-columns/p FIFOs each have a number of words corresponding to the row weight and the column weight of the check matrix, respectively.</p>
<p id="p-0122" num="0121">The message storage means may include a RAM (Random Access Memory), and the RAM may store the message data in the read-out sequence in such a manner as to be packed closer and reads the message data in the storage position sequence.</p>
<p id="p-0123" num="0122">The decoding apparatus may further include received information storage means for storing received information of LDPC codes and for simultaneously reading p pieces of the received information.</p>
<p id="p-0124" num="0123">The received information storage means may store the received information in such a manner that the received information can be read in the sequence necessary for the variable node computation.</p>
<p id="p-0125" num="0124">The decoding apparatus may further include rearranging means for rearranging messages obtained as a result of the p check node computations or the p variable node computations.</p>
<p id="p-0126" num="0125">The rearranging means may include a barrel shifter.</p>
<p id="p-0127" num="0126">The first computation means and the second computation means may determine messages corresponding to p edges.</p>
<p id="p-0128" num="0127">The first computation means may perform some of the p check node computations and the p variable node computations, and the second computation means may perform some of the others of the p variable node computations.</p>
<p id="p-0129" num="0128">The first computation means may include p calculators for performing some of the p check node computations and the p variable node computations, and the second computation means may include p calculators for performing some of the others of the p variable node computations.</p>
<p id="p-0130" num="0129">The decoding apparatus may further include first decoding in-progress result storage means for simultaneously reading and writing first decoding in-progress results corresponding to p edges, which are obtained by the first computation means by performing some of the p check node computations and the p variable node computations.</p>
<p id="p-0131" num="0130">The first decoding in-progress result storage means may store the first decoding in-progress results corresponding to the edges, which are read when some of the others of the p variable node computations are performed, in such a manner that 1s of the check matrix are packed closer in the row direction.</p>
<p id="p-0132" num="0131">The first decoding in-progress result storage means may be two single-port RAMs (Random Access Memories).</p>
<p id="p-0133" num="0132">The two single-port RAMs may alternately store the first decoding in-progress results in units of p of the first decoding in-progress results.</p>
<p id="p-0134" num="0133">The two single-port RAMs (Random Access Memories) each may read the first decoding in-progress results stored at the same address.</p>
<p id="p-0135" num="0134">The first decoding in-progress result storage means may store, at the same address, the first decoding in-progress results corresponding to p edges belonging to a unit matrix whose weight is 1, a quasi-unit matrix, or a shift matrix when the sub-matrices whose weight is 2 or more from among the sub-matrices representing the check matrix are represented in the form of the sum of the unit matrix whose weight is 1, the quasi-unit matrix, or the shift matrix.</p>
<p id="p-0136" num="0135">The decoding apparatus may further include second decoding in-progress result storage means for simultaneously reading and writing the second decoding in-progress results corresponding to p edges, which are obtained by the second computation means by performing some of the others of the p variable node computations.</p>
<p id="p-0137" num="0136">The decoding apparatus may further include received information storage means for storing received information of LDPC codes and simultaneously reading p pieces of the received information.</p>
<p id="p-0138" num="0137">The received information storage means may store the received information in such a manner that the received information can be read in the sequence necessary for some of the others of the p variable node computations.</p>
<p id="p-0139" num="0138">The decoding apparatus may further include rearranging means for rearranging first decoding in-progress results obtained by the first computation means by performing some of the p check node computations and the p variable node computations, or second decoding in-progress results obtained by the second computation means by performing some of the others of the p variable node computations.</p>
<p id="p-0140" num="0139">The rearranging means may include a barrel shifter.</p>
<p id="p-0141" num="0140">The first computation means may perform some of the p check node computations, and the second computation means may perform some of the others of the p check node computations, and the p variable node computations.</p>
<p id="p-0142" num="0141">The first computation means may include p calculators for performing some of the p check node computations, and the second computation means may include p calculators for performing some of the others of the p check node computations, and the p variable node computations.</p>
<p id="p-0143" num="0142">The decoding apparatus may further include first decoding in-progress result storage means for simultaneously reading and writing first decoding in-progress results corresponding to p edges, which are obtained by the first computation means by performing some of the p check node computations.</p>
<p id="p-0144" num="0143">The decoding apparatus may further include second decoding in-progress result storage means for simultaneously reading and writing second decoding in-progress results corresponding to p edges, which are obtained by the second computation means by performing some of the others of the p check node computations, and the p variable node computations.</p>
<p id="p-0145" num="0144">The second decoding in-progress result storage means may store the second decoding in-progress results corresponding to edges, which are read when some of the others of the p check node computations, and the p variable node computations are performed, in such a manner that 1s of the check matrix are packed closer in the column direction.</p>
<p id="p-0146" num="0145">The second decoding in-progress result storage means may be two single-port RAMs (Random Access Memories).</p>
<p id="p-0147" num="0146">The two single-port RAMs may alternately store the second decoding in-progress results in units of p of the second decoding in-progress results.</p>
<p id="p-0148" num="0147">The two single-port RAMs (Random Access Memories) each may read the second decoding in-progress results stored at the same address.</p>
<p id="p-0149" num="0148">The second decoding in-progress result storage means may store, at the same address, the second decoding in-progress results corresponding to p edges belonging to a unit matrix whose weight is 1, a quasi-unit matrix, or a shift matrix when the sub-matrices whose weight is 2 or more from among the sub-matrices representing the check matrix are represented in the form of the sum of the unit matrix whose weight is 1, the quasi-unit matrix, or the shift matrix.</p>
<p id="p-0150" num="0149">The decoding apparatus may further include received information storage means for storing received information of LDPC codes and for simultaneously reading p pieces of the received information.</p>
<p id="p-0151" num="0150">In the decoding apparatus according to claim <b>36</b>, the received information storage means may store the received information in such a manner that the received information can be read in the sequence necessary for some of the others of the p check node computations, and the p variable node computations.</p>
<p id="p-0152" num="0151">The decoding apparatus may further include rearranging means for rearranging first decoding in-progress results obtained by the first computation means by performing some of the p check node computations, or second decoding in-progress results obtained by the second computation means by performing some of the others of the p check node computations, and the p variable node computations.</p>
<p id="p-0153" num="0152">The rearranging means may include a barrel shifter.</p>
<p id="p-0154" num="0153">The decoding method of the present invention, when using as a sub-matrix, a (P×P) unit matrix, a quasi-unit matrix in which one or more 1s, which are elements of the unit matrix, are substituted with 0, a shift matrix in which the unit matrix or the quasi-unit matrix is cyclically shifted, a sum matrix, which is the sum of two or more of the unit matrix, the quasi-unit matrix, and the shift matrix, or a (P×P) 0-matrix, a check matrix of LDPC codes is represented by a combination of a plurality of the sub-matrices, includes a first computation step of simultaneously performing p check node computations for decoding the LDPC codes; and a second computation step of simultaneously performing p variable node computations for decoding the LDPC codes.</p>
<p id="p-0155" num="0154">The program of the present invention includes a first computation step of simultaneously performing p check node computations for decoding LDPC codes; and a second computation step of simultaneously performing p variable node computations for decoding the LDPC codes.</p>
<p id="p-0156" num="0155">In the present invention, when using as a sub-matrix, a (P×P) unit matrix, a quasi-unit matrix in which one or more 1s, which are elements of the unit matrix, are substituted with 0, a shift matrix in which the unit matrix or the quasi-unit matrix is cyclically shifted, a sum matrix, which is the sum of two or more of the unit matrix, the quasi-unit matrix, and the shift matrix, or a (P×P) 0-matrix, a check matrix of the LDPC codes is represented by a combination of a plurality of the sub-matrices, p check node computations for decoding the LDPC codes are simultaneously performed, and p variable node computations for decoding the LDPC codes are simultaneously performed.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0157" num="0156"><figref idref="DRAWINGS">FIG. 1</figref> illustrates a check matrix H of LDPC codes.</p>
<p id="p-0158" num="0157"><figref idref="DRAWINGS">FIG. 2</figref> is a flowchart illustrating a procedure for decoding LDPC codes.</p>
<p id="p-0159" num="0158"><figref idref="DRAWINGS">FIG. 3</figref> illustrates the flow of messages.</p>
<p id="p-0160" num="0159"><figref idref="DRAWINGS">FIG. 4</figref> shows an example of a check matrix of LDPC codes.</p>
<p id="p-0161" num="0160"><figref idref="DRAWINGS">FIG. 5</figref> shows a Tanner graph of the check matrix.</p>
<p id="p-0162" num="0161"><figref idref="DRAWINGS">FIG. 6</figref> shows a variable node.</p>
<p id="p-0163" num="0162"><figref idref="DRAWINGS">FIG. 7</figref> shows a check node.</p>
<p id="p-0164" num="0163"><figref idref="DRAWINGS">FIG. 8</figref> shows an example of a check matrix of LDPC codes.</p>
<p id="p-0165" num="0164"><figref idref="DRAWINGS">FIG. 9</figref> is a block diagram showing an example of the configuration of an LDPC code decoding apparatus for performing node computations one-by-one.</p>
<p id="p-0166" num="0165"><figref idref="DRAWINGS">FIG. 10</figref> is a block diagram showing an example of the configuration of a check node calculator for calculating messages one-by-one.</p>
<p id="p-0167" num="0166"><figref idref="DRAWINGS">FIG. 11</figref> is a block diagram showing an example of the configuration of a variable node calculator for calculating messages one-by-one.</p>
<p id="p-0168" num="0167"><figref idref="DRAWINGS">FIG. 12A</figref> is a block diagram showing an example of the configuration of an LDPC code decoding apparatus for simultaneously performing all node computations.</p>
<p id="p-0169" num="0168"><figref idref="DRAWINGS">FIG. 12B</figref> is a block diagram showing an example of the configuration of the LDPC code decoding apparatus for simultaneously performing all node computations.</p>
<p id="p-0170" num="0169"><figref idref="DRAWINGS">FIG. 12C</figref> is a block diagram showing an example of the configuration of the LDPC code decoding apparatus for simultaneously performing all node computations.</p>
<p id="p-0171" num="0170"><figref idref="DRAWINGS">FIG. 13</figref> is a block diagram showing an example of the configuration of a check node calculator for simultaneously calculating messages.</p>
<p id="p-0172" num="0171"><figref idref="DRAWINGS">FIG. 14</figref> is a block diagram showing an example of the configuration of a variable node calculator for simultaneously calculating messages.</p>
<p id="p-0173" num="0172"><figref idref="DRAWINGS">FIG. 15</figref> shows a matrix, which is divided into 5×5 units.</p>
<p id="p-0174" num="0173"><figref idref="DRAWINGS">FIG. 16A</figref> is a block diagram showing an example of the configuration of an embodiment of a decoding apparatus to which the present invention is applied.</p>
<p id="p-0175" num="0174"><figref idref="DRAWINGS">FIG. 16B</figref> is a block diagram showing an example of the configuration of the embodiment of the decoding apparatus to which the present invention is applied.</p>
<p id="p-0176" num="0175"><figref idref="DRAWINGS">FIG. 16C</figref> is a block diagram showing an example of the configuration of the embodiment of the decoding apparatus to which the present invention is applied.</p>
<p id="p-0177" num="0176"><figref idref="DRAWINGS">FIG. 17</figref> is a flowchart illustrating the decoding process of the decoding apparatus of <figref idref="DRAWINGS">FIGS. 16A to 16C</figref>.</p>
<p id="p-0178" num="0177"><figref idref="DRAWINGS">FIG. 18</figref> is a block diagram showing an example of the configuration of an embodiment of the decoding apparatus to which the present invention is applied.</p>
<p id="p-0179" num="0178"><figref idref="DRAWINGS">FIG. 19</figref> is a block diagram showing an example of the configuration of a check node calculator.</p>
<p id="p-0180" num="0179"><figref idref="DRAWINGS">FIG. 20</figref> is a block diagram showing an example of the configuration of a variable node calculator.</p>
<p id="p-0181" num="0180"><figref idref="DRAWINGS">FIG. 21</figref> is a block diagram showing an example of the configuration of a calculator of <figref idref="DRAWINGS">FIG. 18</figref>.</p>
<p id="p-0182" num="0181"><figref idref="DRAWINGS">FIG. 22</figref> is a block diagram showing an example of the configuration of the calculator of <figref idref="DRAWINGS">FIG. 18</figref>.</p>
<p id="p-0183" num="0182"><figref idref="DRAWINGS">FIG. 23</figref> is a block diagram showing an example of the configuration of a memory for storing decoding in-progress results of <figref idref="DRAWINGS">FIG. 18</figref>.</p>
<p id="p-0184" num="0183"><figref idref="DRAWINGS">FIG. 24</figref> is a timing chart illustrating the operation of a RAM for storing decoding in-progress results of <figref idref="DRAWINGS">FIG. 18</figref>.</p>
<p id="p-0185" num="0184"><figref idref="DRAWINGS">FIG. 25</figref> is a flowchart illustrating the decoding process of the decoding apparatus of <figref idref="DRAWINGS">FIG. 18</figref>.</p>
<p id="p-0186" num="0185"><figref idref="DRAWINGS">FIG. 26</figref> is a block diagram showing an example of the configuration of an embodiment of the decoding apparatus to which the present invention is applied.</p>
<p id="p-0187" num="0186"><figref idref="DRAWINGS">FIG. 27</figref> is a block diagram showing an example of the configuration of a check node calculator.</p>
<p id="p-0188" num="0187"><figref idref="DRAWINGS">FIG. 28</figref> is a block diagram showing an example of the configuration of a variable node calculator.</p>
<p id="p-0189" num="0188"><figref idref="DRAWINGS">FIG. 29</figref> is a block diagram showing an example of the configuration of a calculator of <figref idref="DRAWINGS">FIG. 26</figref>.</p>
<p id="p-0190" num="0189"><figref idref="DRAWINGS">FIG. 30</figref> is a block diagram showing an example of the configuration of the calculator of <figref idref="DRAWINGS">FIG. 26</figref>.</p>
<p id="p-0191" num="0190"><figref idref="DRAWINGS">FIG. 31</figref> is a block diagram showing an example of the configuration of a memory for storing decoding in-progress results of <figref idref="DRAWINGS">FIG. 26</figref>.</p>
<p id="p-0192" num="0191"><figref idref="DRAWINGS">FIG. 32</figref> is a timing chart illustrating the operation of a RAM for storing decoding in-progress results of <figref idref="DRAWINGS">FIG. 31</figref>.</p>
<p id="p-0193" num="0192"><figref idref="DRAWINGS">FIG. 33</figref> is a flowchart illustrating the decoding process of the decoding apparatus of <figref idref="DRAWINGS">FIG. 26</figref>.</p>
<p id="p-0194" num="0193"><figref idref="DRAWINGS">FIG. 34</figref> is a block diagram showing an example of the configuration of an embodiment of a computer to which the present invention is applied.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">BEST MODE FOR CARRYING OUT THE INVENTION</heading>
<p id="p-0195" num="0194">Specific embodiments to which the present invention is applied will be described below in detail with reference to the drawings.</p>
<p id="p-0196" num="0195"><figref idref="DRAWINGS">FIG. 15</figref> shows an example of a 30×9 check matrix, which are divided in units of 5×5 matrices. The check matrix of <figref idref="DRAWINGS">FIG. 15</figref> is the same as the check matrix shown in <figref idref="DRAWINGS">FIG. 8</figref>.</p>
<p id="p-0197" num="0196">In <figref idref="DRAWINGS">FIG. 15</figref>, the check matrix is represented by a combination of a 5×5 unit matrix, a matrix in which one or more 1s, which are elements of the unit matrix, are substituted with 0 (hereinafter referred to as a “quasi-unit matrix” where appropriate), a matrix in which the unit matrix or the quasi-unit matrix is cyclically shifted (hereinafter referred to as a “shift matrix” where appropriate), a sum of two or more (plural) of the unit matrix, the quasi-unit matrix, and the shift matrix (hereinafter referred to as a “sum matrix” where appropriate), and a 5×5 0-matrix. The LDPC codes represented by the check matrix of <figref idref="DRAWINGS">FIG. 15</figref> have a coding rate of ⅔ and a code length of 9.</p>
<p id="p-0198" num="0197">It may be said that the check matrix of <figref idref="DRAWINGS">FIG. 15</figref> is formed of a 5×5 matrix, a quasi-unit matrix, a shift matrix, a sum matrix, and a 0-matrix. Therefore, these 5×5 matrices, which form the check matrix, will be hereinafter referred to as “sub-matrices” where appropriate.</p>
<p id="p-0199" num="0198"><figref idref="DRAWINGS">FIGS. 16A to 16C</figref> show an example of the configuration of an embodiment of a decoding apparatus for decoding LDPC codes represented by the check matrix of <figref idref="DRAWINGS">FIG. 15</figref>. <figref idref="DRAWINGS">FIGS. 16A to 16C</figref> are block diagrams showing an example of the configuration of an embodiment of such a decoding apparatus. <figref idref="DRAWINGS">FIG. 16A</figref> shows the overall configuration of the decoding apparatus. <figref idref="DRAWINGS">FIG. 16B</figref> shows the detailed configuration of the left portion in the figure surrounded by the dotted line B, of the decoding apparatus of <figref idref="DRAWINGS">FIG. 16A</figref>. <figref idref="DRAWINGS">FIG. 16C</figref> shows the detailed configuration of the right portion in the <figref idref="DRAWINGS">FIG. 5</figref> surrounded by the dotted line C, of the decoding apparatus of <figref idref="DRAWINGS">FIG. 16A</figref>.</p>
<p id="p-0200" num="0199">A decoding apparatus <b>300</b> of <figref idref="DRAWINGS">FIGS. 16A to 16C</figref> includes switches <b>310</b> and <b>315</b>, an edge data storage memory <b>311</b> made up of six FIFOs <b>311</b><sub>1 </sub>to <b>311</b><sub>6</sub>, a selector <b>312</b>, a check node calculator <b>313</b> made up of five check node calculators <b>313</b><sub>1 </sub>to <b>313</b><sub>5</sub>, two cyclic shift circuit <b>314</b> and <b>320</b>, an edge data storage memory <b>316</b> made up of 18 FIFOs <b>316</b><sub>1 </sub>to <b>316</b><sub>18</sub>, a selector <b>317</b>, a received data memory <b>318</b> for storing received information, a variable node calculator <b>319</b>, and a control section <b>321</b>.</p>
<p id="p-0201" num="0200">Before describing in detail each section of the decoding apparatus <b>300</b>, the method of storing data in the edge data storage memories <b>311</b> and <b>316</b> will be described first.</p>
<p id="p-0202" num="0201">The edge data storage memory <b>311</b> includes six FIFOs <b>311</b><sub>1 </sub>to <b>311</b><sub>6</sub>, the number being such that 30, the number of rows, of the check matrix is divided by 5, the number of rows. The FIFO <b>311</b><sub>y </sub>(y=1, 2, . . . , 6) is formed in such a manner that messages corresponding to five edges, which is the number of the rows and the columns of the sub-matrix, can be read or written simultaneously. The length (the number of stages) thereof is 9, which is the maximum number of 1s (Hamming weight) in the row direction of the check matrix.</p>
<p id="p-0203" num="0202">In the FIFO <b>311</b><sub>1</sub>, the data corresponding to the positions of 1s from the first row up to the fifth row of the check matrix of <figref idref="DRAWINGS">FIG. 15</figref> is stored in such a manner that 1s are packed closer (in a manner in which 0s are ignored) in the horizontal direction (in the column direction) for each row. That is, if the j-th row and the i-th column is denoted as (j, i), in the first element (the first stage) of the FIFO <b>311</b><sub>1</sub>, data corresponding to the positions of 1s of the 5×5 unit matrix from (1, 1) to (5, 5) of the check matrix is stored. In the second element, the data corresponding to the positions of 1s of the shift matrix (shift matrix in which the 5×5 unit matrix is cyclically shifted by three to the right) from (1, 21) to (5, 25) of the check matrix, which is the sub-matrix of the check matrix, is stored. Also, in the third to eighth elements, similarly, data is stored in such a manner as to correspond to the sub-matrix of the check matrix. In the nine element, data corresponding to the positions of 1s of the shift matrix (the shift matrix in which 1s of the first row within the 5×5 unit matrix are substituted with 0, and the unit matrix is cyclically shifted by one to the left) from (1, 86) to (5, 90) of the check matrix is stored. Here, in the shift matrix from (1, 86) to (5, 90) of the check matrix, since there are no is in the first row, the number of elements becomes 8 only for the first row of the FIFO <b>311</b><sub>1</sub>, and the number of elements becomes 9 for the remaining rows.</p>
<p id="p-0204" num="0203">In the FIFO <b>311</b><sub>2</sub>, the data corresponding to the positions of 1s from the sixth row up to the tenth row of the check matrix of <figref idref="DRAWINGS">FIG. 15</figref> is stored. That is, in the first element of the FIFO <b>311</b><sub>2</sub>, data corresponding to the positions of 1s of the first shift matrix forming the sum matrix from (6, 1) to (10, 5) of the check matrix (the sum matrix which is the sum of a first shift matrix in which the 5×5 unit matrix is cyclically shifted by one to the right and a second shift matrix in which the 5×5 unit matrix is cyclically shifted by two to the right) is stored. In the second element, data corresponding to the positions of 1s of the second shift matrix forming the sum matrix from (6, 1) to (10, 5) of the check matrix is stored.</p>
<p id="p-0205" num="0204">More specifically, for the sub-matrix whose weight is 2 or more, the data (the message corresponding to the edges belonging to the unit matrix, the sum matrix, or the shift matrix) corresponding to the positions of 1s of the unit matrix whose weight is 1, the quasi-unit matrix, or the shift matrix, when the sub-matrix is represented in the form of the sum of two or more of the (P×P) unit matrix whose weight is 1, the quasi-unit matrix in which one or more 1s, which are elements of the unit matrix, are substituted with 0, and the shift matrix in which the unit matrix or the quasi-unit matrix is cyclically shifted, is stored at the same address (the same FIFOs among the FIFOs <b>311</b><sub>1 </sub>to <b>311</b><sub>6</sub>).</p>
<p id="p-0206" num="0205">Hereafter, for the third to the ninth elements, the data is stored in such a manner as to correspond to the check matrix. The number of the elements of the FIFO <b>311</b><sub>2 </sub>is 9 for all the rows.</p>
<p id="p-0207" num="0206">For the FIFOs <b>311</b><sub>3 </sub>to <b>311</b><sub>6</sub>, similarly, data is stored in such a manner as to correspond to the check matrix, and the length of each of the FIFOs <b>311</b><sub>3 </sub>to <b>311</b><sub>6 </sub>is 9.</p>
<p id="p-0208" num="0207">The memory <b>316</b> for storing edge data is formed of 18 FIFOs <b>316</b><sub>1 </sub>to <b>316</b><sub>18</sub>, the number being such that 90, the number of rows of the check matrix, is divided by 5, the number of the rows of the sub-matrix. The FIFO <b>316</b><sub>x </sub>(x=1, 2, . . . , 18) is formed in such a manner that messages corresponding to five edges, the number being the number of the rows and the number of the columns of the sub-matrix, can be read or written simultaneously.</p>
<p id="p-0209" num="0208">In the FIFO <b>316</b><sub>1</sub>, data corresponding to the positions of 1s from the first column up to the fifth column of the check matrix of <figref idref="DRAWINGS">FIG. 15</figref> is stored in such a manner as to be packed closer in the vertical direction (in the row direction) for each column (in a manner in which 0s are ignored). That is, in the first element (the first stage) of the FIFO <b>316</b><sub>1</sub>, data corresponding to the positions of 1s of the 5×5 unit matrix from (1, 1) to (5, 5) of the check matrix is stored. In the second element, data corresponding to the positions of 1s of the first shift matrix forming the sum matrix of (6, 1) to (10, 5) of the check matrix (the sum matrix, which is the sum of a first shift matrix in which the 5×5 unit matrix is cyclically shifted by one to the right and a second shift matrix in which the 5×5 unit matrix is cyclically shifted by two to the right) is stored. In the third element, data corresponding to the positions of 1s of the second shift matrix forming the sum matrix of (6, 1) to (10, 5) of the check matrix is stored.</p>
<p id="p-0210" num="0209">More specifically, for the sub-matrix whose weight is 2 or more, data (messages corresponding to the edges belonging to the unit matrix, the quasi-unit matrix, or the shift matrix) corresponding to the position of 1s of the unit matrix whose weight is 1, the quasi-unit matrix, or the shift matrix when the sub-matrix is represented in the form of the sum of two or more of the (P×P) unit matrix whose weight is 1, the quasi-unit matrix in which is, which are elements of the unit matrix, are substituted with 0, and the shift matrix in which the unit matrix or the quasi-unit matrix is cyclically shifted, is stored at the same address (the same FIFO from among the FIFOs <b>316</b><sub>1 </sub>to <b>316</b><sub>18</sub>).</p>
<p id="p-0211" num="0210">Hereafter, for the fourth and fifth elements, also, data is stored in such a manner as to correspond to the check matrix. The number of elements (the number of stages) of the FIFO <b>316</b><sub>1 </sub>is 5, which is the maximum number of 1s (Hamming weight) in the row direction from the first column up to the fifth column of the check matrix.</p>
<p id="p-0212" num="0211">Also, for the FIFOs <b>316</b><sub>2 </sub>and <b>316</b><sub>3</sub>, similarly, data is stored in such a manner as to correspond to the check matrix, and each of the length (the number of stages) thereof is 5. Also, for the FIFOs <b>316</b><sub>4 </sub>to <b>316</b><sub>12</sub>, similarly, data is stored in such a manner as to correspond to the check matrix, and each of the lengths thereof is 3. Also, for the FIFOs <b>316</b><sub>13 </sub>to <b>316</b><sub>18</sub>, similarly, data is stored in such a manner as to correspond to the check matrix, and each of the lengths thereof is 2. However, since the first element of the FIFO <b>316</b><sub>18 </sub>corresponds to (1, 86) to (5, 90) of the check matrix, and there are no is in the fifth column ((1, 90) to (5, 90) of the check matrix), data is not stored.</p>
<p id="p-0213" num="0212">A description will now be given below in detail of the operation of each section of the decoding apparatus <b>300</b> of <figref idref="DRAWINGS">FIGS. 16A to 16C</figref>. Five messages (data) D<b>319</b> is supplied to a switch <b>310</b> from a cyclic shift circuit <b>320</b>. Also, a control signal D<b>320</b> indicating information (matrix data) as to which row of the check matrix it belongs to 1s supplied to the switch <b>310</b> from the control section <b>321</b>. Based on the control signal D<b>320</b>, an FIFO for storing five messages (data) D<b>319</b> is selected from among the FIFOs <b>311</b><sub>1 </sub>to <b>311</b><sub>6</sub>, and the five pieces of message data D<b>319</b> are collectively stored in the selected FIFO in sequence.</p>
<p id="p-0214" num="0213">The edge data storage memory <b>311</b> includes six FIFOs <b>311</b><sub>1 </sub>to <b>311</b><sub>6</sub>. In the FIFOs <b>311</b><sub>1 </sub>to <b>311</b><sub>6 </sub>of the edge data storage memory <b>311</b>, five messages D<b>319</b> are collectively supplied from the switch <b>310</b> in sequence, and the FIFOs <b>311</b><sub>1 </sub>to <b>311</b><sub>6 </sub>collectively store the five messages D<b>319</b> in sequence (simultaneously). Furthermore, when data is to be read, the edge data storage memory <b>311</b> sequentially reads the five messages (data) D<b>311</b><sub>1 </sub>from the FIFO <b>311</b><sub>1</sub>, and supplies them to the selector <b>312</b> at the subsequent stage. After the reading of the messages D<b>311</b><sub>1 </sub>from the FIFO <b>311</b><sub>1 </sub>is completed, the edge data storage memory <b>311</b> also sequentially reads messages D<b>311</b><sub>1 </sub>to D<b>311</b><sub>6 </sub>from the FIFOs <b>311</b><sub>2 </sub>to <b>311</b><sub>6</sub>, respectively, and supplies them to the selector <b>312</b>.</p>
<p id="p-0215" num="0214">A selection signal D<b>321</b> indicating the selection of the FIFO from which message data is read (the FIFO from which data has been read currently) from among the FIFOs <b>311</b><sub>1 </sub>to <b>311</b><sub>6 </sub>is supplied to the selector <b>312</b> from the control section <b>321</b>, and also, five messages (data) D<b>311</b><sub>1 </sub>to D<b>311</b><sub>6 </sub>are supplied to the selector <b>312</b> from the edge data storage memory <b>311</b>. The selector <b>312</b> selects the FIFO from which data has been read currently from among the FIFOs <b>311</b><sub>1 </sub>to <b>311</b><sub>6 </sub>in accordance with a selection signal D<b>321</b>, and supplies the five pieces of message data supplied from the selected FIFO, as messages D<b>312</b>, to the check node calculation section <b>313</b>.</p>
<p id="p-0216" num="0215">The check node calculation section <b>313</b> includes five check node calculators <b>313</b><sub>1 </sub>to <b>313</b><sub>5</sub>. Five messages D<b>312</b> are supplied to the check node calculation section <b>313</b> via the selector <b>312</b>, and the messages D<b>312</b> are supplied individually to each of the check node calculators <b>313</b><sub>1 </sub>to <b>313</b><sub>5</sub>. Furthermore, a control signal D<b>322</b> is supplied to the check node calculator <b>313</b> from the control section <b>321</b>, and the control signal D<b>322</b> is supplied to the check node calculators <b>313</b><sub>1 </sub>to <b>313</b><sub>5</sub>. The check node calculators <b>313</b><sub>1 </sub>to <b>313</b><sub>5 </sub>simultaneously perform computations in accordance with equation (7) by using the messages D<b>312</b>, and determine messages D<b>313</b> corresponding to five edges as a result of the computations. The check node calculation section <b>313</b> supplies the five messages D<b>313</b> obtained as a result of the computations by the check node calculators <b>313</b><sub>1 </sub>to <b>313</b><sub>5 </sub>to the cyclic shift circuit <b>314</b>.</p>
<p id="p-0217" num="0216">A control signal D<b>322</b> supplied from the control section <b>321</b> to the check node calculator <b>313</b> corresponds to the control signal D<b>106</b> of <figref idref="DRAWINGS">FIG. 10</figref>. The check node calculation sections <b>313</b><sub>1 </sub>to <b>313</b><sub>5 </sub>are each configured in the same way as the check node calculator <b>101</b> shown in <figref idref="DRAWINGS">FIG. 10</figref>.</p>
<p id="p-0218" num="0217">The five messages D<b>313</b> calculated in the check node calculation section <b>313</b> are supplied to the cyclic shift circuit <b>314</b>. Also, a control signal D<b>323</b> indicating information (matrix data) as to the fact that the edge corresponding to the message D<b>313</b> is connected as a result of how many times, for example, the unit matrix forming the basis in the check matrix is cyclically shifted, is supplied to the cyclic shift circuit <b>314</b> from the control section <b>321</b>. The cyclic shift circuit <b>314</b> cyclically shifts the five messages D<b>313</b> on the basis of the control signal D<b>323</b>, and supplies the result as a message D<b>314</b> to the switch <b>315</b>.</p>
<p id="p-0219" num="0218">A control signal D<b>324</b> indicating information as to which column of the check matrix the five messages (data) D<b>314</b> supplied from the cyclic shift circuit <b>314</b> belong to 1s supplied to the switch <b>315</b>, and also the message D<b>314</b> is supplied thereto from the cyclic shift circuit <b>314</b>. Based on the control signal D<b>324</b>, the switch <b>315</b> selects the FIFO for storing the message D<b>314</b> from among the FIFOs <b>316</b><sub>1 </sub>to <b>316</b><sub>18</sub>, and collectively supplies the five messages D<b>314</b> in sequence.</p>
<p id="p-0220" num="0219">An edge data storage memory <b>316</b> includes 18 FIFOs <b>316</b><sub>1 </sub>to <b>316</b><sub>18</sub>. The five messages D<b>314</b> are collectively supplied in sequence (simultaneously) from the switch <b>315</b> to the FIFOs <b>316</b><sub>1 </sub>to <b>316</b><sub>18 </sub>of the edge data storage memory <b>316</b>, and the FIFOs <b>316</b><sub>1 </sub>to <b>316</b><sub>18 </sub>collectively store the five messages D<b>314</b> in sequence. Furthermore, when the data is to be read, the memory <b>316</b> for storing edge data sequentially reads five messages D<b>315</b><sub>1 </sub>from the FIFO <b>316</b><sub>1 </sub>and supplies them to the selector <b>317</b> at the subsequent stage. After the reading of the data from the FIFO <b>316</b><sub>1 </sub>is completed, the memory <b>316</b> for storing edge data sequentially reads the messages D<b>315</b><sub>2 </sub>to D<b>31318</b> also from the FIFOs <b>316</b><sub>1 </sub>to <b>316</b><sub>18 </sub>and supplies them to the selector <b>317</b>.</p>
<p id="p-0221" num="0220">A selection signal D<b>325</b> indicating the selection of the FIFO for reading message data (the FIFO from which data has been read currently) from among the FIFOs <b>316</b><sub>1 </sub>to <b>316</b><sub>18 </sub>is supplied from the control section <b>321</b> to the selector <b>317</b>, and also, message data D<b>315</b><sub>1 </sub>to D<b>31318</b> are supplied thereto from the edge data storage memory <b>316</b>. Based on the selection signal D<b>325</b>, the selector <b>317</b> selects the FIFO from which data has been read currently from among the FIFOs <b>316</b><sub>1 </sub>to <b>316</b><sub>18</sub>, and supplies the five pieces of the message data supplied from the selected FIFO, as messages D<b>316</b>, to the variable node calculation section <b>319</b> and the above-described block (not shown) for performing the computation of equation (5).</p>
<p id="p-0222" num="0221">On the other hand, the memory <b>318</b> for received data has calculated the reception LLR (log likelihood ratio) from the received information through the communication channel.</p>
<p id="p-0223" num="0222">Five pieces of the calculated reception LLR are supplied collectively (simultaneously) as received data D<b>317</b> (LDPC codes) to the variable node calculation section <b>319</b> and the block (not shown) for receiving the computation of equation (5). The memory <b>318</b> for received data reads the received data D<b>317</b> in the sequence necessary for the variable node computation of the variable node calculation section <b>319</b>.</p>
<p id="p-0224" num="0223">The variable node calculation section <b>319</b> includes five variable node calculator <b>319</b><sub>1 </sub>to <b>319</b><sub>5</sub>. Five messages D<b>316</b> are supplied to the variable node calculation section <b>319</b> via the selector <b>317</b>, and the messages D<b>316</b> are supplied individually to each of the variable node calculators <b>319</b><sub>1 </sub>to <b>319</b><sub>5</sub>. Furthermore, the five pieces of the received data D<b>317</b> are supplied to the variable node calculation section <b>319</b> from the memory <b>318</b> for received data, and the pieces of the received data D<b>317</b> are supplied individually to each of the variable node calculators <b>319</b><sub>1 </sub>to <b>319</b><sub>5</sub>. Furthermore, a control signal D<b>326</b> is supplied from the control section <b>321</b> to the variable node calculation section <b>319</b>, and the control signal D<b>326</b> is supplied to the variable node calculators <b>319</b><sub>1 </sub>to <b>319</b><sub>5</sub>.</p>
<p id="p-0225" num="0224">The variable node calculators <b>319</b><sub>1 </sub>to <b>319</b><sub>5 </sub>perform computations in accordance with equation (1) by using the messages D<b>316</b> and the received data D<b>317</b>, and determine messages D<b>318</b> corresponding to five edges as a result of the computations. The variable node calculation section <b>319</b> supplies the five messages D<b>318</b> obtained as a result of the variable node calculators <b>319</b><sub>1 </sub>to <b>319</b><sub>5 </sub>to the cyclic shift circuit <b>320</b>.</p>
<p id="p-0226" num="0225">Here, the control signal D<b>326</b> supplied from a control section <b>521</b> to the variable node calculation section <b>319</b> corresponds to the control signal D<b>107</b> of <figref idref="DRAWINGS">FIG. 11</figref>, and the variable node calculators <b>319</b><sub>1 </sub>to <b>319</b><sub>5 </sub>are each configured in the same way as the variable node calculator <b>103</b> of <figref idref="DRAWINGS">FIG. 11</figref>.</p>
<p id="p-0227" num="0226">Five messages D<b>318</b> are supplied to the cyclic shift circuit <b>320</b> from the variable node calculation section <b>319</b>. Also, a control signal D<b>327</b> indicating information (matrix data) as to the fact that the edge corresponding to the message D<b>318</b> is connected as a result of how many times, for example, the unit matrix forming the basis in the check matrix is cyclically shifted, is supplied to the cyclic shift circuit <b>320</b> from the control section <b>321</b>. Based on the control signal D<b>327</b>, the cyclic shift circuit <b>320</b> performs a cyclic shifting of rearranging the messages D<b>327</b>, and supplies the results as messages D<b>319</b> to the switch <b>310</b>.</p>
<p id="p-0228" num="0227">The control section <b>321</b> supplies a selection signal D<b>320</b> to the switch <b>310</b> and supplies a selection signal D<b>321</b> to the selector <b>312</b> in order to control them, respectively. The control section <b>321</b> supplies a control signal D<b>322</b> to the check node calculation section <b>313</b>, supplies a control signal D<b>323</b> to the cyclic shift circuit <b>314</b>, and supplies a control signal D<b>324</b> to the switch <b>315</b> in order to control them, respectively. Furthermore, the control section <b>321</b> supplies a selection signal D<b>325</b> to the selector <b>317</b>, supplies a control signal D<b>326</b> to the variable node calculation section <b>319</b>, and supplies a control signal D<b>327</b> to the cyclic shift circuit <b>320</b> in order to control them, respectively.</p>
<p id="p-0229" num="0228">As a result of the above operation being circulated once, one decoding of the LDPC codes can be performed. After the decoding apparatus <b>300</b> of <figref idref="DRAWINGS">FIGS. 16A to 16C</figref> decodes the LDPC codes a predetermined number of times, the decoding apparatus <b>300</b> determines a final decoded result (not shown) in accordance with equation (5) and outputs it.</p>
<p id="p-0230" num="0229">For the portions in which edge data (messages corresponding to the edges) lacks, during the storage in the memory (when data is stored in the edge data storage memories <b>311</b> and <b>316</b>), no message is stored. During node computation (during the check node computation at the check node calculation section <b>313</b> and during the variable node computation at the variable node calculation section <b>319</b>), no computation is performed.</p>
<p id="p-0231" num="0230"><figref idref="DRAWINGS">FIG. 17</figref> is a flowchart illustrating the decoding process of the decoding apparatus <b>300</b> of <figref idref="DRAWINGS">FIGS. 16A to 16C</figref>. This process is started when received data to be decoded is stored in the memory <b>318</b> for received data.</p>
<p id="p-0232" num="0231">In step S<b>31</b>, the variable node calculation section <b>319</b> performs a variable node computation.</p>
<p id="p-0233" num="0232">More specifically, five messages D<b>316</b> (messages u<sub>j</sub>) are supplied to the variable node calculation section <b>319</b> via the selector <b>317</b>. That is, the edge data storage memory <b>316</b> sequentially reads the five messages D<b>316</b><sub>1 </sub>stored in step S<b>39</b> (to be described later) from the FIFO <b>316</b><sub>1</sub>, and thereafter, sequentially reads messages D<b>316</b><sub>2 </sub>to D<b>316</b><sub>18 </sub>also from the FIFOs <b>316</b><sub>2 </sub>to <b>316</b><sub>18</sub>, and supplies them to the selector <b>317</b>.</p>
<p id="p-0234" num="0233">A selection signal D<b>307</b> indicating the selection of the FIFO (the FIFO from which data has been read currently) from which message (data) is to be read from among the FIFOs <b>316</b><sub>1 </sub>to <b>316</b><sub>18 </sub>is supplied to the selector <b>317</b> from the control section <b>321</b>, and also, message data D<b>316</b><sub>1 </sub>to D<b>316</b><sub>18 </sub>are supplied to the selector <b>317</b> from the edge data storage memory <b>316</b>. Based on the selection signal D<b>307</b>, the selector <b>317</b> selects the FIFO from which data has been read currently from among the FIFOs <b>316</b><sub>1 </sub>to <b>316</b><sub>18</sub>, and supplies the five pieces of the message data supplied from the selected FIFO, as the messages D<b>316</b>, to the variable node calculation section <b>319</b>.</p>
<p id="p-0235" num="0234">When a check node computation has not yet been performed on the received data D<b>309</b> supplied from the memory <b>306</b> and a message D<b>304</b> is not stored in the edge data storage memory <b>316</b>, the variable node calculation section <b>319</b> sets the message u<sub>j </sub>to an initial value used for a variable node computation.</p>
<p id="p-0236" num="0235">The five pieces of the received data D<b>309</b> (received value u<sub>0i</sub>) are supplied to the variable node calculation section <b>319</b> from the memory <b>318</b> for received data, and the pieces of the received data D<b>309</b> are supplied individually to each of the variable node calculators <b>319</b><sub>1 </sub>to <b>319</b><sub>5</sub>. Furthermore, a control signal D<b>315</b> is supplied to the variable node calculation section <b>319</b> from the control section <b>321</b>, and the control signal D<b>315</b> is supplied to the variable node calculators <b>319</b><sub>1 </sub>to <b>319</b><sub>5</sub>.</p>
<p id="p-0237" num="0236">Based on the control signal D<b>315</b>, the variable node calculators <b>319</b><sub>1 </sub>to <b>319</b><sub>5 </sub>simultaneously perform computations in accordance with equation (1) by using the messages D<b>316</b> and the received data D<b>309</b>, and determine five messages D<b>319</b> as a result of the computations.</p>
<p id="p-0238" num="0237">That is, the control signal D<b>315</b> supplied to the variable node calculation section <b>319</b> by the control section <b>321</b> corresponds to the control signal D<b>107</b> described with reference to <figref idref="DRAWINGS">FIG. 11</figref> described above. Each of the variable node calculators <b>319</b><sub>1 </sub>to <b>319</b><sub>5 </sub>reads one necessary message D<b>314</b> (D<b>316</b>) from the edge data storage memory <b>316</b> via the selector <b>317</b> in accordance with the control signal D<b>309</b>, and also, reads the five pieces of received data D<b>309</b> supplied from the memory <b>318</b> for received data, respectively, perform a variable node computation, and simultaneously determine five messages D<b>319</b> as a result of the computations.</p>
<p id="p-0239" num="0238">After the processing of step S<b>31</b>, the process proceeds to step S<b>32</b>, where the variable node calculation section <b>319</b> supplies the five messages D<b>319</b> (messages v<sub>i</sub>) obtained as a result of the variable node computations of the variable node calculators <b>319</b><sub>1 </sub>to <b>319</b><sub>5 </sub>to the cyclic shift circuit <b>320</b>. The process then proceeds to step S<b>33</b>.</p>
<p id="p-0240" num="0239">In step S<b>33</b>, the cyclic shift circuit <b>320</b> cyclically shifts (rearranges) the five messages D<b>318</b> supplied from the variable node calculation section <b>319</b>.</p>
<p id="p-0241" num="0240">More specifically, a message D<b>318</b> is supplied to the cyclic shift circuit <b>320</b> from the variable node calculation section <b>319</b>. Also, a control signal D<b>327</b> indicating information (matrix data) as to the fact that the edge corresponding to the message D<b>318</b> is connected as a result of how many times, for example, the unit matrix forming the basis in the check matrix is cyclically shifted, is supplied to the cyclic shift circuit <b>320</b> from the control section <b>321</b>. Based on the control signal D<b>327</b>, the cyclic shift circuit <b>320</b> cyclically shifts five messages D<b>327</b>, and supplies the results as the message sD<b>319</b> to the switch <b>310</b>.</p>
<p id="p-0242" num="0241">After the processing of step S<b>33</b>, the process proceeds to step S<b>34</b>, where the switch <b>310</b> supplies the five messages D<b>319</b> supplied from the cyclic shift circuit <b>320</b> to the edge data storage memory <b>311</b>.</p>
<p id="p-0243" num="0242">More specifically, a message (data) D<b>304</b> is supplied to the switch <b>310</b> from the cyclic shift circuit <b>320</b>, and also, a control signal D<b>312</b> indicating information as to which row of the check matrix the message D<b>304</b> belongs to 1s supplied to the switch <b>310</b>. Based on the control signal D<b>312</b>, the switch <b>310</b> selects the FIFO for storing the messages D<b>304</b> from among the FIFO <b>300</b><sub>1 </sub>to <b>300</b><sub>6</sub>, and sequentially supplies the five pieces of the message data D<b>304</b> collectively in the selected FIFO.</p>
<p id="p-0244" num="0243">Then, the FIFO <b>300</b><sub>1 </sub>to <b>300</b><sub>18 </sub>of the edge data storage memory <b>311</b> collectively store the five pieces of the message data D<b>304</b> supplied from the switch <b>310</b> in sequence.</p>
<p id="p-0245" num="0244">After the processing of step S<b>34</b>, the process proceeds to step S<b>35</b>, where the control section <b>321</b> determines whether or not the messages of the total number of edges have been computed by the variable node calculation section <b>319</b>. When it is determined that the messages of the total number of edges have not been computed, the process returns to step S<b>31</b>, and the above-described processing is performed again.</p>
<p id="p-0246" num="0245">On the other hand, when it is determined in step S<b>35</b> that the variable node calculation section <b>319</b> has computed the messages of the total number of edges, the process proceeds to step S<b>36</b>, where the check node calculation section <b>313</b> performs a check node computation.</p>
<p id="p-0247" num="0246">More specifically, five message D<b>302</b> are supplied to the check node calculation section <b>313</b> via the selector <b>312</b>. That is, the edge data storage memory <b>311</b> sequentially reads, from the FIFO <b>311</b><sub>1</sub>, five messages D<b>311</b><sub>1 </sub>(messages v<sub>i</sub>) stored in step S<b>34</b>, and thereafter, sequentially reads the message data D<b>311</b><sub>2 </sub>to D<b>311</b><sub>6 </sub>also from the FIFOs <b>311</b><sub>2 </sub>to <b>311</b><sub>6</sub>, and supplies it to the selector <b>312</b>.</p>
<p id="p-0248" num="0247">A selection signal D<b>321</b> indicating the selection of the FIFO for reading message data (the FIFO from which data has been read currently) from among the FIFOs <b>311</b><sub>1 </sub>to <b>311</b><sub>6 </sub>is supplied to the selector <b>312</b> from the control section <b>321</b>, and also, message data D<b>311</b><sub>1 </sub>to D<b>311</b><sub>6 </sub>is supplied to the selector <b>312</b> from the edge data storage memory <b>311</b>. Based on the selection signal D<b>321</b>, the selector <b>301</b> selects the FIFO from which data has been read currently, and supplies five pieces of the message data supplied from the selected FIFO, as messages D<b>311</b>, to the check node calculation section <b>313</b>.</p>
<p id="p-0249" num="0248">Furthermore, a control signal D<b>322</b> is supplied to the check node calculation section <b>313</b> from the control section <b>321</b>. Based on the control signal D<b>322</b>, the check node calculators <b>313</b><sub>1 </sub>to <b>313</b><sub>5 </sub>of the check node calculation section <b>313</b> simultaneously perform check node computations in accordance with equation (7) by using the messages D<b>302</b>, and determine five messages D<b>303</b> (messages u<sub>j</sub>) as a result of the computations.</p>
<p id="p-0250" num="0249">More specifically, the control signal D<b>322</b> supplied to the check node calculation section <b>313</b> by the control section <b>321</b> corresponds to the control signal D<b>106</b> in <figref idref="DRAWINGS">FIG. 10</figref> described above. Based on the control signal D<b>322</b>, the check node calculators <b>313</b><sub>1 </sub>to <b>313</b><sub>5 </sub>each perform a check node computation while they read one necessary message D<b>311</b> (D<b>312</b>) from the edge data storage memory <b>311</b> via the selector <b>312</b>, and simultaneously determine five messages D<b>313</b> as a result of the computations.</p>
<p id="p-0251" num="0250">After the processing of step S<b>37</b>, the process proceeds to step S<b>38</b>, where the check node calculation section <b>313</b> outputs five messages D<b>313</b> obtained as a result of the check node computation to the cyclic shift circuit <b>314</b>. The process then proceeds to step S<b>38</b>.</p>
<p id="p-0252" num="0251">In step S<b>38</b>, the cyclic shift circuit <b>314</b> cyclically shifts the five messages D<b>313</b> supplied from the check node calculation section <b>313</b>.</p>
<p id="p-0253" num="0252">More specifically, the messages D<b>313</b> are supplied to the cyclic shift circuit <b>314</b> from the check node calculation section <b>313</b>. Also, a control signal D<b>314</b> indicating information (matrix data) as to the fact that the edge corresponding to the message D<b>313</b> is connected as a result of how many times, for example, the unit matrix forming the basis in the check matrix is cyclically shifted, is supplied to the cyclic shift circuit <b>314</b> from the control section <b>321</b>. Based on the control signal D<b>314</b>, the cyclic shift circuit <b>314</b> cyclically shifts the five messages D<b>313</b>, and supplies the results as the messages D<b>304</b> to the switch <b>315</b>.</p>
<p id="p-0254" num="0253">After the processing of step S<b>38</b>, the process proceeds to step S<b>39</b>, where the switch <b>315</b> stores the five messages D<b>304</b> supplied from the cyclic shift circuit <b>314</b> in the edge data storage memory <b>316</b>.</p>
<p id="p-0255" num="0254">More specifically, the five messages (data) D<b>304</b> are supplied from the cyclic shift circuit <b>314</b> to the switch <b>316</b>, and also, a control signal D<b>324</b> indicating information as to which row of the check matrix the messages (data) D<b>304</b> belong to 1s supplied to the switch <b>316</b> from the cyclic shift circuit <b>314</b>. Based on the control signal D<b>324</b>, the switch <b>316</b> selects the FIFO for storing the message D<b>304</b> from among the FIFOs <b>316</b><sub>1 </sub>to <b>316</b><sub>18 </sub>of the edge data storage memory <b>316</b>, and collectively supplies the five pieces of the message data D<b>304</b> to the selected FIFO in sequence.</p>
<p id="p-0256" num="0255">Then, the FIFOs <b>316</b><sub>1 </sub>to <b>316</b><sub>18 </sub>of the edge data storage memory <b>316</b> collectively store the five pieces of the message data D<b>304</b> supplied from the switch <b>316</b> in sequence.</p>
<p id="p-0257" num="0256">After the processing of step S<b>39</b>, the process proceeds to step S<b>40</b>, where the control section <b>321</b> determines whether or not the messages of the total number of the edges have been computed by the check node calculation section <b>313</b>. When it is determined that the messages of the total number of the edges have not been computed, the process returns to step S<b>36</b>, and the above-described processing is performed again.</p>
<p id="p-0258" num="0257">On the other hand, when the control section <b>321</b> determines in step S<b>40</b> that the messages of the total number of the edges have been computed by the check node calculation section <b>313</b>, the processing is completed.</p>
<p id="p-0259" num="0258">When the decoding apparatus <b>300</b> repeatedly performs the decoding process of <figref idref="DRAWINGS">FIG. 17</figref> for the number of decodings and the check node calculation section <b>313</b> performs the final check node computation, the message D<b>304</b> obtained as a result of the check node computation is supplied from the edge data storage memory <b>316</b> via the selector <b>317</b> to a block (not shown) for performing the computation of equation (5) described above. The received data D<b>309</b> is further supplied to the block (not shown) from the memory <b>306</b> for received data. The block (not shown) performs the computation of equation (5) by using the messages D<b>304</b> and the received data D<b>309</b>, and outputs the computation result as a final decoded result.</p>
<p id="p-0260" num="0259">In the above description, although an FIFO is used to store edge data (although the edge data storage memory <b>311</b> and <b>316</b> are formed by FIFOs, a RAM may be used instead of the FIFO. In that case, for the RAM, a bit width at which p pieces of edge information (messages corresponding to edges) can be simultaneously read, and the total-number-of-edges/p words are required. For writing into the RAM, at which position the data to be written is read when it is read next is determined on the basis of the information of the check matrix, and the data is written at that position. For reading from the RAM, data is sequentially read from the beginning of the address. That is, in the RAM, the message data is stored in the sequence in which it is read in such a manner as to be packed closer, and the message data is read in the storage position sequence. If the RAM is used in place of the FIFO, the selectors <b>312</b> and <b>317</b> are not necessary.</p>
<p id="p-0261" num="0260">When the physical bit width of the FIFO and the RAM is not sufficient, by providing the same control signal by using a plurality of RAMs, these can be logically assumed as one RAM.</p>
<p id="p-0262" num="0261">In the decoding apparatus <b>300</b> of <figref idref="DRAWINGS">FIGS. 16A to 16C</figref>, a variable node computation is performed by using the message u<sub>j </sub>obtained as a result of the check node computation, and a check node computation is performed by using the message v<sub>i </sub>obtained as a result of that computation. Therefore, the edge data storage memory <b>311</b> and the edge data storage memory <b>316</b> for storing all the messages u<sub>j </sub>corresponding to the edges obtained as a result of the check node computation and all the messages v<sub>i </sub>corresponding to the edges obtained as a result of the variable node computation are required. That is, in the decoding apparatus, a memory of the capacity required to store messages twice as large as the number of 1s of the check matrix H is required.</p>
<p id="p-0263" num="0262">Accordingly, in order to further reduce the circuit scale of the decoding apparatus, a decoding apparatus in which the capacity of the memory is reduced further when compared to the decoding apparatus <b>300</b> of <figref idref="DRAWINGS">FIGS. 16A to 16C</figref> is described below.</p>
<p id="p-0264" num="0263"><figref idref="DRAWINGS">FIG. 18</figref> is a block diagram showing an example of the configuration of another embodiment of the decoding apparatus for decoding LDPC codes represented by the check matrix of <figref idref="DRAWINGS">FIG. 15</figref>, to which the present invention is applied.</p>
<p id="p-0265" num="0264">In a decoding apparatus <b>400</b> of <figref idref="DRAWINGS">FIG. 18</figref>, the edge data storage memory <b>311</b> of <figref idref="DRAWINGS">FIGS. 16A and 16B</figref> is formed as a memory <b>410</b> for storing decoding in-progress results having a capacity smaller than that of the edge data storage memory <b>311</b>.</p>
<p id="p-0266" num="0265">The decoding apparatus <b>400</b> includes a memory <b>410</b> for storing decoding in-progress results, a cyclic shift circuit <b>411</b>, a calculation section <b>412</b> made up of five calculators <b>412</b><sub>1 </sub>to <b>412</b><sub>5</sub>, a memory <b>413</b> for storing decoding in-progress results, a cyclic shift circuit <b>414</b>, a calculation section <b>415</b> made up of five calculators <b>415</b><sub>1 </sub>to <b>415</b><sub>5</sub>, a memory <b>416</b> for reception, and a control section <b>417</b>.</p>
<p id="p-0267" num="0266">A description will now be given, with reference to <figref idref="DRAWINGS">FIG. 19</figref> to <figref idref="DRAWINGS">FIG. 22</figref>, of the relationship among the calculators <b>412</b><sub>1 </sub>to <b>412</b><sub>5 </sub>of the calculation section <b>412</b> and the calculators <b>415</b><sub>1 </sub>to <b>415</b><sub>5 </sub>of the calculation section <b>415</b> of <figref idref="DRAWINGS">FIG. 18</figref>, the check node calculator <b>101</b> of <figref idref="DRAWINGS">FIG. 10</figref>, and the variable node calculator <b>103</b> of <figref idref="DRAWINGS">FIG. 11</figref>.</p>
<p id="p-0268" num="0267"><figref idref="DRAWINGS">FIG. 19</figref> and <figref idref="DRAWINGS">FIG. 20</figref> are the same as <figref idref="DRAWINGS">FIG. 10</figref> which shows the check node calculator <b>101</b> and <figref idref="DRAWINGS">FIG. 11</figref> which shows the variable node calculator <b>103</b>, respectively. <figref idref="DRAWINGS">FIG. 21</figref> shows an example of the configuration of a calculation section <b>412</b><sub>k </sub>(k=1, 2, . . . , 5). <figref idref="DRAWINGS">FIG. 22</figref> shows an example of the configuration of a calculation section <b>415</b><sub>k </sub>(k=1, 2, . . . , 5).</p>
<p id="p-0269" num="0268">In the decoding apparatus <b>400</b> of <figref idref="DRAWINGS">FIG. 18</figref>, rather than the calculator <b>412</b><sub>k </sub>performs a check node computation and the calculation section <b>415</b><sub>k </sub>performs a variable node computation, the calculator <b>412</b><sub>k </sub>performs some of the check node computation and the variable node computation, and the calculator <b>415</b><sub>k </sub>performs some of the others of the variable node computation.</p>
<p id="p-0270" num="0269">More specifically, the calculator <b>412</b> <sub>k </sub>of <figref idref="DRAWINGS">FIG. 21</figref> is formed of a block A′ and a block B′. The block A′ is configured in the same way as the block for performing the check node computation of the check node calculator <b>101</b> of <figref idref="DRAWINGS">FIG. 19</figref>. The block B′ is configured in the same way as the block B, which is part of the variable node calculator <b>103</b> of <figref idref="DRAWINGS">FIG. 20</figref>, for subtracting the message u<sub>j </sub>corresponding to the edge to be determined, from the integrated value of the messages u<sub>j </sub>corresponding to all the edges of each column of the check matrix. On the other hand, the calculator <b>415</b><sub>k </sub>of <figref idref="DRAWINGS">FIG. 22</figref> is formed from a block C′. The block C′ is configured in the same way as the block C, which is another part of the variable node calculator <b>103</b> of <figref idref="DRAWINGS">FIG. 20</figref>, for integrating the messages u<sub>j </sub>corresponding to the edges of each column of the check matrix and adding the received value u<sub>0i </sub>to the integrated value.</p>
<p id="p-0271" num="0270">The calculator <b>412</b><sub>k </sub>of <figref idref="DRAWINGS">FIG. 21</figref> supplies the results of the computations by the block A and the block B, that is, decoding in-progress results u<sub>j </sub>such that some of the check node computation and the variable node computation are performed, to the memory <b>413</b> for storing decoding in-progress results. The calculator <b>415</b><sub>k </sub>of <figref idref="DRAWINGS">FIG. 22</figref> supplies the decoding in-progress results v such that some of the others of the variable node computation are performed to the memory <b>410</b> for storing decoding in-progress results.</p>
<p id="p-0272" num="0271">Therefore, it is possible for the decoding apparatus <b>400</b> of <figref idref="DRAWINGS">FIG. 18</figref> to perform the check node computation and the variable node computation by alternately performing the computation of the calculator <b>412</b><sub>k </sub>and the computation of the calculator <b>415</b><sub>k </sub>in order to perform decoding.</p>
<p id="p-0273" num="0272">In the calculator <b>412</b><sub>k </sub>of <figref idref="DRAWINGS">FIG. 22</figref>, since the decoding in-progress results u<sub>j </sub>corresponding to the edges to be determined are subtracted from the decoding in-progress results v obtained as a result of the computation of the calculator <b>415</b><sub>k </sub>in the block B by using the decoding in-progress results u<sub>j </sub>corresponding to the edges to be determined, which are stored in the memory <b>413</b> for storing decoding in-progress results, the FIFO memory <b>155</b> of <figref idref="DRAWINGS">FIG. 20</figref> is not required.</p>
<p id="p-0274" num="0273">Next, a description is given of the computation performed by the calculator <b>412</b><sub>k </sub>and the computation performed by the calculator <b>415</b><sub>k </sub>by using equations.</p>
<p id="p-0275" num="0274">More specifically, the calculation section <b>412</b> performs a first computation in accordance with equation (7) described above and equation (8) described below, and supplies the decoding in-progress results u<sub>j</sub>, which are the results of the first computation, to the memory <b>410</b> for storing decoding in-progress results, whereby they are stored. The calculation section <b>415</b> performs a second computation in accordance with equation (5) described above, and supplies the decoding in-progress results v, which are the results of the second computation, to the memory <b>410</b> for storing decoding in-progress results, whereby they are stored.
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>v</i><sub>i</sub><i>=v−u</i><sub>dv</sub>  (8)<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0276" num="0275">u<sub>dv </sub>of equation (8) represents the in-progress results (here, the check node computation results themselves) of the check node computation from the edge for which the message of the i-th column of the check matrix H is to be determined. That is, u<sub>dv </sub>is the decoding in-progress results corresponding to the edge to be determined.</p>
<p id="p-0277" num="0276">More specifically, the decoding in-progress results v obtained as a result of the second computation in accordance with equation (5) described above are such that the received value u<sub>0i </sub>and the decoding in-progress results u<sub>j </sub>of the check node computation from all the edges corresponding to 1s of each row of the i-th column of the check matrix H are multiplied together. The value v<sub>i </sub>used for equation (7) described above becomes such that the decoding in-progress results u<sub>dv </sub>of the check node computation from the edges for which messages are to be determined from among the decoding in-progress results u<sub>j </sub>of the check node computation from the edges corresponding to 1s of each row, of the i-th column of the check matrix H, are subtracted from the decoding in-progress results v obtained as a result of the second computation in accordance with equation (5). That is, the computation of equation (1) for determining the value v<sub>i </sub>used for the computation of equation (7) is a computation in which the above-described equation (5) and equation (8) are combined.</p>
<p id="p-0278" num="0277">Therefore, in the decoding apparatus <b>400</b>, the first computation in accordance with equation (7) and equation (8) by the calculation section <b>412</b>, and the second computation in accordance with equation (5) by the calculation section <b>415</b> are alternately performed, and the calculation section <b>415</b> outputs the result of the final second computation as the decoded results, making it possible to perform repeated decoding of LDPC codes.</p>
<p id="p-0279" num="0278">Here, the first computation results in accordance with equation (7) and equation (8) are described as the decoding in-progress results u<sub>j</sub>, and these decoding in-progress results u<sub>j </sub>are equal to the check node computation results u<sub>j </sub>of equation (7).</p>
<p id="p-0280" num="0279">Since v of equation (5), which is determined from the second computation, is such that the check node computation results u<sub>j </sub>from the edges from which messages are to be determined are added to the variable node computation results v<sub>i </sub>of equation (1), only one of v is determined with respect to one column (one variable node) of the check matrix H.</p>
<p id="p-0281" num="0280">In the decoding apparatus <b>400</b>, the calculation section <b>412</b> performs the first computation by using the decoding in-progress results v (the second decoding in-progress results) corresponding to the column of the check matrix H, which are the results of the second computation by the calculation section <b>415</b>, and stores, in the memory <b>413</b> for storing decoding in-progress results, the decoding in-progress results u<sub>j </sub>(the first decoding in-progress results) of the check node computation from the edges of the messages (the messages output to each edge by each check node) of the edges corresponding to 1s of each row, of the i-th column of the check matrix H obtained as a result of the computation. Therefore, the capacity of the memory <b>413</b> for storing decoding in-progress results becomes a value such that, similarly to the number of 1s (the total number of edges) of the check matrix and the number of quantization bits are multiplied together. On the other hand, the calculation section <b>415</b> performs a second computation by using the decoding in-progress results u<sub>j </sub>corresponding to 1s of each row, of the i-th column of the check matrix H, which are the results of the first computation by the calculation section <b>412</b> and the received value u<sub>0i</sub>, and stores the decoding in-progress results v corresponding to the i-th column obtained as a result of the computation in the memory <b>410</b> for storing decoding in-progress results. Therefore, the capacity necessary for the memory <b>410</b> for storing decoding in-progress results becomes a value such that the number of columns of the check matrix, which is smaller than the number of 1s of the check matrix, that is, the code length of the LDPC codes, and the number of quantization bits of the number of quantization bits are multiplied together.</p>
<p id="p-0282" num="0281">Therefore, in the decoding apparatus <b>400</b> for decoding LDPC codes, in which is in the check matrix H are sparse, the capacity of the memory of the memory <b>410</b> for storing decoding in-progress results can be reduced when compared to the edge data storage memory <b>311</b> of <figref idref="DRAWINGS">FIGS. 16A and 16B</figref>. As a result, the circuit scale of the decoding apparatus <b>400</b> can be reduced.</p>
<p id="p-0283" num="0282">Furthermore, in the decoding apparatus <b>400</b>, since the calculation section <b>415</b> performs a second computation in accordance with equation (5), the decoding apparatus <b>400</b> does not need to have the block (not shown) for performing the computation of equation (5) for computing the final decoded results in the decoding apparatus <b>300</b> of <figref idref="DRAWINGS">FIGS. 16A to 16C</figref>. Thus, when compared to the decoding apparatus <b>300</b> of <figref idref="DRAWINGS">FIGS. 16A to 16C</figref>, the circuit scale of the decoding apparatus of <figref idref="DRAWINGS">FIG. 18</figref> can be reduced.</p>
<p id="p-0284" num="0283">A description will now be given in detail of the operation of each section of the decoding apparatus <b>400</b> of <figref idref="DRAWINGS">FIG. 18</figref>.</p>
<p id="p-0285" num="0284">Five decoding in-progress results D<b>415</b> corresponding to five columns of the check matrix, which are the results of the second computation by the calculation section <b>415</b>, are supplied to the memory <b>410</b> for storing decoding in-progress results from the calculation section <b>415</b>. The memory <b>410</b> for storing decoding in-progress results stores the five decoding in-progress results D<b>415</b> supplied from the calculation section <b>415</b> in sequence starting from the first address.</p>
<p id="p-0286" num="0285">More specifically, at the first address of the memory <b>410</b> for storing decoding in-progress results, the decoding in-progress results v from the first column up to the fifth column from among the decoding in-progress results corresponding to the column of the check matrix are stored. Similarly, at the second address, the decoding in-progress results v from the sixth column up to the tenth column are stored, and at the third address, the decoding in-progress results from the 11th column up to the 15th column are stored. Hereafter, similarly, the decoding in-progress results v from the 16th column up to the 90th column are stored at the fourth address up to the 18th address in units of five results, and a total of 90 decoding in-progress results v are stored in the memory <b>410</b> for storing decoding in-progress results. Therefore, the number of words of the memory <b>410</b> for storing decoding in-progress results becomes 18 such that 90, the number of columns of the check matrix H (the code length of the LDPC codes) of <figref idref="DRAWINGS">FIG. 15</figref>, is divided by 5, the number of decoding in-progress results that are read and written simultaneously.</p>
<p id="p-0287" num="0286">The memory <b>410</b> for storing decoding in-progress results simultaneously reads, from the decoding in-progress results D<b>415</b> which have already been stored, five decoding in-progress results v, which are “1” in the corresponding row of the check matrix H, of the decoding in-progress results u<sub>j </sub>to be determined by the calculation section <b>412</b> at the subsequent stage, and supplies them as decoding in-progress results D<b>410</b> to the cyclic shift circuit <b>411</b>.</p>
<p id="p-0288" num="0287">The memory <b>410</b> for storing decoding in-progress results is formed by, for example, a single-port RAM capable of simultaneously reading and writing five decoding in-progress results. Since, in the memory <b>410</b> for storing decoding in-progress results, the decoding in-progress results v corresponding to the column at which the computation is performed by the second computation of the calculation section <b>415</b> are stored, the amount of data stored in the memory <b>410</b> for storing decoding in-progress results, that is, the storage capacity necessary for the memory <b>410</b> for storing decoding in-progress results, is a multiplication value of the number of quantization bits of the decoding in-progress results and the number of columns of the check matrix H (the code length of the LDPC codes).</p>
<p id="p-0289" num="0288">Five decoding in-progress results D<b>410</b> are supplied to the cyclic shift circuit <b>411</b> from the memory <b>410</b> for storing decoding in-progress results. Also, a control signal D<b>619</b> indicating information (matrix data) as to the fact that is of the check matrix, which corresponds to the decoding in-progress results D<b>410</b>, are arranged as a result of how many times, for example, the unit matrix forming the basis in the check matrix is cyclically shifted, is supplied to the cyclic shift circuit <b>411</b> from the control section <b>417</b>. The cyclic shift circuit <b>611</b> performs a cyclic shifting of rearranging the five decoded results D<b>410</b> on the basis of the control signal D<b>619</b>, and supplies the results as decoding in-progress results D<b>411</b> to the calculation section <b>412</b>.</p>
<p id="p-0290" num="0289">The calculation section <b>412</b> includes five calculators <b>412</b><sub>1 </sub>to <b>412</b><sub>5</sub>. The five decoding in-progress results D<b>411</b> (the second decoding in-progress results) v, which are obtained as a result of the second computation by the calculation section <b>415</b>, are supplied to the calculation section <b>412</b> from the cyclic shift circuit <b>411</b>. Also, the five decoding in-progress results D<b>413</b> (the first decoding in-progress results) u<sub>j </sub>obtained previously as a result of the first computation by the calculators <b>412</b><sub>1 </sub>to <b>412</b><sub>5 </sub>are supplied to the calculation section <b>412</b> from the memory <b>413</b> for storing decoding in-progress results. The five decoding in-progress results D<b>411</b> and the five decoding in-progress results D<b>413</b> are supplied to each of the calculator <b>412</b><sub>1 </sub>to <b>412</b><sub>5</sub>. Furthermore, a control signal D<b>419</b> is supplied to the calculation section <b>412</b> from the control section <b>417</b>, and the control signal D<b>419</b> is supplied to the calculators <b>412</b><sub>1 </sub>to <b>412</b><sub>5</sub>. The control signal D<b>419</b> is a signal common to the five calculators <b>412</b><sub>1 </sub>to <b>412</b><sub>5</sub>.</p>
<p id="p-0291" num="0290">The calculators <b>412</b><sub>1 </sub>to <b>412</b><sub>5 </sub>perform the first computation in accordance with equation (7) and equation (8) by using the decoding in-progress results D<b>411</b> and the decoding in-progress results D<b>413</b>, and determine the decoding in-progress results D<b>412</b> (v<sub>i</sub>). The calculation section <b>412</b> supplies the five decoding in-progress results D<b>412</b> corresponding to five 1s of the check matrix, which are obtained as a result of the computations by the calculators <b>412</b><sub>1 </sub>to <b>412</b><sub>5</sub>, to the memory <b>413</b> for storing decoding in-progress results.</p>
<p id="p-0292" num="0291">The memory <b>413</b> for storing decoding in-progress results is formed by, for example, two single-port RAMs capable of simultaneously reading and writing five decoding in-progress results. The five decoding in-progress results D<b>412</b> are supplied to the memory <b>413</b> for storing decoding in-progress results from the calculation section <b>412</b>, and also, a control signal D<b>420</b> for controlling the reading and writing of the decoding in-progress results <b>413</b> is supplied to the memory <b>413</b> from the control section <b>417</b>.</p>
<p id="p-0293" num="0292">Based on the control signal D<b>420</b>, the memory <b>413</b> for storing decoding in-progress results collectively stores the five decoding in-progress results D<b>412</b> supplied from the calculation section <b>412</b>, and at the same time, reads the five decoding in-progress results D<b>412</b>, which have already been stored, and supplies them as decoding in-progress results D<b>413</b> to the calculation section <b>412</b> and the cyclic shift circuit <b>414</b>. That is, the memory <b>413</b> for storing decoding in-progress results simultaneously performs the reading of the decoding in-progress results D<b>413</b> to be supplied to the calculation section <b>412</b> and the cyclic shift circuit <b>414</b> and the writing of the decoding in-progress results D<b>412</b> supplied from the calculation section <b>412</b>.</p>
<p id="p-0294" num="0293">In the memory <b>413</b> for storing decoding in-progress results, the decoding in-progress results u<sub>j </sub>of the check node computation from the edges corresponding to 1s of each row, of the i-th column of the check matrix H, which are computed by the first computation of the calculation section <b>412</b>, are stored. Therefore, the amount of data stored in the memory <b>413</b> for storing decoding in-progress results, that is, the storage capacity necessary for the memory <b>413</b> for storing decoding in-progress results, becomes the multiplication value of the number of the quantization bits of the decoding in-progress results and the number of 1s of the check matrix.</p>
<p id="p-0295" num="0294">Five decoding in-progress results D<b>413</b> (the decoding in-progress results u<sub>j</sub>) are supplied to the cyclic shift circuit <b>414</b> from the memory <b>413</b> for storing decoding in-progress results. Also, a control signal D<b>421</b> indicating information (matrix data) as to the fact that 1s of the check matrix, which corresponds to the decoding in-progress results D<b>413</b>, are arranged as a result of how many times, for example, the unit matrix forming the basis in the check matrix is cyclically shifted, is supplied to the cyclic shift circuit <b>414</b> from the control section <b>417</b>. The cyclic shift circuit <b>414</b> performs a cyclic shifting of rearranging the five decoding in-progress results D<b>413</b> on the basis of the control signal D<b>421</b>, and supplies the results as decoding in-progress results D<b>414</b> to the calculation section <b>415</b>.</p>
<p id="p-0296" num="0295">The calculation section <b>415</b> includes five calculators <b>415</b><sub>1 </sub>to <b>415</b><sub>5</sub>. Five decoding in-progress results D<b>414</b> are supplied to the calculation section <b>415</b> from the cyclic shift circuit <b>414</b>, and the decoding in-progress results D<b>414</b> are supplied to the respective calculators <b>415</b><sub>1 </sub>to <b>415</b><sub>5</sub>. Furthermore, five pieces of received data D<b>417</b> (LDPC codes) are supplied to the calculation section <b>415</b> from the memory <b>417</b> for reception, and the pieces of received data D<b>417</b> are supplied to the respective calculators <b>415</b><sub>1 </sub>to <b>415</b><sub>5</sub>. Furthermore, a control signal D<b>422</b> is supplied to the calculation section <b>417</b> from the control section <b>417</b>, and the control signal D<b>422</b> is supplied to the calculators <b>415</b><sub>1 </sub>to <b>415</b><sub>5</sub>. The control signal D<b>422</b> is a signal common to the five calculators <b>417</b><sub>1 </sub>to <b>417</b><sub>5</sub>.</p>
<p id="p-0297" num="0296">The calculators <b>415</b><sub>1 </sub>to <b>415</b><sub>5 </sub>each perform the second computation in accordance with equation (5) by using the decoding in-progress results D<b>414</b> and the received data D<b>417</b>, and determine decoding in-progress results D<b>415</b>. The calculation section <b>415</b> supplies the five decoding in-progress results D<b>415</b> (v) obtained as a result of the second computation by the calculators <b>415</b><sub>1 </sub>to <b>415</b><sub>5 </sub>to the memory <b>410</b> for storing decoding in-progress results. Furthermore, when the computation that is being performed currently is the final second computation, the calculation section <b>415</b> outputs the five decoding in-progress results D<b>415</b>, which are obtained as a result of the computation, as the final decoded results.</p>
<p id="p-0298" num="0297">The memory <b>416</b> for reception stores, as received data D<b>417</b>, the reception LLR (log likelihood ratio), which is the 0-likeness value of the sign bit, which is calculated from the received value (the sign bit) received through the communication channel.</p>
<p id="p-0299" num="0298">That is, at the first address of the memory <b>416</b> for reception, the received data D<b>417</b> corresponding to the first column up to the fifth column of the check matrix from among the received data D<b>417</b> corresponding to the column of the check matrix is stored. Then, at the second address, the received data D<b>417</b> corresponding to the sixth column up to the tenth column of the check matrix is stored, and at the third address, the received data D<b>417</b> corresponding to the 11th column up to the 16th column of the check matrix is stored. Hereafter, similarly, at the fourth address up to the 18th address, the received data D<b>417</b> corresponding to the 17th column up to the 90th column is stored in units of five pieces of data.</p>
<p id="p-0300" num="0299">Then, a memory <b>616</b> for reception reads the received data D<b>417</b> which has already been stored in units of five pieces of data in the sequence necessary for the variable node computation, and supplies them to the calculation section <b>415</b>.</p>
<p id="p-0301" num="0300">The memory <b>416</b> for reception is formed by, for example, a single-port RAM capable of simultaneously reading and writing five pieces of received data. The amount of data stored in the memory <b>416</b> for reception, that is, the storage capacity necessary for the memory <b>315</b> for reception, is the multiplication value of the code length of the LDPC codes and the number of quantization bits of the received data. The number of words of the memory <b>416</b> for reception is 18, which is the value such that the code length of the LDPC codes, that is, 90, the number of columns of the check matrix, is divided by 5, the number of pieces of the received data D<b>417</b> to be read simultaneously.</p>
<p id="p-0302" num="0301">The control section <b>417</b> supplies a control signal D<b>418</b> to the cyclic shift circuit <b>411</b> and supplies a control signal D<b>419</b> to the calculation section <b>412</b> in order to control them, respectively. The control section <b>417</b> supplies a control signal D<b>420</b> to the memory <b>413</b> for storing decoding in-progress results, supplies a control signal D<b>421</b> to the cyclic shift circuit <b>414</b>, and supplies a control signal D<b>421</b> to the calculation section <b>415</b> so as to control them, respectively.</p>
<p id="p-0303" num="0302">As a result of the data being circulated in the order of the memory <b>410</b> for storing decoding in-progress results, the cyclic shift circuit <b>411</b>, the calculation section <b>412</b>, the memory <b>413</b> for storing decoding in-progress results, the cyclic shift circuit <b>414</b>, and the calculation section <b>415</b>, the decoding apparatus <b>400</b> can perform one decoding. In the decoding apparatus <b>400</b>, after decodings are performed repeatedly a predetermined number of times, the decoding in-progress results D<b>415</b>, which are the results of the second computation by the calculation section <b>415</b>, are output as the final decoded results.</p>
<p id="p-0304" num="0303"><figref idref="DRAWINGS">FIG. 21</figref> is a block diagram showing an example of the configuration of a calculator <b>412</b><sub>1 </sub>of the calculation section <b>412</b> of <figref idref="DRAWINGS">FIG. 18</figref>.</p>
<p id="p-0305" num="0304">In <figref idref="DRAWINGS">FIG. 21</figref>, a description is given of the calculator <b>412</b><sub>1</sub>, and the calculator <b>412</b><sub>2 </sub>to the calculator <b>412</b><sub>5 </sub>are also configured in the same way.</p>
<p id="p-0306" num="0305">In <figref idref="DRAWINGS">FIG. 21</figref>, the calculator <b>412</b><sub>1</sub>, is shown by assuming that each of the decoding in-progress results (u<sub>dv</sub>) obtained as a result of the first computation by the calculation section <b>412</b> at the previous time, together with the sign bit, is quantized to a total of six bits, and each of the decoding in-progress results (v) obtained as a result of the second computation by the calculator <b>415</b> is quantized to nine bits. Furthermore, a clock ck is supplied to the calculator <b>412</b><sub>1 </sub>of <figref idref="DRAWINGS">FIG. 21</figref>, and this clock ck is supplied to necessary blocks. Then, each block performs processing in synchronization with the clock ck.</p>
<p id="p-0307" num="0306">Based on the control signal D<b>419</b> supplied from the control section <b>417</b>, the calculator <b>412</b><sub>1 </sub>of <figref idref="DRAWINGS">FIG. 21</figref> performs a first computation in accordance with equation (7) and equation (8) by using the decoding in-progress results D<b>413</b> (u<sub>dv</sub>) obtained as a result of the first computation by the calculation section <b>412</b> at the previous time, which are read one-by-one from the memory <b>413</b> for storing decoding in-progress results, and decoding in-progress results D<b>411</b> (v), which are read one-by-one from the cyclic shift circuit <b>411</b>.</p>
<p id="p-0308" num="0307">More specifically, one decoding in-progress result D<b>411</b> from among the five 9-bit decoding in-progress results D<b>411</b> (v) supplied from the cyclic shift circuit <b>411</b> is supplied to the calculator <b>412</b><sub>1</sub>. Also, one decoding in-progress result D<b>413</b>, which is the result of the computation by the calculation section <b>412</b> at the previous time, from among the five 6-bit decoding in-progress results D<b>413</b>(u<sub>j</sub>), which are the results of the computation by the calculation section <b>412</b> at the previous time, which are supplied from the memory <b>413</b> for storing decoding in-progress results, is supplied to the calculator <b>412</b><sub>1</sub>. The 9-bit decoding in-progress results D<b>411</b> (v) and the 6-bit decoding in-progress results D<b>413</b> (u<sub>dv</sub>) are supplied to the subtractor <b>431</b>. Furthermore, the control signal D<b>419</b> is supplied to the calculator <b>412</b><sub>1 </sub>from the control section <b>417</b>, and the control signal D<b>419</b> is supplied to the selector <b>435</b> and the selector <b>442</b>.</p>
<p id="p-0309" num="0308">The subtractor <b>431</b> subtracts the 6-bit decoding in-progress result D<b>413</b> (u<sub>j</sub>) from the 9-bit decoding in-progress result D<b>411</b> (v), and outputs the 6-bit subtracted value D<b>431</b>. That is, the subtractor <b>431</b> performs a computation in accordance with equation (8), and outputs the subtracted value D<b>431</b> (v<sub>i</sub>), which is the result of the computation.</p>
<p id="p-0310" num="0309">A sign bit D<b>432</b> (sign (v<sub>i</sub>)) indicating the positive or negative sign of the highest-order bit from among the 6-bit subtracted value D<b>431</b> output from the subtractor <b>431</b> is supplied to the EXOR circuit <b>440</b>, and the absolute value D<b>433</b> (|v<sub>i</sub>|) of the five lower-order bits is supplied to the LUT <b>432</b>.</p>
<p id="p-0311" num="0310">The LUT <b>432</b> reads the 5-bit computation results D<b>434</b> (φ(|v<sub>i</sub>|)) such that the computation of φ(v<sub>i</sub>) in equation (7) is performed on the absolute value D<b>433</b> (|v<sub>i</sub>|), and supplies it to an adder <b>433</b> and an FIFO memory <b>438</b>.</p>
<p id="p-0312" num="0311">The adder <b>433</b> integrates the computation results D<b>434</b> by adding together the computation results D<b>434</b> (|v<sub>i</sub>(|v<sub>i</sub>|)) and the 9-bit value D<b>435</b> stored in the register <b>434</b>, and stores the 9-bit integrated value obtained as the result in the register <b>434</b> again. When the computation results for the absolute value D<b>433</b> (|v<sub>i</sub>|) determined from the decoding in-progress results D<b>411</b> corresponding to all the 1s over one row of the check matrix are integrated, the register <b>434</b> is reset.</p>
<p id="p-0313" num="0312">When the decoding in-progress results D<b>411</b> over one row of the check matrix are read one-by-one and the integrated value such that the computation results D<b>434</b> for one row are integrated is stored in the register <b>434</b>, the control signal D<b>419</b> supplied from the control section <b>417</b> changes from 0 to 1. For example, when the row weight is “9”, the control signal D<b>419</b> is “0” at the first to eighth clocks, and is “1” at the ninth clock.</p>
<p id="p-0314" num="0313">When the control signal D<b>419</b> is “1”, the selector <b>435</b> selects the value stored in the register <b>434</b>, that is, the 9-bit value D<b>435</b> (Σφ(|v<sub>i</sub>|)) from i=1 to i=d<sub>c</sub>) such that φ(|v<sub>i</sub>|) determined from the decoding in-progress results D<b>411</b> (the decoding in-progress results v) corresponding to all the 1s over one row of the check matrix are integrated, and outputs the value as a value D<b>436</b> to the register <b>436</b>, whereby it is stored. The register <b>436</b> supplies the stored value D<b>436</b> as a 9-bit value D<b>437</b> to the selector <b>435</b> and the adder <b>437</b>. When the control signal D<b>419</b> is “0”, the selector <b>435</b> selects the value D<b>437</b> supplied from the register <b>436</b>, and outputs the value to the register <b>436</b>, whereby it is stored again. That is, until φ(|v<sub>i</sub>|) determined from the decoding in-progress results D<b>411</b> (the decoding in-progress results v) corresponding to all the 1s over one row of the check matrix are integrated, the register <b>436</b> supplies φ(|v<sub>i</sub>|) integrated at the previous time to the selector <b>435</b> and the adder <b>437</b>.</p>
<p id="p-0315" num="0314">On the other hand, the FIFO memory <b>438</b> delays the computation result D<b>434</b> (φ(|v<sub>i</sub>|)) output by the LUT <b>432</b> until a new value D<b>437</b> (Σφ(|v<sub>i</sub>|)) from i=1 to i=d<sub>c</sub>) is output from the register <b>436</b>, and supplies it as a 5-bit value D<b>438</b> to the subtractor <b>437</b>. The subtractor <b>437</b> subtracts the value D<b>438</b> supplied from the FIFO memory <b>438</b>, from the value D<b>437</b> supplied from the register <b>436</b>, and supplies the subtracted result as a 5-bit subtracted value D<b>439</b> to the LUT <b>439</b>. That is, the subtractor <b>437</b> subtracts, from the integrated value of φ(|v<sub>i</sub>|) determined from the decoding in-progress results D<b>411</b> (the decoding in-progress results v) corresponding to all the 1s over one row of the check matrix, the decoding in-progress results corresponding to the edges to be determined, that is, φ(|v<sub>i</sub>|) determined from the decoding in-progress results D<b>411</b> (the decoding in-progress results v) corresponding to predetermined 1s of the check matrix, and supplies the subtracted value (Σφ(|v<sub>i</sub>|)) from (i=1 to i=d<sub>c</sub>−1) as a subtracted value D<b>439</b> to the LUT <b>439</b>.</p>
<p id="p-0316" num="0315">The LUT <b>439</b> outputs the 5-bit computation result D<b>440</b> (φ<sup>−1</sup>(Σφ(|v<sub>i</sub>|))) such that the computation of φ<sup>−1 </sup>(Σφ(|v<sub>i</sub>|)) in equation (7) is performed on the subtracted value D<b>439</b> (Σφ(|v<sub>i</sub>|) from i=1 to i=d<sub>c</sub>−1).</p>
<p id="p-0317" num="0316">In parallel with the above processing, the EXOR circuit <b>440</b> performs a multiplication of sign bits by computing the exclusive OR of a 1-bit value D<b>442</b> stored in the register <b>441</b> and the sign bit D<b>432</b>, and stores a 1-bit multiplication result D<b>441</b> in the register <b>441</b> again. When the sign bit D<b>432</b> determined from the decoding in-progress results D<b>411</b> corresponding to all the 1s over one row of the check matrix is multiplied, the register <b>441</b> is reset.</p>
<p id="p-0318" num="0317">When the multiplication results D<b>441</b> (Πsign (v<sub>i</sub>)) from i=1 to d<sub>c</sub>) such that the sign bit D<b>432</b> determined from the decoding in-progress results D<b>411</b> corresponding to all the 1s over one row of the check matrix are stored in the register <b>441</b> is multiplied, the control signal D<b>419</b> supplied from the control section <b>417</b> changes from “0” to “1”.</p>
<p id="p-0319" num="0318">When the control signal D<b>419</b> is “1”, the selector <b>442</b> selects the value stored in the register <b>441</b>, that is, the value D<b>442</b> (Πsign (v<sub>i</sub>) from i=1 to i=d<sub>c</sub>) such that the sign bit D<b>432</b> determined from the decoding in-progress results D<b>411</b> corresponding to all the 1s over one row of the check matrix is multiplied, and outputs the value as a 1-bit value D<b>443</b> to the register <b>443</b>. The register <b>443</b> supplies the stored value D<b>443</b> as a 1-bit value D<b>444</b> to a selector <b>442</b> and an EXOR circuit <b>445</b>. When the control signal D<b>419</b> is “0”, the selector <b>442</b> selects a value D<b>444</b> supplied from the register <b>443</b>, and outputs the value to the register <b>443</b>, whereby it is stored again. That is, until the sign bit D<b>432</b> determined from the decoding in-progress results D<b>411</b> (the decoding in-progress results v) corresponding to all the 1s over one row of the check matrix is multiplied, the register <b>443</b> supplies the value stored at the previous time to the selector <b>442</b> and the EXOR circuit <b>445</b>.</p>
<p id="p-0320" num="0319">On the other hand, the FIFO memory <b>444</b> delays the sign bit D<b>432</b> until a new value D<b>444</b> (Πsign (v<sub>i</sub>) from i=1 to i=d<sub>c</sub>) is supplied from the register <b>443</b> to the EXOR circuit <b>445</b>, and supplies it as a 1-bit value D<b>445</b> to the EXOR circuit <b>445</b>. The EXOR circuit <b>445</b> divides the value D<b>444</b> by the value D<b>445</b> by computing the exclusive OR of the value D<b>444</b> supplied from the register <b>443</b> and the value D<b>445</b> supplied from the FIFO memory <b>444</b>, and outputs the 1-bit divided result as a divided value D<b>446</b>. That is, the EXOR circuit <b>445</b> divides the multiplied value of the sign bit D<b>432</b> (sign (v<sub>i</sub>)) determined from the decoding in-progress results D<b>411</b> corresponding to all the 1s over one row of the check matrix by the sign bit D<b>432</b> (sign (v<sub>i</sub>)) determined from the decoding in-progress results D<b>411</b> corresponding to predetermined 1s of the check matrix, and outputs the divided value (Πsign (v<sub>i</sub>)) from i=1 to i=d<sub>c</sub>−1) as a divided value D<b>446</b>.</p>
<p id="p-0321" num="0320">In the calculator <b>412</b><sub>1</sub>, a total of six bits, in which the 5-bit computation results D<b>440</b> output from the LUT <b>439</b> are the five lower-order bits and the 1-bit divided value D<b>446</b> output from the EXOR circuit <b>445</b> is the highest-order bit, is output as the decoding in-progress results D<b>412</b> (the decoding in-progress results u<sub>j</sub>).</p>
<p id="p-0322" num="0321">As described above, in the calculator <b>412</b><sub>1</sub>, the computations of equation (7) and equation (8) are performed, and the decoding in-progress result u<sub>j </sub>is determined.</p>
<p id="p-0323" num="0322">Since the maximum of the row weight of the check matrix of <figref idref="DRAWINGS">FIG. 15</figref> is 9, that is, since the maximum number of the decoding in-progress results D<b>411</b> (v) and the decoding in-progress results D<b>413</b> (u<sub>dv</sub>) supplied to the calculator <b>412</b><sub>1 </sub>is 9, the calculator <b>412</b><sub>1 </sub>has an FIFO memory <b>438</b> for delaying nine computation results D<b>434</b> (φ(|v<sub>i</sub>|)) determined from the nine decoding in-progress results D<b>411</b>, and an FIFO memory <b>444</b> for delaying nine sign bits D<b>432</b>. When the message of the row whose weight is less than 9 is to be calculated, the amount of the delay in the FIFO memory <b>438</b> and the FIFO memory <b>444</b> is reduced to the value of the weight of the row.</p>
<p id="p-0324" num="0323"><figref idref="DRAWINGS">FIG. 22</figref> is a block diagram showing an example of the configuration of a calculator <b>415</b><sub>1 </sub>of the calculation section <b>415</b>.</p>
<p id="p-0325" num="0324">In <figref idref="DRAWINGS">FIG. 22</figref>, a description is given of the calculator <b>415</b><sub>1</sub>, and the calculator <b>415</b><sub>2 </sub>to the calculator <b>415</b><sub>5 </sub>are also configured in the same way.</p>
<p id="p-0326" num="0325">In <figref idref="DRAWINGS">FIG. 22</figref>, the calculator <b>415</b><sub>1 </sub>is shown by assuming that each decoding in-progress result (u<sub>j</sub>) obtained as a result of the first computation by the calculator <b>412</b>, together with the sign bit, is quantized to a total of six bits. Furthermore, a clock ck is supplied to the calculator <b>415</b><sub>1 </sub>of <figref idref="DRAWINGS">FIG. 22</figref>, and this clock ck is supplied to necessary blocks. Each block performs processing in synchronization with the clock ck.</p>
<p id="p-0327" num="0326">Based on the control signal D<b>422</b> supplied from the control section <b>417</b>, the calculator <b>415</b><sub>1 </sub>of <figref idref="DRAWINGS">FIG. 22</figref> performs a second computation in accordance with equation (5) by using the received data D<b>417</b> (the received value u<sub>0i</sub>) read one-by-one from the memory <b>416</b> for reception and the decoding in-progress results D<b>414</b> (u<sub>j</sub>) read one-by-one from the cyclic shift circuit <b>414</b>.</p>
<p id="p-0328" num="0327">More specifically, in the calculator <b>415</b><sub>1</sub>, the 6-bit decoding in-progress results D<b>414</b> (the decoding in-progress results u<sub>j</sub>) corresponding to 1s of each row of the check matrix are read one-by-one from the cyclic shift circuit <b>414</b>, and the decoding in-progress results D<b>414</b> are supplied to the adder <b>471</b>. Furthermore, in the calculator <b>415</b><sub>1</sub>, the 6-bit received data D<b>417</b> is read one-by-one from the memory <b>416</b> for reception, and is supplied to the adder <b>475</b>. Furthermore, a control signal D<b>422</b> is supplied to the calculator <b>415</b><sub>1 </sub>from the control section <b>417</b>, and the control signal D<b>422</b> is supplied to the selector <b>473</b>.</p>
<p id="p-0329" num="0328">The adder <b>471</b> integrates the decoding in-progress results D<b>414</b> by adding together the decoding in-progress results D<b>414</b> (the decoding in-progress results u<sub>j</sub>) and the 9-bit integrated value D<b>471</b> stored in the register <b>472</b>, and stores the 9-bit integrated value in the register <b>472</b> again. When the decoding in-progress results D<b>414</b> corresponding to all the 1s over one row of the check matrix are integrated, the register <b>472</b> is reset.</p>
<p id="p-0330" num="0329">When the decoding in-progress results D<b>414</b> over one row of the check matrix are read one-by-one and the value such that the decoding in-progress results D<b>414</b> for one row are integrated is stored in the register <b>472</b>, the control signal D<b>422</b> supplied from the control section <b>417</b> changes from “0” to “1”. For example, when the weight of the column is “5”, the control signal D<b>422</b> is “0” at the first clock up to the fourth clock, and is “1” at the fifth clock.</p>
<p id="p-0331" num="0330">When the control signal D<b>422</b> is “1”, the selector <b>473</b> selects the value stored in the register <b>472</b>, that is, a 9-bit value <b>471</b> (Σu<sub>j </sub>from j=1 to d<sub>v</sub>) such that the decoding in-progress results D<b>414</b> (the decoding in-progress results u<sub>j</sub>) from all the edges over one row of the check matrix are integrated, and outputs the value to the register <b>474</b>, whereby it is stored. The register <b>474</b> supplies the stored value D<b>471</b> as a 9-bit value D<b>472</b> to the selector <b>471</b> and the adder <b>475</b>. When the control signal D<b>422</b> is “0”, the selector <b>473</b> selects the value D<b>472</b> supplied from the register <b>474</b>, and outputs the value to the register <b>474</b>, whereby it is stored again. That is, until the decoding in-progress results D<b>414</b> (the decoding in-progress results u<sub>j</sub>) from all the edges over one row of the check matrix are integrated, the register <b>474</b> supplies the previously integrated value to the selector <b>473</b> and the adder <b>475</b>.</p>
<p id="p-0332" num="0331">The adder <b>475</b> adds together the 9-bit value D<b>472</b> and the 6-bit received data D<b>417</b> supplied from the memory <b>416</b> for reception, and outputs the 6-bit value obtained thereby as the decoding in-progress result D<b>415</b> (the decoding in-progress results v).</p>
<p id="p-0333" num="0332">As described above, in the calculator <b>415</b><sub>1</sub>, the computation of equation (5) is performed, and the decoding in-progress result v is determined.</p>
<p id="p-0334" num="0333">Since the maximum of the weights of the columns of the check matrix of <figref idref="DRAWINGS">FIG. 8</figref> is 5, that is, since the maximum number of the decoding in-progress results u<sub>j </sub>supplied to the calculator <b>415</b><sub>1 </sub>is 5, the calculator <b>415</b><sub>1 </sub>adds together a maximum of five 6-bit decoding in-progress results u<sub>j</sub>. Therefore, the output of the calculator <b>415</b><sub>1 </sub>is a 9-bit value.</p>
<p id="p-0335" num="0334"><figref idref="DRAWINGS">FIG. 23</figref> is a block diagram showing an example of the configuration of the memory <b>413</b> for storing decoding in-progress results of <figref idref="DRAWINGS">FIG. 18</figref>.</p>
<p id="p-0336" num="0335">The memory <b>413</b> for storing decoding in-progress results includes switches <b>501</b> and <b>504</b>, and two RAMs <b>502</b> and <b>503</b> for storing decoding in-progress results, which are single-port RAMs.</p>
<p id="p-0337" num="0336">Before describing in detail each section of the memory <b>413</b> for storing decoding in-progress results, the method of storing data in the RAMs <b>502</b> and <b>503</b> for storing decoding in-progress results will be described first.</p>
<p id="p-0338" num="0337">The RAMs <b>502</b> and <b>503</b> for storing decoding in-progress results store the decoding in-progress results D<b>412</b> that are obtained as a result of the first computation and that are supplied via a switch <b>501</b>.</p>
<p id="p-0339" num="0338">More specifically, at the first address up to the ninth address of the RAM <b>502</b> for storing decoding in-progress results, the decoding in-progress results D<b>412</b> (D<b>501</b>) corresponding to 1s from the first row up to the fifth row of the check matrix H of <figref idref="DRAWINGS">FIG. 15</figref> are stored in such a manner that they are packed closer (in a manner in which 0s are ignored) in the horizontal direction (in the column direction) for each row.</p>
<p id="p-0340" num="0339">More specifically, when the j-th row and the i-th column is denoted as (j, i), at the first address of the RAM <b>502</b> for storing decoding in-progress results, data corresponding to 1s of the 5×5 unit matrix from (1, 1) to (5, 5), which is a sub-matrix of the check matrix of <figref idref="DRAWINGS">FIG. 15</figref>, is stored. At the second address, data corresponding to 1s of the shift matrix from (1, 21) to (5, 25) (a shift matrix in which the 5×5 unit matrix is cyclically shifted by three to the right), which is a sub-matrix of the check matrix of <figref idref="DRAWINGS">FIG. 15</figref>, is stored. Similarly, at the third address up to the eighth address, also, data is stored in such a manner as to correspond to the sub-matrix of the check matrix of <figref idref="DRAWINGS">FIG. 15</figref>. Then, at the ninth address, data corresponding to 1s of the shift matrix from (1, 86) to (5, 90) of the check matrix (the shift matrix in which 1s of the first row of the 5×5 unit matrix are substituted with 0s, and the unit matrix is cyclically shifted by one to the left) is stored. Here, in the shift matrix from (1, 86) to (5, 90) of the check matrix of <figref idref="DRAWINGS">FIG. 15</figref>, since is do not exist in the first row, data is not stored at the ninth address.</p>
<p id="p-0341" num="0340">At the 10th address up to the 18th address of the RAM <b>502</b> for storing decoding in-progress, data corresponding to 1s from the 11th row up to the 15th row of the check matrix of <figref idref="DRAWINGS">FIG. 15</figref> is stored. That is, at the 10th address, data corresponding to 1s of the matrix, in which the 5×5 unit matrix from (11, 6) to (15, 10) of the check matrix is cyclically shifted by three to the right, is stored. At the 11th address, data corresponding to 1s of the shift matrix making up the sum matrix (the sum matrix, which is the sum of the 5×5 unit matrix and the shift matrix in which the 5×5 unit matrix is cyclically shifted by three to the right) from (11, 11) to (15, 15) of the check matrix is stored. At the 12th address, data corresponding to 1s of the unit matrix making up the sum matrix from (11, 6) to (15, 10) of the check matrix is stored. Hereafter, also, at the 13th address up to the 18th address, data is stored in such a manner as to correspond to the check matrix.</p>
<p id="p-0342" num="0341">More specifically, for the sub-matrix whose weight is 2 or more, data (the decoding in-progress results of the messages corresponding to the edges belonging to the unit matrix, the quasi-unit matrix, or the shift matrix) corresponding to the positions of 1s of the unit matrix whose weight is 1, the quasi-unit matrix, or the shift matrix when the sub-matrix is represented in the form of the sum of two or more of the (P×P) unit matrix whose weight is 1, the quasi-unit matrix in which one or more 1s, which are the elements of the unit matrix, are substituted with 0, and a shift matrix in which the unit matrix or the quasi-unit matrix is cyclically shifted is stored at the same address.</p>
<p id="p-0343" num="0342">Similarly, at the 19th address up to the 27th address of the RAM <b>502</b> for storing decoding in-progress, data corresponding to 1s from the 21th row up to the 25th row is stored in such a manner as to correspond to the check matrix of <figref idref="DRAWINGS">FIG. 15</figref>. That is, the number of words of the RAM <b>502</b> for storing decoding in-progress results is 27.</p>
<p id="p-0344" num="0343">At the first address up to the ninth address of a RAM <b>503</b> for storing decoding in-progress results, decoding in-progress results D<b>412</b> (D<b>502</b>) corresponding to 1s from the sixth row up to the 10th row of the check matrix H of <figref idref="DRAWINGS">FIG. 15</figref> are stored in such a manner that they are packed closer in the horizontal direction (in the column direction) for each row (in a manner in which 0s are ignored).</p>
<p id="p-0345" num="0344">More specifically, at the first address of the RAM <b>503</b> for storing decoding in-progress results, data corresponding to 1s of the first shift matrix making up the sum matrix from (6, 1) to (10, 5) (the sum matrix, which is the sum of a first shift matrix in which the 5×5 unit matrix is cyclically shifted by one to the right and a second shift matrix in which the unit matrix is cyclically shifted by two to the right), which is a sub-matrix of the check matrix is stored. At the second address, data corresponding to 1s of the second shift matrix making up the sum matrix from (6, 1) to (10, 5), which is a sub-matrix of the check matrix, is stored. Hereafter, also, at the third address up to the ninth address, data is stored in such a manner as to correspond to the sub-matrix of the check matrix.</p>
<p id="p-0346" num="0345">Similarly, at the 10th address up to the 18th address of the RAM <b>503</b> for storing decoding in-progress, data corresponding to 1s from the 16th row up to the 20th row of the check matrix of <figref idref="DRAWINGS">FIG. 15</figref> is stored in such a manner as to correspond to the check matrix of <figref idref="DRAWINGS">FIG. 15</figref>. At the 19th address up to the 27th address, data corresponding to 1s from the 26th row up to the 30th row of the check matrix of <figref idref="DRAWINGS">FIG. 15</figref> is stored in such a manner as to correspond to the check matrix of <figref idref="DRAWINGS">FIG. 15</figref>. That is, the number of words of the RAM <b>503</b> for storing decoding in-progress results is 27.</p>
<p id="p-0347" num="0346">In the manner described above, the number of words of the RAMs <b>502</b> and <b>503</b> for storing decoding in-progress results is 27. That is, the number of words becomes a value such that 9, which is the row weight of the check matrix, is multiplied by 30, the number of rows, the multiplied result (the number of 1s of the check matrix) is divided by 5, the number of decoding in-progress results D<b>501</b>, which are read simultaneously, and further, the result is divided by 2, the number of RAM <b>502</b> for storing decoding in-progress results possessed by the memory <b>413</b> for storing decoding in-progress results.</p>
<p id="p-0348" num="0347">A description will now be given in detail of the operation of each section of the memory <b>413</b> for storing decoding in-progress results of <figref idref="DRAWINGS">FIG. 23</figref>.</p>
<p id="p-0349" num="0348">When the first computation is performed by the calculation section <b>412</b>, the decoding in-progress results D<b>412</b> (u<sub>j</sub>) obtained as a result of the first computation are supplied from the calculation section <b>412</b> to the memory <b>413</b> for storing decoding in-progress results, and the decoding in-progress results D<b>412</b> are written at a predetermined address of one of the RAM <b>502</b> for storing decoding in-progress results and the RAM <b>503</b> for storing decoding in-progress results. At the same time, the decoding in-progress results D<b>412</b> (u<sub>j</sub>) obtained as a result of the first computation by the calculation section <b>412</b> at the previous time is read from the other RAM, and are output to the calculation section <b>412</b>. On the other hand, when the second computation is performed by the calculation section <b>415</b>, the memory <b>413</b> for storing decoding in-progress results does not perform writing into the RAM <b>502</b> for storing decoding in-progress results or the RAM <b>503</b> for storing decoding in-progress results, reads the decoding in-progress results from a predetermined address of one of the RAMs, and supplies them to the cyclic shift circuit <b>414</b>.</p>
<p id="p-0350" num="0349">The five decoding in-progress results D<b>412</b> are supplied from the calculation section <b>412</b> to the switch <b>501</b>, and also, a control signal D<b>420</b><sub>1 </sub>indicating the selection of one of the RAM <b>502</b> for storing decoding in-progress results and the RAM <b>503</b> for storing decoding in-progress results as a memory for writing the decoding in-progress results D<b>412</b> is supplied to the switch <b>501</b> from the control section <b>417</b>. Based on the control signal D<b>420</b><sub>1</sub>, the switch <b>501</b> selects one of the RAM <b>502</b> for storing decoding in-progress results and the RAM <b>503</b> for storing decoding in-progress results, and supplies the five decoding in-progress results D<b>412</b> to the selected RAM.</p>
<p id="p-0351" num="0350">The five decoding in-progress results D<b>412</b> are supplied as decoding in-progress results D<b>501</b> to the RAM <b>502</b> for storing decoding in-progress results from the switch <b>501</b>, and also, a control signal D<b>420</b><sub>2 </sub>indicating the address is supplied thereto from the control section <b>417</b>. The RAM <b>502</b> for storing decoding in-progress results reads the five decoding in-progress results D<b>501</b> obtained as a result of the first computation by the calculation section <b>412</b> at the previous time, which are already stored at the address indicated by the control signal D<b>402</b><sub>2</sub>, and supplies them as decoding in-progress results D<b>503</b> to the switch <b>504</b>. Furthermore, the RAM <b>502</b> for storing decoding in-progress results stores (writes) the five decoding in-progress results D<b>501</b> supplied from the switch <b>501</b> at the address indicated by the control signal D<b>402</b><sub>2</sub>.</p>
<p id="p-0352" num="0351">The five decoding in-progress results D<b>412</b> are supplied as decoding in-progress results D<b>502</b> to the RAM <b>503</b> for storing decoding in-progress results from the switch <b>501</b>, and also, a control signal D<b>420</b><sub>3 </sub>indicating the address is supplied to the RAM <b>503</b> from the control section <b>417</b>. The RAM <b>503</b> for storing decoding in-progress results reads the five decoding in-progress results D<b>502</b> obtained as a result of the first computation by the calculation section <b>412</b> at the previous time, which have already been stored at the address indicated by the control signal D<b>420</b><sub>3</sub>, and supplies them as decoding in-progress results D<b>504</b> to the switch <b>504</b>. Furthermore, the RAM <b>502</b> for storing decoding in-progress results stores (writes) the five decoding in-progress results D<b>502</b> supplied from the switch <b>501</b> at the address indicated by the control signal D<b>420</b><sub>3</sub>.</p>
<p id="p-0353" num="0352">The decoding in-progress results D<b>503</b> are supplied to the switch <b>504</b> from the RAM <b>502</b> for storing decoding in-progress results or the decoding in-progress results D<b>504</b> are supplied to the switch <b>504</b> from the RAM <b>503</b> for storing decoding in-progress results. Furthermore, a control signal D<b>420</b><sub>4 </sub>indicating the selection one of the RAM <b>502</b> for storing decoding in-progress results and the RAM <b>503</b> for storing decoding in-progress results is supplied to the switch <b>504</b> from the control section <b>417</b>. Based on the control signal D<b>420</b><sub>1</sub>, the switch <b>504</b> selects one of the RAM <b>502</b> for storing decoding in-progress results and the RAM <b>503</b> for storing decoding in-progress results, and supplies the five decoding in-progress results supplied from the selected RAM, as the five decoding in-progress results D<b>413</b>, to the calculation section <b>412</b> and the cyclic shift circuit <b>414</b>.</p>
<p id="p-0354" num="0353"><figref idref="DRAWINGS">FIG. 24</figref> is a timing chart illustrating reading and writing operations of the RAM <b>502</b> for storing decoding in-progress results and the RAM <b>503</b> for storing decoding in-progress results of the memory <b>413</b> for storing decoding in-progress results.</p>
<p id="p-0355" num="0354">In <figref idref="DRAWINGS">FIG. 24</figref>, the horizontal axis indicates time (t).</p>
<p id="p-0356" num="0355">In the memory <b>413</b> for storing decoding in-progress results, when the first computation is to be performed by the calculation section <b>412</b>, based on the control signal D<b>420</b><sub>2</sub>, the RAM <b>502</b> for storing decoding in-progress results reads nine times decoding in-progress results D<b>501</b> corresponding to 1s from the first row up to the fifth row of the check matrix, which are stored at the same address, from among the decoding in-progress results D<b>501</b> obtained as a result of the first computation by the calculation section <b>412</b> at the previous time, which are already stored, in units of five results, and supplies them to the calculation section <b>412</b> via the switch <b>504</b>. That is, since the row weight of the check matrix H of <figref idref="DRAWINGS">FIG. 15</figref> is 9, there are nine decoding in-progress results corresponding to 1s of each row of the check matrix H, and the RAM <b>502</b> for storing decoding in-progress results reads nine times the five decoding in-progress results D<b>501</b> corresponding to 1s from the first row to the fifth row in units of five results.</p>
<p id="p-0357" num="0356">Next, based on the control signal D<b>420</b><sub>3</sub>, the RAM <b>503</b> for storing decoding in-progress results reads continuously nine times the decoding in-progress results D<b>502</b> corresponding to 1s from the sixth row to the 10th row, which are stored at the same address, from among the decoding in-progress results D<b>502</b> obtained as a result of the first computation by the calculation section <b>412</b> at the previous time, which are already stored, in units of five results, and supplies them to the calculation section <b>412</b> via the switch <b>504</b>. At the same time, the five decoding in-progress results D<b>412</b> corresponding to 1s from the first row to the fifth row of the check matrix, which are obtained as a result of the first computation that is being performed currently by the calculation section <b>412</b> are supplied as the decoding in-progress results D<b>501</b> to the RAM <b>502</b> for storing decoding in-progress results via the switch <b>501</b>. Based on the control signal D<b>420</b><sub>2</sub>, the RAM <b>502</b> for storing decoding in-progress results continuously stores nine times the decoding in-progress results D<b>501</b> at the address at which the already read decoding in-progress results D<b>503</b> are stored.</p>
<p id="p-0358" num="0357">Thereafter, based on the control signal D<b>420</b><sub>2</sub>, the RAM <b>502</b> for storing decoding in-progress results continuously reads nine times the decoding in-progress results D<b>501</b> corresponding to 1s from the 11th row up to the 15th row of the check matrix, which are stored at the same address, from among the already stored decoding in-progress results D<b>501</b> obtained as a result of the first computation by the calculation section <b>412</b> at the previous time, in units of five results, and supplies them to the calculation section <b>412</b> via the switch <b>504</b>. At the same time, five decoding in-progress results D<b>412</b> corresponding to 1s from the sixth row up to the 10th row of the check matrix, which are obtained as a result of the first computation that is being currently performed by the calculation section <b>412</b>, are supplied as the decoding in-progress results D<b>502</b> to the RAM <b>503</b> for storing decoding in-progress results via the switch <b>501</b>. Based on the control signal D<b>420</b><sub>3</sub>, the RAM <b>503</b> for storing decoding in-progress results continuously stores nine times the decoding in-progress results D<b>502</b> at the address at which the already read decoding in-progress results D<b>504</b>, are stored.</p>
<p id="p-0359" num="0358">Hereafter, similarly, until the decoding in-progress results corresponding to all the 1s of the check matrix, which are obtained as a result of the first computation by the calculation section <b>412</b>, are stored in the RAM <b>502</b> for storing decoding in-progress results or the RAM <b>503</b> for storing decoding in-progress results, the RAM <b>502</b> for storing decoding in-progress results and the RAM <b>503</b> for storing decoding in-progress results alternately perform the reading or writing in units of nine times.</p>
<p id="p-0360" num="0359">In the memory <b>413</b> for storing decoding in-progress results, when the second computation is performed by the calculation section <b>415</b>, based on the control signal D<b>420</b><sub>2</sub>, the already stored decoding in-progress results D<b>503</b>, which are obtained as a result of the first computation, from the RAM <b>502</b> for storing decoding in-progress results, or based on the control signal D<b>420</b><sub>3</sub>, the already stored decoding in-progress results D<b>504</b> obtained as a result of the first computation, are read from the RAM <b>503</b> for storing decoding in-progress results, and the read-out decoding in-progress results are supplied to the cyclic shift circuit <b>414</b> via the switch <b>504</b>.</p>
<p id="p-0361" num="0360"><figref idref="DRAWINGS">FIG. 25</figref> is a flowchart illustrating the decoding process of the decoding apparatus <b>400</b> of <figref idref="DRAWINGS">FIG. 18</figref>. This process is started, for example, when received data to be decoded is stored in the memory <b>416</b> for reception.</p>
<p id="p-0362" num="0361">In step S<b>50</b>, the cyclic shift circuit <b>414</b> cyclically shifts the five decoding in-progress results D<b>413</b> to be stored in step S<b>56</b> (to be described later), which are supplied from the memory <b>413</b> for storing decoding in-progress results, and supplies them to the calculation section <b>415</b>.</p>
<p id="p-0363" num="0362">More specifically, five decoding in-progress results D<b>413</b> are supplied to the cyclic shift circuit <b>414</b> from the memory <b>413</b> for storing decoding in-progress results, and also, a control signal D<b>421</b> indicating information (matrix data) as to the fact that 1s of the check matrix, which corresponds to the decoding in-progress results D<b>413</b>, are arranged as a result of how many times, for example, the unit matrix forming the basis in the check matrix is cyclically shifted, is supplied to the cyclic shift circuit <b>414</b> from the control section <b>417</b>. Based on the control signal D<b>421</b>, the cyclic shift circuit <b>414</b> cyclically shifts (rearranges) the five decoding in-progress results D<b>413</b>, and supplies the results as decoding in-progress results D<b>414</b> to the calculation section <b>415</b>.</p>
<p id="p-0364" num="0363">When the first computation has not yet been performed on the received data D<b>417</b> supplied to the memory <b>416</b> for reception and the decoding in-progress results D<b>413</b> are not stored in the memory <b>413</b> for storing decoding in-progress results, the calculation section <b>415</b> sets the decoding in-progress results u<sub>j </sub>to an initial value.</p>
<p id="p-0365" num="0364">In step S<b>51</b>, the calculation section <b>415</b> performs the second computation, and supplies the decoding in-progress results D<b>415</b>, which are the results of the computation, to the memory <b>410</b> for storing decoding in-progress results.</p>
<p id="p-0366" num="0365">More specifically, in step S<b>50</b>, the five decoding in-progress results D<b>414</b> are supplied to the calculation section <b>415</b> from the cyclic shift circuit <b>414</b>, and also, five received data D<b>417</b> are supplied to the calculation section <b>415</b> from the memory <b>416</b> for received data. The decoding in-progress results D<b>415</b> and the received data D<b>417</b> are supplied individually to each of the calculators <b>415</b><sub>1 </sub>to <b>415</b><sub>5 </sub>of the calculation section <b>415</b>. Furthermore, a control signal D<b>422</b> is supplied to the calculation section <b>415</b> from the control section <b>417</b>, and the control signal D<b>422</b> is supplied to the calculator <b>415</b><sub>1 </sub>to <b>415</b><sub>5</sub>.</p>
<p id="p-0367" num="0366">Based on the control signal D<b>422</b>, the calculators <b>415</b><sub>1 </sub>to <b>415</b><sub>5 </sub>each perform a computation in accordance with equation (5) by using the decoding in-progress results D<b>414</b> and the received data D<b>417</b>, and supply the decoding in-progress results D<b>415</b> (v) corresponding to the column of the check matrix, which are obtained as a result of the computation, to the memory <b>410</b> for storing decoding in-progress results.</p>
<p id="p-0368" num="0367">After the processing of step S<b>51</b>, the process proceeds to step S<b>52</b>, where the memory <b>410</b> for storing decoding in-progress results stores the decoding in-progress results D<b>415</b> supplied from the calculation section <b>415</b> in step S<b>51</b> at the same address, and the process then proceeds to step S<b>53</b>.</p>
<p id="p-0369" num="0368">In step S<b>53</b>, the control section <b>417</b> determines whether or not all the decoding in-progress results D<b>415</b> corresponding to the columns of the check matrix have been computed by the calculation section <b>415</b>. When it is determined that all the decoding in-progress results D<b>415</b> have not been computed, the process returns to step S<b>50</b>, and the above-described processing is performed again.</p>
<p id="p-0370" num="0369">On the other hand, when the control section <b>417</b> determines in step S<b>53</b> that all the decoding in-progress results D<b>415</b> corresponding to the column of the check matrix have been computed by the calculation section <b>415</b>, the process proceeds to step S<b>54</b>, where the cyclic shift circuit <b>411</b> cyclically shifts the decoding in-progress results D<b>410</b> (v) supplied from the memory <b>410</b> for storing decoding in-progress results.</p>
<p id="p-0371" num="0370">More specifically, five decoding in-progress results D<b>410</b> are supplied to the cyclic shift circuit <b>411</b> from the memory <b>410</b> for storing decoding in-progress results. Also, a control signal D<b>418</b> indicating information (matrix data) as to the fact that 1s of the check matrix, which corresponds to the decoding in-progress results D<b>410</b>, are arranged as a result of how many times, for example, the unit matrix forming the basis in the check matrix is cyclically shifted, is supplied to the cyclic shift circuit <b>411</b> from the control section <b>417</b>. Based on the control signal D<b>418</b>, the cyclic shift circuit <b>411</b> cyclically shifts (rearranges) the five decoding in-progress results D<b>410</b>, and supplies them as the decoding in-progress results D<b>411</b> to the calculation section <b>412</b>.</p>
<p id="p-0372" num="0371">After the processing of step S<b>54</b>, the process proceeds to step S<b>55</b>, where the calculation section <b>412</b> performs the first computation, and supplies the decoding in-progress results D<b>412</b>, which are the computation results, to the cyclic shift circuit <b>414</b>.</p>
<p id="p-0373" num="0372">More specifically, the five decoding in-progress results D<b>411</b> (v) are supplied to the calculation section <b>412</b> from the cyclic shift circuit <b>411</b> in step S<b>54</b>. Also, the five decoding in-progress results D<b>412</b> (D<b>413</b>) (u<sub>j</sub>) obtained as a result of the first computation by the calculation section <b>412</b> at the previous time, which are already stored in step S<b>56</b> (to be described later), are supplied to the calculation section <b>412</b>. The decoding in-progress results D<b>411</b> and the decoding in-progress results D<b>413</b> are supplied individually to each of the calculators <b>412</b><sub>1 </sub>to <b>412</b><sub>5 </sub>of the calculation section <b>412</b>. Furthermore, a control signal D<b>419</b> is supplied to the calculation section <b>412</b> from the control section <b>417</b>, and the control signal D<b>419</b> is supplied to the calculator <b>412</b><sub>1 </sub>to <b>412</b><sub>5</sub>.</p>
<p id="p-0374" num="0373">Based on the control signal D<b>419</b>, the calculators <b>412</b><sub>1 </sub>to <b>412</b><sub>5 </sub>each perform computations in accordance with equation (7) and equation (8) by using the decoding in-progress results D<b>411</b> and the decoding in-progress results D<b>413</b>, and supply the decoding in-progress results D<b>412</b> (u<sub>j</sub>) obtained as a result of the computation to the memory <b>413</b> for storing decoding in-progress results.</p>
<p id="p-0375" num="0374">After the processing of step S<b>55</b>, the process proceeds to step S<b>56</b>, where the memory <b>413</b> for storing decoding in-progress results stores at the same address the five decoding in-progress results D<b>412</b> supplied from the calculation section <b>412</b> in step S<b>55</b>, and the process then proceeds to step S<b>57</b>.</p>
<p id="p-0376" num="0375">In step S<b>57</b>, the control section <b>417</b> determines whether or not the decoding in-progress results D<b>412</b> corresponding to all the 1s of the check matrix have been computed by the calculation section <b>412</b>. When it is determined that all the 1s of the check matrix have not been computed, the process returns to step S<b>54</b>, and the above-described processing is performed again.</p>
<p id="p-0377" num="0376">On the other hand, when the control section <b>417</b> determines in step S<b>57</b> that the decoding in-progress results D<b>412</b> corresponding to all the 1s have been computed by the calculation section <b>412</b>, the processing is completed.</p>
<p id="p-0378" num="0377">The decoding apparatus <b>400</b> repeatedly performs the decoding process of <figref idref="DRAWINGS">FIG. 25</figref> for the number of decodings, and the message D<b>415</b> obtained as a result of the final second computation is output as the final decoded results.</p>
<p id="p-0379" num="0378">In the above description, although the memory <b>413</b> for storing decoding in-progress results is formed from two single-port RAMs, it may be formed from three or more RAMs if reading and writing do not occur simultaneously from and to one RAM. When the physical bit width of the RAM is not sufficient, by providing the same control signal by using a plurality of RAMs, these can be logically assumed as one RAM.</p>
<p id="p-0380" num="0379">For the portions in which edge data (messages corresponding to edges) lacks, during the storage in the memory (when data is stored in the memories <b>410</b> and <b>413</b> for storing decoding in-progress results), no message is stored, and during the computation (during the first computation at the calculation section <b>412</b> and during the second computation at the calculation section <b>415</b>), no computation is performed.</p>
<p id="p-0381" num="0380"><figref idref="DRAWINGS">FIG. 26</figref> is a block diagram showing an example of the configuration of another embodiment of the decoding apparatus for decoding LDPC CODES represented by the check matrix of <figref idref="DRAWINGS">FIG. 15</figref>, to which the present invention is applied.</p>
<p id="p-0382" num="0381">In a decoding apparatus <b>600</b> of <figref idref="DRAWINGS">FIG. 26</figref>, the edge data storage memory <b>316</b> of <figref idref="DRAWINGS">FIGS. 16A and 16C</figref> is formed as a memory <b>613</b> for storing decoding in-progress results having a capacity smaller than that of the edge data storage memory <b>316</b>.</p>
<p id="p-0383" num="0382">The decoding apparatus <b>600</b> includes a memory <b>610</b> for storing decoding in-progress results, a cyclic shift circuit <b>611</b>, a calculation section <b>612</b> made up of five calculators <b>612</b><sub>1 </sub>to <b>612</b><sub>5</sub>, a memory <b>613</b> for storing decoding in-progress results, a cyclic shift circuit <b>614</b>, a calculation section <b>615</b> made up of five calculators <b>615</b><sub>1 </sub>to <b>615</b><sub>5</sub>, a memory <b>616</b> for reception, and a control section <b>617</b>.</p>
<p id="p-0384" num="0383">Referring to <figref idref="DRAWINGS">FIG. 27</figref> to <figref idref="DRAWINGS">FIG. 30</figref>, a description is given of the relationship among the calculator <b>612</b><sub>1 </sub>to the calculator <b>612</b><sub>5 </sub>of the calculation section <b>612</b> of <figref idref="DRAWINGS">FIG. 26</figref>, the calculator <b>615</b><sub>1 </sub>to calculator <b>615</b><sub>5 </sub>of the calculation section <b>615</b> of <figref idref="DRAWINGS">FIG. 30</figref>, the check node calculator <b>101</b> of <figref idref="DRAWINGS">FIG. 10</figref>, and the variable node calculator <b>103</b> of <figref idref="DRAWINGS">FIG. 11</figref>.</p>
<p id="p-0385" num="0384"><figref idref="DRAWINGS">FIG. 27</figref> and <figref idref="DRAWINGS">FIG. 28</figref> are the same as <figref idref="DRAWINGS">FIG. 10</figref> described above showing the check node calculator <b>101</b> and <figref idref="DRAWINGS">FIG. 11</figref> described above showing the variable node calculator <b>103</b>, respectively. <figref idref="DRAWINGS">FIG. 29</figref> shows an example of the configuration of a calculator <b>612</b><sub>k </sub>(k=1, 2, . . . , 5). <figref idref="DRAWINGS">FIG. 30</figref> shows an example of the configuration of a calculator <b>615</b><sub>k </sub>(k=1, 2, . . . , 5).</p>
<p id="p-0386" num="0385">In the decoding apparatus <b>600</b> of <figref idref="DRAWINGS">FIG. 26</figref>, rather than the calculator <b>612</b><sub>k </sub>performs the check node computation and the calculation section <b>615</b><sub>k </sub>performs the variable node computation, the calculator <b>612</b><sub>k </sub>performs some of the check node computation, and the calculator <b>615</b><sub>k </sub>performs some of the others of the check node computation and some of the variable node computation.</p>
<p id="p-0387" num="0386">More specifically, the calculator <b>612</b><sub>k </sub>of <figref idref="DRAWINGS">FIG. 29</figref> is formed of blocks D′ and E′. The block D′ is configured in the same way as the block D for integrating values such that the computations of φ are performed on the absolute values of the messages v<sub>i </sub>corresponding to all the edges of each column of the check matrix, the block D being a part of the check node calculator <b>101</b> of <figref idref="DRAWINGS">FIG. 27</figref>. The block E′ is configured in the same way as the block E for multiplying the sign bits of the messages v<sub>i </sub>corresponding to all the edges of each column of the check matrix.</p>
<p id="p-0388" num="0387">On the other hand, the calculator <b>615</b><sub>k </sub>of <figref idref="DRAWINGS">FIG. 30</figref> is formed of blocks F′, G′, and H′. The block F′ is configured in the same way as the block F for dividing the multiplied value of the sign bits of the messages v<sub>i </sub>corresponding to all the edges of each column of the check matrix by the sign bit of the message v<sub>i </sub>corresponding to the edge to be determined and for performing the computation of φ<sup>−1 </sup>on the value obtained by subtracting the value such that the computation of φ is performed on the absolute value of the message v<sub>i </sub>corresponding to the each to be determined from the integrated value of the values such that the computation φ is performed on the absolute values of the message v<sub>i </sub>corresponding to all the edges of each column of the check matrix, the block F′ being another part of the check node calculator <b>101</b> of <figref idref="DRAWINGS">FIG. 19</figref>. The block G′ is configured in the same way as the block G for performing the computation of φ on the absolute value of the message v<sub>i</sub>. The block H′ is configured in the same way as the block H for performing the variable node computation of the variable node calculator <b>103</b> of <figref idref="DRAWINGS">FIG. 20</figref>.</p>
<p id="p-0389" num="0388">The calculator <b>612</b><sub>k </sub>of <figref idref="DRAWINGS">FIG. 29</figref> supplies the computation results by the block A and the block B, that is, decoding in-progress results w such that some of the check node computation are performed, to the memory <b>613</b> for storing decoding in-progress results. The calculator <b>615</b><sub>k </sub>of <figref idref="DRAWINGS">FIG. 30</figref> supplies decoding in-progress results v<sub>i</sub>′ such that some of the others of the check node computation and the variable node computation are performed to the memory <b>610</b> for storing decoding in-progress results.</p>
<p id="p-0390" num="0389">Therefore, it is possible for the decoding apparatus <b>600</b> of <figref idref="DRAWINGS">FIG. 26</figref> to perform the check node computation and the variable node computation by alternately performing the computation of the calculator <b>612</b><sub>k </sub>and the computation of the calculator <b>615</b><sub>k </sub>in order to perform decoding.</p>
<p id="p-0391" num="0390">In the calculator <b>615</b><sub>k </sub>of <figref idref="DRAWINGS">FIG. 30</figref>, by using the decoding in-progress results v<sub>i</sub>′ corresponding to the edge to be determined, which are stored in the memory <b>610</b> for storing decoding in-progress results, the block C subtracts the decoding in-progress results v<sub>i</sub>′ corresponding to the edge to be determined, from the absolute value of the decoding in-progress results w obtained as a result of the computation of the calculator <b>612</b><sub>k</sub>, and multiplies the sign bit of the decoding in-progress results w by the sign bit of the decoding in-progress results v<sub>i</sub>′ corresponding to the edge to be determined. Therefore, the memory <b>127</b> and the FIFO memory <b>133</b> of <figref idref="DRAWINGS">FIG. 27</figref> are not required.</p>
<p id="p-0392" num="0391">Next, by using equations, a description is given of the computations performed by the calculator <b>612</b><sub>1 </sub>to the calculator <b>612</b><sub>5 </sub>of the calculation section <b>612</b> and the computations performed by the calculator <b>615</b><sub>1 </sub>to the calculator <b>615</b><sub>5 </sub>of the calculation section <b>615</b>.</p>
<p id="p-0393" num="0392">The calculation section <b>612</b> performs a first computation in accordance with equation (9), and supplies the decoding in-progress results w, which are the results of the first computation, to the memory <b>613</b> for storing decoding in-progress results, whereby they are stored. The calculation section <b>615</b> performs the above-described equation (1) and the second computation in accordance with equations (10) and (11), and supplies decoding in-progress results v<sub>i</sub>′, which are the results of the second computation, to the memory <b>610</b> for storing decoding in-progress results, whereby they are stored.</p>
<p id="p-0394" num="0393">
<maths id="MATH-US-00005" num="00005">
<math overflow="scroll">
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <mi>w</mi>
        <mo>=</mo>
        <mrow>
          <munderover>
            <mo>∑</mo>
            <mrow>
              <mi>i</mi>
              <mo>=</mo>
              <mn>1</mn>
            </mrow>
            <msub>
              <mi>d</mi>
              <mi>c</mi>
            </msub>
          </munderover>
          <mo>⁢</mo>
          <mrow>
            <mrow>
              <mo></mo>
              <msubsup>
                <mi>v</mi>
                <mi>i</mi>
                <mi>′</mi>
              </msubsup>
              <mo></mo>
            </mrow>
            <mo>×</mo>
            <mrow>
              <munderover>
                <mo>∏</mo>
                <mrow>
                  <mi>i</mi>
                  <mo>=</mo>
                  <mn>1</mn>
                </mrow>
                <msub>
                  <mi>d</mi>
                  <mi>c</mi>
                </msub>
              </munderover>
              <mo>⁢</mo>
              <mrow>
                <mi>sign</mi>
                <mo>⁡</mo>
                <mrow>
                  <mo>(</mo>
                  <msubsup>
                    <mi>v</mi>
                    <mi>i</mi>
                    <mi>′</mi>
                  </msubsup>
                  <mo>)</mo>
                </mrow>
              </mrow>
            </mrow>
          </mrow>
        </mrow>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>(</mo>
        <mn>9</mn>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
</maths>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>u</i><sub>j</sub>=φ<sup>−1</sup>(|<i>w|−|v</i><sub>i</sub>′|)×sign(<i>v</i><sub>i</sub>′)×sign(<i>w</i>)  (10)<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>v</i><sub>i</sub>′=φ(|<i>v</i><sub>i</sub>|)×sign(<i>v</i><sub>i</sub>)  (11)<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0395" num="0394">More specifically, the decoding in-progress results w obtained as a result of the first computation in accordance with equation (9) are such that the total sum of the absolute values |vi′| of the decoding in-progress results v<sub>i</sub>′ of the check node computation, corresponding to all the 1s of the j-th row of the check matrix H, which are obtained as a result of the second computation in accordance with equation (1), equation (10), and equation (11), and the sign bit sign (v<sub>i</sub>′) are multiplied together. Therefore, as shown in equation (10), u<sub>j </sub>obtained by the check node computation in accordance with equation (7) can be expressed by using a value such that the absolute value |vi′| of the decoding in-progress results v<sub>i</sub>′, corresponding to the edge to be determined, from among (a plurality of) decoding in-progress results v<sub>i</sub>′ corresponding to “1s” (edges) of each column, of the j-th row of the check matrix H, is subtracted from the absolute values |w| of the decoding in-progress results w, which are obtained as a result of the first computation in accordance with equation (9).</p>
<p id="p-0396" num="0395">In the decoding apparatus <b>600</b>, the first computation in accordance with the equation (9) by the calculation section <b>612</b>, and the second computation in accordance with equation (1), equation (10), and equation (11) are alternately performed, and the calculation section <b>615</b> performs a computation in accordance with equation (5) by using the results of the final first computation, and outputs the computation results as the decoded results, thereby performing iterative decodings of LDPC codes.</p>
<p id="p-0397" num="0396">More specifically, in the decoding apparatus <b>600</b>, the calculation section <b>612</b> performs the first computation by using the decoding in-progress results v<sub>i</sub>′ corresponding to all the 1s of the j-th row of the check matrix H, which are the results of the second computation by the calculation section <b>615</b>, and stores the decoding in-progress results w corresponding to each row of the check matrix, which are obtained as a result of the computation, in the memory <b>613</b> for storing decoding in-progress results. Therefore, the capacity of the memory <b>613</b> for storing decoding in-progress results becomes a value such that the number of rows of the check matrix, which is smaller than the number of “1s” of the check matrix, and the number of quantization bits of the decoding in-progress results w are multiplied together. The calculation section <b>615</b> performs the second computation by using the decoding in-progress results w corresponding to each row of the i-th column of the check matrix H, which are the results of the first computation by the calculation section <b>612</b>, and the received value u<sub>0i</sub>, and stores the decoding in-progress results v<sub>i</sub>′ of the check node computation corresponding to 1s (edges) of the i-th column of the check matrix, which are obtained as a result of the computation, in the memory <b>610</b> for storing decoding in-progress results. Therefore, the capacity necessary for the memory <b>610</b> for storing decoding in-progress results becomes a value such that the number of 1s of the check matrix and the number of quantization bits of the decoding in-progress results v<sub>i</sub>′ are multiplied together similarly to the edge data storage memory <b>311</b> of <figref idref="DRAWINGS">FIGS. 16A and 16B</figref> for storing the results of the variable node computation.</p>
<p id="p-0398" num="0397">Therefore, in the decoding method <b>600</b>, when compared to the edge data storage memory <b>311</b> of <figref idref="DRAWINGS">FIGS. 16A and 16B</figref>, the capacity of the memory of the memory <b>610</b> for storing decoding in-progress results can be reduced. This makes it possible to reduce the circuit scale of the decoding apparatus <b>600</b>.</p>
<p id="p-0399" num="0398">The operation of each section of the decoding apparatus <b>600</b> of <figref idref="DRAWINGS">FIG. 26</figref> is described below in detail.</p>
<p id="p-0400" num="0399">Based on a control signal D<b>618</b>, the memory <b>610</b> for storing decoding in-progress results collectively stores the five decoding in-progress results D<b>615</b> supplied from the calculation section <b>615</b>, and at the same time, reads the five already stored decoding in-progress results D<b>615</b>, and supplies them as decoding in-progress results D<b>610</b> to the cyclic shift circuit <b>611</b> and the calculation section <b>615</b>. That is, the memory <b>610</b> for storing decoding in-progress results simultaneously performs the reading of the decoding in-progress results D<b>610</b> to be supplied to the cyclic shift circuit <b>611</b> and the writing of the decoding in-progress results D<b>615</b> supplied from the calculation section <b>615</b>.</p>
<p id="p-0401" num="0400">In the memory <b>610</b> for storing decoding in-progress results, the decoding in-progress results v<sub>i</sub>′ (the second decoding in-progress results) corresponding to 1s (edges) of the check matrix, which are computed by the second computation by the calculation section <b>615</b>, are stored. Therefore, the amount of data stored in the memory <b>610</b> for storing decoding in-progress results, that is, the storage capacity required for the memory <b>610</b> for storing decoding in-progress results, becomes the multiplied value of the number of quantization bits of the decoding in-progress results and the number of 1s (the total number of the edges).</p>
<p id="p-0402" num="0401">The memory <b>610</b> for storing decoding in-progress results includes, for example, two single-port RAMs capable of simultaneously reading and writing five decoding in-progress results. Five decoding in-progress results D<b>615</b> are supplied to the memory <b>610</b> for storing decoding in-progress results from the calculation section <b>615</b>, and also, a control signal D<b>618</b> for controlling the reading and writing of the decoding in-progress results D<b>615</b> is supplied to the memory <b>610</b> from the control section <b>617</b>.</p>
<p id="p-0403" num="0402">Five decoding in-progress results D<b>610</b> are supplied to the cyclic shift circuit <b>611</b> from the memory <b>610</b> for storing decoding in-progress results. Also, a control signal D<b>619</b> indicating information (matrix data) as to the fact that 1s of the check matrix, which corresponds to the decoding in-progress results D<b>610</b>, are arranged as a result of how many times, for example, the unit matrix forming the basis in the check matrix is cyclically shifted, is supplied to the cyclic shift circuit <b>611</b> from the control section <b>617</b>. Based on the control signal D<b>619</b>, the cyclic shift circuit <b>611</b> performs a cyclic shifting of rearranging the five decoded results D<b>610</b>, and supplies the results as decoding in-progress results D<b>611</b> to the calculation section <b>612</b>.</p>
<p id="p-0404" num="0403">The calculation section <b>612</b> includes five calculators <b>612</b><sub>1 </sub>to <b>612</b><sub>5</sub>. The five decoding in-progress results D<b>611</b> (second decoding in-progress results) (v<sub>i</sub>′) are supplied to the calculation section <b>612</b> from the cyclic shift circuit <b>611</b>, and the five decoding in-progress results D<b>611</b> (the first decoding in-progress results) (w) are supplied to the calculators <b>612</b><sub>1 </sub>to <b>612</b><sub>5</sub>, respectively. A control signal D<b>620</b> is supplied to the calculation section <b>612</b> from the control section <b>617</b>, and the control signal D<b>620</b> is supplied to the calculators <b>612</b><sub>1 </sub>to <b>612</b><sub>5</sub>. The control signal D<b>620</b> is a signal common to the five calculators <b>612</b><sub>1 </sub>to <b>612</b><sub>5</sub>.</p>
<p id="p-0405" num="0404">The calculators <b>612</b><sub>1 </sub>to <b>612</b><sub>5 </sub>each perform the first computation by using the decoding in-progress results D<b>611</b> in accordance with equation (9) in order to determine decoding in-progress results D<b>612</b> (w). The calculation section <b>612</b> supplies the five decoding in-progress results D<b>612</b>, which are obtained as a result of the computations by the calculators <b>612</b><sub>1 </sub>to <b>612</b><sub>5</sub>, to the memory <b>613</b> for storing decoding in-progress results.</p>
<p id="p-0406" num="0405">The five decoding in-progress results D<b>612</b> corresponding to the row of the check matrix, which are the results of the first computation by the calculation section <b>612</b>, are supplied to the memory <b>613</b> for storing decoding in-progress results from the calculation section <b>612</b>. The memory <b>613</b> for storing decoding in-progress results stores the five decoding in-progress results D<b>612</b> supplied from the calculation section <b>612</b> in sequence starting from the first address.</p>
<p id="p-0407" num="0406">More specifically, at the first address of the memory <b>613</b> for storing decoding in-progress results, the decoding in-progress results w from the first row up to the fifth row from among the decoding in-progress results corresponding to the row of the check matrix are stored. Similarly, at the second address, the decoding in-progress results w from the sixth row up to the 10th row are stored, and at the third address, the decoding in-progress results w from the 11th row up to the 15th row are stored. Hereafter, similarly, the decoding in-progress results w from the 16th row up to the 30th row are stored at the fourth address up to the sixth address in units of five results, and a total of 60 decoding in-progress results w are stored in the memory <b>613</b> for storing decoding in-progress results. Therefore, the number of words of the memory <b>610</b> for storing decoding in-progress results becomes 6 such that 30, the number of rows of the check matrix H of <figref idref="DRAWINGS">FIG. 15</figref> is divided by 5, the number of the decoding in-progress results, which are simultaneously read and written.</p>
<p id="p-0408" num="0407">The memory <b>613</b> for storing decoding in-progress results simultaneously reads five decoding in-progress results w, which are “1s” in the column of the check matrix H, to which the decoding in-progress results v<sub>i</sub>′ to be determined by the calculation section <b>615</b> correspond, from the five already stored decoding in-progress results D<b>613</b>, and supplies them as decoding in-progress results D<b>613</b> to the cyclic shift circuit <b>614</b>.</p>
<p id="p-0409" num="0408">The memory <b>613</b> for storing decoding in-progress results includes, for example, a single-port RAM capable of simultaneously reading and writing five decoding in-progress results. Since the decoding in-progress results w corresponding to the row, which are computed by the first computation of the calculation section <b>612</b>, are stored in the memory <b>613</b> for storing decoding in-progress results, the amount of data stored in the memory <b>613</b> for storing decoding in-progress results, that is, the storage capacity required for the memory <b>613</b> for storing decoding in-progress results, becomes the multiplied value of the number of quantization bits of the decoding in-progress results and the number of rows of the check matrix H.</p>
<p id="p-0410" num="0409">The five decoding in-progress results D<b>613</b> (the decoding in-progress results w) are supplied to the cyclic shift circuit <b>614</b> from the memory <b>613</b> for storing decoding in-progress results. Also, a control signal D<b>621</b> indicating information (matrix data) as to the fact that 1s of the check matrix, which corresponds to the decoding in-progress results D<b>613</b>, are arranged as a result of how many times, for example, the unit matrix forming the basis in the check matrix is cyclically shifted, is supplied to the cyclic shift circuit <b>614</b> from the control section <b>617</b>. Based on the control signal D<b>621</b>, the cyclic shift circuit <b>614</b> performs a cyclic shifting of rearranging the five decoding in-progress results D<b>613</b>, and supplies the results as the decoding in-progress results D<b>614</b> to the calculation section <b>615</b>.</p>
<p id="p-0411" num="0410">The calculation section <b>615</b> includes five calculators <b>615</b><sub>1 </sub>to <b>615</b><sub>5</sub>. Five decoding in-progress results D<b>614</b> (w) are supplied to the variable node calculation section <b>615</b> from the cyclic shift circuit <b>614</b>, and also, five decoding in-progress results D<b>610</b> (v<sub>i</sub>′) are supplied to the variable node calculation section <b>615</b> from the memory <b>610</b> for storing decoding in-progress results. The decoding in-progress results D<b>614</b> and the decoding in-progress results D<b>610</b> are supplied to each of the calculators <b>615</b><sub>1 </sub>to <b>615</b><sub>5</sub>. Five pieces of received data D<b>617</b> are supplied to the calculation section <b>615</b> from the memory <b>617</b> for reception, and the pieces of received data D<b>617</b> are supplied individually to each of the calculators <b>615</b><sub>1 </sub>to <b>615</b><sub>5</sub>. Furthermore, a control signal D<b>622</b> is supplied to the calculation section <b>617</b> from the control section <b>617</b>, and the control signal D<b>622</b> is supplied to the calculators <b>615</b><sub>1 </sub>to <b>615</b><sub>5</sub>. The control signal D<b>622</b> is a signal common to the five calculator <b>617</b><sub>1 </sub>to <b>617</b><sub>5</sub>.</p>
<p id="p-0412" num="0411">The calculators <b>615</b><sub>1 </sub>to <b>615</b><sub>5 </sub>each perform the second computation in accordance with equation (1), equation (10), and equation (11) by using the decoding in-progress results D<b>614</b> and D<b>611</b>, and the received data D<b>617</b> (LDPC CODES) in order to determine five decoding in-progress results D<b>615</b> (v<sub>i</sub>′) corresponding to 1s of each column of the check matrix. The calculation section <b>615</b> supplies the five decoding in-progress results D<b>615</b>, which are obtained as a result of the second computation by the calculators <b>615</b><sub>1 </sub>to <b>615</b><sub>5</sub>, to the memory <b>610</b> for storing decoding in-progress results.</p>
<p id="p-0413" num="0412">The memory <b>616</b> for reception stores, as the received data D<b>617</b>, the reception LLR (log likelihood ratio) that is the 0-likeness value of the sign bit, which is calculated from the received value (sign bit) received through the communication channel.</p>
<p id="p-0414" num="0413">More specifically, at the first address of the memory <b>616</b> for reception, the received data D<b>617</b> corresponding to the first column up to the fifth column of the check matrix from among the received data D<b>617</b> corresponding to the column of the check matrix is stored. At the second address, the received data D<b>617</b> from the sixth column up to the 10th column of the check matrix is stored, and at the third address, the received data D<b>617</b> from the 11th column up to the 16th of the check matrix is stored. Hereafter, similarly, at the fourth address up to the 18th address, the received data D<b>617</b> corresponding to the 17th column up to the 90th column is stored in units of five pieces of the data.</p>
<p id="p-0415" num="0414">Then, the memory <b>616</b> for reception simultaneously reads the already stored received data D<b>617</b>, in the sequence necessary for the second computation by the calculation section <b>615</b> in units of five pieces of the data, and supplies them to the calculation section <b>615</b>.</p>
<p id="p-0416" num="0415">The memory <b>616</b> for reception includes, for example, a single-port RAM. The amount of data stored in the memory <b>616</b> for reception, that is, the storage capacity necessary for the memory <b>616</b> for reception, is the multiplied value of the code length of the LDPC codes and the number of quantization bits of the received data. Furthermore, the number of words of the memory <b>616</b> for reception is 18 such that the code length of the LDPC codes, that is, 90, the number of columns of the check matrix, is divided by 5, the number of pieces of the received data D<b>617</b>, which are simultaneously read.</p>
<p id="p-0417" num="0416">The control section <b>617</b> supplies the control signal D<b>618</b> to the memory <b>610</b> for storing decoding in-progress results and supplies the control signal D<b>619</b> to the cyclic shift circuit <b>611</b> in order to control them, respectively. Furthermore, the control section <b>617</b> supplies the control signal D<b>620</b> to the calculation section <b>612</b> and supplies the control signal D<b>621</b> to the cyclic shift circuit <b>614</b> in order to control them, respectively.</p>
<p id="p-0418" num="0417">As a result of the data being circulated in the order of the memory <b>610</b> for storing decoding in-progress results, the cyclic shift circuit <b>611</b>, the calculation section <b>612</b>, the memory <b>613</b> for storing decoding in-progress results, the cyclic shift circuit <b>614</b>, and the calculation section <b>615</b>, the decoding apparatus <b>600</b> can perform one decoding. In the decoding apparatus <b>600</b>, after decodings are performed repeatedly a predetermined number of times, the calculation section <b>615</b> performs a computation in accordance with equation (5), and the computation results are output as the final decoded results.</p>
<p id="p-0419" num="0418"><figref idref="DRAWINGS">FIG. 29</figref> is a block diagram showing an example of the configuration of a calculator <b>612</b><sub>1 </sub>of the calculation section <b>612</b> of <figref idref="DRAWINGS">FIG. 26</figref>.</p>
<p id="p-0420" num="0419">In <figref idref="DRAWINGS">FIG. 29</figref>, the calculator <b>612</b><sub>1 </sub>is described, and the calculator <b>612</b><sub>2 </sub>to the calculator <b>612</b><sub>5 </sub>are also configured in the same way.</p>
<p id="p-0421" num="0420">Furthermore, in <figref idref="DRAWINGS">FIG. 29</figref>, the calculator <b>612</b><sub>1 </sub>is shown by assuming that each decoding in-progress result (v<sub>i</sub>′) obtained as a result of the second computation by the calculator <b>615</b> is quantized into six bits. A clock ck is supplied to the calculator <b>612</b><sub>1 </sub>of <figref idref="DRAWINGS">FIG. 29</figref>, and the clock ck is supplied to necessary blocks. Each block performs processing in synchronization with the clock ck.</p>
<p id="p-0422" num="0421">Based on the control signal D<b>620</b> supplied from the control section <b>617</b>, the calculator <b>612</b><sub>1 </sub>of <figref idref="DRAWINGS">FIG. 29</figref> performs a first computation in accordance with equation (9) by using the decoding in-progress results D<b>611</b> (v<sub>i</sub>′), which are read one-by-one from the cyclic shift circuit <b>611</b>.</p>
<p id="p-0423" num="0422">More specifically, one decoding in-progress result D<b>611</b> from among the five 6-bit decoding in-progress results D<b>611</b> (v<sub>i</sub>′) supplied from the cyclic shift circuit <b>611</b> is supplied to the calculator <b>612</b><sub>1</sub>, the sign bit D<b>631</b>, which is the highest-order bit, is supplied to the EXOR circuit <b>635</b>, and the absolute value D<b>632</b> (|vi′|), which is the five lower-order bits of the 6-bit decoding in-progress results D<b>611</b> (v<sub>i</sub>′), are supplied to the adder <b>631</b>. Furthermore, the control signal D<b>620</b> is supplied to the calculator <b>612</b><sub>1 </sub>from the control section <b>617</b>, and the control signal D<b>620</b> is supplied to the selector <b>633</b> and the selector <b>637</b>.</p>
<p id="p-0424" num="0423">The adder <b>631</b> integrates the absolute values D<b>632</b> (|v<sub>i</sub>′|) by adding together the absolute value D<b>632</b> (|v<sub>i</sub>|) and the 9-bit value D<b>633</b> stored in the register <b>632</b>, and stores the 9-bit integrated value obtained as a result in the register <b>632</b> again. When the absolute values D<b>632</b> (|v<sub>i</sub>|) determined from the decoding in-progress results D<b>611</b> corresponding to all the 1s over one row of the check matrix are integrated, the register <b>632</b> is reset.</p>
<p id="p-0425" num="0424">When the decoding in-progress results D<b>611</b> over one row of the check matrix are read one-by-one and the integrated value such that the absolute values D<b>632</b> for one row are integrated is stored in the register <b>632</b>, the control signal D<b>620</b> supplied from the control section <b>617</b> changes from 0 to 1. For example, when the row weight is “9”, the control signal D<b>620</b> is “0” at the first to eighth clocks, and is “1” at the ninth clock.</p>
<p id="p-0426" num="0425">When the control signal D<b>620</b> is “1”, the register <b>632</b> selects the value stored in the selector <b>633</b>, that is, a 9-bit value D<b>633</b> (Σ|vi′| from i=1 to i=d<sub>c</sub>) such that the absolute values D<b>632</b> (|v<sub>i</sub>′|)) of the decoding in-progress results D<b>611</b> (the decoding in-progress results v<sub>i</sub>′) corresponding to all the 1s over one row of the check matrix are integrated, and outputs the value as a value D<b>634</b> to the register <b>634</b>, whereby it is stored. The register <b>634</b> supplies the stored value D<b>634</b> as a 9-bit value D<b>635</b> to the selector <b>633</b>, and also, outputs it. When the control signal D<b>620</b> is “0”, the selector <b>633</b> selects the value D<b>635</b> supplied from the register <b>634</b>, and outputs the value to the register <b>634</b>, whereby it is stored again. That is, until the absolute values D<b>632</b> (|v<sub>i</sub>′|) of the decoding in-progress results D<b>611</b> (the decoding in-progress results v<sub>i</sub>′) corresponding to all the 1s over one row of the check matrix are integrated, the register <b>634</b> supplies the previously integrated |v<sub>i</sub>′| to the selector <b>633</b>, and also, outputs it.</p>
<p id="p-0427" num="0426">In parallel with the above processing, the EXOR circuit <b>635</b> performs a multiplication of the sign bits by computing the exclusive OR of a 1-bit value D<b>637</b> stored in the register <b>636</b> and the sign bit D<b>631</b>, and stores the 1-bit multiplication result D<b>636</b> in the register <b>636</b> again. When the sign bits D<b>631</b> of the decoding in-progress results D<b>611</b> corresponding to all the 1s over one row of the check matrix are multiplied, the register <b>636</b> is reset.</p>
<p id="p-0428" num="0427">When the multiplication results D<b>636</b> (Πsign (v<sub>i</sub>′) from i=1 to d<sub>c</sub>) such that the sign bits D<b>631</b> determined from the decoding in-progress results D<b>611</b> corresponding to all the 1s over one row of the check matrix are multiplied are stored in the register <b>636</b>, the control signal D<b>620</b> supplied from the control section <b>617</b> changes from “0” to “1”.</p>
<p id="p-0429" num="0428">When the control signal D<b>620</b> is “1”, the selector <b>637</b> selects the value stored in the register <b>636</b>, that is, the value D<b>637</b> (Πsign (v<sub>i</sub>′) from i=1 to i=d<sub>c</sub>) such that the sign bits D<b>631</b> of the decoding in-progress results D<b>611</b> corresponding to all the 1s over one row of the check matrix are multiplied, and outputs the value as a 1-bit value D<b>638</b> to the register <b>638</b>, whereby it is stored. The register <b>638</b> supplies the stored value D<b>638</b> as a 1-bit value D<b>639</b> to the selector <b>637</b>, and outputs it. When the control signal D<b>620</b> is “0”, the selector <b>637</b> selects the value D<b>639</b> supplied from the register <b>638</b>, and outputs the value to the register <b>638</b>, whereby it is stored again. That is, until the sign bits D<b>631</b> of the decoding in-progress results D<b>611</b> (the decoding in-progress results v<sub>i</sub>′) corresponding to all the 1s over one row of the check matrix are multiplied, the register <b>638</b> supplies the previously stored value to the selector <b>637</b> and outputs it.</p>
<p id="p-0430" num="0429">In the calculator <b>612</b><sub>1</sub>, a total of 10 bits, in which the 9-bit value D<b>635</b> (Σ|v<sub>i</sub>′| from i=1 to i=d<sub>c</sub>) output from the register <b>634</b> is made to be the nine lower-order bits and the 1-bit value D<b>639</b> (sign (v<sub>i</sub>′) output from the register <b>638</b> is made to be the highest-order bit, are output as the decoding in-progress results D<b>612</b> (the decoding in-progress results w).</p>
<p id="p-0431" num="0430">As described above, in the calculator <b>612</b><sub>1</sub>, the computation of equation (9) is performed, and the decoding in-progress result w is determined.</p>
<p id="p-0432" num="0431"><figref idref="DRAWINGS">FIG. 30</figref> is a block diagram showing an example of the configuration of the calculator <b>615</b><sub>1 </sub>of the calculation section <b>615</b> of <figref idref="DRAWINGS">FIG. 26</figref>.</p>
<p id="p-0433" num="0432">In <figref idref="DRAWINGS">FIG. 30</figref>, the calculator <b>615</b><sub>1 </sub>is described, and the calculator <b>615</b><sub>2 </sub>to the calculator <b>615</b><sub>5 </sub>are also configured in the same way.</p>
<p id="p-0434" num="0433">Furthermore, in <figref idref="DRAWINGS">FIG. 30</figref>, the calculator <b>615</b><sub>1 </sub>is shown by assuming that each decoding in-progress result (w) obtained as a result of the first computation by the calculator <b>612</b>, together with the sign bit, is quantized to a total of 10 bits and each decoding in-progress result (u<sub>j</sub>) obtained previously as a result of the second computation, which is supplied from the memory <b>610</b> for storing decoding in-progress results, together with the sign bit, is quantized to a total of six bits. Furthermore, a clock ck is supplied to the calculator <b>615</b><sub>1 </sub>of <figref idref="DRAWINGS">FIG. 30</figref>, and the clock ck is supplied to necessary blocks. Each block performs processing in synchronization with the clock ck.</p>
<p id="p-0435" num="0434">Based on the control signal D<b>622</b> supplied from the control section <b>617</b>, the calculator <b>615</b><sub>1 </sub>of <figref idref="DRAWINGS">FIG. 30</figref> performs a second computation in accordance with equation (1), equation (10), and equation (11) by using the pieces of received data D<b>617</b> (the received values u<sub>0i</sub>), which are read one-by-one from the memory <b>616</b> for reception, the decoding in-progress results D<b>614</b> (w), which are read one-by-one from the cyclic shift circuit <b>614</b>, and the decoding in-progress results D<b>610</b> (v<sub>i</sub>′) obtained previously as a result of the second computation by the calculation section <b>615</b>, which are read one-by-one from the memory <b>610</b> for storing decoding in-progress results.</p>
<p id="p-0436" num="0435">More specifically, in the calculator <b>615</b><sub>1</sub>, the 10-bit decoding in-progress results D<b>614</b> (the decoding in-progress results w) corresponding to the row of the check matrix are read one-by-one from the cyclic shift circuit <b>614</b>. The 6-bit decoding in-progress results D<b>610</b> (the decoding in-progress results v<sub>i</sub>′) obtained previously as a result of the second computation by the calculation section <b>615</b> are read one-by-one from the memory <b>610</b> for storing decoding in-progress results. The sign bit D<b>651</b> (sign (w)) of the highest-order bit of the decoding in-progress results D<b>614</b> and the sign bit D<b>653</b> (sign (u<sub>j</sub>)) of the highest-order bit of the decoding in-progress results D<b>610</b> are supplied to the EXOR circuit <b>653</b>. An absolute value D<b>652</b> (|w|)) of the nine lower-order bits of the decoding in-progress results D<b>614</b> and the sign bit D<b>653</b> (|vi′|) of the nine lower-order bits of the decoding in-progress results D<b>610</b> are supplied to a subtractor <b>651</b>. Furthermore, in the calculator <b>6151</b>, the pieces of the 6-bit received data D<b>617</b> are read one-by-one from the memory <b>616</b> for reception, and are supplied to an adder <b>658</b>. Furthermore, in the calculator <b>6151</b>, the control signal D<b>622</b> is supplied from the control section <b>617</b>, and the control signal D<b>622</b> is supplied to the selector <b>656</b>.</p>
<p id="p-0437" num="0436">The subtractor <b>651</b> subtracts the absolute value D<b>654</b> from the absolute value D<b>652</b>, and supplies a 5-bit subtracted value D<b>655</b> to an LUT <b>652</b>. The LUT <b>652</b> outputs the 5-bit computation result D<b>656</b> (φ<sup>−1</sup>(|w|−|vi′|)) such that the computation of φ<sup>−1 </sup>is performed on the subtracted value D<b>655</b>.</p>
<p id="p-0438" num="0437">On the other hand, the EXOR circuit <b>653</b> multiplies together the sign bit D<b>651</b> and the sign bit D<b>653</b> by computing the exclusive OR of the sign bit D<b>651</b> (sign (w)) and the sign bit D<b>653</b> (sign (v<sub>i</sub>′)), and outputs a 1-bit multiplication result as a multiplied value D<b>657</b>. Then, a 6-bit value D<b>658</b>, in which the 5-bit computation results D<b>656</b> supplied from the LUT <b>652</b> are made to be the five lower-order bits (φ<sup>−1</sup>(|w|−|vi′|)) and the 1-bit value D<b>657</b> (sign (w)×sign (v<sub>i</sub>′)) supplied from the EXOR circuit <b>653</b> is made to be the highest-order bit, is supplied to an adder <b>654</b>, and is also supplied to an FIFO memory <b>659</b>.</p>
<p id="p-0439" num="0438">In the manner described above, the computation in accordance with equation (10) is performed, and the 6-bit value D<b>658</b> (u<sub>j</sub>), which is the result of the computation, is supplied to the adder <b>654</b> and is also supplied to the FIFO memory <b>659</b>.</p>
<p id="p-0440" num="0439">The adder <b>654</b> integrates the values D<b>658</b> by adding together the 6-bit value D<b>658</b> (u<sub>j</sub>) and the 9-bit value D<b>659</b> stored in the register <b>655</b>, and stores the 9-bit integrated value obtained as a result in the register <b>655</b> again. When the value D<b>658</b> corresponding to all the 1s over one column of the check matrix are integrated, the register <b>655</b> is reset.</p>
<p id="p-0441" num="0440">When the values D<b>658</b> over one column of the check matrix are read one-by-one and the value such that the values D<b>658</b> for one column are integrated is stored in the register <b>655</b>, the control signal D<b>622</b> supplied from the control section <b>617</b> changes from “0” to “1”. For example, when the column weight is “5”, the control signal D<b>622</b> is “0” at the first to fourth clocks, and is “1” at the fifth clock.</p>
<p id="p-0442" num="0441">When the control signal D<b>622</b> is “1”, the selector <b>656</b> selects the value stored in the register <b>655</b>, that is, a 9-bit value D<b>659</b> (Σu<sub>j </sub>from j=1 to d<sub>v</sub>) such that the value D<b>658</b> (u<sub>j</sub>) corresponding to 1s over one column of the check matrix are integrated, and outputs the value to the register <b>657</b>, whereby it is stored. The register <b>657</b> supplies the stored value D<b>659</b> as a 9-bit value D<b>660</b> to a selector <b>471</b> and an adder <b>658</b>. When the control signal D<b>622</b> is “0”, the selector <b>656</b> selects the value D<b>660</b> supplied from the register <b>657</b>, and outputs the value to the register <b>657</b>, whereby it is stored again. That is, until the values D<b>658</b> (u<sub>j</sub>) corresponding to 1s over one column of the check matrix are integrated, the register <b>657</b> supplies the previously integrated value to the selector <b>656</b> and the adder <b>658</b>.</p>
<p id="p-0443" num="0442">The adder <b>658</b> adds together the 9-bit value D<b>660</b> and the 6-bit received data D<b>617</b> supplied from the memory <b>616</b> for reception, and supplies the 9-bit value D<b>661</b> obtained as a result.</p>
<p id="p-0444" num="0443">In the calculator <b>615</b>, when the final computation is to be performed, the adder <b>658</b> outputs the 9-bit value D<b>661</b> as the final decoded results. That is, the calculation section <b>615</b> performs a computation in accordance with equation (5).</p>
<p id="p-0445" num="0444">On the other hand, until a new value D<b>660</b> (Σu<sub>j </sub>from j=1 to j=d<sub>v</sub>) is output from the register <b>665</b>, the FIFO memory <b>659</b> delays the 6-bit value D<b>658</b> (u<sub>j</sub>), and supplies the value as a 6-bit value D<b>662</b> to the subtractor <b>660</b>. The subtractor <b>660</b> subtracts the 6-bit value D<b>662</b> from the 9-bit value D<b>660</b>, and outputs the subtracted value D<b>663</b>. That is, the subtractor <b>660</b> subtracts the value corresponding to the edge to be determined, that is, the value D<b>658</b> (u<sub>j</sub>) corresponding to predetermined 1s of the check matrix, from the integrated value of the values D<b>658</b> corresponding to 1s over one column of the check matrix, and outputs the subtracted value (Σu<sub>j </sub>from i=1 to i=d<sub>c</sub>−1) as a 6-bit subtracted value D<b>663</b>.</p>
<p id="p-0446" num="0445">In the manner described above, the computation in accordance with equation (1) is performed, and the 6-bit subtracted value D<b>663</b> (v<sub>i</sub>), which is the result of the computation, is output. Then, the absolute value (|v<sub>i</sub>|) of the five lower-order bits of the 6-bit subtracted value D<b>663</b> output from the subtractor <b>660</b> is supplied to the LUT <b>661</b>, and the sign bit (sign (v<sub>i</sub>)) of the highest-order bit is output as a value D<b>665</b>.</p>
<p id="p-0447" num="0446">The LUT <b>661</b> outputs the 5-bit computation results D<b>666</b> (φ(|v<sub>i</sub>|)) such that the computation of φ is performed on the absolute value (|v<sub>i</sub>|). Then, the LUT <b>661</b> supplies, as decoding in-progress results (v<sub>i</sub>′), a total of six bits, in which the 5-bit computation result D<b>666</b> (φ(|v<sub>i</sub>|)) output from the LUT <b>661</b> is made to be the five lower-order bits and the value D<b>665</b> (sign (v<sub>i</sub>)) is made to be the highest-order bit, to the memory <b>610</b> for storing decoding in-progress results.</p>
<p id="p-0448" num="0447">As described above, in the calculator <b>615</b><sub>1</sub>, the computations of equation (1), equation (10), and equation (11) are performed, and the decoding in-progress results v<sub>i</sub>′ are determined.</p>
<p id="p-0449" num="0448">The maximum of the column weight of the check matrix of <figref idref="DRAWINGS">FIG. 15</figref> is 5, that is, the maximum number of the decoding in-progress results D<b>614</b> (w) and the decoding in-progress results D<b>610</b> (v<sub>i</sub>′) supplied to the calculator <b>615</b><sub>1 </sub>is 5. Therefore, the calculator <b>615</b><sub>1 </sub>has an FIFO memory <b>659</b> for delaying the five decoding in-progress results D<b>614</b> and the five computation results D<b>658</b> (u<sub>j</sub>) determined from the decoding in-progress results D<b>610</b>. When a message whose column weight is less than 5 is to be calculated, the amount of delay in the FIFO memory <b>659</b> is reduced to the value of the column weight.</p>
<p id="p-0450" num="0449"><figref idref="DRAWINGS">FIG. 31</figref> is a block diagram showing an example of the configuration of the memory <b>610</b> for storing decoding in-progress results of <figref idref="DRAWINGS">FIG. 26</figref>.</p>
<p id="p-0451" num="0450">The memory <b>610</b> for storing decoding in-progress results includes switches <b>701</b> and <b>704</b>, and RAMs <b>702</b> and <b>703</b> for storing decoding in-progress results, which are two single-port RAMs.</p>
<p id="p-0452" num="0451">Before each section of the memory <b>610</b> for storing decoding in-progress results is described in detail, the method for storing data in the RAMs <b>702</b> and <b>703</b> for storing decoding in-progress results will be described first.</p>
<p id="p-0453" num="0452">The RAMs <b>702</b> and <b>703</b> for storing decoding in-progress results store the decoding in-progress results D<b>615</b> that are obtained as a result of the first computation by the calculation section <b>612</b> and that are supplied via the switch <b>701</b>.</p>
<p id="p-0454" num="0453">More specifically, at the first address up to the fifth address of the RAM <b>702</b> for storing decoding in-progress results, the decoding in-progress results D<b>615</b> (D<b>701</b>) corresponding to 1s from the 1st column up to the fifth column of the check matrix H of <figref idref="DRAWINGS">FIG. 15</figref> are stored in such a manner that they are packed closer in the horizontal direction (in the column direction) for each row (in a manner in which 0s are ignored).</p>
<p id="p-0455" num="0454">More specifically, when the j-th row and the i-th column is denoted as (j, i), at the first address of the RAM <b>702</b> for storing decoding in-progress results, data corresponding to 1s of the 5×5 unit matrix from (1, 1) to (5, 5) of the check matrix of <figref idref="DRAWINGS">FIG. 15</figref> is stored. At the second address, data corresponding to the positions of 1s of a first shift matrix forming a sum matrix from (6, 1) to (10, 5) of the check matrix of <figref idref="DRAWINGS">FIG. 15</figref> (a sum matrix, which is the sum of the first shift matrix in which the 5×5 unit matrix is cyclically shifted by one to the right, and a second shift matrix in which the 5×5 unit matrix is cyclically shifted by two to the right) is stored. Furthermore, at the third address, data corresponding to positions of 1s of the second shift matrix forming the sum matrix from (6, 1) to (10, 5) of the check matrix is stored. Hereafter, also, at the fourth address and the fifth address, data is stored in such a manner as to correspond to the check matrix of <figref idref="DRAWINGS">FIG. 15</figref>.</p>
<p id="p-0456" num="0455">At the sixth address up to the 10th address of the RAM <b>702</b> for storing decoding in-progress, data corresponding to 1s from the 11th column up to the 15th column of the check matrix of <figref idref="DRAWINGS">FIG. 15</figref> is stored. That is, at the sixth address, data corresponding to the positions of 1s of the first shift matrix forming the sum matrix from (11, 11) to (15, 15) of the check matrix (the sum matrix, which is the sum of the 5×5 unit matrix and the first shift matrix in which the 5×5 unit matrix is cyclically shifted by three to the right) is stored, and at the seventh address, data corresponding to 1s of the unit matrix forming the sum matrix (11, 11) to (15, 15) of the check matrix is stored. Hereafter, also, at the eighth address up to the 10th address, data is stored in such a manner as to correspond to the check matrix.</p>
<p id="p-0457" num="0456">Similarly, at the 10th address up to the 28th address of the RAM <b>702</b> for storing decoding in-progress, in such a manner as to correspond to the check matrix of <figref idref="DRAWINGS">FIG. 15</figref>, data corresponding to 1s from the 21th column up to the 25th column, from the 31th column up to the 35th column, from the 41th column up to the 45th column, from the 51th column up to the 55th column, from the 61th column up to the 65th column, from the 71th column up to the 75th column, from the 81th column up to the 85th column, is stored. That is, the number of words of the RAM <b>702</b> for storing decoding in-progress results is 28.</p>
<p id="p-0458" num="0457">At the first address to the fifth address of the RAM <b>703</b> for storing decoding in-progress results, the decoding in-progress results D<b>615</b> (D<b>702</b>) corresponding to 1s from the sixth column up to the 10th column of the check matrix H of <figref idref="DRAWINGS">FIG. 15</figref> are stored in such a manner that they are packed closer in the horizontal direction (in the column direction) for each row (in a manner in which 0s are ignored).</p>
<p id="p-0459" num="0458">More specifically, at the first address of the RAM <b>703</b> for storing decoding in-progress results, data corresponding to 1s of the first shift matrix forming the sum matrix from (6, 1) to (10, 5) (the sum matrix, which is the sum of the first shift matrix in which the 5×5 unit matrix is cyclically shifted by one to the right, and the second shift matrix in which the unit matrix is cyclically shifted by two to the right), which is the sub-matrix of the check matrix, is stored. At the second address, data corresponding to 1s of the second shift matrix forming the sum matrix from (6, 1) to (10, 5), which is the sub-matrix of the check matrix, is stored. Hereafter, similarly, at the third address to the fifth address, also, data is stored in such a manner as to correspond to the sub-matrix of the check matrix.</p>
<p id="p-0460" num="0459">Similarly, at the sixth address up to the second <b>6</b> address of the RAM <b>703</b> for storing decoding in-progress, data corresponding to 1s from the 16th column up to the 20th column of the check matrix of <figref idref="DRAWINGS">FIG. 15</figref>, from the 26th column up to the 30th column, from the 36th column up to the 40th column, from the 46th column up to the 50th column, from the 56th column up to the 60th column, from the 66th column up to the 70th column, from the 76th column up to the 80th column, and from the 86th columns up to the 90th column, is stored. That is, the number of words of the RAM <b>703</b> for storing decoding in-progress results is 26.</p>
<p id="p-0461" num="0460">As described above, the number of words of the RAM <b>702</b> for storing decoding in-progress results is 28, and the number of words RAM <b>703</b> for storing decoding in-progress results is 26.</p>
<p id="p-0462" num="0461"><figref idref="DRAWINGS">FIG. 32</figref> is a timing chart illustrating the operation of the reading and writing of the RAM <b>702</b> for storing decoding in-progress results and the RAM <b>703</b> for storing decoding in-progress results of the memory <b>610</b> for storing decoding in-progress results.</p>
<p id="p-0463" num="0462">In <figref idref="DRAWINGS">FIG. 32</figref>, the horizontal axis indicates time (t).</p>
<p id="p-0464" num="0463">In the memory <b>610</b> for storing decoding in-progress results, when the first computation by the calculation section <b>612</b> is to be performed, based on a control signal D<b>720</b><sub>2 </sub>supplied from the control section <b>617</b>, the already stored decoding in-progress results D<b>703</b> obtained as a result of the second computation are read from the RAM <b>702</b> for storing decoding in-progress results, or based on the control signal D<b>720</b><sub>3 </sub>supplied from the control section <b>617</b>, the already stored decoding in-progress results D<b>704</b> obtained as a result of the second computation are read from the RAM <b>703</b> for storing decoding in-progress results. The read decoding in-progress results are supplied to the cyclic shift circuit <b>614</b> via the switch <b>704</b>.</p>
<p id="p-0465" num="0464">When the second computation is to be performed by the calculation section <b>615</b>, the decoding in-progress results D<b>615</b> (v<sub>i</sub>′) obtained as a result of the second computation are supplied to the memory <b>610</b> for storing decoding in-progress results from the calculation section <b>615</b>. At the same time when the decoding in-progress results D<b>615</b> are written at a predetermined address of one of the RAM <b>702</b> for storing decoding in-progress results and the RAM <b>703</b> for storing decoding in-progress results, the decoding in-progress results D<b>610</b> (v<sub>i</sub>′) obtained previously as a result of the second computation by the calculation section <b>615</b> are read from the other RAM, and are output to the calculation section <b>615</b> via the cyclic shift circuit <b>614</b>.</p>
<p id="p-0466" num="0465">The five decoding in-progress results D<b>615</b> are supplied to the switch <b>701</b> from the calculation section <b>615</b>, and also, a control signal D<b>720</b><sub>1 </sub>indicating the selection one of the RAM <b>702</b> for storing decoding in-progress results and the RAM <b>703</b> for storing decoding in-progress results as a memory for writing the decoding in-progress results D<b>615</b> is supplied to the switch <b>701</b>. Based on the control signal D<b>720</b><sub>1</sub>, the switch <b>701</b> selects one of the RAM <b>702</b> for storing decoding in-progress results and the RAM <b>703</b> for storing decoding in-progress results, and supplies the five decoding in-progress results D<b>612</b> to the selected one of them.</p>
<p id="p-0467" num="0466">The five decoding in-progress results D<b>612</b> are supplied as decoding in-progress results D<b>701</b> to the RAM <b>702</b> for storing decoding in-progress results from the switch <b>701</b>, and also, a control signal D<b>702</b><sub>2 </sub>indicating the address is supplied thereto from the control section <b>617</b>. The RAM <b>702</b> for storing decoding in-progress results reads the five decoding in-progress results D<b>701</b> obtained previously as a result of the second computation by the calculation section <b>615</b>, which are already stored at the address indicated by the control signal D<b>720</b><sub>2</sub>, and supplies them as the decoding in-progress results D<b>703</b> to the switch <b>704</b>. Furthermore, the RAM <b>702</b> for storing decoding in-progress results stores (writes) the five decoding in-progress results D<b>702</b> supplied from the switch <b>701</b> at the address indicated by the control signal D<b>720</b><sub>2</sub>.</p>
<p id="p-0468" num="0467">The five decoding in-progress results D<b>615</b> are supplied as decoding in-progress results D<b>702</b> to the RAM <b>703</b> for storing decoding in-progress results from the switch <b>701</b>, and also, a control signal D<b>720</b><sub>3 </sub>indicating the address is supplied thereto from the control section <b>617</b>. The RAM <b>703</b> for storing decoding in-progress results reads the five decoding in-progress results D<b>702</b> obtained previously as a result of the second computation by the calculation section <b>615</b>, which are already stored at the address indicated by the control signal D<b>720</b><sub>3</sub>, and supplies them as decoding in-progress results D<b>704</b> to the switch <b>704</b>. Furthermore, the RAM <b>702</b> for storing decoding in-progress results stores (writes) the five decoding in-progress results D<b>702</b> supplied from the switch <b>701</b> at the address indicated by the control signal D<b>720</b><sub>3</sub>.</p>
<p id="p-0469" num="0468">The decoding in-progress results D<b>703</b> are supplied to the switch <b>704</b> from the RAM <b>702</b> for storing decoding in-progress results, or the decoding in-progress results D<b>704</b> are supplied thereto from the RAM <b>703</b> for storing decoding in-progress results. Furthermore, a control signal D<b>720</b><sub>4 </sub>indicating the selection of one of the RAM <b>702</b> for storing decoding in-progress results and the RAM <b>703</b> for storing decoding in-progress results is supplied thereto from the control section <b>617</b>. Based on the control signal D<b>720</b><sub>4</sub>, the switch <b>704</b> selects one of the RAM <b>702</b> for storing decoding in-progress results and the RAM <b>703</b> for storing decoding in-progress results, and supplies the five decoding in-progress results supplied from the selected RAM are supplied as the five decoding in-progress results D<b>610</b> to the calculation section <b>615</b>.</p>
<p id="p-0470" num="0469">In the memory <b>610</b> for storing decoding in-progress results, when the second computation is to be performed by the calculation section <b>615</b>, based on the control signal D<b>720</b><sub>2</sub>, the RAM <b>702</b> for storing decoding in-progress results reads five times the decoding in-progress results D<b>701</b> corresponding to 1s from the 1st column up to the fifth column of the check matrix, which are stored at the same address, from among the already stored decoding in-progress results D<b>701</b> obtained previously as a result of the second computation by the calculation section <b>615</b> in units of five results, and supplies them to the calculation section <b>615</b> via the switch <b>704</b>. That is, since the column weight of the check matrix H of <figref idref="DRAWINGS">FIG. 15</figref> is 5, there are five decoding in-progress results corresponding to 1s of each column of the check matrix H, and the RAM <b>702</b> for storing decoding in-progress results reads five times the decoding in-progress results D<b>701</b> corresponding to 1s from the first column to the fifth column in units of five results.</p>
<p id="p-0471" num="0470">Next, based on the control signal D<b>720</b><sub>3</sub>, the RAM <b>703</b> for storing decoding in-progress results continuously reads five times the five decoding in-progress results D<b>702</b> corresponding to 1s from the sixth column to the 10th column of the check matrix, which are stored at the same address, from among the decoding in-progress results D<b>702</b> obtained previously as a result of the second computation by the calculation section <b>615</b>, which are already stored, and supplies them to the calculation section <b>615</b> via the switch <b>704</b> and the cyclic shift circuit <b>614</b>. At the same time, the five decoding in-progress results D<b>615</b> corresponding to 1s from the 1st column up to the fifth column of the check matrix obtained as a result of the second computation that is currently being performed by the calculation section <b>615</b> are supplied as the decoding in-progress results D<b>701</b> to the RAM <b>702</b> for storing decoding in-progress results via the switch <b>701</b>. Based on the control signal D<b>720</b><sub>2</sub>, the RAM <b>702</b> for storing decoding in-progress results continuously stores five times the decoding in-progress results D<b>701</b> at the address at which the already read decoding in-progress results D<b>703</b> are stored.</p>
<p id="p-0472" num="0471">Thereafter, based on the control signal D<b>720</b><sub>2</sub>, the RAM <b>702</b> for storing decoding in-progress results continuously reads five times the decoding in-progress results D<b>701</b> corresponding to 1s from the 11th column up to the 15th column of the check matrix, which are stored at the same address, from among the already stored decoding in-progress results D<b>701</b> obtained previously as a result of the second computation by the calculation section <b>615</b> in units of five results, and supplies them to the calculation section <b>615</b> via the switch <b>704</b>. At the same time, the five decoding in-progress results D<b>612</b> corresponding to 1s from the sixth column up to the 10th column of the check matrix, which are obtained as a result of the second computation that is currently being performed by the calculation section <b>615</b>, are supplied as the decoding in-progress results D<b>702</b> to the RAM <b>703</b> for storing decoding in-progress results via the switch <b>701</b>. Based on the control signal D<b>720</b><sub>3</sub>, the RAM <b>703</b> for storing decoding in-progress results continuously stores five times the already read decoding in-progress results D<b>702</b> at the address at which the decoding in-progress results D<b>704</b> are stored.</p>
<p id="p-0473" num="0472">Hereafter, similarly, until the decoding in-progress results corresponding to all the 1s, which are obtained as a result of the second computation by the calculation section <b>615</b>, are stored in the RAM <b>702</b> for storing decoding in-progress results or the RAM <b>703</b> for storing decoding in-progress results, the RAM <b>702</b> for storing decoding in-progress results and the RAM <b>703</b> for storing decoding in-progress results alternately perform reading and writing of five times.</p>
<p id="p-0474" num="0473"><figref idref="DRAWINGS">FIG. 33</figref> is a flowchart illustrating the decoding process of the decoding apparatus <b>600</b> of <figref idref="DRAWINGS">FIG. 26</figref>. This process is started when, for example, received data to be decoded is stored in the memory <b>616</b> for reception.</p>
<p id="p-0475" num="0474">In step S<b>70</b>, the cyclic shift circuit <b>614</b> performs a cyclic shifting of rearranging the five decoding in-progress results D<b>613</b> stored in step S<b>76</b> (to be described later), which are supplied from the memory <b>613</b> for storing decoding in-progress results, and supplies them to the calculation section <b>615</b>.</p>
<p id="p-0476" num="0475">More specifically, the five decoding in-progress results D<b>613</b> are supplied to the cyclic shift circuit <b>614</b> from the memory <b>613</b> for storing decoding in-progress results. Also, a control signal D<b>621</b> indicating information (matrix data) as to the fact that 1s of the check matrix, which corresponds to the decoding in-progress results D<b>613</b>, are arranged as a result of how many times, for example, the unit matrix forming the basis in the check matrix is cyclically shifted, is supplied to the cyclic shift circuit <b>614</b> from the control section <b>617</b>. Based on the control signal D<b>621</b>, the cyclic shift circuit <b>614</b> cyclically shifts (rearranges) the five decoding in-progress results D<b>613</b>, and supplies them as the decoding in-progress results D<b>614</b> to the calculation section <b>615</b>.</p>
<p id="p-0477" num="0476">When the first computation has not been performed on the received data D<b>617</b> supplied from the memory <b>616</b> for reception and the decoding in-progress results D<b>612</b> have not been stored in the memory <b>613</b> for storing decoding in-progress results, the calculation section <b>615</b> sets the result to an initial value.</p>
<p id="p-0478" num="0477">In step S<b>71</b>, the calculation section <b>615</b> performs the second computation, and supplies the decoding in-progress results D<b>615</b>, which are the results of the computation, to the memory <b>610</b> for storing decoding in-progress results.</p>
<p id="p-0479" num="0478">More specifically, the five decoding in-progress results D<b>614</b> are supplied to the calculation section <b>615</b> from the cyclic shift circuit <b>614</b> in step S<b>70</b>, and the previous decoding in-progress results D<b>610</b> are supplied thereto from the memory <b>610</b> for storing decoding in-progress results in step S<b>72</b> (to be described later). Five pieces of received data D<b>617</b> are supplied from the memory <b>616</b> for received data, and the five decoding in-progress results D<b>615</b> and D<b>610</b>, and the received data D<b>617</b> are supplied individually to each of the calculators <b>615</b><sub>1 </sub>to <b>615</b><sub>5 </sub>of the calculation section <b>615</b>. Furthermore, the control signal D<b>622</b> is supplied to the calculation section <b>615</b> from the control section <b>617</b>, and the control signal D<b>622</b> is supplied to the calculators <b>615</b><sub>1 </sub>to <b>615</b><sub>5</sub>.</p>
<p id="p-0480" num="0479">Based on the control signal D<b>622</b>, the calculators <b>615</b><sub>1 </sub>to <b>615</b><sub>5 </sub>each perform a computation in accordance with equation (1), equation (10), and equation (11) by using the decoding in-progress results D<b>614</b> and D<b>610</b> and the received data D<b>617</b>, and supply the decoding in-progress results D<b>615</b> (v<sub>i</sub>′) corresponding to 1s of each column of the check matrix, which are obtained as a result of the computation, to the memory <b>610</b> for storing decoding in-progress results.</p>
<p id="p-0481" num="0480">After the processing of step S<b>71</b>, the process proceeds to step S<b>72</b>, where the memory <b>610</b> for storing decoding in-progress results stores the decoding in-progress results D<b>615</b> supplied from the calculation section <b>615</b> in step S<b>71</b> at the same address, reads the already stored decoding in-progress results D<b>615</b> (D<b>610</b>), and supplies them to the cyclic shift circuit <b>611</b> and the calculation section <b>615</b>.</p>
<p id="p-0482" num="0481">After the processing of step S<b>72</b>, the process proceeds to step S<b>73</b>, where the control section <b>617</b> determines whether or not all the decoding in-progress results D<b>615</b> corresponding to 1s of each column of the check matrix have been computed by the calculation section <b>615</b>. When the control section <b>617</b> determines that all the decoding in-progress results D<b>615</b> have not been computed, the process returns to step S<b>70</b>, and the above-described processing is performed again.</p>
<p id="p-0483" num="0482">On the other hand, when the control section <b>617</b> determines in step S<b>73</b> that all the decoding in-progress results D<b>615</b> have been computed by the calculation section <b>615</b>, the process proceeds to step S<b>74</b>, where the cyclic shift circuit <b>611</b> cyclically shifts the decoding in-progress results D<b>610</b> (v<sub>i</sub>′) supplied from the memory <b>610</b> for storing decoding in-progress results.</p>
<p id="p-0484" num="0483">More specifically, the five decoding in-progress results D<b>610</b> are supplied to the cyclic shift circuit <b>611</b> from the memory <b>610</b> for storing decoding in-progress results. Also, a control signal D<b>619</b> indicating information (matrix data) as to the fact that 1s of the check matrix, which corresponds to the decoding in-progress results D<b>610</b>, are arranged as a result of how many times, for example, the unit matrix forming the basis in the check matrix is cyclically shifted, is supplied to the cyclic shift circuit <b>611</b> from the control section <b>617</b>. Based on the control signal D<b>619</b>, the cyclic shift circuit <b>611</b> cyclically shifts (rearranges) the five decoding in-progress results D<b>610</b>, and supplies them as the decoding in-progress results D<b>611</b> to the calculation section <b>612</b>.</p>
<p id="p-0485" num="0484">After the processing of step S<b>74</b>, the process proceeds to step S<b>75</b>, where the calculation section <b>612</b> performs the first computation, and supplies the decoding in-progress results D<b>612</b>, which are the results of the computation, to the cyclic shift circuit <b>614</b>.</p>
<p id="p-0486" num="0485">More specifically, the five decoding in-progress results D<b>611</b> (v<sub>i</sub>′) are supplied to the calculation section <b>612</b> from the cyclic shift circuit <b>611</b> in step S<b>74</b>, and the decoding in-progress results D<b>611</b> are supplied individually to each of the calculators <b>612</b><sub>1 </sub>to <b>612</b><sub>5 </sub>of the calculation section <b>612</b>. Furthermore, the control signal D<b>621</b> is supplied to the calculation section <b>612</b> from the control section <b>617</b>, and the control signal D<b>621</b> is supplied to the calculators <b>612</b><sub>1 </sub>to <b>612</b><sub>5</sub>.</p>
<p id="p-0487" num="0486">Based on the control signal D<b>619</b>, the calculators <b>612</b><sub>1 </sub>to <b>612</b><sub>5 </sub>each perform a computation in accordance with equation (9) by using the decoding in-progress results D<b>611</b>, and supply the decoding in-progress results D<b>612</b>(w) corresponding to the row of the check matrix, which are obtained as a result of the computation, to the memory <b>613</b> for storing decoding in-progress results.</p>
<p id="p-0488" num="0487">After the processing of step S<b>75</b>, the process proceeds to step S<b>76</b>, where the memory <b>613</b> for storing decoding in-progress results stores the decoding in-progress results D<b>612</b> supplied from the calculation section <b>612</b> in step S<b>75</b> at the same address, and the process then proceeds to step S<b>77</b>.</p>
<p id="p-0489" num="0488">In step S<b>77</b>, the control section <b>617</b> determines whether or not the decoding in-progress results D<b>612</b> corresponding to all the rows of the check matrix have been computed by the calculation section <b>612</b>. When the control section <b>617</b> determines that all the decoding in-progress results have not been computed, the process returns to step S<b>74</b>, and the above-described processing is performed again.</p>
<p id="p-0490" num="0489">On the other hand, when the control section <b>617</b> determines in step S<b>77</b> that the decoding in-progress results D<b>612</b> corresponding to all the rows have been computed by the calculation section <b>612</b>, the processing is completed.</p>
<p id="p-0491" num="0490">The decoding apparatus <b>600</b> repeatedly performs the decoding process of <figref idref="DRAWINGS">FIG. 33</figref> for the number of decodings, and the value D<b>661</b> obtained by the calculation section <b>621</b> as a result of the computation in accordance with the above-described equation (5) is output as the final decoded results.</p>
<p id="p-0492" num="0491">In the above description, although the memory <b>610</b> for storing decoding in-progress results is formed from two single-port RAMs, it may be formed from three or more RAMs if reading and writing do not occur simultaneously from and to one RAM. When the physical bit width of the RAM is insufficient, by providing the same control signal by using a plurality of RAMs, these can be logically assumed as one RAM.</p>
<p id="p-0493" num="0492">For the portions in which edge data (messages corresponding to edges) lacks, during the storage in the memory (when data is stored in the memories <b>610</b> and <b>613</b> for storing decoding in-progress results), no message is stored, and during the computation (during the first computation at the calculation section <b>612</b> and during the second computation at the calculation section <b>615</b>), no computation is performed.</p>
<p id="p-0494" num="0493">If a barrel shifter is used for the cyclic shift circuits <b>314</b> and <b>320</b> of <figref idref="DRAWINGS">FIGS. 16A and 16B</figref>, the cyclic shift circuits <b>411</b> and <b>414</b> of <figref idref="DRAWINGS">FIG. 18</figref>, and the cyclic shift circuit <b>611</b> and <b>614</b> of <figref idref="DRAWINGS">FIG. 26</figref>, desired operations can be realized while reducing the circuit scale.</p>
<p id="p-0495" num="0494">In the above-described case, for the sake of simplification of description, a case, in which p is 5, that is, the number of rows and the number of computation of the sub-matrix forming the check matrix is 5, is used as an example. The number of rows and the number of columns of the sub-matrix need not always to be 5, and can take a different value depending on the check matrix. For example, p may be 360 or 392.</p>
<p id="p-0496" num="0495">Furthermore, in this embodiment, LDPC codes of a code length of 90 and a coding rate of ⅔ are used. However, the code length and the coding rate may be any value. For example, when the number of rows and the number of columns, p, of the sub-matrix is 5, if the total number of the edges is smaller than or equal to 5, LDPC codes of even any code length and coding rate can be decoded by using the decoding apparatus <b>300</b> of <figref idref="DRAWINGS">FIGS. 16A to 16C</figref>, the decoding apparatus <b>400</b> of <figref idref="DRAWINGS">FIG. 18</figref>, and the decoding apparatus <b>600</b> of <figref idref="DRAWINGS">FIG. 26</figref> by only changing the control signal.</p>
<p id="p-0497" num="0496">Furthermore, the decoding apparatus for certain LDPC codes, which satisfy the conditions in which the number of rows and the number of columns, p, of the sub-matrix is a predetermined value, and the total number of the edges is smaller than or equal to a particular value, is able to decode LDPC codes of any desired coding rate at any desired code length, which satisfy the conditions.</p>
<p id="p-0498" num="0497">When the check matrix is not a multiple of the number p of the rows and columns of the sub-matrix, the present invention may be applied by assuming the check matrix to be a multiple of p by assigning elements of all 0s to the outside of the fractions of the check matrix.</p>
<p id="p-0499" num="0498">Next, the above-described series of processes can be performed by hardware, and it can also be performed by software. When the series of processes is performed by software, the program forming the software is installed into a general-purpose computer, etc.</p>
<p id="p-0500" num="0499">Accordingly, <figref idref="DRAWINGS">FIG. 34</figref> shows an example of the configuration of an embodiment of a computer to which a program for executing the above-described series of processes is installed.</p>
<p id="p-0501" num="0500">The program may be recorded in advance in a hard disk <b>905</b> and a ROM <b>903</b> serving as a recording medium incorporated in the computer.</p>
<p id="p-0502" num="0501">Alternatively, the program can be temporarily or permanently stored (recorded) in a removable recording medium <b>911</b>, such as a flexible disk, a CD-ROM (Compact Disc Read-Only Memory), an MO (Magneto optical) disk, a DVD (Digital Versatile Disc), a magnetic disk, or a semiconductor memory. Such a removable recording medium <b>911</b> can be provided as so-called packaged software.</p>
<p id="p-0503" num="0502">In addition to being installed into a computer from the removable recording medium <b>911</b> such as that described above, programs can be transferred to the computer in a wireless manner from a download site via a man-made satellite for digital satellite broadcasting or can be transferred by wire to the computer via a network, such as a LAN (Local Area Network) or the Internet. In the computer, the programs that are transferred in such a manner can be received at a communication section <b>908</b>, and can be installed into the hard disk <b>905</b> contained therein.</p>
<p id="p-0504" num="0503">The computer incorporates a CPU (Central Processing Unit) <b>902</b>. An input/output interface <b>910</b> is connected to the CPU <b>902</b> via a bus <b>901</b>. When an instruction is input by a user by operating an input section <b>907</b> including a keyboard, a mouse, a microphone, etc., via the input/output interface <b>910</b>, the CPU <b>902</b> executes the program stored in the ROM (Read Only Memory) <b>903</b> in accordance with that instruction. Alternatively, the CPU <b>902</b> loads, into the RAM (Random Access Memory) <b>904</b>, the program stored in the hard disk <b>905</b>, the program that is transferred from a satellite or a network, that is received by the communication section <b>908</b>, and that is installed into the hard disk <b>905</b>, or the program that is read from the removable recording medium <b>911</b> loaded to a drive <b>909</b> and is installed into the hard disk <b>905</b>, and the CPU <b>902</b> executes the program. As a result, the CPU <b>902</b> performs processing in accordance with the above-described flowcharts or processing according to the above-described block diagrams. Then, for example, the CPU <b>902</b> outputs the processing result via the input/output interface <b>910</b> from an output section <b>906</b> including an LCD (Liquid-Crystal Display), a speaker, etc., transmits the processing result from the communication section <b>908</b>, and further records it in the hard disk <b>905</b> as required.</p>
<p id="p-0505" num="0504">In this specification, processing steps for writing the program for enabling the computer to perform various processing need not to be executed chronologically according to the orders written as flowcharts. Also, they may be executed concurrently or individually (for example, parallel processing or object-based processing).</p>
<p id="p-0506" num="0505">The program may be processed by one computer or may be processed by a plurality of computers in a distributed manner. Furthermore, the program may be transferred to a distant computer and may be processed thereby.</p>
<p id="p-0507" num="0506">For decoding LDPC codes having a check matrix that can be represented by a combination of a (P×P) unit matrix, a quasi-unit matrix in which one or more 1s, which are elements of the unit matrix, are substituted with 0, a shift matrix in which the unit matrix or the quasi-unit matrix is cyclically shifted, a sum matrix, which is the sum of two or more of the unit matrix, the quasi-unit matrix, and the shift matrix, and a (P×P) 0-matrix, an architecture for simultaneously performing p check node computations and p variable node computations is adopted. As a result, by simultaneously performing p node computations, the operating frequency can be suppressed within a feasible range. Thus, while a large number of iterative decodings can be performed, it is possible to prevent simultaneous access to different addresses from occurring during writing to and reading from the memory (FIFO and RAM).</p>
<p id="p-0508" num="0507">When LDPC codes represented by the check matrix of <figref idref="DRAWINGS">FIG. 15</figref> are decoded by repeatedly using the decoding apparatus <b>300</b> of <figref idref="DRAWINGS">FIGS. 16A to 16C</figref>, since it is possible to perform computations on 269 edges every five edges for each check node and each variable node. Therefore, for one decoding, the decoding apparatus needs to perform 269/5×2≅108 clock operations. Therefore, in order to perform 50 decodings, while 90 pieces of code information are received, the decoding apparatus needs to perform 108×50=5400 clock operations, and thus, an operating frequency approximately 60 times as high as the receiving frequency may be used. Therefore, according to the decoding apparatus of <figref idref="DRAWINGS">FIGS. 16A to 16C</figref>, when compared to the decoding apparatus of <figref idref="DRAWINGS">FIG. 9</figref> for performing node computations one-by-one, only an operating frequency of ⅕ is necessary. When viewed from the aspect of the circuit scale, since the size of the memory is the same, even if the logic circuit becomes large slightly, the influence on the whole is small.</p>
<p id="p-0509" num="0508">The decoding apparatus <b>400</b> of <figref idref="DRAWINGS">FIG. 18</figref> and the decoding apparatus <b>600</b> of <figref idref="DRAWINGS">FIG. 26</figref> have a memory capacity smaller than that of the decoding apparatus <b>300</b> of <figref idref="DRAWINGS">FIGS. 16A to 16C</figref>.</p>
<p id="p-0510" num="0509">For example, when the check matrix of the LDPC codes is the check matrix of <figref idref="DRAWINGS">FIG. 15</figref> and the number of quantization bits of the LDPC codes is 6, in the decoding apparatus <b>300</b> of <figref idref="DRAWINGS">FIGS. 16A to 16C</figref>, the edge data storage memory requires two RAMs having the capacity of 269 (the total number of the edges)×6=1614 bits, that is, the capacity of 1614×2=3228 bits for the two RAMs. In comparison, for example, when the number of quantization bits of the decoding in-progress results v is 9, in the decoding apparatus <b>400</b> of <figref idref="DRAWINGS">FIG. 18</figref>, the memory <b>413</b> for storing decoding in-progress results needs to be provided with a RAM having a capacity of 1614 bits of the total number of the edges, and the memory <b>410</b> for storing decoding in-progress results needs to be provided with a RAM having a capacity of the multiplied value of the code length (the number of the columns of the check matrix) of the LDPC codes and the number of quantization bits of the decoding in-progress results v, that is, the capacity of 90×9=810 bits. Thus, the circuit scale of the decoding apparatus can be reduced. Furthermore, in the decoding apparatus <b>400</b> of <figref idref="DRAWINGS">FIG. 18</figref>, since it is not necessary for the calculation section <b>415</b> for performing the second computation to have an FIFO memory, the circuit scale of the logic can be reduced.</p>
<p id="p-0511" num="0510">Furthermore, for example, when the check matrix of the LDPC codes is the check matrix of <figref idref="DRAWINGS">FIG. 15</figref> and the number of quantization bits of the decoding in-progress results v is 10, in the decoding apparatus <b>600</b> of <figref idref="DRAWINGS">FIG. 26</figref>, the memory <b>610</b> for storing decoding in-progress results needs to be provided with a RAM having a capacity of 1614 bits of the total number of the edges, and the memory <b>613</b> for storing decoding in-progress results needs to be provided with a RAM having a capacity of the multiplied value of the number of rows of the check matrix and the decoding in-progress results v, that is, a capacity of 30×10=300 bits. Thus, the circuit scale of the decoding apparatus can be reduced. Furthermore, in the decoding apparatus <b>600</b> of <figref idref="DRAWINGS">FIG. 26</figref>, since it is not necessary for the calculation section <b>612</b> for performing the first computation to have an FIFO memory, the circuit scale of the logic can be reduced.</p>
<p id="p-0512" num="0511">In general, since the code length of the LDPC codes is as great as several thousands to several tens of thousands, the LDPC codes whose value of p has a size of several hundreds are used. In that case, the advantages of using the decoding apparatus according to the present invention increase.</p>
<p id="p-0513" num="0512">Furthermore, since the decoding apparatus according to the present invention faithfully implements the sum product algorithm, decoding loss other than quantization of messages does not occur.</p>
<heading id="h-0006" level="1">INDUSTRIAL APPLICABILITY</heading>
<p id="p-0514" num="0513">From the above viewpoints, by using the decoding apparatus according to the present invention, high-performance decoding becomes possible.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-math idrefs="MATH-US-00001" nb-file="US07299397-20071120-M00001.NB">
<img id="EMI-M00001" he="20.15mm" wi="76.20mm" file="US07299397-20071120-M00001.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00002" nb-file="US07299397-20071120-M00002.NB">
<img id="EMI-M00002" he="9.57mm" wi="76.20mm" file="US07299397-20071120-M00002.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00003" nb-file="US07299397-20071120-M00003.NB">
<img id="EMI-M00003" he="28.19mm" wi="76.20mm" file="US07299397-20071120-M00003.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00004" nb-file="US07299397-20071120-M00004.NB">
<img id="EMI-M00004" he="9.14mm" wi="76.20mm" file="US07299397-20071120-M00004.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00005" nb-file="US07299397-20071120-M00005.NB">
<img id="EMI-M00005" he="9.14mm" wi="76.20mm" file="US07299397-20071120-M00005.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-claim-statement>The invention claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A decoding apparatus for decoding Low Density Parity Check (“LDPC”) codes, the LDPC codes being represented by a check matrix, which is composed of a plurality of sub-matrices, the sub-matrices including a (P×P) unit matrix, a quasi-unit matrix, a shift matrix, a sum matrix, and a (P×P) zero matrix, wherein the quasi-unit matrix is a unit matrix having one or more 1s being substituted with 0, the shift matrix is a unit matrix or a quasi-unit matrix which is cyclically shifted, the sum matrix is the sum of two or more of said unit matrix, said quasi-unit matrix, and said shift matrix, the decoding apparatus comprising:
<claim-text>first computation means for simultaneously performing P check node computations for decoding said LDPC codes;</claim-text>
<claim-text>second computation means for simultaneously performing P variable node computations for decoding said LDPC codes; and</claim-text>
<claim-text>message storage means for simultaneously reading and writing message data corresponding to P edges, the message data being obtained as a result of said P check node computations or said P variable node computations;</claim-text>
<claim-text>wherein said message storage means stores message data corresponding to the edges, the message data being read during the check node computation in such a manner that the sub-matrices of the check matrix are packed closer in a predetermined direction excluding the zero matrix.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The decoding apparatus according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein
<claim-text>said first computation means has P check node calculators for performing check node computations; and</claim-text>
<claim-text>said second computation means has P variable node calculators for performing variable node computations.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The decoding apparatus according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein
<claim-text>the sub-matrices of the check matrix are packed closer in the row direction.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The decoding apparatus according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein
<claim-text>the sub-matrices of the check matrix are packed closer in the column direction.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The decoding apparatus according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein
<claim-text>said message storage means stores, at the same address, messages corresponding to P edges belonging to a unit matrix whose weight is 1, a quasi-unit matrix, or a shift matrix, when the sub-matrices, whose weight is 2 or more from among the sub-matrices representing said check matrix, are represented in the form of the sum of the unit matrix whose weight is 1, the quasi-unit matrix, or the shift matrix.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The decoding apparatus according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein
<claim-text>said message storage means comprises number-of-rows/p FIFOs and number-of-columns/p FIFOs; and</claim-text>
<claim-text>said number-of-rows/p FIFOs and said number-of-columns/p FIFOs each have a number of words corresponding to the weight of the row and the weight of the column of said check matrix, respectively.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The decoding apparatus according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein
<claim-text>said message storage means comprises a Random Access Memory (“RAM”); and</claim-text>
<claim-text>said RAM stores said message data in the read-out sequence in such a manner as to be packed closer and reads said message data in the storage position sequence.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The decoding apparatus according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>received information storage means for storing received information of LDPC codes and for simultaneously reading P pieces of said received information.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The decoding apparatus according to <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein
<claim-text>said received information storage means stores said received information in such a manner that the received information can be read in the sequence necessary for said variable node computation.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The decoding apparatus according to <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising:
<claim-text>rearranging means for rearranging messages obtained as a result of said P check node computations or said P variable node computations.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The decoding apparatus according to <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein
<claim-text>said rearranging means comprises a barrel shifter.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The decoding apparatus according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein
<claim-text>said first computation means and said second computation means determine messages corresponding to P edges.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The decoding apparatus according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein
<claim-text>said first computation means performs some of said P check node computations and said P variable node computations; and</claim-text>
<claim-text>said second computation means performs some of the others of said P variable node computations.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The decoding apparatus according to <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein
<claim-text>said first computation means comprises P calculators for performing some of said P check node computations and said P variable node computations; and</claim-text>
<claim-text>said second computation means comprises P calculators for performing some of the others of said P variable node computations.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The decoding apparatus according to <claim-ref idref="CLM-00013">claim 13</claim-ref>, further comprising:
<claim-text>first decoding in-progress result storage means for simultaneously reading and writing first decoding in-progress results corresponding to P edges, which are obtained by said first computation means by performing some of said P check node computations and said P variable node computations.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The decoding apparatus according to <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein
<claim-text>said first decoding in-progress result storage means stores said first decoding in-progress results corresponding to the edge, which are read when some of the others of said P variable node computations are performed, in such a manner that 1s of the check matrix are packed closer in the row direction.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The decoding apparatus according to <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein
<claim-text>said first decoding in-progress result storage means are two single-port Random Access Memories (“RAMs”).</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The decoding apparatus according to <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein
<claim-text>said two single-port RAMs alternately store said first decoding in-progress results in units of said first decoding in-progress results corresponding to edges of P rows of said check matrix.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The decoding apparatus according to <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein
<claim-text>said two single-port RAMs each read said first decoding in-progress results stored at the same address, where said decoding in-progress results were previously stored.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The decoding apparatus according to <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein
<claim-text>said first decoding in-progress result storage means stores, at the same address, said first decoding in-progress results corresponding to P edges belonging to a unit matrix whose weight is 1, a quasi-unit matrix, or a shift matrix when the sub-matrices, whose weight is 2 or more from among the sub-matrices representing said check matrix, are represented in the form of the sum of the unit matrix whose weight is 1, the quasi-unit matrix, or the shift matrix.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. The decoding apparatus according to <claim-ref idref="CLM-00013">claim 13</claim-ref>, further comprising:
<claim-text>second decoding in-progress result storage means for simultaneously reading and writing said second decoding in-progress results corresponding to P edges, which are obtained by said second computation means by performing some of the others of said P variable node computations.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. The decoding apparatus according to <claim-ref idref="CLM-00013">claim 13</claim-ref>, further comprising:
<claim-text>received information storage means for storing received information of LDPC codes and simultaneously reading said P pieces of received information.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. The decoding apparatus according to <claim-ref idref="CLM-00022">claim 22</claim-ref>, wherein
<claim-text>said received information storage means stores said received information in such a manner that said received information can be read in the sequence necessary for some of the others of said P variable node computations.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00024" num="00024">
<claim-text>24. The decoding apparatus according to <claim-ref idref="CLM-00013">claim 13</claim-ref>, further comprising:
<claim-text>rearranging means for rearranging first decoding in-progress results obtained by said first computation means by performing some of said P check node computations and said P variable node computations, or second decoding in-progress results obtained by said second computation means by performing some of the others of said P variable node computations.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00025" num="00025">
<claim-text>25. The decoding apparatus according to <claim-ref idref="CLM-00024">claim 24</claim-ref>, wherein
<claim-text>said rearranging means comprises a barrel shifter.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00026" num="00026">
<claim-text>26. The decoding apparatus according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein
<claim-text>said first computation means performs some of said P check node computations; and</claim-text>
<claim-text>said second computation means performs some of the others of said P check node computations, and said P variable node computations.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00027" num="00027">
<claim-text>27. The decoding apparatus according to <claim-ref idref="CLM-00026">claim 26</claim-ref>, wherein
<claim-text>said first computation means comprises P calculators for performing some of said P check node computations; and</claim-text>
<claim-text>said second computation means comprises P calculators for performing some of the others of said P check node computations, and said P variable node computations.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00028" num="00028">
<claim-text>28. The decoding apparatus according to <claim-ref idref="CLM-00026">claim 26</claim-ref>, further comprising:
<claim-text>first decoding in-progress result storage means for simultaneously reading and writing first decoding in-progress results corresponding to P edges, which are obtained by said first computation means by performing some of said P check node computations.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00029" num="00029">
<claim-text>29. The decoding apparatus according to <claim-ref idref="CLM-00026">claim 26</claim-ref>, further comprising:
<claim-text>second decoding in-progress result storage means for simultaneously reading and writing second decoding in-progress results corresponding to P edges, which are obtained by said second computation means by performing some of the others of said P check node computations, and said P variable node computations.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00030" num="00030">
<claim-text>30. The decoding apparatus according to <claim-ref idref="CLM-00029">claim 29</claim-ref>, wherein
<claim-text>said second decoding in-progress result storage means stores said second decoding in-progress results corresponding to edges, which are read when some of the others of said P check node computations; and</claim-text>
<claim-text>said P variable node computations are performed, in such a manner that 1s of the check matrix are packed closer in the column direction.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00031" num="00031">
<claim-text>31. The decoding apparatus according to <claim-ref idref="CLM-00029">claim 29</claim-ref>, wherein
<claim-text>said second decoding in-progress result storage means are two single-port Random Access Memories (“RAMs”).</claim-text>
</claim-text>
</claim>
<claim id="CLM-00032" num="00032">
<claim-text>32. The decoding apparatus according to <claim-ref idref="CLM-00031">claim 31</claim-ref>, wherein
<claim-text>said single-port RAMs alternately store said second decoding in-progress results in units of said second decoding in-progress results corresponding to P edges of said check matrix.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00033" num="00033">
<claim-text>33. The decoding apparatus according to <claim-ref idref="CLM-00031">claim 31</claim-ref>, wherein
<claim-text>said two single-port RAMs each read said second decoding in-progress results stored at the same address, where said decoding in-progress results were previously stored.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00034" num="00034">
<claim-text>34. The decoding apparatus according to <claim-ref idref="CLM-00029">claim 29</claim-ref>, wherein
<claim-text>said second decoding in-progress result storage means stores, at the same address, said second decoding in-progress results corresponding to P edges belonging to a unit matrix whose weight is 1, a quasi-unit matrix, or a shift matrix when the sub-matrices whose weight is 2 or more from among the sub-matrices representing said check matrix are represented in the form of the sum of the unit matrix whose weight is 1, the quasi-unit matrix, or the shift matrix.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00035" num="00035">
<claim-text>35. The decoding apparatus according to <claim-ref idref="CLM-00026">claim 26</claim-ref>, further comprising:
<claim-text>received information storage means for storing received information of LDPC codes and for simultaneously reading said P pieces of received information.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00036" num="00036">
<claim-text>36. The decoding apparatus according to <claim-ref idref="CLM-00035">claim 35</claim-ref>, wherein
<claim-text>said received information storage means stores said received information in such a manner that said received information can be read in the sequence necessary for some of the others of said P check node computations, and said P variable node computations.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00037" num="00037">
<claim-text>37. The decoding apparatus according to <claim-ref idref="CLM-00026">claim 26</claim-ref>, further comprising:
<claim-text>rearranging means for rearranging first decoding in-progress results obtained by said first computation means by performing some of said P check node computations, or second decoding in-progress results obtained by said second computation means by performing some of the others of said P check node computations, and said P variable node computations.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00038" num="00038">
<claim-text>38. The decoding apparatus according to <claim-ref idref="CLM-00037">claim 37</claim-ref>, wherein
<claim-text>said rearranging means comprises a barrel shifter.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00039" num="00039">
<claim-text>39. A decoding method for use with a decoding apparatus for decoding Low Density Parity Check (“LDPC”) codes, the LDPC codes being represented by a check matrix, which is composed of a plurality of sub-matrices, the sub-matrices including a (P×P) unit matrix, a quasi-unit matrix, a shift matrix, a sum matrix, and a (P×P) zero matrix, wherein the quasi-unit matrix is a unit matrix having one or more 1s being substituted with 0, the shift matrix is a unit matrix or a quasi-unit matrix which is cyclically shifted, the sum matrix is the sum of two or more of said unit matrix, said quasi-unit matrix, and said shift matrix, the decoding method comprising:
<claim-text>a first computation step of simultaneously performing P check node computations for decoding said LDPC codes;</claim-text>
<claim-text>a second computation step of simultaneously performing P variable node computations for decoding said LDPC codes; and</claim-text>
<claim-text>a message storage step of simultaneously reading and writing message data corresponding to P edges, the message data being obtained as a result of said P check node computations or said P variable node computations;</claim-text>
<claim-text>wherein the message storage step stores message data corresponding to the edges, the message data being read during the check node computation in such a manner that the sub-matrices of the check matrix are packed closer in a predetermined direction excluding the zero matrix.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00040" num="00040">
<claim-text>40. A computer readable medium having a program for causing a computer to perform a decoding method for use with a decoding apparatus for decoding Low Density Parity Check (“LDPC”) codes, said method comprising:
<claim-text>a first computation step of simultaneously performing P check node computations for decoding said LDPC codes;</claim-text>
<claim-text>a second computation step of simultaneously performing P variable node computations for decoding said LDPC codes; and</claim-text>
<claim-text>a message storage step for simultaneously reading and writing message data corresponding to P edges, the message data being obtained as a result of said P check node computations or said P variable node computations;</claim-text>
<claim-text>wherein the message storage step stores message data corresponding to the edges, the message data being read during the check node computation in such a manner that the sub-matrices of the check matrix are packed closer in a predetermined direction excluding the zero matrix.</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>
