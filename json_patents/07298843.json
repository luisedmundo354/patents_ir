{
    "title": "Method and apparatus for seeding a random number generator",
    "abstract": "Disclosed are systems and methods for seeding a random number generator, comprising retrieving a first data block from a memory; initially seeding the random number generator using the first data block as a seed; retrieving a number generated by the random number generator; mapping the number to a memory address in the memory using a mathematical function; retrieving a successive data block from the memory address; and successively seeding the random number generator with a combination of the seed and the successive data block such that the combination of the seed and the successive data block becomes a resulting seed.",
    "inventors": [
        "Krell",
        "Gerasimov"
    ],
    "document_number": "07298843",
    "publication_date": "20071120",
    "assignees": [
        "Hewlett-Packard Development Company, L.P."
    ],
    "claims": [
        {
            "claim_number": "CLM-00001",
            "preamble": "1. A method for seeding a random number generator, the method comprising the steps of:",
            "components": [
                {
                    "component": "(a) retrieving a first data block from a memory;",
                    "subcomponents": []
                },
                {
                    "component": "(b) initially seeding the random number generator using said first data block as a seed;",
                    "subcomponents": []
                },
                {
                    "component": "(c) retrieving a number generated by the random number generator;",
                    "subcomponents": []
                },
                {
                    "component": "(d) mapping said number to a memory address in said memory using a mathematical function;",
                    "subcomponents": []
                },
                {
                    "component": "(e) retrieving a successive data block from said memory address;",
                    "subcomponents": []
                },
                {
                    "component": "(f) successively seeding the random number generator with a combination of said seed and said successive data block such that said combination of said seed and said successive data block becomes a resulting seed of the random number generator; and",
                    "subcomponents": []
                },
                {
                    "component": "(e\u2032) after each performance of (e), testing for satisfaction of at least one criterion and if said at least one criterion is not satisfied, repeating (c), (d), (e), and (e\u2032),",
                    "subcomponents": []
                },
                {
                    "component": "wherein a criterion of said at least one criterion is an absence of a string of identical bits in said successive data block longer than a specified number of bits.",
                    "subcomponents": []
                }
            ]
        },
        {
            "claim_number": "CLM-00002",
            "preamble": "2. The method recited in claim 1 , wherein said specified number is equal to the number of bits in said successive data block.",
            "components": []
        },
        {
            "claim_number": "CLM-00003",
            "preamble": "3. The method recited in claim 1 , further comprising the further step of:",
            "components": [
                {
                    "component": "(e\u2033) after each performance of (e\u2032), checking the number of repetitions of (c), (d), (e), and (e\u2032) due to failure to satisfy said at least one criterion and stopping said repetitions when a specified number of said repetitions have been performed.",
                    "subcomponents": []
                }
            ]
        },
        {
            "claim_number": "CLM-00004",
            "preamble": "4. The method recited in claim 3 , wherein said specified number of said repetitions is two.",
            "components": []
        },
        {
            "claim_number": "CLM-00005",
            "preamble": "5. A method for seeding a random number generator, the method comprising the steps of:",
            "components": [
                {
                    "component": "(a) retrieving a first data block from a memory;",
                    "subcomponents": []
                },
                {
                    "component": "(b) initially seeding the random number generator using said first data block as a seed;",
                    "subcomponents": []
                },
                {
                    "component": "(c) retrieving a number generated by the random number generator;",
                    "subcomponents": []
                },
                {
                    "component": "(d) mapping said number to a memory address in said memory using a mathematical function;",
                    "subcomponents": []
                },
                {
                    "component": "(e) retrieving a successive data block from said memory address; and",
                    "subcomponents": []
                },
                {
                    "component": "(f) successively seeding the random number generator with a combination of said seed and said successive data block such that said combination of said seed and said successive data block becomes a resulting seed of the random number generator,",
                    "subcomponents": []
                },
                {
                    "component": "wherein said first data block includes an identifier unique to a specified computer device.",
                    "subcomponents": []
                }
            ]
        },
        {
            "claim_number": "CLM-00006",
            "preamble": "6. A method for seeding a random number generator, the method comprising the steps of:",
            "components": [
                {
                    "component": "(a) retrieving a first data block from a memory;",
                    "subcomponents": []
                },
                {
                    "component": "(b) initially seeding the random number generator using said first data block as a seed;",
                    "subcomponents": []
                },
                {
                    "component": "(c) retrieving a number generated, by the random number generator;",
                    "subcomponents": []
                },
                {
                    "component": "(d) mapping said number to a memory addressing said memory using a mathematical function;",
                    "subcomponents": []
                },
                {
                    "component": "(e) retrieving a successive data block from said memory address; and",
                    "subcomponents": []
                },
                {
                    "component": "(f) successively seeding the random number generator with a combination of said seed and said successive data block such that said combination of said seed and said successive data block becomes a resulting seed of the random number generator,",
                    "subcomponents": []
                },
                {
                    "component": "wherein said mathematical function used in said mapping is:",
                    "subcomponents": [
                        "",
                        "",
                        ""
                    ]
                },
                {
                    "component": "",
                    "subcomponents": []
                },
                {
                    "component": "",
                    "subcomponents": []
                },
                {
                    "component": "",
                    "subcomponents": []
                },
                {
                    "component": "wherein f(x)=said memory address to which said generated number is mapped;",
                    "subcomponents": []
                },
                {
                    "component": "x=retrieved number generated by random number generator;",
                    "subcomponents": []
                },
                {
                    "component": "b=base memory address; and",
                    "subcomponents": []
                },
                {
                    "component": "m=memory size.",
                    "subcomponents": []
                }
            ]
        },
        {
            "claim_number": "CLM-00007",
            "preamble": "7. The method recited in claim 6 , wherein said first data block includes previously saved data.",
            "components": []
        },
        {
            "claim_number": "CLM-00008",
            "preamble": "8. The method recited in claim 6 , wherein said first data block includes an identifier unique to a specified computer device.",
            "components": []
        },
        {
            "claim_number": "CLM-00009",
            "preamble": "9. A method for seeding a random number generator, the method comprising the steps of:",
            "components": [
                {
                    "component": "(a) retrieving a first data block from a memory;",
                    "subcomponents": []
                },
                {
                    "component": "(b) initially seeding the random number generator using said first data block as a seed;",
                    "subcomponents": []
                },
                {
                    "component": "(c) retrieving a number generated by the random number generator;",
                    "subcomponents": []
                },
                {
                    "component": "(d) mapping said number to a memory address in said memory using a mathematical function;",
                    "subcomponents": []
                },
                {
                    "component": "(e) retrieving a successive data block from said memory address; and",
                    "subcomponents": []
                },
                {
                    "component": "(f) successively seeding the random number generator with a combination of said seed and said successive data block such that said, combination of said seed and said successive data block becomes a resulting seed of the random number generator,",
                    "subcomponents": []
                },
                {
                    "component": "wherein said combination of said seed and said successive data block is accomplished by hashing said seed and said successive data block.",
                    "subcomponents": []
                }
            ]
        },
        {
            "claim_number": "CLM-00010",
            "preamble": "10. An apparatus for seeding a random number generator, the apparatus comprising:",
            "components": [
                {
                    "component": "a memory; and",
                    "subcomponents": []
                },
                {
                    "component": "a processor operatively coupled to said memory, wherein said processor is programmed to:",
                    "subcomponents": []
                },
                {
                    "component": "(a) retrieve a first data block from said memory;",
                    "subcomponents": []
                },
                {
                    "component": "(b) initially seed the random number generator using said first data block as a seed;",
                    "subcomponents": []
                },
                {
                    "component": "(c) retrieve a number generated by the random number generator;",
                    "subcomponents": []
                },
                {
                    "component": "(d) map said number to a memory address in said memory using a mathematical function;",
                    "subcomponents": []
                },
                {
                    "component": "(e) retrieve a successive data block from said memory address;",
                    "subcomponents": []
                },
                {
                    "component": "(f) successively seed the random number generator with a combination of said seed and said successive data block such that said combination of said seed and said successive data block becomes a resulting seed of the random number generator; and",
                    "subcomponents": []
                },
                {
                    "component": "(e\u2032) after each performance of (e), test for satisfaction of at least one criterion and if said at least one criterion is not satisfied, repeat (c), (d), (e), and (e\u2032),",
                    "subcomponents": []
                },
                {
                    "component": "wherein a criterion of said at least one criterion is an absence of a string of identical bits in said successive data block longer than a specified number of bits.",
                    "subcomponents": []
                }
            ]
        },
        {
            "claim_number": "CLM-00011",
            "preamble": "11. The apparatus recited in claim 10 , wherein said processor is further programmed to:",
            "components": [
                {
                    "component": "(e\u2033) after each performance of (e\u2032), check the number of repetitions of (c), (d), (e), and (e\u2032) due to failure to satisfy said at least one criterion and stop said repetitions when a specified number of said repetitions have been performed.",
                    "subcomponents": []
                }
            ]
        },
        {
            "claim_number": "CLM-00012",
            "preamble": "12. The apparatus recited in claim 10 , wherein said first data block includes an identifier unique to a specified computer device.",
            "components": []
        },
        {
            "claim_number": "CLM-00013",
            "preamble": "13. The apparatus recited in claim 10 , wherein said first data block includes previously saved data.",
            "components": []
        },
        {
            "claim_number": "CLM-00014",
            "preamble": "14. The apparatus recited in claim 10 , wherein said combination of said seed and said successive data block is accomplished by hashing said seed and said successive data block.",
            "components": []
        },
        {
            "claim_number": "CLM-00015",
            "preamble": "15. An apparatus for seeding a random number generator, the apparatus comprising:",
            "components": [
                {
                    "component": "(a) means for retrieving a first data block from a memory;",
                    "subcomponents": []
                },
                {
                    "component": "(b) means for initially seeding the random number generator using said first data block as a seed;",
                    "subcomponents": []
                },
                {
                    "component": "(c) means far retrieving a number generated by the random number generator;",
                    "subcomponents": []
                },
                {
                    "component": "(d) means for mapping said number to a memory address in said memory using a mathematical function;",
                    "subcomponents": []
                },
                {
                    "component": "(e) means for retrieving a successive data block from said memory address;",
                    "subcomponents": []
                },
                {
                    "component": "(f) means for successively seeding the random number generator with a combination of said seed and said successive data block such that said combination of said seed and said successive data block becomes a resulting seed of the random number generator; and",
                    "subcomponents": []
                },
                {
                    "component": "(e\u2032) means for testing for satisfaction of at least one criterion after each use of said means for said retrieving said successive data block of (e), and if said at least one criterion is not satisfied, repeating (c), (d), (e), and (e\u2032),",
                    "subcomponents": []
                },
                {
                    "component": "wherein a criterion of said at least one criterion is an absence of a string of identical bits in said successive data block longer than a specified number of bits.",
                    "subcomponents": []
                }
            ]
        },
        {
            "claim_number": "CLM-00016",
            "preamble": "16. The apparatus recited in claim 15 , further comprising:",
            "components": [
                {
                    "component": "(e\u2033) means for checking the number of repetitions of (c), (d), (e), and (e\u2033) due to failure to satisfy said at least one criterion after each use of said means for said testing and repeating of (e\u2032), and stopping said repeating when a specified number of said repetitions have been performed.",
                    "subcomponents": []
                }
            ]
        },
        {
            "claim_number": "CLM-00017",
            "preamble": "17. The apparatus recited in claim 15 , wherein said first data block includes an identifier unique to a specified computer device.",
            "components": []
        },
        {
            "claim_number": "CLM-00018",
            "preamble": "18. The apparatus recited in claim 15 , wherein said first data block includes previously saved data.",
            "components": []
        },
        {
            "claim_number": "CLM-00019",
            "preamble": "19. The apparatus recited in claim 15 , wherein said combination of said seed and said successive data block is accomplished by hashing said seed and said successive data block.",
            "components": []
        },
        {
            "claim_number": "CLM-00020",
            "preamble": "20. A computer-readable medium having computer-readable instructions for performing a method of seeding a random number generator, the method comprising the steps of:",
            "components": [
                {
                    "component": "(a) retrieving a first data block from a memory;",
                    "subcomponents": []
                },
                {
                    "component": "(b) initially seeding the random number generator using said first data block as a seed;",
                    "subcomponents": []
                },
                {
                    "component": "(c) retrieving a number generated by the random number generator;",
                    "subcomponents": []
                },
                {
                    "component": "(d) mapping said number to a memory address in said memory using a mathematical function;",
                    "subcomponents": []
                },
                {
                    "component": "(e) retrieving a successive data block from said memory address;",
                    "subcomponents": []
                },
                {
                    "component": "(f) successively seeding the random number generator with a combination of said seed and said successive data block such that said combination of said seed and said successive data block becomes a resulting seed of the random number generator; and",
                    "subcomponents": []
                },
                {
                    "component": "(e\u2032) after each performance of (e), testing for satisfaction of at least one criterion and if said at least one criterion is not satisfied, repeating (c), (d), (e), and (e\u2032),",
                    "subcomponents": []
                },
                {
                    "component": "wherein a criterion of said at least one criterion is an absence of a string of identical bits in said successive data block longer than a specified number of bits.",
                    "subcomponents": []
                }
            ]
        },
        {
            "claim_number": "CLM-00021",
            "preamble": "21. The computer-readable medium recited in claim 20 , wherein said method further comprises the further step of:",
            "components": [
                {
                    "component": "(e\u2033) after each performance of (e\u2032), checking the number of repetitions of (c), (d), (e), and (e\u2032) due to failure to satisfy said at least one criterion and stopping said repetitions when a specified number of said repetitions have been performed.",
                    "subcomponents": []
                }
            ]
        },
        {
            "claim_number": "CLM-00022",
            "preamble": "22. The computer-readable medium recited in claim 20 , wherein said first data block includes an identifier unique to a specified computer device.",
            "components": []
        },
        {
            "claim_number": "CLM-00023",
            "preamble": "23. The computer-readable medium recited in claim 20 , wherein said first data block includes previously saved data.",
            "components": []
        },
        {
            "claim_number": "CLM-00024",
            "preamble": "24. The computer-readable medium recited in claim 20 , wherein said combination of said seed and said successive data block is accomplished by hashing said seed and said successive data block.",
            "components": []
        }
    ],
    "description": [
        "The present invention relates generally to the operation of computer systems and more specifically to the generation of random or pseudo-random numbers in computer systems.",
        "In the operation of computer systems, it is often desirable to generate random numbers for use in certain applications such as simulations, games, and secure communications. A random number is a sequence of numbers in which no number is more likely to occur at a given place in the sequence than any other number. Generation of a truly random number is generally considered to be impossible, but computer processes may generate numbers called \u201cpseudo-random numbers\u201d that are sufficiently unpredictable to serve an intended purpose. These pseudo-random numbers are hereinafter called \u201crandom numbers,\u201d and their generation \u201crandom number generation,\u201d in conformance with common usage.",
        "One prior method of generating random numbers in a computer system relies on the collection of random data over time from the computer system itself for use as a seed, i.e., a starting value used in generating random numbers, for a random number generator. Another prior method relies directly or indirectly on user interaction via, e.g., a keyboard or mouse, for random data to use as a random number generator seed.",
        "In some circumstances, however, user input is not available, for example, for embedded devices requiring no user interaction and having no user interfaces. Further, if one or more random numbers are required in a short time, for example, almost immediately after startup, there may not be enough time for the collection of random data for a seed. In addition, where the resources from which random data may be gathered are limited, for example in the limited memory of an embedded device, the data available may be insufficient to provide enough random data for a random number generator seed.",
        "FIG. 1 is a flowchart showing an embodiment of the invention;",
        "FIG. 2 is a flowchart showing another embodiment of the invention; and",
        "FIG. 3 is a block diagram of an embodiment of the invention.",
        "Broadly stated, the present invention is directed to apparatus and methods for seeding a random number generator in a computer system without user interaction, network connection, or an elapsed period of time to collect data to form a seed, allowing a requirement for a random number to be fulfilled by a random number generator in a relatively short time, e.g., immediately after power-up of a computer device.",
        "Turning now to FIG. 1, showing a flowchart for an embodiment of the invention, a first data block is retrieved from memory (10). The first retrieved data block may include but is not limited to previously stored data or a unique identifier for a device or component such as a media access control (\u201cMAC\u201d) address. A random number generator is initially seeded with the retrieved first data block (12). The random number generator generates a number and that number is retrieved (14). The generated number is mapped to a memory address using a mathematical function (16). A successive memory block is retrieved starting at the memory address to which the generated number was mapped (18).",
        "The successive data block retrieved by step 18 is tested for satisfaction of at least one criterion for the suitability of the seed (20), and if the at least one criterion is not satisfied, steps 14, 16, 18, and 20 are repeated until the at least one criterion is satisfied. In embodiments of the invention in which step 20 tests for satisfaction of more than one criterion, the testing may be satisfied if one, some, or all of the criteria are satisfied, depending on the application in which the embodiments are being used. Use of the phrase \u201cat least one criterion\u201d is not intended to limit embodiments of the invention to satisfaction of only one of a plurality of criteria when a plurality of criteria are employed.",
        "When the at least one criterion is satisfied, the successive memory block and the seed are combined, and the combination becomes the resulting seed of the random number generator (22). The combination of the successive memory block and the seed may be accomplished by hashing the successive memory block and the seed but is not limited to that method.",
        "In an embodiment of the invention, the mathematical function of step 16 is:",
        "f(x) = x (mod m) + b\nfor x < b;\n\n\n\nf(x) = x\nfor b \u2266 x \u2266 b + m; and\n\n\n\nf(x) = x (mod m) + b\nfor x > b + m;\n\n\n\n\n\n\n\n\n\n\nwhere x=retrieved number generated by random number generator; b=base memory address; and m=memory size. The base memory address is the address at which the memory available to this embodiment of the invention begins, and the memory size is the size of that available memory.",
        "In an embodiment of the invention, the at least one criterion of step 20 includes an absence of a string of identical bits in said successive data block longer than a specified number of bits. In an embodiment of the invention, that number may the equal to the number of bits in the successive data block.",
        "Turning now to FIG. 2, showing another embodiment of the invention, steps 10, 12, 14, 16, 18, 20, and 22 are as described in connection with FIG. 1. The successive data block retrieved from memory in step 18 is tested for satisfaction of one or more second criteria (20). If the at least one criterion is not satisfied, a determination is made of the number of times steps 14, 16, 18, and 20 have been repeated due to failure to satisfy the at least one criterion (24). If the number of repetitions of steps 14, 16, 18, and 20 is less than a specified number (e.g., two), steps 14, 16, 18, and 20 are repeated. If step 20 determines that the at least one criterion has been satisfied before step 24 determines that the specified number of repetitions has been accomplished, the next step after step 20 is step 22. If step 24 determines that the specified number of repetitions has been accomplished before step 20 determines that the at least one criterion has been satisfied, the next step after step 24 is step 22.",
        "Turning now to FIG. 3, showing an embodiment of the invention, an apparatus includes a memory 26 and a processor 28. The processor 28 is programmed to (a) retrieve a first data block from a memory; (b) initially seed the random number generator using the first data block as a seed; (c) retrieve a number generated by the random number generator; (d) map the number to a memory address in the memory using a mathematical function; (e) retrieve a successive data block from the memory address; and (f) successively seed the random number generator with a combination of the seed and the successive data block such that the combination of the seed and the successive data block becomes the resulting seed.",
        "In an embodiment of the invention, the processor 28 is further programmed to perform the further step, defined as (e\u2032), which is to test, after each performance of (e), for satisfaction of at least one criterion and if the at least one criterion is not satisfied, repeat steps (c), (d), (e), and (e\u2032).",
        "In an embodiment of the invention in which the processor 28 is programmed to perform step (e\u2032) as described above, the processor 28 is further programmed to perform the further step, defined as (e\u2033), which is to check, after each performance of (e\u2032), the number of repetitions of steps (c), (d), (e), and (e\u2032) due to failure to satisfy the at least one criterion and stop the repetitions when a specified number of the repetitions have been performed.",
        "While various embodiments of the present invention have been shown and described, it should be understood that other modifications, substitutions, and alternatives are apparent to one of ordinary skill in the art. Such modifications, substitutions, and alternatives can be made without departing from the spirit and scope of the invention, which should be determined from the appended claims.",
        "Various features of the present invention are set forth in the appended claims."
    ],
    "citations": [
        "5463689",
        "6865660"
    ],
    "us_classification": "380 46",
    "international_classifications": [
        {
            "classification_level": "A",
            "section": "H",
            "classification_class": "04",
            "subclass": "L",
            "main_group": "9",
            "subgroup": "00"
        }
    ]
}