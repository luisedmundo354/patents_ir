{
    "title": "Visual code system for camera-equipped mobile devices and applications thereof",
    "abstract": "A visual code system wherein camera-equipped mobile phones (or similar devices, such as wireless PDAs) are used to identify and decode images that contain one or more \u201cvisual codes.\u201d By recognizing a code tag, the device can determine a bit pattern or an integer number encoded in the tag (the code value), the targeted object or image element, as well as additional parameters, such as the viewing angle of the camera. Code recognition is performed on the mobile device itself. When the mobile device is equipped with a wireless communication channel, it can be used to retrieve online content or to access information on the Internet based on the sensed code and its parameters. The retrieved content can then be presented on the mobile device.",
    "inventors": [
        "Rohs"
    ],
    "document_number": "07296747",
    "publication_date": "20071120",
    "assignees": [],
    "claims": [
        {
            "claim_number": "CLM-00001",
            "preamble": "1. A method for decoding a visual code comprising:",
            "components": [
                {
                    "component": "capturing a visual code image comprising at least one visual code utilizing a mobile device equipped with a digital camera;",
                    "subcomponents": []
                },
                {
                    "component": "grayscaling said visual code image;",
                    "subcomponents": []
                },
                {
                    "component": "thresholding said visual code image;",
                    "subcomponents": []
                },
                {
                    "component": "identifying regions of interest in said visual code image;",
                    "subcomponents": []
                },
                {
                    "component": "calculating the orientations and shapes of the identified regions of interest within said visual code image;",
                    "subcomponents": []
                },
                {
                    "component": "locating said at least one visual code within said visual code image;",
                    "subcomponents": []
                },
                {
                    "component": "computing a first projective mapping of said at least one visual code from a visual code image coordinate system to a visual code coordinate system;",
                    "subcomponents": []
                },
                {
                    "component": "computing a second projective mapping of said at least one visual code from the visual code coordinate system to the visual code image coordinate system;",
                    "subcomponents": []
                },
                {
                    "component": "computing a rotation angle of said at least one visual code located in said visual code image;",
                    "subcomponents": []
                },
                {
                    "component": "computing horizontal and vertical tilting values of said at least one visual code;",
                    "subcomponents": []
                },
                {
                    "component": "computing a distance of said at least one visual code from said mobile device;",
                    "subcomponents": []
                },
                {
                    "component": "reading encoded bits in said at least one visual code to produce at least one decoded value; and",
                    "subcomponents": []
                },
                {
                    "component": "displaying information on the mobile device associated with at least one of the identified regions of interest based on at least one of the at least one decoded value, the first projective mapping, the second projective mapping, the rotation angle, the horizontal tilting value, the vertical tilting value, and the distance.",
                    "subcomponents": []
                }
            ]
        },
        {
            "claim_number": "CLM-00002",
            "preamble": "2. A method for decoding a visual code according to claim 1 , further comprising correcting said visual code image for radial lens distortion prior to grayscaling said visual code image.",
            "components": []
        },
        {
            "claim_number": "CLM-00003",
            "preamble": "3. A method for decoding a visual code according to claim 1 , further comprising performing error detection on said at least one visual code.",
            "components": []
        },
        {
            "claim_number": "CLM-00004",
            "preamble": "4. A method for decoding a visual code according to claim 3 , wherein said error detection is performed utilizing Reed-Solomon error detection.",
            "components": []
        },
        {
            "claim_number": "CLM-00005",
            "preamble": "5. A method for decoding a visual code according to claim 1 , wherein said at least one visual code comprises three cornerstones, a small guide bar, and a large guide bar.",
            "components": []
        },
        {
            "claim_number": "CLM-00006",
            "preamble": "6. A method for decoding a visual code according to claim 5 , wherein an individual visual code is located by identifying said cornerstones, said small guide bar, and said large guide bar.",
            "components": []
        },
        {
            "claim_number": "CLM-00007",
            "preamble": "7. A method for decoding a visual code according to claim 5 , wherein said small guide bar and said large bar are identified by locating regions of said visual code image which have an axis ratio within a predetermined range.",
            "components": []
        },
        {
            "claim_number": "CLM-00008",
            "preamble": "8. A method for decoding a visual code according to claim 5 , wherein said three cornerstones and said large guide bar are located at position (",
            "components": []
        },
        {
            "claim_number": "CLM-00009",
            "preamble": "9. A method for decoding a visual code according to claim 5 , wherein multiple visual codes are arranged in a grid to store data across multiple visual codes and further comprising identifying said grid of codes.",
            "components": []
        },
        {
            "claim_number": "CLM-00010",
            "preamble": "10. A method for decoding a visual code according to claim 1 , wherein said at least one visual code comprises three cornerstones, a small guide bar, and a large guide bar, and wherein an orientation of said small guide bar and said large guide bar are utilized when computing the rotation angle of said at least one visual code, computing the distance of said at least one visual code, and computing the tilting values of said at least one visual code.",
            "components": []
        },
        {
            "claim_number": "CLM-00011",
            "preamble": "11. A method for decoding a visual code according to claim 1 , wherein grayscaling said visual code image is performed by calculating the value of each grayscale pixel by averaging the value of the red and green pixels.",
            "components": []
        },
        {
            "claim_number": "CLM-00012",
            "preamble": "12. A method for decoding a visual code according to claim 11 , wherein said grayscale visual code image is converted to a black and white image using a weight-moving average algorithm.",
            "components": []
        },
        {
            "claim_number": "CLM-00013",
            "preamble": "13. A method for decoding a visual code according to claim 1 , wherein at least one from the group comprising the rotation angle, horizontal tilting value, vertical tilting angle, and distance of said at least one visual code is utilized to select options from a menu.",
            "components": []
        },
        {
            "claim_number": "CLM-00014",
            "preamble": "14. A method for decoding a visual code according to claim 1 , wherein said decoding occurs in real-time.",
            "components": []
        },
        {
            "claim_number": "CLM-00015",
            "preamble": "15. A method for decoding a visual code according to claim 14 , further comprising overlaying a graphic over an image displayed on a screen of the camera wherein said overlayed graphic is geometrically aligned with objects in the image as the mobile device moves and the orientation of said at least one visual code changes.",
            "components": []
        },
        {
            "claim_number": "CLM-00016",
            "preamble": "16. A method for decoding a visual code according to claim 1 , wherein the displayed information is retrieved from a database.",
            "components": []
        },
        {
            "claim_number": "CLM-00017",
            "preamble": "17. A method for decoding a visual code according to claim 16 , wherein said database associates different uniform resource locators with the displayed information.",
            "components": []
        },
        {
            "claim_number": "CLM-00018",
            "preamble": "18. A method for decoding a visual code according to claim 1 , further comprising selecting entries from a form by altering the orientation of said mobile device to said at least one visual code.",
            "components": []
        },
        {
            "claim_number": "CLM-00019",
            "preamble": "19. A method for decoding a visual code according to claim 1 , wherein the displayed information is at least one of a movie plot outline, a video clip, an audio file, and a movie review.",
            "components": []
        },
        {
            "claim_number": "CLM-00020",
            "preamble": "20. A method for decoding a visual code according to claim 1 , wherein said at least one visual code is printed utilizing infrared ink and wherein said digital camera captures said at least one visual code as an at least one infrared visual code.",
            "components": []
        },
        {
            "claim_number": "CLM-00021",
            "preamble": "21. A method for decoding a visual code according to claim 1 , wherein a target point, expressed in the visual code coordinate system of an image displayed on a screen of the camera, is utilized as a parameter to select an entry from a database.",
            "components": []
        },
        {
            "claim_number": "CLM-00022",
            "preamble": "22. A method for decoding a visual code according to claim 1 , wherein pointing said digital camera at said at least one visual code is facilitated by a cross hair that is displayed on a screen of said mobile device.",
            "components": []
        },
        {
            "claim_number": "CLM-00023",
            "preamble": "23. A method for decoding a visual code according to claim 22 , wherein said screen of said mobile device is a touch screen, and wherein the position of said cross hair may be specified by using a stylus to specify a target point.",
            "components": []
        },
        {
            "claim_number": "CLM-00024",
            "preamble": "24. A computer-readable medium storing computer-executable instructions that, when executed by a processor, cause the processor to perform a method for decoding a visual code, the method comprising:",
            "components": [
                {
                    "component": "capturing a visual code image comprising at least one visual code utilizing a mobile device equipped with a digital camera;",
                    "subcomponents": []
                },
                {
                    "component": "grayscaling said visual code image;",
                    "subcomponents": []
                },
                {
                    "component": "thresholding said visual code image;",
                    "subcomponents": []
                },
                {
                    "component": "identifying regions of interest in said visual code image;",
                    "subcomponents": []
                },
                {
                    "component": "calculating the orientations and shapes of the identified regions of interest within said visual code image;",
                    "subcomponents": []
                },
                {
                    "component": "locating said at least one visual code within said visual code image;",
                    "subcomponents": []
                },
                {
                    "component": "computing a first projective mapping of said at least one visual code from a visual code image coordinate system to a visual code coordinate system;",
                    "subcomponents": []
                },
                {
                    "component": "computing a second projective mapping of said at least one visual code from the visual code coordinate system to the visual code image coordinate system;",
                    "subcomponents": []
                },
                {
                    "component": "computing a rotation angle of said at least one visual code located in said visual code image;",
                    "subcomponents": []
                },
                {
                    "component": "computing horizontal and vertical tilting values of said at least one visual code;",
                    "subcomponents": []
                },
                {
                    "component": "computing a distance of said at least one visual code from said mobile device;",
                    "subcomponents": []
                },
                {
                    "component": "reading encoded bits in said at least one visual code to produce at least one decoded value; and",
                    "subcomponents": []
                },
                {
                    "component": "displaying information on the mobile device associated with at least one of the identified regions of interest based on at least one of the at least one decoded value, the first projective mapping, the second projective mapping, the rotation angle, the horizontal tilting value, the vertical tilting value, and the distance.",
                    "subcomponents": []
                }
            ]
        },
        {
            "claim_number": "CLM-00025",
            "preamble": "25. A device for decoding a visual code, comprising:",
            "components": [
                {
                    "component": "a memory;",
                    "subcomponents": []
                },
                {
                    "component": "a digital camera;",
                    "subcomponents": []
                },
                {
                    "component": "a display; and",
                    "subcomponents": []
                },
                {
                    "component": "a processor in communication with the memory, the digital camera, and the display; wherein the processor",
                    "subcomponents": []
                },
                {
                    "component": "captures a visual code image comprising at least one visual code;",
                    "subcomponents": []
                },
                {
                    "component": "grayscales said visual code image;",
                    "subcomponents": []
                },
                {
                    "component": "thresholds said visual code image;",
                    "subcomponents": []
                },
                {
                    "component": "identifies regions of interest in said visual code image;",
                    "subcomponents": []
                },
                {
                    "component": "calculates the orientations and shapes of the identified regions of interest within said visual code image;",
                    "subcomponents": []
                },
                {
                    "component": "locates said at least one visual code within said visual code image;",
                    "subcomponents": []
                },
                {
                    "component": "computes a first projective mapping of said at least one visual code from a visual code image coordinate system to a visual code coordinate system;",
                    "subcomponents": []
                },
                {
                    "component": "computes a second projective mapping of said at least one visual code from the visual code coordinate system to the visual code image coordinate system;",
                    "subcomponents": []
                },
                {
                    "component": "computes a rotation angle of said at least one visual code located in said visual code image;",
                    "subcomponents": []
                },
                {
                    "component": "computes horizontal and vertical tilting values of said at least one visual code;",
                    "subcomponents": []
                },
                {
                    "component": "computes a distance of said at least one visual code from said mobile device;",
                    "subcomponents": []
                },
                {
                    "component": "reads encoded bits in said at least one visual code to produce at least one decoded value; and",
                    "subcomponents": []
                },
                {
                    "component": "displays information associated with at least one of the identified regions of interest based on at least one of the at least one decoded value, the first projective mapping, the second projective mapping, the rotation angle, the horizontal tilting value, the vertical tilting value, and the distance.",
                    "subcomponents": []
                }
            ]
        }
    ],
    "description": [
        "This application claims the benefit of Provisional Application Ser. No. 60/563,669 filed Apr. 20, 2004.",
        "The present invention relates to the field of decoding machine readable codes utilizing camera-equipped mobile devices. More specifically, the present invention discloses a proprietary visual code which is capable of being decoded and utilized by virtually any camera-equipped mobile device.",
        "Barcodes have been utilized for identifying and pricing objects for more than thirty years. Most typically, barcodes are used in retail to identify the item of merchandise. For example, a gallon of milk may contain a barcode that, when scanned, will notify the cashier of the price of the milk.",
        "Yet in recent years, barcodes have acquired new purposes as computers and barcode scanners have become more portable. The circuitry required to scan a conventional one-dimensional barcode can now be housed in a device as small as a typical keychain. As a result, many mobile telephones, personal digital assistants (\u201cPDAs\u201d), and pagers can be retrofitted with or connected to a laser-based scanning device. This allows the mobile device to function as a scanner capable of storing hundreds or thousands of scanned barcodes.",
        "Mobile devices with attached scanners have allowed for the development of a new niche in the wireless electronics business. Some companies have developed software and hardware which allows a user to scan any barcode and be redirected to media information (e.g., a website, product description, price, etc.) about the scanned product. These programs provide a link between the physical and online world which previously did not exist.",
        "However, mobile devices with attached scanners possess some drawbacks which have curtailed their expansion into the mobile marketplace. First, there are few mobile devices produced for the general public that contain integrated laser-based scanners. Therefore, for a user to acquire scanning capability for a mobile device, he/she must purchase additional equipment. The additional scanning equipment also adds size and weight to the mobile device, thereby reducing its mobility.",
        "Currently, many cell phones and mobile devices are available with built-in cameras. The explosion of the availability of affordable digital cameras and their inclusion into mobile devices is driven by several factors. One of the most important is the recent availability of inexpensive image sensors based on CMOS technology. The cameras on these devices provide a means for capturing the barcode information which was previously only accessible via a laser-based scanner. Decoding barcode images from digital cameras included in mobile devices presents several difficult problems. These problems go well beyond the challenges addressed in commercial barcode readers.",
        "Therefore, there clearly exists a need for a visual code system which is capable of being decoded on a camera-equipped mobile device. The visual code system should be able to be decoded from a wide range of angles and distances for use in different applications.",
        "The visual code system of the present invention lets camera-equipped mobile devices act as sensors and decoders for proprietary two-dimensional visual codes. The visual codes can be printed on paper documents, displayed on electronic screens, or attached to physical objects and act as a key to access object-related information and functionality.",
        "Enhancing mobile devices in this manner is promising, because they are in constant reach of their users and are thus available in many everyday situations. They provide continuous wireless connectivity, and models with integrated cameras are becoming more and more popular. The ability to detect objects in the user's immediate vicinity strengthens the role of mobile phones in m-commerce, education, and gaming scenarios. Additionally, it offers a natural way of interaction and makes data entry more convenient.",
        "The visual code system provides the basis for superimposing textual or graphical information over the camera image in near real-time, providing the user with the sense of \u201caugmented reality\u201d. This allows for a wide assortment of application possibilities in situations where information is to be closely linked to physical objects. An example is the maintenance of devices or apparatuses in the field. For example, individual parts of an apparatus may be associated with different visual codes. By decoding different visual codes, graphical information, which is aligned with the items in the image, can be superimposed over the camera image. Further application possibilities include showing maintenance instructions, ordering spare parts, checking a maintenance schedule, etc. Other closely related applications include convenient order placing in mail-order catalogs, entering reference numbers in online banking applications, linking up-to-date online content to newspapers, supporting mobile marketing advertising campaigns, integration with TV commercials, vote-now, or buy-now TV spots, booking tickets for events, and simplifying interaction with the mobile device itself.",
        "The key features of the visual code system of the present invention are a built-in orientation-independent coordinate system, rotation angle determination, tilting determination, and distance determination that enable a large number of applications, such as item selection and form entry. The recognition algorithm precisely determines the coordinates of a targeted point relative to the coordinate system that is defined by the visual code. The coordinates are independent of the orientation, tilting, or rotation of the visual code in the camera image. This allows the application to associate each point on the viewed image (and therefore arbitrarily shaped areas) with information and with specific operations. In this manner, a single visual code can be associated with multiple such areas (e.g., the individual cells of a table or elements and regions of an image).",
        "The recognition algorithm provides the rotation angle of the visual code in the camera image as an additional input parameter. This can be employed to simplify the interaction with the mobile device. Simply by changing the orientation of the mobile device, different information is displayed, without requiring any interactions via the keypad. Horizontal and vertical tilting is used as an additional input parameter in the same manner as described above (i.e., associating different information with different tilting angles). The mapping between the image coordinate system and the code coordinate system is also used to un-warp projective distortion in the camera image, which allows the automatic capture of form elements. Individual fields of the printed form are un-warped to remove the distortion and thus prepare them for further processing, such as transmitting them to an online server.",
        "New interaction possibilities open up when mobile phones or PDAs are enhanced to act as sensors for real-world objects. The gap between the physical world surrounding the user and the virtual world is narrowed by offering a natural way of \u201cpicking up\u201d data in everyday situations. Information becomes collocated with physical entities and is thus situated and grounded in the real-world context. Mobile phones are in an excellent position to contribute to this vision, because they are ubiquitously available devices, constantly within reach of the user. The short interaction time required for recognizing codes is crucial for usability in a mobile setting. It does not require much effort on behalf of the user and takes just a few seconds.",
        "There are many application scenarios which could take advantage of using visual codes: In mail-order catalogs, items could be selected by scanning visual codes to conveniently place orders. In online banking applications, long reference codes or transaction numbers often need to be manually copied from printed forms. Visual codes and mobile phones could replace expensive dedicated devices which perform this task. In newspapers, visual codes could be used to store or rate newspaper articles, to get background information related to an advertisement, or for updates on information which quickly gets obsolete, like stock quotes and weather forecasts. Using the code coordinate system, it is possible to define printed image maps with predefined sensitive areas that are associated with online content. In this way, a single code can be associated with multiple items: For example, areas on a geographic map could be linked to weather forecasts corresponding to those regions and each row in a printed table containing stock quotes could be linked to a chart which is displayed on the phone.",
        "In the emerging area of mobile marketing, visual codes could be used to simplify SMS campaigns and SMS lotteries. In an advertising campaign Coca Cola printed code numbers on the labels of 160 million soft-drink bottles. By sending a number via SMS, customers got logos, ring tones, and greeting cards, and could take part in a lottery. 5.9 million SMS messages were sent, which corresponds to a response ratio of 3.7%. Using visual codes would make the process more convenient for the user and might result in even higher attendance in such campaigns, which would be commercially very interesting.",
        "The proposed 2-dimensional codes are also suitable for display on electronic screens, such as computer monitors, TV screens, public wall displays, and even on the tiny screens of handheld devices. Questionnaires, surveys, and polls on TV (like selecting the best candidate of a TV show) could be realized by overlaying visual codes over the screen image. This idea also has commercial implications. The music company Polydor used SMS as a mobile response channel in a TV spot advertising a CD. Viewers could order the CD via SMS prior to the official release date, which immediately increased sales figures. Again, using visual codes, the response ratio might be substantially increased. Camera-equipped mobile phones are not only capable of retrieving an object ID, but can also be used for more complex forms of interaction. Our code recognition system also provides the phone's orientation, amount of rotation, and coordinates of the image center.",
        "Therefore, it is an object of the present invention to provide a visual code system which utilizes an orientation-independent coordinate system that is defined by a visual code and the associated recognition algorithm that determines the coordinates of a targeted point in the camera image relative to that coordinate system.",
        "It is an additional object of the present invention to provide a visual code system which associates multiple regions of an image with a single code, wherein each region is linked to different online information and operations associated with the different regions.",
        "Yet another object of the present invention is to provide a visual code system which includes a rotation determination feature, a vertical and horizontal tilting determination feature, and a distance determination feature, which allows different rotation, tilting, and distance values to be associated with different information.",
        "Another object of the present invention is to utilize the visual code system of the present invention for item selection, information display in textual, graphical (e.g. on the screen of the mobile device or on a nearby electronic display), auditory (e.g., via the mobile device's speaker, headset or earphone), or tactile form (e.g., via phone vibration), and triggering specific operations.",
        "An additional object of the present invention is to provide an application in which textual or graphical feedback is superimposed on the camera image itself and correctly aligned (\u201cregistered\u201d) with the items present in the image, thereby giving the user a sense of \u201caugmented reality.\u201d",
        "A further object of the present invention is to provide an application wherein the visual code system is used in conjunction with printed forms for convenient data entry.",
        "These and other objects of the present invention will be made clearer with reference to the following detailed description and accompanying drawings.",
        "FIG. 1 depicts an example of the visual code and its novel features.",
        "FIG. 2 depicts a flowchart showing the steps utilized by a camera-equipped mobile device to decode a visual code.",
        "FIG. 3 depicts a flowchart showing the steps utilized by the code location step of FIG. 2.",
        "FIG. 4 depicts an example of a printed document containing visual codes.",
        "FIG. 5 depicts another example of a printed document containing visual codes.",
        "FIG. 6 depicts an example form for the entry of calendar events.",
        "The following presents a detailed description of a preferred embodiment (as well as some alternative embodiments) of the present invention. However, it should be apparent to one skilled in the art that the described embodiment may be modified in form and content to be optimized for a wide variety of situations.",
        "With reference first to FIG. 1, shown is an example of visual code 101 utilized in the present invention. Visual code 101 consists of large guide bar 103 and small guide bar 105 for determining the location and orientation of visual code 101, three cornerstones 107, 109, and 111, for detecting distortion and the data area with the actual code bits. The displayed version of visual code 101 has a capacity of 83 bits, but its design is generic and suitable for extension to a larger number of bits. Visual code 101 can be reliably located even in a low quality image which is small and tilted.",
        "Visual code 101 may be printed utilizing either standard ink or infrared ink. If infrared ink is utilized to print visual code 101, the digital camera must be capable of identifying infrared images. Infrared ink has the advantage that visual code 101 would not be visible to the naked eye. Therefore, if the algorithm of the present invention were constantly running in the background whenever the digital camera of a mobile device was being used, the decoding of visual code 101 could be utilized to make certain information appear.",
        "The three cornerstones 107, 109, and 111 define the coordinate system induced by the code. Cornerstone 107 is located at the origin, or position (0,0). Similarly, cornerstone 109 is said to be located at position (10,0) while cornerstone 111 is located at position (0,10). In this coordinate system, the center of large guide bar 103 is located at position (10,5) while the center of small guide bar 105 is located at position (8,10). The code requires a white space of a single code element around the code (1 unit in the code coordinate system). Multiple visual codes may be printed next to each other, for example arranged in a grid. A white space of a single code element around two neighboring codes (1 unit in the code coordinate system) is required.",
        "Next, with reference to FIG. 2, shown is a flowchart depicting the steps utilized by a camera-equipped mobile device to decode visual code 101. First, the image captured by the digital camera is corrected for radial distortion in step 201. The image obtained from the digital camera typically shows some amount of barrel distortion. However, radial lens distortion is less an issue with newer phone cameras, especially if the code only occupies a small area of the image. It is corrected by shifting each pixel radially towards the center of the image. The displacement only depends on the distance of the pixel from the image center and not on the particular image to be corrected. The following correction function produces adequate results (w and h are the pixel width and pixel height of the image, respectively, r is the distance from the image center, and \u03ba is a constant that reflects the amount of radial distortion of the lens):",
        "r\n    =\n    \n      \n        \n          \n            (\n            \n              \n                x\n                distorted\n              \n              -\n              \n                w\n                /\n                2\n              \n            \n            )\n          \n          2\n        \n        +\n        \n          \n            (\n            \n              \n                y\n                distorted\n              \n              -\n              \n                h\n                /\n                2\n              \n            \n            )\n          \n          2\n        \n      \n    \n  \n\n\n\n\n  \n    \n      x\n      undistorted\n    \n    =\n    \n      \n        \n          (\n          \n            \n              x\n              distorted\n            \n            -\n            \n              w\n              /\n              2\n            \n          \n          )\n        \n        \u2062\n        \n          (\n          \n            1\n            +\n            \n              \u03ba\n              \u2062\n              \n                \n              \n              \u2062\n              \n                r\n                2\n              \n            \n          \n          )\n        \n      \n      +\n      \n        w\n        /\n        2\n      \n    \n  \n\n\n\n\n  \n    \n      y\n      undistorted\n    \n    =\n    \n      \n        \n          (\n          \n            \n              y\n              distorted\n            \n            -\n            \n              h\n              /\n              2\n            \n          \n          )\n        \n        \u2062\n        \n          (\n          \n            1\n            +\n            \n              \u03ba\n              \u2062\n              \n                \n              \n              \u2062\n              \n                r\n                2\n              \n            \n          \n          )\n        \n      \n      +\n      \n        h\n        /\n        2\n      \n    \n  \n\n\n\nFor the integrated camera of the Nokia 7650, \u03ba=6\u00d710\u22127 was found acceptable by manual testing. For the newer Nokia 6600, 7610, and 6630, no correction was necessary. Even for the Nokia 7650, code recognition works without correction.",
        "Step 201 is optional, because a single visual code typically only covers a small area of the camera image. In this case, radial lens distortion is not significant. However, for some applications, like those involving precise selection of items in the camera image, this step may increase accuracy.",
        "Next, the image undergoes grayscaling and adaptive thresholding in step 203 because the three color channels in the image often differ in their sharpness and contrast quality. Therefore, the algorithm uses the formula gray (red+green)/2 instead of the more straightforward version gray=(red+green+blue)/3 or the ITU-standardized formula for luminance Y=0.2126 red+0.7152 green+0.0722 blue. This formula is computationally efficient and produces an adequate starting point for thresholding.",
        "An adaptive method is taken to produce a black-and-white version of the gray scaled image, because the brightness of the camera image is not constant and the printed code may be unevenly illuminated. The algorithm uses a (weighted) moving average of the gray values while traversing the image in a snake-like fashion. The average gs(n) is updated according to the formula:",
        "g\n      s\n    \n    \u2061\n    \n      (\n      n\n      )\n    \n  \n  =\n  \n    \n      \n        \n          g\n          s\n        \n        \u2061\n        \n          (\n          \n            n\n            -\n            1\n          \n          )\n        \n      \n      \u00b7\n      \n        (\n        \n          1\n          -\n          \n            1\n            s\n          \n        \n        )\n      \n    \n    +\n    \n      p\n      r\n    \n  \n\n\n\n\nwith pn denoting the gray value of the current pixel and s the width of the moving average. gs is initialized with s(0)=\u00bdCS g, where c is the maximum possible gray value. The color of the thresholded pixel T(n) is then chosen based on the formula:",
        "T\n    \u2061\n    \n      (\n      n\n      )\n    \n  \n  =\n  \n    {\n    \n      \n        \n          \n            1\n            ,\n            \n              \n                if\n                \u2062\n                \n                  \n                \n                \u2062\n                \n                  p\n                  n\n                \n              \n              <\n              \n                \n                  \n                    \n                      g\n                      s\n                    \n                    \u2061\n                    \n                      (\n                      n\n                      )\n                    \n                  \n                  s\n                \n                \u00b7\n                \n                  \n                    100\n                    -\n                    t\n                  \n                  100\n                \n              \n            \n          \n        \n      \n      \n        \n          \n            0\n            ,\n            otherwise\n          \n        \n      \n    \n  \n\n\n\n\nThe recommended values for t and s are t=15 and",
        "s\n    =\n    \n      \n        1\n        8\n      \n      \u2062\n      w\n    \n  \n  ,\n\n\n\n\nwhere w is the width of the image.",
        "After the image has undergone grayscaling in step 203, the algorithm next attempts to identify and label the different regions of the image in step 205. This step consists of finding regions of neighboring black pixels, counting them, and assigning a number to each. The algorithm used is a well known two-phase method. In the first phase, the image is traversed row by row, assigning preliminary labels to the regions found. During this process, it may happen that two regions with different labels turn out to be in fact the same region. In this case, the equivalence of the two temporary labels is stored in a table. The second phase resolves the equivalences by merging the corresponding regions and assigns a final label to each region.",
        "Next, the algorithm calculates the different regions' shapes and orientations in step 207. In order to identify candidates for orientation bars among the regions found, the notion of second-order moments is used. The second-order moments of a region consisting of the set of pixels R and having the center of gravity ( x, y) are defined as follows:",
        "\u03bc\n      xx\n    \n    =\n    \n      \n        1\n        \n          \uf603\n          R\n          \uf604\n        \n      \n      \u2062\n      \n        \n          \u2211\n          \n            \n              (\n              \n                x\n                ,\n                y\n              \n              )\n            \n            \u2208\n            R\n          \n        \n        \u2062\n        \n          \n            (\n            \n              x\n              -\n              \n                x\n                _\n              \n            \n            )\n          \n          2\n        \n      \n    \n  \n\n\n\n\n  \n    \n      \u03bc\n      yy\n    \n    =\n    \n      \n        1\n        \n          \uf603\n          R\n          \uf604\n        \n      \n      \u2062\n      \n        \n          \u2211\n          \n            \n              (\n              \n                x\n                ,\n                y\n              \n              )\n            \n            \u2208\n            R\n          \n        \n        \u2062\n        \n          \n            (\n            \n              y\n              -\n              \n                y\n                _\n              \n            \n            )\n          \n          2\n        \n      \n    \n  \n\n\n\n\n  \n    \n      \u03bc\n      xy\n    \n    =\n    \n      \n        1\n        \n          \uf603\n          R\n          \uf604\n        \n      \n      \u2062\n      \n        \n          \u2211\n          \n            \n              (\n              \n                x\n                ,\n                y\n              \n              )\n            \n            \u2208\n            R\n          \n        \n        \u2062\n        \n          \n            (\n            \n              x\n              -\n              \n                x\n                _\n              \n            \n            )\n          \n          \u2062\n          \n            (\n            \n              y\n              -\n              \n                y\n                _\n              \n            \n            )\n          \n        \n      \n    \n  \n\n\n\n\n  \n    where\n    ,\n    \n      \n\n    \n    \u2062\n    \n      \n        x\n        _\n      \n      =\n      \n        \n          1\n          \n            \uf603\n            R\n            \uf604\n          \n        \n        \u2062\n        \n          \n            \u2211\n            \n              \n                (\n                \n                  x\n                  ,\n                  y\n                \n                )\n              \n              \u2208\n              R\n            \n          \n          \u2062\n          x\n        \n      \n    \n  \n\n\n\n\n  \n    \n      y\n      _\n    \n    =\n    \n      \n        1\n        \n          \uf603\n          R\n          \uf604\n        \n      \n      \u2062\n      \n        \n          \u2211\n          \n            \n              (\n              \n                x\n                ,\n                y\n              \n              )\n            \n            \u2208\n            R\n          \n        \n        \u2062\n        y",
        "From these moments, an ellipsis E={(x,y)|dx2+2exy+fy2\u22661} that has the same major and minor axis as the region can be defined by setting:",
        "(\n    \n      \n        \n          d\n        \n        \n          e\n        \n      \n      \n        \n          e\n        \n        \n          f\n        \n      \n    \n    )\n  \n  =\n  \n    \n      1\n      \n        \n          4\n          \u2062\n          \n            \u03bc\n            xx\n          \n          \u2062\n          \n            \u03bc\n            yy\n          \n        \n        -\n        \n          \u03bc\n          xy\n          2\n        \n      \n    \n    \u2062\n    \n      (\n      \n        \n          \n            \n              \u03bc\n              yy\n            \n          \n          \n            \n              -\n              \n                \u03bc\n                xy\n              \n            \n          \n        \n        \n          \n            \n              -\n              \n                \u03bc\n                xy\n              \n            \n          \n          \n            \n              \u03bc\n              xx\n            \n          \n        \n      \n      )\n    \n  \n\n\n\n\nThe ratio of the lengths of the major and the minor axis is a good measure for the \u201ceccentricity\u201d of the region: perfect circles and squares have a ratio equal to one whereas line segments have a ratio close to zero. This is very useful for identifying regions with a bar-like shape. Furthermore, the orientation vector of the major axis of the region can be calculated as:",
        "(\n      \n        \n          \n            \n              \n                -\n                sin\n              \n              \u2062\n              \n                \n              \n              \u2062\n              \u03b1\n            \n          \n        \n        \n          \n            \n              cos\n              \u2062\n              \n                \n              \n              \u2062\n              \u03b1\n            \n          \n        \n      \n      )\n    \n    \u2062\n    \n      \n    \n    \u2062\n    where\n    \u2062\n    \n      \n    \n    \u2062\n    \u03b1\n  \n  =\n  \n    \n      1\n      2\n    \n    \u2062\n    \n      arctan\n      \u2061\n      \n        (\n        \n          \n            2\n            \u2062\n            e\n          \n          \n            d\n            -\n            f\n          \n        \n        )",
        "Once the shapes and orientations of the different regions have been identified, the algorithm performs the step of locating and evaluating the visual codes in step 209. Locating codes in the image is done by looking for guide bar candidates and by finding corresponding cornerstones. Guide bar candidates are found by simply selecting those regions which have a small enough axis ratio (e.g. below 0.05). For each of these candidates, the size and orientation of the region is used to estimate the expected positions of small guide bar 105 and the three cornerstones 107, 109, and 111. It is then checked whether these features are actually present at the estimated positions. Cornerstone candidates found are only accepted if their axis ratio is above a certain limit (as stated earlier, theoretically they should have a ratio equal to one). If any of the code features (cornerstones 107, 109, and 111, and small guide bar 105) is not present for some guide bar candidate, this particular candidate is abandoned and the next one is examined.",
        "Now, with reference to FIG. 3, shown is a flowchart showing the steps utilized by code location step 209 of FIG. 2. First, the algorithm computes the projective mapping from code coordinates to image coordinates (and the inverse mapping from image coordinates to code coordinates) in step 303. Once a guide bar candidate with all code features has been found, the algorithm assumes that this is indeed a code in the image and starts to read the encoded bits. To that end, the bit positions in the image must be determined, i.e. one needs a function that maps each code bit to an image pixel. Since the code elements are coplanar, there exists a unique homography (projective transformation matrix) between the code plane and the image plane. The projective mapping can be calculated once four corresponding points are known. In the algorithm, the correspondences are the centers of the three cornerstones 107, 109, and 111 plus the center of the small guide bar 105. This induces a code coordinate system with its origin at the upper left corner of the code.",
        "The code coordinates of the upper left cornerstone 107, the upper right cornerstone 109, large guide bar 103, and the lower left cornerstone 111 are defined to be at (0,0), (10,0), (8,10), and (0,10). It is assumed that these elements have been found at image coordinates (xi,yi), i\u03b5{0, . . . , 3}, respectively. A code coordinate (u,v), u,v \u03b5{0, . . . , 10}, is mapped to image coordinate (x,y), where",
        "x\n    =\n    \n      \n        au\n        +\n        bv\n        +\n        \n          10\n          \u2062\n          c\n        \n      \n      \n        gu\n        +\n        hv\n        +\n        10\n      \n    \n  \n  ,\n  \n    y\n    =\n    \n      \n        du\n        +\n        ev\n        +\n        \n          10\n          \u2062\n          f\n        \n      \n      \n        gu\n        +\n        hv\n        +\n        10\n      \n    \n  \n\n\n\n\nThe parameters a to h are calculated from the four reference points (xi, yi), i\u03b5{0, . . . , 3}, as follows:",
        "\u0394\n      \u2062\n      \n        \n      \n      \u2062\n      \n        x\n        1\n      \n    \n    =\n    \n      \n        \n          x\n          1\n        \n        -\n        \n          \n            x\n            2\n          \n          \u2062\n          \n            \n          \n          \u2062\n          \u0394\n          \u2062\n          \n            \n          \n          \u2062\n          \n            y\n            1\n          \n        \n      \n      =\n      \n        \n          \n            y\n            1\n          \n          -\n          \n            \n              y\n              2\n            \n            \u2062\n            \n              \n            \n            \u2062\n            \u0394\n            \u2062\n            \n              \n            \n            \u2062\n            \n              x\n              2\n            \n          \n        \n        =\n        \n          \n            \n              x\n              3\n            \n            -\n            \n              \n                x\n                2\n              \n              \u2062\n              \n                \n              \n              \u2062\n              \u0394\n              \u2062\n              \n                \n              \n              \u2062\n              \n                y\n                2\n              \n            \n          \n          =\n          \n            \n              y\n              3\n            \n            -\n            \n              y\n              2\n            \n          \n        \n      \n    \n  \n\n\n\n\n  \n    \n      \u03a3\n      \u2062\n      \n        \n      \n      \u2062\n      x\n    \n    =\n    \n      \n        \n          0.8\n          \u2062\n          \n            x\n            0\n          \n        \n        -\n        \n          0.8\n          \u2062\n          \n            x\n            1\n          \n        \n        +\n        \n          x\n          2\n        \n        -\n        \n          \n            x\n            3\n          \n          \u2062\n          \n            \n          \n          \u2062\n          \u03a3\n          \u2062\n          \n            \n          \n          \u2062\n          y\n        \n      \n      =\n      \n        \n          0.8\n          \u2062\n          \n            y\n            0\n          \n        \n        -\n        \n          0.8\n          \u2062\n          \n            y\n            1\n          \n        \n        +\n        \n          y\n          2\n        \n        -\n        \n          y\n          3\n        \n      \n    \n  \n\n\n\n\n  \n    g\n    =\n    \n      \n        \n          \u03a3\n          \u2062\n          \n            \n          \n          \u2062\n          x\n          \u2062\n          \n            \n          \n          \u2062\n          \u0394\n          \u2062\n          \n            \n          \n          \u2062\n          \n            y\n            2\n          \n        \n        -\n        \n          \u03a3\n          \u2062\n          \n            \n          \n          \u2062\n          y\n          \u2062\n          \n            \n          \n          \u2062\n          \u0394\n          \u2062\n          \n            \n          \n          \u2062\n          \n            x\n            2\n          \n        \n      \n      \n        \n          \u0394\n          \u2062\n          \n            \n          \n          \u2062\n          \n            x\n            1\n          \n          \u2062\n          \u0394\n          \u2062\n          \n            \n          \n          \u2062\n          \n            y\n            2\n          \n        \n        -\n        \n          \u0394\n          \u2062\n          \n            \n          \n          \u2062\n          \n            y\n            1\n          \n          \u2062\n          \u0394\n          \u2062\n          \n            \n          \n          \u2062\n          \n            x\n            2\n          \n        \n      \n    \n  \n\n\n\n\n  \n    h\n    =\n    \n      \n        \n          \u03a3\n          \u2062\n          \n            \n          \n          \u2062\n          y\n          \u2062\n          \n            \n          \n          \u2062\n          \u0394\n          \u2062\n          \n            \n          \n          \u2062\n          \n            x\n            1\n          \n        \n        -\n        \n          \u03a3\n          \u2062\n          \n            \n          \n          \u2062\n          x\n          \u2062\n          \n            \n          \n          \u2062\n          \u0394\n          \u2062\n          \n            \n          \n          \u2062\n          \n            y\n            1\n          \n        \n      \n      \n        \n          \u0394\n          \u2062\n          \n            \n          \n          \u2062\n          \n            x\n            1\n          \n          \u2062\n          \u0394\n          \u2062\n          \n            \n          \n          \u2062\n          \n            y\n            2\n          \n        \n        -\n        \n          \u0394\n          \u2062\n          \n            \n          \n          \u2062\n          \n            y\n            1\n          \n          \u2062\n          \u0394\n          \u2062\n          \n            \n          \n          \u2062\n          \n            x\n            2\n          \n        \n      \n    \n  \n\n\n\n\n  \n    a\n    =\n    \n      \n        x\n        1\n      \n      -\n      \n        x\n        0\n      \n      +\n      \n        gx\n        1\n      \n    \n  \n\n\n\n\n  \n    b\n    =\n    \n      \n        x\n        3\n      \n      -\n      \n        x\n        0\n      \n      +\n      \n        hx\n        3\n      \n    \n  \n\n\n\n\n  \n    c\n    =\n    \n      \n        \n          x\n          0\n        \n        \u2062\n        \n          \n        \n        \u2062\n        f\n      \n      =\n      \n        y\n        0\n      \n    \n  \n\n\n\n\n  \n    d\n    =\n    \n      \n        y\n        1\n      \n      -\n      \n        y\n        0\n      \n      +\n      \n        gy\n        1\n      \n    \n  \n\n\n\n\n  \n    e\n    =\n    \n      \n        y\n        3\n      \n      -\n      \n        y\n        0\n      \n      +\n      \n        hy\n        3\n      \n    \n  \n\n\n\nThe inverse mapping to the one described above is important for applications which select items visible in the image. Given a pixel coordinate, its corresponding coordinate in the coordinate system induced by the code can thus be obtained. An image coordinate (x,y) is mapped to a code coordinate (u,v) as follows:",
        "u\n      =\n      \n        10\n        \u00b7\n        \n          \n            Ax\n            +\n            By\n            +\n            C\n          \n          \n            Gx\n            +\n            Hy\n            +\n            I\n          \n        \n      \n    \n    ,\n    \n      v\n      =\n      \n        10\n        \u00b7\n        \n          \n            Dx\n            +\n            Ey\n            +\n            F\n          \n          \n            Gx\n            +\n            Hy\n            +\n            I\n          \n        \n      \n    \n    ,\n    with\n  \n\n\n\n\n  \n    A\n    =\n    \n      e\n      -\n      fh\n    \n  \n\n\n\n\n  \n    B\n    =\n    \n      ch\n      -\n      b\n    \n  \n\n\n\n\n  \n    C\n    =\n    \n      bf\n      -\n      ce\n    \n  \n\n\n\n\n  \n    D\n    =\n    \n      fg\n      -\n      d\n    \n  \n\n\n\n\n  \n    E\n    =\n    \n      a\n      -\n      cg\n    \n  \n\n\n\n\n  \n    F\n    =\n    \n      cd\n      -\n      af\n    \n  \n\n\n\n\n  \n    G\n    =\n    \n      dh\n      -\n      eg\n    \n  \n\n\n\n\n  \n    H\n    =\n    \n      bg\n      -\n      ah\n    \n  \n\n\n\n\n  \n    I\n    =\n    \n      ae\n      -\n      bd",
        "The algorithm next computes the rotation angle of the visual code in the image in step 305. It takes on values between 0\u00b0 and 359\u00b0. A code that has the same orientation as the image has rotation angle 0\u00b0. The rotation is determined by mapping the points (0,0) and (100,0) from the code coordinate system to the image coordinate system, resulting in the image points (ax, ay), and (bx, by). The rotation angle is then determined as:",
        "\u03b1\n  =\n  \n    arctan\n    \u2062\n    \n      \n        {\n        \n          \n            (\n            \n              \n                a\n                y\n              \n              -\n              \n                b\n                y\n              \n            \n            )\n          \n          /\n          \n            (\n            \n              \n                a\n                x\n              \n              -\n              \n                b\n                x\n              \n            \n            )\n          \n        \n        }\n      \n      \u00b7\n      \n        180\n        \u03c0\n      \n    \n  \n\n\n\n\nthough several special cases have to be considered.",
        "After the rotation angle of the visual code has been computer, the algorithm next determines the horizontal and vertical tilting in step 307. The term \u201ctilting\u201d denotes the amount of inclination of the image plane relative to the code plane. \u201cHorizontal tilting\u201d is the amount of inclination of the image plane relative to the horizontal axis of the visual code. Analogously, \u201cvertical tilting\u201d denotes the amount of inclination of the image plane relative to the vertical axis of the visual code. A tilting value of 1 means no tilting, a value less than 1 means tilting towards the left/top, and a value greater than 1 means tilting towards the right/bottom. The tilting parameters are computed as follows: Four image points with constant distance h (image height) from the image center point in the axis directions of the code coordinate system are computed. They are mapped to corresponding code coordinates and their distances to the center point are computed. The ratios of these distances determine the tilting parameters tx and ty. They are independent of the size of the code in the image. From these ratios the tilting angles tx\u03b1 and $ty\u03b1 can be determined, if a constant r is known that depends on the camera parameters. It can be obtained experimentally.",
        "i\n    =\n    \n      image\n      \u2062\n      \n        \n      \n      \u2062\n      coordinates\n      \u2062\n      \n        \n      \n      \u2062\n      of\n      \u2062\n      \n        \n      \n      \u2062\n      the\n      \u2062\n      \n        \n      \n      \u2062\n      image\n      \u2062\n      \n        \n      \n      \u2062\n      center\n      \u2062\n      \n        \n      \n      \u2062\n      point\n    \n  \n\n\n\n\n  \n    c\n    =\n    \n      CodeCoordinates\n      \u2061\n      \n        (\n        i\n        )\n      \n    \n  \n\n\n\n\n  \n    x\n    =\n    \n      \n        ImageCoordinates\n        \u2061\n        \n          (\n          \n            c\n            +\n            \n              (\n              \n                1\n                ,\n                0\n              \n              )\n            \n          \n          )\n        \n      \n      -\n      i\n    \n  \n\n\n\n\n  \n    y\n    =\n    \n      \n        ImageCoordinates\n        \u2061\n        \n          (\n          \n            c\n            +\n            \n              (\n              \n                0\n                ,\n                1\n              \n              )\n            \n          \n          )\n        \n      \n      -\n      i\n    \n  \n\n\n\n\n  \n    u\n    =\n    \n      x\n      /\n      \n        \uf603\n        x\n        \uf604\n      \n    \n  \n\n\n\n\n  \n    v\n    =\n    \n      y\n      /\n      \n        \uf603\n        y\n        \uf604\n      \n    \n  \n\n\n\n\n  \n    l\n    =\n    \n      \uf603\n      \n        \n          CodeCoordinates\n          \u2061\n          \n            (\n            \n              i\n              -\n              hu\n            \n            )\n          \n        \n        -\n        c\n      \n      \uf604\n    \n  \n\n\n\n\n  \n    r\n    =\n    \n      \uf603\n      \n        \n          CodeCoordinates\n          \u2061\n          \n            (\n            \n              i\n              +\n              hu\n            \n            )\n          \n        \n        -\n        c\n      \n      \uf604\n    \n  \n\n\n\n\n  \n    t\n    =\n    \n      \uf603\n      \n        \n          CodeCoordinates\n          \u2061\n          \n            (\n            \n              i\n              -\n              hv\n            \n            )\n          \n        \n        -\n        c\n      \n      \uf604\n    \n  \n\n\n\n\n  \n    b\n    =\n    \n      \uf603\n      \n        \n          CodeCoordinates\n          \u2061\n          \n            (\n            \n              i\n              +\n              hv\n            \n            )\n          \n        \n        -\n        c\n      \n      \uf604\n    \n  \n\n\n\n\n  \n    \n      t\n      x\n    \n    =\n    \n      l\n      /\n      r\n    \n  \n\n\n\n\n  \n    \n      t\n      y\n    \n    =\n    \n      t\n      /\n      b\n    \n  \n\n\n\n\n  \n    \n      t\n      x\n      \u03b1\n    \n    =\n    \n      arctan\n      \u2061\n      \n        (\n        \n          r\n          \u2062\n          \n            \n          \n          \u2062\n          \n            \n              \n                t\n                x\n              \n              -\n              1\n            \n            \n              \n                t\n                x\n              \n              +\n              1\n            \n          \n        \n        )\n      \n    \n  \n\n\n\n\n  \n    \n      t\n      y\n      \u03b1\n    \n    =\n    \n      arctan\n      \u2061\n      \n        (\n        \n          r\n          \u2062\n          \n            \n          \n          \u2062\n          \n            \n              \n                t\n                y\n              \n              -\n              1\n            \n            \n              \n                t\n                y\n              \n              +\n              1\n            \n          \n        \n        )",
        "Next, in step 308, the algorithm computes the distance of the code from the camera. If the real code size Sreal (the distance between the centers of the upper left and the upper right cornerstones of the printed code) and the camera's focal distance f are known, then the metric distance from the camera to the untilted visual code can be computed from simage (the pixel distance between the centers of the upper cornerstones in the camera image) using the pinhole model as (wimage is the pixel width of the image)",
        "D\n    \n      camera\n      ,\n      code\n    \n  \n  =\n  \n    \n      \n        \n          s\n          real\n        \n        \u00d7\n        f\n      \n      \n        \n          s\n          image\n        \n        /\n        \n          w\n          image\n        \n      \n    \n    .",
        "Since sreal and f are typically not known and we want to use the code distance for interaction purposes rather than measuring its exact value, we define the distance in terms of the size of the visual code in the image. We set dcamera,code:=100 for the farthest distance at which a code is recognized in view finder mode. For typical devices this is the case when simage=25 pixels, which amounts to 15.625% of the image width. Hence the distance is computed as",
        "d\n    \n      camera\n      ,\n      code\n    \n  \n  =\n  \n    \n      15.625\n      \n        \n          s\n          image\n        \n        /\n        \n          w\n          image\n        \n      \n    \n    .",
        "Should Sreal and f be known, the metric distance can still be computed from dcamera,code.",
        "It should be obvious to one skilled in the art that steps 303, 305, 307, 308, and 309 can be performed in any order because each step is discrete and outputs a different parameter or result.",
        "Once the positions of the guide bars 103 and 105 and cornerstones 107, 109, and 111 have been identified and a suitable projective mapping (from code coordinates to image coordinates) has been computed, the algorithm reads the encoded bits in step 309 by simply testing the appropriate pixels (x,y) of the black-and-white image, using code coordinates (u,v) with u,v\u03b5{0, . . . , 10} and (x,y)=ImageCoordinates((u,v)).",
        "Error detection may optionally be performed in step 311. The (83,76,3) linear code employed encodes a 76-bit ID to an 83-bit codeword. The resulting hamming distance is three, which should be sufficient to identify wrong codes with a high probability. Alternatively, other error detecting or error correcting codes, such as Reed-Solomon codes, might be used for increased reliability and robustness against bit errors. This might come at the expense of slightly higher processing times and a lower number of bits actually available for data storage. As an example, 15 bits of the raw 83 bits might be used for Reed-Solomon error correcting codes, leaving 68 bits for data storage.",
        "Applications of the Algorithm",
        "A. Rotation Angle and Tilting Determination",
        "In addition to the code coordinate of the image center, the recognition algorithm provides the orientation of the mobile device relative to the code. In particular, the algorithm provides the rotation of the code in the image, the viewing position (from left, from right, from top, from bottom), the amount of tilting of the image plane relative to the code plane, and the distance from the code to the camera. The projective mapping (planar homography) between the image plane and the code plane that the recognition algorithm implements, allows the mapping of arbitrary points given in image coordinates to corresponding points in code coordinates and vice versa.\n\nB. Item Selection\n\nThe code coordinate system and the orientation determination features enable a number of interesting application scenarios involving the selection of items in printed documents. An example is the selection of articles depicted in printed mail-order catalogs. A single code is sufficient as long as the code coordinates of the items are known. This can be achieved by content creation software that creates \u201cimage maps\u201d for the code and its associated sensitive areas. Articles in mail-order catalogs can thus be scanned, stored in the mobile device, and current information concerning the articles can be retrieved. The order can then be placed using the wireless communication channel provided by the mobile device.",
        "For example, in FIG. 4, shown is an example of a printed document containing visual codes. The regions on the map and the entries in the table are individually mapped to different URLs and thus associated to online content.",
        "In newspapers, online background information to articles, advertisements, or information which quickly gets obsolete, like weather forecasts or stock quotes, can be linked via visual codes. By using the code coordinate system, a single code located near several items of interest suffices. The exact area aimed at, like the local weather forecast, can be determined via the projective mapping by computing the vertical and horizontal distances to the visual code element. In a table of stock quotes, the row and column aimed at, and thus the desired information, can be obtained in the same manner. FIG. 4 shows a cut-out of a newspaper page containing a geographic map with the current weather data and a table containing the snow heights for various regions. The dotted lines drawn on the newspaper page indicate sensitive areas that are individually linked to online content. Such a mapping can be created with suitable content creation software. As a prototype, we developed a mapping tool which allows to draw the areas into the image and to specify the associated URL for each region. The tool computes the coordinates of these areas in the coordinate systems of the codes present in the image, and stores this data as an XML file. Multiple URLs can be specified for each region by taking into account further parameters that are provided by the code system, such as rotation and tilting. As shown in FIG. 4, a single code suffices to select the area and table entries, respectively. By rotating the mobile device, different aspects of the online information can be chosen: In the example, vertical orientation shows the snow depth for the selected area, while a slight rotation shows the current temperature.",
        "As another application, visual codes can be used in mobile marketing to automate the input of coupon numbers into the mobile device. An example are SMS campaigns of soft-drink producers: The soft-drink bottles contain numbers (represented by visual codes), which can be sent as an SMS and thus allow the participation in lotteries. On TV, visual codes could be used for interactive input of answers to multiple choice questions in ad hoc surveys and quizzes or for the selection of candidates in a TV show. The code coordinates and the orientation of the device can serve as additional input parameters (in addition to the code value), for example to answer a multiple choice question.",
        "Further application possibilities concern simplifying the interaction with the mobile device itself. Telephone numbers, for example, can be encoded as visual codes and printed on business cards or in phone books. Depending on the orientation of the code in the image, the device either immediately calls the encoded phone number, stores the virtual business card in the device's memory, or\u2014for mobile phone numbers\u2014starts the device's SMS editing application. Parts of the device's user interface, like deeply nested menus, can be externalized by associating them with a visual code and printing them on paper or showing them on a large screen.",
        "A further possible application scenario of the presented invention is adding online content and operations to printed documents, like flyers, magazines, etc. An example online operation is selling tickets for events, theaters, or movies via the mobile phone.",
        "FIG. 5. shows a page of a printed television magazine, which is equipped with embedded visual codes. By aiming at the printed visual codes, movie plot outlines can be shown, a list of the cast can be given, movie ratings can be displayed or submitted, movie trailers can be started, and tickets can be directly booked via the mobile phone.",
        "C. Form Entry",
        "Visual codes can also be combined with printed forms for the simplification of form input, in which the mobile device provides a wireless communication channel for conveniently and cheaply sending back the entered data. The fields of these forms can be check boxes, rulers, and canvas fields for free-hand textual or graphical input. Using the frame surrounding the form as a marker, the individual form elements can be precisely localized. The projective mapping of the recognition algorithm allows to \u201cunwarp\u201d parts of the image as well as the image as a whole.",
        "FIG. 6 shows an example form for the entry of calendar events. The recognition algorithm first recognizes the code and locates the edges of the frame. Then the checkboxes located in the form are scanned for check marks. Finally, the canvas fields are \u201cunwarped\u201d, i.e. their tilting is removed as shown in the lower part of FIG. 6, and stored.",
        "To define the forms, a markup language is used, which describes the structure of a form, including the positions and kinds of input elements it contains. The code is first used as a key to retrieve the form description from an online server. After interpreting the retrieved markup, user input can be categorized according to field type and sent back to the server."
    ],
    "citations": [
        "4238768",
        "4323973",
        "4554593",
        "4578766",
        "4692603",
        "4728783",
        "4754127",
        "4774569",
        "4782221",
        "4874936",
        "4896029",
        "4969202",
        "4998010",
        "5016118",
        "5103490",
        "5113454",
        "5153418",
        "5179599",
        "5189292",
        "5223701",
        "5235172",
        "5243443",
        "5243444",
        "5243655",
        "5276315",
        "5327240",
        "5331442",
        "5345317",
        "5510604",
        "5621203",
        "5691773",
        "5767978",
        "5778092",
        "5783811",
        "5811781",
        "5852677",
        "5862270",
        "5877486",
        "5890021",
        "5909505",
        "5915039",
        "5963669",
        "5969325",
        "6045515",
        "6082619",
        "6091511",
        "6101285",
        "6115488",
        "6115508",
        "6137898",
        "6201612",
        "6201901",
        "6282307",
        "6347156",
        "6366696",
        "6371373",
        "6418244",
        "6431452",
        "6446868",
        "6512919",
        "6565003",
        "6585157",
        "6604682",
        "6631012",
        "6631843",
        "6650766",
        "6674919",
        "6735341",
        "6735745",
        "6752317",
        "6802450",
        "6832729",
        "6837432",
        "6898329",
        "2001/0041581",
        "2002/0071076",
        "2002/0084330",
        "2002/0090107",
        "2002/0102966",
        "2002/0187774",
        "2003/0007696",
        "2003/0074286",
        "2003/0123710",
        "2004/0042670",
        "2004/0101183",
        "2004/0240737",
        "2005/0035206",
        "2005/0121521",
        "2005/0198095",
        "WO-2005/020140",
        "WO-2005/062234"
    ],
    "us_classification": "23546208",
    "international_classifications": [
        {
            "classification_level": "A",
            "section": "G",
            "classification_class": "06",
            "subclass": "K",
            "main_group": "5",
            "subgroup": "04"
        }
    ]
}