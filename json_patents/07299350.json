{
    "title": "Internet protocol security decryption with secondary use speculative interrupts",
    "abstract": "A system for improved decryption performance includes a computer in electronic communication with an encrypted network. A controller performs a decryption operation on an encrypted packet received from the network, and the computer asserts an interrupt prior to the system completing transfer of the decrypted packet back to host memory to reduce the additional latency a packet suffers during Secondary Use. An additional interrupt may be asserted after the Secondary Use operation is complete, to ensure that the Secondary Use packet is processed. A method for improving decryption performance similarly includes asserting an interrupt prior to the complete transfer of a decrypted packet from a controller back to host memory during Secondary Use. The method may further include asserting an additional interrupt after the Secondary Use operation is complete, to ensure that the Secondary Use packet is processed.",
    "inventors": [
        "Connor",
        "Minnick"
    ],
    "document_number": "07299350",
    "publication_date": "20071120",
    "assignees": [
        "Intel Corporation"
    ],
    "claims": [
        {
            "claim_number": "CLM-00001",
            "preamble": "1. A computing system for performing a decryption operation on an encrypted packet, comprising:",
            "components": [
                {
                    "component": "a network driver to regulate said decryption operation and to transmit a decryption command;",
                    "subcomponents": []
                },
                {
                    "component": "a host memory to store the encrypted packet;",
                    "subcomponents": []
                },
                {
                    "component": "a controller to receive the encrypted packet and to perform said decryption operation after receiving said decryption command from the network driver;",
                    "subcomponents": []
                },
                {
                    "component": "a network interface to specify an interrupt handler latency value to the controller, said interrupt handler latency value being based on a specific number of bytes being decrypted in the controller;",
                    "subcomponents": []
                },
                {
                    "component": "a bus providing electronic communication among said network driver, said host memory and said controller, said controller asserting an interrupt and after the specific number of bytes have been decrypted in the controller and before the decrypted packet is transferred back from the controller to the host memory.",
                    "subcomponents": []
                }
            ]
        },
        {
            "claim_number": "CLM-00002",
            "preamble": "2. A method of decrypting an encrypted packet received by a computing system, comprising:",
            "components": [
                {
                    "component": "receiving said encrypted packet from a network and transferring said encrypted packet to a host memory;",
                    "subcomponents": []
                },
                {
                    "component": "issuing a decryption command to a controller;",
                    "subcomponents": []
                },
                {
                    "component": "specifying an interrupt handler latency value to the controller, the interrupt handler latency value being based on a specific number of bytes being decrypted in the controller;",
                    "subcomponents": []
                },
                {
                    "component": "transferring said encrypted packet to said controller;",
                    "subcomponents": []
                },
                {
                    "component": "converting said encrypted packet to a decrypted packet; and",
                    "subcomponents": []
                },
                {
                    "component": "transferring said decrypted packet to the host memory, wherein an interrupt is asserted after the specific number of bytes have been decrypted in the controller and before the decrypted packet has been transferred from the controller to the host memory.",
                    "subcomponents": []
                }
            ]
        },
        {
            "claim_number": "CLM-00003",
            "preamble": "3. The method of claim 2 , wherein the encrypted packet is transferred to the host memory via direct memory access (DMA).",
            "components": []
        },
        {
            "claim_number": "CLM-00004",
            "preamble": "4. The method of claim 2 , further including a network driver to parse the encrypted packet at the network interface, match the encrypted packet with a corresponding security association, and to instruct that the corresponding security association is transferred to the controller with the encrypted packet.",
            "components": []
        },
        {
            "claim_number": "CLM-00005",
            "preamble": "5. A program code storage device, comprising:",
            "components": [
                {
                    "component": "a machine-readable storage medium; and",
                    "subcomponents": []
                },
                {
                    "component": "machine-readable program code, stored on the machine-readable storage medium, the machine-readable program code having instructions that when executed cause a computer system to;",
                    "subcomponents": []
                },
                {
                    "component": "receive an encrypted packet from a network and transfer said encrypted packet to a host memory;",
                    "subcomponents": []
                },
                {
                    "component": "issue a decryption command to a controller;",
                    "subcomponents": []
                },
                {
                    "component": "specify an interrupt handler latency value to the controller, the interrupt handler latency value being based on a specific number of bytes being decrypted in the controller;",
                    "subcomponents": []
                },
                {
                    "component": "transfer said encrypted packet to said controller;",
                    "subcomponents": []
                },
                {
                    "component": "convert said encrypted packet to a decrypted packet; and",
                    "subcomponents": []
                },
                {
                    "component": "transfer said decrypted packet to the host memory, wherein an interrupt is asserted after the specific number of bytes have been decrypted in the controller and before the decrypted packet has been transferred from the controller to the host memory.",
                    "subcomponents": []
                }
            ]
        },
        {
            "claim_number": "CLM-00006",
            "preamble": "6. The device of claim 5 , wherein the encrypted packet is transferred to the host memory via direct memory access (DMA).",
            "components": []
        },
        {
            "claim_number": "CLM-00007",
            "preamble": "7. The device of claim 5 , further including a network driver to parse the encrypted packet at the network interface, match the encrypted packet with a corresponding security association, and to instruct that the corresponding security association is transferred to the controller with the encrypted packet.",
            "components": []
        },
        {
            "claim_number": "CLM-00008",
            "preamble": "8. A method of decrypting an encrypted packet received by a network interface in a computing system, comprising:",
            "components": [
                {
                    "component": "receiving said encrypted packet from a network and transferring said encrypted packet to a host memory;",
                    "subcomponents": []
                },
                {
                    "component": "issuing a decryption command to a controller;",
                    "subcomponents": []
                },
                {
                    "component": "specifying an interrupt handler latency value to the controller, the interrupt handler latency value being based on a specific number of bytes being decrypted in the controller; and",
                    "subcomponents": []
                },
                {
                    "component": "transferring said encrypted packet to said controller which converts the encrypted packet to a decrypted packet and transfers the decrypted packet to the host memory, wherein an interrupt is asserted after a specific number of bytes have been decrypted in the controller and before the decrypted packets have been transferred from the controller to the host memory.",
                    "subcomponents": []
                }
            ]
        },
        {
            "claim_number": "CLM-00009",
            "preamble": "9. The method of claim 8 , wherein the encrypted packet is transferred to the host memory via direct memory access (DMA).",
            "components": []
        },
        {
            "claim_number": "CLM-00010",
            "preamble": "10. The method of claim 8 , further including a network driver to parse the encrypted packet at the network interface, match the encrypted packet with a corresponding security association, and to instruct that the corresponding security association is transferred to the controller with the encrypted packet.",
            "components": []
        },
        {
            "claim_number": "CLM-00011",
            "preamble": "11. A program code storage device, comprising:",
            "components": [
                {
                    "component": "a machine-readable storage medium; and",
                    "subcomponents": []
                },
                {
                    "component": "machine-readable program code, stored on the machine-readable storage medium, the machine-readable program code having instructions that when executed cause a network interface to:",
                    "subcomponents": []
                },
                {
                    "component": "receive an encrypted packet from a network and transfer said encrypted packet to a host memory;",
                    "subcomponents": []
                },
                {
                    "component": "issue a decryption command to a controller;",
                    "subcomponents": []
                },
                {
                    "component": "specify an interrupt handler latency value to the controller, the interrupt handler latency value being based on a specific number of bytes being decrypted in the controller; and",
                    "subcomponents": []
                },
                {
                    "component": "transfer said encrypted packet to said controller which converts the encrypted packet to a decrypted packet and transfers the decrypted packet to the host memory, wherein an interrupt is asserted after a specific number of bytes have been decrypted in the controller and before the decrypted packets have been transferred from the controller to the host memory.",
                    "subcomponents": []
                }
            ]
        },
        {
            "claim_number": "CLM-00012",
            "preamble": "12. The device of claim 11 , wherein the encrypted packet is transferred to the host memory via direct memory access (DMA).",
            "components": []
        },
        {
            "claim_number": "CLM-00013",
            "preamble": "13. The device of claim 11 , further including a network driver to parse the encrypted packet at the network interface, match the encrypted packet with a corresponding security association, and to instruct that the corresponding security association is transferred to the controller with the encrypted packet.",
            "components": []
        }
    ],
    "description": [
        "1. Field of the Invention",
        "The present invention generally relates to encrypted networks. More particularly, the present invention relates to a system and method for improving the performance of an encrypted network by asserting interrupts to reduce latency that packets suffer during Secondary Use.",
        "2. Discussion of the Related Art",
        "Internet Protocol Security (\u201cIPSec\u201d) is employed to protect both the confidentiality and integrity of data that is transferred on a network. Because IPSec provides a way to encrypt and decrypt data below the transport layer (e.g., Transmission Control Protocol, \u201cTCP\u201d or User Datagram Protocol, \u201cUDP\u201d), the protection is transparent to applications that transfer data. Thus, no alterations are required at the application level in order to utilize IPSec. However, when implemented in software, the algorithms used for encryption, decryption, and authentication of the data for IPSec require execution of numerous CPU cycles. Because many CPU cycles must be delegated to such cryptography operations, there are correspondingly fewer CPU cycles available to applications and other parts of the protocol stack. This configuration adds latency to received data reaching the application, thereby decreasing the throughput of the system.",
        "One current solution to this problem is to offload the cryptography operations to an external piece of hardware, such as a Network Interface Card (\u201cNIC\u201d). Generally, the most efficient way to offload such operations is to encrypt the data immediately before transmitting a packet, and to decrypt the data directly off the network before the packet is direct memory access (\u201cDMA\u201d) transferred to host memory. This process of decrypting and authenticating ingress data before it is transferred to host memory is known as \u201cInline Receive.\u201d",
        "An alternative to Inline Receive is the \u201cSecondary Use\u201d model. In this latter model, received packets are DMA transferred into host memory. The network driver then parses each packet to match it with its corresponding Security Association (\u201cSA\u201d), which is a data structure that contains all information necessary to encrypt, decrypt and/or authenticate a packet. Where a cryptography accelerator is included, the driver instructs the NIC to transfer the packet across the bus to the controller, perform the cryptography operation on the packet, and then transfer the packet back to host memory. The packet is thus transferred across the bus three times: (1) upon receipt from the network through the NIC across the bus and into host memory; (2) upon transfer from the host memory across the bus to the controller; and (3) upon transfer from the controller across the bus back to host memory.",
        "An extra interrupt is often required to perform these transfers across the bus. However, such interrupts increase CPU utilization. Furthermore, the extra latency introduced can degrade throughput of protocols that are sensitive to the round trip time of packets, such as TCP.",
        "From a performance perspective (both CPU utilization and throughput), Inline Receive is generally considered a better solution than Secondary Use. However, Inline Receive is more expensive to implement because the keys and matching information for cryptography operations must be stored on the network interface in an SA cache. Due to such limitations, the INTEL PRO/100 S Server Adapter, for example, supports only a limited number of connections that can use Inline Receive. Other connections use the Secondary Use model to offload secure traffic, though Secondary Use adds latency to packets at several steps. The primary source of the increased latency for Secondary Use is the delay related to the final interrupt of the Secondary Use operation.",
        "Early ingress interrupts have been used on low speed buses where the transfer operation was expensive. The device typically transfers the header portion of the packet to host memory and then assert an interrupt. The header portion is used to determine if there was interest in transferring the rest of the packet to host memory. If not, the rest of the packet would be discarded. This scheme avoided burdening the bus with unnecessary data.",
        "With the advent of busmasters in peripheral component interconnect (\u201cPCI\u201d), this use of early interrupts for any traffic has become scarce. In fact, to accommodate the high packet rates of high-speed networks such as Gigabit Ethernet, most input/output (\u201cI/O\u201d) controller devices offer interrupt coalescing features that delay interrupt assertions to allow several interrupt events to be processed in one occurrence of the interrupt handler. When Secondary Use is utilized extensively, sending packets across the PCI bus three times reduces the bus bandwidth available. This utilization, in turn, reduces the packet rate that can be processed, further reducing or eliminating the utility of the interrupt coalescing algorithms.",
        "Accordingly, there is a need for a system and method of improving the performance of an encrypted network by asserting interrupts to reduce latency that packets suffer during Secondary Use.",
        "FIG. 1 illustrates a block diagram of an encrypted network system in accordance with an embodiment of the present invention;",
        "FIG. 2 illustrates critical path events in accordance with an embodiment of the present invention;",
        "FIG. 3 illustrates critical path events in accordance with prior art, conventional Secondary Use decryption; and",
        "FIG. 4 illustrates a flow chart corresponding to an implementation of the logic according to an embodiment of the present invention.",
        "The present invention provides systems and methods for reducing the latency of the final interrupt of a Secondary Use process. This scheme is preferably accomplished by signaling the \u201cSecondary Use complete\u201d interrupt before the Secondary Use operation is fully complete, thereby allowing the associated Interrupt Handler Latency to overlap with the completion of the Secondary Use operation itself",
        "As depicted in FIG. 1, a preferred encrypted network system of the present invention may include a computing system 100 with a network driver 130, a controller 120, a network interface 160 with a cryptography accelerator, a bus 150, and host memory 110 with at least one SA stored thereupon, and may further be connected to an encrypted network 140. The network interface 160 is preferably a NIC, a component on the motherboard, or in the chip set itself. The computing system 100 is preferably a computer, and may receive an encrypted packet from the encrypted network 140. Upon receipt of this packet, the computing system 100 may DMA transfer the packet through the network interface 160 and across the bus 150 to host memory 110. The network driver 130 may then parse the packet, match the packet with a corresponding SA, and instruct the network interface 160 to transfer the packet and corresponding SA across the bus 150 to the controller 120 for decryption. The controller 120 may then decrypt and authenticate the packet, whereupon the decrypted packet is transferred back across the bus 150 to host memory 110. The packet is thus transferred across the bus 150 three times.",
        "This configuration is further illustrated in FIG. 2, which indicates the critical path events of the aforementioned system. In a preferred embodiment of the present invention, an encrypted packet is received 201 and DMA transferred 202 to host memory. The driver may then parse the packet, match the packet with a corresponding SA, and instruct the network interface to transfer the packet and corresponding SA to the controller for Secondary Use decryption 203. The packet may then be decrypted by the controller 204 and authenticated 205. Notably, to this point the Secondary Use operation of the present invention may be similar to a conventional Secondary Use operation, as depicted in FIG. 3 (i.e., critical path events 201-205 of the present invention may be similar to conventional critical path events 301-305).",
        "As depicted in FIG. 3, however, conventional Secondary Use operations include an Interrupt Handler Latency 308, because the Secondary Use interrupt is asserted 307 only after the decrypted packet is transferred back to host memory 306. However, as depicted in FIG. 2, Interrupt Handler Latency is either eliminated or substantially reduced in embodiments of the present invention because the interrupt is most preferably asserted prior to completing the transfer of the decrypted packet to host memory 206. Thus, in the present invention, the Interrupt Handler Latency most preferably occurs in parallel with the transfer of the packet 206. Both conventional Secondary Use operations and the Secondary Use operations of the present invention may then terminate with indicating the decrypted packet to a protocol stack (309 and 207, respectively).",
        "The present invention further provides a method for improving the performance of a computing system in communication with an encrypted network. The method may include receiving an encrypted packet from a network and DMA transferring the packet to host memory. The packet may then be parsed, matched with a corresponding SA, and transferred along with the corresponding SA to a controller for decryption. The packet may next be decrypted, authenticated, and transferred back to host memory. An interrupt is preferably asserted prior to transfer of the decrypted packet back to host memory being complete.",
        "Another method of the present invention reduces interrupt handler latency. As depicted in FIG. 4, the method may be a Secondary Use operation that includes first issuing a Secondary Use decryption command to a controller 401, such that the controller determines the appropriate time for issuance of a \u201cSecondary Use complete\u201d interrupt in response 402. An appropriate time is preferably any time between issuance of the Secondary Use decryption command and completion of transfer of the decrypted packet to host memory. The method may further include transferring a packet with corresponding SA to the controller 403. The controller may decrypt and authenticate the packet 404. The packet may then be transferred back to host memory 405, and the Secondary Use operation may then be complete 406. As indicated in FIG. 4, most preferably, the Secondary Use complete interrupt is issued at any point during operation 403-406, depending on the determination made by the controller 402.",
        "To underscore the benefits of the present invention, Table 1 illustrates the latencies associated with various decryption methodologies.",
        "TABLE 1\n\n\n\n\n\n\n\nTotal Latencies of Various Decryption Methodologies\n\n\n\n\n\n\n\n\n\n\n\n\nClear Traffic Path\n\nConventional\nSecondary Use of\n\n\n\n(no encryption)\nInline Receive Path\nSecondary Use\nPresent Invention\n\n\n\nTime (\u03bcsec)\nTime (\u03bcsec)\nTime (\u03bcsec)\nTime (\u03bcsec)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReceive Packet\n13\n13\n13\n13\n\n\nTransfer to Host\n8\n\u2014\n8\n8\n\n\nInterrupt and\n40\n\u2014\n40\n40\n\n\nHandler Latency\n\n\nParse Packet and\n\u2014\n\u2014\n1\n1\n\n\nIssue Secondary Use\n\n\nCommand\n\n\nTransfer Packet and\n\u2014\n\u2014\n8\n8\n\n\nSA to Controller\n\n\nDecrypt Packet\n\u2014\n19\n19\n19\n\n\nTransfer Packet to\n\u2014\n8\n8\n8\n\n\nHost\n\n\nInterrupt Handler\n\u2014\n40\n40\n\u2014\n\n\nLatency\n\n\nIndication\n4\n4\n4\n4\n\n\nTotal Latency\n65\n84\n141\n101",
        "Average Interrupt Handler Latency may be determined by the controller through the common \u201cfloat and jump\u201d adaptive algorithm, or other appropriate methodologies known in the art, as described in Example 1, below. Once calculated, this value may be used in embodiments of the present invention to determine when a Secondary Use complete interrupt should be asserted (i.e., how long before completing transfer of a decrypted packet back to host memory). In preferred embodiments of the present invention, the network driver specifies the Average Interrupt Handler Latency value as part of the Secondary Use decryption command. In this manner, the network driver is free to utilize any algorithm desired to best determine this value. For example, the Secondary Use command could indicate that the interrupt should be asserted after 1,000 bytes have been transferred to the controller (during step 403); after 600 bytes have been decrypted (during step 404); or after 200 bytes have been transferred back to host memory (during step 405). Referring again to FIG. 2 and FIG. 4, the Secondary Use complete interrupt is most preferably asserted during the intervals 203-206 and 403-406, respectively. In embodiments of the present invention where the Interrupt Handler Latency is relatively high and a relatively small amount of data is being decrypted, the completion interrupt may even be asserted before the data to be decrypted is completely on-chip and before the decryption operation begins.",
        "Several of the stages in the preferred Secondary Use operations of the present invention do not have fixed time values. For example, the time that it takes to transfer a packet across a bus depends upon determinate values, such as the particular bus clock speed and width. It also depends upon bus availability, which can change depending on other devices in the system and their individual bus activity level. The Interrupt Handler Latency value itself is not fixed, however.",
        "Given that there are multiple indeterminable factors, a race condition may be created in some embodiments of the present invention. Accordingly, in some instances, the interrupt handler operation could begin when the Secondary Use operation has not yet completed, such that the interrupt handler has no tasks to process. Therefore, in most preferred embodiments of the present invention, an additional interrupt is asserted after the Secondary Use operation is complete. This scheme ensures that the Secondary Use packet will be processed. If the Interrupt Handler is operating when this additional interrupt is asserted by the device, then this additional interrupt will not generate a system interrupt because the device interrupts are preferably disabled while the Interrupt Handler is operating. This means that in most instances, an additional interrupt will be masked and not increase the interrupt load on the system.",
        "Decryption engines process data at a rate of approximately 600 Megabits per second (\u201cMbit/sec\u201d). The latency from the device Interrupt Request line (\u201cIRQ\u201d) to interrupt processing is based on measurements on INTEL PENTIUM III Processor and INTEL PENTIUM 4 Processor systems using a MICROSOFT WINDOWS 2000 Operating System. Notably, the value of this latency does not change significantly with processor speed.",
        "The latency effect on TCP peak throughput is based on the bandwidth-delay product. Thus, maximum TCP throughput is the quotient of the receiver's window size divided by round trip time. The round trip time for a connection can be estimated from the latency values in Table 1; the latency values being doubled to account for the return of an acknowledgement. Assuming few or no infrastructure delays, and a 64K byte receiver's window (largest currently allowed without window scaling), the maximum throughput is estimated.",
        "A single clear TCP connection generates about 500 Mbit of traffic at most. However, as more connections are added, the latencies suffered by each connection are increased. Correspondingly, throughput of an individual connection decreases while overall server throughput increases. It generally takes at least eight TCP connections to generate a gigabit of throughput.",
        "Referring to the decryption methodologies outlined in Table 1, a single TCP connection using Inline Receive generates approximately 400 Mbit/sec; a conventional Secondary Use connection generates approximately 230 Mbit/sec; and the Secondary Use of the present invention generates approximately 320 Mbit/sec.",
        "Thus, Inline Receive is generally a preferred method of decryption, since it allows the greatest throughput, but this decryption methodology cannot always be used due either to design choices or limited SA cache. However, the Secondary Use operation of the present invention performs significantly better than conventional Secondary Use methods.",
        "While the description above refers to particular embodiments of the present invention, it will be understood that many modifications may be made without departing from the spirit thereof The accompanying claims are intended to cover such modifications as would fall within the true scope and spirit of the present invention. The presently disclosed embodiments are therefore to be considered in all respects as illustrative and not restrictive, the scope of the invention being indicated by the appended claims, rather than the foregoing description, and all changes that come within the meaning and range of equivalency of the claims are therefore intended to be embraced therein."
    ],
    "citations": [
        "5412782",
        "5802153",
        "5905874",
        "6016513",
        "6112252",
        "6148082",
        "6243787",
        "6304911",
        "6385727",
        "6715005",
        "6718413",
        "6754755",
        "WO 01/05086"
    ],
    "us_classification": "713151",
    "international_classifications": [
        {
            "classification_level": "A",
            "section": "H",
            "classification_class": "04",
            "subclass": "L",
            "main_group": "9",
            "subgroup": "00"
        }
    ]
}