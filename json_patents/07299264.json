{
    "title": "System and method for monitoring a connection between a server and a passive client device",
    "abstract": "A system and method for monitoring a connection between a server and a passive client device is disclosed. The method comprises continuously monitoring whether an input data stream of an existing connection between the server and the client device is empty, and if so, determining the presence of a request for a new connection between the server and the passive client device, closing the existing connection in response to the presence of the request for new connection, and establishing the new connection. The system comprises a server operable to continuously monitor whether there is a problem in an existing connection between the server and a passive client device, and if so, determining the presence of a request for a new connection between the server and the client device, the server further operable to close the existing connection and establish the new connection between the server and the passive client device.",
    "inventors": [
        "Yang-Huffman"
    ],
    "document_number": "07299264",
    "publication_date": "20071120",
    "assignees": [
        "Hewlett-Packard Development Company, L.P."
    ],
    "claims": [
        {
            "claim_number": "CLM-00001",
            "preamble": "1. A method for monitoring a connection between a server and a passive client device, comprising:",
            "components": [
                {
                    "component": "continuously monitoring whether an input data stream of an existing connection between said server and said passive client device is empty, and if so, determining the presence of a request for a new connection between said server and said passive client device;",
                    "subcomponents": []
                },
                {
                    "component": "closing said existing connection in response to the presence of said request for new connection; and",
                    "subcomponents": []
                },
                {
                    "component": "establishing said new connection between said server and said passive client device.",
                    "subcomponents": []
                }
            ]
        },
        {
            "claim_number": "CLM-00002",
            "preamble": "2. The method of claim 1 , further comprising processing data from said input data stream in response to said input data stream not being empty.",
            "components": []
        },
        {
            "claim_number": "CLM-00003",
            "preamble": "3. The method of claim 1 , further comprising determining the presence of a problem in said existing connection.",
            "components": []
        },
        {
            "claim_number": "CLM-00004",
            "preamble": "4. The method of claim 1 , further comprising determining the presence of at least one exception condition out of a plurality of exception conditions.",
            "components": []
        },
        {
            "claim_number": "CLM-00005",
            "preamble": "5. The method of claim 4 , wherein said at least one exception condition is selected from the group consisting of an IOException and a SocketException.",
            "components": []
        },
        {
            "claim_number": "CLM-00006",
            "preamble": "6. The method of claim 1 , further comprising receiving said request for said new connection from said passive client device.",
            "components": []
        },
        {
            "claim_number": "CLM-00007",
            "preamble": "7. The method of claim 1 , further comprising storing said request for said new connection in a socket connection queue.",
            "components": []
        },
        {
            "claim_number": "CLM-00008",
            "preamble": "8. The method of claim 1 , wherein said passive client device comprises a Transmission Control Protocol (TCP) device.",
            "components": []
        },
        {
            "claim_number": "CLM-00009",
            "preamble": "9. The method of claim 1 , wherein said request for said new connection is a request for a new TCP connection.",
            "components": []
        },
        {
            "claim_number": "CLM-00010",
            "preamble": "10. The method of claim 1 , wherein said existing connection is a TCP connection.",
            "components": []
        },
        {
            "claim_number": "CLM-00011",
            "preamble": "11. A method for monitoring a connection between a server and a passive client device, comprising:",
            "components": [
                {
                    "component": "determining, after the lapse of a user-defined time period, whether an input data stream of an existing connection between said server and said passive client device is empty, and if so, determining the presence of a request for a new connection between said server and said passive client device in response to said input data stream being empty;",
                    "subcomponents": []
                },
                {
                    "component": "closing said existing connection in response to the presence of said request for new connection; and",
                    "subcomponents": []
                },
                {
                    "component": "establishing said new connection between said server and said passive client device.",
                    "subcomponents": []
                }
            ]
        },
        {
            "claim_number": "CLM-00012",
            "preamble": "12. The method of claim 11 , further comprising processing data from said input data stream in response to said input data stream not being empty.",
            "components": []
        },
        {
            "claim_number": "CLM-00013",
            "preamble": "13. The method of claim 11 , further comprising determining the presence of a problem in said existing connection.",
            "components": []
        },
        {
            "claim_number": "CLM-00014",
            "preamble": "14. The method of claim 11 , further comprising determining the presence of at least one exception condition out of a plurality of exception conditions.",
            "components": []
        },
        {
            "claim_number": "CLM-00015",
            "preamble": "15. The method of claim 14 , wherein said at least one exception condition is selected from the group consisting of an IOException and a SocketException.",
            "components": []
        },
        {
            "claim_number": "CLM-00016",
            "preamble": "16. The method of claim 11 , further comprising receiving said request for said new connection from said passive client device.",
            "components": []
        },
        {
            "claim_number": "CLM-00017",
            "preamble": "17. The method of claim 11 , further comprising storing said request for said new connection in a socket connection queue.",
            "components": []
        },
        {
            "claim_number": "CLM-00018",
            "preamble": "18. The method of claim 11 , wherein said passive client device comprises a Transmission Control Protocol (TCP) device.",
            "components": []
        },
        {
            "claim_number": "CLM-00019",
            "preamble": "19. The method of claim 11 , wherein said request for said new connection is a request for a new TCP connection.",
            "components": []
        },
        {
            "claim_number": "CLM-00020",
            "preamble": "20. The method of claim 11 , wherein said existing connection is a TCP connection.",
            "components": []
        },
        {
            "claim_number": "CLM-00021",
            "preamble": "21. A method for monitoring a connection between a server and a passive client device, comprising:",
            "components": [
                {
                    "component": "continuously monitoring whether there is a problem in an existing connection between said server and said passive client device, and if so, determining the presence of a request for a new connection between said server and said passive client device;",
                    "subcomponents": []
                },
                {
                    "component": "closing said existing connection in response to the presence of said request for new connection; and",
                    "subcomponents": []
                },
                {
                    "component": "establishing said new connection between said server and said passive client device.",
                    "subcomponents": []
                }
            ]
        },
        {
            "claim_number": "CLM-00022",
            "preamble": "22. The method of claim 21 , further comprising determining the presence of at least one exception condition out of a plurality of exception conditions.",
            "components": []
        },
        {
            "claim_number": "CLM-00023",
            "preamble": "23. The method of claim 22 , wherein at least one of said plurality of exception conditions is selected from the group consisting of an IOException and a SocketException.",
            "components": []
        },
        {
            "claim_number": "CLM-00024",
            "preamble": "24. A method for monitoring a connection between a server and a passive client device, comprising:",
            "components": [
                {
                    "component": "determining, by said server without communicating with said passive client device, the presence of a problem in an existing connection between said server and said passive client device;",
                    "subcomponents": []
                },
                {
                    "component": "determining the presence of a request for a new connection between said server and said passive client device in response to the presence of said problem in said existing connection;",
                    "subcomponents": []
                },
                {
                    "component": "closing said existing connection in response to the presence of said request for new connection; and",
                    "subcomponents": []
                },
                {
                    "component": "establishing said new connection between said server and said passive client device.",
                    "subcomponents": []
                }
            ]
        },
        {
            "claim_number": "CLM-00025",
            "preamble": "25. The method of claim 24 , further comprising determining the presence of at least one exception condition out of a plurality of exception conditions.",
            "components": []
        },
        {
            "claim_number": "CLM-00026",
            "preamble": "26. The method of claim 25 , wherein at least one of said plurality of exception conditions is selected from the group consisting of an IOException and a SocketException.",
            "components": []
        },
        {
            "claim_number": "CLM-00027",
            "preamble": "27. A system for monitoring a connection, comprising:",
            "components": [
                {
                    "component": "a passive client device operable to generate a request for a new connection; and",
                    "subcomponents": []
                },
                {
                    "component": "a server operable to continuously monitor whether an input data stream of an existing connection between said server and said passive client device is empty, and if so, determining the presence of said request for new connection between said server and said passive client device, said server further operable to close said existing connection and establish said new connection between said server and said passive client device.",
                    "subcomponents": []
                }
            ]
        },
        {
            "claim_number": "CLM-00028",
            "preamble": "28. The system of claim 27 , said server being further operable to determine the presence of a problem in said existing connection.",
            "components": []
        },
        {
            "claim_number": "CLM-00029",
            "preamble": "29. The system of claim 27 , wherein said request for said new connection is a request for a new Transmission Control Protocol (TCP) connection and said existing connection is a TCP socket connection.",
            "components": []
        },
        {
            "claim_number": "CLM-00030",
            "preamble": "30. The system of claim 27 , wherein said passive client device comprises a TCP device.",
            "components": []
        },
        {
            "claim_number": "CLM-00031",
            "preamble": "31. The system of claim 27 , wherein said passive client device does not provide status information to said server, wherein said status information is selected from the group consisting of status information for said passive client device and status information for said existing connection.",
            "components": []
        },
        {
            "claim_number": "CLM-00032",
            "preamble": "32. A system for monitoring a connection, comprising:",
            "components": [
                {
                    "component": "a server operable to continuously monitor whether there is a problem in an existing connection between said server and a passive client device, and if so, determining the presence of a request for a new connection between said server and said passive client device, said server further operable to close said existing connection and establish said new connection between said server and said passive client device.",
                    "subcomponents": []
                }
            ]
        },
        {
            "claim_number": "CLM-00033",
            "preamble": "33. The system of claim 32 , wherein said request for said new connection is a request for a new Transmission Control Protocol (TCP) socket connection and said existing connection is a TCP socket connection.",
            "components": []
        },
        {
            "claim_number": "CLM-00034",
            "preamble": "34. An application for monitoring a connection between a server and a passive client device, comprising:",
            "components": [
                {
                    "component": "application software resident on a computer-readable medium and operable to:",
                    "subcomponents": []
                },
                {
                    "component": "continuously monitor whether an input data stream of an existing connection between said server and said passive client device is empty, and if so, determining the presence of a request for a new connection between said server and said passive client device;",
                    "subcomponents": []
                },
                {
                    "component": "close said existing connection in response to the presence of said request for new connection; and",
                    "subcomponents": []
                },
                {
                    "component": "establish said new connection between said server and said passive client device.",
                    "subcomponents": []
                }
            ]
        },
        {
            "claim_number": "CLM-00035",
            "preamble": "35. The application of claim 34 , said application software further operable to process data from said input data stream in response to said input data stream not being empty.",
            "components": []
        },
        {
            "claim_number": "CLM-00036",
            "preamble": "36. The application of claim 34 , said application software further operable to determine the presence of a problem in said existing connection.",
            "components": []
        },
        {
            "claim_number": "CLM-00037",
            "preamble": "37. The application of claim 34 , said application software further operable to determine the presence of at least one exception condition out of a plurality of exception conditions.",
            "components": []
        },
        {
            "claim_number": "CLM-00038",
            "preamble": "38. The application of claim 34 , said application software further operable to receive said request for said new connection from said passive client device.",
            "components": []
        },
        {
            "claim_number": "CLM-00039",
            "preamble": "39. The application of claim 34 , said application software further operable to store said request for said new connection in a socket connection queue.",
            "components": []
        },
        {
            "claim_number": "CLM-00040",
            "preamble": "40. A system for monitoring a connection between a server and a passive client device, comprising:",
            "components": [
                {
                    "component": "means for continuously monitoring whether an input data stream of an existing connection between said server and said passive client device is empty, and if so, determining the presence of a request for a new connection between said server and said passive client device;",
                    "subcomponents": []
                },
                {
                    "component": "means for closing said existing connection in response to the presence of said request for new connection; and",
                    "subcomponents": []
                },
                {
                    "component": "means for establishing said new connection between said server and said passive client device.",
                    "subcomponents": []
                }
            ]
        },
        {
            "claim_number": "CLM-00041",
            "preamble": "41. The system of claim 40 , further comprising means for processing data from said input data stream in response to said input data stream not being empty.",
            "components": []
        },
        {
            "claim_number": "CLM-00042",
            "preamble": "42. The system of claim 40 , further comprising means for determining the presence of a problem in said existing connection.",
            "components": []
        },
        {
            "claim_number": "CLM-00043",
            "preamble": "43. The system of claim 40 , further comprising means for determining the presence of at least one exception condition out of a plurality of exception conditions.",
            "components": []
        },
        {
            "claim_number": "CLM-00044",
            "preamble": "44. The system of claim 40 , further comprising means for receiving said request for said new connection from said passive client device.",
            "components": []
        },
        {
            "claim_number": "CLM-00045",
            "preamble": "45. The system of claim 40 , further comprising means for storing said request for said new connection in a socket connection queue.",
            "components": []
        }
    ],
    "description": [
        "\u00a9Hewlett-Packard Company 2001. A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the patent and trademark office patent file or records, but otherwise reserves all copyright rights whatsoever.",
        "The present invention relates generally to the field of networking, and more particularly to a system and method for monitoring a connection between a server and a passive client device.",
        "Some client devices operate in a passive mode and do not accept commands from or provide status information to the servers with which they have established a connection, such as a TCP (Transmission Control Protocol) connection. The communication between the server and the client device is one way only in the direction from the client device to the server. The client device simply transmits relevant data to the server for processing. No information is provided by the client device to the server regarding the status of the client device or the connection between the server and the client device. Thus, the server does not know when the client device or the connection between the server and the client device becomes non-operational. Most TCP implementations allow in-bound connection requests to be stored into a socket connection queue of the server. A new connection request stored in the socket connection queue is not accepted by the server until the currently open connection is explicitly closed. Thus, data that is being transmitted by the client through a new connection that has not been accepted by the server will be lost forever.",
        "Existing systems may include a TCP socket \u201ckeepalive\u201d option. When the \u201ckeepalive\u201d option is active for a TCP socket and no data has been exchanged across the socket for a period of time, typically two hours, a \u201ckeepalive\u201d probe is sent by the server to the client device. The client device may respond to the probe in one of three ways. The client device may respond with an ACK (acknowledged) signal indicating that everything is fine. In such a case, another \u201ckeepalive\u201d probe is sent following another two hours of inactivity. Alternatively, the client device may respond with a RST (reset) signal indicating that the client device has crashed and rebooted. In such a case, the socket connection is closed. The third option is that the client device does not respond to the \u201ckeepalive\u201d probe. In such a case, it is assumed that the client device has crashed and the socket connection is closed. The period of time after which the \u201ckeepalive\u201d probe is then sent to the client device is typically long and is not configurable by a user. As such, a significant amount of data may be lost between two successive \u201ckeepalive\u201d probes.",
        "In accordance with an embodiment of the present invention, a method for monitoring a connection between a server and a passive client device is disclosed. The method comprises continuously monitoring whether an input data stream of an existing connection between the server and the passive client device is empty, and if so, determining the presence of a request for a new connection between the server and the passive client device, closing the existing connection in response to the presence of the request for new connection, and establishing the new connection between the server and the passive client device.",
        "In accordance with another embodiment of the present invention, a method for monitoring a connection between a server and a passive client device is disclosed. The method comprises continuously monitoring whether there is a problem in an existing connection between the server and the passive client device, and if so, determining the presence of a request for a new connection between the server and the passive client device, closing the existing connection in response to the presence of the request for new connection, and establishing the new connection between the server and the passive client device.",
        "In accordance with a further embodiment of the present invention, a system for monitoring a connection is disclosed. The system comprises a server operable to continuously monitor whether there is a problem in an existing connection between the server and a passive client device, and if so, determining the presence of a request for a new connection between the server and the passive client device, the server further operable to close the existing connection and establish the new connection between the server and the passive client device.",
        "For a more complete understanding of the present invention, the objects and advantages thereof, reference is now made to the following descriptions taken in connection with the accompanying drawings in which:",
        "FIG. 1 is a block diagram of a client-server network in accordance with an embodiment of the present invention; and",
        "FIG. 2 is a flowchart of a method for monitoring a connection between a server and a passive client device according to an embodiment of the present invention.",
        "The preferred embodiment of the present invention and its advantages are best understood by referring to FIGS. 1 through 2 of the drawings, like numerals being used for like and corresponding parts of the various drawings.",
        "There is a desire for a system and method for monitoring a connection between a server and a client device, such as a passive TCP (Transmission Control Protocol) device. A passive TCP device does not provide status information, such as \u201cheartbeats\u201d, to the server. As a result, the server may assume the connection is still valid when the client connection unexpectedly terminates. Therefore, the server may ignore new connection requests from the client device. In a preferred embodiment of the present invention, the server proceeds to establish a new connection with the passive client device if no data is being received from the passive client device via an existing connection or if it determines that there is a problem with the existing connection. The terms \u201cclient\u201d, \u201cclient device\u201d, \u201cpassive client device\u201d and \u201cpassive TCP device\u201d will be used interchangeably herein.",
        "FIG. 1 is a block diagram of a client-server network 10 in accordance with an embodiment of the present invention. Network 10 comprises a client device 12 and a server 14. Server 14 may comprise computer programs (not shown) that interact with a billing system 16. Client 12 provides data to server 14 via a TCP socket connection 18 established therebetween in accordance with a communication protocol, such as TCP. However, client 12 may be a passive client device that does not provide status information regarding client 12 and/or TCP socket connection 18 to server 14. Client 12 may monitor voice and/or data traffic of a remote system and may collect traffic data of the remote system. The collected data may be sent to server 14 for processing, for example by billing system 16 associated with server 14.",
        "TCP/IP (Transmission Control Protocol/Internet Protocol) is a well-known protocol stack where TCP controls the data transfer and IP provides the routing through hardware connections between client 12 and server 14. A socket is an endpoint for communication between two devices, for example client 12 and server 14. In general, TCP messages may be sent and received by opening a socket at each end of a TCP connection and reading and writing data to and from the socket. Once TCP socket connection 18 between client 12 and server 14 has been established, it remains in place until explicitly closed by server 14, even if client 12 may become non-operational.",
        "In general, in order to establish a connection, such as a TCP socket connection, between client 12 and server 14, client 12 transmits a connection request to server 14. A request for establishing a connection may not be immediately accepted upon receipt by server 14 for various reasons. For example, if there is an existing connection between the server and the client at a particular port, then a subsequent request for connection to the same port from the same client may not be accepted unless the existing connection is closed. Whenever a received request for connection cannot be immediately accepted, it is stored in a socket connection queue (not shown) of server 14. Server 14 may comprise a socket connection queue for each port.",
        "FIG. 2 is a flowchart of a method 20 for monitoring a connection between server 14 and client 12 according to an embodiment of the present invention. Method 20 is preferably executed after a TCP connection between server 14 and client 12 is established. In step 22, a timer is initialized. Preferably, the timer is configured to a desired time period which determines the frequency with which the process starting at step 27 may be executed. If desired, the time period may be defined by a user, such as an operator, a system administrator, an end user, and/or the like. A timer parameter may be defined by the user through a user interface. If desired, the timer parameter may be defined by the user in a configuration file. In step 24, the timer is started. After the lapse of the defined time (step 26), an input data stream for TCP socket connection 18 between client 12 and server 14 is read (step 27). A socket timeout may be configured to define a maximum length of time to wait for input in the input data stream. In another embodiment, the use of a timer may be avoided. In such an embodiment, the method for monitoring a connection between server 14 and client 12 may start at step 27 and execute in a continuous loop.",
        "In step 28, a determination is made as to whether there is a connection or I/O (Input/Output) problem. In the preferred embodiment, the presence of an IOException or a SocketException indicates a connection or I/O problem. An IOException signals an I/O problem which may be produced due to a failed or interrupted I/O operation. A SocketException signals the presence of an error in the underlying protocol, such as a TCP error. However, the invention is not so limited and other indications of a connection problem or an I/O problem may be used. If in step 28 it is determined that there is a connection or I/O problem, then the process starting at step 32 may be executed (described in more detail below). If in step 28 it is determined that there is no connection or I/O problem, then in step 30 a determination is made as to whether the input data stream is empty. An empty input data stream at server 14 may indicate an unexpected problem at client 12. If the input data stream is not empty, then data from the input data stream may be processed (step 31). For example, if the data relates to the amount of network traffic at the remote system, then the data may be converted into records usable by billing system 16. Billing system 16 may then create an invoice. The process starting at step 24 may then be executed to start the timer.",
        "If in step 30 it is determined that the input data stream is empty, then the process starting at step 32 may be executed. In step 32, a determination is made as to whether client device 12 has sent a request for a new connection to server 14. The socket connection queue may be examined to determine whether a request for a new connection has been received. If no such request exists, then the process starting at step 24 may be executed to start the timer. If in step 32 it is determined that there is a request for a new connection, then in step 34, the existing connection is closed. In step 36, a new connection is established between client device 12 and server 14. The process starting at step 24 may then be executed to start the timer.",
        "In the illustrated embodiment, server 14 closes an existing connection if the input data stream is empty or if there is a problem with the existing connection, provided that there is a request for a new connection. Thus, data loss that might otherwise occur due to non-acceptance of a new connection request by the server may be avoided.",
        "The preferred embodiment of the present invention is implemented in software. Any programming language, such as Java, C++, C, and/or the like, now known or later developed, may be used for this purpose.",
        "A pseudo code segment that may be used in an exemplary embodiment of the present invention is provided below:",
        "While notDone {\n\n\n\n\n\n\n\n\n\nTry {\n\n\n\n\n\n\n\n\n\nRead data from input stream\n\n\n\n\n\n\n\n\n\nIf no data {\n\n\n\n\n\n\n\n\n\nCheckforNewConnection\n\n\n\nIf (newConnection exists) {\n\n\n\n\n\n\n\n\n\nCloseOldConnection\n\n\n\nServeNewConnection\n\n\n\n\n\n\n\n\n\n}\n\n\n\n\n\n\n\n\n\n}\n\n\n\nelse {\n\n\n\n\n\n\n\n\n\n\u2003ProcessData\n\n\n\n\n\n\n\n\n\n}\n\n\n\n\n\n\n\n\n\n} Catch (IOException, SocketException) {\n\n\n\n\n\n\n\n\n\nCheckforNewConnection\n\n\n\nIf (newConnection exists) {\n\n\n\n\n\n\n\n\n\nCloseOldConnection\n\n\n\nServeNewConnection\n\n\n\n\n\n\n\n\n\n}\n\n\n\n\n\n\n\n\n\n}\n\n\n\n\n\n\n\n\n\n}",
        "A sample code for checking for a new connection implemented in the Java language is provided below:",
        "//---This method checks for new socket connection.\n\n\n\n\n\n\n\n\n\npublic void checkforNewConnection( ) {\n\n\n\n\n\n\n\n\n\ntry {\n\n\n\n\n\n\n\n\n\n//-- Try to accept new connection\n\n\n\nSocket newSocket = serverSocket_.accept( );\n\n\n\n//-- If successful, close the old connection and input stream\n\n\n\ninStream_.close( );\n\n\n\nsocket_.close( );\n\n\n\n//-- Accept the new connection and set the new input stream.\n\n\n\nsocket_=newSocket;\n\n\n\nInStream_=newBufferedInputStream(socket_.getInputStream( ));\n\n\n\n// -- Explicitly set a socket timeout since in Java,\n\n\n\nthe default is no timeout (wait indefinitely)\n\n\n\nsocket_.setSoTimeout(socketTimeOut_);\n\n\n\nSystem.out.printIn( \u201ccheckforNewConnection( ): New\n\n\n\nconnection detected \u201d);\n\n\n\n\n\n\n\n\n\n} catch (IOException ) {\n\n\n\n\n\n\n\n\n\n// -- Ignore the exception since this happens when no new\n\n\n\nconnection request in the queue.\n\n\n\n\n\n\n\n\n\n}\n\n\n\n\n\n\n\n\n\n}",
        "Although in the preferred embodiment of the present invention described above, server 14 waits for the lapse of a defined period of time before it checks for an empty input data stream, the invention is not so limited. In an alternative embodiment, the process starting at step 27 of the flowchart of FIG. 2 may be executed upon receiving a new connection request from client 12.",
        "An advantage of an embodiment of the present invention is that it may be implemented without regard to the type of client being used. Moreover, data loss which might otherwise occur due to a faulty connection between the server and the client may be avoided. An advantage of another embodiment of the present invention is that the performance of the server is not adversely effected because a determination of the presence of a new connection request is made when there is no data in the input stream thereby avoiding unnecessary overhead."
    ],
    "citations": [
        "5280630",
        "5386465",
        "5530802",
        "5657390",
        "5668857",
        "5764916",
        "5905476",
        "5941988",
        "6073177",
        "6160843",
        "6169788",
        "6212175",
        "6216163",
        "6247060",
        "6266709",
        "6331983",
        "6343318",
        "6385203",
        "6421322",
        "6427161",
        "6434620",
        "6463457",
        "6526131",
        "6543048",
        "6615265",
        "6625648",
        "6630885",
        "6769019",
        "6775542",
        "6785708",
        "6791950",
        "6801940",
        "6816455",
        "6829238",
        "6832255",
        "6862625",
        "6870834",
        "7047288",
        "7055173",
        "2001/0031641",
        "2002/0004834",
        "2002/0026491",
        "2002/0055980",
        "2002/0093527",
        "2002/0133611",
        "2002/0143960",
        "2002/0156756",
        "2002/0174073",
        "2002/0174207",
        "2003/0033521",
        "2003/0037163",
        "2003/0069962",
        "2003/0126240",
        "2003/0154244",
        "2003/0154306",
        "2003/0200480",
        "2003/0208541",
        "2004/0081166"
    ],
    "us_classification": "709208",
    "international_classifications": [
        {
            "classification_level": "A",
            "section": "G",
            "classification_class": "06",
            "subclass": "F",
            "main_group": "15",
            "subgroup": "16"
        }
    ]
}